{"version":3,"file":"apps_concierge_src_app_building-manager_building-manager_module_ts.js","mappings":"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","names":["i0","region_r9","id","display_name","name","BuildingFormComponent_ng_container_0_form_1_div_1_mat_option_7_Template","ctx_r4","default_parent","region_list","tz_r10","BuildingFormComponent_ng_container_0_form_1_div_1_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_17_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_18_Template","ctx_r3","form","tmp_1_0","length","_r5","filtered_timezones","timezones","BuildingFormComponent_ng_container_0_form_1_Template","ctx_r0","BuildingFormComponent","AsyncHandler","this","_org","organisation","constructor","super","building","save","loading","loadingChange","EventEmitter","done","FormGroup","FormControl","parent_id","Validators","required","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","location","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","filter","_","toLowerCase","includes","patchValue","ngOnChanges","changes","saveChanges","_this","_asyncToGenerator","value","valid","notifyError","getInvalidFields","join","data","getRawValue","emit","body","tags","authority","description","updateZone","addZone","toPromise","catch","e","message","error","notifySuccess","TIMEZONES_IANA","static","t","i1","core","Xpm","selectors","inputs","outputs","features","decls","vars","consts","i18n_0","$localize","BuildingFormComponent_ng_container_0_Template","BuildingFormComponent_ng_template_1_Template","ctx","_r2","_r3","ctx_r2","BuildingModalComponent","_data","_dialog_ref","save_state","close","d","Date","now","MAT_DIALOG_DATA","template","rf","BuildingModalComponent_button_3_Template","$event","BuildingModalComponent_footer_6_Template","BuildingManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_buildings","combineLatest","building_list","initialised","pipe","map","regions","list","zone","search","bld","parent","find","region","level_count","levelsForBuilding","setFilters","next","getValue","setSearchString","editBuilding","PlaceZone","open","afterClosed","editBuildingMetadata","AppSettingsModalComponent","setTimeout","reload","removeBuilding","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","i2","Yz7","factory","ɵfac","providedIn","tmp_0_0","data_r6","data_r7","BuildingListComponent_ng_template_4_img_0_Template","BuildingListComponent_ng_template_4_span_1_Template","stopPropagation","_r17","row_r11","row","ctx_r16","settings","time_before","ctx_r19","time_after","ctx_r21","resources","ctx_r14","_r25","ctx_r24","ctx_r26","ctx_r27","loadSettings","ctx_r28","BuildingListComponent_ng_template_6_div_26_Template","ctx_r29","saveSettings","ctx_r30","_r12","_r13","BuildingListComponent","_manager","buildings","event","preventDefault","unencrypted","querySettings","encryption_level","EncryptionLevel","None","yaml","settings_string","auto_release","console","log","_this2","PlaceSettings","old_settings","updateSettings","addSettings","BuildingListComponent_ng_template_2_Template","BuildingListComponent_ng_template_4_Template","BuildingListComponent_ng_template_6_Template","_c0","_c1","_c2","_c3","_r1","BuildingManagerComponent","_state","newBuilding","attrs","ROUTES","path","component","BuildingManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/building-manager/building-form.component.ts","./apps/concierge/src/app/building-manager/building-modal.component.ts","./apps/concierge/src/app/building-manager/building-management.service.ts","./apps/concierge/src/app/building-manager/building-list.component.ts","./apps/concierge/src/app/building-manager/building-manager.component.ts","./apps/concierge/src/app/building-manager/building-manager.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'building-form',\n    template: `\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <form\n                building\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div\n                    class=\"flex flex-col\"\n                    *ngIf=\"(region_list | async)?.length\"\n                >\n                    <label for=\"region\" i18n=\"@@displayNameLabel\">\n                        Region:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            name=\"region\"\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Region...\"\n                        >\n                            <mat-option [value]=\"default_parent\"\n                                >None</mat-option\n                            >\n                            <mat-option\n                                *ngFor=\"let region of region_list | async\"\n                                [value]=\"region.id\"\n                            >\n                                {{ region.display_name || region.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"address\" i18n=\"@@displayNameLabel\">\n                        Location:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"address\"\n                            placeholder=\"Location or Address...\"\n                            formControlName=\"location\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving building...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingFormComponent extends AsyncHandler {\n    @Input() public building: Building | null = null;\n    @Input() public save: number = 0;\n    @Input() public loading = false;\n    @Output() public loadingChange = new EventEmitter<boolean>();\n    @Output() public done = new EventEmitter();\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        parent_id: new FormControl(this._org.organisation.id, [\n            Validators.required,\n        ]),\n        display_name: new FormControl('', [Validators.required]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        location: new FormControl(''),\n    });\n\n    public get default_parent() {\n        return this._org.organisation.id;\n    }\n\n    constructor(private _org: OrganisationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(\n                ({ timezone }) =>\n                    (this.filtered_timezones = this.timezones.filter((_) =>\n                        _.toLowerCase().includes(timezone.toLowerCase())\n                    ))\n            )\n        );\n        if (this.building) this.form.patchValue(this.building);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.building && this.building) {\n            this.form.patchValue(this.building);\n        }\n        if (changes.save && this.save) this.saveChanges();\n    }\n\n    public async saveChanges() {\n        this.form.patchValue({\n            parent_id: this.form.value.parent_id || this._org.organisation.id,\n        });\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = this.form.getRawValue();\n        this.loading = true;\n        this.loadingChange.emit(true);\n        const body = {\n            ...data,\n            tags: ['building'],\n            name: `BLD ${authority().description} ${data.display_name}`,\n        };\n        const building = await (data.id\n            ? updateZone(data.id, body)\n            : addZone(body)\n        )\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error saving building: ${e.message || e.error || e}`\n                );\n                this.loading = false;\n                this.loadingChange.emit(false);\n                throw e;\n            });\n        notifySuccess('Successfully saved building.');\n        this.loading = false;\n        this.loadingChange.emit(false);\n        this.done.emit(building);\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Building } from '@placeos/organisation';\n\n@Component({\n    selector: 'building-modal',\n    template: `\n        <header>\n            <h2>{{ building.id ? 'Edit' : 'Add' }} Building</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\">\n            <building-form\n                [building]=\"building\"\n                [save]=\"save_state\"\n                [(loading)]=\"loading\"\n                (done)=\"close($event)\"\n            ></building-form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class BuildingModalComponent {\n    public loading = false;\n    public save_state = 0;\n    public readonly building = this._data;\n\n    public readonly close = (d?) => this._dialog_ref.close(d);\n    public readonly save = () => (this.save_state = Date.now());\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: Building | undefined,\n        private _dialog_ref: MatDialogRef<BuildingModalComponent>\n    ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BuildingModalComponent } from './building-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\n\nexport interface BuildingListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BuildingManagementService {\n    private _options = new BehaviorSubject<BuildingListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_buildings = combineLatest([\n        this._org.region_list,\n        this._org.building_list,\n        this._options,\n        this._org.initialised,\n    ]).pipe(\n        map(([regions, list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const bld of list) {\n                const parent = regions.find((_) => _.id === bld.parent_id);\n                if (parent) {\n                    (bld as any).region = parent.display_name || parent.name;\n                }\n                (bld as any).level_count =\n                    this._org.levelsForBuilding(bld)?.length || 0;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<BuildingListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editBuilding(building: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(BuildingModalComponent, {\n            data: building,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public editBuildingMetadata(zone: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public async removeBuilding(building: Building) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${building.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(building.id).toPromise();\n        this._org.removeZone({ id: building.id, tags: ['building'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { BuildingManagementService } from './building-management.service';\nimport {\n    EncryptionLevel,\n    PlaceSettings,\n    addSettings,\n    querySettings,\n    showSettings,\n    updateSettings,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport * as yaml from 'js-yaml';\nimport { notifySuccess } from '@placeos/common';\n\n@Component({\n    selector: 'building-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[60rem] w-full h-full\"\n                [dataSource]=\"buildings\"\n                [columns]=\"[\n                    'display_name',\n                    'address',\n                    'timezone',\n                    'region',\n                    'level_count',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Location',\n                    'Timezone',\n                    'Region',\n                    'Levels',\n                    ' '\n                ]\"\n                [column_size]=\"['12r', 'flex', '12r', '10r', '6r', '3.75r']\"\n                [template]=\"{\n                    images: image_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No buildings\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #image_template let-data=\"data\">\n            <img\n                auth\n                *ngIf=\"data.length\"\n                [source]=\"data[0]\"\n                class=\"max-h-[3rem] max-w-[8rem]\"\n            />\n            <span *ngIf=\"!data.length\" class=\"opacity-30\">No Images</span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matRipple [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editBuildingMetadata(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-xl\">edit_square</app-icon>\n                            <span>App Configuration</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"editBuilding(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-xl\">edit</app-icon>\n                            <span>Edit Building</span>\n                        </div>\n                    </button>\n                    <button\n                        mat-menu-item\n                        (click)=\"loadSettings($event, row.id)\"\n                        (mouseenter)=\"\n                            !settings[row.id]\n                                ? loadSettings($event, row.id)\n                                : ''\n                        \"\n                        [matMenuTriggerFor]=\"auto_release_menu\"\n                    >\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                                >release_alert</app-icon\n                            >\n                            <span>Auto-release Settings</span>\n                        </div>\n                        <mat-menu #auto_release_menu=\"matMenu\">\n                            <div\n                                *ngIf=\"settings[row.id]\"\n                                (click)=\"$event.stopPropagation()\"\n                                class=\"px-2\"\n                            >\n                                <label>Before Event</label>\n                                <a-duration-field\n                                    [min]=\"0\"\n                                    [(ngModel)]=\"settings[row.id].time_before\"\n                                ></a-duration-field>\n                                <label>After Event</label>\n                                <a-duration-field\n                                    [min]=\"0\"\n                                    [(ngModel)]=\"settings[row.id].time_after\"\n                                ></a-duration-field>\n                                <label>Event Types</label>\n                                <mat-form-field\n                                    appearance=\"outline\"\n                                    class=\"w-full\"\n                                >\n                                    <mat-select\n                                        multiple\n                                        [(ngModel)]=\"settings[row.id].resources\"\n                                        placeholder=\"Set Event Types...\"\n                                    >\n                                        <mat-option value=\"room\"\n                                            >Rooms</mat-option\n                                        >\n                                        <mat-option value=\"desk\"\n                                            >Desks</mat-option\n                                        >\n                                        <mat-option value=\"visitor\"\n                                            >Visitors</mat-option\n                                        >\n                                        <mat-option value=\"parking\"\n                                            >Parking</mat-option\n                                        >\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                            <button\n                                btn\n                                matRipple\n                                class=\"w-[calc(100%-1rem)] mx-auto\"\n                                (click)=\"saveSettings(row.id)\"\n                            >\n                                Save\n                            </button>\n                        </mat-menu>\n                    </button>\n                    <button mat-menu-item (click)=\"removeBuilding(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon class=\"text-error text-xl\"\n                                >delete</app-icon\n                            >\n                            <span>Delete Building</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingListComponent {\n    public readonly buildings = this._manager.filtered_buildings;\n    public settings = {};\n\n    public readonly editBuilding = (building) =>\n        this._manager.editBuilding(building);\n\n    public readonly editBuildingMetadata = (building) =>\n        this._manager.editBuildingMetadata(building);\n\n    public readonly removeBuilding = (building) =>\n        this._manager.removeBuilding(building);\n\n    constructor(private _manager: BuildingManagementService) {}\n\n    public async loadSettings(event: Event, id: string) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.settings[id] = {};\n        const settings = await querySettings({ parent_id: id })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        const unencrypted = settings.find(\n            (_) => _.encryption_level === EncryptionLevel.None\n        );\n        if (!unencrypted) return;\n        try {\n            this.settings[id] =\n                yaml.load(unencrypted.settings_string)?.auto_release || {};\n        } catch {}\n        console.log(\n            'Settings:',\n            this.settings[id],\n            unencrypted.settings_string\n        );\n    }\n\n    public async saveSettings(id: string) {\n        const settings = await querySettings({ parent_id: id })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        let unencrypted = settings.find(\n            (_) => _.encryption_level === EncryptionLevel.None\n        );\n        if (!unencrypted) {\n            unencrypted = new PlaceSettings({\n                parent_id: id,\n                encryption_level: EncryptionLevel.None,\n                settings_string: '',\n            });\n        }\n        let old_settings = {};\n        try {\n            old_settings = yaml.load(unencrypted.settings_string) || {};\n        } catch {}\n        (unencrypted as any).settings_string = yaml.dump({\n            ...old_settings,\n            auto_release: this.settings[id],\n        });\n        unencrypted.id\n            ? await updateSettings(unencrypted.id, unencrypted).toPromise()\n            : await addSettings(unencrypted).toPromise();\n        notifySuccess('Auto-release settings updated');\n    }\n}\n","import { Component } from '@angular/core';\nimport { Building } from '@placeos/organisation';\nimport { BuildingManagementService } from './building-management.service';\n\n@Component({\n    selector: '[app-building-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header class=\"flex items-center justify-between mb-2 p-8\">\n                    <h2 class=\"text-2xl font-medium\">Building Management</h2>\n                    <button btn matRipple (click)=\"newBuilding()\">\n                        Add Building\n                    </button>\n                </header>\n                <building-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></building-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class BuildingManagerComponent {\n    public readonly newBuilding = () => this._state.editBuilding();\n\n    constructor(private _state: BuildingManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { BuildingManagerComponent } from './building-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { BuildingListComponent } from './building-list.component';\nimport { BuildingFormComponent } from './building-form.component';\nimport { BuildingModalComponent } from './building-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: BuildingManagerComponent },\n    { path: 'new', component: BuildingManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        BuildingManagerComponent,\n        BuildingListComponent,\n        BuildingFormComponent,\n        BuildingModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BuildingManagerModule {}\n"],"x_google_ignoreList":[]}