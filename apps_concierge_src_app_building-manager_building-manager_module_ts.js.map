{"version":3,"file":"apps_concierge_src_app_building-manager_building-manager_module_ts.js","mappings":"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","names":["i0","region_r9","id","display_name","name","BuildingFormComponent_ng_container_0_form_1_div_1_mat_option_7_Template","ctx_r4","default_parent","region_list","tz_r10","BuildingFormComponent_ng_container_0_form_1_div_1_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_17_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_18_Template","ctx_r3","form","tmp_1_0","length","_r5","filtered_timezones","timezones","BuildingFormComponent_ng_container_0_form_1_Template","ctx_r0","BuildingFormComponent","AsyncHandler","this","_org","organisation","constructor","super","building","save","loading","loadingChange","EventEmitter","done","FormGroup","FormControl","parent_id","Validators","required","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","location","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","patchValue","ngOnChanges","changes","saveChanges","_this","_asyncToGenerator","value","valid","notifyError","getInvalidFields","join","data","getRawValue","emit","body","tags","authority","description","updateZone","addZone","toPromise","catch","e","message","error","notifySuccess","TIMEZONES_IANA","filter","_","toLowerCase","includes","static","t","i1","core","Xpm","selectors","inputs","outputs","features","decls","vars","consts","i18n_0","$localize","BuildingFormComponent_ng_container_0_Template","BuildingFormComponent_ng_template_1_Template","ctx","_r2","_r3","ctx_r2","BuildingModalComponent","_data","_dialog_ref","save_state","close","d","Date","now","MAT_DIALOG_DATA","template","rf","BuildingModalComponent_button_3_Template","$event","BuildingModalComponent_footer_6_Template","_r6","ctx_r5","settings","time_before","ctx_r7","time_after","ctx_r8","resources","ctx_r1","_r10","ctx_r9","AutoReleaseSettingsModalComponent","_id","_settings","loadSettings","unencrypted","querySettings","pipe","map","find","encryption_level","EncryptionLevel","None","yaml","settings_string","auto_release","_this2","PlaceSettings","old_settings","updateSettings","addSettings","metadata_key","get","details","showMetadata","updateMetadata","i2","AutoReleaseSettingsModalComponent_button_3_Template","AutoReleaseSettingsModalComponent_main_4_Template","AutoReleaseSettingsModalComponent_footer_5_Template","AutoReleaseSettingsModalComponent_ng_template_6_Template","_r4","induction_details","is_enabled","_r9","InductionSettingsModalComponent","_zone_id","visitor_kiosk_app","bld_metadata","org_metadata","org_settings","Promise","all","induction_enabled","disableClose","metadata","new_metadata","result","err","console","i3","InductionSettingsModalComponent_button_3_Template","InductionSettingsModalComponent_main_4_Template","InductionSettingsModalComponent_footer_5_Template","InductionSettingsModalComponent_ng_template_6_Template","i_r2","index","item_list","email","ctx_r6","splice","ItemListModalComponent","_bld_id","identify","item","items","support_issue_types","resp","push","ItemListModalComponent_div_9_Template","BuildingManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_buildings","combineLatest","building_list","initialised","regions","list","zone","search","bld","parent","region","level_count","levelsForBuilding","setFilters","next","getValue","setSearchString","editBuilding","PlaceZone","open","afterClosed","editBuildingMetadata","AppSettingsModalComponent","setTimeout","reload","setAutoRelease","setInduction","setSupportIssueTypes","removeBuilding","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","Yz7","factory","ɵfac","providedIn","tmp_0_0","data_r6","data_r7","BuildingListComponent_ng_template_4_img_0_Template","BuildingListComponent_ng_template_4_span_1_Template","row_r11","_r14","row","ctx_r13","ctx_r15","ctx_r16","ctx_r17","ctx_r18","ctx_r19","_r12","BuildingListComponent","_manager","buildings","BuildingListComponent_ng_template_2_Template","BuildingListComponent_ng_template_4_Template","BuildingListComponent_ng_template_6_Template","_c0","_c1","_c2","_c3","_r1","BuildingManagerComponent","_state","newBuilding","attrs","ROUTES","path","component","BuildingManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild","MapLocation","type","position","map_id","asset_id","x","map_width","y","map_height","variance","last_seen","getUnixTime","level","at_location","coordinates_from"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/building-manager/building-form.component.ts","./apps/concierge/src/app/building-manager/building-modal.component.ts","./apps/concierge/src/app/building-manager/auto-release-settings-modal.component.ts","./apps/concierge/src/app/building-manager/induction-settings-modal.component.ts","./apps/concierge/src/app/building-manager/item-list-modal.component.ts","./apps/concierge/src/app/building-manager/building-management.service.ts","./apps/concierge/src/app/building-manager/building-list.component.ts","./apps/concierge/src/app/building-manager/building-manager.component.ts","./apps/concierge/src/app/building-manager/building-manager.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'building-form',\n    template: `\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <form\n                building\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div\n                    class=\"flex flex-col\"\n                    *ngIf=\"(region_list | async)?.length\"\n                >\n                    <label for=\"region\" i18n=\"@@displayNameLabel\">\n                        Region:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            name=\"region\"\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Region...\"\n                        >\n                            <mat-option [value]=\"default_parent\"\n                                >None</mat-option\n                            >\n                            <mat-option\n                                *ngFor=\"let region of region_list | async\"\n                                [value]=\"region.id\"\n                            >\n                                {{ region.display_name || region.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"address\" i18n=\"@@displayNameLabel\">\n                        Location:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"address\"\n                            placeholder=\"Location or Address...\"\n                            formControlName=\"location\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving building...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingFormComponent extends AsyncHandler {\n    @Input() public building: Building | null = null;\n    @Input() public save: number = 0;\n    @Input() public loading = false;\n    @Output() public loadingChange = new EventEmitter<boolean>();\n    @Output() public done = new EventEmitter();\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n    public readonly region_list = this._org.region_list;\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        parent_id: new FormControl(this._org.organisation.id, [\n            Validators.required,\n        ]),\n        display_name: new FormControl('', [Validators.required]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        location: new FormControl(''),\n    });\n\n    public get default_parent() {\n        return this._org.organisation.id;\n    }\n\n    constructor(private _org: OrganisationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(() => this._updateTimezoneList())\n        );\n        if (this.building) this.form.patchValue(this.building);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.building && this.building) {\n            this.form.patchValue(this.building);\n        }\n        if (changes.save && this.save) this.saveChanges();\n    }\n\n    public async saveChanges() {\n        this.form.patchValue({\n            parent_id: this.form.value.parent_id || this._org.organisation.id,\n        });\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = this.form.getRawValue();\n        this.loading = true;\n        this.loadingChange.emit(true);\n        const body = {\n            ...data,\n            tags: ['building'],\n            name: `BLD ${authority().description} ${data.display_name}`,\n        };\n        const building = await (data.id\n            ? updateZone(data.id, body)\n            : addZone(body)\n        )\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error saving building: ${e.message || e.error || e}`\n                );\n                this.loading = false;\n                this.loadingChange.emit(false);\n                throw e;\n            });\n        notifySuccess('Successfully saved building.');\n        this.loading = false;\n        this.loadingChange.emit(false);\n        this.done.emit(building);\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Building } from '@placeos/organisation';\n\n@Component({\n    selector: 'building-modal',\n    template: `\n        <header>\n            <h2>{{ building.id ? 'Edit' : 'Add' }} Building</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\">\n            <building-form\n                [building]=\"building\"\n                [save]=\"save_state\"\n                [(loading)]=\"loading\"\n                (done)=\"close($event)\"\n            ></building-form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class BuildingModalComponent {\n    public loading = false;\n    public save_state = 0;\n    public readonly building = this._data;\n\n    public readonly close = (d?) => this._dialog_ref.close(d);\n    public readonly save = () => (this.save_state = Date.now());\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: Building | undefined,\n        private _dialog_ref: MatDialogRef<BuildingModalComponent>\n    ) {}\n}\n","import { SettingsService, notifySuccess } from '@placeos/common';\nimport {\n    EncryptionLevel,\n    PlaceSettings,\n    addSettings,\n    querySettings,\n    showMetadata,\n    updateMetadata,\n    updateSettings,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport * as yaml from 'js-yaml';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'auto-release-modal',\n    template: `\n        <header\n            class=\"flex items-center justify-between border-b border-gray-300 p-4\"\n        >\n            <h3 class=\"text-xl font-medium\">Auto-Release Settings</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon class=\"text-2xl\">close</app-icon>\n            </button>\n        </header>\n        <main class=\"px-2 w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <label>Before Event</label>\n            <a-duration-field\n                [min]=\"0\"\n                [(ngModel)]=\"settings.time_before\"\n            ></a-duration-field>\n            <label>After Event</label>\n            <a-duration-field\n                [min]=\"0\"\n                [(ngModel)]=\"settings.time_after\"\n            ></a-duration-field>\n            <label>Event Types</label>\n            <mat-form-field appearance=\"outline\" class=\"w-full\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"settings.resources\"\n                    placeholder=\"Set Event Types...\"\n                >\n                    <!-- <mat-option value=\"room\">\n                        Rooms\n                    </mat-option> -->\n                    <mat-option value=\"desk\"> Desks </mat-option>\n                    <mat-option value=\"visitor\"> Visitors </mat-option>\n                    <mat-option value=\"parking\"> Parking </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </main>\n        <footer class=\"p-4 flex justify-end\" *ngIf=\"!loading\">\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-32 space-y-2\"\n            >\n                <mat-spinner [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AutoReleaseSettingsModalComponent {\n    public loading = '';\n    public readonly id = this._id;\n    public settings = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _id: string,\n        private _dialog_ref: MatDialogRef<AutoReleaseSettingsModalComponent>,\n        private _settings: SettingsService\n    ) {}\n\n    public ngOnInit() {\n        this.loadSettings(this.id);\n    }\n\n    public async loadSettings(id: string) {\n        this.loading = 'Loading auto-release settings for building...';\n        this.settings = {};\n        const settings = await querySettings({ parent_id: id })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        const unencrypted = settings.find(\n            (_) => _.encryption_level === EncryptionLevel.None\n        );\n        if (!unencrypted) return;\n        try {\n            this.settings =\n                yaml.load(unencrypted.settings_string)?.auto_release || {};\n        } catch {}\n        this.loading = '';\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to auto-release settings...';\n        const settings = await querySettings({ parent_id: this.id })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        let unencrypted = settings.find(\n            (_) => _.encryption_level === EncryptionLevel.None\n        );\n        if (!unencrypted) {\n            unencrypted = new PlaceSettings({\n                parent_id: this.id,\n                encryption_level: EncryptionLevel.None,\n                settings_string: '',\n            });\n        }\n        let old_settings = {};\n        try {\n            old_settings = yaml.load(unencrypted.settings_string) || {};\n        } catch {}\n        (unencrypted as any).settings_string = yaml.dump({\n            ...old_settings,\n            auto_release: this.settings,\n        });\n        unencrypted.id\n            ? await updateSettings(unencrypted.id, unencrypted).toPromise()\n            : await addSettings(unencrypted).toPromise();\n\n        const metadata_key =\n            this._settings.get('app.workplace_metadata_key') || 'workplace_app';\n        const metadata = await showMetadata(this.id, metadata_key).toPromise();\n        const details: any = metadata.details || {};\n        details.auto_release = this.settings;\n        await updateMetadata(this.id, {\n            name: metadata_key,\n            details,\n            description: '',\n        }).toPromise();\n        notifySuccess('Auto-release settings updated');\n        this.loading = '';\n        this._dialog_ref.close();\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SettingsService, notifyError, notifySuccess } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport {\n    querySettings,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\n\n@Component({\n    selector: 'induction-settings-modal',\n    template: `\n        <header\n            class=\"flex items-center justify-between border-b border-gray-300 p-4\"\n        >\n            <h3 class=\"text-xl font-medium\">Induction Settings</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon class=\"text-2xl\">close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"p-4 flex flex-col space-y-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <mat-form-field\n                appearance=\"outline\"\n                class=\"w-[36rem] max-w-[80vw] h-[50vh]\"\n            >\n                <textarea\n                    matInput\n                    [(ngModel)]=\"induction_details\"\n                    placeholder=\"Induction Details\"\n                    class=\"w-[34rem] max-w-[calc(80vw-2rem)] h-[calc(50vh-2rem)] resize-none\"\n                ></textarea>\n            </mat-form-field>\n            <mat-checkbox [(ngModel)]=\"is_enabled\">\n                Enable Induction for Building\n            </mat-checkbox>\n        </main>\n        <footer class=\"px-4 pb-4 flex justify-end\" *ngIf=\"!loading\">\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-32 space-y-2\"\n            >\n                <mat-spinner [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class InductionSettingsModalComponent {\n    public loading = '';\n    public induction_details: string = '';\n    public is_enabled: boolean = false;\n    public settings: Record<string, any> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _zone_id: string,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog_ref: MatDialogRef<InductionSettingsModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        if (!this._zone_id) return;\n        this.loadSettings();\n    }\n\n    public async loadSettings() {\n        this.loading = 'Loading induction settings for building...';\n        const visitor_kiosk_app =\n            this._settings.get('app.visitor_kiosk_app') || 'visitor-kiosk_app';\n        this.settings = {};\n        const [bld_metadata, org_metadata, org_settings] = await Promise.all([\n            await showMetadata(this._zone_id, visitor_kiosk_app).toPromise(),\n            await showMetadata(\n                this._org.organisation.id,\n                visitor_kiosk_app\n            ).toPromise(),\n            await showMetadata(\n                this._org.organisation.id,\n                'settings'\n            ).toPromise(),\n        ]);\n        this.settings = {\n            ...org_settings.details,\n            ...org_metadata.details,\n            ...bld_metadata.details,\n        };\n        this.induction_details = this.settings.induction_details || '';\n        this.is_enabled = this.settings.induction_enabled ?? false;\n        this.loading = '';\n    }\n\n    public async save() {\n        this.loading = 'Saving induction settings...';\n        const visitor_kiosk_app =\n            this._settings.get('app.visitor_kiosk_app') || 'visitor-kiosk_app';\n        this._dialog_ref.disableClose = true;\n        const metadata = await showMetadata(\n            this._zone_id,\n            visitor_kiosk_app\n        ).toPromise();\n        const new_metadata = {\n            ...metadata.details,\n            induction_details: this.induction_details,\n            induction_enabled: this.is_enabled,\n        };\n        const result = await updateMetadata(this._zone_id, {\n            name: metadata.name || visitor_kiosk_app,\n            description: metadata.description || '',\n            details: new_metadata,\n        })\n            .toPromise()\n            .catch((err) => {\n                console.error(err);\n                notifyError('Error saving induction settings');\n            });\n        this.loading = '';\n        if (result) {\n            notifySuccess('Successfully saved induction settings');\n            this._dialog_ref.close();\n        }\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SettingsService, notify, notifyError } from '@placeos/common';\nimport { Building } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\n\n@Component({\n    selector: 'item-list-modal',\n    template: `\n        <header>\n            <h2>Support Request Issue Types</h2>\n            <button icon matRipple mat-dialog-close=\"\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"w-[36rem] overflow-auto h-[50vh] p-2 space-y-2\">\n            <button\n                btn\n                matRipple\n                class=\"w-full\"\n                (click)=\"item_list.push({ name: '', email: '' })\"\n            >\n                Add Item\n            </button>\n            <div\n                class=\"w-full flex items-center space-x-2\"\n                *ngFor=\"let item of item_list; let i = index; trackBy: identify\"\n            >\n                <input\n                    type=\"text\"\n                    class=\"flex-1 border border-base-200 px-4 py-3 rounded\"\n                    placeholder=\"Issue Name\"\n                    [(ngModel)]=\"item_list[i].name\"\n                />\n                <input\n                    type=\"email\"\n                    class=\"flex-[2] border border-base-200 px-4 py-3 rounded\"\n                    placeholder=\"Issue Email\"\n                    [(ngModel)]=\"item_list[i].email\"\n                />\n                <button\n                    icon\n                    matRipple\n                    matTooltip=\"Remove Item\"\n                    (click)=\"item_list.splice(i, 1)\"\n                >\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center justify-end p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class ItemListModalComponent {\n    public item_list: { name: string; email: string }[] = [];\n    public loading: boolean = false;\n\n    public identify = (index: number, item: any) => index;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _bld_id: string,\n        private _settings: SettingsService,\n        private _dialog_ref: MatDialogRef<ItemListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        const metadata_key =\n            this._settings.get('app.workplace_metadata_key') || 'workplace_app';\n        const metadata: any = await showMetadata(\n            this._bld_id,\n            metadata_key\n        ).toPromise();\n        const items = metadata?.details?.support_issue_types || [];\n        this.item_list = items;\n    }\n\n    public async save() {\n        const metadata_key =\n            this._settings.get('app.workplace_metadata_key') || 'workplace_app';\n        this.loading = true;\n        const items = this.item_list.filter((_) => _);\n        const metadata: any = await showMetadata(\n            this._bld_id,\n            metadata_key\n        ).toPromise();\n        metadata.details.support_issue_types = items;\n        const resp = await updateMetadata(this._bld_id, {\n            name: metadata_key,\n            details: metadata.details,\n            description: metadata.description || '',\n        })\n            .toPromise()\n            .catch((_) => {\n                notifyError(`Failed to save issue types. ${_}`);\n            });\n        this.loading = false;\n        if (resp) this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BuildingModalComponent } from './building-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\nimport { AutoReleaseSettingsModalComponent } from './auto-release-settings-modal.component';\nimport { InductionSettingsModalComponent } from './induction-settings-modal.component';\nimport { ItemListModalComponent } from './item-list-modal.component';\n\nexport interface BuildingListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BuildingManagementService {\n    private _options = new BehaviorSubject<BuildingListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_buildings = combineLatest([\n        this._org.region_list,\n        this._org.building_list,\n        this._options,\n        this._org.initialised,\n    ]).pipe(\n        map(([regions, list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const bld of list) {\n                const parent = regions.find((_) => _.id === bld.parent_id);\n                if (parent) {\n                    (bld as any).region = parent.display_name || parent.name;\n                }\n                (bld as any).level_count =\n                    this._org.levelsForBuilding(bld)?.length || 0;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<BuildingListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editBuilding(building: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(BuildingModalComponent, {\n            data: building,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public editBuildingMetadata(zone: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public setAutoRelease(building: PlaceZone) {\n        if (!building?.id) return;\n        this._dialog.open(AutoReleaseSettingsModalComponent, {\n            data: building.id,\n        });\n    }\n\n    public setInduction(building: PlaceZone) {\n        if (!building?.id) return;\n        this._dialog.open(InductionSettingsModalComponent, {\n            data: building.id,\n        });\n    }\n\n    public setSupportIssueTypes(building: PlaceZone) {\n        if (!building?.id) return;\n        this._dialog.open(ItemListModalComponent, {\n            data: building.id,\n        });\n    }\n\n    public async removeBuilding(building: Building) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${building.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(building.id).toPromise();\n        this._org.removeZone({ id: building.id, tags: ['building'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { BuildingManagementService } from './building-management.service';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'building-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[60rem] w-full h-full\"\n                [dataSource]=\"buildings\"\n                [columns]=\"[\n                    'display_name',\n                    'address',\n                    'timezone',\n                    'region',\n                    'level_count',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Location',\n                    'Timezone',\n                    'Region',\n                    'Levels',\n                    ' '\n                ]\"\n                [column_size]=\"['12r', 'flex', '12r', '10r', '6r', '3.75r']\"\n                [template]=\"{\n                    images: image_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No buildings\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #image_template let-data=\"data\">\n            <img\n                auth\n                *ngIf=\"data.length\"\n                [source]=\"data[0]\"\n                class=\"max-h-[3rem] max-w-[8rem]\"\n            />\n            <span *ngIf=\"!data.length\" class=\"opacity-30\">No Images</span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matRipple [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editBuildingMetadata(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-xl\">edit_square</app-icon>\n                            <span>App Configuration</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"editBuilding(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-xl\">edit</app-icon>\n                            <span>Edit Building</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"setAutoRelease(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                            >\n                                release_alert\n                            </app-icon>\n                            <span>Auto-release Settings</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"setInduction(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                            >\n                                badge\n                            </app-icon>\n                            <span>Induction Settings</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"setSupportIssueTypes(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                            >\n                                support_agent\n                            </app-icon>\n                            <span>Support Request Types</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeBuilding(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon class=\"text-error text-xl\">\n                                delete\n                            </app-icon>\n                            <span>Delete Building</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingListComponent {\n    public readonly buildings = this._manager.filtered_buildings;\n    public settings = {};\n\n    public readonly editBuilding = (building) =>\n        this._manager.editBuilding(building);\n\n    public readonly editBuildingMetadata = (building) =>\n        this._manager.editBuildingMetadata(building);\n\n    public readonly removeBuilding = (building) =>\n        this._manager.removeBuilding(building);\n\n    public readonly setAutoRelease = (building) =>\n        this._manager.setAutoRelease(building);\n\n    public readonly setInduction = (building) =>\n        this._manager.setInduction(building);\n\n    public readonly setSupportIssueTypes = (building) =>\n        this._manager.setSupportIssueTypes(building);\n\n    constructor(\n        private _manager: BuildingManagementService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { Building } from '@placeos/organisation';\nimport { BuildingManagementService } from './building-management.service';\n\n@Component({\n    selector: '[app-building-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header class=\"flex items-center justify-between mb-2 p-8\">\n                    <h2 class=\"text-2xl font-medium\">Building Management</h2>\n                    <button btn matRipple (click)=\"newBuilding()\">\n                        Add Building\n                    </button>\n                </header>\n                <building-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></building-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class BuildingManagerComponent {\n    public readonly newBuilding = () => this._state.editBuilding();\n\n    constructor(private _state: BuildingManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { BuildingManagerComponent } from './building-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { BuildingListComponent } from './building-list.component';\nimport { BuildingFormComponent } from './building-form.component';\nimport { BuildingModalComponent } from './building-modal.component';\nimport { AutoReleaseSettingsModalComponent } from './auto-release-settings-modal.component';\nimport { InductionSettingsModalComponent } from './induction-settings-modal.component';\nimport { ItemListModalComponent } from './item-list-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: BuildingManagerComponent },\n    { path: 'new', component: BuildingManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        BuildingManagerComponent,\n        BuildingListComponent,\n        BuildingFormComponent,\n        BuildingModalComponent,\n        AutoReleaseSettingsModalComponent,\n        InductionSettingsModalComponent,\n        ItemListModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BuildingManagerModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}