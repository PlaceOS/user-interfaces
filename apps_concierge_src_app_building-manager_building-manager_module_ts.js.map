{"version":3,"file":"apps_concierge_src_app_building-manager_building-manager_module_ts.js","mappings":"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","names":["i0","region_r9","id","display_name","name","BuildingFormComponent_ng_container_0_form_1_div_1_mat_option_7_Template","ctx_r4","default_parent","region_list","tz_r10","BuildingFormComponent_ng_container_0_form_1_div_1_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_17_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_18_Template","ctx_r3","form","tmp_1_0","length","_r5","filtered_timezones","timezones","BuildingFormComponent_ng_container_0_form_1_Template","ctx_r0","BuildingFormComponent","AsyncHandler","this","_org","organisation","constructor","super","building","save","loading","loadingChange","EventEmitter","done","FormGroup","FormControl","parent_id","Validators","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","location","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","filter","_","toLowerCase","includes","patchValue","ngOnChanges","changes","saveChanges","_this","_asyncToGenerator","value","valid","notifyError","getInvalidFields","join","data","getRawValue","emit","body","tags","authority","description","updateZone","addZone","toPromise","catch","e","message","error","notifySuccess","TIMEZONES_IANA","t","i1","core","Xpm","selectors","inputs","outputs","features","decls","vars","consts","i18n_0","$localize","BuildingFormComponent_ng_container_0_Template","BuildingFormComponent_ng_template_1_Template","ctx","_r1","_r3","ctx_r2","BuildingModalComponent","_data","_dialog_ref","save_state","close","d","Date","now","MAT_DIALOG_DATA","template","rf","BuildingModalComponent_button_3_Template","$event","BuildingModalComponent_footer_6_Template","BuildingManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_buildings","combineLatest","building_list","initialised","pipe","map","regions","list","zone","search","bld","parent","find","region","level_count","levelsForBuilding","setFilters","next","getValue","setSearchString","editBuilding","PlaceZone","open","afterClosed","setTimeout","reload","editBuildingMetadata","AppSettingsModalComponent","removeBuilding","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","i2","Yz7","factory","ɵfac","providedIn","tmp_0_0","data_r6","data_r7","BuildingListComponent_ng_template_4_img_0_Template","BuildingListComponent_ng_template_4_span_1_Template","row_r11","_r14","row","ctx_r13","ctx_r15","ctx_r16","_r12","BuildingListComponent","_manager","buildings","BuildingListComponent_ng_template_2_Template","BuildingListComponent_ng_template_4_Template","BuildingListComponent_ng_template_6_Template","_c0","_c1","_c2","_c3","_r2","_r0","_r4","BuildingManagerComponent","_state","newBuilding","attrs","ROUTES","path","component","BuildingManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/building-manager/building-form.component.ts","./apps/concierge/src/app/building-manager/building-modal.component.ts","./apps/concierge/src/app/building-manager/building-management.service.ts","./apps/concierge/src/app/building-manager/building-list.component.ts","./apps/concierge/src/app/building-manager/building-manager.component.ts","./apps/concierge/src/app/building-manager/building-manager.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'building-form',\n    template: `\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <form\n                building\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div\n                    class=\"flex flex-col\"\n                    *ngIf=\"(region_list | async)?.length\"\n                >\n                    <label for=\"region\" i18n=\"@@displayNameLabel\">\n                        Region:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            name=\"region\"\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Region...\"\n                        >\n                            <mat-option [value]=\"default_parent\"\n                                >None</mat-option\n                            >\n                            <mat-option\n                                *ngFor=\"let region of region_list | async\"\n                                [value]=\"region.id\"\n                            >\n                                {{ region.display_name || region.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"address\" i18n=\"@@displayNameLabel\">\n                        Location:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"address\"\n                            placeholder=\"Location or Address...\"\n                            formControlName=\"location\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving building...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingFormComponent extends AsyncHandler {\n    @Input() public building: Building | null = null;\n    @Input() public save: number = 0;\n    @Input() public loading = false;\n    @Output() public loadingChange = new EventEmitter<boolean>();\n    @Output() public done = new EventEmitter();\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        parent_id: new FormControl(this._org.organisation.id, [\n            Validators.required,\n        ]),\n        display_name: new FormControl('', [Validators.required]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        location: new FormControl(''),\n    });\n\n    public get default_parent() {\n        return this._org.organisation.id;\n    }\n\n    constructor(private _org: OrganisationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(\n                ({ timezone }) =>\n                    (this.filtered_timezones = this.timezones.filter((_) =>\n                        _.toLowerCase().includes(timezone.toLowerCase())\n                    ))\n            )\n        );\n        if (this.building) this.form.patchValue(this.building);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.building && this.building) {\n            this.form.patchValue(this.building);\n        }\n        if (changes.save && this.save) this.saveChanges();\n    }\n\n    public async saveChanges() {\n        this.form.patchValue({\n            parent_id: this.form.value.parent_id || this._org.organisation.id,\n        });\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = this.form.getRawValue();\n        this.loading = true;\n        this.loadingChange.emit(true);\n        const body = {\n            ...data,\n            tags: ['building'],\n            name: `BLD ${authority().description} ${data.display_name}`,\n        };\n        await (data.id ? updateZone(data.id, body) : addZone(body))\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error saving building: ${e.message || e.error || e}`\n                );\n                this.loading = false;\n                this.loadingChange.emit(false);\n                throw e;\n            });\n        notifySuccess('Successfully saved building.');\n        this.loading = false;\n        this.loadingChange.emit(false);\n        this.done.emit();\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Building } from '@placeos/organisation';\n\n@Component({\n    selector: 'building-modal',\n    template: `\n        <header>\n            <h2>{{ building.id ? 'Edit' : 'Add' }} Building</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\">\n            <building-form\n                [building]=\"building\"\n                [save]=\"save_state\"\n                [(loading)]=\"loading\"\n                (done)=\"close(true)\"\n            ></building-form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class BuildingModalComponent {\n    public loading = false;\n    public save_state = 0;\n    public readonly building = this._data;\n\n    public readonly close = (d?) => this._dialog_ref.close(d);\n    public readonly save = () => (this.save_state = Date.now());\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: Building | undefined,\n        private _dialog_ref: MatDialogRef<BuildingModalComponent>\n    ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BuildingModalComponent } from './building-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\n\nexport interface BuildingListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BuildingManagementService {\n    private _options = new BehaviorSubject<BuildingListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_buildings = combineLatest([\n        this._org.region_list,\n        this._org.building_list,\n        this._options,\n        this._org.initialised,\n    ]).pipe(\n        map(([regions, list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const bld of list) {\n                const parent = regions.find((_) => _.id === bld.parent_id);\n                if (parent) {\n                    (bld as any).region = parent.display_name || parent.name;\n                }\n                (bld as any).level_count =\n                    this._org.levelsForBuilding(bld)?.length || 0;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<BuildingListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editBuilding(building: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(BuildingModalComponent, {\n            data: building,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public editBuildingMetadata(zone: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public async removeBuilding(building: Building) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${building.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(building.id).toPromise();\n        notifySuccess('Successfully removed building.');\n        setTimeout(() => location.reload(), 300);\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { BuildingManagementService } from './building-management.service';\n\n@Component({\n    selector: 'building-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[60rem] w-full h-full\"\n                [dataSource]=\"buildings\"\n                [columns]=\"[\n                    'display_name',\n                    'address',\n                    'timezone',\n                    'region',\n                    'level_count',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Location',\n                    'Timezone',\n                    'Region',\n                    'Levels',\n                    ' '\n                ]\"\n                [column_size]=\"['12r', 'flex', '12r', '10r', '6r', '3.75r']\"\n                [template]=\"{\n                    images: image_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No buildings\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #image_template let-data=\"data\">\n            <img\n                auth\n                *ngIf=\"data.length\"\n                [source]=\"data[0]\"\n                class=\"max-h-[3rem] max-w-[8rem]\"\n            />\n            <span *ngIf=\"!data.length\" class=\"opacity-30\">No Images</span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matRipple [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editBuildingMetadata(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit_square</app-icon>\n                            <span>App Configuration</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"editBuilding(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit</app-icon>\n                            <span>Edit Building</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeBuilding(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon>delete</app-icon>\n                            <span>Delete Building</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingListComponent {\n    public readonly buildings = this._manager.filtered_buildings;\n\n    public readonly editBuilding = (building) =>\n        this._manager.editBuilding(building);\n\n    public readonly editBuildingMetadata = (building) =>\n        this._manager.editBuildingMetadata(building);\n\n    public readonly removeBuilding = (building) =>\n        this._manager.removeBuilding(building);\n\n    constructor(private _manager: BuildingManagementService) {}\n}\n","import { Component } from '@angular/core';\nimport { Building } from '@placeos/organisation';\nimport { BuildingManagementService } from './building-management.service';\n\n@Component({\n    selector: '[app-building-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header class=\"flex items-center justify-between mb-2 p-8\">\n                    <h2 class=\"text-2xl font-medium\">Building Management</h2>\n                    <button btn matRipple (click)=\"newBuilding()\">\n                        Add Building\n                    </button>\n                </header>\n                <building-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></building-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class BuildingManagerComponent {\n    public readonly newBuilding = () => this._state.editBuilding();\n\n    constructor(private _state: BuildingManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { BuildingManagerComponent } from './building-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { BuildingListComponent } from './building-list.component';\nimport { BuildingFormComponent } from './building-form.component';\nimport { BuildingModalComponent } from './building-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: BuildingManagerComponent },\n    { path: 'new', component: BuildingManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        BuildingManagerComponent,\n        BuildingListComponent,\n        BuildingFormComponent,\n        BuildingModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BuildingManagerModule {}\n"],"x_google_ignoreList":[]}