{"version":3,"file":"apps_concierge_src_app_building-manager_building-manager_module_ts.js","mappings":"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","names":["i0","region_r1","id","display_name","name","BuildingFormComponent_ng_container_0_form_1_div_1_mat_option_7_Template","ctx_r1","default_parent","region_list","tz_r3","BuildingFormComponent_ng_container_0_form_1_div_1_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_17_Template","BuildingFormComponent_ng_container_0_form_1_mat_option_18_Template","form","tmp_5_0","length","auto_r4","filtered_timezones","timezones","BuildingFormComponent_ng_container_0_form_1_Template","BuildingFormComponent","AsyncHandler","this","_org","organisation","constructor","super","building","save","loading","loadingChange","EventEmitter","done","FormGroup","FormControl","parent_id","Validators","required","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","location","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","patchValue","ngOnChanges","changes","saveChanges","_this","_asyncToGenerator","value","valid","notifyError","getInvalidFields","join","data","getRawValue","emit","body","tags","authority","description","updateZone","addZone","toPromise","catch","e","message","error","notifySuccess","TIMEZONES_IANA","filter","_","toLowerCase","includes","static","t","i1","core","VBU","selectors","inputs","outputs","features","decls","vars","consts","i18n_0","$localize","BuildingFormComponent_ng_container_0_Template","BuildingFormComponent_ng_template_1_Template","ctx","load_state_r5","_r1","BuildingModalComponent","_data","_dialog_ref","save_state","close","d","Date","now","MAT_DIALOG_DATA","template","rf","BuildingModalComponent_button_3_Template","$event","BuildingModalComponent_footer_6_Template","settings","time_before","time_after","resources","_r3","AutoReleaseSettingsModalComponent","_id","_settings","loadSettings","unencrypted","querySettings","pipe","map","find","encryption_level","EncryptionLevel","None","yaml","settings_string","auto_release","_this2","PlaceSettings","old_settings","updateSettings","addSettings","metadata_key","get","details","showMetadata","updateMetadata","i2","AutoReleaseSettingsModalComponent_button_3_Template","AutoReleaseSettingsModalComponent_main_4_Template","AutoReleaseSettingsModalComponent_footer_5_Template","AutoReleaseSettingsModalComponent_ng_template_6_Template","load_state_r4","induction_details","is_enabled","InductionSettingsModalComponent","_zone_id","visitor_kiosk_app","bld_metadata","org_metadata","org_settings","Promise","all","induction_enabled","disableClose","metadata","new_metadata","result","err","console","i3","InductionSettingsModalComponent_button_3_Template","InductionSettingsModalComponent_main_4_Template","InductionSettingsModalComponent_footer_5_Template","InductionSettingsModalComponent_ng_template_6_Template","i_r2","index","ctx_r2","item_list","email","splice","ItemListModalComponent","_bld_id","identify","item","items","support_issue_types","concierge_key","resp","concierge_metadata","push","ItemListModalComponent_div_9_Template","BuildingManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_buildings","combineLatest","building_list","initialised","regions","list","zone","search","bld","parent","region","level_count","levelsForBuilding","setFilters","next","getValue","setSearchString","editBuilding","PlaceZone","open","afterClosed","editBuildingMetadata","AppSettingsModalComponent","setTimeout","reload","setAutoRelease","setInduction","setSupportIssueTypes","removeBuilding","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","jDH","factory","ɵfac","providedIn","row_r2","row","copyToClipboard","data_r4","data_r5","tmp_7_0","data_r6","data_r7","BuildingListComponent_ng_template_9_img_0_Template","BuildingListComponent_ng_template_9_span_1_Template","row_r9","_r8","menu_r10","BuildingListComponent","_manager","_clipboard","buildings","copy","BuildingListComponent_ng_template_3_Template","BuildingListComponent_ng_template_5_Template","BuildingListComponent_ng_template_7_Template","BuildingListComponent_ng_template_9_Template","BuildingListComponent_ng_template_11_Template","_c6","_c0","name_template_r11","_c1","_c2","timezone_template_r12","_c3","_c4","_c5","action_template_r13","BuildingManagerComponent","_state","newBuilding","attrs","ROUTES","path","component","BuildingManagerModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild","MapLocation","type","position","map_id","asset_id","x","map_width","y","map_height","variance","last_seen","getUnixTime","level","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/building-manager/building-form.component.ts","./apps/concierge/src/app/building-manager/building-modal.component.ts","./apps/concierge/src/app/building-manager/auto-release-settings-modal.component.ts","./apps/concierge/src/app/building-manager/induction-settings-modal.component.ts","./apps/concierge/src/app/building-manager/item-list-modal.component.ts","./apps/concierge/src/app/building-manager/building-management.service.ts","./apps/concierge/src/app/building-manager/building-list.component.ts","./apps/concierge/src/app/building-manager/building-manager.component.ts","./apps/concierge/src/app/building-manager/building-manager.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'building-form',\n    template: `\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <form\n                building\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div\n                    class=\"flex flex-col\"\n                    *ngIf=\"(region_list | async)?.length\"\n                >\n                    <label for=\"region\" i18n=\"@@displayNameLabel\">\n                        Region:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            name=\"region\"\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Region...\"\n                        >\n                            <mat-option [value]=\"default_parent\"\n                                >None</mat-option\n                            >\n                            <mat-option\n                                *ngFor=\"let region of region_list | async\"\n                                [value]=\"region.id\"\n                            >\n                                {{ region.display_name || region.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"address\" i18n=\"@@displayNameLabel\">\n                        Location:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"address\"\n                            placeholder=\"Location or Address...\"\n                            formControlName=\"location\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving building...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingFormComponent extends AsyncHandler {\n    @Input() public building: Building | null = null;\n    @Input() public save: number = 0;\n    @Input() public loading = false;\n    @Output() public loadingChange = new EventEmitter<boolean>();\n    @Output() public done = new EventEmitter();\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n    public readonly region_list = this._org.region_list;\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        parent_id: new FormControl(this._org.organisation.id, [\n            Validators.required,\n        ]),\n        display_name: new FormControl('', [Validators.required]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        location: new FormControl(''),\n    });\n\n    public get default_parent() {\n        return this._org.organisation.id;\n    }\n\n    constructor(private _org: OrganisationService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(() => this._updateTimezoneList())\n        );\n        if (this.building) this.form.patchValue(this.building);\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.building && this.building) {\n            this.form.patchValue(this.building);\n        }\n        if (changes.save && this.save) this.saveChanges();\n    }\n\n    public async saveChanges() {\n        this.form.patchValue({\n            parent_id: this.form.value.parent_id || this._org.organisation.id,\n        });\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = this.form.getRawValue();\n        this.loading = true;\n        this.loadingChange.emit(true);\n        const body = {\n            ...data,\n            tags: ['building'],\n            name: `BLD ${authority().description} ${data.display_name}`,\n        };\n        const building = await (data.id\n            ? updateZone(data.id, body)\n            : addZone(body)\n        )\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error saving building: ${e.message || e.error || e}`\n                );\n                this.loading = false;\n                this.loadingChange.emit(false);\n                throw e;\n            });\n        notifySuccess('Successfully saved building.');\n        this.loading = false;\n        this.loadingChange.emit(false);\n        this.done.emit(building);\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Building } from '@placeos/organisation';\n\n@Component({\n    selector: 'building-modal',\n    template: `\n        <header>\n            <h2>{{ building.id ? 'Edit' : 'Add' }} Building</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\">\n            <building-form\n                [building]=\"building\"\n                [save]=\"save_state\"\n                [(loading)]=\"loading\"\n                (done)=\"close($event)\"\n            ></building-form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class BuildingModalComponent {\n    public loading = false;\n    public save_state = 0;\n    public readonly building = this._data;\n\n    public readonly close = (d?) => this._dialog_ref.close(d);\n    public readonly save = () => (this.save_state = Date.now());\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: Building | undefined,\n        private _dialog_ref: MatDialogRef<BuildingModalComponent>\n    ) {}\n}\n","import { SettingsService, notifySuccess } from '@placeos/common';\nimport {\n    EncryptionLevel,\n    PlaceSettings,\n    addSettings,\n    querySettings,\n    showMetadata,\n    updateMetadata,\n    updateSettings,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport * as yaml from 'js-yaml';\nimport { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'auto-release-modal',\n    template: `\n        <header\n            class=\"flex items-center justify-between border-b border-gray-300 p-4\"\n        >\n            <h3 class=\"text-xl font-medium\">Auto-Release Settings</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon class=\"text-2xl\">close</app-icon>\n            </button>\n        </header>\n        <main class=\"px-2 w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <label>Notify Before Event</label>\n            <a-duration-field\n                [min]=\"0\"\n                [max]=\"60\"\n                [step]=\"5\"\n                [(ngModel)]=\"settings.time_before\"\n            ></a-duration-field>\n            <label>Cancel Event After</label>\n            <a-duration-field\n                [min]=\"0\"\n                [max]=\"60\"\n                [step]=\"5\"\n                [(ngModel)]=\"settings.time_after\"\n            ></a-duration-field>\n            <label>Event Types</label>\n            <mat-form-field appearance=\"outline\" class=\"w-full\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"settings.resources\"\n                    placeholder=\"Set Event Types...\"\n                >\n                    <!-- <mat-option value=\"room\">\n                        Rooms\n                    </mat-option> -->\n                    <mat-option value=\"desk\"> Desks </mat-option>\n                    <mat-option value=\"visitor\"> Visitors </mat-option>\n                    <mat-option value=\"parking\"> Parking </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </main>\n        <footer class=\"p-4 flex justify-end\" *ngIf=\"!loading\">\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-32 space-y-2\"\n            >\n                <mat-spinner [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AutoReleaseSettingsModalComponent {\n    public loading = '';\n    public readonly id = this._id;\n    public settings = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _id: string,\n        private _dialog_ref: MatDialogRef<AutoReleaseSettingsModalComponent>,\n        private _settings: SettingsService,\n    ) {}\n\n    public ngOnInit() {\n        this.loadSettings(this.id);\n    }\n\n    public async loadSettings(id: string) {\n        this.loading = 'Loading auto-release settings for building...';\n        this.settings = {};\n        const settings = await querySettings({ parent_id: id })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        const unencrypted = settings.find(\n            (_) => _.encryption_level === EncryptionLevel.None,\n        );\n        if (!unencrypted) return;\n        try {\n            this.settings =\n                yaml.load(unencrypted.settings_string)?.auto_release || {};\n        } catch {}\n        this.loading = '';\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to auto-release settings...';\n        const settings = await querySettings({ parent_id: this.id })\n            .pipe(map((_) => _.data))\n            .toPromise();\n        let unencrypted = settings.find(\n            (_) => _.encryption_level === EncryptionLevel.None,\n        );\n        if (!unencrypted) {\n            unencrypted = new PlaceSettings({\n                parent_id: this.id,\n                encryption_level: EncryptionLevel.None,\n                settings_string: '',\n            });\n        }\n        let old_settings = {};\n        try {\n            old_settings = yaml.load(unencrypted.settings_string) || {};\n        } catch {}\n        (unencrypted as any).settings_string = yaml.dump({\n            ...old_settings,\n            auto_release: this.settings,\n        });\n        unencrypted.id\n            ? await updateSettings(unencrypted.id, unencrypted).toPromise()\n            : await addSettings(unencrypted).toPromise();\n\n        const metadata_key =\n            this._settings.get('app.workplace_metadata_key') || 'workplace_app';\n        const metadata = await showMetadata(this.id, metadata_key).toPromise();\n        const details: any = metadata.details || {};\n        details.auto_release = this.settings;\n        await updateMetadata(this.id, {\n            name: metadata_key,\n            details,\n            description: '',\n        }).toPromise();\n        notifySuccess('Auto-release settings updated');\n        this.loading = '';\n        this._dialog_ref.close();\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SettingsService, notifyError, notifySuccess } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport {\n    querySettings,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\n\n@Component({\n    selector: 'induction-settings-modal',\n    template: `\n        <header\n            class=\"flex items-center justify-between border-b border-gray-300 p-4\"\n        >\n            <h3 class=\"text-xl font-medium\">Induction Settings</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon class=\"text-2xl\">close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"p-4 flex flex-col space-y-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <mat-form-field\n                appearance=\"outline\"\n                class=\"w-[36rem] max-w-[80vw] h-[50vh]\"\n            >\n                <textarea\n                    matInput\n                    [(ngModel)]=\"induction_details\"\n                    placeholder=\"Induction Details\"\n                    class=\"w-[34rem] max-w-[calc(80vw-2rem)] h-[calc(50vh-2rem)] resize-none\"\n                ></textarea>\n            </mat-form-field>\n            <mat-checkbox [(ngModel)]=\"is_enabled\">\n                Enable Induction for Building\n            </mat-checkbox>\n        </main>\n        <footer class=\"px-4 pb-4 flex justify-end\" *ngIf=\"!loading\">\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-32 space-y-2\"\n            >\n                <mat-spinner [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class InductionSettingsModalComponent {\n    public loading = '';\n    public induction_details: string = '';\n    public is_enabled: boolean = false;\n    public settings: Record<string, any> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _zone_id: string,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog_ref: MatDialogRef<InductionSettingsModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        if (!this._zone_id) return;\n        this.loadSettings();\n    }\n\n    public async loadSettings() {\n        this.loading = 'Loading induction settings for building...';\n        const visitor_kiosk_app =\n            this._settings.get('app.visitor_kiosk_app') || 'visitor-kiosk_app';\n        this.settings = {};\n        const [bld_metadata, org_metadata, org_settings] = await Promise.all([\n            await showMetadata(this._zone_id, visitor_kiosk_app).toPromise(),\n            await showMetadata(\n                this._org.organisation.id,\n                visitor_kiosk_app\n            ).toPromise(),\n            await showMetadata(\n                this._org.organisation.id,\n                'settings'\n            ).toPromise(),\n        ]);\n        this.settings = {\n            ...org_settings.details,\n            ...org_metadata.details,\n            ...bld_metadata.details,\n        };\n        this.induction_details = this.settings.induction_details || '';\n        this.is_enabled = this.settings.induction_enabled ?? false;\n        this.loading = '';\n    }\n\n    public async save() {\n        this.loading = 'Saving induction settings...';\n        const visitor_kiosk_app =\n            this._settings.get('app.visitor_kiosk_app') || 'visitor-kiosk_app';\n        this._dialog_ref.disableClose = true;\n        const metadata = await showMetadata(\n            this._zone_id,\n            visitor_kiosk_app\n        ).toPromise();\n        const new_metadata = {\n            ...metadata.details,\n            induction_details: this.induction_details,\n            induction_enabled: this.is_enabled,\n        };\n        const result = await updateMetadata(this._zone_id, {\n            name: metadata.name || visitor_kiosk_app,\n            description: metadata.description || '',\n            details: new_metadata,\n        })\n            .toPromise()\n            .catch((err) => {\n                console.error(err);\n                notifyError('Error saving induction settings');\n            });\n        this.loading = '';\n        if (result) {\n            notifySuccess('Successfully saved induction settings');\n            this._dialog_ref.close();\n        }\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SettingsService, notify, notifyError } from '@placeos/common';\nimport { Building } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\n\n@Component({\n    selector: 'item-list-modal',\n    template: `\n        <header>\n            <h2>Support Request Issue Types</h2>\n            <button icon matRipple mat-dialog-close=\"\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"w-[36rem] overflow-auto h-[50vh] p-2 space-y-2\">\n            <button\n                btn\n                matRipple\n                class=\"w-full\"\n                (click)=\"item_list.push({ name: '', email: '' })\"\n            >\n                Add Item\n            </button>\n            <div\n                class=\"w-full flex items-center space-x-2\"\n                *ngFor=\"let item of item_list; let i = index; trackBy: identify\"\n            >\n                <input\n                    type=\"text\"\n                    class=\"flex-1 border border-base-200 px-4 py-3 rounded\"\n                    placeholder=\"Issue Name\"\n                    [(ngModel)]=\"item_list[i].name\"\n                />\n                <input\n                    type=\"email\"\n                    class=\"flex-[2] border border-base-200 px-4 py-3 rounded\"\n                    placeholder=\"Issue Email\"\n                    [(ngModel)]=\"item_list[i].email\"\n                />\n                <button\n                    icon\n                    matRipple\n                    matTooltip=\"Remove Item\"\n                    (click)=\"item_list.splice(i, 1)\"\n                >\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center justify-end p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class ItemListModalComponent {\n    public item_list: { name: string; email: string }[] = [];\n    public loading: boolean = false;\n\n    public identify = (index: number, item: any) => index;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _bld_id: string,\n        private _settings: SettingsService,\n        private _dialog_ref: MatDialogRef<ItemListModalComponent>,\n    ) {}\n\n    public async ngOnInit() {\n        const metadata_key =\n            this._settings.get('app.workplace_metadata_key') || 'workplace_app';\n        const metadata: any = await showMetadata(\n            this._bld_id,\n            metadata_key,\n        ).toPromise();\n        const items = metadata?.details?.support_issue_types || [];\n        this.item_list = items;\n    }\n\n    public async save() {\n        const metadata_key =\n            this._settings.get('app.workplace_metadata_key') || 'workplace_app';\n        const concierge_key =\n            this._settings.get('app.concierge_metadata_key') || 'concierge_app';\n        this.loading = true;\n        const items = this.item_list.filter((_) => _);\n        const metadata: any = await showMetadata(\n            this._bld_id,\n            metadata_key,\n        ).toPromise();\n        metadata.details.support_issue_types = items;\n        let resp = await updateMetadata(this._bld_id, {\n            name: metadata_key,\n            details: metadata.details,\n            description: metadata.description || '',\n        })\n            .toPromise()\n            .catch((_) => {\n                notifyError(`Failed to save issue types. ${_}`);\n            });\n        if (!resp) {\n            this.loading = false;\n            return;\n        }\n        const concierge_metadata: any = await showMetadata(\n            this._bld_id,\n            metadata_key,\n        ).toPromise();\n        concierge_metadata.details.support_issue_types = items;\n        resp = await updateMetadata(this._bld_id, {\n            name: concierge_key,\n            details: concierge_metadata.details,\n            description: concierge_metadata.description || '',\n        })\n            .toPromise()\n            .catch((_) => {\n                notifyError(`Failed to save issue types. ${_}`);\n            });\n        this.loading = false;\n        if (resp) this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BuildingModalComponent } from './building-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\nimport { AutoReleaseSettingsModalComponent } from './auto-release-settings-modal.component';\nimport { InductionSettingsModalComponent } from './induction-settings-modal.component';\nimport { ItemListModalComponent } from './item-list-modal.component';\n\nexport interface BuildingListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BuildingManagementService {\n    private _options = new BehaviorSubject<BuildingListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_buildings = combineLatest([\n        this._org.region_list,\n        this._org.building_list,\n        this._options,\n        this._org.initialised,\n    ]).pipe(\n        map(([regions, list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const bld of list) {\n                const parent = regions.find((_) => _.id === bld.parent_id);\n                if (parent) {\n                    (bld as any).region = parent.display_name || parent.name;\n                }\n                (bld as any).level_count =\n                    this._org.levelsForBuilding(bld)?.length || 0;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<BuildingListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editBuilding(building: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(BuildingModalComponent, {\n            data: building,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public editBuildingMetadata(zone: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public setAutoRelease(building: PlaceZone) {\n        if (!building?.id) return;\n        this._dialog.open(AutoReleaseSettingsModalComponent, {\n            data: building.id,\n        });\n    }\n\n    public setInduction(building: PlaceZone) {\n        if (!building?.id) return;\n        this._dialog.open(InductionSettingsModalComponent, {\n            data: building.id,\n        });\n    }\n\n    public setSupportIssueTypes(building: PlaceZone) {\n        if (!building?.id) return;\n        this._dialog.open(ItemListModalComponent, {\n            data: building.id,\n        });\n    }\n\n    public async removeBuilding(building: Building) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${building.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(building.id).toPromise();\n        this._org.removeZone({ id: building.id, tags: ['building'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { BuildingManagementService } from './building-management.service';\nimport { SettingsService, notifySuccess } from '@placeos/common';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\n@Component({\n    selector: 'building-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-8\">\n            <simple-table\n                class=\"min-w-[62rem] w-full block text-sm\"\n                [data]=\"buildings\"\n                empty_message=\"No Buildings\"\n                [columns]=\"[\n                    {\n                        key: 'display_name',\n                        name: 'Building Name',\n                        content: name_template\n                    },\n                    {\n                        key: 'location',\n                        name: 'Location',\n                        size: '16rem'\n                    },\n                    {\n                        key: 'timezone',\n                        name: 'Timezone',\n                        size: '14rem',\n                        content: timezone_template\n                    },\n                    {\n                        key: 'region',\n                        name: 'Region',\n                        size: '11rem',\n                        sortable: false\n                    },\n                    { key: 'level_count', name: 'Levels', size: '6rem' },\n                    {\n                        key: 'actions',\n                        name: ' ',\n                        content: action_template,\n                        size: '3rem',\n                        sortable: false\n                    }\n                ]\"\n                [sortable]=\"true\"\n            ></simple-table>\n            <div class=\"w-full h-20\"></div>\n        </div>\n        <ng-template #name_template let-row=\"row\" let-data=\"data\">\n            <button\n                class=\"px-4 py-2 text-left leading-tight\"\n                (click)=\"copyToClipboard(row.id)\"\n            >\n                <div class=\"\">{{ data }}</div>\n                <div class=\"text-[0.625rem] opacity-30 font-mono\">\n                    {{ row.id }}\n                </div>\n            </button>\n        </ng-template>\n        <ng-template #timezone_template let-data=\"data\">\n            <div class=\"p-4 font-mono text-sm\">{{ data }}</div>\n        </ng-template>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #image_template let-data=\"data\">\n            <img\n                auth\n                *ngIf=\"data.length\"\n                [source]=\"data[0]\"\n                class=\"max-h-[3rem] max-w-[8rem]\"\n            />\n            <span *ngIf=\"!data.length\" class=\"opacity-30\">No Images</span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    icon\n                    matRipple\n                    class=\"h-12 w-12 rounded\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editBuildingMetadata(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-xl\">edit_square</app-icon>\n                            <span>App Configuration</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"editBuilding(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-xl\">edit</app-icon>\n                            <span>Edit Building</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"setAutoRelease(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                            >\n                                release_alert\n                            </app-icon>\n                            <span>Auto-release Settings</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"setInduction(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                            >\n                                badge\n                            </app-icon>\n                            <span>Induction Settings</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"setSupportIssueTypes(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon\n                                className=\"material-symbols-rounded\"\n                                class=\"text-xl\"\n                            >\n                                support_agent\n                            </app-icon>\n                            <span>Support Request Types</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeBuilding(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon class=\"text-error text-xl\">\n                                delete\n                            </app-icon>\n                            <span>Delete Building</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BuildingListComponent {\n    public readonly buildings = this._manager.filtered_buildings;\n    public settings = {};\n\n    public readonly editBuilding = (building) =>\n        this._manager.editBuilding(building);\n\n    public readonly editBuildingMetadata = (building) =>\n        this._manager.editBuildingMetadata(building);\n\n    public readonly removeBuilding = (building) =>\n        this._manager.removeBuilding(building);\n\n    public readonly setAutoRelease = (building) =>\n        this._manager.setAutoRelease(building);\n\n    public readonly setInduction = (building) =>\n        this._manager.setInduction(building);\n\n    public readonly setSupportIssueTypes = (building) =>\n        this._manager.setSupportIssueTypes(building);\n\n    public readonly copyToClipboard = (id: string) => {\n        const success = this._clipboard.copy(id);\n        if (success) notifySuccess('Building ID copied to clipboard.');\n    };\n\n    constructor(\n        private _manager: BuildingManagementService,\n        private _settings: SettingsService,\n        private _clipboard: Clipboard\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { Building } from '@placeos/organisation';\nimport { BuildingManagementService } from './building-management.service';\n\n@Component({\n    selector: '[app-building-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header\n                    class=\"flex items-center justify-between mb-2 px-8 pt-4 pb-8\"\n                >\n                    <h2 class=\"text-2xl font-medium\">Building Management</h2>\n                    <button btn matRipple (click)=\"newBuilding()\" class=\"w-40\">\n                        Add Building\n                    </button>\n                </header>\n                <building-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></building-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class BuildingManagerComponent {\n    public readonly newBuilding = () => this._state.editBuilding();\n\n    constructor(private _state: BuildingManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { BuildingManagerComponent } from './building-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { BuildingListComponent } from './building-list.component';\nimport { BuildingFormComponent } from './building-form.component';\nimport { BuildingModalComponent } from './building-modal.component';\nimport { AutoReleaseSettingsModalComponent } from './auto-release-settings-modal.component';\nimport { InductionSettingsModalComponent } from './induction-settings-modal.component';\nimport { ItemListModalComponent } from './item-list-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: BuildingManagerComponent },\n    { path: 'new', component: BuildingManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        BuildingManagerComponent,\n        BuildingListComponent,\n        BuildingFormComponent,\n        BuildingModalComponent,\n        AutoReleaseSettingsModalComponent,\n        InductionSettingsModalComponent,\n        ItemListModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BuildingManagerModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}