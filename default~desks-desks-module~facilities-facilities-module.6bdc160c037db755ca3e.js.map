{"version":3,"sources":["/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-state.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-spaces.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-device-info.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-desk-info.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-desks.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore.module.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-zoom-control.component.ts"],"names":["ExploreStateService","_org","_spaces","_settings","super","_level","_positions","zoom","center","x","y","_styles","_features","_actions","_labels","_options","_message","level","this","asObservable","message","spaces","list","pipe","filter","space","zones","includes","id","map_url","lvl","map_id","map_positions","map_features","details","features","options","key","show_zones","show_devices","concat","show_contacts","map_actions","i","Object","values","reduce","a","map_labels","labels","map_styles","styles","style_mappings","keys","h","display","initialised","_","subscribe","subscription","active_building","bld","getValue","level_list","levelsForBuilding","find","length","setLevel","setOptions","get","next","zone_id","levelWithID","name","style_map","feature_map","actions","actions_map","labels_map","DEFAULT_COLOURS","free","pending","reserved","busy","unknown","ExploreDeviceInfoComponent","_details","_element","_overlay","username","user","mac","manufacturer","os","ssid","variance","toFixed","diameter","bg_color","distance_color","overlay_ref","onEnter","loadUser","onLeave","close","onClick","onTouch","formatDistanceToNow","Date","last_seen","addSuffix","Math","abs","differenceInMinutes","distance","tries","setTimeout","parent","nativeElement","parentElement","ngOnInit","position","parseInt","style","top","left","y_pos","x_pos","open","mod","system","execute","catch","assigned_to","_portal","create","positionStrategy","flexibleConnectedTo","_dot","withPositions","originX","originY","overlayX","overlayY","attach","dispose","ExploreDeskInfoComponent","start","end","ExploreDesksService","_state","_desks_service","_in_use","BehaviorSubject","_desks","_reserved","_statuses","_bindings","_stats","occupied","total","_poll","_desk_bookings","combineLatest","switchMap","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","desk_list","map","j","zone","catchError","first","toPromise","enable_booking","clearBindings","bindToDesks","desks","in_use","bookable","is_used","some","is_reserved","processDesks","timeout","updateStatus","asset_id","ngOnDestroy","delay","interval","valueOf","clearInterval","bindings","unsub","forEach","b","unbind","buildings","parent_id","system_id","building","area_management","organisation","startPolling","binding","listen","d","devices","value","v","location","at_location","processDevices","bind","push","colours","desk_id","hasOwnProperty","fill","opacity","setStyles","device","map_width","map_height","coordinates_from","content","data","sort","sqrt","pow","setFeatures","desk","hover","status","action","callback","bookDesk","host","date","setActions","SharedExploreModule","ExploreZoomControlComponent","zoomIn","setPositions","min","positions","zoomOut","max","reset"],"mappings":"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","file":"default~desks-desks-module~facilities-facilities-module.6bdc160c037db755ca3e.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    Point,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@user-interfaces/common';\nimport {\n    BuildingLevel,\n    OrganisationService,\n} from '@user-interfaces/organisation';\nimport { SpacesService } from '@user-interfaces/spaces';\n\nexport interface MapOptions {\n    show_zones?: boolean;\n    show_devices?: boolean;\n    show_contacts?: boolean;\n    show_levels?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({});\n\n    private _message = new BehaviorSubject<string>('');\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Currently active level */\n    public readonly message = this._message.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([\n        this._level,\n        this._spaces.list,\n    ]).pipe(\n        map(([level, spaces]) =>\n            spaces.filter((space) => space.zones.includes(level.id))\n        )\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(\n        map((lvl) => (lvl ? lvl.map_id : '') || '')\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map((details) => {\n            const [features, options] = details;\n            let list = [];\n            for (const key in features) {\n                switch (key) {\n                    case 'devices':\n                        options.show_zones && options.show_devices\n                            ? (list = list.concat(features[key]))\n                            : '';\n                        break;\n                    case 'contacts':\n                        options.show_contacts\n                            ? (list = list.concat(features[key]))\n                            : '';\n                        break;\n                    default:\n                        list = list.concat(features[key]);\n                }\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = this._actions.pipe(\n        debounceTime(200),\n        map((i) => Object.values(i).reduce((list, a) => list.concat(a), []))\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([\n        this._labels,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map((details) => {\n            const [labels, options] = details;\n            let list = [];\n            for (const key in labels) {\n                if (key !== 'zones' || options.show_zones) {\n                    list = list.concat(labels[key]);\n                }\n            }\n            return list;\n        })\n    );\n    /** Current map styles */\n    public readonly map_styles = combineLatest([\n        this._styles,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map((details) => {\n            const [styles, options] = details;\n            const style_mappings = Object.keys(styles).reduce(\n                (a, h) => ({ ...a, ...styles[h] }),\n                {}\n            );\n            if (!options.show_zones) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            style_mappings['text'] = { display: 'none' };\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    public get active_level() {\n        return this._level.getValue();\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised.pipe(first((_) => _)).subscribe(() => {\n            this.subscription(\n                'building',\n                this._org.active_building\n                    .pipe(filter((_) => !!_))\n                    .subscribe((bld) => {\n                        const level = this._level.getValue();\n                        const level_list = this._org.levelsForBuilding(bld);\n                        const has_level = level_list.find(\n                            (lvl) => level?.id === lvl.id\n                        );\n                        if (!has_level && level_list.length) {\n                            this.setLevel(level_list[0].id);\n                        }\n                        this.setOptions({\n                            show_devices:\n                                this._settings.get(\n                                    'app.explore.display_devices'\n                                ) !== false,\n                        });\n                    })\n            );\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@placeos/svg-viewer';\n\nimport { BaseClass, HashMap, notifyError, SettingsService } from '@user-interfaces/common';\nimport { Space } from '@user-interfaces/spaces';\nimport { CalendarEvent } from '@user-interfaces/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#e65100',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _spaces: Space[] = [];\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _bindings: any[] = [];\n    private _statuses: HashMap<string> = {};\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'spaces',\n            this._state.spaces.subscribe((list) => {\n                this.clearBindings();\n                this._spaces = list;\n                this.bindToSpaces();\n            })\n        );\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.clearBindings();\n    }\n\n    public clearBindings() {\n        if (!this._spaces) return;\n        for (const space of this._spaces) {\n            this.unsub(`bookings-${space.id}`);\n            this.unsub(`status-${space.id}`);\n        }\n        this._bindings.forEach((b) => b.unbind());\n        this._bindings = [];\n        this._statuses = {};\n    }\n\n    public bindToSpaces() {\n        if (!this._spaces) return;\n        for (const space of this._spaces) {\n            let binding = getModule(space.id, 'Bookings').binding('bookings');\n            this.subscription(\n                `bookings-${space.id}`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.handleBookingsChange(space, d))\n            );\n            binding.bind();\n            this._bindings.push(binding);\n            binding = getModule(space.id, 'Bookings').binding('status');\n            this.subscription(\n                `status-${space.id}`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.handleStatusChange(space, d))\n            );\n            binding.bind();\n            this._bindings.push(binding);\n        }\n        this.updateActions();\n        this.updateHoverElements();\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy') {\n            return notifyError(`${space.display_name || space.name} is unavailable at the current time`);\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space }\n        });\n    }\n\n    private handleBookingsChange(space: Space, bookings: HashMap[]) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout('update_hover_els', () => this.updateHoverElements(), 100);\n    }\n\n    private handleStatusChange(space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus();\n                this.updateHoverElements();\n            },\n            100\n        );\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours =\n            this._settings.get('app.explore.colors') || {};\n        for (const space of this._spaces) {\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${this._statuses[space.id]}`] ||\n                    colours[`${this._statuses[space.id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[space.id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements() {\n        const features: ViewerFeature[] = [];\n        for (const space of this._spaces) {\n            features.push({\n                location: space.map_id,\n                hover: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions() {\n        const actions: ViewAction[] = [];\n        for (const space of this._spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { MAP_FEATURE_DATA } from '@user-interfaces/components';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\nexport interface DeviceInfoData {\n    mac: string;\n    variance: number;\n    last_seen: number;\n    system: string;\n    manufacturer?: string;\n    os?: string;\n    ssid?: string;\n    user?: any;\n    bg_color?: string;\n}\n\n@Component({\n    selector: '[explore-device-info]',\n    template: `\n        <div\n            name=\"radius\"\n            (mouseenter)=\"loadUser()\"\n            class=\"radius absolute center bg-blue-600 bg-opacity-25 border-4 border-dashed border-blue-600 rounded-full\"\n            [style]=\"'height: ' + diameter + '%; width: ' + diameter + '%;'\"\n        ></div>\n        <div\n            name=\"dot\"\n            #dot\n            class=\"h-2 w-2 absolute center rounded-full pointer-events-auto\"\n            [style.background-color]=\"bg_color\"\n        ></div>\n\n        <ng-template cdk-portal>\n            <div\n                name=\"device-info\"\n                class=\"rounded bg-white p-4 top-0 left-0 shadow pointer-events-none\"\n                (mouseleave)=\"close()\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <p><label>MAC:</label> {{ mac }}</p>\n                    <p><label>Accuracy:</label> {{ variance }}m</p>\n                    <p><label>Last Seen:</label> {{ last_seen }}</p>\n                    <p *ngIf=\"manufacturer\">\n                        <label>Manufacturer:</label> {{ manufacturer }}\n                    </p>\n                    <p *ngIf=\"os\"><label>OS:</label> {{ os }}</p>\n                    <p *ngIf=\"ssid\"><label>SSID:</label> {{ ssid }}</p>\n                    <p *ngIf=\"username\">\n                        <label>Username:</label>\n                        {{ user?.name || user?.username || username }}\n                    </p>\n                    <p *ngIf=\"user\"><label>Type:</label> {{ user.type }}</p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: auto;\n            }\n\n            :host > [name='dot'] {\n                box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.35);\n                background-color: #616161;\n            }\n\n            :host:hover > [name='radius'] {\n                opacity: 1;\n            }\n\n            [name='radius'] {\n                opacity: 0;\n                transition: opacity 200ms;\n                pointer-events: none;\n            }\n\n            [name='device-info'] {\n                width: 16rem;\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ExploreDeviceInfoComponent implements OnInit {\n    /** Name of the user associated with the mac address */\n    public username = '';\n    /** User details associated with device */\n    public readonly user = this._details.user;\n    /** Mac Address of the device */\n    public readonly mac = this._details.mac;\n    /** Mac Address of the device */\n    public readonly manufacturer = this._details.manufacturer;\n    /** Mac Address of the device */\n    public readonly os = this._details.os;\n    /** Mac Address of the device */\n    public readonly ssid = this._details.ssid;\n    /** Accuracy of the location data */\n    public readonly variance = this._details.variance.toFixed(2);\n    /** Diameter of the radius circle */\n    public readonly diameter = this._details.variance * 100;\n    /** Background color for the dot */\n    public readonly bg_color = this._details.bg_color || this.distance_color;\n\n    public overlay_ref: OverlayRef = null;\n    /** Time of the last update */\n    public get last_seen() {\n        return formatDistanceToNow(new Date(this._details.last_seen * 1000), {\n            addSuffix: true,\n        });\n    }\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'end' | 'start';\n    public get distance() {\n        return Math.abs(\n            differenceInMinutes(this._details.last_seen * 1000, new Date())\n        );\n    }\n\n    public get distance_color() {\n        return this.distance < 10\n            ? '#43a047'\n            : this.distance < 20\n            ? '#ffb300'\n            : '#e53935';\n    }\n\n    @HostListener('mouseenter') public onEnter = () => this.loadUser();\n    @HostListener('mouseleave') public onLeave = () => this.close();\n    @HostListener('click') public onClick = () => this.loadUser();\n    @HostListener('touchend') public onTouch = () => this.loadUser();\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n    @ViewChild('dot') private _dot: ElementRef<HTMLDivElement>;\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeviceInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public async loadUser() {\n        this.open();\n        if (this.username) return;\n        const mod = getModule(this._details.system, 'LocationServices');\n        if (mod) {\n            this.username = 'Loading...';\n            const details = await mod\n                .execute('check_ownership_of', [this.mac])\n                .catch((_) => null);\n            this.username =\n                details && details.assigned_to ? details.assigned_to : '';\n        }\n    }\n\n    public open() {\n        if (this.overlay_ref) this.close();\n        if (!this._portal) return;\n        this.overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._dot)\n                .withPositions([\n                    {\n                        originX: this.x_pos === 'start' ? 'end' : 'start',\n                        originY: this.y_pos === 'top' ? 'bottom' : 'top',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'bottom',\n                    },\n                ]),\n        });\n        this.overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this.overlay_ref) {\n            this.overlay_ref.dispose();\n            this.overlay_ref = null;\n        }\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@user-interfaces/components';\n\nexport interface SpaceInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: SpaceInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport { BaseClass, HashMap, SettingsService } from '@user-interfaces/common';\n\nimport { DesksService, queryBookings } from '@user-interfaces/bookings';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport {\n    BuildingLevel,\n    Desk,\n    OrganisationService,\n} from '@user-interfaces/organisation';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\nimport { StaffUser } from '@user-interfaces/users';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nexport interface DeskOptions {\n    enable_booking?: boolean;\n    date?: number | Date;\n    zones?: string[];\n    host?: StaffUser;\n}\nexport interface DesksStats {\n    free: number;\n    occupied: number;\n    total: number;\n}\n\n@Injectable()\nexport class ExploreDesksService extends BaseClass implements OnDestroy {\n    private _level: BuildingLevel = null;\n    private _in_use = new BehaviorSubject<string[]>([]);\n    private _options = new BehaviorSubject<DeskOptions>({});\n    private _desks = new BehaviorSubject<string[]>([]);\n    private _reserved = new BehaviorSubject<string[]>([]);\n    private _statuses: HashMap<string> = {};\n    private _bindings: any[] = [];\n    private _stats = new BehaviorSubject<DesksStats>({\n        free: 0,\n        occupied: 0,\n        total: 0,\n    });\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _desk_bookings = combineLatest([\n        this._state.level,\n        this._poll,\n    ]).pipe(\n        switchMap(([lvl, _]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(new Date())),\n                period_end: getUnixTime(endOfDay(new Date())),\n                type: 'desk',\n                zones: lvl.id,\n            })\n        )\n    );\n\n    public readonly desk_list = this._state.level.pipe(\n        switchMap((lvl) =>\n            showMetadata(lvl.id, { name: 'desks' }).pipe(\n                map((i) => i.details.map((j) => new Desk({ ...j, zone: lvl })))\n            )\n        ),\n        catchError((_) => [])\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _desks_service: DesksService\n    ) {\n        super();\n        this.ngOnInit();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.setOptions({\n            enable_booking: this._settings.get('app.desks.enabled') !== false,\n        });\n        this.subscription(\n            'spaces',\n            this._state.level.subscribe((level) => {\n                this.clearBindings();\n                this._level = level;\n                this.bindToDesks();\n            })\n        );\n        this.subscription(\n            'changes',\n            combineLatest([\n                this.desk_list,\n                this._in_use,\n                this._reserved,\n                this._options,\n            ]).subscribe(([desks, in_use, reserved]) => {\n                this._statuses = {};\n                for (const { id, bookable } of desks) {\n                    const is_used = in_use.some((i) => id === i);\n                    const is_reserved = reserved.some((i) => id === i);\n                    this._statuses[id] = bookable\n                        ? !is_used\n                            ? 'free'\n                            : is_reserved\n                            ? 'reserved'\n                            : 'busy'\n                        : 'not-bookable';\n                }\n                this.processDesks(desks);\n                this.timeout('update', () => this.updateStatus(), 100);\n            })\n        );\n        this.subscription(\n            'desks',\n            this.desk_list.subscribe((desks) => this.processDesks(desks))\n        );\n        this.subscription(\n            'desks_in_use_bookings',\n            this._desk_bookings.subscribe((_) =>\n                this._in_use.next(_.map((i) => i.asset_id))\n            )\n        );\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.clearBindings();\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(new Date().valueOf()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: DeskOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public clearBindings() {\n        const bindings = ['desks_in_use', 'desk_list'];\n        for (const id of bindings) {\n            this.unsub(id);\n        }\n        this._bindings.forEach((b) => b.unbind());\n        this._bindings = [];\n        this._statuses = {};\n    }\n\n    public bindToDesks() {\n        if (!this._level) return;\n        const building = this._org.buildings.find(\n            (bld) => bld.id === this._level.parent_id\n        );\n        if (!building) return;\n        const system_id =\n            this._org.building.bindings.area_management ||\n            this._org.organisation.bindings.area_management;\n        if (!system_id) {\n            this.startPolling();\n            return;\n        }\n        let binding = getModule(system_id, 'AreaManagement').binding(\n            this._level.id\n        );\n        this.subscription(\n            `desks_in_use`,\n            binding.listen().subscribe((d) => {\n                const devices = (d?.value || []).filter(\n                    (v) => v.location !== 'desk'\n                );\n                const desks = (d?.value || []).filter(\n                    (v) => v.location === 'desk'\n                );\n                this._in_use.next(desks.map((v) => v.map_id));\n                this._reserved.next(\n                    desks.filter((v) => !v.at_location).map((v) => v.map_id)\n                );\n                this.processDevices(devices, system_id);\n            })\n        );\n        binding.bind();\n        this._bindings.push(binding);\n        binding = getModule(system_id, 'AreaManagement').binding(\n            `${this._level.id}:desk_ids`\n        );\n        this.subscription(\n            `desks_list`,\n            binding.listen().subscribe((d) => this._desks.next(d || []))\n        );\n        binding.bind();\n        this._bindings.push(binding);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk_id in this._statuses) {\n            if (!this._statuses.hasOwnProperty(desk_id)) continue;\n            style_map[`#${desk_id}`] = {\n                fill:\n                    colours[`desk-${this._statuses[desk_id]}`] ||\n                    colours[`${this._statuses[desk_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[desk_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('desks', style_map);\n    }\n\n    private processDevices(devices: HashMap[], system_id: string) {\n        const list = [];\n        for (const device of devices) {\n            const x = device.x / device.map_width;\n            const y = device.y / device.map_height;\n            list.push({\n                location: {\n                    x: device.coordinates_from?.includes('right') ? 1 - x : x,\n                    y: device.coordinates_from?.includes('bottom') ? 1 - y : y,\n                },\n                content: ExploreDeviceInfoComponent,\n                data: { ...device, system: system_id },\n            });\n        }\n        list.sort((a, b) => {\n            const dist_a =\n                1 - Math.sqrt(Math.pow(a.x - 0.5, 2) + Math.pow(a.x - 0.5, 2));\n            const dist_b =\n                1 - Math.sqrt(Math.pow(b.x - 0.5, 2) + Math.pow(b.x - 0.5, 2));\n            return dist_a - dist_b;\n        });\n        this._state.setFeatures('devices', list);\n    }\n\n    private processDesks(desks: HashMap[]) {\n        const list = [];\n        const actions = [];\n        const options = this._options.getValue();\n        for (const desk of desks) {\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    status: this._statuses[desk.map_id],\n                },\n            });\n            actions.push({\n                id: desk.id,\n                action: 'click',\n                callback: () =>\n                    this._desks_service.bookDesk({\n                        desks: [desk as any],\n                        host: options.host,\n                        date: options.date as any,\n                    }),\n            });\n            actions.push({\n                id: desk.id,\n                action: 'touchend',\n                callback: () =>\n                    this._desks_service.bookDesk({\n                        desks: [desk as any],\n                        host: options.host,\n                        date: options.date as any,\n                    }),\n            });\n        }\n        this._state.setActions(\n            'desks',\n            this._options.getValue().enable_booking ? actions : []\n        );\n        this._state.setFeatures('desks', list);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { FormFieldsModule } from '@user-interfaces/form-fields';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        OverlayModule,\n        PortalModule,\n        FormFieldsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon>add</app-icon>\n        </button>\n        <button mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon>remove</app-icon>\n        </button>\n        <button mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon>autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: .5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () => this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n"],"sourceRoot":"webpack:///"}