import { Injectable } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { StylesManager, Model, SurveyNG } from 'survey-angular';
import { BaseClass } from '@placeos/common';
import { Question, QuestionType } from '../survey-types';
import { SurveyJSON, QuestionElement } from '../survey-contants';

@Injectable({
    providedIn: 'root',
})
export class CreateSurveyService extends BaseClass {
    surveyTitle: Text;
    surveyData: any;
    counter: number = 1;

    //Store of survey questions generated by user
    private _questions: BehaviorSubject<Question[]> = new BehaviorSubject<
        Question[]
    >([]);
    questions$: Observable<Question[]> = this._questions.asObservable();

    set questions(questions: Question[]) {
        this._questions.next(questions);
    }

    get questions() {
        return this._questions.getValue();
    }

    //Store of JSON generated from survey questions
    private _surveyJSON: BehaviorSubject<any> = new BehaviorSubject<any>({}); //TODO: data type

    surveyJSON$: Observable<any> = this._surveyJSON.asObservable();

    set surveyJSON(json: any) {
        this._surveyJSON.next(json);
    }

    get surveyJSON() {
        return this._surveyJSON.getValue();
    }

    constructor() {
        super();
    }

    newQuestionForm(questionType): void {
        const questionLabel = document.createElement('text');
        questionLabel.innerHTML = 'Question' + this.counter;
        this.counter++;
        const input_field = document.createElement('INPUT');

        input_field.setAttribute('type', 'text');
        document.getElementById('questionForm').appendChild(questionLabel);
        document.getElementById('questionForm').appendChild(input_field);
    }
    createNewJSON() {
        this.surveyJSON = SurveyJSON;
    }

    addQuestion(questionType) {
        this.createNewJSON();

        let element;
        Object.keys(QuestionElement).map((key) => {
            key == questionType.toLowerCase()
                ? (element = QuestionElement[key])
                : null;
        });

        this.surveyJSON.pages[0].elements.push(element);
        this.buildSurvey();
    }

    async buildSurvey() {
        const survey = new Model(this.surveyJSON);

        SurveyNG.render('surveyContainer', { model: survey });
        survey.onComplete.add((sender: any) => {
            console.log('completed');
            this.surveyData = sender.data;
        });

        // document.getElementById('surveyResults').innerHTML = surveyData;
    }
}
