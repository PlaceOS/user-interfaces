{"version":3,"sources":["./libs/explore/src/lib/explore-zoom-control.component.ts","./libs/explore/src/lib/explore-state.service.ts","./libs/explore/src/lib/explore-spaces.service.ts","./libs/explore/src/lib/explore-device-info.component.ts","./libs/explore/src/lib/explore-desk-info.component.ts","./libs/explore/src/lib/explore-desks.service.ts","./libs/explore/src/lib/explore.module.ts"],"names":["ExploreZoomControlComponent","_state","zoomIn","this","setPositions","Math","min","positions","zoom","center","zoomOut","max","reset","x","y","ExploreStateService","_org","_spaces","_settings","super","_level","_positions","_styles","_features","_actions","_labels","_options","_message","level","asObservable","message","spaces","list","pipe","filter","space","zones","includes","id","map_url","lvl","map_id","map_positions","map_features","features","options","key","show_zones","show_devices","concat","show_contacts","map_actions","i","Object","values","reduce","a","map_labels","labels","map_styles","styles","style_mappings","keys","h","display","init","getValue","initialised","_","toPromise","active_building","subscribe","bld","level_list","levelsForBuilding","find","length","setLevel","setOptions","get","next","zone_id","levelWithID","name","style_map","feature_map","actions","actions_map","labels_map","DEFAULT_COLOURS","free","pending","reserved","busy","unknown","ExploreDeviceInfoComponent","_details","_element","_overlay","username","user","mac","manufacturer","os","ssid","variance","toFixed","diameter","bg_color","distance_color","overlay_ref","onEnter","loadUser","onLeave","close","onClick","onTouch","formatDistanceToNow","last_seen","addSuffix","abs","differenceInMinutes","Date","distance","tries","setTimeout","parent","nativeElement","parentElement","ngOnInit","position","parseInt","style","top","left","y_pos","x_pos","open","mod","system","details","execute","catch","assigned_to","_portal","create","positionStrategy","flexibleConnectedTo","_dot","withPositions","originX","originY","overlayX","overlayY","attach","console","log","dispose","ExploreDeskInfoComponent","start","end","ExploreDesksService","_desks_service","_in_use","BehaviorSubject","_desks","_reserved","_statuses","_poll","_desk_bookings","combineLatest","switchMap","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","desk_list","map","Array","j","zone","catchError","e","_bind","unsubWith","building","buildings","parent_id","system_id","bindings","area_management","organisation","binding","subscription","listen","d","processBindingChange","bind","_state_change","desks","in_use","bookable","is_used","some","is_reserved","processDesks","first","enable_booking","delay","asset_id","interval","valueOf","clearInterval","value","devices","v","location","at_location","processDevices","timeout","updateStatus","colours","desk_id","fill","opacity","setStyles","device","map_width","map_height","push","coordinates_from","content","data","setFeatures","desk","hover","status","book_fn","bookDesk","host","date","action","callback","setActions","SharedExploreModule"],"mappings":"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","file":"default~desks-desks-module~facilities-facilities-module.js","sourcesContent":["import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button z-in mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon>add</app-icon>\n        </button>\n        <button z-out mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon>remove</app-icon>\n        </button>\n        <button reset mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon>autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 0.5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () =>\n        this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n","import { Injectable } from '@angular/core';\nimport {\n    Point,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { SpacesService } from '@placeos/spaces';\n\nexport interface MapOptions {\n    show_zones?: boolean;\n    show_devices?: boolean;\n    show_contacts?: boolean;\n    show_levels?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({});\n\n    private _message = new BehaviorSubject<string>('');\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Currently active level */\n    public readonly message = this._message.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([\n        this._level,\n        this._spaces.list,\n    ]).pipe(\n        map(([level, spaces]) =>\n            spaces.filter((space) => space.zones.includes(level.id))\n        )\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(\n        map((lvl) => (lvl ? lvl.map_id : '') || '')\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([features, options]) => {\n            let list = [];\n            for (const key in features) {\n                switch (key) {\n                    case 'devices':\n                        options.show_zones && options.show_devices\n                            ? (list = list.concat(features[key]))\n                            : '';\n                        break;\n                    case 'contacts':\n                        options.show_contacts\n                            ? (list = list.concat(features[key]))\n                            : '';\n                        break;\n                    default:\n                        list = list.concat(features[key]);\n                }\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = this._actions.pipe(\n        debounceTime(200),\n        map((i) => Object.values(i).reduce((list, a) => list.concat(a), []))\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([\n        this._labels,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([labels, options]) => {\n            let list = [];\n            for (const key in labels) {\n                if (key !== 'zones' || options.show_zones) {\n                    list = list.concat(labels[key]);\n                }\n            }\n            return list;\n        })\n    );\n    /** Current map styles */\n    public readonly map_styles = combineLatest([\n        this._styles,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([styles, options]) => {\n            const style_mappings = Object.keys(styles).reduce(\n                (a, h) => ({ ...a, ...styles[h] }),\n                {}\n            );\n            if (!options.show_zones) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            style_mappings['text'] = { display: 'none' };\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    public get active_level() {\n        return this._level.getValue();\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._org.active_building.pipe(filter((_) => !!_)).subscribe((bld) => {\n            const level = this._level.getValue();\n            const level_list = this._org.levelsForBuilding(bld);\n            const has_level = level_list.find((lvl) => level?.id === lvl.id);\n            if (!has_level && level_list.length) {\n                this.setLevel(level_list[0].id);\n            }\n            this.setOptions({\n                show_devices:\n                    this._settings.get('app.explore.display_devices') !== false,\n            });\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@placeos/svg-viewer';\nimport { map } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    HashMap,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#e65100',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _statuses: HashMap<string> = {};\n\n    private _bind = this._state.spaces.pipe(\n        map((list) => {\n            this.unsubWith('b-');\n            this.unsubWith('s-');\n            this._statuses = {};\n            if (!list?.length) return;\n            for (const space of list) {\n                const mod = getModule(space.id, 'Bookings');\n                let binding = mod.binding('bookings');\n                this.subscription(\n                    `b-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleBookingsChange(list, space, d)\n                        )\n                );\n                this.subscription(`b-bind-${space.id}`, binding.bind());\n                binding = mod.binding('status');\n                this.subscription(\n                    `s-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleStatusChange(list, space, d)\n                        )\n                );\n                this.subscription(`s-bind-${space.id}`, binding.bind());\n            }\n            this.updateActions(list);\n            this.updateHoverElements(list);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription('spaces', this._bind.subscribe());\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy' || !space.bookable) {\n            return notifyError(\n                `${\n                    space.display_name || space.name\n                } is unavailable at the current time`\n            );\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space },\n        });\n    }\n\n    public handleBookingsChange(\n        spaces: Space[],\n        space: Space,\n        bookings: HashMap[]\n    ) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout(\n            'update_hover_els',\n            () => this.updateHoverElements(spaces),\n            100\n        );\n    }\n\n    public handleStatusChange(spaces: Space[], space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus(spaces);\n                this.updateHoverElements(spaces);\n            },\n            100\n        );\n    }\n\n    private updateStatus(spaces: Space[]) {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const space of spaces) {\n            const status = this._statuses[space.id] || 'not-bookable';\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${status}`] ||\n                    colours[`${status}`] ||\n                    DEFAULT_COLOURS[`${status}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements(spaces: Space[]) {\n        const features: ViewerFeature[] = [];\n        for (const space of spaces) {\n            features.push({\n                location: space.map_id,\n                hover: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions(spaces: Space[]) {\n        const actions: ViewAction[] = [];\n        for (const space of spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\nexport interface DeviceInfoData {\n    mac: string;\n    variance: number;\n    last_seen: number;\n    system: string;\n    manufacturer?: string;\n    os?: string;\n    ssid?: string;\n    user?: any;\n    bg_color?: string;\n}\n\n@Component({\n    selector: '[explore-device-info]',\n    template: `\n        <div\n            name=\"radius\"\n            (mouseenter)=\"loadUser()\"\n            class=\"radius absolute center bg-blue-600 bg-opacity-25 border-4 border-dashed border-blue-600 rounded-full\"\n            [style]=\"'height: ' + diameter + '%; width: ' + diameter + '%;'\"\n        ></div>\n        <div\n            name=\"dot\"\n            #dot\n            class=\"h-2 w-2 absolute center rounded-full pointer-events-auto shadow\"\n            [style.background-color]=\"bg_color\"\n        ></div>\n\n        <ng-template cdk-portal>\n            <div\n                name=\"device-info\"\n                class=\"w-64 rounded bg-white p-4 top-0 left-0 shadow pointer-events-none\"\n                (mouseleave)=\"close()\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <p><label>MAC:</label> {{ mac }}</p>\n                    <p><label>Accuracy:</label> {{ variance }}m</p>\n                    <p><label>Last Seen:</label> {{ last_seen }}</p>\n                    <p type *ngIf=\"manufacturer\">\n                        <label>Manufacturer:</label> {{ manufacturer }}\n                    </p>\n                    <p os *ngIf=\"os\"><label>OS:</label> {{ os }}</p>\n                    <p ssid *ngIf=\"ssid\"><label>SSID:</label> {{ ssid }}</p>\n                    <p username *ngIf=\"username\">\n                        <label>Username:</label>\n                        {{ user?.name || user?.username || username }}\n                    </p>\n                    <p user *ngIf=\"user\">\n                        <label>Type:</label> {{ user.type }}\n                    </p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: auto;\n            }\n\n            :host > [name='dot'] {\n                background-color: #616161;\n            }\n\n            :host:hover > [name='radius'] {\n                opacity: 1;\n            }\n\n            [name='radius'] {\n                opacity: 0;\n                transition: opacity 200ms;\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ExploreDeviceInfoComponent implements OnInit {\n    /** Name of the user associated with the mac address */\n    public username = '';\n    /** User details associated with device */\n    public readonly user = this._details.user;\n    /** Mac Address of the device */\n    public readonly mac = this._details.mac;\n    /** Mac Address of the device */\n    public readonly manufacturer = this._details.manufacturer;\n    /** Mac Address of the device */\n    public readonly os = this._details.os;\n    /** Mac Address of the device */\n    public readonly ssid = this._details.ssid;\n    /** Accuracy of the location data */\n    public readonly variance = this._details.variance?.toFixed(2);\n    /** Diameter of the radius circle */\n    public readonly diameter = this._details.variance * 100;\n    /** Background color for the dot */\n    public readonly bg_color = this._details.bg_color || this.distance_color;\n\n    public overlay_ref: OverlayRef = null;\n    /** Time of the last update */\n    public get last_seen() {\n        return formatDistanceToNow((this._details.last_seen || 0) * 1000, {\n            addSuffix: true,\n        });\n    }\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'end' | 'start';\n    public get distance() {\n        return Math.abs(\n            differenceInMinutes(\n                (this._details.last_seen || 0) * 1000,\n                new Date()\n            )\n        );\n    }\n\n    public get distance_color() {\n        return this.distance < 10\n            ? '#43a047'\n            : this.distance < 20\n            ? '#ffb300'\n            : '#e53935';\n    }\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n    @ViewChild('dot') private _dot: ElementRef<HTMLDivElement>;\n\n    @HostListener('mouseenter') public onEnter = () => this.loadUser();\n    @HostListener('mouseleave') public onLeave = () => this.close();\n    @HostListener('click') public onClick = () => this.loadUser();\n    @HostListener('touchend') public onTouch = () => this.loadUser();\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeviceInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public async loadUser() {\n        this.open();\n        if (this.username) return;\n        const mod = getModule(this._details.system, 'LocationServices');\n        if (mod) {\n            this.username = 'Loading...';\n            const details = await mod\n                .execute('check_ownership_of', [this.mac])\n                .catch((_) => null);\n            this.username =\n                details && details.assigned_to ? details.assigned_to : '';\n        }\n    }\n\n    public open() {\n        if (this.overlay_ref) this.close();\n        if (!this._portal) return;\n        this.overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._dot)\n                .withPositions([\n                    {\n                        originX: this.x_pos === 'start' ? 'end' : 'start',\n                        originY: this.y_pos === 'top' ? 'bottom' : 'top',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'bottom',\n                    },\n                ]),\n        });\n        this.overlay_ref.attach(this._portal);\n        console.log('Open');\n    }\n\n    public close() {\n        if (this.overlay_ref) {\n            this.overlay_ref.dispose();\n            this.overlay_ref = null;\n        }\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@placeos/components';\n\nexport interface DeskInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 map-id class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p user class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p start class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeskInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport { DesksService, queryBookings } from '@placeos/bookings';\nimport { StaffUser } from '@placeos/users';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nexport interface DeskOptions {\n    enable_booking?: boolean;\n    date?: number | Date;\n    zones?: string[];\n    host?: StaffUser;\n}\nexport interface DesksStats {\n    free: number;\n    occupied: number;\n    total: number;\n}\n\n@Injectable()\nexport class ExploreDesksService extends BaseClass implements OnDestroy {\n    private _in_use = new BehaviorSubject<string[]>([]);\n    private _options = new BehaviorSubject<DeskOptions>({});\n    private _desks = new BehaviorSubject<string[]>([]);\n    private _reserved = new BehaviorSubject<string[]>([]);\n    private _statuses: HashMap<string> = {};\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _desk_bookings = combineLatest([\n        this._state.level,\n        this._poll,\n    ]).pipe(\n        switchMap(([lvl]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(new Date())),\n                period_end: getUnixTime(endOfDay(new Date())),\n                type: 'desk',\n                zones: lvl.id,\n            })\n        )\n    );\n\n    public readonly desk_list = this._state.level.pipe(\n        switchMap((lvl) =>\n            showMetadata(lvl.id, { name: 'desks' }).pipe(\n                map((i) =>\n                    (i.details instanceof Array ? i.details : []).map(\n                        (j: HashMap) => new Desk({ ...j, zone: lvl as any })\n                    )\n                )\n            )\n        ),\n        catchError((e) => [])\n    );\n\n    private _bind = this._state.level.pipe(\n        map((lvl) => {\n            this._statuses = {};\n            this.unsubWith('lvl');\n            if (!lvl) return;\n            const building = this._org.buildings.find(\n                (bld) => bld.id === lvl.parent_id\n            );\n            if (!building) return;\n            const system_id =\n                building.bindings?.area_management ||\n                this._org.organisation.bindings?.area_management;\n            if (!system_id) return;\n            let binding = getModule(system_id, 'AreaManagement').binding(\n                lvl.id\n            );\n            this.subscription(\n                `lvl-in_use`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.processBindingChange(d, system_id))\n            );\n            this.subscription('lvl-in_use_bind', binding.bind());\n            binding = getModule(system_id, 'AreaManagement').binding(\n                `${lvl.id}:desk_ids`\n            );\n            this.subscription(\n                `lvl-desks_list`,\n                binding.listen().subscribe((d) => this._desks.next(d || []))\n            );\n            this.subscription('lvl-desk_list_bind', binding.bind());\n        })\n    );\n\n    private _state_change = combineLatest([\n        this.desk_list,\n        this._in_use,\n        this._reserved,\n        this._options,\n    ]).pipe(\n        // debounceTime(50),\n        map(([desks, in_use, reserved]) => {\n            this._statuses = {};\n            for (const { id, bookable } of desks) {\n                const is_used = in_use.some((i) => id === i);\n                const is_reserved = reserved.some((i) => id === i);\n                this._statuses[id] = bookable\n                    ? !is_used\n                        ? 'free'\n                        : is_reserved\n                        ? 'reserved'\n                        : 'busy'\n                    : 'not-bookable';\n            }\n            this.processDesks(desks);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _desks_service: DesksService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.setOptions({\n            enable_booking: this._settings.get('app.desks.enabled') !== false,\n        });\n        this.subscription('bind', this._bind.subscribe());\n        this.subscription('changes', this._state_change.subscribe());\n        this.subscription(\n            'desks',\n            this.desk_list.subscribe((desks) => this.processDesks(desks))\n        );\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.subscription(\n            'desks_in_use_bookings',\n            this._desk_bookings.subscribe((_) =>\n                this._in_use.next(_.map((i) => i.asset_id))\n            )\n        );\n        this.interval(\n            'poll',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: DeskOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public processBindingChange(\n        { value }: { value: any[] },\n        system_id: string\n    ) {\n        const devices = (value || []).filter(\n            (v) => !['desk', 'booking'].includes(v.location)\n        );\n        const desks = (value || []).filter(\n            (v) =>\n                v.location === 'desk' ||\n                (v.location === 'booking' && v.type === 'desk')\n        );\n        this._in_use.next(desks.map((v) => v.map_id || v.asset_id));\n        this._reserved.next(\n            desks\n                .filter((v) => !v.at_location)\n                .map((v) => v.map_id || v.asset_id)\n        );\n        this.processDevices(devices, system_id);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk_id in this._statuses) {\n            if (!this._statuses[desk_id]) continue;\n            style_map[`#${desk_id}`] = {\n                fill:\n                    colours[`desk-${this._statuses[desk_id]}`] ||\n                    colours[`${this._statuses[desk_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[desk_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('desks', style_map);\n    }\n\n    private processDevices(devices: HashMap[], system_id: string) {\n        const list = [];\n        for (const device of devices) {\n            const x = device.x / device.map_width;\n            const y = device.y / device.map_height;\n            list.push({\n                location: {\n                    x: device.coordinates_from?.includes('right') ? 1 - x : x,\n                    y: device.coordinates_from?.includes('bottom') ? 1 - y : y,\n                },\n                content: ExploreDeviceInfoComponent,\n                data: { ...device, system: system_id },\n            });\n        }\n        this._state.setFeatures('devices', list);\n    }\n\n    private processDesks(desks: HashMap[]) {\n        const list = [];\n        const actions = [];\n        const options = this._options.getValue();\n        for (const desk of desks) {\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    status: this._statuses[desk.map_id],\n                },\n            });\n            const book_fn = () =>\n                this._desks_service.bookDesk({\n                    desks: [desk as Desk],\n                    host: options.host,\n                    date: options.date as Date,\n                });\n            actions.push({\n                id: desk.id,\n                action: 'click',\n                callback: book_fn,\n            });\n            actions.push({\n                id: desk.id,\n                action: 'touchend',\n                callback: book_fn,\n            });\n        }\n        this._state.setActions(\n            'desks',\n            this._options.getValue().enable_booking ? actions : []\n        );\n        this._state.setFeatures('desks', list);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        OverlayModule,\n        PortalModule,\n        FormFieldsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n"],"sourceRoot":"webpack:///"}