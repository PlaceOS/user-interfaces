{"version":3,"file":"apps_concierge_src_app_email-templates_email-templates_module_ts.js","mappings":"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","names":["EmailTemplatesComponent","static","this","__ngFactoryType__","core","VBU","selectors","attrs","_c0","decls","vars","consts","template","rf","ctx","i0","EmailTemplatesStateService","_processTemplates","metadata","zone_id","data","details","Array","map","constructor","_org","_settings","_filters","BehaviorSubject","_change","template_definitions","combineLatest","active_building","active_region","pipe","filter","bld","switchMap","showMetadata","organisation","id","_","definitions","Object","keys","key","name","description","fields","field","catchError","of","shareReplay","templates","region","forkJoin","org_templates","bld_templates","region_templates","concat","filters","asObservable","filtered_templates","category","loadTemplate","_this","_asyncToGenerator","take","toPromise","find","saveTemplate","_this2","template_list","randomString","created_at","getUnixTime","Date","now","updated_at","zone_templates","console","log","new_template_list","updateMetadata","notifySuccess","removeTemplate","_this3","setFilters","next","getValue","i1","i2","jDH","factory","ɵfac","providedIn","data_r2","EmailTemplatesListComponent_ng_template_25_span_3_Template","tmp_5_0","data_r3","display_name","row_r5","_r4","row","ctx_r5","sendTestEmail","menu_r7","_c8","EmailTemplatesListComponent","_state","t","sending_email","stmp_system","binding","notifyError","getModule","execute","currentUser","email","subject","text","html","reply_to","from","$event","_r1","EmailTemplatesListComponent_ng_template_23_Template","EmailTemplatesListComponent_ng_template_25_Template","EmailTemplatesListComponent_ng_template_27_Template","tmp_3_0","_c7","_c1","_c2","tmp_6_0","_c3","_c4","bld_template_r9","_c5","date_template_r8","_c6","actions_template_r10","bld_r2","template_r3","field_r5","$implicit","copyField","loading","EmailTemplateManageComponent","AsyncHandler","_route","_router","_clipboard","super","buildings","building_list","form","FormGroup","FormControl","Validators","required","trigger","active_trigger","ngOnInit","subscription","paramMap","subscribe","_ref","params","has","get","patchValue","navigate","_x","apply","arguments","valueChanges","_ref2","value","trigger_list","_x2","copy","save","getRawValue","extractTextFromHTML","i3","i4","features","EmailTemplateManageComponent_mat_option_17_Template","EmailTemplateManageComponent_mat_option_39_Template","EmailTemplateManageComponent_button_47_Template","EmailTemplateManageComponent_ng_template_64_Template","ROUTES","path","component","children","redirectTo","EmailTemplatesModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedBookingsModule","FormFieldsModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/email-templates/email-templates.component.ts","./apps/concierge/src/app/email-templates/email-templates-state.service.ts","./apps/concierge/src/app/email-templates/email-templates-list.component.ts","./apps/concierge/src/app/email-templates/email-template-manage.component.ts","./apps/concierge/src/app/email-templates/email-templates.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-email-templates]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"relative flex flex-col flex-1 w-1/2 h-full\">\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EmailTemplatesComponent {}\n","import { Injectable } from '@angular/core';\nimport { notifySuccess, randomString, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport {\n    PlaceMetadata,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { getUnixTime } from 'date-fns';\nimport { BehaviorSubject, combineLatest, forkJoin, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n} from 'rxjs/operators';\n\nexport interface EmailTemplate {\n    id: string;\n    subject: string;\n    zone_id: string;\n    category: 'internal' | 'external';\n    reply_to?: string;\n    from?: string;\n    trigger: string;\n    html: string;\n    text: string;\n    preview_url: string;\n    created_at: number;\n    updated_at: number;\n}\n\nexport interface EmailTemplateDefinition {\n    id: string;\n    name: string;\n    description: string;\n    fields: { name: string; description: string }[];\n}\n\nexport interface EmailTemplatesFilters {\n    category?: 'internal' | 'external';\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EmailTemplatesStateService {\n    private _filters = new BehaviorSubject<EmailTemplatesFilters>({});\n    private _change = new BehaviorSubject(0);\n\n    public readonly template_definitions = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(() =>\n            showMetadata(this._org.organisation.id, 'email_template_fields')\n                .pipe(\n                    map((_) => {\n                        const definitions =\n                            (_ as any)?.details ||\n                            ({} as Record<string, EmailTemplateDefinition>);\n                        return Object.keys(definitions).map(\n                            (key) =>\n                                ({\n                                    id: key,\n                                    name: definitions[key].name,\n                                    description:\n                                        definitions[key].description || '',\n                                    fields: definitions[key].fields.map(\n                                        (field) => ({\n                                            name: field.name,\n                                            description:\n                                                field.description || '',\n                                        }),\n                                    ),\n                                }) as EmailTemplateDefinition,\n                        );\n                    }),\n                )\n                .pipe(catchError(() => of([] as EmailTemplateDefinition[]))),\n        ),\n        shareReplay(1),\n    );\n\n    private _processTemplates(metadata: PlaceMetadata, zone_id: string) {\n        const data = metadata.details;\n        return ((data instanceof Array ? data : '') || []).map(\n            (template) => ({ ...template, zone_id }) as EmailTemplate,\n        );\n    }\n\n    public readonly templates = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld, region]) =>\n            forkJoin([\n                showMetadata(this._org.organisation.id, 'email_templates').pipe(\n                    map((_) =>\n                        this._processTemplates(_, this._org.organisation.id),\n                    ),\n                    catchError(() => of([] as EmailTemplate[])),\n                ),\n                showMetadata(bld.id, 'email_templates').pipe(\n                    map((_) => this._processTemplates(_, bld.id)),\n                    catchError(() => of([] as EmailTemplate[])),\n                ),\n                region\n                    ? showMetadata(region.id, 'email_templates').pipe(\n                          map((_) => this._processTemplates(_, region.id)),\n                          catchError(() => of([] as EmailTemplate[])),\n                      )\n                    : of([] as EmailTemplate[]),\n            ]),\n        ),\n        map(([org_templates, bld_templates, region_templates]) =>\n            org_templates.concat(bld_templates).concat(region_templates),\n        ),\n        shareReplay(1),\n    );\n    public readonly filters = this._filters.asObservable();\n\n    public readonly filtered_templates = combineLatest([\n        this.templates,\n        this.filters,\n    ]).pipe(\n        map(([templates, filters]) => {\n            const category = filters.category || '';\n            return templates.filter(\n                (_) => _.category === category || category === '',\n            );\n        }),\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {}\n\n    public async loadTemplate(id: string) {\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        return template_list.find((_) => _.id === id);\n    }\n\n    public async saveTemplate(template: EmailTemplate) {\n        if (!template.zone_id) return;\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        if (!template.id) {\n            template.id = `template-${randomString(8)}`;\n            template.created_at = getUnixTime(Date.now());\n        }\n        template.updated_at = getUnixTime(Date.now());\n        const zone_templates = template_list.filter(\n            (_) => _.zone_id === template.zone_id,\n        );\n        const template_value = { ...template };\n        delete template_value.zone_id;\n        console.log('Templates:', template_list);\n        const new_template_list = [\n            ...zone_templates.filter((_) => _.id !== template.id),\n            template,\n        ];\n        await updateMetadata(template.zone_id, {\n            name: `email_templates`,\n            details: new_template_list,\n            description: 'Email Templates for Zone',\n        }).toPromise();\n        notifySuccess('Successfully saved template');\n    }\n\n    public async removeTemplate(template: EmailTemplate) {\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        const zone_templates = template_list.filter(\n            (_) => _.zone_id === template.zone_id,\n        );\n        const new_template_list = zone_templates.filter(\n            (_) => _.id !== template.id,\n        );\n        await updateMetadata(template.zone_id, {\n            name: `email_templates`,\n            details: new_template_list,\n            description: 'Email Templates for Zone',\n        }).toPromise();\n        notifySuccess('Successfully removed template');\n    }\n\n    public setFilters(filters: Partial<EmailTemplatesFilters>) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    EmailTemplate,\n    EmailTemplatesFilters,\n    EmailTemplatesStateService,\n} from './email-templates-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { currentUser, notifyError, notifySuccess } from '@placeos/common';\nimport { getModule } from '@placeos/ts-client';\n\n@Component({\n    selector: 'email-templates-list',\n    template: ` <div class=\"absolute inset-0 flex flex-col\">\n        <div class=\"flex items-center justify-between p-8 space-x-2\">\n            <h2 class=\"text-2xl font-medium\">Email Templates</h2>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"w-56 no-subscript\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.category\"\n                    placeholder=\"All Categories\"\n                    (ngModelChange)=\"setFilters({ category: $event })\"\n                >\n                    <mat-option value=\"\">All Categories</mat-option>\n                    <mat-option value=\"internal\">Internal</mat-option>\n                    <mat-option value=\"external\">External</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <a btn matRipple [routerLink]=\"['/email-templates', 'manage']\">\n                <div class=\"ml-2\">Create Template</div>\n                <app-icon class=\"text-2xl\">add</app-icon>\n            </a>\n        </div>\n        <div class=\"h-1/2 flex-1 w-full px-8 overflow-y-auto relative\">\n            <div class=\"w-full min-h-full overflow-x-auto\">\n                <simple-table\n                    class=\"min-w-[56rem] w-full block text-sm\"\n                    [data]=\"templates\"\n                    empty_message=\"No group events for selected period\"\n                    [columns]=\"[\n                        { key: 'subject', name: 'Title' },\n                        {\n                            key: 'category',\n                            name: 'Category',\n                            show: !(filters | async)?.category,\n                        },\n                        {\n                            key: 'trigger',\n                            name: 'Trigger',\n                            empty: 'No Trigger',\n                        },\n                        {\n                            key: 'zone_id',\n                            name: 'Building',\n                            content: bld_template,\n                        },\n                        {\n                            key: 'created_at',\n                            name: 'Created',\n                            size: '8rem',\n                            content: date_template,\n                        },\n                        {\n                            key: 'actions',\n                            name: ' ',\n                            size: '3.5rem',\n                            content: actions_template,\n                            sortable: false,\n                        },\n                    ]\"\n                    [sortable]=\"true\"\n                >\n                </simple-table>\n                <ng-template #date_template let-data=\"data\">\n                    <div class=\"opacity-60 p-4\">\n                        {{ data * 1000 | date: 'mediumDate' }}\n                    </div>\n                </ng-template>\n                <ng-template #bld_template let-data=\"data\">\n                    <div class=\"p-4\">\n                        {{ (data | building)?.display_name }}\n                        <span class=\"opacity-30\" *ngIf=\"!(data | building)\">\n                            No Building\n                        </span>\n                    </div>\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <button\n                        icon\n                        matRipple\n                        [matMenuTriggerFor]=\"menu\"\n                        class=\"mx-auto\"\n                    >\n                        <app-icon>more_vert</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item (click)=\"sendTestEmail(row)\">\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl\">send</app-icon>\n                                <div>Send Test Email</div>\n                            </div>\n                        </button>\n                        <a\n                            mat-menu-item\n                            [routerLink]=\"[\n                                '/email-templates',\n                                'manage',\n                                row.id,\n                            ]\"\n                        >\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl\">edit</app-icon>\n                                <div>Edit Template</div>\n                            </div>\n                        </a>\n                        <button mat-menu-item (click)=\"removeTemplate(row)\">\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl text-error\">\n                                    delete\n                                </app-icon>\n                                <div>Delete Template</div>\n                            </div>\n                        </button>\n                    </mat-menu>\n                </ng-template>\n            </div>\n        </div>\n    </div>`,\n    styles: [``],\n})\nexport class EmailTemplatesListComponent {\n    public sending_email: string;\n    public readonly filters = this._state.filters;\n    public readonly templates = this._state.filtered_templates;\n\n    public readonly removeTemplate = (t) => this._state.removeTemplate(t);\n\n    constructor(\n        private _state: EmailTemplatesStateService,\n        private _org: OrganisationService,\n    ) {}\n\n    public setFilters(filters: Partial<EmailTemplatesFilters>) {\n        this._state.setFilters(filters);\n    }\n\n    public async sendTestEmail(template: EmailTemplate) {\n        this.sending_email = template.id;\n        const stmp_system = this._org.binding('smtp');\n        if (!stmp_system) {\n            return notifyError(\n                'Mailing system not configured for application.',\n            );\n        }\n        const mod = getModule(stmp_system, 'Mailer');\n        await mod.execute('send_mail', [\n            currentUser()?.email,\n            template.subject,\n            template.text,\n            template.html,\n            [], // resource attachments\n            [], // attachments\n            [], // cc\n            [], // bcc\n            template.reply_to || null, // reply_to\n            template.from || currentUser()?.email, // from\n        ]);\n        notifySuccess('Successfully sent test email');\n        this.sending_email = null;\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    EmailTemplate,\n    EmailTemplatesStateService,\n} from './email-templates-state.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    extractTextFromHTML,\n    notifySuccess,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { take } from 'rxjs/operators';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\n@Component({\n    selector: 'email-template-manage',\n    template: `\n        <div class=\"absolute inset-0 bg-base-100 overflow-auto p-8\">\n            <form\n                class=\"max-w-full w-[48rem] mx-auto min-h-full\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-8\">\n                    <a\n                        icon\n                        matRipple\n                        [routerLink]=\"['/email-templates']\"\n                        class=\"-ml-8\"\n                    >\n                        <app-icon>arrow_back</app-icon>\n                    </a>\n                    <h2 class=\"text-2xl font-medium\">\n                        {{ template?.id ? 'Edit' : 'New' }} Email Template\n                    </h2>\n                    <div class=\"flex-1\"></div>\n                    <button\n                        btn\n                        matRipple\n                        type=\"button\"\n                        class=\"w-48\"\n                        (click)=\"save()\"\n                    >\n                        Save Template\n                    </button>\n                </div>\n                <div class=\"flex items-center space-x-4\">\n                    <div class=\"flex-1 space-y-2 w-1/4\">\n                        <label for=\"zone\">Building</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                name=\"zone\"\n                                placeholder=\"Select Building\"\n                                formControlName=\"zone_id\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let bld of buildings | async\"\n                                    [value]=\"bld.id\"\n                                >\n                                    {{ bld.display_name || bld.name }}\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A building is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 space-y-2 w-1/4\">\n                        <label for=\"category\">Category</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                name=\"category\"\n                                placeholder=\"Select Category\"\n                                formControlName=\"category\"\n                            >\n                                <mat-option value=\"internal\">\n                                    Internal\n                                </mat-option>\n                                <mat-option value=\"external\">\n                                    External\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A category is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 space-y-2 w-1/4\">\n                        <label for=\"trigger\">Trigger</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                name=\"trigger\"\n                                placeholder=\"Select Trigger\"\n                                formControlName=\"trigger\"\n                            >\n                                <mat-option value=\"\">None</mat-option>\n                                <mat-option\n                                    *ngFor=\"let template of definitions | async\"\n                                    [value]=\"template.id\"\n                                >\n                                    {{ template.name }}\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A trigger is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <button\n                        btn\n                        matRipple\n                        class=\"flex-1 mt-2\"\n                        matTooltip=\"Values that get replaced in the email template when sent\"\n                        [disabled]=\"!form.value.trigger\"\n                    >\n                        Placeholders\n                    </button>\n                    <mat-menu #tracking_menu=\"matMenu\">\n                        <button\n                            mat-menu-item\n                            *ngFor=\"let field of active_trigger?.fields || []\"\n                            (click)=\"copyField(field.name)\"\n                        >\n                            <div class=\"flex flex-col leading-tight\">\n                                <div>{{ field.name }}</div>\n                                <div class=\"text-xs opacity-30\">\n                                    {{ field.description }}\n                                </div>\n                            </div>\n                        </button>\n                    </mat-menu>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <input\n                            matInput\n                            placeholder=\"Reply to address\"\n                            formControlName=\"reply_to\"\n                        />\n                        <mat-error>A reply address is required</mat-error>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <input\n                            matInput\n                            placeholder=\"From address\"\n                            formControlName=\"from\"\n                        />\n                        <mat-error>A from address is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <app-icon matPrefix class=\"text-2xl relative -left-1\">\n                        description\n                    </app-icon>\n                    <input\n                        matInput\n                        placeholder=\"Template Subject\"\n                        formControlName=\"subject\"\n                    />\n                    <mat-error>A title for the template is required</mat-error>\n                </mat-form-field>\n                <rich-text-input\n                    formControlName=\"html\"\n                    placeholder=\"Body of the email template\"\n                    [images_allowed]=\"true\"\n                    class=\"min-h-[calc(100vh-28rem)] block\"\n                ></rich-text-input>\n            </form>\n        </div>\n        <ng-template #load_state>\n            <div class=\"absolute inset-0 bg-base-100\">\n                <div\n                    class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EmailTemplateManageComponent extends AsyncHandler {\n    public loading = '';\n    public template: EmailTemplate;\n    public readonly definitions = this._state.template_definitions;\n    public readonly buildings = this._org.building_list;\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        reply_to: new FormControl(''),\n        from: new FormControl(''),\n        subject: new FormControl('', [Validators.required]),\n        category: new FormControl('internal'),\n        trigger: new FormControl(''),\n        html: new FormControl('', [Validators.required]),\n        zone_id: new FormControl(''),\n    });\n    public active_trigger = null;\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: EmailTemplatesStateService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _clipboard: Clipboard,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(async (params) => {\n                if (params.has('id')) {\n                    this.loading = 'Loading email template...';\n                    this.template = await this._state.loadTemplate(\n                        params.get('id'),\n                    );\n                    this.loading = '';\n                    console.log('Template:', this.template);\n                    if (!this.template) {\n                        this._router.navigate(['/email-templates', 'manage']);\n                    } else {\n                        this.form.patchValue(this.template);\n                    }\n                }\n            }),\n        );\n        this.subscription(\n            'trigger',\n            this.form.valueChanges.subscribe(async (value) => {\n                if (value.trigger) {\n                    const trigger_list = await this.definitions\n                        .pipe(take(1))\n                        .toPromise();\n                    this.active_trigger = trigger_list.find(\n                        (_) => _.id === value.trigger,\n                    );\n                }\n            }),\n        );\n    }\n\n    public copyField(field: string) {\n        this._clipboard.copy(field);\n        notifySuccess(`Copied field \"${field}\" to clipboard.`);\n    }\n\n    public async save() {\n        this.loading = 'Saving email template...';\n        await this._state.saveTemplate({\n            ...(this.template || {}),\n            ...this.form.getRawValue(),\n            text: extractTextFromHTML(this.form.getRawValue().html || ''),\n        } as any);\n        this.loading = '';\n        notifySuccess('Successfully saved email template');\n        this._router.navigate(['/email-templates']);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { SharedBookingsModule } from '@placeos/bookings';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { EmailTemplatesComponent } from './email-templates.component';\nimport { EmailTemplatesListComponent } from './email-templates-list.component';\nimport { EmailTemplateManageComponent } from './email-template-manage.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: EmailTemplatesComponent,\n        children: [{ path: '', component: EmailTemplatesListComponent }],\n    },\n    { path: 'manage', component: EmailTemplateManageComponent },\n    { path: 'manage/:id', component: EmailTemplateManageComponent },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [\n        EmailTemplatesComponent,\n        EmailTemplatesListComponent,\n        EmailTemplateManageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class EmailTemplatesModule {}\n"],"x_google_ignoreList":[]}