{"version":3,"file":"apps_concierge_src_app_email-templates_email-templates_module_ts.js","mappings":"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","sources":["./apps/concierge/src/app/email-templates/email-template-manage.component.ts","./apps/concierge/src/app/email-templates/email-templates-list.component.ts","./apps/concierge/src/app/email-templates/email-templates-state.service.ts","./apps/concierge/src/app/email-templates/email-templates.component.ts","./apps/concierge/src/app/email-templates/email-templates.module.ts","./libs/bookings/src/index.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {\n    EmailTemplate,\n    EmailTemplatesStateService,\n} from './email-templates-state.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    extractTextFromHTML,\n    notifySuccess,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { take } from 'rxjs/operators';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\n@Component({\n    selector: 'email-template-manage',\n    template: `\n        <div class=\"absolute inset-0 bg-base-100 overflow-auto p-8\">\n            <form\n                class=\"max-w-full w-[48rem] mx-auto min-h-full\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-8\">\n                    <a\n                        icon\n                        matRipple\n                        [routerLink]=\"['/email-templates']\"\n                        class=\"-ml-8\"\n                    >\n                        <app-icon>arrow_back</app-icon>\n                    </a>\n                    <h2 class=\"text-2xl font-medium\">\n                        {{ template?.id ? 'Edit' : 'New' }} Email Template\n                    </h2>\n                    <div class=\"flex-1\"></div>\n                    <button\n                        btn\n                        matRipple\n                        type=\"button\"\n                        class=\"w-48\"\n                        (click)=\"save()\"\n                    >\n                        Save Template\n                    </button>\n                </div>\n                <div class=\"flex items-center space-x-4\">\n                    <div class=\"flex-1 space-y-2 w-1/4\">\n                        <label for=\"zone\">Building</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                name=\"zone\"\n                                placeholder=\"Select Building\"\n                                formControlName=\"zone_id\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let bld of buildings | async\"\n                                    [value]=\"bld.id\"\n                                >\n                                    {{ bld.display_name || bld.name }}\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A building is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 space-y-2 w-1/4\">\n                        <label for=\"category\">Category</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                name=\"category\"\n                                placeholder=\"Select Category\"\n                                formControlName=\"category\"\n                            >\n                                <mat-option value=\"internal\">\n                                    Internal\n                                </mat-option>\n                                <mat-option value=\"external\">\n                                    External\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A category is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 space-y-2 w-1/4\">\n                        <label for=\"trigger\">Trigger</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <mat-select\n                                name=\"trigger\"\n                                placeholder=\"Select Trigger\"\n                                formControlName=\"trigger\"\n                            >\n                                <mat-option value=\"\">None</mat-option>\n                                <mat-option\n                                    *ngFor=\"let template of definitions | async\"\n                                    [value]=\"template.id\"\n                                >\n                                    {{ template.name }}\n                                </mat-option>\n                            </mat-select>\n                            <mat-error>A trigger is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <button\n                        btn\n                        matRipple\n                        class=\"flex-1 mt-2\"\n                        matTooltip=\"Values that get replaced in the email template when sent\"\n                        [disabled]=\"!form.value.trigger\"\n                    >\n                        Placeholders\n                    </button>\n                    <mat-menu #tracking_menu=\"matMenu\">\n                        <button\n                            mat-menu-item\n                            *ngFor=\"let field of active_trigger?.fields || []\"\n                            (click)=\"copyField(field.name)\"\n                        >\n                            <div class=\"flex flex-col leading-tight\">\n                                <div>{{ field.name }}</div>\n                                <div class=\"text-xs opacity-30\">\n                                    {{ field.description }}\n                                </div>\n                            </div>\n                        </button>\n                    </mat-menu>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <input\n                            matInput\n                            placeholder=\"Reply to address\"\n                            formControlName=\"reply_to\"\n                        />\n                        <mat-error>A reply address is required</mat-error>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <input\n                            matInput\n                            placeholder=\"From address\"\n                            formControlName=\"from\"\n                        />\n                        <mat-error>A from address is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <app-icon matPrefix class=\"text-2xl relative -left-1\">\n                        description\n                    </app-icon>\n                    <input\n                        matInput\n                        placeholder=\"Template Subject\"\n                        formControlName=\"subject\"\n                    />\n                    <mat-error>A title for the template is required</mat-error>\n                </mat-form-field>\n                <rich-text-input\n                    formControlName=\"html\"\n                    placeholder=\"Body of the email template\"\n                    [images_allowed]=\"true\"\n                    class=\"min-h-[calc(100vh-28rem)] block\"\n                ></rich-text-input>\n            </form>\n        </div>\n        <ng-template #load_state>\n            <div class=\"absolute inset-0 bg-base-100\">\n                <div\n                    class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EmailTemplateManageComponent extends AsyncHandler {\n    public loading = '';\n    public template: EmailTemplate;\n    public readonly definitions = this._state.template_definitions;\n    public readonly buildings = this._org.building_list;\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        reply_to: new FormControl(''),\n        from: new FormControl(''),\n        subject: new FormControl('', [Validators.required]),\n        category: new FormControl('internal'),\n        trigger: new FormControl(''),\n        html: new FormControl('', [Validators.required]),\n        zone_id: new FormControl(''),\n    });\n    public active_trigger = null;\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: EmailTemplatesStateService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _clipboard: Clipboard,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(async (params) => {\n                if (params.has('id')) {\n                    this.loading = 'Loading email template...';\n                    this.template = await this._state.loadTemplate(\n                        params.get('id'),\n                    );\n                    this.loading = '';\n                    console.log('Template:', this.template);\n                    if (!this.template) {\n                        this._router.navigate(['/email-templates', 'manage']);\n                    } else {\n                        this.form.patchValue(this.template);\n                    }\n                }\n            }),\n        );\n        this.subscription(\n            'trigger',\n            this.form.valueChanges.subscribe(async (value) => {\n                if (value.trigger) {\n                    const trigger_list = await this.definitions\n                        .pipe(take(1))\n                        .toPromise();\n                    this.active_trigger = trigger_list.find(\n                        (_) => _.id === value.trigger,\n                    );\n                }\n            }),\n        );\n    }\n\n    public copyField(field: string) {\n        this._clipboard.copy(field);\n        notifySuccess(`Copied field \"${field}\" to clipboard.`);\n    }\n\n    public async save() {\n        this.loading = 'Saving email template...';\n        await this._state.saveTemplate({\n            ...(this.template || {}),\n            ...this.form.getRawValue(),\n            text: extractTextFromHTML(this.form.getRawValue().html || ''),\n        } as any);\n        this.loading = '';\n        notifySuccess('Successfully saved email template');\n        this._router.navigate(['/email-templates']);\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    EmailTemplate,\n    EmailTemplatesFilters,\n    EmailTemplatesStateService,\n} from './email-templates-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { currentUser, notifyError, notifySuccess } from '@placeos/common';\nimport { getModule } from '@placeos/ts-client';\n\n@Component({\n    selector: 'email-templates-list',\n    template: ` <div class=\"absolute inset-0 flex flex-col\">\n        <div class=\"flex items-center justify-between p-8 space-x-2\">\n            <h2 class=\"text-2xl font-medium\">Email Templates</h2>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"w-56 no-subscript\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.category\"\n                    placeholder=\"All Categories\"\n                    (ngModelChange)=\"setFilters({ category: $event })\"\n                >\n                    <mat-option value=\"\">All Categories</mat-option>\n                    <mat-option value=\"internal\">Internal</mat-option>\n                    <mat-option value=\"external\">External</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <a btn matRipple [routerLink]=\"['/email-templates', 'manage']\">\n                <div class=\"ml-2\">Create Template</div>\n                <app-icon class=\"text-2xl\">add</app-icon>\n            </a>\n        </div>\n        <div class=\"h-1/2 flex-1 w-full px-8 overflow-y-auto relative\">\n            <div class=\"w-full min-h-full overflow-x-auto\">\n                <simple-table\n                    class=\"min-w-[56rem] w-full block text-sm\"\n                    [data]=\"templates\"\n                    empty_message=\"No group events for selected period\"\n                    [columns]=\"[\n                        { key: 'subject', name: 'Title' },\n                        {\n                            key: 'category',\n                            name: 'Category',\n                            show: !(filters | async)?.category,\n                        },\n                        {\n                            key: 'trigger',\n                            name: 'Trigger',\n                            empty: 'No Trigger',\n                        },\n                        {\n                            key: 'zone_id',\n                            name: 'Building',\n                            content: bld_template,\n                        },\n                        {\n                            key: 'created_at',\n                            name: 'Created',\n                            size: '8rem',\n                            content: date_template,\n                        },\n                        {\n                            key: 'actions',\n                            name: ' ',\n                            size: '3.5rem',\n                            content: actions_template,\n                            sortable: false,\n                        },\n                    ]\"\n                    [sortable]=\"true\"\n                >\n                </simple-table>\n                <ng-template #date_template let-data=\"data\">\n                    <div class=\"opacity-60 p-4\">\n                        {{ data * 1000 | date: 'mediumDate' }}\n                    </div>\n                </ng-template>\n                <ng-template #bld_template let-data=\"data\">\n                    <div class=\"p-4\">\n                        {{ (data | building)?.display_name }}\n                        <span class=\"opacity-30\" *ngIf=\"!(data | building)\">\n                            No Building\n                        </span>\n                    </div>\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <button\n                        icon\n                        matRipple\n                        [matMenuTriggerFor]=\"menu\"\n                        class=\"mx-auto\"\n                    >\n                        <app-icon>more_vert</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button mat-menu-item (click)=\"sendTestEmail(row)\">\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl\">send</app-icon>\n                                <div>Send Test Email</div>\n                            </div>\n                        </button>\n                        <a\n                            mat-menu-item\n                            [routerLink]=\"[\n                                '/email-templates',\n                                'manage',\n                                row.id,\n                            ]\"\n                        >\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl\">edit</app-icon>\n                                <div>Edit Template</div>\n                            </div>\n                        </a>\n                        <button mat-menu-item (click)=\"removeTemplate(row)\">\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl text-error\">\n                                    delete\n                                </app-icon>\n                                <div>Delete Template</div>\n                            </div>\n                        </button>\n                    </mat-menu>\n                </ng-template>\n            </div>\n        </div>\n    </div>`,\n    styles: [``],\n})\nexport class EmailTemplatesListComponent {\n    public sending_email: string;\n    public readonly filters = this._state.filters;\n    public readonly templates = this._state.filtered_templates;\n\n    public readonly removeTemplate = (t) => this._state.removeTemplate(t);\n\n    constructor(\n        private _state: EmailTemplatesStateService,\n        private _org: OrganisationService,\n    ) {}\n\n    public setFilters(filters: Partial<EmailTemplatesFilters>) {\n        this._state.setFilters(filters);\n    }\n\n    public async sendTestEmail(template: EmailTemplate) {\n        this.sending_email = template.id;\n        const stmp_system = this._org.binding('smtp');\n        if (!stmp_system) {\n            return notifyError(\n                'Mailing system not configured for application.',\n            );\n        }\n        const mod = getModule(stmp_system, 'Mailer');\n        await mod.execute('send_mail', [\n            currentUser()?.email,\n            template.subject,\n            template.text,\n            template.html,\n            [], // resource attachments\n            [], // attachments\n            [], // cc\n            [], // bcc\n            template.reply_to || null, // reply_to\n            template.from || currentUser()?.email, // from\n        ]);\n        notifySuccess('Successfully sent test email');\n        this.sending_email = null;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { notifySuccess, randomString, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport {\n    PlaceMetadata,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { getUnixTime } from 'date-fns';\nimport { BehaviorSubject, combineLatest, forkJoin, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n} from 'rxjs/operators';\n\nexport interface EmailTemplate {\n    id: string;\n    subject: string;\n    zone_id: string;\n    category: 'internal' | 'external';\n    reply_to?: string;\n    from?: string;\n    trigger: string;\n    html: string;\n    text: string;\n    preview_url: string;\n    created_at: number;\n    updated_at: number;\n}\n\nexport interface EmailTemplateDefinition {\n    id: string;\n    name: string;\n    description: string;\n    fields: { name: string; description: string }[];\n}\n\nexport interface EmailTemplatesFilters {\n    category?: 'internal' | 'external';\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EmailTemplatesStateService {\n    private _filters = new BehaviorSubject<EmailTemplatesFilters>({});\n    private _change = new BehaviorSubject(0);\n\n    public readonly template_definitions = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(() =>\n            showMetadata(this._org.organisation.id, 'email_template_fields')\n                .pipe(\n                    map((_) => {\n                        const definitions =\n                            (_ as any)?.details ||\n                            ({} as Record<string, EmailTemplateDefinition>);\n                        return Object.keys(definitions).map(\n                            (key) =>\n                                ({\n                                    id: key,\n                                    name: definitions[key].name,\n                                    description:\n                                        definitions[key].description || '',\n                                    fields: definitions[key].fields.map(\n                                        (field) => ({\n                                            name: field.name,\n                                            description:\n                                                field.description || '',\n                                        }),\n                                    ),\n                                }) as EmailTemplateDefinition,\n                        );\n                    }),\n                )\n                .pipe(catchError(() => of([] as EmailTemplateDefinition[]))),\n        ),\n        shareReplay(1),\n    );\n\n    private _processTemplates(metadata: PlaceMetadata, zone_id: string) {\n        const data = metadata.details;\n        return ((data instanceof Array ? data : '') || []).map(\n            (template) => ({ ...template, zone_id }) as EmailTemplate,\n        );\n    }\n\n    public readonly templates = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld, region]) =>\n            forkJoin([\n                showMetadata(this._org.organisation.id, 'email_templates').pipe(\n                    map((_) =>\n                        this._processTemplates(_, this._org.organisation.id),\n                    ),\n                    catchError(() => of([] as EmailTemplate[])),\n                ),\n                showMetadata(bld.id, 'email_templates').pipe(\n                    map((_) => this._processTemplates(_, bld.id)),\n                    catchError(() => of([] as EmailTemplate[])),\n                ),\n                region\n                    ? showMetadata(region.id, 'email_templates').pipe(\n                          map((_) => this._processTemplates(_, region.id)),\n                          catchError(() => of([] as EmailTemplate[])),\n                      )\n                    : of([] as EmailTemplate[]),\n            ]),\n        ),\n        map(([org_templates, bld_templates, region_templates]) =>\n            org_templates.concat(bld_templates).concat(region_templates),\n        ),\n        shareReplay(1),\n    );\n    public readonly filters = this._filters.asObservable();\n\n    public readonly filtered_templates = combineLatest([\n        this.templates,\n        this.filters,\n    ]).pipe(\n        map(([templates, filters]) => {\n            const category = filters.category || '';\n            return templates.filter(\n                (_) => _.category === category || category === '',\n            );\n        }),\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {}\n\n    public async loadTemplate(id: string) {\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        return template_list.find((_) => _.id === id);\n    }\n\n    public async saveTemplate(template: EmailTemplate) {\n        if (!template.zone_id) return;\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        if (!template.id) {\n            template.id = `template-${randomString(8)}`;\n            template.created_at = getUnixTime(Date.now());\n        }\n        template.updated_at = getUnixTime(Date.now());\n        const zone_templates = template_list.filter(\n            (_) => _.zone_id === template.zone_id,\n        );\n        const template_value = { ...template };\n        delete template_value.zone_id;\n        console.log('Templates:', template_list);\n        const new_template_list = [\n            ...zone_templates.filter((_) => _.id !== template.id),\n            template,\n        ];\n        await updateMetadata(template.zone_id, {\n            name: `email_templates`,\n            details: new_template_list,\n            description: 'Email Templates for Zone',\n        }).toPromise();\n        notifySuccess('Successfully saved template');\n    }\n\n    public async removeTemplate(template: EmailTemplate) {\n        const template_list = await this.templates.pipe(take(1)).toPromise();\n        const zone_templates = template_list.filter(\n            (_) => _.zone_id === template.zone_id,\n        );\n        const new_template_list = zone_templates.filter(\n            (_) => _.id !== template.id,\n        );\n        await updateMetadata(template.zone_id, {\n            name: `email_templates`,\n            details: new_template_list,\n            description: 'Email Templates for Zone',\n        }).toPromise();\n        notifySuccess('Successfully removed template');\n    }\n\n    public setFilters(filters: Partial<EmailTemplatesFilters>) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-email-templates]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"relative flex flex-col flex-1 w-1/2 h-full\">\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EmailTemplatesComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { SharedBookingsModule } from '@placeos/bookings';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { EmailTemplatesComponent } from './email-templates.component';\nimport { EmailTemplatesListComponent } from './email-templates-list.component';\nimport { EmailTemplateManageComponent } from './email-template-manage.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: EmailTemplatesComponent,\n        children: [{ path: '', component: EmailTemplatesListComponent }],\n    },\n    { path: 'manage', component: EmailTemplateManageComponent },\n    { path: 'manage/:id', component: EmailTemplateManageComponent },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [\n        EmailTemplatesComponent,\n        EmailTemplatesListComponent,\n        EmailTemplateManageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class EmailTemplatesModule {}\n","export * from './lib/bookings.module';\nexport * from './lib/booking-form.service';\nexport * from './lib/booking.class';\nexport * from './lib/booking.utilities';\nexport * from './lib/bookings.fn';\nexport * from './lib/bookings.module';\nexport * from './lib/desk.service';\nexport * from './lib/lockers.service';\nexport * from './lib/booking-details-modal.component';\nexport * from './lib/booking-card.component';\nexport * from './lib/parking-select-modal/parking-select-modal.component';\n\nexport * from './lib/parking.service';\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { StaffUser, User } from 'libs/users/src/lib/user.class';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"names":["EmailTemplatesStateService","FormControl","FormGroup","Validators","ActivatedRoute","Router","AsyncHandler","extractTextFromHTML","notifySuccess","OrganisationService","take","Clipboard","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","bld_r2","id","ɵɵadvance","ɵɵtextInterpolate1","display_name","name","template_r3","ɵɵlistener","EmailTemplateManageComponent_button_47_Template_button_click_0_listener","field_r5","ɵɵrestoreView","_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","copyField","ɵɵtextInterpolate","description","ɵɵelement","loading","EmailTemplateManageComponent","constructor","_org","_state","_route","_router","_clipboard","definitions","template_definitions","buildings","building_list","form","reply_to","from","subject","required","category","trigger","html","zone_id","active_trigger","ngOnInit","_this","subscription","paramMap","subscribe","_ref","_asyncToGenerator","params","has","template","loadTemplate","get","console","log","navigate","patchValue","_x","apply","arguments","valueChanges","_ref2","value","trigger_list","pipe","toPromise","find","_","_x2","field","copy","save","_this2","saveTemplate","getRawValue","text","ɵɵdirectiveInject","i1","i2","i3","i4","_2","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","EmailTemplateManageComponent_Template","rf","ctx","EmailTemplateManageComponent_Template_button_click_9_listener","_r1","ɵɵtemplate","EmailTemplateManageComponent_mat_option_17_Template","EmailTemplateManageComponent_mat_option_39_Template","EmailTemplateManageComponent_button_47_Template","EmailTemplateManageComponent_ng_template_64_Template","ɵɵtemplateRefExtractor","ɵɵpureFunction0","_c0","ɵɵpipeBind1","fields","_c1","currentUser","notifyError","getModule","ɵɵpipeBind2","data_r2","EmailTemplatesListComponent_ng_template_25_span_3_Template","tmp_5_0","data_r3","EmailTemplatesListComponent_ng_template_27_Template_button_click_5_listener","row_r5","row","sendTestEmail","EmailTemplatesListComponent_ng_template_27_Template_button_click_17_listener","removeTemplate","menu_r7","ɵɵpureFunction1","_c8","EmailTemplatesListComponent","filters","templates","filtered_templates","t","setFilters","sending_email","stmp_system","binding","mod","execute","email","EmailTemplatesListComponent_Template","EmailTemplatesListComponent_Template_mat_select_ngModelChange_6_listener","$event","EmailTemplatesListComponent_ng_template_23_Template","EmailTemplatesListComponent_ng_template_25_Template","EmailTemplatesListComponent_ng_template_27_Template","tmp_3_0","ɵɵpureFunction6","_c7","_c2","tmp_6_0","_c3","_c4","bld_template_r9","_c5","date_template_r8","_c6","actions_template_r10","randomString","SettingsService","showMetadata","updateMetadata","getUnixTime","BehaviorSubject","combineLatest","forkJoin","of","catchError","filter","map","shareReplay","switchMap","_processTemplates","metadata","data","details","Array","_settings","_filters","_change","active_building","active_region","bld","organisation","Object","keys","key","region","org_templates","bld_templates","region_templates","concat","asObservable","template_list","created_at","Date","now","updated_at","zone_templates","template_value","new_template_list","_this3","next","getValue","ɵɵinject","factory","ɵfac","providedIn","EmailTemplatesComponent","attrs","EmailTemplatesComponent_Template","CommonModule","FormsModule","RouterModule","SharedSpacesModule","FormFieldsModule","SharedBookingsModule","UIModule","ROUTES","path","component","children","redirectTo","EmailTemplatesModule","_3","forChild","declarations","imports","MatDialog","endOfDay","startOfDay","first","queryBookings","saveBooking","DeskConfirmModalComponent","DeskQuestionsModalComponent","DesksService","_dialog","can_set_date","error_on_host","bookDesk","desks","host","reason","attendees","date","level","levelWithID","zone","ref","open","success","Promise","race","componentInstance","event","afterClosed","close","bookings","type","period_start","period_end","desk_list","d","user_email","toLowerCase","length","users","all","desk","idx","makeDeskBooking","valueOf","for_user","location","zones","parent_id","booking_data","booking_start","user_id","user_name","booking_end","Math","floor","asset_id","asset_name","title","booking_type","extension_data","map_id","groups"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}