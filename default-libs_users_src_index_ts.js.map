{"version":3,"file":"default-libs_users_src_index_ts.js","mappings":"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","names":["User","fromUnixTime","dirtyUnixTime","requiredArgs","arguments","unixTime","toInteger","toDate","i0","user_r4","_r6","$implicit","ctx_r5","removeUser","name","ctx_r1","host","email","availability","_c1","date","offset","width","i_r8","ctx_r2","today","current_hour","ctx_r3","FindAvailabilityModalComponent","AsyncHandler","isSameDay","this","Date","now","getHours","selection_left","getMinutes","selection_width","duration","constructor","_data","_renderer","_dialog_ref","super","users","BehaviorSubject","search","hours","Array","fill","pipe","debounceTime","switchMap","length","queryUserFreeBusy","calendars","map","_","join","period_start","getUnixTime","startOfDay","period_end","endOfDay","catchError","of","availability_list","availability_map","item","id","filter","status","block","starts_at","differenceInMinutes","ends_at","start","size","defaultIfEmpty","shareReplay","move_time","_start_time","_move_last","_move_size","next","addUser","user","getValue","u","closeAndUpdate","close","ngAfterViewInit","timeout","el","_container_el","nativeElement","querySelector","rect","getBoundingClientRect","el_rect","scrollTo","left","updateWidth","updateScroll","container_size","user_list_size","Math","floor","scrollLeft","startMovePeriod","event","preventDefault","stopPropagation","MouseEvent","clientX","touches","subscription","listen","e","_onMovePeriod","_onMoveEnd","startMoveDuration","_onMoveDuration","change_px","change_min","abs","old_date","addMinutes","valueOf","max","unsub","t","MAT_DIALOG_DATA","i1","core","Xpm","selectors","viewQuery","rf","ctx","$event","FindAvailabilityModalComponent_div_21_Template","FindAvailabilityModalComponent_div_23_Template","FindAvailabilityModalComponent_div_30_Template","event_r1","UserAvailabilityComponent","inputs","decls","vars","consts","template","UserAvailabilityComponent_div_2_Template","WFHSettingsModalComponent","i2","i3","i4","i5","i6","i7","i8","i9","i10","i11","i12","MapLocation","type","location","position","map_id","asset_id","x","map_width","y","map_height","variance","last_seen","level","building","at_location","coordinates_from"],"sourceRoot":"webpack:///","sources":["./libs/users/src/lib/user.pipe.ts","./node_modules/date-fns/esm/fromUnixTime/index.js","./libs/users/src/lib/find-availability-modal/find-availability-modal.component.ts","./libs/users/src/lib/find-availability-modal/user-availability.component.ts","./libs/users/src/lib/users.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Pipe } from \"@angular/core\";\nimport { showGuest } from \"./guests.fn\";\nimport { showStaff } from \"./staff.fn\";\nimport { User } from \"./user.class\";\n\nconst USER_LIST: User[] = [];\n\nconst EMPTY_USER = new User();\n\n@Pipe({\n    name: 'user'\n})\nexport class UserPipe {\n    /**\n     * Get details of the user with the given ID\n     * @param user_id ID or Email of the user\n     */\n    public async transform(user_id: string): Promise<User> {\n        if (!user_id) return EMPTY_USER;\n        let user = USER_LIST.find(({ id, email }) => id === user_id || email === user_id);\n        if (user) return user;\n        user = await showStaff(user_id).toPromise();\n        if (user) {\n            USER_LIST.push(user);\n            return user;\n        }\n        user = await showGuest(user_id).toPromise();\n        if (user) {\n            USER_LIST.push(user);\n            return user;\n        }\n        return EMPTY_USER;\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param {Number} unixTime - the given Unix timestamp (in seconds)\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import {\n    Component,\n    ElementRef,\n    Inject,\n    Renderer2,\n    ViewChild,\n} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler } from '@placeos/common';\nimport {\n    addMinutes,\n    differenceInMinutes,\n    endOfDay,\n    fromUnixTime,\n    getUnixTime,\n    isSameDay,\n    startOfDay,\n} from 'date-fns';\nimport { queryUserFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { BehaviorSubject, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    defaultIfEmpty,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { User } from '../user.class';\nimport { AvailabilityBlock } from './user-availability.component';\n\nexport interface FindAvailabilityData {\n    host: User;\n    users: User[];\n    date: number;\n    duration: number;\n}\n\n@Component({\n    selector: 'find-availability-modal',\n    template: `\n        <header class=\"relative flex items-center justify-center p-4\">\n            <h2 class=\"text-center\">Find Availability</h2>\n            <button\n                icon\n                matRipple\n                mat-dialog-close\n                class=\"absolute top-1/2 left-1 -translate-y-1/2\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col h-[calc(100vh-7rem)] sm:h-[65vh]\"\n            (window:resize)=\"updateWidth()\"\n        >\n            <div\n                class=\"w-full flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2 p-2\"\n            >\n                <a-date-field\n                    [(ngModel)]=\"date\"\n                    class=\"max-h-[3.25rem] flex-1\"\n                ></a-date-field>\n                <a-user-search-field\n                    [(ngModel)]=\"user\"\n                    (ngModelChange)=\"addUser($event)\"\n                    class=\"max-h-[3.25rem] flex-1\"\n                ></a-user-search-field>\n            </div>\n            <div\n                #container\n                class=\"flex flex-1 h-1/2 w-full border-t border-gray-300 dark:border-neutral-500 relative overflow-auto divide-x divide-gray-300 dark:divide-neutral-500 max-w-[100vw] sm:max-w-[80vw]\"\n                (scroll)=\"updateScroll()\"\n            >\n                <div\n                    users\n                    class=\"sticky left-0 min-h-full bg-white dark:bg-neutral-700 border-r border-gray-300 dark:border-neutral-500 z-30\"\n                >\n                    <div\n                        header\n                        class=\"h-10 w-[6rem] border-b border-gray-300 dark:border-neutral-500\"\n                    ></div>\n                    <div\n                        host\n                        class=\"flex flex-col items-center justify-center h-32 w-[6rem] relative border-b border-gray-300 dark:border-neutral-500 py-2\"\n                    >\n                        <a-user-avatar\n                            class=\"text-2xl\"\n                            [user]=\"host\"\n                        ></a-user-avatar>\n                        <div\n                            class=\"text-xs break-words overflow-hidden max-w-full px-2 text-center\"\n                        >\n                            {{ host.name || host.email }}\n                        </div>\n                        <user-availability-list\n                            class=\"absolute top-0 -bottom-px left-full pointer-events-none\"\n                            [user]=\"host\"\n                            [date]=\"date\"\n                            [offset]=\"offset\"\n                            [availability]=\"\n                                (availability | async)\n                                    ? (availability | async)[host.email]\n                                    : []\n                            \"\n                            [width]=\"width\"\n                        ></user-availability-list>\n                    </div>\n                    <div\n                        person\n                        class=\"flex flex-col items-center justify-center h-32 w-[6rem] relative border-b border-gray-300 dark:border-neutral-500 py-2\"\n                        *ngFor=\"let user of users | async\"\n                    >\n                        <a-user-avatar\n                            class=\"text-2xl\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <div\n                            class=\"text-xs break-words max-w-full px-2 text-center\"\n                        >\n                            {{ user.name || host.email }}\n                        </div>\n                        <button\n                            icon\n                            class=\"absolute -top-1 -left-1\"\n                            (click)=\"removeUser(user)\"\n                        >\n                            <app-icon>close</app-icon>\n                        </button>\n                        <user-availability-list\n                            class=\"absolute top-0 -bottom-px left-full pointer-events-none\"\n                            [user]=\"user\"\n                            [availability]=\"\n                                (availability | async)\n                                    ? (availability | async)[user.email]\n                                    : []\n                            \"\n                            [date]=\"date\"\n                            [offset]=\"offset\"\n                            [width]=\"width\"\n                        ></user-availability-list>\n                    </div>\n                </div>\n                <div\n                    [attr.hour]=\"i\"\n                    class=\"min-w-[5rem] bg-gray-50 dark:bg-neutral-600 min-h-full pointer-events-none\"\n                    [attr.disabled]=\"today && i < current_hour\"\n                    *ngFor=\"let h of hours; let i = index\"\n                >\n                    <div\n                        header\n                        class=\"h-10 border-b border-gray-300 dark:border-neutral-500 p-2\"\n                    >\n                        {{ i % 12 ? i % 12 : '12' }}{{ i >= 12 ? 'pm' : 'am' }}\n                    </div>\n                </div>\n                <div\n                    selection\n                    class=\"absolute top-10 bottom-0 !border-x-2 !border-blue-500 bg-blue-500/30 z-20 cursor-grab active:cursor-grabbing\"\n                    [style.left]=\"selection_left + 'rem'\"\n                    [style.width]=\"selection_width + 'rem'\"\n                    (mousedown)=\"startMovePeriod($event)\"\n                    (touchstart)=\"startMovePeriod($event)\"\n                >\n                    <div\n                        handle\n                        class=\"absolute top-1/2 -left-px -translate-x-1/2 -translate-y-1/2 h-3 w-3 rounded-full bg-blue-500\"\n                    ></div>\n                    <div\n                        handle\n                        class=\"absolute top-1/2 -right-px translate-x-1/2 -translate-y-1/2 h-3 w-3 rounded-full bg-blue-500 hover:h-4 hover:w-4 active:bg-primary\"\n                        (mousedown)=\"startMoveDuration($event)\"\n                        (touchstart)=\"startMoveDuration($event)\"\n                    ></div>\n                    <div\n                        class=\"bg-white dark:bg-neutral-600 border border-gray-300 dark:border-neutral-500 p-2 absolute top-2 left-1/2 -translate-x-1/2 shadow text-xs whitespace-nowrap rounded\"\n                    >\n                        {{ duration | duration }}\n                    </div>\n                    <div\n                        *ngIf=\"move_time\"\n                        class=\"bg-white dark:bg-neutral-600 border border-gray-300 dark:border-neutral-500 p-2 absolute top-12 left-1/2 -translate-x-1/2 shadow text-xs whitespace-nowrap rounded\"\n                    >\n                        {{ date | date: 'shortTime' }}\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center justify-between p-2 border-t border-gray-200 dark:border-neutral-500 w-full\"\n        >\n            <button\n                matRipple\n                [mat-dialog-close]=\"true\"\n                class=\"clear text-primary\"\n            >\n                <div class=\"flex items-center\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <div class=\"mr-1 underline\">Back to form</div>\n                </div>\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            [disabled='true'] {\n                background: rgba(0, 0, 0, 0.05) !important;\n                pointer-events: none;\n            }\n            [disabled='true'] > * {\n                color: rgba(0, 0, 0, 0.3);\n            }\n        `,\n    ],\n})\nexport class FindAvailabilityModalComponent extends AsyncHandler {\n    public readonly users = new BehaviorSubject([]);\n    public search = '';\n    public date = this._data.date || Date.now();\n    public duration = this._data.duration || 60;\n    public user?: User;\n    public offset = 0;\n    public width = 0;\n\n    public readonly host = this._data.host;\n    public readonly hours = new Array(24).fill(0);\n\n    public readonly availability = this.users.pipe(\n        debounceTime(300),\n        switchMap((users) => {\n            if (!users.length) return of([]);\n            return queryUserFreeBusy({\n                calendars: [this.host.email, ...users.map((_) => _.email)].join(\n                    ','\n                ),\n                period_start: getUnixTime(startOfDay(this.date)),\n                period_end: getUnixTime(endOfDay(this.date)),\n            }).pipe(catchError(() => of([])));\n        }),\n        map((availability_list) => {\n            const availability_map: Record<string, AvailabilityBlock[]> = {};\n            for (const item of availability_list) {\n                availability_map[item.id] = item.availability\n                    .filter((_) => _.status === 'busy')\n                    .map((block) => {\n                        const date = fromUnixTime(block.starts_at);\n                        const duration = differenceInMinutes(\n                            fromUnixTime(block.ends_at),\n                            fromUnixTime(block.starts_at)\n                        );\n                        return {\n                            date,\n                            duration,\n                            start:\n                                ((date.getHours() + date.getMinutes() / 60) /\n                                    24) *\n                                100,\n                            size: (duration / 60 / 24) * 100,\n                        };\n                    });\n            }\n            return availability_map;\n        }),\n        defaultIfEmpty({}),\n        shareReplay(1)\n    );\n\n    @ViewChild('container', { static: true })\n    private _container_el!: ElementRef<HTMLDivElement>;\n\n    public get today() {\n        return isSameDay(this.date, Date.now());\n    }\n\n    public get current_hour() {\n        return new Date().getHours();\n    }\n\n    public get selection_left() {\n        const date = new Date(this.date);\n        return (date.getHours() + date.getMinutes() / 60) * 5 + 6;\n    }\n\n    public get selection_width() {\n        return (this.duration / 60) * 5;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: FindAvailabilityData,\n        private _renderer: Renderer2,\n        private _dialog_ref: MatDialogRef<FindAvailabilityModalComponent>\n    ) {\n        super();\n        this.users.next([...this._data.users]);\n    }\n\n    public addUser(user: User) {\n        this.users.next([\n            ...this.users.getValue().filter((u) => u.email !== user.email),\n            user,\n        ]);\n        this.user = null;\n    }\n\n    public removeUser(user: User) {\n        this.users.next(\n            this.users.getValue().filter((u) => u.email !== user.email)\n        );\n        this.user = null;\n    }\n\n    public closeAndUpdate() {\n        this._dialog_ref.close(true);\n    }\n\n    public ngAfterViewInit() {\n        const date = new Date(this.date);\n        this.timeout(\n            'init',\n            () => {\n                const el = this._container_el.nativeElement.querySelector(\n                    `[hour=\"${date.getHours()}\"]`\n                );\n                if (el) {\n                    const rect =\n                        this._container_el.nativeElement.getBoundingClientRect();\n                    const el_rect = el.getBoundingClientRect();\n                    this._container_el.nativeElement.scrollTo(\n                        el_rect.left - 128 - rect.left,\n                        0\n                    );\n                }\n                this.updateWidth();\n                this.updateScroll();\n            },\n            300\n        );\n    }\n\n    public updateWidth() {\n        const container_size =\n            this._container_el.nativeElement.getBoundingClientRect().width;\n        const user_list_size = this._container_el.nativeElement\n            .querySelector('[users]')\n            .getBoundingClientRect().width;\n        this.width = Math.floor(container_size - user_list_size);\n        this._move_size =\n            this._container_el.nativeElement\n                .querySelector('[hour]')\n                .getBoundingClientRect().width * 24;\n    }\n\n    public updateScroll() {\n        this.offset = this._container_el.nativeElement.scrollLeft;\n    }\n\n    public move_time = false;\n    private _start_time = 0;\n    private _move_last = 0;\n    private _move_size = 0;\n\n    public startMovePeriod(event: MouseEvent | TouchEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.updateWidth();\n        this._move_last =\n            event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX;\n        this.move_time = true;\n        this._start_time = this.date;\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'mousemove', (e) =>\n                      this._onMovePeriod(e)\n                  )\n              )\n            : this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'touchmove', (e) =>\n                      this._onMovePeriod(e)\n                  )\n              );\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'mouseup', () =>\n                      this._onMoveEnd()\n                  )\n              )\n            : this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'touchend', () =>\n                      this._onMoveEnd()\n                  )\n              );\n    }\n\n    public startMoveDuration(event: MouseEvent | TouchEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.updateWidth();\n        this._move_last =\n            event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX;\n        this._start_time = this.duration;\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'mousemove', (e) =>\n                      this._onMoveDuration(e)\n                  )\n              )\n            : this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'touchmove', (e) =>\n                      this._onMoveDuration(e)\n                  )\n              );\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'mouseup', () =>\n                      this._onMoveEnd()\n                  )\n              )\n            : this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'touchend', () =>\n                      this._onMoveEnd()\n                  )\n              );\n    }\n\n    private _onMovePeriod(event: MouseEvent | TouchEvent) {\n        const change_px =\n            this._move_last -\n            (event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX);\n        const dir = change_px > 0 ? -1 : 1;\n        const change_min =\n            dir *\n            Math.floor(Math.abs((change_px / this._move_size) * 24 * 60) / 5) *\n            5;\n        if (change_min) {\n            const old_date = this.date;\n            this.date = addMinutes(this._start_time, change_min).valueOf();\n            if (this.date < Date.now()) this.date = old_date;\n        }\n    }\n\n    private _onMoveDuration(event: MouseEvent | TouchEvent) {\n        const change_px =\n            this._move_last -\n            (event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX);\n        const dir = change_px > 0 ? -1 : 1;\n        const change_min =\n            dir *\n            Math.floor(Math.abs((change_px / this._move_size) * 24 * 60) / 5) *\n            5;\n        if (change_min) {\n            this.duration = Math.max(30, this._start_time + change_min);\n        }\n    }\n\n    private _onMoveEnd() {\n        this.unsub('on_move');\n        this.unsub('on_move_end');\n        this._move_last = 0;\n        this.move_time = false;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { User } from '../user.class';\n\nexport interface AvailabilityBlock {\n    date: number;\n    duration: number;\n    start: number;\n    size: number;\n}\n\n@Component({\n    selector: 'user-availability-list',\n    template: `\n        <div\n            class=\"overflow-hidden relative border-b border-gray-300 dark:border-neutral-500 h-full pointer-events-none\"\n            [style.width]=\"width + 'px'\"\n        >\n            <div\n                class=\"absolute w-[120rem] h-full inset-y-0\"\n                [style.left]=\"-offset + 'px'\"\n            >\n                <div\n                    event\n                    *ngFor=\"let event of availability\"\n                    class=\"absolute inset-y-0 bg-primary text-white p-2 overflow-hidden border border-white rounded\"\n                    [style.left]=\"event.start + '%'\"\n                    [style.width]=\"event.size + '%'\"\n                >\n                    <div class=\"text-xs\">Unavailable</div>\n                    <div class=\"text-xs max-w-full\">\n                        {{ event.date | date: 'shortTime' }} -\n                        {{\n                            event.date.valueOf() + event.duration * 60 * 1000\n                                | date: 'shortTime'\n                        }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class UserAvailabilityComponent {\n    @Input() public user: User;\n    @Input() public availability: AvailabilityBlock[] = [];\n    @Input() public date: number = Date.now();\n    @Input() public offset = 0;\n    @Input() public width = 0;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\nimport { FormFieldsModule } from 'libs/form-fields/src/lib/form-fields.module';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\nimport { UserPipe } from './user.pipe';\nimport { WFHSettingsModalComponent } from './wfh-settings-modal.component';\nimport { FindAvailabilityModalComponent } from './find-availability-modal/find-availability-modal.component';\nimport { UserAvailabilityComponent } from './find-availability-modal/user-availability.component';\n\nconst COMPONENTS = [\n    NewUserModalComponent,\n    UserFormComponent,\n    WFHSettingsModalComponent,\n    UserPipe,\n    FindAvailabilityModalComponent,\n    UserAvailabilityComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        FormFieldsModule,\n        ComponentsModule,\n        MatCheckboxModule,\n        MatProgressSpinnerModule,\n        MatMenuModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedUsersModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[1]}