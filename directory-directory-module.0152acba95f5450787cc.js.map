{"version":3,"sources":["./src/app/bookings/space-flow/space-flow.service.ts","./src/app/directory/user-list/item/item.component.html","./src/app/directory/user-list/item/item.component.ts","./src/app/directory/user-list/user-list.component.html","./src/app/directory/user-list/user-list.component.ts","./src/app/directory/directory.module.ts"],"names":["clearEventFormState","sessionStorage","removeItem","localStorage","SpaceFlowService","_events","_calendar","_org","_staff","_dialog","super","_event","_form","_filters","_loading_spaces","_loading_event","event","this","asObservable","form","filters","loading_spaces","loading_event","spaces","pipe","next","getValue","value","period_start","Math","floor","Date","date","valueOf","period_end","duration","zones","length","building","id","availability","zone_ids","join","then","list","filter","space","capacity","clearState","setEvent","nearestTo","controls","subscription","storeState","name","setValue","ref","open","width","height","data","componentInstance","_","reason","subscribe","attendees","push","metadata","close","setItem","JSON","stringify","toJSON","event_data","getItem","parse","form_data","patchValue","filter_data","markAllAsTouched","organiser","host","current","email","title","valid","key","invalid","Promise","reject","values","save","DirectoryUserListItemComponent","_settings","get","LETTERS","split","ROUTES","path","component","DirectoryUserListComponent","_users","user_list","search$","Subject","groupedUsers","search_results$","debounceTime","distinctUntilChanged","switchMap","query","loading","min_search_length","q","catch","resolve","map","buildGroups","users","sorted","sort","a","b","localeCompare","letter","letters","f","startsWith","DirectoryModule","forChild"],"mappings":"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","file":"directory-directory-module.0152acba95f5450787cc.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { addMinutes, roundToNearestMinutes, isAfter, endOfDay } from 'date-fns';\n\nimport { BaseClass, notifyError, unique } from '@user-interfaces/common';\nimport {\n    CalendarEvent,\n    EventsService,\n    generateEventForm,\n} from '@user-interfaces/events';\nimport { CalendarService } from '@user-interfaces/calendar';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { NewUserModalComponent, StaffService } from '@user-interfaces/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface EventFormFilters {\n    capacity?: number;\n    zones?: string[];\n}\n\nexport function clearEventFormState(): void {\n    sessionStorage.removeItem('PLACEOS.event');\n    sessionStorage.removeItem('PLACEOS.event_form');\n    localStorage.removeItem('PLACEOS.event_filters');\n}\n\n@Injectable()\nexport class SpaceFlowService extends BaseClass {\n    /** Active event being worked on */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Form fields for the current flow */\n    private _form = new BehaviorSubject<FormGroup>(null);\n    /** Form fields for the current flow */\n    private _filters = new BehaviorSubject<EventFormFilters>({});\n    /** Whether space listing is being retrieved */\n    private _loading_spaces = new BehaviorSubject<boolean>(false);\n    /** Whether changes to event are being saved */\n    private _loading_event = new BehaviorSubject<boolean>(false);\n\n    public readonly event = this._event.asObservable();\n    public readonly form = this._form.asObservable();\n    public get event_form() {\n        return this._form.getValue();\n    }\n    public readonly filters = this._filters.asObservable();\n    public readonly loading_spaces = this._loading_spaces.asObservable();\n    public readonly loading_event = this._loading_event.asObservable();\n    public get event_filters() {\n        return this._filters.getValue();\n    }\n    public readonly spaces = this._filters.pipe(\n        switchMap((filters) => {\n            this._loading_spaces.next(true);\n            const form = this._form.getValue().value;\n            const period_start = Math.floor(\n                new Date(form.date).valueOf() / 1000\n            );\n            const period_end = Math.floor(\n                addMinutes(new Date(form.date), form.duration || 60).valueOf() /\n                    1000\n            );\n            const zones = filters?.zones?.length\n                ? filters.zones\n                : [this._org.building?.id];\n            return this._calendar\n                .availability({\n                    zone_ids: zones.join(','),\n                    period_start,\n                    period_end,\n                })\n                .then((list) => {\n                    this._loading_spaces.next(false);\n                    return list.filter(\n                        (space) =>\n                            !filters.capacity ||\n                            filters.capacity >= space.capacity\n                    );\n                });\n        })\n    );\n\n    public get is_future_date() {\n        const date = this._form.getValue()?.controls?.date.value || new Date().valueOf();\n        return isAfter(new Date(date), endOfDay(new Date()));\n    }\n\n    public readonly clearState = () => clearEventFormState();\n\n    constructor(\n        private _events: EventsService,\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _staff: StaffService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.setEvent(\n            new CalendarEvent({\n                date: roundToNearestMinutes(addMinutes(new Date(), 2), {\n                    nearestTo: 5,\n                }).valueOf(),\n            })\n        );\n    }\n\n    /** Set the event being worked on */\n    public setEvent(event: CalendarEvent): void {\n        this._event.next(event);\n        const form = generateEventForm(event);\n        this._form.next(form);\n        this.subscription('form_change', () => this.storeState());\n    }\n\n    /** Set the value of the form control */\n    public setValue<T = any>(name: string, value: T): void {\n        const form = this._form.getValue();\n        if (form && form.controls[name]) {\n            form.controls[name].setValue(value);\n        }\n    }\n\n    public newAttendee() {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {},\n            }\n        );\n        const form = this._form.getValue();\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                const attendees = form.controls.attendees.value || [];\n                attendees.push(event.metadata);\n                form.controls.attendees.setValue(unique(attendees, 'email'));\n                ref.close();\n            });\n    }\n\n    /** Reset the form fields for the active event */\n    public clearForm(): void {\n        this.setEvent(this._event.getValue());\n        this._filters.next({});\n    }\n\n    /** Update the current form filters */\n    public updateFilters(filters: EventFormFilters) {\n        this._filters.next(filters);\n    }\n\n    /** Store current event details and form values */\n    public storeState(): void {\n        const form = this._form.getValue();\n        sessionStorage.setItem(\n            'PLACEOS.event',\n            JSON.stringify(this._event.getValue().toJSON())\n        );\n        sessionStorage.setItem('PLACEOS.event_form', JSON.stringify(form.value));\n        localStorage.setItem(\n            'PLACEOS.event_filters',\n            JSON.stringify(this._filters.getValue())\n        );\n    }\n\n    /** Load old event details and form values */\n    public loadState(): void {\n        const event_data = sessionStorage.getItem('PLACEOS.event') || '{}';\n        if (event_data) {\n            this._event.next(new CalendarEvent(JSON.parse(event_data)));\n        }\n        const form_data = sessionStorage.getItem('PLACEOS.event_form');\n        if (form_data) {\n            const form = generateEventForm(this._event.getValue());\n            form.patchValue(JSON.parse(form_data));\n            this._form.next(form);\n        }\n        const filter_data = localStorage.getItem('PLACEOS.event_filters');\n        if (filter_data) {\n            this._filters.next(JSON.parse(filter_data));\n        }\n    }\n\n    /** Save changes to event to the server */\n    public save(): Promise<void> {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.controls.organiser.value || !form.controls.host.value)\n            form.patchValue({\n                organiser: this._staff.current,\n                host: this._staff.current.email,\n            });\n        if (!form.controls.title.value) {\n            form.patchValue({\n                title: this._staff.current.email\n            });\n        }\n        if (!form.valid) {\n            const list = [];\n            for (const key in form.controls) {\n                if (form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return Promise.reject(\n                notifyError(\n                    `Some form fields are not valid: [${list.join(', ')}]`\n                )\n            );\n        }\n        this._loading_event.next(true);\n        const values = new CalendarEvent({\n            ...this._event.getValue().toJSON(),\n            ...this._form.getValue().value,\n        });\n        return this._events.save(values).then(\n            () => this._loading_event.next(false),\n            () => this._loading_event.next(false)\n        );\n    }\n}\n","<div class=\"space-details\" *ngIf=\"user\" [class.with-image]=\"show_image\">\n    <div class=\"group\">\n        <div class=\"avatar\" *ngIf=\"show_image\">\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n        </div>\n        <div class=\"details\">\n            <div class=\"name\">{{ user.name }}</div>\n            <div class=\"info\">\n                <a name=\"email\" [href]=\"'mailto:' + user.email | safe: 'url'\">{{ user.email }}</a>\n            </div>\n        </div>\n    </div>\n    <div class=\"actions\">\n        <a\n            mat-flat-button\n            color=\"primary\"\n            button\n            name=\"locate\"\n            [routerLink]=\"['/explore']\"\n            [queryParams]=\"{ user: user.email }\"\n            (click)=\"sendLocateEvent()\"\n        >\n            Locate\n        </a>\n        <a\n            mat-flat-button\n            color=\"primary\"\n            button\n            name=\"call\"\n            *ngIf=\"user.phone\"\n            [href]=\"'tel:' + user.phone | safe: 'url'\"\n            (click)=\"sendCallEvent()\"\n        >\n            Call\n        </a>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { SettingsService } from '@user-interfaces/common';\nimport { User } from '@user-interfaces/users';\n\n@Component({\n    selector: 'a-directory-user-list-item',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss'],\n})\nexport class DirectoryUserListItemComponent {\n    /** Space to display */\n    @Input() public user: User;\n\n    public get show_image() {\n        return this._settings.get('app.directory.show_avatars');\n    }\n\n    public sendLocateEvent() {\n        // this._service.Analytics.event('Locate', `locate_clicked_user_${this.user.name}`);\n    }\n\n    public sendCallEvent() {\n        // this._service.Analytics.event('Call', `call_clicked_user_${this.user.name}`);\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","<div class=\"directory page\">\n    <header class=\"header\">\n        <a-topbar-header [(menu)]=\"show_menu\"></a-topbar-header>\n    </header>\n    <div class=\"actions\" [class.blank]=\"false\" [class.has-back]=\"false\">\n        <div class=\"search\">\n            <a-searchbar\n                [(value)]=\"search_str\"\n                (valueChange)=\"search$.next($event)\"\n                [loading]=\"loading\"\n                [autofocus]=\"true\"\n                [flat]=\"true\"\n                placeholder=\"Search for a person...\"\n            ></a-searchbar>\n        </div>\n    </div>\n    <main>\n        <ng-container *ngIf=\"groupedUsers && user_list.length; else empty_state\">\n            <ng-container *ngFor=\"let letter of letters\">\n                <ng-container *ngIf=\"groupedUsers[letter].length\">\n                    <div class=\"letter\">{{ letter }}</div>\n                    <a-directory-user-list-item\n                        *ngFor=\"let user of groupedUsers[letter]\"\n                        [user]=\"user\"\n                    ></a-directory-user-list-item>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n<ng-template #empty_state>\n    <div class=\"list\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <app-icon\n                    [icon]=\"{\n                        type: 'icon',\n                        class: 'material-icons',\n                        content:\n                            search_str && search_str.length >= min_search_length\n                                ? 'close'\n                                : 'arrow_upward'\n                    }\"\n                ></app-icon>\n            </div>\n            <div class=\"text\">\n                {{\n                    search_str && search_str.length >= min_search_length\n                        ? ' No matches for \"' + search_str + '\"'\n                        : 'Type above to search for users'\n                }}\n            </div>\n        </div>\n    </div>\n</ng-template>\n<a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n","import { Component, OnInit} from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { BaseClass, SettingsService } from '@user-interfaces/common';\nimport { StaffService, User } from '@user-interfaces/users';\nimport { clearEventFormState } from '../../bookings/space-flow/space-flow.service';\n\nconst LETTERS = `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.split('');\n\n@Component({\n    selector: 'a-directory-user-list',\n    templateUrl: './user-list.component.html',\n    styleUrls: ['./user-list.component.scss'],\n})\nexport class DirectoryUserListComponent extends BaseClass implements OnInit {\n    /** List of controllable spaces */\n    public user_list: User[] = [];\n    /** String  */\n    public search_str: string;\n    /** List of users from an API search */\n    public search_results$: Observable<User[]>;\n    /** Whether space list is being filtered */\n    public loading: boolean;\n    /** Subject holding the value of the search */\n    public readonly search$ = new Subject<string>();\n    /** Whether to show menu */\n    public show_menu: boolean;\n\n    public groupedUsers: { [id: string]: User[] } = {};\n\n    /** Minimum length of the search string needed to initial a search */\n    public get min_search_length(): number {\n        const length = this._settings.get('app.directory.min_search_length');\n        return typeof length === 'number' && length >= 0 ? length : 3;\n    }\n\n    constructor(private _settings: SettingsService, private _users: StaffService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap((query) => {\n                this.loading = true;\n                const retVal =\n                    query.length >= this.min_search_length\n                        ? this._users.query({ q: query }).catch(() => [])\n                        : Promise.resolve(this.user_list || []);\n                return retVal;\n            }),\n            map((list: User[]) => {\n                this.loading = false;\n                return list;\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => {\n                this.user_list = list;\n                this.buildGroups(this.user_list);\n            })\n        );\n        this.search$.next('');\n        clearEventFormState();\n    }\n\n    public get letters(): string[] {\n        return LETTERS;\n    }\n\n    private buildGroups(users: User[]) {\n        const sorted = users.sort((a, b) => a.name.localeCompare(b.name));\n        for (const letter of this.letters) {\n            this.groupedUsers[letter] = sorted.filter((f) => f.name.startsWith(letter));\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { SharedContentModule } from '../ui/shared.module';\nimport { DirectoryUserListComponent } from './user-list/user-list.component';\nimport { DirectoryUserListItemComponent } from './user-list/item/item.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DirectoryUserListComponent }];\n\n@NgModule({\n    declarations: [DirectoryUserListComponent, DirectoryUserListItemComponent],\n    imports: [CommonModule, RouterModule.forChild(ROUTES), SharedContentModule]\n})\nexport class DirectoryModule {}\n"],"sourceRoot":"webpack:///"}