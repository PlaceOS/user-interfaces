{"version":3,"file":"apps_concierge_src_app_visitors_visitors_module_ts.js","mappings":"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","names":["VisitorsStateService","AsyncHandler","search","this","_search","getValue","time_format","_settings","constructor","_dialog","_org","super","_poll","BehaviorSubject","_filters","_loading","loading","asObservable","filters","bookings","combineLatest","active_building","pipe","filter","building","debounceTime","switchMap","bld","next","date","Date","start","startOfDay","end","addDays","period","queryBookings","type","period_start","getUnixTime","period_end","zones","join","id","include_checked_out","catchError","_","of","tap","shareReplay","filtered_bookings","map","guest_list","toLowerCase","asset_name","includes","user_name","user_email","asset_id","sort","a","b","setFilters","setSearchString","poll","now","startPolling","delay","interval","stopPolling","clearInterval","setExt","guest","field","value","_this","_asyncToGenerator","extension_data","updateGuest","toPromise","approveVisitor","item","_this2","details","openConfirmModal","title","content","icon","reason","close","approveBooking","catch","e","notifyError","message","error","notifySuccess","declineVisitor","_this3","rejectBooking","setCheckinState","state","checkinBooking","setCheckinStateForEvent","event_id","_this4","event_bookings","take","parent_id","linked_event","length","Promise","all","downloadVisitorsList","_this5","list","Name","Email","checked_in","Host","Status","status","format","data","jsonToCsv","downloadFile","static","t","i0","i1","i2","i3","core","Yz7","factory","ɵfac","providedIn","level_r1","display_name","name","VisitorsTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","first","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","buildings","find","zone","lvl","push","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","VisitorsTopbarComponent_mat_option_3_Template","tmp_2_0","GuestListingComponent_ng_template_4_i_0_Template","GuestListingComponent_ng_template_4_ng_template_1_Template","row_r15","_r18","row_r19","host","row_r20","vaccination_confirmed","_r27","row","ctx_r25","ctx_r28","vaccination_proof","url","GuestListingComponent_ng_template_8_button_1_Template","GuestListingComponent_ng_template_8_ng_template_2_Template","_r23","row_r31","id_confirmed","_r38","ctx_r36","ctx_r39","id_data","GuestListingComponent_ng_template_10_button_1_Template","GuestListingComponent_ng_template_10_ng_template_2_Template","_r34","row_r42","_r45","ctx_r44","ctx_r46","_r43","row_r47","tmp_0_0","ctx_r10","item_r52","row_r48","_r54","ctx_r53","checkinAllVisitors","ctx_r55","checkoutAllVisitors","GuestListingComponent_ng_template_16_a_22_Template","ctx_r56","remote","ctx_r57","checkin","ctx_r58","checkout","ctx_r59","printQRCode","_r49","attachments","_r50","ctx_r12","can_print","_r61","ctx_r60","downloadVisitorList","GuestListingComponent","columns","display_columns","fields","actions","column_sizes","guests","u","f","v","_ref","_x","apply","arguments","_ref2","_x2","GuestListingComponent_ng_template_4_Template","GuestListingComponent_ng_template_6_Template","GuestListingComponent_ng_template_8_Template","GuestListingComponent_ng_template_10_Template","GuestListingComponent_ng_template_12_Template","GuestListingComponent_ng_template_14_Template","GuestListingComponent_ng_template_16_Template","GuestListingComponent_button_18_Template","_c0","_r1","_r9","_r11","_r3","_r7","_r13","tmp_7_0","VisitorsComponent","ngOnDestroy","attrs","VisitorsComponent_mat_progress_bar_4_Template","InviteVisitorModalComponent","_dialog_ref","onDone","level_r2","ROUTES","path","component","NewVisitorsComponent","inviteVisitor","open","i4","NewVisitorsComponent_mat_option_14_Template","NewVisitorsComponent_mat_progress_bar_19_Template","VisitorsModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedBookingsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/visitors/visitors-state.service.ts","./apps/concierge/src/app/visitors/visitors-topbar.component.ts","./apps/concierge/src/app/visitors/guest-listing.component.ts","./apps/concierge/src/app/visitors/visitors.component.ts","./apps/concierge/src/app/visitors/invite-visitor-modal.component.ts","./apps/concierge/src/app/visitors/new-visitors.component.ts","./apps/concierge/src/app/visitors/visitors.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { startOfDay, getUnixTime, addDays, format } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    SettingsService,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { GuestUser, updateGuest } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    Booking,\n    approveBooking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { SpacePipe } from '@placeos/spaces';\n\nexport interface VisitorFilters {\n    date?: number;\n    zones?: string[];\n    all_bookings?: boolean;\n    period?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VisitorsStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _filters = new BehaviorSubject<VisitorFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly bookings = combineLatest([\n        this._org.active_building,\n        this._filters,\n        this._poll,\n    ]).pipe(\n        filter(([building]) => !!building),\n        debounceTime(150),\n        switchMap(([bld, filters]) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            const start = startOfDay(date);\n            const end = addDays(start, filters.period || 1);\n            return queryBookings({\n                type: 'visitor',\n                period_start: getUnixTime(start),\n                period_end: getUnixTime(end),\n                zones: (filters.zones || []).join(',') || bld.id,\n                include_checked_out: true,\n            }).pipe(catchError((_) => of([] as Booking[])));\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_bookings = combineLatest([\n        this._search,\n        this.bookings,\n    ]).pipe(\n        map(([search, guest_list]) => {\n            const filter = search.toLowerCase();\n            const out = guest_list\n                .filter(\n                    (_) =>\n                        _.asset_name?.toLowerCase().includes(filter) ||\n                        _.user_name?.toLowerCase().includes(filter) ||\n                        _.user_email?.toLowerCase().includes(filter) ||\n                        _.asset_id?.toLowerCase().includes(filter)\n                )\n                .sort((a, b) => a.date - b.date);\n            return out;\n        })\n    );\n\n    public get search() {\n        return this._search.getValue();\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setFilters(filters: VisitorFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public poll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async setExt<T = any>(guest: GuestUser, field: string, value: T) {\n        const extension_data = { ...guest.extension_data };\n        extension_data[field] = value;\n        await updateGuest(guest.id, { ...guest, extension_data }).toPromise();\n        this._poll.next(Date.now());\n    }\n\n    public async approveVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Approve Visitor',\n                content: `Approve attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await (approveBooking(item.id) as any).toPromise().catch((e) => {\n            notifyError(\n                `Error approving visitor: ${e.message || e.error || e}`\n            );\n            details.close();\n            throw e;\n        });\n        notifySuccess(`Successfully approved visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async declineVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Decline Visitor',\n                content: `Decline attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await rejectBooking(item.id)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error declining visitor: ${e.message || e.error || e}`\n                );\n                details.close();\n                throw e;\n            });\n        notifySuccess(`Successfully declining visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async setCheckinState(item: Booking, state = true) {\n        const new_user = await checkinBooking(item.id, state)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error checking ${state ? 'in' : 'out'} ${\n                        item.asset_name || item.asset_id\n                    } for ${item.user_name}'s meeting`\n                );\n                throw e;\n            });\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} ${\n                item.asset_name || item.asset_id\n            } from ${item.user_name}'s meeting`\n        );\n    }\n\n    public async setCheckinStateForEvent(event_id: string, state = true) {\n        if (!event_id) return;\n        const bookings = await this.bookings.pipe(take(1)).toPromise();\n        const event_bookings = bookings.filter(\n            (_) =>\n                _.parent_id === event_id ||\n                _.extension_data.parent_id === event_id ||\n                _.linked_event?.id === event_id ||\n                _.linked_event?.event_id === event_id\n        );\n        if (!event_bookings.length) return;\n        await Promise.all(\n            event_bookings.map((_) =>\n                checkinBooking(_.id, state)\n                    .toPromise()\n                    .catch((e) => {\n                        notifyError(\n                            `Error checking ${state ? 'in' : 'out'} ${\n                                _.asset_name || _.asset_id\n                            } for ${_.user_name}'s meeting`\n                        );\n                        throw e;\n                    })\n            )\n        );\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} all visitors from ${\n                event_bookings[0].user_name\n            }'s meeting`\n        );\n        this._poll.next(Date.now());\n    }\n\n    public async downloadVisitorsList() {\n        const bookings = await this.filtered_bookings.pipe(take(1)).toPromise();\n        if (!bookings.length) return;\n        const { date } = this._filters.getValue();\n        const list = bookings.map((_) => ({\n            Name: _.asset_name,\n            Email: _.asset_id,\n            'Checked In': _.checked_in,\n            Host: _.user_email || '',\n            Status: _.status,\n            Date: format(_.date, 'dd MMM ' + this.time_format),\n        }));\n        const data = jsonToCsv(list);\n        downloadFile(\n            `visitor-list-${format(date || Date.now(), 'MMM-dd')}.csv`,\n            data\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: 'visitors-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.period || 1\"\n                    (ngModelChange)=\"setFilters({ period: $event })\"\n                    placeholder=\"Viewing Period\"\n                >\n                    <mat-option [value]=\"1\">Show Day</mat-option>\n                    <mat-option [value]=\"7\">Show Week</mat-option>\n                    <mat-option [value]=\"30\">Show Month</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class VisitorsTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { GuestUser } from '@placeos/users';\nimport { CalendarEvent } from '@placeos/events';\nimport { Booking } from '@placeos/bookings';\n\n@Component({\n    selector: 'guest-listings',\n    template: `\n        <div\n            class=\"w-full flex flex-col flex-1 text-sm h-full overflow-auto pb-20\"\n        >\n            <custom-table\n                class=\"min-w-[72rem]\"\n                [dataSource]=\"guests\"\n                [filter]=\"search | async\"\n                [columns]=\"columns\"\n                [display_column]=\"display_columns\"\n                [column_size]=\"column_sizes\"\n                [template]=\"{\n                    state: state_template,\n                    status: status_template,\n                    date: date_template,\n                    host: host_template,\n                    id_data: id_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (search | async)\n                        ? 'No matching visitors'\n                        : 'There are visitors for the currently selected date.'\n                \"\n            ></custom-table>\n        </div>\n        <ng-template #state_template let-row=\"row\">\n            <i\n                *ngIf=\"!row?.checked_in; else checkin_state\"\n                matTooltip=\"Not checked in\"\n                class=\"flex items-center justify-center rounded-full material-icons border-2 border-dashed border-neutral text-xl h-9 w-9\"\n            >\n                close\n            </i>\n            <ng-template #checkin_state>\n                <i\n                    class=\"flex items-center justify-center rounded-full material-icons bg-success border-2 border-neutral text-white text-xl h-9 w-9\"\n                    matTooltip=\"Checked In\"\n                >\n                    done\n                </i>\n            </ng-template>\n        </ng-template>\n        <ng-template #host_template let-row=\"row\">\n            {{ row.extension_data?.host }}\n        </ng-template>\n        <ng-template #vaccinated_template let-row=\"row\">\n            <div customTooltip [content]=\"vaccine_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.vaccination_proof?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.vaccination_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.vaccination_confirmed ===\n                              false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #vaccine_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.vaccination_proof?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] p-2 object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'vaccination_confirmed', true)\"\n                    >\n                        Confirm Vaccination Proof\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'vaccination_confirmed', false)\"\n                    >\n                        Reject Vaccination Proof\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #id_template let-row=\"row\">\n            <div customTooltip [content]=\"id_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.id_data?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.id_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.id_confirmed === false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #id_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.id_data?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'id_confirmed', true)\"\n                    >\n                        Confirm ID\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'id_confirmed', false)\"\n                    >\n                        Reject ID\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #status_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"rounded-3xl bg-warning text-warning-content border-none\"\n                [class.!text-success-content]=\"row?.status === 'approved'\"\n                [class.!bg-success]=\"row?.status === 'approved'\"\n                [class.!text-error-content]=\"row?.status === 'declined'\"\n                [class.!bg-error]=\"row?.status === 'declined'\"\n                [class.!text-neutral-content]=\"row?.status === 'ended'\"\n                [class.!bg-neutral]=\"row?.status === 'ended'\"\n                [class.opacity-60]=\"row?.status === 'ended'\"\n                [matMenuTriggerFor]=\"menu\"\n                [disabled]=\"row?.status === 'ended'\"\n            >\n                <div class=\"flex items-center\">\n                    <div class=\"mx-2\">\n                        {{\n                            row?.status === 'ended'\n                                ? 'Ended'\n                                : row?.status === 'approved'\n                                ? 'Approved'\n                                : row?.status === 'declined'\n                                ? 'Declined'\n                                : 'Pending'\n                        }}\n                    </div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item (click)=\"approveVisitor(row)\">\n                    Approve Visitor\n                </button>\n                <button mat-menu-item (click)=\"declineVisitor(row)\">\n                    Decline Visitor\n                </button>\n            </mat-menu>\n        </ng-template>\n        <ng-template #date_template let-row=\"row\">\n            {{\n                row.date\n                    | date\n                        : ((filters | async)?.period > 1\n                              ? 'MMM d, ' + time_format\n                              : time_format)\n            }}\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <button\n                icon\n                matRipple\n                matTooltip=\"Linked to Room Booking\"\n                class=\"pl-2\"\n                [class.pointer-events-none]=\"!row.linked_event\"\n                [matMenuTriggerFor]=\"checkin_menu\"\n            >\n                <app-icon\n                    class=\"text-2xl\"\n                    [class.opacity-0]=\"!row.linked_event\"\n                >\n                    event\n                </app-icon>\n            </button>\n            <mat-menu #checkin_menu=\"matMenu\">\n                <button mat-menu-item (click)=\"checkinAllVisitors(row)\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">event_available</app-icon>\n                        <div>Checkin All for Booking</div>\n                    </div>\n                </button>\n                <button mat-menu-item (click)=\"checkoutAllVisitors(row)\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">event_busy</app-icon>\n                        <div>Checkout All for Booking</div>\n                    </div>\n                </button>\n            </mat-menu>\n            <button\n                icon\n                matRipple\n                [disabled]=\"!row.attachments?.length\"\n                title=\"\"\n                matTooltip=\"View Attachments\"\n                [matMenuTriggerFor]=\"menu\"\n            >\n                <app-icon>attachment</app-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <a\n                    *ngFor=\"let item of row.attachments\"\n                    [href]=\"item.url\"\n                    mat-menu-item\n                    >{{ item.name }}</a\n                >\n            </mat-menu>\n            <action-icon\n                remote\n                [matTooltip]=\"\n                    row.extension_data.remote\n                        ? 'Set as In-Person Visitor'\n                        : 'Set as Remote Visitior'\n                \"\n                [loading]=\"loading === 'remote'\"\n                [content]=\"\n                    row.extension_data.remote ? 'tap_and_play' : 'business'\n                \"\n                (click)=\"setExt(row, 'remote', !row.extension_data.remote)\"\n            >\n            </action-icon>\n            <action-icon\n                checkin\n                matTooltip=\"Checkin Guest\"\n                [loading]=\"loading === 'checkin'\"\n                [state]=\"row?.checked_in ? 'success' : ''\"\n                content=\"event_available\"\n                (click)=\"checkin(row)\"\n            >\n            </action-icon>\n            <action-icon\n                checkout\n                matTooltip=\"Checkout Guest\"\n                [loading]=\"loading === 'checkout'\"\n                content=\"event_busy\"\n                (click)=\"checkout(row)\"\n            >\n            </action-icon>\n            <a\n                [href]=\"'mailto:' + row?.asset_id\"\n                icon\n                matRipple\n                [matTooltip]=\"\n                    row?.user_email === row?.asset_id\n                        ? 'Email Host'\n                        : 'Email Guest'\n                \"\n            >\n                <app-icon>email</app-icon>\n            </a>\n            <action-icon\n                matTooltip=\"Print QR Code\"\n                [loading]=\"loading === 'printing'\"\n                content=\"event_busy\"\n                (click)=\"printQRCode()\"\n                [class.invisible]=\"!can_print\"\n            >\n            </action-icon>\n        </ng-template>\n        <button\n            class=\"bg-secondary hover:shadow-lg shadow absolute bottom-4 right-4 text-white h-12 w-12\"\n            matTooltip=\"Download Visitor List\"\n            matTooltipPosition=\"left\"\n            icon\n            matRipple\n            *ngIf=\"(guests | async)?.length\"\n            (click)=\"downloadVisitorList()\"\n        >\n            <app-icon>download</app-icon>\n        </button>\n    `,\n    styles: [``],\n})\nexport class GuestListingComponent {\n    public readonly guests = this._state.filtered_bookings;\n    public readonly search = this._state.search;\n    public readonly filters = this._state.filters;\n\n    public readonly downloadVisitorList = () =>\n        this._state.downloadVisitorsList();\n\n    public readonly approveVisitor = (u) => this._state.approveVisitor(u);\n    public readonly declineVisitor = (u) => this._state.declineVisitor(u);\n    public readonly checkinAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, true);\n    public readonly checkoutAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, false);\n    public readonly setExt = (u, f, v) => this._state.setExt(u, f, v);\n\n    public readonly checkin = async (item: Booking) => {\n        await this._state.setCheckinState(item, true);\n        this._state.poll();\n    };\n\n    public readonly checkout = async (item: Booking) => {\n        await this._state.setCheckinState(item, false);\n        this._state.poll();\n    };\n\n    public get columns() {\n        return [\n            'state',\n            'date',\n            'asset_name',\n            'user_name',\n            'asset_id',\n            'status',\n            'actions',\n        ];\n    }\n\n    public get display_columns() {\n        const fields = {\n            state: ' ',\n            date: 'Time',\n            asset_name: 'Person',\n            user_name: 'Host',\n            asset_id: 'Email',\n            id_data: 'ID',\n            status: 'State',\n            actions: ' ',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get column_sizes() {\n        const fields = {\n            state: '3.5r',\n            date: '8r',\n            asset_name: '12r',\n            user_name: '12r',\n            asset_id: 'flex',\n            id_data: '8r',\n            status: '10r',\n            actions: '16r',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: '[app-visitors]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col bg-base-200\">\n            <visitors-topbar class=\"w-full\"></visitors-topbar>\n            <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class VisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n\n    constructor(private _state: VisitorsStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'invite-visitor-modal',\n    template: `\n        <main class=\"relative min-w-[40rem] min-h-[40rem]\">\n            <invite-visitor-form (done)=\"onDone()\"></invite-visitor-form>\n        </main>\n    `,\n    styles: [``],\n})\nexport class InviteVisitorModalComponent {\n    constructor(\n        private _dialog_ref: MatDialogRef<InviteVisitorModalComponent>\n    ) {}\n\n    public onDone() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\n\n@Component({\n    selector: '[app-new-visitors]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center p-4 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Visitors</h2>\n                    <div class=\"flex-1 w-2\"></div>\n                    <date-options (dateChange)=\"setDate($event)\"></date-options>\n                    <button btn matRipple (click)=\"inviteVisitor()\">\n                        Invite Visitor\n                    </button>\n                </div>\n                <div class=\"flex items-center px-4 pb-4\">\n                    <mat-form-field appearance=\"outline\" class=\"no-subscript\">\n                        <mat-select\n                            multiple\n                            [(ngModel)]=\"zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"flex-1 w-2\"></div>\n                    <searchbar (modelChange)=\"setSearch($event)\"></searchbar>\n                </div>\n                <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewVisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog\n    ) {}\n\n    public inviteVisitor() {\n        this._dialog.open(InviteVisitorModalComponent);\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { VisitorsComponent } from './visitors.component';\nimport { VisitorsTopbarComponent } from './visitors-topbar.component';\nimport { GuestListingComponent } from './guest-listing.component';\nimport { NewVisitorsComponent } from './new-visitors.component';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\n\nconst ROUTES: Route[] = [\n    { path: '', component: VisitorsComponent },\n    { path: 'new', component: NewVisitorsComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewVisitorsComponent,\n        VisitorsComponent,\n        VisitorsTopbarComponent,\n        GuestListingComponent,\n        InviteVisitorModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedBookingsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class VisitorsModule {}\n\n/**\nzone_ids: zone-EmWVhHG3Bhz\nperiod_start: 1604926800\nperiod_end: 1605013199\n\nperiod_start: 1605013200\nperiod_end: 1605099599\nzones: zone-EmWVhHG3Bhz\n\n*/\n"],"x_google_ignoreList":[]}