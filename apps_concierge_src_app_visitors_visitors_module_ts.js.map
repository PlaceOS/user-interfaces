{"version":3,"file":"apps_concierge_src_app_visitors_visitors_module_ts.js","mappings":"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","names":["VisitorsStateService","AsyncHandler","search","this","_search","getValue","time_format","_settings","constructor","_dialog","_org","super","_poll","BehaviorSubject","_filters","_loading","_space_pipe","SpacePipe","loading","asObservable","filters","bookings","combineLatest","active_building","pipe","filter","building","debounceTime","switchMap","bld","next","date","Date","start","startOfDay","end","addDays","period","queryBookings","type","period_start","getUnixTime","period_end","zones","join","id","catchError","_","of","tap","shareReplay","filtered_bookings","map","guest_list","toLowerCase","asset_name","includes","user_name","user_email","asset_id","sort","a","b","setFilters","setSearchString","poll","now","startPolling","delay","interval","stopPolling","clearInterval","setExt","guest","field","value","_this","_asyncToGenerator","extension_data","updateGuest","toPromise","approveVisitor","item","_this2","details","openConfirmModal","title","content","icon","reason","close","approveBooking","catch","e","notifyError","message","error","notifySuccess","declineVisitor","_this3","rejectBooking","setCheckinState","state","checkinBooking","downloadVisitorsList","_this4","take","length","list","Name","Email","checked_in","Host","Status","status","format","data","jsonToCsv","downloadFile","t","i0","i1","i2","i3","core","Yz7","factory","ɵfac","providedIn","level_r1","display_name","name","VisitorsTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","first","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","buildings","find","parent_id","zone","lvl","push","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","VisitorsTopbarComponent_mat_option_3_Template","tmp_2_0","GuestListingComponent_ng_template_4_i_0_Template","GuestListingComponent_ng_template_4_ng_template_4_Template","row_r15","_r17","linked_event","row_r19","host","row_r20","vaccination_confirmed","_r27","row","ctx_r25","ctx_r28","vaccination_proof","url","GuestListingComponent_ng_template_8_button_1_Template","GuestListingComponent_ng_template_8_ng_template_2_Template","_r22","row_r31","id_confirmed","_r38","ctx_r36","ctx_r39","id_data","GuestListingComponent_ng_template_10_button_1_Template","GuestListingComponent_ng_template_10_ng_template_2_Template","_r33","row_r42","_r45","ctx_r44","ctx_r46","_r43","row_r47","tmp_0_0","ctx_r11","item_r51","GuestListingComponent_ng_template_16_a_5_Template","row_r48","_r53","ctx_r52","remote","ctx_r54","checkin","ctx_r55","checkout","ctx_r56","printQRCode","attachments","_r49","ctx_r13","can_print","_r58","ctx_r57","downloadVisitorList","GuestListingComponent","columns","display_columns","fields","actions","column_sizes","guests","u","f","v","_ref","_x","apply","arguments","_ref2","_x2","GuestListingComponent_ng_template_4_Template","GuestListingComponent_ng_template_6_Template","GuestListingComponent_ng_template_8_Template","GuestListingComponent_ng_template_10_Template","GuestListingComponent_ng_template_12_Template","GuestListingComponent_ng_template_14_Template","GuestListingComponent_ng_template_16_Template","GuestListingComponent_button_18_Template","_c0","_r0","_r8","_r10","_r2","_r6","_r12","tmp_7_0","VisitorsComponent","ngOnDestroy","attrs","VisitorsComponent_mat_progress_bar_4_Template","InviteVisitorModalComponent","_dialog_ref","onDone","level_r2","ROUTES","path","component","NewVisitorsComponent","inviteVisitor","open","i4","NewVisitorsComponent_mat_option_14_Template","NewVisitorsComponent_mat_progress_bar_19_Template","VisitorsModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedBookingsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/visitors/visitors-state.service.ts","./apps/concierge/src/app/visitors/visitors-topbar.component.ts","./apps/concierge/src/app/visitors/guest-listing.component.ts","./apps/concierge/src/app/visitors/visitors.component.ts","./apps/concierge/src/app/visitors/invite-visitor-modal.component.ts","./apps/concierge/src/app/visitors/new-visitors.component.ts","./apps/concierge/src/app/visitors/visitors.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { startOfDay, getUnixTime, addDays, format } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    SettingsService,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { GuestUser, updateGuest } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    Booking,\n    approveBooking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { SpacePipe } from '@placeos/spaces';\n\nexport interface VisitorFilters {\n    date?: number;\n    zones?: string[];\n    all_bookings?: boolean;\n    period?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VisitorsStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _filters = new BehaviorSubject<VisitorFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _space_pipe = new SpacePipe();\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly bookings = combineLatest([\n        this._org.active_building,\n        this._filters,\n        this._poll,\n    ]).pipe(\n        filter(([building]) => !!building),\n        debounceTime(150),\n        switchMap(([bld, filters]) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            const start = startOfDay(date);\n            const end = addDays(start, filters.period || 1);\n            return queryBookings({\n                type: 'visitor',\n                period_start: getUnixTime(start),\n                period_end: getUnixTime(end),\n                zones: (filters.zones || []).join(',') || bld.id,\n            }).pipe(catchError((_) => of([] as Booking[])));\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_bookings = combineLatest([\n        this._search,\n        this.bookings,\n    ]).pipe(\n        map(([search, guest_list]) => {\n            const filter = search.toLowerCase();\n            const out = guest_list\n                .filter(\n                    (_) =>\n                        _.asset_name.toLowerCase().includes(filter) ||\n                        _.user_name.toLowerCase().includes(filter) ||\n                        _.user_email.toLowerCase().includes(filter) ||\n                        _.asset_id.toLowerCase().includes(filter)\n                )\n                .sort((a, b) => a.date - b.date);\n            return out;\n        })\n    );\n\n    public get search() {\n        return this._search.getValue();\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setFilters(filters: VisitorFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public poll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async setExt<T = any>(guest: GuestUser, field: string, value: T) {\n        const extension_data = { ...guest.extension_data };\n        extension_data[field] = value;\n        await updateGuest(guest.id, { ...guest, extension_data }).toPromise();\n        this._poll.next(Date.now());\n    }\n\n    public async approveVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Approve Visitor',\n                content: `Approve attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await (approveBooking(item.id) as any).toPromise().catch((e) => {\n            notifyError(\n                `Error approving visitor: ${e.message || e.error || e}`\n            );\n            details.close();\n            throw e;\n        });\n        notifySuccess(`Successfully approved visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async declineVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Decline Visitor',\n                content: `Decline attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await rejectBooking(item.id)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error declining visitor: ${e.message || e.error || e}`\n                );\n                details.close();\n                throw e;\n            });\n        notifySuccess(`Successfully declining visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async setCheckinState(item: Booking, state = true) {\n        const new_user = await checkinBooking(item.id, state)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error checking ${state ? 'in' : 'out'} ${\n                        item.asset_name || item.asset_id\n                    } for ${item.user_name}'s meeting`\n                );\n                throw e;\n            });\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} ${\n                item.asset_name || item.asset_id\n            } from ${item.user_name}'s meeting`\n        );\n    }\n\n    public async downloadVisitorsList() {\n        const bookings = await this.filtered_bookings.pipe(take(1)).toPromise();\n        if (!bookings.length) return;\n        const { date } = this._filters.getValue();\n        const list = bookings.map((_) => ({\n            Name: _.asset_name,\n            Email: _.asset_id,\n            'Checked In': _.checked_in,\n            Host: _.user_email || '',\n            Status: _.status,\n            Date: format(_.date, 'dd MMM ' + this.time_format),\n        }));\n        const data = jsonToCsv(list);\n        downloadFile(\n            `visitor-list-${format(date || Date.now(), 'MMM-dd')}.csv`,\n            data\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: 'visitors-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.period || 1\"\n                    (ngModelChange)=\"setFilters({ period: $event })\"\n                    placeholder=\"Viewing Period\"\n                >\n                    <mat-option [value]=\"1\">Show Day</mat-option>\n                    <mat-option [value]=\"7\">Show Week</mat-option>\n                    <mat-option [value]=\"30\">Show Month</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class VisitorsTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { GuestUser } from '@placeos/users';\nimport { CalendarEvent } from '@placeos/events';\nimport { Booking } from '@placeos/bookings';\n\n@Component({\n    selector: 'guest-listings',\n    template: `\n        <div\n            class=\"w-full flex flex-col flex-1 text-sm h-full overflow-auto pb-20\"\n        >\n            <custom-table\n                class=\"min-w-[72rem]\"\n                [dataSource]=\"guests\"\n                [filter]=\"search | async\"\n                [columns]=\"columns\"\n                [display_column]=\"display_columns\"\n                [column_size]=\"column_sizes\"\n                [template]=\"{\n                    state: state_template,\n                    status: status_template,\n                    date: date_template,\n                    host: host_template,\n                    id_data: id_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (search | async)\n                        ? 'No matching visitors'\n                        : 'There are visitors for the currently selected date.'\n                \"\n            ></custom-table>\n        </div>\n        <ng-template #state_template let-row=\"row\">\n            <i\n                *ngIf=\"!row?.checked_in; else checkin_state\"\n                matTooltip=\"Not checked in\"\n                class=\"flex items-center justify-center rounded-full material-icons border-2 border-dashed border-neutral text-xl h-9 w-9\"\n            >\n                close\n            </i>\n            <div\n                matTooltip=\"Linked to Room Booking\"\n                class=\"pl-2\"\n                [class.pointer-events-none]=\"!row.linked_event\"\n            >\n                <app-icon\n                    class=\"text-2xl\"\n                    [class.opacity-0]=\"!row.linked_event\"\n                >\n                    event_available\n                </app-icon>\n            </div>\n            <ng-template #checkin_state>\n                <i\n                    class=\"flex items-center justify-center rounded-full material-icons bg-success border-2 border-neutral text-white text-xl h-9 w-9\"\n                    matTooltip=\"Checked In\"\n                >\n                    done\n                </i>\n            </ng-template>\n        </ng-template>\n        <ng-template #host_template let-row=\"row\">\n            {{ row.extension_data?.host }}\n        </ng-template>\n        <ng-template #vaccinated_template let-row=\"row\">\n            <div customTooltip [content]=\"vaccine_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.vaccination_proof?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.vaccination_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.vaccination_confirmed ===\n                              false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #vaccine_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.vaccination_proof?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] p-2 object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'vaccination_confirmed', true)\"\n                    >\n                        Confirm Vaccination Proof\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'vaccination_confirmed', false)\"\n                    >\n                        Reject Vaccination Proof\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #id_template let-row=\"row\">\n            <div customTooltip [content]=\"id_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.id_data?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.id_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.id_confirmed === false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #id_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.id_data?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'id_confirmed', true)\"\n                    >\n                        Confirm ID\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'id_confirmed', false)\"\n                    >\n                        Reject ID\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #status_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"rounded-3xl bg-warning text-warning-content border-none\"\n                [class.!text-success-content]=\"row?.status === 'approved'\"\n                [class.!bg-success]=\"row?.status === 'approved'\"\n                [class.!text-error-content]=\"row?.status === 'declined'\"\n                [class.!bg-error]=\"row?.status === 'declined'\"\n                [matMenuTriggerFor]=\"menu\"\n            >\n                <div class=\"flex items-center\">\n                    <div class=\"mx-2\">\n                        {{\n                            row?.status === 'approved'\n                                ? 'Approved'\n                                : row?.status === 'declined'\n                                ? 'Declined'\n                                : 'Pending'\n                        }}\n                    </div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item (click)=\"approveVisitor(row)\">\n                    Approve Visitor\n                </button>\n                <button mat-menu-item (click)=\"declineVisitor(row)\">\n                    Decline Visitor\n                </button>\n            </mat-menu>\n        </ng-template>\n        <ng-template #date_template let-row=\"row\">\n            {{\n                row.date\n                    | date\n                        : ((filters | async)?.period > 1\n                              ? 'MMM d, ' + time_format\n                              : time_format)\n            }}\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <button\n                icon\n                matRipple\n                [disabled]=\"!row.attachments?.length\"\n                title=\"\"\n                matTooltip=\"View Attachments\"\n                [matMenuTriggerFor]=\"menu\"\n            >\n                <app-icon>attachment</app-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <a\n                    *ngFor=\"let item of row.attachments\"\n                    [href]=\"item.url\"\n                    mat-menu-item\n                    >{{ item.name }}</a\n                >\n            </mat-menu>\n            <action-icon\n                remote\n                [matTooltip]=\"\n                    row.extension_data.remote\n                        ? 'Set as In-Person Visitor'\n                        : 'Set as Remote Visitior'\n                \"\n                [loading]=\"loading === 'remote'\"\n                [content]=\"\n                    row.extension_data.remote ? 'tap_and_play' : 'business'\n                \"\n                (click)=\"setExt(row, 'remote', !row.extension_data.remote)\"\n            >\n            </action-icon>\n            <action-icon\n                checkin\n                matTooltip=\"Checkin Guest\"\n                [loading]=\"loading === 'checkin'\"\n                [state]=\"row?.checked_in ? 'success' : ''\"\n                content=\"event_available\"\n                (click)=\"checkin(row)\"\n            >\n            </action-icon>\n            <action-icon\n                checkout\n                matTooltip=\"Checkout Guest\"\n                [loading]=\"loading === 'checkout'\"\n                content=\"event_busy\"\n                (click)=\"checkout(row)\"\n            >\n            </action-icon>\n            <a\n                [href]=\"'mailto:' + row?.asset_id\"\n                icon\n                matRipple\n                [matTooltip]=\"\n                    row?.user_email === row?.asset_id\n                        ? 'Email Host'\n                        : 'Email Guest'\n                \"\n            >\n                <app-icon>email</app-icon>\n            </a>\n            <action-icon\n                matTooltip=\"Print QR Code\"\n                [loading]=\"loading === 'printing'\"\n                content=\"event_busy\"\n                (click)=\"printQRCode()\"\n                [class.invisible]=\"!can_print\"\n            >\n            </action-icon>\n        </ng-template>\n        <button\n            class=\"bg-secondary hover:shadow-lg shadow absolute bottom-4 right-4 text-white h-12 w-12\"\n            matTooltip=\"Download Visitor List\"\n            matTooltipPosition=\"left\"\n            icon\n            matRipple\n            *ngIf=\"(guests | async)?.length\"\n            (click)=\"downloadVisitorList()\"\n        >\n            <app-icon>download</app-icon>\n        </button>\n    `,\n    styles: [``],\n})\nexport class GuestListingComponent {\n    public readonly guests = this._state.filtered_bookings;\n    public readonly search = this._state.search;\n    public readonly filters = this._state.filters;\n\n    public readonly downloadVisitorList = () =>\n        this._state.downloadVisitorsList();\n\n    public readonly approveVisitor = (u) => this._state.approveVisitor(u);\n    public readonly declineVisitor = (u) => this._state.declineVisitor(u);\n    public readonly setExt = (u, f, v) => this._state.setExt(u, f, v);\n\n    public readonly checkin = async (item: Booking) => {\n        await this._state.setCheckinState(item, true);\n        this._state.poll();\n    };\n\n    public readonly checkout = async (item: Booking) => {\n        await this._state.setCheckinState(item, false);\n        this._state.poll();\n    };\n\n    public get columns() {\n        return [\n            'state',\n            'date',\n            'asset_name',\n            'user_name',\n            'asset_id',\n            'status',\n            'actions',\n        ];\n    }\n\n    public get display_columns() {\n        const fields = {\n            state: ' ',\n            date: 'Time',\n            asset_name: 'Person',\n            user_name: 'Host',\n            asset_id: 'Email',\n            id_data: 'ID',\n            status: 'State',\n            actions: ' ',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get column_sizes() {\n        const fields = {\n            state: '6r',\n            date: '8r',\n            asset_name: '12r',\n            user_name: '12r',\n            asset_id: 'flex',\n            id_data: '8r',\n            status: '10r',\n            actions: '12r',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: '[app-visitors]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col bg-base-200\">\n            <visitors-topbar class=\"w-full\"></visitors-topbar>\n            <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class VisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n\n    constructor(private _state: VisitorsStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'invite-visitor-modal',\n    template: `\n        <main class=\"relative min-w-[40rem] min-h-[40rem]\">\n            <invite-visitor-form (done)=\"onDone()\"></invite-visitor-form>\n        </main>\n    `,\n    styles: [``],\n})\nexport class InviteVisitorModalComponent {\n    constructor(\n        private _dialog_ref: MatDialogRef<InviteVisitorModalComponent>\n    ) {}\n\n    public onDone() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\n\n@Component({\n    selector: '[app-new-visitors]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center p-4 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Visitors</h2>\n                    <div class=\"flex-1 w-2\"></div>\n                    <date-options (dateChange)=\"setDate($event)\"></date-options>\n                    <button btn matRipple (click)=\"inviteVisitor()\">\n                        Invite Visitor\n                    </button>\n                </div>\n                <div class=\"flex items-center px-4 pb-4\">\n                    <mat-form-field appearance=\"outline\" class=\"no-subscript\">\n                        <mat-select\n                            multiple\n                            [(ngModel)]=\"zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"flex-1 w-2\"></div>\n                    <searchbar (modelChange)=\"setSearch($event)\"></searchbar>\n                </div>\n                <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewVisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog\n    ) {}\n\n    public inviteVisitor() {\n        this._dialog.open(InviteVisitorModalComponent);\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { VisitorsComponent } from './visitors.component';\nimport { VisitorsTopbarComponent } from './visitors-topbar.component';\nimport { GuestListingComponent } from './guest-listing.component';\nimport { NewVisitorsComponent } from './new-visitors.component';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\n\nconst ROUTES: Route[] = [\n    { path: '', component: VisitorsComponent },\n    { path: 'new', component: NewVisitorsComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewVisitorsComponent,\n        VisitorsComponent,\n        VisitorsTopbarComponent,\n        GuestListingComponent,\n        InviteVisitorModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedBookingsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class VisitorsModule {}\n\n/**\nzone_ids: zone-EmWVhHG3Bhz\nperiod_start: 1604926800\nperiod_end: 1605013199\n\nperiod_start: 1605013200\nperiod_end: 1605099599\nzones: zone-EmWVhHG3Bhz\n\n*/\n"],"x_google_ignoreList":[]}