{"version":3,"file":"apps_concierge_src_app_visitors_visitors_module_ts.js","mappings":"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","names":["VisitorInductionModalComponent","induction_details","this","_settings","get","is_enabled","constructor","agree","static","t","i0","i1","core","VBU","selectors","decls","vars","consts","template","rf","ctx","$event","VisitorsStateService","AsyncHandler","search","_search","getValue","time_format","_dialog","_org","super","_poll","BehaviorSubject","_filters","_loading","loading","asObservable","filters","bookings","combineLatest","active_building","pipe","filter","building","debounceTime","switchMap","bld","next","date","Date","start","startOfDay","end","addDays","period","queryBookings","type","period_start","getUnixTime","period_end","zones","join","id","include_checked_out","limit","catchError","_","of","tap","shareReplay","filtered_bookings","map","guest_list","toLowerCase","asset_name","includes","user_name","user_email","asset_id","sort","a","b","setFilters","setSearchString","poll","now","startPolling","delay","interval","stopPolling","clearInterval","setExt","guest","field","value","_this","_asyncToGenerator","extension_data","updateGuest","toPromise","approveVisitor","item","_this2","details","openConfirmModal","title","content","icon","reason","close","approveBooking","catch","e","notifyError","message","error","notifySuccess","declineVisitor","_this3","rejectBooking","requestInduction","_this4","open","data","afterClosed","setBookingState","setCheckinState","state","_this5","checkinBooking","setCheckinStateForEvent","event_id","_this6","event_bookings","take","parent_id","linked_event","length","Promise","all","downloadVisitorsList","_this7","list","Name","Email","checked_in","Host","Status","status","format","jsonToCsv","downloadFile","i2","i3","jDH","factory","ɵfac","providedIn","level_r1","display_name","name","VisitorsTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","first","subscription","queryParamMap","subscribe","params","has","split","level","levelWithID","buildings","find","zone","lvl","push","features","VisitorsTopbarComponent_mat_option_3_Template","tmp_2_0","row_r1","checked_out_at","ctx_r1","GuestListingComponent_ng_template_4_div_0_Template","GuestListingComponent_ng_template_4_div_1_Template","GuestListingComponent_ng_template_4_div_2_Template","row_r3","host","row_r4","id_confirmed","_r5","row","id_data","url","GuestListingComponent_ng_template_8_button_1_Template","GuestListingComponent_ng_template_8_ng_template_2_Template","id_confirmation_r6","GuestListingComponent_ng_template_10_div_0_Template","GuestListingComponent_ng_template_10_div_1_Template","GuestListingComponent_ng_template_10_div_2_Template","row_r7","induction","process_state","row_r9","_r8","menu_r10","row_r11","tmp_9_0","item_r14","row_r13","_r12","checkinAllVisitors","checkoutAllVisitors","GuestListingComponent_ng_template_16_a_23_Template","remote","checkin","checkout","printQRCode","checkin_menu_r15","attachments","menu_r16","can_print","_r17","downloadVisitorList","GuestListingComponent","columns","_inductions_enabled","display_columns","fields","actions","column_sizes","guests","console","log","u","f","v","_ref","_x","apply","arguments","_ref2","_x2","_ref3","visitor_kiosk_app","metadata","showMetadata","induction_enabled","_x3","GuestListingComponent_ng_template_4_Template","GuestListingComponent_ng_template_6_Template","GuestListingComponent_ng_template_8_Template","GuestListingComponent_ng_template_10_Template","GuestListingComponent_ng_template_12_Template","GuestListingComponent_ng_template_14_Template","GuestListingComponent_ng_template_16_Template","GuestListingComponent_button_18_Template","_c0","state_template_r18","status_template_r22","date_template_r23","host_template_r19","id_template_r20","action_template_r24","boolean_template_r21","tmp_14_0","VisitorsComponent","ngOnDestroy","attrs","VisitorsComponent_mat_progress_bar_4_Template","InviteVisitorModalComponent","_dialog_ref","onDone","tmp_3_0","NewVisitorsComponent_mat_option_15_div_2_Template","use_region","ROUTES","path","component","NewVisitorsComponent","active_region","region","levelsForRegion","levelsForBuilding","inviteVisitor","i4","i5","NewVisitorsComponent_mat_option_15_Template","NewVisitorsComponent_mat_progress_bar_21_Template","tmp_0_0","VisitorsModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedBookingsModule","RouterModule","forChild","MapLocation","_data","location","position","map_id","x","map_width","y","map_height","variance","last_seen","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/visitors/visitor-induction-modal.component.ts","./apps/concierge/src/app/visitors/visitors-state.service.ts","./apps/concierge/src/app/visitors/visitors-topbar.component.ts","./apps/concierge/src/app/visitors/guest-listing.component.ts","./apps/concierge/src/app/visitors/visitors.component.ts","./apps/concierge/src/app/visitors/invite-visitor-modal.component.ts","./apps/concierge/src/app/visitors/new-visitors.component.ts","./apps/concierge/src/app/visitors/visitors.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'visitor-induction-modal',\n    template: `\n        <div\n            class=\"relative bg-base-100 rounded shadow overflow-hidden flex flex-col items-center w-[32rem] p-4\"\n        >\n            <p class=\"my-4\">\n                Please read the induction information below before proceeding\n            </p>\n            <div\n                class=\"rounded border border-base-300 w-full p-4 opacity-60 text-sm overflow-y-auto overflow-x-hidden max-h-[50vh] whitespace-pre-wrap\"\n            >\n                {{ induction_details }}\n            </div>\n            <mat-checkbox [(ngModel)]=\"agree\" class=\"my-4\">\n                I agree\n            </mat-checkbox>\n            <div class=\"flex items-center justify-center space-x-2\">\n                <button\n                    btn\n                    matRipple\n                    class=\"w-32 clear underline\"\n                    [mat-dialog-close]=\"false\"\n                >\n                    Decline\n                </button>\n                <button\n                    btn\n                    matRipple\n                    class=\"w-32\"\n                    [disabled]=\"!agree\"\n                    [mat-dialog-close]=\"true\"\n                >\n                    Accept\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class VisitorInductionModalComponent {\n    public agree = false;\n\n    public get induction_details() {\n        return this._settings.get('app.induction_details');\n    }\n\n    public get is_enabled() {\n        return (\n            this._settings.get('app.induction_enabled') &&\n            this._settings.get('app.induction_details')\n        );\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { startOfDay, getUnixTime, addDays, format } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    SettingsService,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { GuestUser, updateGuest } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    Booking,\n    approveBooking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n    setBookingState,\n} from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { SpacePipe } from '@placeos/spaces';\nimport { VisitorInductionModalComponent } from './visitor-induction-modal.component';\n\nexport interface VisitorFilters {\n    date?: number;\n    zones?: string[];\n    all_bookings?: boolean;\n    period?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VisitorsStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _filters = new BehaviorSubject<VisitorFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly bookings = combineLatest([\n        this._org.active_building,\n        this._filters,\n        this._poll,\n    ]).pipe(\n        filter(([building]) => !!building),\n        debounceTime(150),\n        switchMap(([bld, filters]) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            const start = startOfDay(date);\n            const end = addDays(start, filters.period || 1);\n            return queryBookings({\n                type: 'visitor',\n                period_start: getUnixTime(start),\n                period_end: getUnixTime(end),\n                zones: (filters.zones || []).join(',') || bld.id,\n                include_checked_out: true,\n                limit: 1000,\n            }).pipe(catchError((_) => of([] as Booking[])));\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_bookings = combineLatest([\n        this._search,\n        this.bookings,\n    ]).pipe(\n        map(([search, guest_list]) => {\n            const filter = search.toLowerCase();\n            const out = guest_list\n                .filter(\n                    (_) =>\n                        _.asset_name?.toLowerCase().includes(filter) ||\n                        _.user_name?.toLowerCase().includes(filter) ||\n                        _.user_email?.toLowerCase().includes(filter) ||\n                        _.asset_id?.toLowerCase().includes(filter)\n                )\n                .sort((a, b) => a.date - b.date);\n            return out;\n        })\n    );\n\n    public get search() {\n        return this._search.getValue();\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setFilters(filters: VisitorFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public poll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async setExt<T = any>(guest: GuestUser, field: string, value: T) {\n        const extension_data = { ...guest.extension_data };\n        extension_data[field] = value;\n        await updateGuest(guest.id, { ...guest, extension_data }).toPromise();\n        this._poll.next(Date.now());\n    }\n\n    public async approveVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Approve Visitor',\n                content: `Approve attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await (approveBooking(item.id) as any).toPromise().catch((e) => {\n            notifyError(\n                `Error approving visitor: ${e.message || e.error || e}`\n            );\n            details.close();\n            throw e;\n        });\n        notifySuccess(`Successfully approved visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async declineVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Decline Visitor',\n                content: `Decline attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await rejectBooking(item.id)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error declining visitor: ${e.message || e.error || e}`\n                );\n                details.close();\n                throw e;\n            });\n        notifySuccess(`Successfully declining visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async requestInduction(item: Booking) {\n        const ref = this._dialog.open(VisitorInductionModalComponent, {\n            data: { item },\n        });\n        const result = await ref.afterClosed().toPromise();\n        if (!result) throw 'User declined';\n        await setBookingState(item.id, 'inducted').toPromise();\n    }\n\n    public async setCheckinState(item: Booking, state = true) {\n        if (state === true) {\n            await this.requestInduction(item);\n        }\n        const new_user = await checkinBooking(item.id, state)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error checking ${state ? 'in' : 'out'} ${\n                        item.asset_name || item.asset_id\n                    } for ${item.user_name}'s meeting`\n                );\n                throw e;\n            });\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} ${\n                item.asset_name || item.asset_id\n            } from ${item.user_name}'s meeting`\n        );\n    }\n\n    public async setCheckinStateForEvent(event_id: string, state = true) {\n        if (!event_id) return;\n        const bookings = await this.bookings.pipe(take(1)).toPromise();\n        const event_bookings = bookings.filter(\n            (_) =>\n                _.parent_id === event_id ||\n                _.extension_data.parent_id === event_id ||\n                _.linked_event?.id === event_id ||\n                _.linked_event?.event_id === event_id\n        );\n        if (!event_bookings.length) return;\n        await Promise.all(\n            event_bookings.map((_) =>\n                checkinBooking(_.id, state)\n                    .toPromise()\n                    .catch((e) => {\n                        notifyError(\n                            `Error checking ${state ? 'in' : 'out'} ${\n                                _.asset_name || _.asset_id\n                            } for ${_.user_name}'s meeting`\n                        );\n                        throw e;\n                    })\n            )\n        );\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} all visitors from ${\n                event_bookings[0].user_name\n            }'s meeting`\n        );\n        this._poll.next(Date.now());\n    }\n\n    public async downloadVisitorsList() {\n        const bookings = await this.filtered_bookings.pipe(take(1)).toPromise();\n        if (!bookings.length) return;\n        const { date } = this._filters.getValue();\n        const list = bookings.map((_) => ({\n            Name: _.asset_name,\n            Email: _.asset_id,\n            'Checked In': _.checked_in,\n            Host: _.user_email || '',\n            Status: _.status,\n            Date: format(_.date, 'dd MMM ' + this.time_format),\n        }));\n        const data = jsonToCsv(list);\n        downloadFile(\n            `visitor-list-${format(date || Date.now(), 'MMM-dd')}.csv`,\n            data\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: 'visitors-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.period || 1\"\n                    (ngModelChange)=\"setFilters({ period: $event })\"\n                    placeholder=\"Viewing Period\"\n                >\n                    <mat-option [value]=\"1\">Show Day</mat-option>\n                    <mat-option [value]=\"7\">Show Week</mat-option>\n                    <mat-option [value]=\"30\">Show Month</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class VisitorsTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { Booking } from '@placeos/bookings';\nimport { showMetadata } from '@placeos/ts-client';\nimport { OrganisationService } from '@placeos/organisation';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'guest-listings',\n    template: `\n        <div\n            class=\"w-full flex flex-col flex-1 text-sm h-full overflow-auto pb-20\"\n        >\n            <custom-table\n                class=\"min-w-[80rem]\"\n                [dataSource]=\"guests\"\n                [filter]=\"search | async\"\n                [columns]=\"columns\"\n                [display_column]=\"display_columns\"\n                [column_size]=\"column_sizes\"\n                [template]=\"{\n                    state: state_template,\n                    status: status_template,\n                    date: date_template,\n                    host: host_template,\n                    id_data: id_template,\n                    actions: action_template,\n                    induction: boolean_template\n                }\"\n                [empty]=\"\n                    (search | async)\n                        ? 'No matching visitors'\n                        : 'There are visitors for the currently selected date.'\n                \"\n            ></custom-table>\n        </div>\n        <ng-template #state_template let-row=\"row\">\n            <div\n                *ngIf=\"!row?.checked_in && row.checked_out_at\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-base-400 text-neutral-content mx-auto\"\n                [matTooltip]=\"\n                    'Checked out at ' + (row.checked_out_at | date: time_format)\n                \"\n                matTooltipPosition=\"right\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n            <div\n                *ngIf=\"!row?.checked_in && !row.checked_out_at\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-warning text-warning-content mx-auto\"\n                matTooltip=\"Not checked in\"\n                matTooltipPosition=\"right\"\n            >\n                <app-icon>question_mark</app-icon>\n            </div>\n            <div\n                *ngIf=\"row?.checked_in\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n                matTooltip=\"Checked In\"\n                matTooltipPosition=\"right\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #host_template let-row=\"row\">\n            {{ row.extension_data?.host }}\n        </ng-template>\n        <ng-template #id_template let-row=\"row\">\n            <div customTooltip [content]=\"id_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.id_data?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.id_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.id_confirmed === false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #id_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.id_data?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'id_confirmed', true)\"\n                    >\n                        Confirm ID\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'id_confirmed', false)\"\n                    >\n                        Reject ID\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #boolean_template let-row=\"row\">\n            <div\n                *ngIf=\"row.induction\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n            <div\n                *ngIf=\"\n                    !row.induction && !row.process_state.includes('declined')\n                \"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-warning text-warning-content mx-auto\"\n            >\n                <app-icon>question_mark</app-icon>\n            </div>\n            <div\n                *ngIf=\"!row.induction && row.process_state.includes('declined')\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-error text-error-content mx-auto\"\n            >\n                <app-icon>close</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #status_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"rounded-3xl bg-warning text-warning-content border-none\"\n                [class.!text-success-content]=\"row?.status === 'approved'\"\n                [class.!bg-success]=\"row?.status === 'approved'\"\n                [class.!text-error-content]=\"row?.status === 'declined'\"\n                [class.!bg-error]=\"row?.status === 'declined'\"\n                [class.!text-neutral-content]=\"row?.status === 'ended'\"\n                [class.!bg-neutral]=\"row?.status === 'ended'\"\n                [class.opacity-60]=\"row?.status === 'ended'\"\n                [matMenuTriggerFor]=\"menu\"\n                [disabled]=\"row?.status === 'ended'\"\n            >\n                <div class=\"flex items-center\">\n                    <div class=\"mx-2\">\n                        {{\n                            row?.status === 'ended'\n                                ? 'Ended'\n                                : row?.status === 'approved'\n                                ? 'Approved'\n                                : row?.status === 'declined'\n                                ? 'Declined'\n                                : 'Pending'\n                        }}\n                    </div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item (click)=\"approveVisitor(row)\">\n                    Approve Visitor\n                </button>\n                <button mat-menu-item (click)=\"declineVisitor(row)\">\n                    Decline Visitor\n                </button>\n            </mat-menu>\n        </ng-template>\n        <ng-template #date_template let-row=\"row\">\n            {{\n                row.date\n                    | date\n                        : ((filters | async)?.period > 1\n                              ? 'MMM d, ' + time_format\n                              : time_format)\n            }}\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"flex items-center justify-end\">\n                <button\n                    icon\n                    matRipple\n                    [class.pointer-events-none]=\"!row.linked_event\"\n                    [matMenuTriggerFor]=\"checkin_menu\"\n                >\n                    <app-icon\n                        class=\"text-2xl\"\n                        [class.opacity-0]=\"!row.linked_event\"\n                    >\n                        event\n                    </app-icon>\n                </button>\n                <mat-menu #checkin_menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"checkinAllVisitors(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">\n                                event_available\n                            </app-icon>\n                            <div>Checkin All for Booking</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"checkoutAllVisitors(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">event_busy</app-icon>\n                            <div>Checkout All for Booking</div>\n                        </div>\n                    </button>\n                </mat-menu>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!row.attachments?.length\"\n                    title=\"\"\n                    matTooltip=\"View Attachments\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon>attachment</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <a\n                        *ngFor=\"let item of row.attachments\"\n                        [href]=\"item.url\"\n                        mat-menu-item\n                        >{{ item.name }}</a\n                    >\n                </mat-menu>\n                <action-icon\n                    remote\n                    [matTooltip]=\"\n                        row.extension_data.remote\n                            ? 'Set as In-Person Visitor'\n                            : 'Set as Remote Visitior'\n                    \"\n                    [loading]=\"loading === 'remote'\"\n                    [content]=\"\n                        row.extension_data.remote ? 'tap_and_play' : 'business'\n                    \"\n                    (click)=\"setExt(row, 'remote', !row.extension_data.remote)\"\n                >\n                </action-icon>\n                <action-icon\n                    checkin\n                    matTooltip=\"Checkin Guest\"\n                    [loading]=\"loading === 'checkin'\"\n                    [state]=\"row?.checked_in ? 'success' : ''\"\n                    content=\"event_available\"\n                    (click)=\"checkin(row)\"\n                >\n                </action-icon>\n                <action-icon\n                    checkout\n                    matTooltip=\"Checkout Guest\"\n                    [loading]=\"loading === 'checkout'\"\n                    content=\"event_busy\"\n                    (click)=\"checkout(row)\"\n                >\n                </action-icon>\n                <a\n                    [href]=\"'mailto:' + row?.asset_id\"\n                    icon\n                    matRipple\n                    [matTooltip]=\"\n                        row?.user_email === row?.asset_id\n                            ? 'Email Host'\n                            : 'Email Guest'\n                    \"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <action-icon\n                    matTooltip=\"Print QR Code\"\n                    [loading]=\"loading === 'printing'\"\n                    content=\"event_busy\"\n                    (click)=\"printQRCode()\"\n                    [class.invisible]=\"!can_print\"\n                >\n                </action-icon>\n            </div>\n        </ng-template>\n        <button\n            class=\"bg-secondary hover:shadow-lg shadow absolute bottom-4 right-4 text-white h-12 w-12\"\n            matTooltip=\"Download Visitor List\"\n            matTooltipPosition=\"left\"\n            icon\n            matRipple\n            *ngIf=\"(guests | async)?.length\"\n            (click)=\"downloadVisitorList()\"\n        >\n            <app-icon>download</app-icon>\n        </button>\n    `,\n    styles: [``],\n})\nexport class GuestListingComponent extends AsyncHandler {\n    public readonly guests = this._state.filtered_bookings.pipe(\n        tap((_: any) => console.log(_))\n    );\n    public readonly search = this._state.search;\n    public readonly filters = this._state.filters;\n    private _inductions_enabled = false;\n\n    public readonly downloadVisitorList = () =>\n        this._state.downloadVisitorsList();\n\n    public readonly approveVisitor = (u) => this._state.approveVisitor(u);\n    public readonly declineVisitor = (u) => this._state.declineVisitor(u);\n    public readonly checkinAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, true);\n    public readonly checkoutAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, false);\n    public readonly setExt = (u, f, v) => this._state.setExt(u, f, v);\n\n    public readonly checkin = async (item: Booking) => {\n        await this._state.setCheckinState(item, true);\n        this._state.poll();\n    };\n\n    public readonly checkout = async (item: Booking) => {\n        await this._state.setCheckinState(item, false);\n        this._state.poll();\n    };\n\n    public get columns() {\n        return this._inductions_enabled\n            ? [\n                  'state',\n                  'date',\n                  'asset_name',\n                  'user_name',\n                  'asset_id',\n                  'status',\n                  'induction',\n                  'actions',\n              ]\n            : [\n                  'state',\n                  'date',\n                  'asset_name',\n                  'user_name',\n                  'asset_id',\n                  'status',\n                  'actions',\n              ];\n    }\n\n    public get display_columns() {\n        const fields = {\n            state: 'Checked In',\n            date: 'Time',\n            asset_name: 'Person',\n            user_name: 'Host',\n            asset_id: 'Email',\n            id_data: 'ID',\n            status: 'State',\n            induction: 'Inducted',\n            actions: ' ',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get column_sizes() {\n        const fields = {\n            state: '4.5r',\n            date: '8r',\n            asset_name: '12r',\n            user_name: '12r',\n            asset_id: 'flex',\n            id_data: '8r',\n            status: '10r',\n            actions: '16r',\n            induction: '5r',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld) => {\n                if (!bld) return;\n                const visitor_kiosk_app =\n                    this._settings.get('app.visitor_kiosk_app') ||\n                    'visitor-kiosk_app';\n                const metadata: any = await showMetadata(\n                    bld.id,\n                    visitor_kiosk_app\n                ).toPromise();\n                this._inductions_enabled =\n                    metadata.details?.induction_enabled &&\n                    metadata.details?.induction_details;\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: '[app-visitors]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col bg-base-200\">\n            <visitors-topbar class=\"w-full\"></visitors-topbar>\n            <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class VisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n\n    constructor(private _state: VisitorsStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'invite-visitor-modal',\n    template: `\n        <main class=\"relative min-w-[40rem] min-h-[40rem]\">\n            <invite-visitor-form (done)=\"onDone()\"></invite-visitor-form>\n        </main>\n    `,\n    styles: [``],\n})\nexport class InviteVisitorModalComponent {\n    constructor(\n        private _dialog_ref: MatDialogRef<InviteVisitorModalComponent>\n    ) {}\n\n    public onDone() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[app-new-visitors]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center px-8 py-4 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Visitors</h2>\n                    <div class=\"flex-1 w-2\"></div>\n                    <searchbar\n                        class=\"mr-2\"\n                        (modelChange)=\"setSearch($event)\"\n                    ></searchbar>\n                    <button btn matRipple (click)=\"inviteVisitor()\">\n                        Invite Visitor\n                    </button>\n                </div>\n                <div class=\"flex items-center px-8 pb-4\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"no-subscript w-60\"\n                    >\n                        <mat-select\n                            [ngModel]=\"(filters | async)?.zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                            multiple\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                <div class=\"flex flex-col-reverse\">\n                                    <div\n                                        class=\"text-xs opacity-30\"\n                                        *ngIf=\"use_region\"\n                                    >\n                                        {{\n                                            (level.parent_id | building)\n                                                ?.display_name\n                                        }}\n                                        <span class=\"opacity-0\"> - </span>\n                                    </div>\n                                    <div>\n                                        {{ level.display_name || level.name }}\n                                    </div>\n                                </div>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"flex-1 w-2\"></div>\n                    <date-options (dateChange)=\"setDate($event)\"></date-options>\n                </div>\n                <div class=\"px-8\">\n                    <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewVisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n    ]).pipe(\n        map(([bld, region]) =>\n            this._settings.get('app.use_region')\n                ? this._org.levelsForRegion(region)\n                : this._org.levelsForBuilding(bld)\n        )\n    );\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {}\n\n    public inviteVisitor() {\n        this._dialog.open(InviteVisitorModalComponent);\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { VisitorsComponent } from './visitors.component';\nimport { VisitorsTopbarComponent } from './visitors-topbar.component';\nimport { GuestListingComponent } from './guest-listing.component';\nimport { NewVisitorsComponent } from './new-visitors.component';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { VisitorInductionModalComponent } from './visitor-induction-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: VisitorsComponent },\n    { path: 'new', component: NewVisitorsComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewVisitorsComponent,\n        VisitorsComponent,\n        VisitorsTopbarComponent,\n        GuestListingComponent,\n        InviteVisitorModalComponent,\n        VisitorInductionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedBookingsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class VisitorsModule {}\n\n/**\nzone_ids: zone-EmWVhHG3Bhz\nperiod_start: 1604926800\nperiod_end: 1605013199\n\nperiod_start: 1605013200\nperiod_end: 1605099599\nzones: zone-EmWVhHG3Bhz\n\n*/\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}