{"version":3,"file":"apps_concierge_src_app_visitors_visitors_module_ts.js","mappings":"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","names":["VisitorInductionModalComponent","induction_details","this","_settings","get","is_enabled","constructor","agree","static","t","i0","i1","core","VBU","selectors","decls","vars","consts","template","rf","ctx","$event","VisitorsStateService","AsyncHandler","search","_search","getValue","time_format","_dialog","_org","super","_poll","BehaviorSubject","_filters","_loading","loading","asObservable","filters","bookings","combineLatest","active_building","pipe","filter","building","debounceTime","switchMap","bld","next","date","Date","start","startOfDay","end","addDays","period","queryBookings","type","period_start","getUnixTime","period_end","zones","join","id","include_checked_out","limit","catchError","_","of","tap","shareReplay","filtered_bookings","map","guest_list","toLowerCase","asset_name","includes","user_name","user_email","asset_id","sort","a","b","setFilters","setSearchString","poll","now","startPolling","delay","interval","stopPolling","clearInterval","setExt","guest","field","value","_this","_asyncToGenerator","extension_data","updateGuest","toPromise","approveVisitor","item","_this2","details","openConfirmModal","title","content","icon","reason","close","approveBooking","catch","e","notifyError","message","error","notifySuccess","declineVisitor","_this3","rejectBooking","requestInduction","_this4","result","open","data","afterClosed","setBookingState","updateBooking","induction","setCheckinState","state","_this5","rejected","approved","checkinBooking","setCheckinStateForEvent","event_id","_this6","event_bookings","take","parent_id","linked_event","length","Promise","all","downloadVisitorsList","_this7","list","Name","Email","checked_in","Host","Status","status","format","jsonToCsv","downloadFile","i2","i3","jDH","factory","ɵfac","providedIn","level_r1","display_name","name","VisitorsTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","first","subscription","queryParamMap","subscribe","params","has","split","level","levelWithID","buildings","find","zone","lvl","push","features","VisitorsTopbarComponent_mat_option_3_Template","tmp_2_0","row_r1","checked_out_at","ctx_r1","GuestListingComponent_ng_template_2_div_0_Template","GuestListingComponent_ng_template_2_div_1_Template","GuestListingComponent_ng_template_2_div_2_Template","row_r3","GuestListingComponent_ng_template_4_div_3_Template","row_r4","GuestListingComponent_ng_template_6_div_3_Template","row_r5","id_confirmed","_r6","row","id_data","url","GuestListingComponent_ng_template_8_button_1_Template","GuestListingComponent_ng_template_8_ng_template_2_Template","id_confirmation_r7","GuestListingComponent_ng_template_10_div_0_Template","GuestListingComponent_ng_template_10_div_1_Template","GuestListingComponent_ng_template_10_div_2_Template","inducted","row_r8","GuestListingComponent_ng_template_12_app_icon_5_Template","row_r10","_r9","menu_r11","row_r12","tmp_10_0","item_r14","_r16","printQRCode","_r17","row_r15","checkinAllVisitors","checkoutAllVisitors","GuestListingComponent_ng_template_16_a_14_Template","_r13","GuestListingComponent_ng_template_16_button_21_Template","checkout","checkin","GuestListingComponent_ng_template_16_ng_container_34_Template","guest_menu_r18","attachment","attachment_menu","attachments","remote","can_print","_r19","downloadVisitorList","GuestListingComponent","process_state","guests","inductions_enabled","u","f","v","_ref","_x","apply","arguments","_ref2","_x2","_ref3","visitor_kiosk_app","metadata","showMetadata","induction_enabled","_x3","GuestListingComponent_ng_template_2_Template","GuestListingComponent_ng_template_4_Template","GuestListingComponent_ng_template_6_Template","GuestListingComponent_ng_template_8_Template","GuestListingComponent_ng_template_10_Template","GuestListingComponent_ng_template_12_Template","GuestListingComponent_ng_template_14_Template","GuestListingComponent_ng_template_16_Template","GuestListingComponent_button_18_Template","_c7","_c0","state_template_r20","_c1","date_template_r25","_c2","person_template_r21","_c3","host_template_r22","_c4","status_template_r24","_c5","boolean_template_r23","_c6","action_template_r26","tmp_12_0","VisitorsComponent","ngOnDestroy","attrs","VisitorsComponent_mat_progress_bar_4_Template","InviteVisitorModalComponent","_dialog_ref","onDone","tmp_3_0","NewVisitorsComponent_mat_option_15_div_2_Template","use_region","ROUTES","path","component","NewVisitorsComponent","active_region","region","levelsForRegion","levelsForBuilding","inviteVisitor","i4","i5","NewVisitorsComponent_mat_option_15_Template","NewVisitorsComponent_mat_progress_bar_21_Template","tmp_0_0","VisitorsModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedBookingsModule","RouterModule","forChild","MapLocation","_data","location","position","map_id","x","map_width","y","map_height","variance","last_seen","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/visitors/visitor-induction-modal.component.ts","./apps/concierge/src/app/visitors/visitors-state.service.ts","./apps/concierge/src/app/visitors/visitors-topbar.component.ts","./apps/concierge/src/app/visitors/guest-listing.component.ts","./apps/concierge/src/app/visitors/visitors.component.ts","./apps/concierge/src/app/visitors/invite-visitor-modal.component.ts","./apps/concierge/src/app/visitors/new-visitors.component.ts","./apps/concierge/src/app/visitors/visitors.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'visitor-induction-modal',\n    template: `\n        <div\n            class=\"relative bg-base-100 rounded shadow overflow-hidden flex flex-col items-center w-[32rem] p-4\"\n        >\n            <p class=\"my-4\">\n                Please read the induction information below before proceeding\n            </p>\n            <div\n                class=\"rounded border border-base-300 w-full p-4 opacity-60 text-sm overflow-y-auto overflow-x-hidden max-h-[50vh] whitespace-pre-wrap\"\n            >\n                {{ induction_details }}\n            </div>\n            <mat-checkbox [(ngModel)]=\"agree\" class=\"my-4\">\n                I agree\n            </mat-checkbox>\n            <div class=\"flex items-center justify-center space-x-2\">\n                <button\n                    btn\n                    matRipple\n                    class=\"w-32 clear underline\"\n                    [mat-dialog-close]=\"false\"\n                >\n                    Decline\n                </button>\n                <button\n                    btn\n                    matRipple\n                    class=\"w-32\"\n                    [disabled]=\"!agree\"\n                    [mat-dialog-close]=\"true\"\n                >\n                    Accept\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class VisitorInductionModalComponent {\n    public agree = false;\n\n    public get induction_details() {\n        return this._settings.get('app.induction_details');\n    }\n\n    public get is_enabled() {\n        return (\n            this._settings.get('app.induction_enabled') &&\n            this._settings.get('app.induction_details')\n        );\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { startOfDay, getUnixTime, addDays, format } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    SettingsService,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { GuestUser, updateGuest } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    Booking,\n    approveBooking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n    setBookingState,\n    updateBooking,\n} from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { SpacePipe } from '@placeos/spaces';\nimport { VisitorInductionModalComponent } from './visitor-induction-modal.component';\n\nexport interface VisitorFilters {\n    date?: number;\n    zones?: string[];\n    all_bookings?: boolean;\n    period?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VisitorsStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _filters = new BehaviorSubject<VisitorFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly bookings = combineLatest([\n        this._org.active_building,\n        this._filters,\n        this._poll,\n    ]).pipe(\n        filter(([building]) => !!building),\n        debounceTime(150),\n        switchMap(([bld, filters]) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            const start = startOfDay(date);\n            const end = addDays(start, filters.period || 1);\n            return queryBookings({\n                type: 'visitor',\n                period_start: getUnixTime(start),\n                period_end: getUnixTime(end),\n                zones: (filters.zones || []).join(',') || bld.id,\n                include_checked_out: true,\n                limit: 1000,\n            }).pipe(catchError((_) => of([] as Booking[])));\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_bookings = combineLatest([\n        this._search,\n        this.bookings,\n    ]).pipe(\n        map(([search, guest_list]) => {\n            const filter = search.toLowerCase();\n            const out = guest_list\n                .filter(\n                    (_) =>\n                        _.asset_name?.toLowerCase().includes(filter) ||\n                        _.user_name?.toLowerCase().includes(filter) ||\n                        _.user_email?.toLowerCase().includes(filter) ||\n                        _.asset_id?.toLowerCase().includes(filter)\n                )\n                .sort((a, b) => a.date - b.date);\n            return out;\n        })\n    );\n\n    public get search() {\n        return this._search.getValue();\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setFilters(filters: VisitorFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public poll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async setExt<T = any>(guest: GuestUser, field: string, value: T) {\n        const extension_data = { ...guest.extension_data };\n        extension_data[field] = value;\n        await updateGuest(guest.id, { ...guest, extension_data }).toPromise();\n        this._poll.next(Date.now());\n    }\n\n    public async approveVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Approve Visitor',\n                content: `Approve attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await (approveBooking(item.id) as any).toPromise().catch((e) => {\n            notifyError(\n                `Error approving visitor: ${e.message || e.error || e}`\n            );\n            details.close();\n            throw e;\n        });\n        notifySuccess(`Successfully approved visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async declineVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Decline Visitor',\n                content: `Decline attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await rejectBooking(item.id)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error declining visitor: ${e.message || e.error || e}`\n                );\n                details.close();\n                throw e;\n            });\n        notifySuccess(`Successfully declining visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async requestInduction(item: Booking) {\n        const ref = this._dialog.open(VisitorInductionModalComponent, {\n            data: { item },\n        });\n        const result = await ref.afterClosed().toPromise();\n        if (!result) {\n            if (result === false) {\n                await setBookingState(\n                    item.id,\n                    'declined_induction'\n                ).toPromise();\n            }\n            throw 'User declined';\n        }\n        await setBookingState(item.id, 'inducted').toPromise();\n        await updateBooking(item.id, { ...item, induction: true });\n    }\n\n    public async setCheckinState(item: Booking, state = true) {\n        if (item.rejected) throw 'You cannot check in a rejected meeting';\n        if (state === true) {\n            await this.requestInduction(item);\n        }\n        if (!item.approved && state === true) {\n            await approveBooking(item.id).toPromise();\n        }\n        const new_user = await checkinBooking(item.id, state)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error checking ${state ? 'in' : 'out'} ${\n                        item.asset_name || item.asset_id\n                    } for ${item.user_name}'s meeting`\n                );\n                throw e;\n            });\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} ${\n                item.asset_name || item.asset_id\n            } from ${item.user_name}'s meeting`\n        );\n    }\n\n    public async setCheckinStateForEvent(event_id: string, state = true) {\n        if (!event_id) return;\n        const bookings = await this.bookings.pipe(take(1)).toPromise();\n        const event_bookings = bookings.filter(\n            (_) =>\n                _.parent_id === event_id ||\n                _.extension_data.parent_id === event_id ||\n                _.linked_event?.id === event_id ||\n                _.linked_event?.event_id === event_id\n        );\n        if (!event_bookings.length) return;\n        await Promise.all(\n            event_bookings.map((_) =>\n                checkinBooking(_.id, state)\n                    .toPromise()\n                    .catch((e) => {\n                        notifyError(\n                            `Error checking ${state ? 'in' : 'out'} ${\n                                _.asset_name || _.asset_id\n                            } for ${_.user_name}'s meeting`\n                        );\n                        throw e;\n                    })\n            )\n        );\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} all visitors from ${\n                event_bookings[0].user_name\n            }'s meeting`\n        );\n        this._poll.next(Date.now());\n    }\n\n    public async downloadVisitorsList() {\n        const bookings = await this.filtered_bookings.pipe(take(1)).toPromise();\n        if (!bookings.length) return;\n        const { date } = this._filters.getValue();\n        const list = bookings.map((_) => ({\n            Name: _.asset_name,\n            Email: _.asset_id,\n            'Checked In': _.checked_in,\n            Host: _.user_email || '',\n            Status: _.status,\n            Date: format(_.date, 'dd MMM ' + this.time_format),\n        }));\n        const data = jsonToCsv(list);\n        downloadFile(\n            `visitor-list-${format(date || Date.now(), 'MMM-dd')}.csv`,\n            data\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: 'visitors-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.period || 1\"\n                    (ngModelChange)=\"setFilters({ period: $event })\"\n                    placeholder=\"Viewing Period\"\n                >\n                    <mat-option [value]=\"1\">Show Day</mat-option>\n                    <mat-option [value]=\"7\">Show Week</mat-option>\n                    <mat-option [value]=\"30\">Show Month</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class VisitorsTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler, SettingsService, notifyError } from '@placeos/common';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { Booking } from '@placeos/bookings';\nimport { showMetadata } from '@placeos/ts-client';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'guest-listings',\n    template: `\n        <simple-table\n            class=\"min-w-[60rem] block text-sm\"\n            [data]=\"guests\"\n            [columns]=\"[\n                {\n                    key: 'state',\n                    name: 'Checked In',\n                    content: state_template,\n                    size: '6.5rem',\n                    sortable: false\n                },\n                {\n                    key: 'date',\n                    name: 'Time',\n                    content: date_template,\n                    size: '6rem'\n                },\n                {\n                    key: 'asset_name',\n                    name: 'Visitor',\n                    content: person_template\n                },\n                { key: 'user_name', name: 'Host', content: host_template },\n                {\n                    key: 'status',\n                    name: 'State',\n                    content: status_template,\n                    size: '9.5rem'\n                },\n                {\n                    key: 'induction',\n                    name: 'Inducted',\n                    content: boolean_template,\n                    show: !!inductions_enabled,\n                    size: '5.5rem'\n                },\n                {\n                    key: 'actions',\n                    name: ' ',\n                    content: action_template,\n                    size: '3.25rem',\n                    sortable: false\n                }\n            ]\"\n            [filter]=\"search | async\"\n            [sortable]=\"true\"\n        ></simple-table>\n        <ng-template #state_template let-row=\"row\">\n            <div\n                *ngIf=\"!row?.checked_in && row.checked_out_at\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-base-400 text-neutral-content mx-auto\"\n                [matTooltip]=\"\n                    'Checked out at ' + (row.checked_out_at | date: time_format)\n                \"\n                matTooltipPosition=\"right\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n            <div\n                *ngIf=\"!row?.checked_in && !row.checked_out_at\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-warning text-warning-content mx-auto\"\n                matTooltip=\"Not checked in\"\n                matTooltipPosition=\"right\"\n            >\n                <app-icon>question_mark</app-icon>\n            </div>\n            <div\n                *ngIf=\"row?.checked_in\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n                matTooltip=\"Checked In\"\n                matTooltipPosition=\"right\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #person_template let-row=\"row\">\n            <div class=\"px-4 py-2\">\n                <div>{{ row.asset_name || row.asset_id }}</div>\n                <div\n                    *ngIf=\"row.asset_name && row.asset_id\"\n                    class=\"opacity-30 text-xs\"\n                >\n                    {{ row.asset_id }}\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #host_template let-row=\"row\">\n            <div class=\"px-4 py-2\">\n                <div>{{ row.user_name || row.user_email }}</div>\n                <div\n                    *ngIf=\"row.user_name && row.user_email\"\n                    class=\"opacity-30 text-xs\"\n                >\n                    {{ row.user_email }}\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #id_template let-row=\"row\">\n            <div customTooltip [content]=\"id_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.id_data?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.id_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.id_confirmed === false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #id_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.id_data?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'id_confirmed', true)\"\n                    >\n                        Confirm ID\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'id_confirmed', false)\"\n                    >\n                        Reject ID\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #boolean_template let-row=\"row\">\n            <div\n                *ngIf=\"inducted(row)\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n            <div\n                *ngIf=\"inducted(row) === null\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-warning text-warning-content mx-auto\"\n            >\n                <app-icon>question_mark</app-icon>\n            </div>\n            <div\n                *ngIf=\"inducted(row) === false\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-error text-error-content mx-auto\"\n            >\n                <app-icon>close</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #status_template let-row=\"row\">\n            <div class=\"px-4\">\n                <button\n                    matRipple\n                    class=\"rounded-3xl bg-warning text-warning-content border-none w-[7.5rem] h-10\"\n                    [class.!text-success-content]=\"row?.status === 'approved'\"\n                    [class.!bg-success]=\"row?.status === 'approved'\"\n                    [class.!text-error-content]=\"row?.status === 'declined'\"\n                    [class.!bg-error]=\"row?.status === 'declined'\"\n                    [class.!text-neutral-content]=\"row?.status === 'ended'\"\n                    [class.!bg-neutral]=\"row?.status === 'ended'\"\n                    [class.opacity-30]=\"row?.status === 'ended'\"\n                    [matMenuTriggerFor]=\"menu\"\n                    [disabled]=\"\n                        row?.status === 'ended' ||\n                        (row.checked_in && !row.checked_out_at)\n                    \"\n                >\n                    <div class=\"flex items-center pl-4 pr-2 space-x-2\">\n                        <div class=\"flex-1 text-left\">\n                            {{\n                                row?.status === 'ended'\n                                    ? 'Ended'\n                                    : row?.status === 'approved'\n                                    ? 'Approved'\n                                    : row?.status === 'declined'\n                                    ? 'Declined'\n                                    : 'Pending'\n                            }}\n                        </div>\n                        <app-icon\n                            class=\"text-2xl\"\n                            *ngIf=\"\n                                !(\n                                    row?.status === 'ended' ||\n                                    (row.checked_in && !row.checked_out_at)\n                                )\n                            \"\n                        >\n                            arrow_drop_down\n                        </app-icon>\n                    </div>\n                </button>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item (click)=\"approveVisitor(row)\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">event_available</app-icon>\n                        <div class=\"pr-2\">Approve Visitor</div>\n                    </div>\n                </button>\n                <button mat-menu-item (click)=\"declineVisitor(row)\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl text-error\">\n                            event_busy\n                        </app-icon>\n                        <div class=\"pr-2\">Decline Visitor</div>\n                    </div>\n                </button>\n            </mat-menu>\n        </ng-template>\n        <ng-template #date_template let-row=\"row\">\n            <div class=\"px-4\">\n                {{\n                    row.date\n                        | date\n                            : ((filters | async)?.period > 1\n                                  ? 'MMM d, ' + time_format\n                                  : time_format)\n                }}\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"flex items-center justify-end px-2\">\n                <button icon matRipple [matMenuTriggerFor]=\"guest_menu\">\n                    <app-icon>more_horiz</app-icon>\n                </button>\n                <mat-menu #guest_menu=\"matMenu\">\n                    <button\n                        mat-menu-item\n                        [disabled]=\"!row.attachment?.length\"\n                        [matMenuTriggerFor]=\"attachment_menu\"\n                    >\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">attachment</app-icon>\n                            <div>View Attachments</div>\n                        </div>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <a\n                            *ngFor=\"let item of row.attachments\"\n                            [href]=\"item.url\"\n                            mat-menu-item\n                        >\n                            {{ item.name }}\n                        </a>\n                    </mat-menu>\n                    <button mat-menu-item (click)=\"setExt(row, 'remote', true)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">\n                                {{\n                                    row.extension_data.remote\n                                        ? 'business'\n                                        : 'laptop'\n                                }}\n                            </app-icon>\n                            <div>\n                                Set as\n                                {{\n                                    row.extension_data.remote\n                                        ? 'Onsite'\n                                        : 'Remote'\n                                }}\n                                Visitor\n                            </div>\n                        </div>\n                    </button>\n                    <button\n                        mat-menu-item\n                        *ngIf=\"can_print\"\n                        (click)=\"printQRCode()\"\n                    >\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">print</app-icon>\n                            <div>Print QR Code</div>\n                        </div>\n                    </button>\n                    <a mat-menu-item [href]=\"'mailto:' + row?.asset_id\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">email</app-icon>\n                            <div>\n                                Email\n                                {{\n                                    row?.user_email === row?.asset_id\n                                        ? 'Host'\n                                        : 'Guest'\n                                }}\n                            </div>\n                        </div>\n                    </a>\n                    <button\n                        mat-menu-item\n                        (click)=\"row.checked_in ? checkout(row) : checkin(row)\"\n                    >\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">\n                                {{\n                                    row.checked_in\n                                        ? 'event_busy'\n                                        : 'event_available'\n                                }}\n                            </app-icon>\n                            <div>\n                                {{ row.checked_in ? 'Checkout' : 'Checkin' }}\n                                Guest\n                            </div>\n                        </div>\n                    </button>\n                    <ng-container *ngIf=\"row.linked_event\">\n                        <button mat-menu-item (click)=\"checkinAllVisitors(row)\">\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl\">\n                                    event_available\n                                </app-icon>\n                                <div>Checkin all for Meeting</div>\n                            </div>\n                        </button>\n                        <button\n                            mat-menu-item\n                            (click)=\"checkoutAllVisitors(row)\"\n                        >\n                            <div class=\"flex items-center space-x-2\">\n                                <app-icon class=\"text-2xl text-error\">\n                                    event_busy\n                                </app-icon>\n                                <div>Checkout all for Meeting</div>\n                            </div>\n                        </button>\n                    </ng-container>\n                </mat-menu>\n            </div>\n        </ng-template>\n        <button\n            class=\"bg-secondary hover:shadow-lg shadow absolute bottom-4 right-4 text-white h-12 w-12\"\n            matTooltip=\"Download Visitor List\"\n            matTooltipPosition=\"left\"\n            icon\n            matRipple\n            *ngIf=\"(guests | async)?.length\"\n            (click)=\"downloadVisitorList()\"\n        >\n            <app-icon>download</app-icon>\n        </button>\n        <div class=\"w-full h-8\"></div>\n    `,\n    styles: [``],\n})\nexport class GuestListingComponent extends AsyncHandler {\n    public readonly guests = this._state.filtered_bookings;\n    public readonly search = this._state.search;\n    public readonly filters = this._state.filters;\n    public inductions_enabled = false;\n\n    public readonly downloadVisitorList = () =>\n        this._state.downloadVisitorsList();\n\n    public readonly approveVisitor = (u) => this._state.approveVisitor(u);\n    public readonly declineVisitor = (u) => this._state.declineVisitor(u);\n    public readonly checkinAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, true);\n    public readonly checkoutAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, false);\n    public readonly setExt = (u, f, v) => this._state.setExt(u, f, v);\n\n    public readonly checkin = async (item: Booking) => {\n        await this._state.setCheckinState(item, true).catch((e) => {\n            if (e !== 'User declined') notifyError(e);\n            throw e;\n        });\n        this._state.poll();\n    };\n\n    public readonly checkout = async (item: Booking) => {\n        await this._state.setCheckinState(item, false);\n        this._state.poll();\n    };\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    public inducted(item: Booking) {\n        return item.process_state.includes('declined')\n            ? false\n            : item.process_state.includes('inducted') || item.induction\n            ? true\n            : null;\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld) => {\n                if (!bld) return;\n                const visitor_kiosk_app =\n                    this._settings.get('app.visitor_kiosk_app') ||\n                    'visitor-kiosk_app';\n                const metadata: any = await showMetadata(\n                    bld.id,\n                    visitor_kiosk_app\n                ).toPromise();\n                this.inductions_enabled =\n                    metadata.details?.induction_enabled &&\n                    metadata.details?.induction_details;\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: '[app-visitors]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col bg-base-200\">\n            <visitors-topbar class=\"w-full\"></visitors-topbar>\n            <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class VisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n\n    constructor(private _state: VisitorsStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'invite-visitor-modal',\n    template: `\n        <main class=\"relative min-w-[40rem] min-h-[40rem]\">\n            <invite-visitor-form (done)=\"onDone()\"></invite-visitor-form>\n        </main>\n    `,\n    styles: [``],\n})\nexport class InviteVisitorModalComponent {\n    constructor(\n        private _dialog_ref: MatDialogRef<InviteVisitorModalComponent>\n    ) {}\n\n    public onDone() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[app-new-visitors]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center px-8 py-4 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Visitors</h2>\n                    <div class=\"flex-1 w-2\"></div>\n                    <searchbar\n                        class=\"mr-2\"\n                        (modelChange)=\"setSearch($event)\"\n                    ></searchbar>\n                    <button btn matRipple (click)=\"inviteVisitor()\">\n                        Invite Visitor\n                    </button>\n                </div>\n                <div class=\"flex items-center px-8 pb-4\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"no-subscript w-60\"\n                    >\n                        <mat-select\n                            [ngModel]=\"(filters | async)?.zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                            multiple\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                <div class=\"flex flex-col-reverse\">\n                                    <div\n                                        class=\"text-xs opacity-30\"\n                                        *ngIf=\"use_region\"\n                                    >\n                                        {{\n                                            (level.parent_id | building)\n                                                ?.display_name\n                                        }}\n                                        <span class=\"opacity-0\"> - </span>\n                                    </div>\n                                    <div>\n                                        {{ level.display_name || level.name }}\n                                    </div>\n                                </div>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"flex-1 w-2\"></div>\n                    <date-options (dateChange)=\"setDate($event)\"></date-options>\n                </div>\n                <div class=\"mx-8 flex-1 h-1/2 overflow-auto\">\n                    <guest-listings></guest-listings>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewVisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n    ]).pipe(\n        map(([bld, region]) =>\n            this._settings.get('app.use_region')\n                ? this._org.levelsForRegion(region)\n                : this._org.levelsForBuilding(bld)\n        )\n    );\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {}\n\n    public inviteVisitor() {\n        this._dialog.open(InviteVisitorModalComponent);\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { VisitorsComponent } from './visitors.component';\nimport { VisitorsTopbarComponent } from './visitors-topbar.component';\nimport { GuestListingComponent } from './guest-listing.component';\nimport { NewVisitorsComponent } from './new-visitors.component';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { VisitorInductionModalComponent } from './visitor-induction-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: VisitorsComponent },\n    { path: 'new', component: NewVisitorsComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewVisitorsComponent,\n        VisitorsComponent,\n        VisitorsTopbarComponent,\n        GuestListingComponent,\n        InviteVisitorModalComponent,\n        VisitorInductionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedBookingsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class VisitorsModule {}\n\n/**\nzone_ids: zone-EmWVhHG3Bhz\nperiod_start: 1604926800\nperiod_end: 1605013199\n\nperiod_start: 1605013200\nperiod_end: 1605099599\nzones: zone-EmWVhHG3Bhz\n\n*/\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}