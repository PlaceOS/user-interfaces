{"version":3,"file":"apps_concierge_src_app_visitors_visitors_module_ts.js","mappings":"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","names":["VisitorsStateService","AsyncHandler","search","this","_search","getValue","time_format","_settings","constructor","_dialog","_org","super","_poll","BehaviorSubject","_filters","_loading","loading","asObservable","filters","bookings","combineLatest","active_building","pipe","filter","building","debounceTime","switchMap","bld","next","date","Date","start","startOfDay","end","addDays","period","queryBookings","type","period_start","getUnixTime","period_end","zones","join","id","include_checked_out","limit","catchError","_","of","tap","shareReplay","filtered_bookings","map","guest_list","toLowerCase","asset_name","includes","user_name","user_email","asset_id","sort","a","b","setFilters","setSearchString","poll","now","startPolling","delay","interval","stopPolling","clearInterval","setExt","guest","field","value","_this","_asyncToGenerator","extension_data","updateGuest","toPromise","approveVisitor","item","_this2","details","openConfirmModal","title","content","icon","reason","close","approveBooking","catch","e","notifyError","message","error","notifySuccess","declineVisitor","_this3","rejectBooking","setCheckinState","state","checkinBooking","setCheckinStateForEvent","event_id","_this4","event_bookings","take","parent_id","linked_event","length","Promise","all","downloadVisitorsList","_this5","list","Name","Email","checked_in","Host","Status","status","format","data","jsonToCsv","downloadFile","static","t","i0","i1","i2","i3","core","Yz7","factory","ɵfac","providedIn","level_r1","display_name","name","VisitorsTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","first","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","buildings","find","zone","lvl","push","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","VisitorsTopbarComponent_mat_option_3_Template","tmp_2_0","GuestListingComponent_ng_template_4_i_0_Template","GuestListingComponent_ng_template_4_ng_template_1_Template","row_r17","_r20","row_r21","host","row_r22","vaccination_confirmed","_r29","row","ctx_r27","ctx_r30","vaccination_proof","url","GuestListingComponent_ng_template_8_button_1_Template","GuestListingComponent_ng_template_8_ng_template_2_Template","_r25","row_r33","id_confirmed","_r40","ctx_r38","ctx_r41","id_data","GuestListingComponent_ng_template_10_button_1_Template","GuestListingComponent_ng_template_10_ng_template_2_Template","_r36","GuestListingComponent_ng_template_12_div_0_Template","GuestListingComponent_ng_template_12_div_1_Template","row_r44","induction","process_state","row_r47","_r50","ctx_r49","ctx_r51","_r48","row_r52","tmp_0_0","ctx_r12","item_r57","row_r53","_r59","ctx_r58","checkinAllVisitors","ctx_r60","checkoutAllVisitors","GuestListingComponent_ng_template_18_a_23_Template","ctx_r61","remote","ctx_r62","checkin","ctx_r63","checkout","ctx_r64","printQRCode","_r54","attachments","_r55","ctx_r14","can_print","_r66","ctx_r65","downloadVisitorList","GuestListingComponent","columns","_inductions_enabled","display_columns","fields","actions","column_sizes","guests","console","log","u","f","v","_ref","_x","apply","arguments","_ref2","_x2","_ref3","visitor_kiosk_app","metadata","showMetadata","induction_enabled","induction_details","_x3","GuestListingComponent_ng_template_4_Template","GuestListingComponent_ng_template_6_Template","GuestListingComponent_ng_template_8_Template","GuestListingComponent_ng_template_10_Template","GuestListingComponent_ng_template_12_Template","GuestListingComponent_ng_template_14_Template","GuestListingComponent_ng_template_16_Template","GuestListingComponent_ng_template_18_Template","GuestListingComponent_button_20_Template","_c0","_r1","_r11","_r13","_r3","_r7","_r15","_r9","tmp_7_0","VisitorsComponent","ngOnDestroy","attrs","VisitorsComponent_mat_progress_bar_4_Template","InviteVisitorModalComponent","_dialog_ref","onDone","level_r2","ROUTES","path","component","NewVisitorsComponent","inviteVisitor","open","i4","NewVisitorsComponent_mat_option_14_Template","NewVisitorsComponent_mat_progress_bar_19_Template","VisitorsModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedBookingsModule","RouterModule","forChild","MapLocation","_data","location","position","map_id","x","map_width","y","map_height","variance","last_seen","at_location","coordinates_from"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/visitors/visitors-state.service.ts","./apps/concierge/src/app/visitors/visitors-topbar.component.ts","./apps/concierge/src/app/visitors/guest-listing.component.ts","./apps/concierge/src/app/visitors/visitors.component.ts","./apps/concierge/src/app/visitors/invite-visitor-modal.component.ts","./apps/concierge/src/app/visitors/new-visitors.component.ts","./apps/concierge/src/app/visitors/visitors.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { startOfDay, getUnixTime, addDays, format } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    SettingsService,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { GuestUser, updateGuest } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    Booking,\n    approveBooking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { SpacePipe } from '@placeos/spaces';\n\nexport interface VisitorFilters {\n    date?: number;\n    zones?: string[];\n    all_bookings?: boolean;\n    period?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class VisitorsStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _filters = new BehaviorSubject<VisitorFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly bookings = combineLatest([\n        this._org.active_building,\n        this._filters,\n        this._poll,\n    ]).pipe(\n        filter(([building]) => !!building),\n        debounceTime(150),\n        switchMap(([bld, filters]) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            const start = startOfDay(date);\n            const end = addDays(start, filters.period || 1);\n            return queryBookings({\n                type: 'visitor',\n                period_start: getUnixTime(start),\n                period_end: getUnixTime(end),\n                zones: (filters.zones || []).join(',') || bld.id,\n                include_checked_out: true,\n                limit: 1000,\n            }).pipe(catchError((_) => of([] as Booking[])));\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly filtered_bookings = combineLatest([\n        this._search,\n        this.bookings,\n    ]).pipe(\n        map(([search, guest_list]) => {\n            const filter = search.toLowerCase();\n            const out = guest_list\n                .filter(\n                    (_) =>\n                        _.asset_name?.toLowerCase().includes(filter) ||\n                        _.user_name?.toLowerCase().includes(filter) ||\n                        _.user_email?.toLowerCase().includes(filter) ||\n                        _.asset_id?.toLowerCase().includes(filter)\n                )\n                .sort((a, b) => a.date - b.date);\n            return out;\n        })\n    );\n\n    public get search() {\n        return this._search.getValue();\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setFilters(filters: VisitorFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public poll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async setExt<T = any>(guest: GuestUser, field: string, value: T) {\n        const extension_data = { ...guest.extension_data };\n        extension_data[field] = value;\n        await updateGuest(guest.id, { ...guest, extension_data }).toPromise();\n        this._poll.next(Date.now());\n    }\n\n    public async approveVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Approve Visitor',\n                content: `Approve attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await (approveBooking(item.id) as any).toPromise().catch((e) => {\n            notifyError(\n                `Error approving visitor: ${e.message || e.error || e}`\n            );\n            details.close();\n            throw e;\n        });\n        notifySuccess(`Successfully approved visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async declineVisitor(item: Booking) {\n        const details = await openConfirmModal(\n            {\n                title: 'Decline Visitor',\n                content: `Decline attendance of ${\n                    item.asset_name || item.asset_id\n                } to their meeting?`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        details.loading('Updating guest details');\n        await rejectBooking(item.id)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error declining visitor: ${e.message || e.error || e}`\n                );\n                details.close();\n                throw e;\n            });\n        notifySuccess(`Successfully declining visitor`);\n        this._poll.next(Date.now());\n        details.close();\n    }\n\n    public async setCheckinState(item: Booking, state = true) {\n        const new_user = await checkinBooking(item.id, state)\n            .toPromise()\n            .catch((e) => {\n                notifyError(\n                    `Error checking ${state ? 'in' : 'out'} ${\n                        item.asset_name || item.asset_id\n                    } for ${item.user_name}'s meeting`\n                );\n                throw e;\n            });\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} ${\n                item.asset_name || item.asset_id\n            } from ${item.user_name}'s meeting`\n        );\n    }\n\n    public async setCheckinStateForEvent(event_id: string, state = true) {\n        if (!event_id) return;\n        const bookings = await this.bookings.pipe(take(1)).toPromise();\n        const event_bookings = bookings.filter(\n            (_) =>\n                _.parent_id === event_id ||\n                _.extension_data.parent_id === event_id ||\n                _.linked_event?.id === event_id ||\n                _.linked_event?.event_id === event_id\n        );\n        if (!event_bookings.length) return;\n        await Promise.all(\n            event_bookings.map((_) =>\n                checkinBooking(_.id, state)\n                    .toPromise()\n                    .catch((e) => {\n                        notifyError(\n                            `Error checking ${state ? 'in' : 'out'} ${\n                                _.asset_name || _.asset_id\n                            } for ${_.user_name}'s meeting`\n                        );\n                        throw e;\n                    })\n            )\n        );\n        notifySuccess(\n            `Successfully checked ${state ? 'in' : 'out'} all visitors from ${\n                event_bookings[0].user_name\n            }'s meeting`\n        );\n        this._poll.next(Date.now());\n    }\n\n    public async downloadVisitorsList() {\n        const bookings = await this.filtered_bookings.pipe(take(1)).toPromise();\n        if (!bookings.length) return;\n        const { date } = this._filters.getValue();\n        const list = bookings.map((_) => ({\n            Name: _.asset_name,\n            Email: _.asset_id,\n            'Checked In': _.checked_in,\n            Host: _.user_email || '',\n            Status: _.status,\n            Date: format(_.date, 'dd MMM ' + this.time_format),\n        }));\n        const data = jsonToCsv(list);\n        downloadFile(\n            `visitor-list-${format(date || Date.now(), 'MMM-dd')}.csv`,\n            data\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: 'visitors-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.period || 1\"\n                    (ngModelChange)=\"setFilters({ period: $event })\"\n                    placeholder=\"Viewing Period\"\n                >\n                    <mat-option [value]=\"1\">Show Day</mat-option>\n                    <mat-option [value]=\"7\">Show Week</mat-option>\n                    <mat-option [value]=\"30\">Show Month</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class VisitorsTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { Booking } from '@placeos/bookings';\nimport { showMetadata } from '@placeos/ts-client';\nimport { OrganisationService } from '@placeos/organisation';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'guest-listings',\n    template: `\n        <div\n            class=\"w-full flex flex-col flex-1 text-sm h-full overflow-auto pb-20\"\n        >\n            <custom-table\n                class=\"min-w-[80rem]\"\n                [dataSource]=\"guests\"\n                [filter]=\"search | async\"\n                [columns]=\"columns\"\n                [display_column]=\"display_columns\"\n                [column_size]=\"column_sizes\"\n                [template]=\"{\n                    state: state_template,\n                    status: status_template,\n                    date: date_template,\n                    host: host_template,\n                    id_data: id_template,\n                    actions: action_template,\n                    induction: boolean_template\n                }\"\n                [empty]=\"\n                    (search | async)\n                        ? 'No matching visitors'\n                        : 'There are visitors for the currently selected date.'\n                \"\n            ></custom-table>\n        </div>\n        <ng-template #state_template let-row=\"row\">\n            <i\n                *ngIf=\"!row?.checked_in; else checkin_state\"\n                matTooltip=\"Not checked in\"\n                class=\"flex items-center justify-center rounded-full material-icons border-2 border-dashed border-neutral text-xl h-9 w-9\"\n            >\n                close\n            </i>\n            <ng-template #checkin_state>\n                <i\n                    class=\"flex items-center justify-center rounded-full material-icons bg-success border-2 border-neutral text-white text-xl h-9 w-9\"\n                    matTooltip=\"Checked In\"\n                >\n                    done\n                </i>\n            </ng-template>\n        </ng-template>\n        <ng-template #host_template let-row=\"row\">\n            {{ row.extension_data?.host }}\n        </ng-template>\n        <ng-template #vaccinated_template let-row=\"row\">\n            <div customTooltip [content]=\"vaccine_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.vaccination_proof?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.vaccination_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.vaccination_confirmed ===\n                              false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #vaccine_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.vaccination_proof?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] p-2 object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'vaccination_confirmed', true)\"\n                    >\n                        Confirm Vaccination Proof\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'vaccination_confirmed', false)\"\n                    >\n                        Reject Vaccination Proof\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #id_template let-row=\"row\">\n            <div customTooltip [content]=\"id_confirmation\">\n                <button\n                    matRipple\n                    *ngIf=\"row.extension_data?.id_data?.url\"\n                    class=\"bg-success rounded-3xl px-4 py-2 text-white\"\n                >\n                    {{\n                        row.extension_data?.id_confirmed\n                            ? 'Confirmed'\n                            : row.extension_data?.id_confirmed === false\n                            ? 'Rejected'\n                            : 'Submitted'\n                    }}\n                </button>\n            </div>\n            <ng-template #id_confirmation>\n                <div\n                    class=\"bg-base-100 rounded p-2 flex flex-col space-y-2 my-2 w-[20rem]\"\n                >\n                    <img\n                        [src]=\"row.extension_data?.id_data?.url\"\n                        class=\"max-w-[20rem] max-h-[20rem] object-contain\"\n                    />\n                    <button\n                        matRipple\n                        (click)=\"setExt(row, 'id_confirmed', true)\"\n                    >\n                        Confirm ID\n                    </button>\n                    <button\n                        matRipple\n                        class=\"inverse mt-2\"\n                        (click)=\"setExt(row, 'id_confirmed', false)\"\n                    >\n                        Reject ID\n                    </button>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #boolean_template let-row=\"row\">\n            <div\n                *ngIf=\"row.induction\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n            <div\n                *ngIf=\"!row.induction && row.process_state.includes('declined')\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-error text-error-content mx-auto\"\n            >\n                <app-icon>close</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #status_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"rounded-3xl bg-warning text-warning-content border-none\"\n                [class.!text-success-content]=\"row?.status === 'approved'\"\n                [class.!bg-success]=\"row?.status === 'approved'\"\n                [class.!text-error-content]=\"row?.status === 'declined'\"\n                [class.!bg-error]=\"row?.status === 'declined'\"\n                [class.!text-neutral-content]=\"row?.status === 'ended'\"\n                [class.!bg-neutral]=\"row?.status === 'ended'\"\n                [class.opacity-60]=\"row?.status === 'ended'\"\n                [matMenuTriggerFor]=\"menu\"\n                [disabled]=\"row?.status === 'ended'\"\n            >\n                <div class=\"flex items-center\">\n                    <div class=\"mx-2\">\n                        {{\n                            row?.status === 'ended'\n                                ? 'Ended'\n                                : row?.status === 'approved'\n                                ? 'Approved'\n                                : row?.status === 'declined'\n                                ? 'Declined'\n                                : 'Pending'\n                        }}\n                    </div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item (click)=\"approveVisitor(row)\">\n                    Approve Visitor\n                </button>\n                <button mat-menu-item (click)=\"declineVisitor(row)\">\n                    Decline Visitor\n                </button>\n            </mat-menu>\n        </ng-template>\n        <ng-template #date_template let-row=\"row\">\n            {{\n                row.date\n                    | date\n                        : ((filters | async)?.period > 1\n                              ? 'MMM d, ' + time_format\n                              : time_format)\n            }}\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"flex items-center justify-end\">\n                <button\n                    icon\n                    matRipple\n                    [class.pointer-events-none]=\"!row.linked_event\"\n                    [matMenuTriggerFor]=\"checkin_menu\"\n                >\n                    <app-icon\n                        class=\"text-2xl\"\n                        [class.opacity-0]=\"!row.linked_event\"\n                    >\n                        event\n                    </app-icon>\n                </button>\n                <mat-menu #checkin_menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"checkinAllVisitors(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\"\n                                >event_available</app-icon\n                            >\n                            <div>Checkin All for Booking</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"checkoutAllVisitors(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">event_busy</app-icon>\n                            <div>Checkout All for Booking</div>\n                        </div>\n                    </button>\n                </mat-menu>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!row.attachments?.length\"\n                    title=\"\"\n                    matTooltip=\"View Attachments\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon>attachment</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <a\n                        *ngFor=\"let item of row.attachments\"\n                        [href]=\"item.url\"\n                        mat-menu-item\n                        >{{ item.name }}</a\n                    >\n                </mat-menu>\n                <action-icon\n                    remote\n                    [matTooltip]=\"\n                        row.extension_data.remote\n                            ? 'Set as In-Person Visitor'\n                            : 'Set as Remote Visitior'\n                    \"\n                    [loading]=\"loading === 'remote'\"\n                    [content]=\"\n                        row.extension_data.remote ? 'tap_and_play' : 'business'\n                    \"\n                    (click)=\"setExt(row, 'remote', !row.extension_data.remote)\"\n                >\n                </action-icon>\n                <action-icon\n                    checkin\n                    matTooltip=\"Checkin Guest\"\n                    [loading]=\"loading === 'checkin'\"\n                    [state]=\"row?.checked_in ? 'success' : ''\"\n                    content=\"event_available\"\n                    (click)=\"checkin(row)\"\n                >\n                </action-icon>\n                <action-icon\n                    checkout\n                    matTooltip=\"Checkout Guest\"\n                    [loading]=\"loading === 'checkout'\"\n                    content=\"event_busy\"\n                    (click)=\"checkout(row)\"\n                >\n                </action-icon>\n                <a\n                    [href]=\"'mailto:' + row?.asset_id\"\n                    icon\n                    matRipple\n                    [matTooltip]=\"\n                        row?.user_email === row?.asset_id\n                            ? 'Email Host'\n                            : 'Email Guest'\n                    \"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <action-icon\n                    matTooltip=\"Print QR Code\"\n                    [loading]=\"loading === 'printing'\"\n                    content=\"event_busy\"\n                    (click)=\"printQRCode()\"\n                    [class.invisible]=\"!can_print\"\n                >\n                </action-icon>\n            </div>\n        </ng-template>\n        <button\n            class=\"bg-secondary hover:shadow-lg shadow absolute bottom-4 right-4 text-white h-12 w-12\"\n            matTooltip=\"Download Visitor List\"\n            matTooltipPosition=\"left\"\n            icon\n            matRipple\n            *ngIf=\"(guests | async)?.length\"\n            (click)=\"downloadVisitorList()\"\n        >\n            <app-icon>download</app-icon>\n        </button>\n    `,\n    styles: [``],\n})\nexport class GuestListingComponent extends AsyncHandler {\n    public readonly guests = this._state.filtered_bookings.pipe(\n        tap((_: any) => console.log(_))\n    );\n    public readonly search = this._state.search;\n    public readonly filters = this._state.filters;\n    private _inductions_enabled = false;\n\n    public readonly downloadVisitorList = () =>\n        this._state.downloadVisitorsList();\n\n    public readonly approveVisitor = (u) => this._state.approveVisitor(u);\n    public readonly declineVisitor = (u) => this._state.declineVisitor(u);\n    public readonly checkinAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, true);\n    public readonly checkoutAllVisitors = (u) =>\n        this._state.setCheckinStateForEvent(u.linked_event?.id, false);\n    public readonly setExt = (u, f, v) => this._state.setExt(u, f, v);\n\n    public readonly checkin = async (item: Booking) => {\n        await this._state.setCheckinState(item, true);\n        this._state.poll();\n    };\n\n    public readonly checkout = async (item: Booking) => {\n        await this._state.setCheckinState(item, false);\n        this._state.poll();\n    };\n\n    public get columns() {\n        return this._inductions_enabled\n            ? [\n                  'state',\n                  'date',\n                  'asset_name',\n                  'user_name',\n                  'asset_id',\n                  'status',\n                  'induction',\n                  'actions',\n              ]\n            : [\n                  'state',\n                  'date',\n                  'asset_name',\n                  'user_name',\n                  'asset_id',\n                  'status',\n                  'actions',\n              ];\n    }\n\n    public get display_columns() {\n        const fields = {\n            state: ' ',\n            date: 'Time',\n            asset_name: 'Person',\n            user_name: 'Host',\n            asset_id: 'Email',\n            id_data: 'ID',\n            status: 'State',\n            induction: 'Inducted',\n            actions: ' ',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get column_sizes() {\n        const fields = {\n            state: '3.5r',\n            date: '8r',\n            asset_name: '12r',\n            user_name: '12r',\n            asset_id: 'flex',\n            id_data: '8r',\n            status: '10r',\n            actions: '16r',\n            induction: '5r',\n        };\n        return this.columns.map((_) => fields[_] || _);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld) => {\n                if (!bld) return;\n                const visitor_kiosk_app =\n                    this._settings.get('app.visitor_kiosk_app') ||\n                    'visitor-kiosk_app';\n                const metadata: any = await showMetadata(\n                    bld.id,\n                    visitor_kiosk_app\n                ).toPromise();\n                this._inductions_enabled =\n                    metadata.details?.induction_enabled &&\n                    metadata.details?.induction_details;\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\n\n@Component({\n    selector: '[app-visitors]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col bg-base-200\">\n            <visitors-topbar class=\"w-full\"></visitors-topbar>\n            <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class VisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n\n    constructor(private _state: VisitorsStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'invite-visitor-modal',\n    template: `\n        <main class=\"relative min-w-[40rem] min-h-[40rem]\">\n            <invite-visitor-form (done)=\"onDone()\"></invite-visitor-form>\n        </main>\n    `,\n    styles: [``],\n})\nexport class InviteVisitorModalComponent {\n    constructor(\n        private _dialog_ref: MatDialogRef<InviteVisitorModalComponent>\n    ) {}\n\n    public onDone() {\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { VisitorsStateService } from './visitors-state.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\n\n@Component({\n    selector: '[app-new-visitors]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center p-4 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Visitors</h2>\n                    <div class=\"flex-1 w-2\"></div>\n                    <date-options (dateChange)=\"setDate($event)\"></date-options>\n                    <button btn matRipple (click)=\"inviteVisitor()\">\n                        Invite Visitor\n                    </button>\n                </div>\n                <div class=\"flex items-center px-4 pb-4\">\n                    <mat-form-field appearance=\"outline\" class=\"no-subscript\">\n                        <mat-select\n                            multiple\n                            [(ngModel)]=\"zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"flex-1 w-2\"></div>\n                    <searchbar (modelChange)=\"setSearch($event)\"></searchbar>\n                </div>\n                <guest-listings class=\"w-full flex-1 h-0\"></guest-listings>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewVisitorsComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public readonly filters = this._state.filters;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: VisitorsStateService,\n        private _org: OrganisationService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog\n    ) {}\n\n    public inviteVisitor() {\n        this._dialog.open(InviteVisitorModalComponent);\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { VisitorsComponent } from './visitors.component';\nimport { VisitorsTopbarComponent } from './visitors-topbar.component';\nimport { GuestListingComponent } from './guest-listing.component';\nimport { NewVisitorsComponent } from './new-visitors.component';\nimport { InviteVisitorModalComponent } from './invite-visitor-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\n\nconst ROUTES: Route[] = [\n    { path: '', component: VisitorsComponent },\n    { path: 'new', component: NewVisitorsComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewVisitorsComponent,\n        VisitorsComponent,\n        VisitorsTopbarComponent,\n        GuestListingComponent,\n        InviteVisitorModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedBookingsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class VisitorsModule {}\n\n/**\nzone_ids: zone-EmWVhHG3Bhz\nperiod_start: 1604926800\nperiod_end: 1605013199\n\nperiod_start: 1605013200\nperiod_end: 1605099599\nzones: zone-EmWVhHG3Bhz\n\n*/\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}