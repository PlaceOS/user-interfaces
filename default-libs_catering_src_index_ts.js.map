{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"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","names":["i0","$event","i_r2","_r1","index","ctx_r2","charge_codes","removeCode","ChargeCodeListModalComponent_main_6_div_1_Template","trackByFn","_r4","addCodesFromFile","newCode","saveChargeCodes","ChargeCodeListModalComponent","constructor","_state","_dialog_ref","this","loading","ngOnInit","_this","_asyncToGenerator","pipe","take","toPromise","push","splice","event","target","file","files","reader","FileReader","readAsText","addEventListener","evt","list","csvToJson","srcElement","result","code","unique","value","_","notifyError","_this2","cleaned_codes","filter","trim","saveSettings","close","idx","item","static","__ngFactoryType__","i1","i2","core","VBU","selectors","decls","vars","consts","template","rf","ctx","ChargeCodeListModalComponent_main_6_Template","ChargeCodeListModalComponent_footer_7_Template","ChargeCodeListModalComponent_ng_template_8_Template","load_state_r5","SharedCateringModule","$C","G2t","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","MatProgressSpinnerModule","MatProgressBarModule","ctx_r1","handleFileEvent","downloadTemplate","CateringImportMenuModalComponent","EventEmitter","element","length","fileReader","e","data","emit","reason","metadata","type","toLowerCase","map","i","CateringItem","options","tags","id","name","group","category","multiple","unit_price","downloadFile","_angular_core__WEBPACK_IMPORTED_MODULE_1__","outputs","CateringImportMenuModalComponent_button_3_Template","CateringImportMenuModalComponent_main_4_Template","CateringImportMenuModalComponent_ng_template_5_Template","load_state_r3","form","controls","invalid","touched","auto_r3","item_r6","_r5","$implicit","removeTag","CateringItemModalComponent_form_4_div_4_mat_chip_row_6_Template","addTag","tag_list","chipList_r7","separators","CateringItemModalComponent_form_4_div_2_Template","CateringItemModalComponent_form_4_div_3_Template","CateringItemModalComponent_form_4_div_4_Template","CateringItemModalComponent_form_4_div_5_Template","CateringItemModalComponent_form_4_div_6_Template","CateringItemModalComponent_form_4_div_27_Template","description","tmp_9_0","get","hasTag","_c0","renderPercent","images","_r8","saveChanges","dirty","option_r9","CateringItemModalComponent","_data","categories","tag","includes","FormGroup","FormControl","Validators","required","accept_points","discount_cap","ENTER","COMMA","SPACE","markAsDirty","input","setValue","existing_tag","indexOf","randomInt","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_3__","i18n_0","$localize","CateringItemModalComponent_button_3_Template","CateringItemModalComponent_form_4_Template","CateringItemModalComponent_footer_5_Template","CateringItemModalComponent_ng_template_6_Template","CateringItemModalComponent_mat_option_10_Template","load_state_r10","row_r2","row","setEnabled","isEnabled","data_r4","symbol","row_r6","addOption","editItem","removeItem","show_children","can_edit","menu_r7","row_r10","editOption","_r11","removeOption","CateringMenuComponent_ng_template_7_div_0_button_7_Template","CateringMenuComponent_ng_template_7_div_0_button_8_Template","CateringMenuComponent_ng_template_7_div_0_Template","CateringMenuComponent","filters","_orders","_catering","is_editable","menu","option","deleteOption","addItem","deleteItem","hide_for_zones","zone","state","updateItem","_angular_core__WEBPACK_IMPORTED_MODULE_4__","CateringMenuComponent_ng_template_1_Template","CateringMenuComponent_ng_template_3_Template","CateringMenuComponent_ng_template_5_Template","CateringMenuComponent_ng_template_7_Template","_c5","active_template_r12","_c1","_c2","_c3","price_template_r13","_c4","actions_template_r14","search","child_template_r15","ctx_r0","auto_r2","CateringItemOptionModalComponent_form_4_div_1_Template","CateringItemOptionModalComponent_form_4_div_2_Template","CateringItemOptionModalComponent_form_4_div_3_Template","CateringItemOptionModalComponent_form_4_div_4_Template","_r3","option_r4","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringItemOptionModalComponent_button_3_Template","CateringItemOptionModalComponent_form_4_Template","CateringItemOptionModalComponent_footer_5_Template","CateringItemOptionModalComponent_ng_template_6_Template","CateringItemOptionModalComponent_mat_option_10_Template","opt_r3","CateringOrderItemComponent_ng_container_0_ng_container_14_div_1_Template","toggle","CateringOrderItemComponent_ng_container_0_ng_container_14_Template","active","amount","quantity","option_list","ACTIVE_ITEMS","Set","CateringOrderItemComponent","item_key","order_id","has","delete","add","_angular_core__WEBPACK_IMPORTED_MODULE_0__","inputs","attrs","CateringOrderItemComponent_ng_container_0_Template","data_r1","time_format","date","date_end","CateringOrderListComponent_ng_template_8_span_2_Template","space","display_name","CateringOrderListComponent_ng_template_10_span_3_Template","data_r5","organiser","host","email","status_r7","_r6","row_r8","updateStatus","colour","CateringOrderListComponent_ng_template_12_button_8_Template","tmp_11_0","status","data_r9","menu_r10","tmp_13_0","statuses","row_r12","notes","CateringOrderListComponent_ng_template_14_ng_template_4_Template","notes_template_r13","row_r15","item_r14","CateringOrderListComponent_ng_template_16_ul_0_li_1_Template","items","CateringOrderListComponent_ng_template_16_ul_0_Template","CateringOrderListComponent","AsyncHandler","_settings","CATERING_STATUSES","find","super","order_list","filtered","_ref","order","s","timeout","_x","_x2","apply","arguments","startPolling","ngOnDestroy","stopPolling","undefined","_angular_core__WEBPACK_IMPORTED_MODULE_6__","features","CateringOrderListComponent_ng_template_4_Template","CateringOrderListComponent_ng_template_6_Template","CateringOrderListComponent_ng_template_8_Template","CateringOrderListComponent_ng_template_10_Template","CateringOrderListComponent_ng_template_12_Template","CateringOrderListComponent_ng_template_14_Template","CateringOrderListComponent_ng_template_16_Template","_c8","state_template_r16","time_template_r17","location_template_r18","host_template_r19","_c6","status_template_r20","_c7","actions_template_r21","child_template_r22","item_r2","updateItemQuantity","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_4_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_a_counter_8_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_9_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_Template","cat_r5","menu_items","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_Template","CateringOrderModalComponent_div_0_ng_container_1_Template","show_order_details","order_details_r6","_r7","item_count","saveOrder","CateringOrderModalComponent_footer_1_ng_container_1_Template","CateringOrderModalComponent_footer_1_ng_template_2_Template","order_actions_r9","optionsFor","item_r11","CateringOrderModalComponent_ng_template_4_div_4_div_4_Template","_r10","total_cost","CateringOrderModalComponent_ng_template_4_div_4_Template","CateringOrderModalComponent","_org","currency_code","CateringOrder","rules","getCateringConfig","level","parent_id","subscribe","cat","cateringItemAvailable","updateMenuQuantities","choose_options","old_item","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","sort","a","b","localeCompare","join","confirmOrder","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringOrderModalComponent_div_0_Template","CateringOrderModalComponent_footer_1_Template","CateringOrderModalComponent_ng_template_2_Template","CateringOrderModalComponent_ng_template_4_Template","load_state_r12","opt_r4","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_div_4_Template","group_r2","updateGroupOption","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_Template","opt_r6","option_state","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_div_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_Template","CateringOrderOptionsModalComponent_div_7_ng_container_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_Template","multi_options_r7","CateringOrderOptionsModalComponent","groups","group_list","saveOptions","CateringOrderOptionsModalComponent_div_7_Template","CateringOrdersService","_filters","getValue","next","_poll","BehaviorSubject","_loading","orders","combineLatest","debounceTime","switchMap","zones","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","catchError","of","events","flatten","valid_catering","format","deliver_at","tap","shareReplay","asObservable","checkOrder","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","extension_data","CalendarEvent","system_id","resources","system","booking","updateEventMetadata","_angular_core__WEBPACK_IMPORTED_MODULE_18__","jDH","factory","ɵfac","providedIn","CateringStateService","building","_menu","_dialog","_updated","_currency","_change","currency","settings","active_building","showMetadata","details","post","require_notes","availability","disabled_rooms","bld","getCateringForZone","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","_this3","findIndex","updateMenu","_this4","_this5","_this6","openConfirmModal","title","content","icon","class","_this7","editConfig","_this8","config","AttachedResourceConfigModalComponent","saveNotes","updateConfig","importMenu","_this9","updated_menu","catch","notifySuccess","zone_id","updateMetadata","_this10","old_settings","Array","addItemToOrder","match","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/charge-code-list-modal.component.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.vars.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-neutral px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-base-200 border-dashed rounded-xl hover:bg-base-200 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-base-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\nimport { CateringItem } from './catering-item.class';\nimport { unique } from '@placeos/common';\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <simple-table\n            class=\"w-full min-w-[32rem] block text-sm\"\n            [data]=\"menu\"\n            [columns]=\"[\n                {\n                    key: 'active',\n                    name: ' ',\n                    content: active_template,\n                    size: '3.5rem',\n                    sortable: false\n                },\n                { key: 'name', name: 'Name' },\n                { key: 'category', name: 'Category' },\n                {\n                    key: 'unit_price',\n                    name: 'Price',\n                    content: price_template,\n                    size: '6rem'\n                },\n                {\n                    key: 'actions',\n                    name: ' ',\n                    content: actions_template,\n                    size: '6.5rem',\n                    sortable: false\n                }\n            ]\"\n            [filter]=\"filters?.search\"\n            [show_children]=\"show_children\"\n            [child_template]=\"child_template\"\n            [sortable]=\"true\"\n            empty_message=\"No Items in Menu\"\n        ></simple-table>\n        <ng-template #active_template let-row=\"row\">\n            <mat-checkbox\n                class=\"mx-auto\"\n                matTooltip=\"Allow Ordering Item for this zone\"\n                matTooltipPosition=\"right\"\n                [ngModel]=\"isEnabled(row)\"\n                (ngModelChange)=\"setEnabled(row, $event)\"\n            ></mat-checkbox>\n        </ng-template>\n        <ng-template #price_template let-data=\"data\">\n            <div\n                class=\"px-2 py-1 font-mono text-xs flex items-center mx-auto bg-secondary text-secondary-content rounded\"\n            >\n                {{ data / 100 | currency: (symbol | async) }}\n            </div>\n        </ng-template>\n        <ng-template #actions_template let-row=\"row\">\n            <div class=\"p-2 flex items-center mx-auto space-x-2\">\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!can_edit\"\n                    [class.opacity-0]=\"!can_edit\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button\n                        mat-menu-item\n                        class=\"flex items-center\"\n                        (click)=\"addOption(row)\"\n                    >\n                        <div class=\"flex items-center space-x-2 pr-2\">\n                            <app-icon>add</app-icon>\n                            <div>Add Option</div>\n                        </div>\n                    </button>\n                    <button\n                        mat-menu-item\n                        class=\"flex items-center\"\n                        (click)=\"editItem(row)\"\n                    >\n                        <div class=\"flex items-center space-x-2 pr-2\">\n                            <app-icon>edit</app-icon>\n                            <div>Edit Item</div>\n                        </div>\n                    </button>\n                    <button\n                        mat-menu-item\n                        class=\"flex items-center\"\n                        (click)=\"removeItem(row)\"\n                    >\n                        <div class=\"flex items-center space-x-2 pr-2\">\n                            <app-icon class=\"text-error\">delete</app-icon>\n                            <div>Remove Item</div>\n                        </div>\n                    </button>\n                </mat-menu>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!row.options?.length\"\n                    [matTooltip]=\"\n                        row.options?.length\n                            ? (show_children[row.id] ? 'Hide' : 'Show') +\n                              ' Menu Item Options'\n                            : ''\n                    \"\n                    (click)=\"show_children[row.id] = !show_children[row.id]\"\n                >\n                    <app-icon>\n                        {{\n                            show_children[row.id]\n                                ? 'keyboard_arrow_down'\n                                : 'chevron_right'\n                        }}\n                    </app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <ng-template #child_template let-row=\"row\">\n            <div\n                class=\"flex p-2 items-center border-b border-solid border-base-200 relative space-x-2\"\n                *ngFor=\"let option of row.options\"\n            >\n                <div\n                    class=\"absolute inset-y-0 left-0 w-2 bg-black opacity-10\"\n                ></div>\n                <div class=\"flex-1 pl-4 pr-2\">\n                    <div class=\"text\">{{ option.name }}</div>\n                    <div class=\"text-xs opacity-60\">\n                        {{ option.group }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    matTooltip=\"Edit Menu Item Option\"\n                    (click)=\"editOption(row, option)\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    class=\"!mr-1\"\n                    matTooltip=\"Remove Menu Item Option\"\n                    (click)=\"removeOption(row, option)\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon class=\"text-error\">delete</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    public show_children: Record<string, boolean> = {};\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n\n    public readonly addOption = (item) => this._catering.addOption(item);\n\n    public readonly editOption = (item, option) =>\n        this._catering.addOption(item, option);\n\n    public readonly removeOption = (item, option) =>\n        this._catering.deleteOption(item, option);\n\n    public readonly editItem = (item) => this._catering.addItem(item);\n\n    public readonly removeItem = (item) => this._catering.deleteItem(item);\n\n    public get filters() {\n        return this._orders.filters;\n    }\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(\n        private _catering: CateringStateService,\n        private _orders: CateringOrdersService\n    ) {}\n\n    public isEnabled(item: CateringItem) {\n        return !item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public setEnabled(item: CateringItem, state: boolean) {\n        let list = item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...item, hide_for_zones: list })\n        );\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\nconst ACTIVE_ITEMS = new Set<string>();\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-16 text-right h-14 relative\">\n                <div\n                    arm\n                    class=\"border-b-2 border-l-2 border-base-200 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full -translate-x-px\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border-2 border-base-200 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"toggle()\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 items-center border-b border-base-200 border-solid py-4 space-x-4\"\n            >\n                <div class=\"\">\n                    <div\n                        class=\"p-1 rounded-full bg-base-300 w-10 h-10 flex items-center justify-center font-mono text-sm\"\n                    >\n                        {{ item?.amount || item?.quantity || 1 }}×\n                    </div>\n                </div>\n                <div class=\"flex-1\">{{ item?.name }}</div>\n                <div class=\"flex space-x-2 mr-2 px-4\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-warning text-warning-content rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public order_id: string;\n    @Input() public item: CateringItem;\n\n    public active = false;\n\n    public get item_key() {\n        return `${this.order_id}|${this.item?.id}`;\n    }\n\n    public ngOnInit() {\n        this.active = ACTIVE_ITEMS.has(this.item_key);\n    }\n\n    public toggle() {\n        if (ACTIVE_ITEMS.has(this.item_key)) {\n            ACTIVE_ITEMS.delete(this.item_key);\n            this.active = false;\n        } else {\n            ACTIVE_ITEMS.add(this.item_key);\n            this.active = true;\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div class=\"flex flex-col h-full w-full overflow-auto\">\n            <mat-progress-bar\n                [class.opacity-0]=\"!(loading | async)\"\n                class=\"sticky top-0 left-0 w-full\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n            <simple-table\n                class=\"min-w-[72rem] w-full block text-sm\"\n                [data]=\"order_list\"\n                [columns]=\"[\n                    {\n                        key: 'state',\n                        name: ' ',\n                        size: '4rem',\n                        sortable: false,\n                        content: state_template,\n                    },\n                    {\n                        key: 'deliver_at',\n                        name: 'Time',\n                        content: time_template,\n                    },\n                    {\n                        key: 'event',\n                        name: 'Location',\n                        content: location_template,\n                        sortable: false,\n                    },\n                    {\n                        key: 'event',\n                        name: 'Host',\n                        content: host_template,\n                        sortable: false,\n                    },\n                    { key: 'charge_code', name: 'Charge Code' },\n                    {\n                        key: 'invoice_number',\n                        name: 'Invoice No.',\n                        empty: 'No Invoice',\n                    },\n                    {\n                        key: 'status',\n                        name: 'Status',\n                        content: status_template,\n                        size: '11rem',\n                    },\n                    {\n                        key: 'actions',\n                        name: ' ',\n                        size: '6.5rem',\n                        content: actions_template,\n                        sortable: false,\n                    },\n                ]\"\n                [sortable]=\"true\"\n                [show_children]=\"show_children\"\n                [child_template]=\"child_template\"\n                empty_message=\"No Catering Orders\"\n            >\n            </simple-table>\n            <ng-template #state_template let-data=\"data\">\n                <div class=\"p-2\">\n                    <div\n                        class=\"rounded-full bg-base-200 p-2 text-2xl flex items-center justify-center\"\n                    >\n                        <app-icon>room_service</app-icon>\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #time_template let-data=\"data\" let-row=\"row\">\n                <div class=\"p-4\">\n                    <div>Deliver at {{ data | date: time_format }}</div>\n                    <div class=\"text-xs opacity-30\">\n                        {{ row?.event?.date | date: 'MMM d' }},\n                        {{ row?.event?.date | date: time_format }}\n                        -\n                        {{ row?.event?.date_end | date: 'MMM d' }},\n                        {{ row?.event?.date_end | date: time_format }}\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #location_template let-data=\"data\">\n                <div class=\"px-4 py-2\">\n                    {{ data?.space?.display_name || data?.space?.name || '' }}\n                    <span\n                        class=\"opacity-30\"\n                        *ngIf=\"\n                            !(data?.space?.display_name || data?.space?.name)\n                        \"\n                    >\n                        No Location\n                    </span>\n                </div>\n            </ng-template>\n            <ng-template #host_template let-data=\"data\">\n                <div class=\"px-4 py-2\">\n                    <div>\n                        {{ data?.organiser?.name || data?.host || '' }}\n                        <span\n                            class=\"opacity-30\"\n                            *ngIf=\"!(data?.organiser?.name || data?.host)\"\n                        >\n                            Unknown Host\n                        </span>\n                    </div>\n                    <div class=\"text-xs opacity-30\">\n                        {{ data?.organiser?.email || data?.host }}\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #status_template let-row=\"row\" let-data=\"data\">\n                <div class=\"px-4 py-2\">\n                    <button\n                        status\n                        matRipple\n                        class=\"rounded-3xl text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                        [style.background]=\"status(data)?.colour\"\n                        [matMenuTriggerFor]=\"menu\"\n                    >\n                        <div class=\"flex text-center capitalize mx-2\">\n                            {{ status(data)?.name }}\n                        </div>\n                        <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                    </button>\n                </div>\n                <mat-menu #menu=\"matMenu\">\n                    <button\n                        mat-menu-item\n                        *ngFor=\"let status of statuses\"\n                        class=\"flex items-center\"\n                        (click)=\"updateStatus(row, status.id)\"\n                    >\n                        <div class=\"flex items-center space-x-2\">\n                            <div\n                                class=\"rounded-full h-4 w-4 mr-2\"\n                                [style.background-color]=\"status.colour\"\n                            ></div>\n                            <span class=\"mr-2 w-20\">{{ status.name }}</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n            <ng-template #actions_template let-row=\"row\">\n                <div class=\"flex items-center space-x-2 p-2 mx-auto\">\n                    <button\n                        icon\n                        matRipple\n                        customTooltip\n                        [hover]=\"true\"\n                        xPosition=\"end\"\n                        yPosition=\"top\"\n                        [content]=\"notes_template\"\n                        [disabled]=\"!row.notes\"\n                    >\n                        <app-icon>description</app-icon>\n                    </button>\n                    <ng-template #notes_template>\n                        <div\n                            class=\"p-2 rounded-lg bg-base-100 text-base-content max-w-[32rem] min-w-[8rem] shadow border border-base-200\"\n                        >\n                            <div class=\"mb-2\">Notes</div>\n                            <p class=\"text-sm px-4 py-2 bg-base-200 rounded\">\n                                {{ row.notes }}\n                            </p>\n                        </div>\n                    </ng-template>\n                    <button\n                        icon\n                        matRipple\n                        (click)=\"show_children[row.id] = !show_children[row.id]\"\n                    >\n                        <app-icon>\n                            {{\n                                show_children[row.id]\n                                    ? 'keyboard_arrow_down'\n                                    : 'chevron_right'\n                            }}\n                        </app-icon>\n                    </button>\n                </div>\n            </ng-template>\n            <ng-template #child_template let-row=\"row\">\n                <ul\n                    *ngIf=\"row?.items.length\"\n                    class=\"list-none p-0 m-0 w-full relative z-0\"\n                >\n                    <li\n                        catering-order-item\n                        class=\"flex items-center\"\n                        *ngFor=\"let item of row.items; let i = index\"\n                        [order_id]=\"row?.id\"\n                        [item]=\"item\"\n                    ></li>\n                </ul>\n            </ng-template>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent extends AsyncHandler {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    public readonly statuses = CATERING_STATUSES;\n    public readonly show_children: Record<string, boolean> = {};\n\n    public readonly updateStatus = async (order, s) => {\n        await this._orders.updateStatus(order, s);\n        this.timeout('status-change', () => ((order as any).status = s));\n    };\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    public status(value: string) {\n        return CATERING_STATUSES.find((i) => i.id === value);\n    }\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\nimport { AttachedResourceRuleset } from '@placeos/components';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<AttachedResourceRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-base-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-base-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-base-200\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--s);\n                border-bottom: 2px solid var(--s);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly AttachedResourceRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-base-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    map,\n    switchMap,\n    debounceTime,\n    tap,\n    shareReplay,\n    catchError,\n} from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime, format } from 'date-fns';\n\nimport { AsyncHandler, currentUser, flatten } from '@placeos/common';\nimport {\n    queryEvents,\n    saveEvent,\n    updateEventMetadata,\n} from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            }).pipe(\n                catchError(() => of([])),\n                map((events) =>\n                    flatten(\n                        events.map((event) =>\n                            event.valid_catering.map(\n                                (o) => new CateringOrder({ ...o, event })\n                            )\n                        )\n                    )\n                ),\n                map((orders) =>\n                    orders.filter(\n                        (o) =>\n                            format(o.deliver_at, 'yyyy-MM-dd') ===\n                            format(start * 1000, 'yyyy-MM-dd')\n                    )\n                )\n            );\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list\n                .filter((order) => checkOrder(order, this._filters.getValue()))\n                .sort((a, b) => a.deliver_at - b.deliver_at)\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        order.status = status;\n        const updated_order = new CateringOrder({\n            ...order,\n            status,\n            event: null,\n        });\n        const catering = [\n            ...(order.event.extension_data.catering || []).filter(\n                (o) => o.id !== order.id\n            ),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const system_id = event?.resources[0]?.id || event?.system?.id;\n        const booking = await updateEventMetadata(\n            event.id,\n            system_id,\n            event.extension_data\n        ).toPromise();\n        this.timeout('refresh-list', () => this._poll.next(Date.now()), 1000);\n        (order as any).status = status;\n        return booking;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    AttachedResourceConfigModalComponent,\n    AttachedResourceRuleset,\n    AttachedResourceConfigModalData,\n} from '@placeos/components';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n\n    private _change = new BehaviorSubject(0);\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_),\n        switchMap(([_]) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            AttachedResourceConfigModalComponent,\n            AttachedResourceConfigModalData\n        >(AttachedResourceConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        const result = await updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n        this._change.next(Date.now());\n        return result;\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<AttachedResourceRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: AttachedResourceRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"x_google_ignoreList":[]}