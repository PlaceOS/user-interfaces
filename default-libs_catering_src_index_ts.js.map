{"version":3,"sources":["./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering.vars.ts"],"names":["SharedCateringModule","CateringConfigModalComponent","_data","event","loading","rule_types","this","rulesets","config","map","set","rules","i","JSON","stringify","Math","floor","random","value","parse","e","emit","reason","metadata","saveChanges","CateringImportMenuModalComponent","element","target","files","length","file","fileReader","FileReader","addEventListener","data","result","filter","_","type","toLowerCase","options","tags","id","name","group","category","multiple","unit_price","readAsText","CateringItemModalComponent","form","item","description","accept_points","discount_cap","separators","categories","controls","markAsDirty","input","tag_list","trim","push","setValue","existing_tag","index","indexOf","splice","CateringMenuItemComponent","_catering","show_options","addOption","editOption","option","removeOption","deleteOption","editItem","addItem","removeItem","deleteItem","currency","CateringMenuComponent","menu","shown_tab","tab_menu","pipe","menu_map","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringOrderItemComponent","active","CateringOrderListComponent","_orders","order_list","filtered","startPolling","stopPolling","order","undefined","cateringItemAvailable","is_available","rule","includes","space","zones","matches","condition","date","Date","duration","ext","CateringOrderModalComponent","super","menu_items","getCateringConfig","level","parent_id","subscribe","list","cat","updateMenuQuantities","timeout","choose_options","old_item","items","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","quantity","amount","sort","a","b","localeCompare","join","show_order_details","CateringOrderOptionsModalComponent","option_state","groups","group_list","saveOptions","CateringOrderComponent","show_items","statuses","updateStatus","s","status","CateringOrdersService","_poll","_loading","_filters","orders","filters","next","start","now","end","zone_ids","period_start","period_end","events","asObservable","search","checkOrder","getValue","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","CateringStateService","_org","_dialog","_menu","_currency","active_building","bld","getCateringForZone","ref","open","details","Promise","race","componentInstance","toPromise","afterClosed","close","findIndex","updateMenu","building","title","content","icon","class","updateConfig","updated_menu","catch","zone_id","Array","match","RULE_TYPES","CATERING_STATUSES","colour"],"mappings":"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","file":"default-libs_catering_src_index_ts.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n            <div class=\"flex items-center p-2 flex-1\">\n                <div class=\"flex-1\">\n                    <div>{{ item.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">\n                        {{ item.category }}\n                    </div>\n                </div>\n                <div\n                    class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                >\n                    {{ item.unit_price / 100 | currency: (symbol | async) }}\n                </div>\n            </div>\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                <app-icon>more_vert</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                [disabled]=\"!item.options.length\"\n                (click)=\"show_options = !show_options\"\n            >\n                <app-icon>expand_more</app-icon>\n            </button>\n        </div>\n        <div\n            options\n            *ngIf=\"item\"\n            class=\"bg-gray-100 overflow-hidden\"\n            [style.height]=\"\n                show_options ? item.options.length * 3.5 + 'rem' : '0'\n            \"\n        >\n            <div\n                class=\"flex p-2 items-center border-none border-t border-solid border-gray-300\"\n                *ngFor=\"let option of item.options\"\n            >\n                <div class=\"flex-1 px-2\">\n                    <div class=\"text\">{{ option.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">{{ option.group }}</div>\n                </div>\n                <button\n                    edit\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"editOption(option)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    remove\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"removeOption(option)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </div>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"addOption()\"\n            >\n                <app-icon>add</app-icon>\n                <div class=\"ml-2\">Add Option</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"editItem()\"\n            >\n                <app-icon>edit</app-icon>\n                <div class=\"ml-2\">Edit Item</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"removeItem()\"\n            >\n                <app-icon>delete</app-icon>\n                <div class=\"ml-2\">Remove Item</div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                background-color: #fff;\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n                overflow: hidden;\n                width: 768px;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab *ngFor=\"let group of categories\" [label]=\"group\">\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <div class=\"w-20 text-right\">\n            <div name=\"item-bar\" class=\"bg-gray-300\"></div>\n        </div>\n        <div class=\"w-12 mr-4\">\n            <button\n                mat-icon-button\n                class=\"border border-gray-300 border-dashed text-2xl text-dark-fade\"\n                [class.bg-success]=\"active\"\n                [class.text-white]=\"active\"\n                [class.border-solid]=\"active\"\n            >\n                <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n            </button>\n        </div>\n        <div class=\"flex-1 border-b border-gray-300 border-solid py-4\">\n            {{ item?.name }}\n        </div>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n\n            [name='item-bar'] {\n                height: 2px;\n                margin-left: auto;\n                margin-right: 1rem;\n                width: calc(50% - 0.9375rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public item: CateringItem;\n\n    public active = false;\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-24\">Charge Code</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block text-dark-fade\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 bg-gray-100\"\n            [class.shown]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div class=\"w-20 flex items-center justify-center\">\n                <div\n                    class=\"rounded-full bg-gray-300  p-2 text-2xl text-dark-fade flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div class=\"w-24\">{{ order.deliver_at | date: 'shortTime' }}</div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-24\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button mat-icon-button (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <div\n                name=\"bar\"\n                class=\"absolute top-0 bg-gray-300\"\n                [style.height]=\"3.125 * order.items.length - 1 + 'rem'\"\n            ></div>\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            .shown {\n                background-color: #eee;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = (s) =>\n        this._orders.updateStatus(this.order, s);\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    constructor(private _orders: CateringOrdersService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends BaseClass {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(filters.date || Date.now()));\n            const end = getUnixTime(endOfDay(filters.date || Date.now()));\n            return queryEvents({\n                zone_ids: (filters.zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list.filter((order) => checkOrder(order, this._filters.getValue()))\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public updateStatus(order: CateringOrder, status: CateringOrderStatus) {\n        const updated_order = new CateringOrder({ ...order, status });\n        const event = new CalendarEvent({\n            ...order.event,\n            catering: [\n                ...order.event.ext('catering').filter((o) => o.id !== order.id),\n                updated_order,\n            ].map((i) => new CateringOrder({ ...i })),\n        });\n        return saveEvent(event);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, 'catering').toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"sourceRoot":"webpack:///"}