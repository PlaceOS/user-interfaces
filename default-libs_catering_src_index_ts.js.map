{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"kYASYA,MAAA,aAAAA,CAA+C,cACjCA,MAAA,WAAKA,mDAGvBA,MAAA,SAAAA,CAAwC,UAAxCA,CAAwC,gBAILA,MAAA,YAAMA,QACjCA,MAAA,OAAGA,MAAA,iDAA2CA,QAC9CA,MAAA,aAGIA,MAAA,kBAAAC,GAAAD,MAAAE,GAAA,MAAAC,EAAAH,QAAA,OAAUA,MAAAG,EAAAC,gBAAAH,GAAuB,GAHrCD,UAMJA,MAAA,UAAAA,CAAwD,cAIhDA,MAAA,mBAAAA,MAAAE,GAAA,MAAAG,EAAAL,QAAA,OAASA,MAAAK,EAAAC,mBAAkB,GAE3BN,MAAA,yBACJA,WAAS,2BAIbA,MAAA,aAGIA,MAAA,oBACAA,MAAA,OAAGA,MAAA,GAAaA,gCAAbA,MAAA,GAAAA,MAAAO,EAAAC,QAAA,MAMNC,EAAgC,MA1C7C,MA0CaA,EA1CbC,cA2CqBC,KAAAC,MAAQ,IAAIC,MAItBT,gBAAgBQ,GACnBD,KAAKH,QAAU,0BACf,MAAMM,EAA4BF,EAAMG,OACxC,IAAKD,GAASE,MAAO,OAAQL,KAAKH,QAAU,GAC5C,MAAMQ,EAAkBF,EAAQE,MAChC,IAAKA,EAAMC,OAAQ,OAAQN,KAAKH,QAAU,GAC1C,MAAMU,EAAOF,EAAM,GACbG,EAAa,IAAIC,WACvBD,EAAWE,iBAAiB,UAAYC,IACpC,MACMC,KAAOC,MADIF,EAAEP,OAAOU,QAE1Bd,KAAKH,QAAU,GACfG,KAAKC,MAAMc,KAAK,CACZC,OAAQ,OACRC,SAAUL,EACLM,OAAQC,GAAuC,UAAhCA,EAAEC,MAAQ,IAAIC,eAC7BC,IACIC,GACG,IAAIC,IAAa,IACVD,EACHE,QAASb,EACJM,OACIC,GAEO,YADHA,EAAEC,MAAQ,IAAIC,eACCF,EAAEO,OAASH,EAAEI,IAEpCL,IAAKH,KACFQ,GAAIR,EAAEQ,GACNC,KAAMT,EAAES,KACRC,MAAOV,EAAEW,SACTC,SAAUZ,EAAEY,SACZC,WAAYb,EAAEa,kBAIzC,GAELxB,EAAWyB,WAAW1B,EAC1B,CAEOZ,oBAIHuC,QAAa,2BAHI,sJAIrB,EAlDSpC,SAAgC,mBAAAqC,iBAAhCrC,EAAgC,EAAhCA,EAAgC,UAAAsC,EAAAC,IAAA,MAAhCvC,EAAgCwC,UAAA,iCAAAC,QAAA,CAAAtC,MAAA,SAAAuC,MAAA,EAAAC,KAAA,EAAAC,OAAA,8rBAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IAvCrCvD,MAAA,aAAAA,CAAuE,QAC/DA,MAAA,0BAAoBA,QACxBA,MAAA,EAAAyD,EAAA,gBAGJzD,QACAA,MAAA,EAAA0D,EAAA,eAsBA1D,MAAA,EAAA2D,EAAA,yBAAA3D,8BA1BmCA,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,SAI5BR,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,QAAAR,CAAgB,WAAA4D,EAAA,4CAiClBnD,CAAgC,yOC5BjCT,MAAA,aAAAA,CAAyD,cAC3CA,MAAA,WAAKA,oCASfA,MAAA,WAAAA,CAAsD,cAQ9CA,MAAA,WAAIA,MAAA,UAAMA,MAAA,OAACA,QAAOA,MAAA,QACtBA,QACAA,MAAA,uBACIA,MAAA,cAMAA,MAAA,eAAWA,MAAA,sBAAgBA,mCAd3BA,MAAA,GAAAA,MAAA,QAAA6D,EAAAC,KAAAC,SAAAxB,KAAAyB,SAAAH,EAAAC,KAAAC,SAAAxB,KAAA0B,QAAA,2BAiBRjE,MAAA,WAAAA,CAA0D,cAQlDA,MAAA,eAAQA,MAAA,UAAMA,MAAA,OAACA,QAAOA,MAAA,QAC1BA,QACAA,MAAA,uBACIA,MAAA,cAOAA,MAAA,eAAWA,MAAA,0BAAoBA,8CAf/BA,MAAA,GAAAA,MAAA,QAAAkE,EAAAJ,KAAAC,SAAAtB,SAAAuB,SAAAE,EAAAJ,KAAAC,SAAAtB,SAAAwB,SAaIjE,MAAA,GAAAA,MAAA,kBAAAE,EAAA,0CAkBJF,MAAA,qBAEIA,MAAA,2BAAAmE,EAAAnE,MAAAoE,GAAAC,UAAAC,EAAAtE,MAAA,UAAWA,MAAAsE,EAAAC,UAAAJ,GAAe,GAE1BnE,MAAA,GACAA,MAAA,cAAAA,CAGC,cACaA,MAAA,YAAMA,WAAW,6BAL/BA,MAAA,GAAAA,MAAA,IAAAmE,EAAA,KAGInE,MAAA,GAAAA,MAAA,uBAAAmE,EAAA,0CAnBpBnE,MAAA,WAAAA,CAAsD,cAClDA,MAAA,MAQAA,QACAA,MAAA,sBAAAA,CAAqC,yBAE7BA,MAAA,EAAAwE,EAAA,uBAYJxE,QACAA,MAAA,cAOIA,MAAA,gCAAAC,GAAAD,MAAAyE,GAAA,MAAAC,EAAA1E,MAAA,UAAwBA,MAAA0E,EAAAC,OAAA1E,GAAc,GAP1CD,WAQE,qCA9BFA,MAAA,GAAAA,MAAA,QAAA4E,EAAAd,KAAAC,SAAA1B,KAAA2B,SAAAY,EAAAd,KAAAC,SAAA1B,KAAA4B,SAUyBjE,MAAA,GAAAA,MAAA,UAAA4E,EAAAC,UAgBrB7E,MAAA,GAAAA,MAAA,kBAAA8E,EAAA9E,CAA4B,gCAAA4E,EAAAG,WAA5B/E,CAA4B,mDAOxCA,MAAA,WAAAA,CAA6D,cAChCA,MAAA,kBAAYA,QACrCA,MAAA,uBACIA,MAAA,iBAMJA,oCAEJA,MAAA,WAAAA,CAA4D,cAQpDA,MAAA,iBAAUA,MAAA,UAAMA,MAAA,OAACA,QAAOA,MAAA,QAC5BA,QACAA,MAAA,uBACIA,MAAA,cAOAA,MAAA,eAAWA,MAAA,4BAAsBA,mCAfjCA,MAAA,GAAAA,MAAA,QAAAgF,EAAAlB,KAAAC,SAAApB,WAAAqB,SAAAgB,EAAAlB,KAAAC,SAAApB,WAAAsB,QAAA,wBA0FRjE,MAAA,WAAAA,CAAwD,cACpDA,MAAA,MAAgDA,QAChDA,MAAA,yBAIJA,2FAlMJA,MAAA,WAAAA,CAIC,WAEOA,MAAA,EAAAiF,EAAA,cAoBAjF,MAAA,EAAAkF,EAAA,cAqBJlF,QACAA,MAAA,EAAAmF,EAAA,aAoCAnF,MAAA,EAAAoF,EAAA,aAWApF,MAAA,EAAAqF,EAAA,cAqBArF,MAAA,WAAAA,CAA+B,cACWA,MAAA,oBAAcA,QACpDA,MAAA,sBAA8CA,MAAA,IAE5CA,UAENA,MAAA,YAAAA,CAAuD,sBAG/CA,MAAA,yBAAAC,GAAAD,MAAAsF,GAAA,MAAAC,EAAAvF,QAAA,OAEFA,MAAAC,EAAqCsF,EAAAZ,OAAA,CAAAa,MAC/C,gBACRD,EAAAhB,UAAU,eACR,GAEkBvE,MAAA,yBACJA,QACAA,MAAA,sBAEIA,MAAA,yBAAAC,GAAAD,MAAAsF,GAAA,MAAAG,EAAAzF,QAAA,OAC6BA,MAAAC,EAASwF,EAAAd,OAAA,CAAAa,MAAgB,UACpEC,EAAAlB,UAAU,SACd,GAEkBvE,MAAA,mBACJA,QACAA,MAAA,sBAEIA,MAAA,yBAAAC,GAAAD,MAAAsF,GAAA,MAAAI,EAAA1F,QAAA,OAEFA,MAAAC,EAAqCyF,EAAAf,OAAA,CAAAa,MAC9C,eACRE,EAAAnB,UAAU,cACT,GAEkBvE,MAAA,uBACJA,QACAA,MAAA,sBAEIA,MAAA,yBAAAC,GAAAD,MAAAsF,GAAA,MAAAK,EAAA3F,QAAA,OAEFA,MAAAC,EAAqC0F,EAAAhB,OAAA,CAAAa,MAClD,mBAAkDG,EAAApB,UAChD,kBACL,GAEkBvE,MAAA,2BACJA,QACAA,MAAA,sBAEIA,MAAA,yBAAAC,GAAAD,MAAAsF,GAAA,MAAAM,EAAA5F,QAAA,OAEFA,MAAAC,EAAqC2F,EAAAjB,OAAA,CAAAa,MACjD,kBAAiDI,EAAArB,UAC/C,iBACN,GAEkBvE,MAAA,0BACJA,UAEJA,MAAA,YAAAA,CAA+B,eACQA,MAAA,mBAAYA,QAC/CA,MAAA,mBAQJA,QACAA,MAAA,GAAA6F,EAAA,aAOJ7F,OAAA,+BAhMIA,MAAA,YAAA8F,EAAAhC,MAGgC9D,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAAxB,MAoBAvC,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAAtB,UAsBJzC,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAA1B,MAoCArC,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAAgC,aAWA/F,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAApB,YAuBsB3C,MAAA,GAAAA,MAAA,OAAAgG,EAAAF,EAAAhC,KAAAmC,IAAA,mBAAAD,EAAAR,MAAA,YAM1CxF,MAAA,GAAAA,MAAA,UAAA8F,EAAAI,OAAA,eAAAlG,CAAiC,iBAAAA,MAAA,GAAAmG,IAWjCnG,MAAA,GAAAA,MAAA,UAAA8F,EAAAI,OAAA,SAAAlG,CAA2B,iBAAAA,MAAA,GAAAmG,IAS3BnG,MAAA,GAAAA,MAAA,UAAA8F,EAAAI,OAAA,cAAAlG,CAAgC,iBAAAA,MAAA,GAAAmG,IAWhCnG,MAAA,GAAAA,MAAA,UAAA8F,EAAAI,OAAA,kBAAAlG,CAAoC,iBAAAA,MAAA,GAAAmG,IAWpCnG,MAAA,GAAAA,MAAA,UAAA8F,EAAAI,OAAA,iBAAAlG,CAAmC,iBAAAA,MAAA,GAAAmG,IAgBnCnG,MAAA,GAAAA,MAAA,QAAAA,CAAS,UAATA,CAAS,SAATA,CAAS,YAAA8F,EAAAM,eAMWpG,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAAsC,OAAA,0CAQhCrG,MAAA,cAAAA,CAGC,eAKOA,MAAA,mBAAAA,MAAAsG,GAAA,MAAAC,EAAAvG,QAAA,OAASA,MAAAuG,EAAAC,cAAa,GAEtBxG,MAAA,YACJA,SAAS,yBAJLA,MAAA,GAAAA,MAAA,YAAAyG,EAAA3C,KAAA4C,MAAA,wBAOJ1G,MAAA,YACIA,MAAA,oBACAA,MAAA,OAAGA,MAAA,6BAAuBA,oCAI9BA,MAAA,mBACIA,MAAA,GACJA,kCAF8CA,MAAA,QAAA2G,GAC1C3G,MAAA,GAAAA,MAAA,IAAA2G,EAAA,UAYHC,EAA0B,MA9OvC,MA8OaA,EAwBEC,WACP,OAAOlG,KAAKmG,MAAMD,MAAQ,IAAI1E,GAClC,CAGW4E,iBACP,OAAOpG,KAAKmG,MAAMC,YAAc,EACpC,CAEWlC,eACP,OAAOlE,KAAKmD,KAAKC,SAAS1B,KAAKmD,KACnC,CAEOY,cAAcZ,EAAgB,GACjC,MAAO,GAAGA,IACd,CAEOU,OAAOc,GACV,OAAOrG,KAAKkE,SAASoC,SAASD,EAClC,CAEAtG,YACqCoG,GAAAnG,KAAAmG,QA5CpBnG,KAAAC,MAAQ,IAAIC,MAEtBF,KAAAmD,KAAO,IAAIoD,KAAU,CACxB3E,KAAM,IAAI4E,KAAYxG,KAAKkG,KAAKtE,MAAQ,GAAI,CAAC6E,gBAC7CrB,YAAa,IAAIoB,KAAYxG,KAAKkG,KAAKd,aAAe,IACtDtD,SAAU,IAAI0E,KAAYxG,KAAKkG,KAAKpE,UAAY,GAAI,CAChD2E,gBAEJzE,WAAY,IAAIwE,KAAYxG,KAAKkG,KAAKlE,WAAY,CAC9CyE,gBAEJ/E,KAAM,IAAI8E,KAAYxG,KAAKkG,KAAKxE,MAAQ,IACxCgF,cAAe,IAAIF,KAAYxG,KAAKkG,KAAKQ,gBAAiB,GAC1DC,aAAc,IAAIH,KAAYxG,KAAKkG,KAAKS,cAAgB,GACxDjB,OAAQ,IAAIc,KAAYxG,KAAKkG,KAAKR,QAAU,MAGzC1F,KAAAH,SAAU,EAEDG,KAAAoE,WAAuB,CAACwC,KAAOC,KAAOC,KA0BnD,CAMI9C,OAAO/D,GACV,IAAKD,KAAKmD,OAASnD,KAAKmD,KAAKC,SAAS1B,KAAM,OAC5C1B,KAAKmD,KAAKC,SAAS1B,KAAKqF,cACxB,MAAMC,EAAQ/G,EAAM+G,MACdnC,EAAQ5E,EAAM4E,MACdX,EAAWlE,KAAKkE,UACjBW,GAAS,IAAIoC,SACd/C,EAASgD,KAAKrC,GACd7E,KAAKmD,KAAKC,SAAS1B,KAAKyF,SAASjD,IAIjC8C,IAAOA,EAAMnC,MAAQ,GAC7B,CAMOjB,UAAUwD,GACb,IAAKpH,KAAKmD,OAASnD,KAAKmD,KAAKC,SAAS1B,KAAM,OAC5C,MAAMwC,EAAWlE,KAAKkE,SACtBlE,KAAKmD,KAAKC,SAAS1B,KAAKqF,cACxB,MAAMM,EAAQnD,EAASoD,QAAQF,GAE3BC,GAAS,IACTnD,EAASqD,OAAOF,EAAO,GACvBrH,KAAKmD,KAAKC,SAAS1B,KAAKyF,SAASjD,GAEzC,CAEO2B,cACH7F,KAAKH,SAAU,EACfG,KAAKC,MAAMc,KAAK,CACZC,OAAQ,OACRC,SAAU,CACNiF,KAAM,IAAI1E,IAAa,IAChBxB,KAAKkG,KACRvE,GAAI3B,KAAKkG,KAAKvE,IAAM,WAAQ6F,MAAU,eACnCxH,KAAKmD,KAAK0B,UAI7B,EAhGSoB,SAA0B,mBAAA9D,iBAA1B8D,GAA0B5G,MA8CvBoI,MAAe,EA9ClBxB,EAA0B,UAAAyB,EAAArF,IAAA,MAA1B4D,EAA0B3D,UAAA,0BAAAC,QAAA,CAAAtC,MAAA,SAAAuC,MAAA,GAAAC,KAAA,EAAAC,OAAA,eAAAiF,eA9KtBC,+FAoBoBA,wIAkHoBA,89DAnMjDvI,MAAA,WAAAA,CAAQ,QACAA,MAAA,GAAmCA,QACvCA,MAAA,EAAAwI,EAAA,gBAGJxI,QACAA,MAAA,EAAAyI,EAAA,gBAoMAzI,MAAA,EAAA0I,EAAA,gBAaA1I,MAAA,EAAA2I,EAAA,yBAAA3I,OAMAA,MAAA,6BACIA,MAAA,GAAA4I,EAAA,oBAGJ5I,+BAhOQA,MAAA,GAAAA,MAAA,GAAAwD,EAAAqD,KAAAvE,GAAA,sBACqCtC,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,SAMxCR,MAAA,GAAAA,MAAA,OAAAwD,EAAAM,OAAAN,EAAAhD,QAAAR,CAAwB,WAAA6I,GAmMxB7I,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,SAmB8BR,MAAA,GAAAA,MAAA,UAAAwD,EAAAuD,WAAA,gUAa9BH,CAA0B,kNC3NvB5G,MAAA,cAAAA,CAKC,cACaA,MAAA,eAASA,0CAHnBA,MAAA,oBAAA4D,EAAA,0CAtBR5D,MAAA,UAAAA,CAAsD,oBAI9CA,MAAA,yBAAAC,GAAAD,MAAAE,GAAA,MAAAC,EAAAH,QAAA,OAAAA,MAAAG,EAAA2I,WAAA7I,EAAA,GACHD,QACDA,MAAA,UAAAA,CAA0C,UAA1CA,CAA0C,SAE7BA,MAAA,GAAeA,QACpBA,MAAA,YACIA,MAAA,GACJA,UAEJA,MAAA,YAGIA,MAAA,0CACJA,UAEJA,MAAA,GAAA+I,EAAA,iBAQA/I,MAAA,gBAIIA,MAAA,mBAAAA,MAAAE,GAAA,MAAAG,EAAAL,QAAA,OAAAA,MAAAK,EAAA2I,cAAA3I,EAAA2I,aAAA,GAEAhJ,MAAA,eAAUA,MAAA,kBAAWA,WAAW,yBA7BhCA,MAAA,GAAAA,MAAA,UAAAiJ,EAAAH,YAIS9I,MAAA,GAAAA,MAAAiJ,EAAApC,KAAAtE,MAEDvC,MAAA,GAAAA,MAAA,IAAAiJ,EAAApC,KAAApE,SAAA,KAMJzC,MAAA,GAAAA,MAAA,IAAAA,MAAA,KAAAiJ,EAAApC,KAAAlE,WAAA,IAAA3C,MAAA,KAAAiJ,EAAAC,SAAA,KAOHlJ,MAAA,GAAAA,MAAA,OAAAiJ,EAAAE,UAODnJ,MAAA,GAAAA,MAAA,YAAAiJ,EAAApC,KAAAzE,QAAAnB,OAAA,0CA2BAjB,MAAA,eAKIA,MAAA,mBAAAA,MAAA8E,GAAA,MAAAsE,EAAApJ,QAAAqE,UAAAW,EAAAhF,MAAA,UAASA,MAAAgF,EAAAqE,WAAAD,GAAkB,GAG3BpJ,MAAA,cAAUA,MAAA,UAAIA,SAAW,0CAE7BA,MAAA,eAKIA,MAAA,mBAAAA,MAAAsJ,GAAA,MAAAF,EAAApJ,QAAAqE,UAAAkF,EAAAvJ,MAAA,UAASA,MAAAuJ,EAAAC,aAAAJ,GAAoB,GAG7BpJ,MAAA,cAAUA,MAAA,YAAMA,SAAW,2BA/BnCA,MAAA,YAIIA,MAAA,YAGAA,MAAA,WAAAA,CAA8B,YACRA,MAAA,GAAiBA,QACnCA,MAAA,YACIA,MAAA,GACJA,UAEJA,MAAA,EAAAyJ,EAAA,iBAUAzJ,MAAA,EAAA0J,EAAA,iBAUJ1J,6CAzB0BA,MAAA,GAAAA,MAAAoJ,EAAA7G,MAEdvC,MAAA,GAAAA,MAAA,IAAAoJ,EAAA5G,MAAA,KASHxC,MAAA,GAAAA,MAAA,OAAA6D,EAAAsF,UAUAnJ,MAAA,GAAAA,MAAA,OAAA6D,EAAAsF,SAAA,2BArCbnJ,MAAA,YAQIA,MAAA,EAAA2J,EAAA,cAkCJ3J,8BAtCIA,MAAA,SAAA8F,EAAAkD,aAAA,IAAAlD,EAAAe,KAAAzE,QAAAnB,OAAA,WAMuBjB,MAAA,GAAAA,MAAA,UAAA8F,EAAAe,KAAAzE,QAAA,MAgF1BwH,EAAyB,MApItC,MAoIaA,EAkBET,eACP,OAAOxI,KAAKkJ,UAAUC,WAC1B,CAEWhB,iBACP,OAAQnI,KAAKkG,KAAKkD,eAAe9C,SAAStG,KAAKkJ,UAAUG,KAC7D,CAEWlB,eAAWmB,GAClB,IAAIC,EAAOvJ,KAAKkG,KAAKkD,eAEhBG,EADAD,EACOC,EAAKrI,OAAQC,GAAMA,IAAMnB,KAAKkJ,UAAUG,OADxCE,EAAOC,MAAO,IAAID,EAAMvJ,KAAKkJ,UAAUG,OAEnDrJ,KAAKkJ,UAAUO,WACX,IAAIjI,IAAa,IAAKxB,KAAKkG,KAAMkD,eAAgBG,IAEzD,CAGWhB,aACP,OAAOvI,KAAKkJ,UAAUQ,QAC1B,CAEA3J,YAAoBmJ,GAAAlJ,KAAAkJ,YApCblJ,KAAAqI,cAAe,EAENrI,KAAA2J,UAAY,IAAM3J,KAAKkJ,UAAUS,UAAU3J,KAAKkG,MAEhDlG,KAAA0I,WAAckB,GAC1B5J,KAAKkJ,UAAUS,UAAU3J,KAAKkG,KAAM0D,GAExB5J,KAAA6I,aAAgBe,GAC5B5J,KAAKkJ,UAAUW,aAAa7J,KAAKkG,KAAM0D,GAE3B5J,KAAA8J,SAAW,IAAM9J,KAAKkJ,UAAUa,QAAQ/J,KAAKkG,MAE7ClG,KAAAgK,WAAa,IAAMhK,KAAKkJ,UAAUe,WAAWjK,KAAKkG,KAwBZ,EAxC7C+C,SAAyB,mBAAA9G,iBAAzB8G,GAAyB5J,MAAA6K,KAAA,EAAzBjB,EAAyB,UAAAvB,EAAArF,IAAA,MAAzB4G,EAAyB3G,UAAA,+BAAA6H,OAAA,CAAAjE,KAAA,QAAAkE,MAAAC,EAAA7H,MAAA,GAAAC,KAAA,EAAAC,OAAA,w8CAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAjI9BvD,MAAA,WAGIA,MAAA,EAAAiL,EAAA,eAoCAjL,MAAA,EAAAkL,EAAA,aA2CAlL,MAAA,oBAAAA,CAA0B,cAIlBA,MAAA,0BAASwD,EAAA8G,WAAW,GAEpBtK,MAAA,cAAUA,MAAA,SAAGA,QACbA,MAAA,WAAkBA,MAAA,gBAAUA,UAEhCA,MAAA,eAGIA,MAAA,0BAASwD,EAAAiH,UAAU,GAEnBzK,MAAA,eAAUA,MAAA,WAAIA,QACdA,MAAA,YAAkBA,MAAA,gBAASA,UAE/BA,MAAA,eAGIA,MAAA,0BAASwD,EAAAmH,YAAY,GAErB3K,MAAA,eAAUA,MAAA,aAAMA,QAChBA,MAAA,YAAkBA,MAAA,kBAAWA,qBAtGKA,MAAA,GAAAA,MAAA,OAAAwD,EAAAqD,MAsCrC7G,MAAA,GAAAA,MAAA,OAAAwD,EAAAqD,6XAwFJ+C,CAAyB,kJC1HlB5J,MAAA,GACIA,MAAA,WACJA,kCAD4BA,MAAA,GAAAA,MAAA,OAAAmL,EAAA,2BAFhCnL,MAAA,GACIA,MAAA,EAAAoL,EAAA,uCAGJpL,8BAHmCA,MAAA,GAAAA,MAAA,UAAAA,MAAA,IAAAiJ,EAAAoC,MAAA,2BAUnCrL,MAAA,GACIA,MAAA,WACJA,kCAD4BA,MAAA,GAAAA,MAAA,OAAAsL,EAAA,2BANhCtL,MAAA,eAKIA,MAAA,EAAAuL,EAAA,uCAGJvL,4CALIA,MAAA,QAAAwL,GADAxL,MAAA,QAAAwL,GAG+BxL,MAAA,GAAAA,MAAA,UAAAA,MAAA,IAAA8F,EAAA2F,UAAAD,GAAA,wBAMnCxL,MAAA,UAAAA,CAAsD,cACxCA,MAAA,WAAKA,QACfA,MAAA,OAAGA,MAAA,sBAAgBA,eAetB0L,EAAqB,MA5ClC,MA4CaA,EAkBE3E,iBACP,OAAOpG,KAAKkJ,UAAU9C,UAC1B,CAEArG,YAAoBmJ,GAAAlJ,KAAAkJ,YApBJlJ,KAAA0K,KAAO1K,KAAKkJ,UAAUwB,KAEtB1K,KAAAgL,UAAY,IAAIC,IAAwB,IAExCjL,KAAA8K,SAAW9K,KAAK0K,KAAKQ,QACjC5J,KAAKoJ,IACD,MAAMS,EAAW,GACjB,UAAWtJ,KAAS7B,KAAKoG,WACrB+E,EAAStJ,GAAS6I,EAAKxJ,OAClBgF,GAASA,EAAKpE,WAAaD,GAGpC,OAAOsJ,IAQuC,EAtB7CJ,SAAqB,mBAAA5I,iBAArB4I,GAAqB1L,MAAA6K,KAAA,EAArBa,EAAqB,UAAArD,EAAArF,IAAA,MAArB0I,EAAqBzI,UAAA,oBAAAE,MAAA,EAAAC,KAAA,EAAAC,OAAA,kQAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IAzC1BvD,MAAA,qBAEIA,MAAA,+BAAAC,GAAA,OACqBuD,EAAAmI,UAAAI,KAA0B,IAA1B9L,EAA8B,GAAEuD,EAAAuD,WAAA9G,EACpD,GACX,GACUD,MAAA,eACIA,MAAA,EAAAgM,EAAA,uCAKJhM,QACAA,MAAA,EAAAiM,EAAA,iBASJjM,QACAA,MAAA,EAAAkM,EAAA,yBAAAlM,oCAhBuBA,MAAA,GAAAA,MAAA,cAAAmM,EAAAnM,MAAA,IAAAwD,EAAA6H,OAAA,KAAAc,EAAAlL,OAAAjB,CAA8B,WAAA4D,GAO3B5D,MAAA,GAAAA,MAAA,UAAAwD,EAAAuD,WAAA,yNA2BrB2E,CAAqB,iMC7BtB1L,MAAA,aAAAA,CAA+C,cACjCA,MAAA,WAAKA,oCAQnBA,MAAA,UAAAA,CAAsD,cAO9CA,MAAA,WAAIA,MAAA,UAAMA,MAAA,OAACA,QAAOA,MAAA,QACtBA,QACAA,MAAA,uBACIA,MAAA,cAMAA,MAAA,eAAWA,MAAA,sBAAgBA,mCAb3BA,MAAA,GAAAA,MAAA,QAAA6D,EAAAC,KAAAC,SAAAxB,KAAAyB,SAAAH,EAAAC,KAAAC,SAAAxB,KAAA0B,QAAA,2BAgBRjE,MAAA,UAAAA,CAAuD,cAQ/CA,MAAA,WAAIA,MAAA,UAAMA,MAAA,OAACA,QAAOA,MAAA,QACtBA,QACAA,MAAA,uBACIA,MAAA,cAOAA,MAAA,eAAWA,MAAA,sBAAgBA,8CAf3BA,MAAA,GAAAA,MAAA,QAAAkE,EAAAJ,KAAAC,SAAAvB,MAAAwB,SAAAE,EAAAJ,KAAAC,SAAAvB,MAAAyB,SAaIjE,MAAA,GAAAA,MAAA,kBAAAE,EAAA,wBAKZF,MAAA,UAAAA,CAA4D,cACrCA,MAAA,iBAAWA,QAC9BA,MAAA,uBACIA,MAAA,cAOJA,iCAEJA,MAAA,UAAAA,CAA0D,qBAElDA,MAAA,mCACJA,oCA5DRA,MAAA,YAKIA,MAAA,EAAAoM,EAAA,cAmBApM,MAAA,EAAAqM,EAAA,cAqBArM,MAAA,EAAAsM,EAAA,aAYAtM,MAAA,EAAAuM,EAAA,aAKJvM,8BA3DIA,MAAA,YAAA8F,EAAAhC,MAE4B9D,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAAxB,MAmBAvC,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAAvB,OAqBAxC,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAApB,YAYA3C,MAAA,GAAAA,MAAA,OAAA8F,EAAAhC,KAAAC,SAAArB,SAAA,0CAMhC1C,MAAA,cAAAA,CAGC,eAKOA,MAAA,mBAAAA,MAAAwM,GAAA,MAAAxH,EAAAhF,QAAA,OAASA,MAAAgF,EAAAwB,cAAa,GAEtBxG,MAAA,YACJA,SAAS,yBAJLA,MAAA,GAAAA,MAAA,YAAAyG,EAAA3C,KAAA4C,MAAA,wBAOJ1G,MAAA,YACIA,MAAA,oBACAA,MAAA,OAAGA,MAAA,oCAA8BA,oCAIrCA,MAAA,mBACIA,MAAA,GACJA,kCAFyCA,MAAA,QAAAyM,GACrCzM,MAAA,GAAAA,MAAA,IAAAyM,EAAA,UAMHC,EAAgC,MAnG7C,MAmGaA,EAcEnC,aACP,OAAO5J,KAAKmG,MAAMyD,MACtB,CAGWoC,YACP,OAAOhM,KAAKmG,MAAM6F,OAAS,EAC/B,CAEAjM,YACqCoG,GAAAnG,KAAAmG,QAtBpBnG,KAAAC,MAAQ,IAAIC,MAEtBF,KAAAmD,KAAO,IAAIoD,KAAU,CACxB3E,KAAM,IAAI4E,KAAYxG,KAAK4J,OAAOhI,MAAQ,GAAI,CAAC6E,gBAC/C5E,MAAO,IAAI2E,KAAYxG,KAAK4J,OAAO/H,OAAS,GAAI,CAAC4E,gBACjDzE,WAAY,IAAIwE,KAAYxG,KAAK4J,OAAO5H,YACxCD,SAAU,IAAIyE,OAAcxG,KAAK4J,OAAO7H,SAAU,MAG/C/B,KAAAH,SAAU,CAcd,CAEIgG,cACH7F,KAAKH,SAAU,EACf,MAAMoM,EAAa,IACZjM,KAAK4J,OACRjI,GAAI3B,KAAK4J,OAAOjI,IAAM,aAAU6F,MAAU,eACvCxH,KAAKmD,KAAK0B,OAEjB7E,KAAKC,MAAMc,KAAK,CACZC,OAAQ,OACRC,SAAU,CACNiF,KAAM,IAAI1E,IAAa,IAChBxB,KAAKmG,MAAM+F,OACdzK,QAASzB,KAAKmG,MAAM+F,OAAOzK,QACtBP,OAAQK,GAAMA,EAAEI,KAAOsK,EAAWtK,IAClCwK,OAAO,CAACF,QAI7B,EA7CSF,SAAgC,mBAAA5J,iBAAhC4J,GAAgC1M,MAwB7BoI,MAAe,EAxBlBsE,EAAgC,UAAA3J,EAAAC,IAAA,MAAhC0J,EAAgCzJ,UAAA,4BAAAC,QAAA,CAAAtC,MAAA,SAAAuC,MAAA,GAAAC,KAAA,EAAAC,OAAA,ylCAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IAhGrCvD,MAAA,WAAAA,CAAQ,QACAA,MAAA,GAA4CA,QAChDA,MAAA,EAAA+M,EAAA,gBAGJ/M,QACAA,MAAA,EAAAgN,EAAA,cA+DAhN,MAAA,EAAAiN,EAAA,gBAaAjN,MAAA,EAAAkN,EAAA,yBAAAlN,OAMAA,MAAA,6BACIA,MAAA,GAAAmN,EAAA,oBAGJnN,+BA3FQA,MAAA,GAAAA,MAAA,GAAAwD,EAAA+G,OAAAjI,GAAA,6BAC2BtC,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,SAM9BR,MAAA,GAAAA,MAAA,OAAAwD,EAAAM,OAAAN,EAAAhD,QAAAR,CAAwB,WAAA6I,GA8DxB7I,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,SAmB8BR,MAAA,GAAAA,MAAA,UAAAwD,EAAAmJ,MAAA,sHAO9BD,CAAgC,8ICzErB1M,MAAA,YAIIA,MAAA,GACJA,wCADIA,MAAA,GAAAA,MAAA,IAAAoN,EAAA7K,KAAA,+BALRvC,MAAA,GACIA,MAAA,EAAAqN,EAAA,cAMJrN,kCAJSA,MAAA,GAAAA,MAAA,OAAAoN,EAAA,0CAnCrBpN,MAAA,GACIA,MAAA,WACIA,MAAA,WAGJA,QACAA,MAAA,UAAAA,CAAuB,cASfA,MAAA,mBAAAA,MAAAsN,GAAA,MAAAC,EAAAvN,QAAA,OAASA,MAAAuN,EAAAC,SAAQ,GAEjBxN,MAAA,cAAUA,MAAA,GAAqCA,YAGvDA,MAAA,UAAAA,CAEC,WACiBA,MAAA,GAAgBA,QAC9BA,MAAA,WAAAA,CAAoB,YAIZA,MAAA,IACJA,UAEJA,MAAA,YACIA,MAAA,GAAAyN,EAAA,uBAQJzN,UAERA,OAAA,yBA9BYA,MAAA,GAAAA,MAAA,aAAAiJ,EAAAyE,OAAA1N,CAA2B,aAAAiJ,EAAAyE,OAA3B1N,CAA2B,eAAAiJ,EAAAyE,QAKjB1N,MAAA,GAAAA,MAAAiJ,EAAAyE,OAAA,sBAMA1N,MAAA,GAAAA,MAAA,MAAAiJ,EAAApC,KAAA,KAAAoC,EAAApC,KAAAtE,MAKNvC,MAAA,GAAAA,MAAA,iBAAAiJ,EAAApC,KAAA,KAAAoC,EAAApC,KAAA8G,UAAA,MAAA1E,EAAApC,KAAA,KAAAoC,EAAApC,KAAA+G,WAAA,OAI0B5N,MAAA,GAAAA,MAAA,UAAAiJ,EAAApC,KAAAgH,YAAA,EArClD,MAAMC,EAAe,IAAIC,IAAc,IAyD1BC,EAA0B,MAvDvC,MAuDaA,EAvDbtN,cA2DWC,KAAA+M,QAAS,EAELO,eACP,MAAO,GAAGtN,KAAKuN,YAAYvN,KAAKkG,MAAMvE,IAC1C,CAEO6L,WACHxN,KAAK+M,OAASI,EAAaM,IAAIzN,KAAKsN,SACxC,CAEOT,SACCM,EAAaM,IAAIzN,KAAKsN,WACtBH,EAAaO,OAAO1N,KAAKsN,UACzBtN,KAAK+M,QAAS,IAEdI,EAAaQ,IAAI3N,KAAKsN,UACtBtN,KAAK+M,QAAS,EAEtB,EAtBSM,SAA0B,mBAAAlL,iBAA1BkL,EAA0B,EAA1BA,EAA0B,UAAAO,EAAAvL,IAAA,MAA1BgL,EAA0B/K,UAAA,gCAAA6H,OAAA,CAAAoD,SAAA,WAAArH,KAAA,QAAAkE,MAAAC,EAAA7H,MAAA,EAAAC,KAAA,EAAAC,OAAA,+xBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GApD/BvD,MAAA,EAAAwO,EAAA,6BAAexO,MAAA,OAAAwD,EAAAqD,sNAoDVmH,CAA0B,0GCvC3BhO,MAAA,WAIIA,MAAA,uBACJA,kCADoBA,MAAA,GAAAA,MAAA,QAAAyO,EAAA,wBAEpBzO,MAAA,WAAAA,CAIC,OACMA,MAAA,wBAAkBA,gCAG7BA,MAAA,6BAiBK0O,EAA0B,MAhDvC,MAgDaA,EAMThO,YAAoBiO,GAAAhO,KAAAgO,UAJJhO,KAAAiO,WAAajO,KAAKgO,QAAQE,SAE1BlO,KAAAH,QAAUG,KAAKgO,QAAQnO,OAEc,CAE9C2N,WACHxN,KAAKgO,QAAQG,cACjB,CAEOC,cACHpO,KAAKgO,QAAQK,aACjB,CAGOC,UAAUjH,EAAekH,GAC5B,OAAOA,EAAQA,EAAM5M,QAAK6M,CAC9B,EAnBST,SAA0B,mBAAA5L,iBAA1B4L,GAA0B1O,MAAA6K,KAAA,EAA1B6D,EAA0B,UAAArG,EAAArF,IAAA,MAA1B0L,EAA0BzL,UAAA,0BAAAE,MAAA,GAAAC,KAAA,GAAAC,OAAA,ksBAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IA7C/BvD,MAAA,WAGIA,MAAA,WACAA,MAAA,WAAkBA,MAAA,UAAIA,QACtBA,MAAA,WAAoBA,MAAA,cAAQA,QAC5BA,MAAA,WAAkBA,MAAA,UAAIA,QACtBA,MAAA,WAAkBA,MAAA,iBAAWA,QAC7BA,MAAA,YAAkBA,MAAA,YAAKA,QACvBA,MAAA,YAAkBA,MAAA,kBAAWA,QAC7BA,MAAA,YAAkBA,MAAA,aAAMA,QACxBA,MAAA,YACJA,QACAA,MAAA,WACIA,MAAA,GAAAoP,EAAA,8BAMApP,MAAA,GAAAqP,EAAA,gCAOJrP,QACAA,MAAA,GAAAsP,EAAA,yDAZ0BtP,MAAA,IAAAA,MAAA,UAAAA,MAAA,KAAAwD,EAAAoL,YAAA5O,CAAuB,eAAAwD,EAAAyL,WAOxCjP,MAAA,GAAAA,MAAA,gBAAAuP,EAAAvP,MAAA,KAAAwD,EAAAoL,cAAAW,EAAAtO,SAMJjB,MAAA,GAAAA,MAAA,OAAAA,MAAA,KAAAwD,EAAAhD,SAAA,kNAgBAkO,CAA0B,gOCRC1O,MAAA,YAIIA,MAAA,yBACJA,iDAUJA,MAAA,kBAGIA,MAAA,yBAAAC,GAAAD,MAAAoE,GAAA,MAAAoL,EAAAxP,QAAAqE,UAAAoL,EAAAzP,MAAA,UAE5BA,MAAAyP,EAAAC,mBAAAF,EAAAvP,GACV,GACmCD,OAAA,mCALGA,MAAA,UAAAwP,EAAA5B,SAAA,0CAMJ5N,MAAA,WAAAA,CAGC,WAHDA,CAGC,cAHDA,CAGC,cAaqBA,MAAA,YAAMA,YAGxBA,MAAA,YAGIA,MAAA,GACJA,QACAA,MAAA,eAGIA,MAAA,mBAAAA,MAAAsF,GAAA,MAAAkK,EAAAxP,QAAAqE,UAAAsL,EAAA3P,MAAA,UAASA,MAAA2P,EAAAjF,QAAA8E,GAAa,GAEtBxP,MAAA,cAAUA,MAAA,SAAGA,WAAW,mCAxBxBA,MAAA,GAAAA,MAAA,aAAAwP,EAAA5B,SAAA,sEASI5N,MAAA,GAAAA,MAAA,eAQJA,MAAA,GAAAA,MAAA,IAAAwP,EAAA5B,SAAA,+BAtDZ5N,MAAA,WAAAA,CAIC,WAJDA,CAIC,YAGWA,MAAA,GACJA,QACAA,MAAA,EAAA4P,EAAA,cAMJ5P,QACAA,MAAA,YAGIA,MAAA,uBAIJA,QACAA,MAAA,EAAA6P,EAAA,oBAQA7P,MAAA,EAAA8P,EAAA,eAgCJ9P,6CAzDYA,MAAA,GAAAA,MAAA,IAAAwP,EAAAjN,KAAA,KAICvC,MAAA,GAAAA,MAAA,OAAAwP,EAAApN,QAAAnB,QAQLjB,MAAA,GAAAA,MAAA,IAAAA,MAAA,IAAAwP,EAAA7M,WAAA,IAAAoN,EAAAC,MAAA,KAWChQ,MAAA,GAAAA,MAAA,QAAAwP,EAAApN,QAAAnB,QAIAjB,MAAA,GAAAA,MAAA,OAAAwP,EAAApN,QAAAnB,OAAA,wDAvCjBjB,MAAA,cAAAA,CAGC,WAEOA,MAAA,EAAAiQ,EAAA,eAiEJjQ,qDApEAA,MAAA,QAAAkQ,GAMyBlQ,MAAA,GAAAA,MAAA,WAAA4E,EAAAuL,YAAAnQ,MAAA,EAAAgL,IAAAkF,GAAA,2BATjClQ,MAAA,GACIA,MAAA,EAAAoQ,EAAA,iBAwEJpQ,6CAvESA,MAAA,GAAAA,MAAA,QAAA6D,EAAAsM,YAAAnQ,MAAA,EAAAgL,IAAAkF,GAAAjP,OAAA,2BAJjBjB,MAAA,GACIA,MAAA,mBACIA,MAAA,EAAAqQ,EAAA,sBA0EJrQ,QACJA,+BA3EsCA,MAAA,GAAAA,MAAA,UAAAK,EAAA0G,WAAA,2BAH1C/G,MAAA,WACIA,MAAA,EAAAsQ,EAAA,sBA8EJtQ,yCA9EmBA,MAAA,GAAAA,MAAA,QAAAiJ,EAAAsH,mBAAAvQ,CAA2B,WAAAwQ,EAAA,0CAmF1CxQ,MAAA,GACIA,MAAA,eACIA,MAAA,cACJA,QACAA,MAAA,eAQIA,MAAA,mBAAAA,MAAAyQ,GAAA,MAAAC,EAAA1Q,MAAA,UAAAA,MAAA0Q,EAAAH,oBAA8B,EAAI,GAElCvQ,MAAA,eACJA,QACJA,OAAA,0BARQA,MAAA,GAAAA,MAAA,YAAA2F,EAAAuJ,MAAAyB,WAAA3Q,CAA8B,WAAA2F,EAAAuJ,MAAAyB,WAA9B3Q,CAA8B,kBAAA2F,EAAAuJ,MAAAyB,WAAA,0CAUlC3Q,MAAA,eAGIA,MAAA,mBAAAA,MAAA4Q,GAAA,MAAAC,EAAA7Q,MAAA,UAAAA,MAAA6Q,EAAAN,oBAA8B,EAAK,GAEnCvQ,MAAA,YACJA,QACAA,MAAA,eAA2BA,MAAA,mBAAAA,MAAA4Q,GAAA,MAAAE,EAAA9Q,MAAA,UAASA,MAAA8Q,EAAAC,YAAW,GAC3C/Q,MAAA,kBACJA,OAAA,2BA/BRA,MAAA,eAIIA,MAAA,EAAAgR,EAAA,sBAiBAhR,MAAA,EAAAiR,EAAA,0BAAAjR,OAYJA,yCA7BmBA,MAAA,GAAAA,MAAA,QAAA8F,EAAAyK,mBAAAvQ,CAA2B,WAAAkR,EAAA,2BA+B1ClR,MAAA,YACIA,MAAA,oBACAA,MAAA,OAAGA,MAAA,GAAaA,gCAAbA,MAAA,GAAAA,MAAAO,EAAAC,QAAA,2BAeKR,MAAA,YAKIA,MAAA,GAIJA,mDANIA,MAAA,aAAAmR,EAAAC,WAAAC,IAEArR,MAAA,GAAAA,MAAA,IAAAqR,EAAAjP,QAAAnB,OAAA,cAAAoQ,EAAAjP,QAAAnB,OAAA,8DAZZjB,MAAA,WAAAA,CAIC,WAJDA,CAIC,YAEiCA,MAAA,GAAeA,QACzCA,MAAA,EAAAsR,EAAA,cAUJtR,QACAA,MAAA,YAGIA,MAAA,uBACJA,QACAA,MAAA,kBAEIA,MAAA,yBAAAC,GAAA,MAAAoR,EAAArR,MAAAuR,GAAAlN,UAAAmN,EAAAxR,MAAA,UAAiBA,MAAAwR,EAAA9B,mBAAA2B,EAAApR,GAAgC,GACpDD,SAAY,wCApBiBA,MAAA,GAAAA,MAAAqR,EAAA9O,MAGrBvC,MAAA,GAAAA,MAAA,OAAAqR,EAAAjP,QAAAnB,QAYLjB,MAAA,GAAAA,MAAA,IAAAA,MAAA,IAAAqR,EAAAI,WAAA,IAAAC,EAAA1B,MAAA,KAGAhQ,MAAA,GAAAA,MAAA,UAAAqR,EAAAzD,SAAA,2BA5BZ5N,MAAA,cAAAA,CAA4B,QACpBA,MAAA,mBAAaA,UAErBA,MAAA,WACIA,MAAA,EAAA2R,EAAA,cA4BJ3R,8BAzByBA,MAAA,GAAAA,MAAA,UAAAuN,EAAA2B,MAAA0C,MAAA,EArIrC,IAsMaC,EACT,MArMJ,MAoMaA,UACDC,KAoBG9B,WACP,OAAOrP,KAAKoR,KAAKC,aACrB,CAEAtR,YACYqR,EACyBjL,GAEjCmL,QAHQtR,KAAAoR,OACyBpR,KAAAmG,QAtBpBnG,KAAAC,MAAQ,IAAIC,MAEtBF,KAAAH,QAAU,GAUVG,KAAAwP,WAAsC,GAEtCxP,KAAAoG,WAAuB,GAW1BpG,KAAKH,QAAU,iBACnB,CAEa2N,WAAQ,IAAA+D,EAAAvR,KAAA,SAAAwR,KAAA,YACjBD,EAAK1R,QAAU,kBACf0R,EAAKhD,MAAQ,IAAIkD,IAAcF,EAAKpL,MAAMoI,OAC1CgD,EAAKG,YAAcH,EAAKpL,MAAMwL,kBAC1BJ,EAAKhD,MAAMtO,OAAO2R,OAAOC,OAAOC,WAEpCP,EAAKpL,MAAMuE,KAAKqH,UAAWxI,IACvBgI,EAAK1R,QAAU,kBACf,MAAMuG,KAAaoD,MAAOD,EAAKjI,IAAK4E,GAASA,EAAKpE,WAC5CR,EAAM,GACZ,UAAW0Q,KAAO5L,EACd9E,EAAI0Q,GAAOzI,EAAKrI,OAAQgF,GAEhBA,EAAKpE,WAAakQ,MAClBC,KACI/L,EACAqL,EAAKG,MACLH,EAAKhD,MAAMtO,QAK3BsR,EAAKnL,WAAaA,EAClBmL,EAAK/B,WAAalO,EAClBiQ,EAAKW,uBACLX,EAAKY,QAAQ,gBAAiB,IAAOZ,EAAK1R,QAAU,GAAK,IAAI,EAC9D,EA1Bc,EA2BrB,CAEOkK,QAAQ7D,EAAoBkM,GAA0B,GACzD,MAAMC,EAAWrS,KAAKuO,MAAM0C,MAAMqB,KAC7BC,GACGA,EAAI5Q,KAAOuE,EAAKvE,IAChB4Q,EAAI9Q,QAAQnB,SACRiS,EAAI9Q,QAAQ+Q,OACR,CAACC,EAAGC,IACAD,GACCvM,EAAKzE,QAAQ6Q,KAAMK,GAAQD,EAAE/Q,KAAOgR,EAAIhR,IACnC,EACA,GACV,IAGZyQ,GAAkBlM,EAAKzE,SAASnB,OAChCN,KAAKmG,MAAMyM,cAAc1M,EAAKzE,SAASoR,KAAMpR,IACzC,MAAMqR,EAAW,IAAItR,IAAa,IAAK0E,EAAMzE,YAC7CzB,KAAK+J,QAAQ+I,GAAU,EAAK,GAGhC9S,KAAKuO,MAAQ,IAAIkD,IADVY,EACwB,IACxBrS,KAAKuO,MACR0C,MAAOjR,KAAKuO,MAAM0C,MACb/P,OACIK,KAEOA,EAAEI,KAAOuE,EAAKvE,IACdJ,EAAEwR,iBAAmB7M,EAAK6M,iBAGrC5G,OAAO,CACJ,IAAI3K,IAAa,IACV0E,EACH+G,SAAUoF,EAASpF,SAAW,OAKf,IACxBjN,KAAKuO,MACR0C,MAAOjR,KAAKuO,MAAM0C,MAAM9E,OAAO,CAC3B,IAAI3K,IAAa,IAAK0E,EAAM+G,SAAU,QAIlDjN,KAAKkS,sBACT,CAEOlI,WAAW9D,GACdlG,KAAKuO,MAAQ,IAAIkD,IAAc,IACxBzR,KAAKuO,MACR0C,MAAOjR,KAAKuO,MAAM0C,MAAM/P,OACnBC,GACGA,EAAEQ,KAAOuE,EAAKvE,IAAMR,EAAE4R,iBAAmB7M,EAAK6M,kBAG1D/S,KAAKkS,sBACT,CAEOnD,mBAAmB7I,EAAoB8G,GAC1C,MAAMqF,EAAWrS,KAAKuO,MAAM0C,MAAMqB,KAC7BC,GACGA,EAAI5Q,KAAOuE,EAAKvE,IAAM4Q,EAAIQ,iBAAmB7M,EAAK6M,gBAE1D,IAAI9B,EAAQ,IAAIjR,KAAKuO,MAAM0C,OAEvBA,EADAoB,EACQrS,KAAKuO,MAAM0C,MACd/P,OACIK,KAEOA,EAAEI,KAAOuE,EAAKvE,IACdJ,EAAEwR,iBAAmB7M,EAAK6M,iBAGrC5G,OAAO,CAAC,IAAI3K,IAAa,IAAK0E,EAAM+G,SAAUD,MAE3ChN,KAAKuO,MAAM0C,MAAM9E,OAAO,CAC5B,IAAI3K,IAAa,IAAK0E,EAAM+G,SAAUD,MAG9CiE,EAAM+B,KAAK,CAACC,EAAGC,IAAMD,EAAErR,KAAKuR,cAAcD,EAAEtR,OAC5C5B,KAAKuO,MAAQ,IAAIkD,IAAc,IACxBzR,KAAKuO,MACR0C,UAEJjR,KAAKkS,sBACT,CAEOA,uBACH,UAAWF,KAAOhS,KAAKwP,WACnB,UAAWtJ,KAAQlG,KAAKwP,WAAWwC,GAC9B9L,EAAa+G,SAAWjN,KAAKuO,MAAM0C,MAAMuB,OACtC,CAACC,EAAGlR,IAAOA,EAAEI,KAAOuE,EAAKvE,GAAK8Q,EAAIlR,EAAE0L,SAAWwF,EAC/C,EAIhB,CAEOhC,WAAWvK,GACd,OAAOA,EAAKzE,QAAQH,IAAKC,GAAMA,EAAEK,MAAMwR,KAAK,KAChD,CAEOhD,YACHpQ,KAAKC,MAAMc,KAAK,CACZC,OAAQ,OACRC,SAAU,CAAEsN,MAAOvO,KAAKuO,QAEhC,CAEO8E,eACHrT,KAAK4P,oBAAqB,CAC9B,EA9KSsB,SACT,mBAAA/O,iBADS+O,GAA2B7R,MAAA6K,MAAA7K,MA2BxBoI,MAAe,EA3BlByJ,EACT,UAAAoC,EAAAjR,IAAA,MADS6O,EAA2B5O,UAAA,+BAAAC,QAAA,CAAAtC,MAAA,SAAAsT,SAAA,CAAAlU,OAAAmD,MAAA,EAAAC,KAAA,EAAAC,OAAA,0rDAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IAjMhCvD,MAAA,EAAAmU,EAAA,aAgFAnU,MAAA,EAAAoU,EAAA,gBAkCApU,MAAA,EAAAqU,EAAA,yBAAArU,OAMAA,MAAA,EAAAsU,EAAA,yBAAAtU,8BAxHiCA,MAAA,QAAAwD,EAAAhD,QAAAR,CAAgB,WAAA4D,GAiF5C5D,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,QAAA,utBAgHAqR,CACT,6JC5KgC7R,MAAA,YAIIA,MAAA,uBAIJA,mDAJIA,MAAA,GAAAA,MAAA,KAAAA,MAAA,IAAAuU,EAAA5R,WAAA,IAAAkB,EAAAmM,MAAA,+BAbZhQ,MAAA,wBAAAA,CAIC,WAJDA,CAIC,YAGWA,MAAA,GACJA,QACAA,MAAA,EAAAwU,EAAA,cASJxU,oCAfAA,MAAA,QAAAuU,EAAAjS,IAIQtC,MAAA,GAAAA,MAAA,IAAAuU,EAAAhS,KAAA,KAICvC,MAAA,GAAAA,MAAA,OAAAuU,EAAA5R,WAAA,0CArBrB3C,MAAA,GACIA,MAAA,wBAIIA,MAAA,yBAAAC,GAAAD,MAAAyU,GAAA,MAAAC,EAAA1U,QAAAqE,UAAAO,EAAA5E,QAAA,OAAiBA,MAAA4E,EAAA+P,kBAAAD,EAAAzU,GAAgC,GAEjDD,MAAA,wBAAAA,CAA6C,aACXA,MAAA,UAAIA,UAEtCA,MAAA,EAAA4U,EAAA,2BAoBJ5U,QACJA,OAAA,mCAnB4BA,MAAA,GAAAA,MAAA,gBAAA0U,EAAA,KAAAA,EAAAtS,QAAA,2BA6BhBpC,MAAA,YAIIA,MAAA,uBACJA,mDADIA,MAAA,GAAAA,MAAA,KAAAA,MAAA,IAAA6U,EAAAlS,WAAA,IAAA8M,EAAAO,MAAA,8CAZZhQ,MAAA,qBAEIA,MAAA,yBAAAC,GAAA,MAAA4U,EAAA7U,MAAA8U,GAAAzQ,UAAA0Q,EAAA/U,MAAA,UAAAA,MAAA+U,EAAAC,aAAAH,EAAAvS,IAAArC,EAAA,GAEAD,MAAA,WAAAA,CAA8C,YAEtCA,MAAA,GACJA,QACAA,MAAA,EAAAiV,EAAA,cAMJjV,SAAM,wCAZNA,MAAA,UAAAkV,EAAAF,aAAAH,EAAAvS,KAIQtC,MAAA,GAAAA,MAAA,IAAA6U,EAAAtS,KAAA,KAICvC,MAAA,GAAAA,MAAA,OAAA6U,EAAAlS,WAAA,0BAVb3C,MAAA,EAAAmV,EAAA,sDACoBnV,MAAA,gBAAA0U,EAAA,KAAAA,EAAAtS,QAAA,2BAzChCpC,MAAA,UAAAA,CAIC,WAC2CA,MAAA,GAAgBA,QACxDA,MAAA,WACIA,MAAA,EAAAoV,EAAA,sBAgCApV,MAAA,EAAAqV,EAAA,yBAAArV,OAkBJA,+CAtDAA,MAAA,QAAA0U,EAAAnS,MAEwCvC,MAAA,GAAAA,MAAA0U,EAAAnS,MAErBvC,MAAA,GAAAA,MAAA,QAAA0U,EAAAhS,SAAA1C,CAAuB,WAAA6I,EAAA,MAqE7CyM,EAAkC,MAtF/C,MAsFaA,EAST5U,YACqCoG,GAAAnG,KAAAmG,QARpBnG,KAAAC,MAAQ,IAAIC,MAItBF,KAAAqU,aAAiC,GACxBrU,KAAAqP,KAAOrP,KAAKmG,MAAMkJ,KAK9B,MAAMuF,KAASpL,MACXxJ,KAAKmG,MAAM1E,QAAQH,IAAKC,GAAMA,EAAEM,OAAS,UAEvCgT,EAAa,GACnB,UAAWhT,KAAS+S,EAAQ,CACxB,MAAMnT,EAAUzB,KAAKmG,MAAM1E,QAAQP,OAAQK,GAAMA,EAAEM,QAAUA,GAC7DgT,EAAW3N,KAAK,CACZtF,KAAMC,EACNE,WAAYN,EAAQ6Q,KAAM/Q,GAAMA,EAAEQ,UAClCN,WACH,CAELzB,KAAK4U,OAASC,CAClB,CAEOb,kBAAkBnS,EAA4BF,GACjD,UAAWiI,KAAU/H,EAAMJ,QACvBzB,KAAKqU,aAAazK,EAAOjI,IAAMiI,EAAOjI,KAAOA,CAErD,CAEOmT,cACH,MAAMrT,EAAUzB,KAAKmG,MAAM1E,QAAQP,OAC9ByR,GAAQ3S,KAAKqU,aAAa1B,EAAIhR,KAEnC3B,KAAKC,MAAMc,KAAK,CAAEC,OAAQ,OAAQC,SAAU,CAAEQ,YAClD,EAtCSkT,SAAkC,mBAAAxS,iBAAlCwS,GAAkCtV,MAU/BoI,MAAe,EAVlBkN,EAAkC,UAAAvS,EAAAC,IAAA,MAAlCsS,EAAkCrS,UAAA,iCAAAC,QAAA,CAAAtC,MAAA,SAAAuC,MAAA,GAAAC,KAAA,EAAAC,OAAA,+wBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAnFvCvD,MAAA,WAAAA,CAAQ,QACAA,MAAA,oBAAcA,QAClBA,MAAA,aAAAA,CAA8B,cAChBA,MAAA,WAAKA,YAGvBA,MAAA,YACIA,MAAA,EAAA0V,EAAA,aA2DJ1V,QACAA,MAAA,aAAAA,CAAoB,cACmBA,MAAA,0BAASwD,EAAAiS,aAAa,GACrDzV,MAAA,aACJA,iBA7DsBA,MAAA,GAAAA,MAAA,UAAAwD,EAAA+R,2QA0ErBD,CAAkC,0LChD/BtV,MAAA,eAKIA,MAAA,YACJA,+BAHIA,MAAA,aAAAG,EAAA+O,MAAAyG,MAAA,0CAvCZ3V,MAAA,UAAAA,CAKC,UALDA,CAKC,UALDA,CAKC,cASqBA,MAAA,kBAAYA,YAG9BA,MAAA,WACIA,MAAA,mBACJA,QACAA,MAAA,WACIA,MAAA,GAKJA,QACAA,MAAA,YACIA,MAAA,IAKJA,QACAA,MAAA,aAAkBA,MAAA,IAAwCA,QAC1DA,MAAA,aACIA,MAAA,GAAA4V,EAAA,iBAOJ5V,QACAA,MAAA,aACIA,MAAA,IACJA,QACAA,MAAA,YAAAA,CAAkB,eAAlBA,CAAkB,aASNA,MAAA,IACJA,QACAA,MAAA,kBAAuBA,MAAA,sBAAeA,YAG9CA,MAAA,YAAAA,CAAkB,gBACDA,MAAA,mBAAAA,MAAAsN,GAAA,MAAAC,EAAAvN,QAAA,OAAAA,MAAAuN,EAAAsI,YAAAtI,EAAAsI,WAAA,GACT7V,MAAA,eAAUA,MAAA,IAIRA,aAAW,oCAjErBA,MAAA,eAAAiJ,EAAA4M,WAAA7V,CAAiC,cAAAiJ,EAAA4M,YAM7B7V,MAAA,GAAAA,MAAA,cAAAiJ,EAAA4M,WAAA7V,CAAgC,sBAAAiJ,EAAA4M,YAUhC7V,MAAA,GAAAA,MAAA,IAAAA,MAAA,KAAAiJ,EAAAiG,MAAA4G,WAAA7M,EAAA8M,aAAA,KAGA/V,MAAA,GAAAA,MAAA,WAAAiJ,EAAAiG,MAAAtO,MAAA,KAAAqI,EAAAiG,MAAAtO,MAAA2R,MAAAyD,gBAAA,MAAA/M,EAAAiG,MAAAtO,MAAA,KAAAqI,EAAAiG,MAAAtO,MAAA2R,MAAAhQ,OAAA,uBAOAvC,MAAA,GAAAA,MAAA,WAAAiJ,EAAAiG,MAAAtO,OAAA,MAAAqI,EAAAiG,MAAAtO,MAAAqV,UAAA,KAAAhN,EAAAiG,MAAAtO,MAAAqV,UAAA1T,QAAA,MAAA0G,EAAAiG,MAAAtO,MAAA,KAAAqI,EAAAiG,MAAAtO,MAAAsV,OAAA,wBAMclW,MAAA,GAAAA,MAAAiJ,EAAAiG,MAAAiH,aAAA,eAGTnW,MAAA,GAAAA,MAAA,OAAAiJ,EAAAiG,MAAAyG,OAQL3V,MAAA,GAAAA,MAAA,IAAAiJ,EAAAiG,MAAAkH,gBAAA,sBAOIpW,MAAA,GAAAA,MAAA,mBAAAiJ,EAAAoN,OAAA,KAAApN,EAAAoN,OAAAC,QACAtW,MAAA,oBAAA4D,GAGI5D,MAAA,GAAAA,MAAA,UAAAiJ,EAAAoN,OAAA,KAAApN,EAAAoN,OAAA9T,KAAA,KAOMvC,MAAA,GAAAA,MAAAiJ,EAAA4M,WAAA,uEAclB7V,MAAA,+CAIIA,MAAA,iBAAA6D,EAAAqL,MAAA,KAAArL,EAAAqL,MAAA5M,GAAAtC,CAAsB,OAAAsL,EAAA,2BAV9BtL,MAAA,WAMIA,MAAA,EAAAuW,EAAA,aAOJvW,8BAVIA,MAAA,QAAA8F,EAAA+P,YACA7V,MAAA,QAAA8F,EAAA+P,WAAA,eAKqB7V,MAAA,GAAAA,MAAA,UAAA8F,EAAAoJ,MAAA0C,MAAA,0CAMrB5R,MAAA,eAIIA,MAAA,yBAAAwW,EAAAxW,MAAAwM,GAAAnI,UAAAW,EAAAhF,QAAA,OAASA,MAAAgF,EAAAyR,aAAAD,EAAAlU,IAAuB,GAEhCtC,MAAA,YAIAA,MAAA,aAAwBA,MAAA,GAAiBA,SAAO,6BAF5CA,MAAA,GAAAA,MAAA,mBAAAwW,EAAAF,QAEoBtW,MAAA,GAAAA,MAAAwW,EAAAjU,KAAA,MAuB3BmU,EAAuB,MA1HpC,MA0HaA,UAA+B5E,KAY7BuE,aACP,OAAO1V,KAAKgW,SAAS1D,KAAM/Q,GAAMA,EAAEI,KAAO3B,KAAKuO,MAAMmH,OACzD,CAEWN,kBACP,OAAOpV,KAAKiW,UAAUb,WAC1B,CAEArV,YACYiO,EACAiI,GAA0B,IAAA1E,EAElCD,QAAOC,EAAAvR,KAHCA,KAAAgO,UACAhO,KAAAiW,YAnBLjW,KAAAkV,YAAa,EAEJlV,KAAAgW,SAAWE,IAEXlW,KAAA8V,aAAY,eAAAK,KAAA3E,KAAG,UAAO4E,SAC5B7E,EAAKvD,QAAQ8H,aAAavE,EAAKhD,MAAO6H,GAC5C7E,EAAKY,QAAQ,gBAAiB,IAAQZ,EAAKhD,MAAcmH,OAASU,EACtE,GAAC,gBAAAC,GAAA,OAAAF,EAAAG,MAAAtW,KAAAuW,UAAA,EAH2B,EAkB5B,EAzBSR,SAAuB,mBAAA5T,iBAAvB4T,GAAsB1W,MAAA6K,KAAA7K,MAAAmX,MAAA,EAAtBT,EAAuB,UAAAU,EAAApU,IAAA,MAAvB0T,EAAsBzT,UAAA,qBAAA6H,OAAA,CAAAoE,MAAA,SAAAgF,SAAA,CAAAlU,OAAAmD,MAAA,EAAAC,KAAA,EAAAC,OAAA,mwCAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IAvH3BvD,MAAA,EAAAqX,EAAA,eAuEArX,MAAA,EAAAsX,EAAA,YAcAtX,MAAA,qBACIA,MAAA,EAAAuX,EAAA,gBAYJvX,eA9FKA,MAAA,OAAAwD,EAAA0L,OAoEAlP,MAAA,GAAAA,MAAA,aAAAwD,EAAA0L,MAAA,KAAA1L,EAAA0L,MAAA0C,MAAA3Q,QAgBsBjB,MAAA,GAAAA,MAAA,UAAAwD,EAAAmT,8WA6BnB,CAACa,SAEJd,CAAuB,yMCrGnC,IAKYe,EAAsB,MAHnC,MAGaA,UAA8B3F,KA4B5B4F,cACP,OAAO/W,KAAKgX,SAASC,UACzB,CAEWF,YAAQA,GACf/W,KAAKgX,SAAS5L,KAAK2L,EACvB,CAUAhX,cACIuR,QA5CItR,KAAAkX,MAAQ,IAAIjM,IAAwB,GACpCjL,KAAAmX,SAAW,IAAIlM,KAAyB,GACxCjL,KAAAgX,SAAW,IAAI/L,IAAsC,IAG7CjL,KAAAoX,UAAsCC,MAAc,CAChErX,KAAKgX,SACLhX,KAAKkX,QACNhM,QACCoM,KAAa,MAAG,EAChBC,KAAU,GAAIC,OAAMC,aAChBzX,KAAKmX,SAAS/L,MAAK,GACnB,MAAMsM,KAAQC,QAAYC,KAAWJ,GAAQK,KAAKC,QAC5CC,KAAMJ,QAAYK,KAASR,GAAQK,KAAKC,QAC9C,SAAOG,MAAY,CACfC,UAAWT,GAAS,IAAIrE,KAAK,KAC7B+E,aAAcT,EACdU,WAAYL,GACf,IACJ,EACDzW,KAAK+W,MAAWC,MAAQD,EAAO/W,IAAKrB,GAAUA,EAAMsY,IAAI,gBAAa,EACrEC,KAAI,IAAMxY,KAAKmX,SAAS/L,MAAK,KAAM,EACnCqN,KAAY,IAGAzY,KAAAH,QAAUG,KAAKmX,SAASuB,eAUxB1Y,KAAAkO,SAAWlO,KAAKoX,OAAOlM,QACnC5J,KAAKiI,GACDA,EACKrI,OAAQqN,GAxDzB,SAASoK,EACLpK,EACAwI,GAEA,MAAMX,GAAKW,EAAQ6B,QAAU,IAAIvX,cACjC,QAASkN,EAAM0C,MAAMqB,KAChBpM,GACGA,EAAKtE,KAAKP,cAAciF,SAAS8P,MAC/BlQ,EAAKzE,QAAQ6Q,KAAM1I,GACjBA,EAAOhI,KAAKP,cAAciF,SAAS8P,IAGnD,CA4CmCuC,CAAWpK,EAAOvO,KAAKgX,SAASC,aAClDjE,KAAK,CAACC,EAAGC,IAAMD,EAAEkC,WAAajC,EAAEiC,cAMzCnV,KAAK6Y,aAAa,UAAW7Y,KAAKoX,OAAOrF,YAC7C,CAGO5D,aAAa2K,EAAgB,MAChC9Y,KAAK+Y,SACD,UACA,IAAM/Y,KAAKkX,MAAM9L,UAASyM,MAAOmB,WACjCF,EAER,CAGOzK,cACHrO,KAAKiZ,cAAc,UACvB,CAOanD,aACTvH,EACAmH,GAA2B,IAAAnE,EAAAvR,KAAA,SAAAwR,KAAA,YAE3B,MAAM0H,EAAgB,IAAIzH,IAAc,IACjClD,EACHmH,SACAzV,MAAO,OAELkZ,EAAW,IACV5K,EAAMtO,MAAMsY,IAAI,YAAYrX,OAAQwR,GAAMA,EAAE/Q,KAAO4M,EAAM5M,IAC5DuX,GACF5X,IAAKC,GAAM,IAAIkQ,IAAc,IAAKlQ,KAC9BtB,EAAQ,IAAImZ,IAAc,IACzB7K,EAAMtO,MACTkZ,aAEEE,QAAO,EAASC,MAAUrZ,EAAMsZ,UAAUC,YAChDjI,SAAK2F,MAAM9L,KAAKyM,KAAKC,OACpBvJ,EAAcmH,OAASA,EACjB2D,CAAQ,EAlBY,EAmB/B,EAzFSvC,SAAsB,mBAAA3U,iBAAtB2U,EAAqB,EAArBA,EAAsB,WAAA2C,EAAAC,IAAA,OAAtB5C,EAAqB6C,QAArB7C,EAAqB8C,UAAAC,WAFlB,SAEH/C,CAAsB,oNCSXzX,MAAA,WAGIA,MAAA,yBAAAya,EAAAza,MAAAsN,GAAAjJ,UAAAkJ,EAAAvN,MAAA,UAASA,MAAAuN,EAAAmN,WAAAD,EAAAnY,IAAoB,GAE7BtC,MAAA,QACIA,MAAA,qBAIJA,QACAA,MAAA,QAAIA,MAAA,GAAsCA,QAC1CA,MAAA,UAAAA,CAAuB,+CAcfA,MAAA,qBAOJA,WAAO,kDAzBHA,MAAA,GAAAA,MAAA,UAAAO,EAAAoa,SAAA1T,SAAAwT,EAAAnY,KAGJtC,MAAA,GAAAA,MAAAya,EAAAzE,cAAAyE,EAAAlY,MAIIvC,MAAA,GAAAA,MAAA,wBAAAuP,EAAAvP,MAAA,IAAAO,EAAAqa,gBAAArL,EAAAtI,SAAAwT,EAAAnY,KAAAtC,CAIC,oBAAA6a,EAAA7a,MAAA,IAAAO,EAAAqa,eAAA,KAAAC,EAAA5T,SAAAwT,EAAAnY,KAODtC,MAAA,GAAAA,MAAA,WAAA8a,EAAA9a,MAAA,MAAAO,EAAAqa,gBAAAE,EAAA7T,SAAAwT,EAAAnY,IAAA,mEAxDxBtC,MAAA,WAAAA,CAGC,YAHDA,CAGC,YAHDA,CAGC,OAHDA,CAGC,WAMgCA,MAAA,mBAAAA,MAAA+a,GAAA,MAAAlX,EAAA7D,QAAA,OAASA,MAAA6D,EAAA6W,WAAW,KAAI,GACrC1a,MAAA,uDAYJA,QACAA,MAAA,QACAA,MAAA,WACIA,MAAA,sBACJA,YAGRA,MAAA,YACIA,MAAA,GAAAgb,EAAA,iCAoCJhb,WAAQ,mCAtDQA,MAAA,GAAAA,MAAA,kBAAAmM,EAAAnM,MAAA,IAAAiJ,EAAAgS,QAAA,KAAA9O,EAAAlL,UAAAgI,EAAA0R,SAAA1Z,OAAAjB,CAGC,gBAAAiJ,EAAA0R,SAAA1Z,OAAA,WAAAia,EAAAlb,MAAA,IAAAiJ,EAAAgS,QAAA,KAAAC,EAAAja,UAAAgI,EAAA0R,SAAA1Z,QAULjB,MAAA,GAAAA,MAAA,WAAAuP,EAAAvP,MAAA,KAAAiJ,EAAAgS,QAAA,KAAA1L,EAAAtO,OAAA,aAMcjB,MAAA,GAAAA,MAAA,UAAAA,MAAA,MAAAiJ,EAAAgS,OAAA,wBAkDlCjb,MAAA,aAGIA,MAAA,oBACAA,MAAA,OAAGA,MAAA,kCAA4BA,eAYlCmb,EAAgC,MA3G7C,MA2GaA,EAMTza,YACYmJ,EACAkI,GADApR,KAAAkJ,YACAlJ,KAAAoR,OAPLpR,KAAAH,SAAU,EACVG,KAAAga,SAAqB,GACZha,KAAAsa,SAAQG,MAAqBza,KAAKoR,KAAKsJ,SAAS/Y,IAChD3B,KAAAia,aAAeja,KAAKkJ,UAAU+Q,YAK3C,CAEUF,WAAWpY,GAAU,IAAA4P,EAAAvR,KAAA,SAAAwR,KAAA,YAC9B,GAAW,MAAP7P,EAAY,CACZ,MAAM2Y,QAAc/I,EAAK+I,MAAMpP,QAAKyP,KAAK,IAAInB,YAEzCjI,EAAKyI,SADLzI,EAAKyI,SAAS1Z,SAAWga,EAAMha,OACfga,EAAMhZ,IAAKH,GAAMA,EAAEQ,IAClB,QAGjB4P,EAAKyI,SADLzI,EAAKyI,SAAS1T,SAAS3E,GACP4P,EAAKyI,SAAS9Y,OAAQC,GAAMA,IAAMQ,GACjC,IAAI4P,EAAKyI,SAAUrY,EAC3C,EAV6B,EAWlC,CAEaiZ,iBAAc,IAAAC,EAAA7a,KAAA,SAAAwR,KAAA,YACvBqJ,EAAKhb,SAAU,EAEf,MAAM0J,SADsBsR,EAAKZ,aAAa/O,QAAKyP,KAAK,IAAInB,aACjCtY,OAAQC,IAAO0Z,EAAKb,SAAS1T,SAASnF,UAC3D0Z,EAAK3R,UACN4R,aAAa,CAAEC,eAAgBxR,IAC/ByR,MAAM,IAAM,MACjBH,EAAKhb,SAAU,CAAM,EAPE,EAQ3B,CAEaob,kBAAe,IAAAC,EAAAlb,KAAA,SAAAwR,KAAA,YACxB,MAAM2J,QAAsBD,EAAKjB,aAAa/O,QAAKyP,KAAK,IAAInB,YACtDjQ,KAAOC,MAAO2R,EAAchP,OAAO+O,EAAKlB,iBACxCkB,EAAKhS,UACN4R,aAAa,CAAEC,eAAgBxR,IAC/ByR,MAAM,IAAM,MACjBE,EAAKrb,SAAU,CAAM,EANG,EAO5B,EAzCS2a,SAAgC,mBAAArY,iBAAhCqY,GAAgCnb,MAAA6K,MAAA7K,MAAAmX,MAAA,EAAhCgE,EAAgC,UAAAlH,EAAAjR,IAAA,MAAhCmY,EAAgClY,UAAA,iCAAAE,MAAA,GAAAC,KAAA,EAAAC,OAAA,q2BAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IAxGrCvD,MAAA,QAAAA,CAAK,aAALA,CAAK,UAEmBA,MAAA,yCAAmCA,QACnDA,MAAA,aAAAA,CAA8B,cAChBA,MAAA,WAAKA,YAGvBA,MAAA,EAAA+b,EAAA,gBAqEA/b,MAAA,aAAAA,CAEC,cACyBA,MAAA,0BAASwD,EAAA+X,gBAAgB,GAC3Cvb,MAAA,wBACJA,QACAA,MAAA,eAAsBA,MAAA,0BAASwD,EAAAoY,iBAAiB,GAC5C5b,MAAA,yBACJA,YAGRA,MAAA,GAAAgc,EAAA,yBAAAhc,+BA9ESA,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,QAAAR,CAAgB,WAAAic,EAAA,sMA+FpBd,CAAgC,6RCjDhCe,EAAqB,MAHlC,MAGaA,UAA6BpK,KAsC3BhI,kBACP,OAAQnJ,KAAKqJ,MAAQrJ,KAAKqJ,OAASrJ,KAAKoR,KAAKsJ,UAAU/Y,EAC3D,CAEWyE,iBACP,MAAMsE,EAAO1K,KAAKwb,MAAMvE,WACxB,SAAOzN,MAAOkB,EAAKpJ,IAAKC,GAAMA,EAAEO,UACpC,CAEA/B,YACYqR,EACAqK,EACAxF,GAA0B,IAAA1E,EAElCD,QAAOC,EAAAvR,KAJCA,KAAAoR,OACApR,KAAAyb,UACAzb,KAAAiW,YAjDJjW,KAAA0b,SAAW,IAAIzQ,IAAgB,GAE/BjL,KAAAwb,MAAQ,IAAIvQ,IAAgC,IAE5CjL,KAAAmX,SAAW,IAAIlM,KAAyB,GAExCjL,KAAA2b,UAAY,IAAI1Q,IAAwB,OAEhCjL,KAAA0K,KAAO1K,KAAKwb,MAAM9C,eAElB1Y,KAAAH,QAAUG,KAAKmX,SAASuB,eAExB1Y,KAAA0J,SAAW1J,KAAK2b,UAAUjD,eAE1B1Y,KAAA4b,SAAW5b,KAAKoR,KAAKyK,gBAAgB3Q,QACjDhK,KAAQC,KAAQA,IAAC,EACjBoW,KAAWpW,MACP2a,OAAa3a,EAAEQ,GAAI,qBAAqBuJ,QACpC6Q,KAAY5a,MAAM6a,MAAG,QACxB,EAEL1a,KAAKH,GAAOA,EAAE8a,SAAgC,KAAE,EAChDzD,KAAKrX,GACDnB,KAAKiW,UAAUiG,KAAK,2BAA4B/a,GAAGgb,iBAAc,EAErE1D,KAAY,IAGAzY,KAAAoc,aAAepc,KAAK4b,SAAS1Q,QACzC5J,KAAKH,GAAMA,EAAEib,cAAgB,KAEjBpc,KAAAia,aAAeja,KAAK4b,SAAS1Q,QACzC5J,KAAKH,GAAMA,EAAE4Z,gBAAkB,KAG5B/a,KAAAqJ,KAAO,GAiBVrJ,KAAK6Y,aACD,WACA7Y,KAAKoR,KAAKyK,gBAAgB9J,UAAS,eAAAoE,KAAA3E,KAAC,UAAO6K,GACvC,GAAIA,EAAK,CACL,MAAM3R,SAAc6G,EAAK+K,mBAAmBD,EAAI1a,KAAKL,IAChDC,GAAM,IAAIC,IAAaD,IAE5BgQ,EAAKoK,UAAUvQ,KACXmG,EAAK0E,UAAU3Q,IAAI,iBACf+W,EAAI3S,UACJ,OAER6H,EAAKiK,MAAMpQ,KAAKV,EAAI,CAE5B,GAAC,gBAAA2L,GAAA,OAAAF,EAAAG,MAAAtW,KAAAuW,UAAA,EAZkC,IAc3C,CAMagG,oBAAoBhO,GAAoB,IAAAsM,EAAA7a,KAAA,SAAAwR,KAAA,YACjD,MAAMgL,EAAM3B,EAAKY,QAAQgB,KAGvBvL,IAA6B,CAC3BtQ,KAAM,CACFyO,KAAMwL,EAAKc,UAAU1E,WACrB1I,QACA7D,KAAMmQ,EAAKnQ,KACX7K,QAASgb,EAAKhb,QACd8R,kBAAoBxQ,GAAM0Z,EAAKlJ,kBAAkBxQ,GACjDyR,cAAgBzR,GAAM0Z,EAAKjI,cAAczR,MAG3C8a,QAAgBS,QAAQC,KAAK,CAC/BH,EAAII,kBAAkB3c,MACjBiL,QAAK2R,KAAO1b,GAAmB,SAAbA,EAAEH,SACpBwY,YACLgD,EAAIM,cAActD,cAEtBgD,SAAIO,QACGd,GAAShb,UAAUsN,OAASA,CAAM,EArBQ,EAsBrD,CAEaxE,QAAQ7D,EAAqB,IAAI1E,KAAc,IAAA0Z,EAAAlb,KAAA,SAAAwR,KAAA,YACxD,MAAMgL,EAAMtB,EAAKO,QAAQgB,KAGvBxW,IAA4B,CAC1BrF,KAAM,CACFsF,OACAE,WAAY8U,EAAK9U,cAGnB6V,QAAgBS,QAAQC,KAAK,CAC/BH,EAAII,kBAAkB3c,MACjBiL,QAAK2R,KAAO1b,GAAmB,SAAbA,EAAEH,SACpBwY,YACLgD,EAAIM,cAActD,cAEtB,GAAwB,SAApByC,GAASjb,OAAmB,OAChC,MAAM0J,EAAOwQ,EAAKM,MAAMvE,WAClB5P,EAAQqD,EAAKsS,UAAWzK,GAAQA,EAAI5Q,KAAOuE,EAAKvE,IAClD0F,GAAS,EACTqD,EAAKnD,OAAOF,EAAO,EAAG4U,EAAQhb,SAASiF,MAEvCwE,EAAKxD,KAAK+U,EAAQhb,SAASiF,MAE/BgV,EAAK+B,WAAW/B,EAAK9J,KAAKsJ,SAAS/Y,GAAI+I,GAAMmI,KACzC,KACIqI,EAAKM,MAAMpQ,KAAK,IAAIV,IACpB8R,EAAIO,OAAK,EAEb,IAAOP,EAAII,kBAAkB/c,SAAU,EACzC,EA9BsD,EA+B5D,CAEO4J,WAAWvD,GACd,MAAMwE,EAAO1K,KAAKwb,MAAMvE,WAClB5P,EAAQqD,EAAKsS,UAAWzK,GAAQA,EAAI5Q,KAAOuE,EAAKvE,IAClD0F,GAAS,EAAGqD,EAAKnD,OAAOF,EAAO,EAAGnB,GACjCwE,EAAKxD,KAAKhB,GACflG,KAAKid,WAAWjd,KAAKoR,KAAKsJ,SAAS/Y,GAAI+I,GAAMmI,KAAK,IAC9C7S,KAAKwb,MAAMpQ,KAAK,IAAIV,IAE5B,CAEaf,UACTzD,EACA0D,EAAyB,IAAS,IAAAsT,EAAAld,KAAA,SAAAwR,KAAA,YAElC,MAAMxF,KAAQxC,MAAOtD,EAAKzE,QAAQH,IAAKC,GAAMA,EAAEM,QACzC2a,EAAMU,EAAKzB,QAAQgB,KAGvB1Q,IAAkC,CAChCnL,KAAM,CACFsL,OAAQhG,EACR0D,SACAoC,WAGFiQ,QAAgBS,QAAQC,KAAK,CAC/BH,EAAII,kBAAkB3c,MACjBiL,QAAK2R,KAAO1b,GAAmB,SAAbA,EAAEH,SACpBwY,YACLgD,EAAIM,cAActD,cAEtB,GAAwB,SAApByC,GAASjb,OAAmB,OAChC,MAAM0J,EAAOwS,EAAK1B,MAAMvE,WAClB5P,EAAQqD,EAAKsS,UAAWzK,GAAQA,EAAI5Q,KAAOuE,EAAKvE,IAClD0F,GAAS,EACTqD,EAAKnD,OAAOF,EAAO,EAAG4U,EAAQhb,SAASiF,MAEvCwE,EAAKxD,KAAK+U,EAAQhb,SAASiF,MAE/BgX,EAAKD,WAAWC,EAAK9L,KAAKsJ,SAAS/Y,GAAI+I,GAAMmI,KACzC,KACIqK,EAAK1B,MAAMpQ,KAAK,IAAIV,IACpB8R,EAAIO,OAAK,EAEb,IAAOP,EAAII,kBAAkB/c,SAAU,EACzC,EAjCgC,EAkCtC,CAEa+S,cAAcnR,GAAyB,IAAA0b,EAAAnd,KAAA,SAAAwR,KAAA,YAChD,MAAMgL,EAAMW,EAAK1B,QAAQgB,KAGvB9H,IAAoC,CAClC/T,KAAM,CACFyO,KAAM8N,EAAKxB,UAAU1E,WACrBxV,aAGFwa,QAAgBS,QAAQC,KAAK,CAC/BH,EAAII,kBAAkB3c,MACjBiL,QAAK2R,KAAO1b,GAAmB,SAAbA,EAAEH,SACpBwY,YACLgD,EAAIM,cAActD,cAEtB,MAAwB,SAApByC,GAASjb,OAA0B,IACvCwb,EAAIO,QACGd,EAAQhb,SAASQ,QAAQ,EAlBgB,EAmBpD,CAEawI,WAAW/D,GAAkB,IAAAkX,EAAApd,KAAA,SAAAwR,KAAA,YACtC,MAAMyK,QAAO,EAASoB,MAClB,CACIC,MAAO,uBACPC,QAAS,qDAAqDrX,EAAKtE,sBACnE4b,KAAM,CACFpc,KAAM,OACNqc,MAAO,iBACPF,QAAS,WAGjBH,EAAK3B,SAET,GAAuB,SAAnBQ,EAAQjb,OAAmB,OAC/Bib,EAAQpc,QAAQ,6BAChB,MAAM6K,EAAO0S,EAAK5B,MAAMvE,WAAW/V,OAAQqR,GAAQrM,EAAKvE,KAAO4Q,EAAI5Q,IACnEyb,EAAKH,WAAWG,EAAKhM,KAAKsJ,SAAS/Y,GAAI+I,GAAMmI,KACzC,KACIuK,EAAK5B,MAAMpQ,KAAK,IAAIV,IACpBuR,EAAQc,OAAK,EAEjB,IAAMd,EAAQpc,QAAQ,IACxB,EAtBoC,EAuB1C,CAEagK,aAAa3D,EAAoB0D,GAAsB,IAAA8T,EAAA1d,KAAA,SAAAwR,KAAA,YAChE,MAAMyK,QAAO,EAASoB,MAClB,CACIC,MAAO,8BACPC,QAAS,wDAAwD3T,EAAOhI,eAAesE,EAAKtE,SAC5F4b,KAAM,CACFpc,KAAM,OACNqc,MAAO,iBACPF,QAAS,WAGjBG,EAAKjC,SAET,GAAuB,SAAnBQ,EAAQjb,OAAmB,OAC/Bib,EAAQpc,QAAQ,oCAChB,MAAM6K,EAAOgT,EAAKlC,MAAMvE,WACxBvM,EAAKnD,OACDmD,EAAKsS,UAAWzK,GAAQA,EAAI5Q,KAAOuE,EAAKvE,IACxC,EACA,IAAIH,IAAa,IACV0E,EACHzE,QAASyE,EAAKzE,QAAQP,OAAQyR,GAAQA,EAAIhR,KAAOiI,EAAOjI,OAGhE+b,EAAKT,WAAWS,EAAKtM,KAAKsJ,SAAS/Y,GAAI+I,GAAMmI,KACzC,KACI6K,EAAKlC,MAAMpQ,KAAK,IAAIV,IACpBuR,EAAQc,OAAK,EAEjB,IAAMd,EAAQpc,QAAQ,IACxB,EA9B8D,EA+BpE,CAEa8d,aAAU,IAAAC,EAAA5d,KAAA,SAAAwR,KAAA,YACnB,MAAMqM,QAAeD,EAAKjM,kBAAkBiM,EAAKxM,KAAKsJ,SAAS/Y,KACvDwa,uBAAwByB,EAAKhC,SAAS1Q,QAAKyP,KAAK,IAAInB,YACtD9O,EAAOkT,EAAKpC,MAAMvE,WAClBjL,KAAQxC,SAAO8O,MAAQ5N,EAAKpJ,IAAKC,GAAM,CAACA,EAAEO,YAAaP,EAAEG,SACzD8a,EAAMoB,EAAKnC,QAAQgB,KAGvBqB,KAAsC,CACpCld,KAAM,CACFid,SACA7R,QACAmQ,gBACA4B,UAAY7K,GAAM0K,EAAK9C,aAAa,CAAEqB,cAAejJ,OAGvD+I,QAAgBS,QAAQC,KAAK,CAC/BH,EAAII,kBAAkB3c,MACjBiL,QAAK2R,KAAO1b,GAAmB,SAAbA,EAAEH,SACpBwY,YACLgD,EAAIM,cAActD,cAEE,SAApByC,GAASjb,QACb4c,EAAKI,aAAaJ,EAAKxM,KAAKsJ,SAAS/Y,GAAIsa,EAAQhb,UAAU4R,KACvD,IAAM2J,EAAIO,QACV,IAAOP,EAAII,kBAAkB/c,SAAU,EACzC,EA1BiB,EA2BvB,CAEaoe,aAAU,IAAAC,EAAAle,KAAA,SAAAwR,KAAA,YACnB,MAAMgL,EAAM0B,EAAKzC,QAAQgB,KAAK3c,KACxBmc,QAAgBS,QAAQC,KAAK,CAC/BH,EAAII,kBAAkB3c,MACjBiL,QAAK2R,KAAO1b,GAAmB,SAAbA,EAAEH,SACpBwY,YACLgD,EAAIM,cAActD,cAEtB,GAAwB,SAApByC,GAASjb,OAAmB,OAChCwb,EAAII,kBAAkB/c,QAAU,mBAChC,MAAM6K,EAAOwT,EAAK1C,MAAMvE,WAClBoF,EAAM6B,EAAK9M,KAAKsJ,SAChByD,KAAe3U,MAAOyS,EAAQhb,SAASkL,OAAOzB,GAAO,YACrDwT,EAAKjB,WAAWZ,EAAI1a,GAAIwc,GAAcnD,MAAO7Z,IAC/Cid,cAAY,iCACZ5B,EAAIO,QACE5b,KACT,EACDkd,MACI,wCAAwCpC,EAAQhb,SAASX,yBAE7Dkc,EAAIO,OAAQ,EArBO,EAsBvB,CAEQE,WAAWqB,EAAiB5T,GAChC,SAAO6T,OAAeD,EAAS,CAC3B3c,GAAI2c,EACJ1c,KAAM,WACNqa,QAASvR,EACTtF,YAAa,qBAAqBkZ,MACnC9E,WACP,CAEasB,aAAac,GAA0B,IAAA4C,EAAAxe,KAAA,SAAAwR,KAAA,YAChD,MAAMiN,QAAqBD,EAAK5C,SAAS1Q,QAAKyP,KAAK,IAAInB,YACvD,SAAO+E,OAAeC,EAAKpN,KAAKsJ,SAAS/Y,GAAI,CACzCA,GAAI6c,EAAKpN,KAAKsJ,SAAS/Y,GACvBC,KAAM,oBACNqa,QAAS,IAAKwC,KAAiB7C,GAC/BxW,YAAa,yBAAyBoZ,EAAKpN,KAAKsJ,SAAS/Y,OAC1D6X,WAAY,EAPiC,EAQpD,CAEc8C,mBAAmBgC,GAAe,SAAA9M,KAAA,YAC5C,MAAM9G,SAAO,EAAOoR,OAAawC,EAAS,YAAY9E,aACjDyC,QACL,OAAOvR,aAAgBgU,MAAQhU,EAAO,EAAG,EAHG,EAIhD,CAEaiH,kBACT2M,EAAkBte,KAAKoR,KAAKsJ,SAAS/Y,IAAE,SAAA6P,KAAA,YAEvC,MAAME,SAAQ,EACJoK,OAAawC,EAAS,mBAAmB9E,aACjDyC,QACF,OAAOvK,aAAiBgN,MAAShN,EAAgB,EAAG,EALb,EAM3C,CAEQsM,aAAaM,EAAiBT,GAClC,SAAOU,OAAeD,EAAS,CAC3B3c,GAAI2c,EACJ1c,KAAM,kBACNqa,QAAS4B,EACTzY,YAAa,4BAA4BkZ,MAC1C9E,WACP,CAEOmF,eAAepQ,EAAsBuE,GACxC,IAAI7B,EAAQ1C,EAAM0C,MAClB,MAAM2N,EAAQ3N,EAAMqB,KACfpM,GACGA,EAAKvE,KAAOmR,EAASnR,IACrBmR,EAASrR,SAASnB,SACd4F,EAAKzE,SAAS+Q,OACV,CAACC,EAAGC,IACAD,GACCK,EAASrR,QAAQ6Q,KAAMK,GAAQD,EAAE/Q,KAAOgR,EAAIhR,IACvC,EACA,GACV,IAGhBid,SACQA,EAAc3R,UAAY,EAC3BgE,EAAQA,EAAM9E,OAAO,CAClB,IAAI3K,IAAa,IAAKsR,EAAU7F,SAAU,MAElC,IAAIwE,IAAc,IAC7BlD,EACH0C,QACAhR,MAAO,MAGf,EA7XSsb,SAAqB,mBAAApZ,iBAArBoZ,GAAoBlc,MAAA6K,MAAA7K,MAAAmX,MAAAnX,MAAAwf,MAAA,EAApBtD,EAAqB,WAAAuD,EAAApF,IAAA,OAArB6B,EAAoB5B,QAApB4B,EAAoB3B,UAAAC,WAFjB,SAEH0B,CAAqB,6TCRhC,IAsBWwD,EAAoB,MApBjC,MAoBaA,YAAoB,mBAAA5c,iBAApB4c,EAAoB,EAApBA,EAAoB,UAAAC,EAAAC,IAAA,MAApBF,MAAoB,UAAAC,EAAAE,IAAA,UAjBzBC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,IACAC,KACAC,QAKKhB,CAAoB,uPC7E1B,MAAM7I,EAAgC,CACzC,CAAEvU,GAAI,UAAWC,KAAM,UAAW4b,KAAM,CAAEC,MAAO,kBAAoB9H,OAAQ,QAC7E,CAAEhU,GAAI,WAAYC,KAAM,WAAY4b,KAAM,CAAEC,MAAO,mBAAqB9H,OAAQ,WAChF,CACIhU,GAAI,YACJC,KAAM,YACN4b,KAAM,CAAEC,MAAO,oBACf9H,OAAQ,WAEZ,CAAEhU,GAAI,QAASC,KAAM,QAAS4b,KAAM,CAAEC,MAAO,gBAAkB9H,OAAQ,WACvE,CACIhU,GAAI,YACJC,KAAM,YACN4b,KAAM,CAAEC,MAAO,oBACf9H,OAAQ,WAEZ,CACIhU,GAAI,YACJC,KAAM,YACN4b,KAAM,CAAEC,MAAO,oBACf9H,OAAQ,yNCHJtW,MAAA,UAAAA,CAOC,qBAPDA,CAOC,aAIWA,MAAA,yBAAAC,GAAA,MAAA0gB,EAAA3gB,MAAA+a,GAAA/S,MAAAnE,EAAA7D,MAAA,UAAAA,MAAA6D,EAAAkZ,aAAA4D,GAAA1gB,EAAA,GAFJD,UAMJA,MAAA,cAAaA,MAAA,yBAAA2gB,EAAA3gB,MAAA+a,GAAA/S,MAAApD,EAAA5E,MAAA,UAASA,MAAA4E,EAAAgc,WAAAD,GAAa,GAC/B3gB,MAAA,cAAUA,MAAA,YAAMA,WAAW,oCALvBA,MAAA,GAAAA,MAAA,UAAAG,EAAA4c,aAAA4D,GAAA,2BAfhB3gB,MAAA,YAIIA,MAAA,EAAA6gB,EAAA,aAmBJ7gB,8BAfJA,MAAA,GAAAA,MAAA,UAAAiJ,EAAA8T,aAAA/c,CACE,eAAAiJ,EAAAgG,UAAA,0CAeEjP,MAAA,cAAAA,CAGC,eAEOA,MAAA,oBACAA,MAAA,cAGIA,MAAA,kBAAAC,GAAAD,MAAAyU,GAAA,MAAA1E,EAAA/P,QAAA,OAAUA,MAAA+P,EAAA+Q,iBAAA7gB,GAAwB,GAHtCD,UAMJA,MAAA,eAAmCA,MAAA,mBAAAA,MAAAyU,GAAA,MAAAsM,EAAA/gB,QAAA,OAASA,MAAA+gB,EAAAC,UAAS,GACjDhhB,MAAA,gBACJA,QACAA,MAAA,eAAmCA,MAAA,mBAAAA,MAAAyU,GAAA,MAAAS,EAAAlV,QAAA,OAASA,MAAAkV,EAAA+L,kBAAiB,GACzDjhB,MAAA,oBACJA,SAAS,wBAGTA,MAAA,aAGIA,MAAA,oBACAA,MAAA,OAAGA,MAAA,uCAAiCA,eAMvCkhB,EAA4B,MA/DzC,MA+DaA,EAITxgB,YACYygB,EACAC,GADAzgB,KAAAwgB,SACAxgB,KAAAygB,cALLzgB,KAAAoc,aAAyB,GACzBpc,KAAAH,SAAU,CAKd,CAEU2N,WAAQ,IAAA+D,EAAAvR,KAAA,SAAAwR,KAAA,YACjBD,EAAK6K,oBACM7K,EAAKiP,OAAOpE,aAAalR,QAAKyP,KAAK,IAAInB,cAAgB,EAAG,EAFpD,EAGrB,CAEO6G,UACHrgB,KAAKoc,aAAalV,KAAK,GAC3B,CAEO+Y,WAAW5Y,GACdrH,KAAKoc,aAAa7U,OAAOF,EAAO,EACpC,CAMO8Y,iBAAiBlgB,GAEpB,GAAIA,EAAMG,OAAQ,CACd,MAAMG,EAAON,EAAMG,OAAOC,MAAM,GAEhC,GAAIE,EAAM,CACN,MAAMmgB,EAAS,IAAIjgB,WACnBigB,EAAOze,WAAW1B,EAAM,SACxBmgB,EAAOhgB,iBAAiB,OAASigB,IAC7B,MAAMpX,KACF1I,MAAW8f,EAAIC,WAAmB9f,SAAW,GACjD,UAAauO,UAAuB9F,EAChCvJ,KAAKoc,aAAalV,KAAKmI,GAE3BrP,KAAKoc,gBAAe5S,MAAOxJ,KAAKoc,cAChCnc,EAAMG,OAAOyE,MAAQ,KAEzB6b,EAAOhgB,iBAAiB,QAAUS,MAC9Bid,MAAY,uBAAsB,EAIlD,CAEakC,kBAAe,IAAAzF,EAAA7a,KAAA,SAAAwR,KAAA,YACxBqJ,EAAKhb,SAAU,EACf,MAAMghB,EAAgBhG,EAAKuB,aAAalb,OAAQC,GAAMA,GAAKA,EAAE8F,cACvD4T,EAAK2F,OAAO1F,aAAa,CAAEsB,aAAcyE,IAC/ChG,EAAK4F,YAAY1D,OAAQ,EAJD,EAK5B,CAEOzO,UAAUwS,EAAa5a,GAC1B,OAAO4a,CACX,EA3DSP,SAA4B,mBAAApe,iBAA5Boe,GAA4BlhB,MAAA6K,KAAA7K,MAAAmX,MAAA,EAA5B+J,EAA4B,UAAA7Y,EAAArF,IAAA,MAA5Bke,EAA4Bje,UAAA,6BAAAE,MAAA,GAAAC,KAAA,EAAAC,OAAA,m6BAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IA5DjCvD,MAAA,WAAAA,CAAQ,QACAA,MAAA,uBAAiBA,QACrBA,MAAA,aAAAA,CAA8B,cAChBA,MAAA,WAAKA,YAGvBA,MAAA,EAAA0hB,EAAA,cAwBA1hB,MAAA,EAAA2hB,EAAA,gBAmBA3hB,MAAA,EAAA4hB,EAAA,yBAAA5hB,8BA1CKA,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,QAAAR,CAAgB,WAAA4D,GAyBhB5D,MAAA,GAAAA,MAAA,QAAAwD,EAAAhD,QAAA,0EA4BA0gB,CAA4B","names":["i0","$event","_r5","ctx_r4","handleFileEvent","ctx_r6","downloadTemplate","ctx_r3","loading","CateringImportMenuModalComponent","constructor","this","event","EventEmitter","element","target","files","length","file","fileReader","FileReader","addEventListener","e","data","csvToJson","result","emit","reason","metadata","filter","_","type","toLowerCase","map","i","CateringItem","options","tags","id","name","group","category","multiple","unit_price","readAsText","downloadFile","t","_angular_core__WEBPACK_IMPORTED_MODULE_1__","Xpm","selectors","outputs","decls","vars","consts","template","rf","ctx","CateringImportMenuModalComponent_button_3_Template","CateringImportMenuModalComponent_main_4_Template","CateringImportMenuModalComponent_ng_template_5_Template","_r2","ctx_r7","form","controls","invalid","touched","ctx_r8","item_r15","_r17","$implicit","ctx_r16","removeTag","CateringItemModalComponent_form_4_div_4_mat_chip_row_6_Template","_r19","ctx_r18","addTag","ctx_r9","tag_list","_r13","separators","ctx_r11","CateringItemModalComponent_form_4_div_2_Template","CateringItemModalComponent_form_4_div_3_Template","CateringItemModalComponent_form_4_div_4_Template","CateringItemModalComponent_form_4_div_5_Template","CateringItemModalComponent_form_4_div_6_Template","_r21","ctx_r20","value","ctx_r22","ctx_r23","ctx_r24","ctx_r25","CateringItemModalComponent_form_4_div_27_Template","ctx_r1","description","tmp_6_0","get","hasTag","_c6","renderPercent","images","_r27","ctx_r26","saveChanges","ctx_r2","dirty","option_r28","CateringItemModalComponent","item","_data","categories","tag","includes","FormGroup","FormControl","Validators","accept_points","discount_cap","ENTER","COMMA","SPACE","markAsDirty","input","trim","push","setValue","existing_tag","index","indexOf","splice","randomInt","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_2__","i18n_0","$localize","CateringItemModalComponent_button_3_Template","CateringItemModalComponent_form_4_Template","CateringItemModalComponent_footer_5_Template","CateringItemModalComponent_ng_template_6_Template","CateringItemModalComponent_mat_option_10_Template","_r3","is_enabled","CateringMenuItemComponent_div_1_button_12_Template","show_options","ctx_r0","symbol","can_edit","option_r8","editOption","_r16","ctx_r14","removeOption","CateringMenuItemComponent_div_2_div_1_button_7_Template","CateringMenuItemComponent_div_2_div_1_button_8_Template","CateringMenuItemComponent_div_2_div_1_Template","CateringMenuItemComponent","_catering","is_editable","hide_for_zones","zone","state","list","unique","updateItem","currency","addOption","option","deleteOption","editItem","addItem","removeItem","deleteItem","i1","inputs","attrs","_c0","CateringMenuItemComponent_div_1_Template","CateringMenuItemComponent_div_2_Template","item_r5","CateringMenuComponent_ng_container_2_ng_container_1_Template","menu","item_r8","CateringMenuComponent_mat_tab_4_ng_container_1_Template","group_r6","tab_menu","CateringMenuComponent","shown_tab","BehaviorSubject","pipe","menu_map","next","CateringMenuComponent_ng_container_2_Template","CateringMenuComponent_mat_tab_4_Template","CateringMenuComponent_ng_template_5_Template","tmp_0_0","CateringItemOptionModalComponent_form_4_div_1_Template","CateringItemOptionModalComponent_form_4_div_2_Template","CateringItemOptionModalComponent_form_4_div_3_Template","CateringItemOptionModalComponent_form_4_div_4_Template","_r12","option_r13","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringItemOptionModalComponent_button_3_Template","CateringItemOptionModalComponent_form_4_Template","CateringItemOptionModalComponent_footer_5_Template","CateringItemOptionModalComponent_ng_template_6_Template","CateringItemOptionModalComponent_mat_option_10_Template","opt_r2","CateringOrderItemComponent_ng_container_0_ng_container_14_div_1_Template","_r6","ctx_r5","toggle","CateringOrderItemComponent_ng_container_0_ng_container_14_Template","active","amount","quantity","option_list","ACTIVE_ITEMS","Set","CateringOrderItemComponent","item_key","order_id","ngOnInit","has","delete","add","_angular_core__WEBPACK_IMPORTED_MODULE_0__","CateringOrderItemComponent_ng_container_0_Template","order_r3","CateringOrderListComponent","_orders","order_list","filtered","startPolling","ngOnDestroy","stopPolling","trackByFn","order","undefined","CateringOrderListComponent_li_18_Template","CateringOrderListComponent_div_20_Template","CateringOrderListComponent_mat_progress_bar_22_Template","tmp_2_0","item_r11","ctx_r15","updateItemQuantity","ctx_r19","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_4_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_a_counter_8_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_9_Template","ctx_r10","code","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_Template","cat_r8","menu_items","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_Template","CateringOrderModalComponent_div_0_ng_container_1_Template","show_order_details","_r4","_r28","ctx_r27","item_count","_r30","ctx_r29","ctx_r31","saveOrder","CateringOrderModalComponent_footer_1_ng_container_1_Template","CateringOrderModalComponent_footer_1_ng_template_2_Template","_r25","ctx_r34","optionsFor","item_r33","CateringOrderModalComponent_ng_template_4_div_4_div_4_Template","_r37","ctx_r36","total_cost","ctx_r32","CateringOrderModalComponent_ng_template_4_div_4_Template","items","CateringOrderModalComponent","AsyncHandler","_org","currency_code","super","_this","_asyncToGenerator","CateringOrder","rules","getCateringConfig","space","level","parent_id","subscribe","cat","cateringItemAvailable","updateMenuQuantities","timeout","choose_options","old_item","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","sort","a","b","localeCompare","join","confirmOrder","_angular_core__WEBPACK_IMPORTED_MODULE_4__","features","CateringOrderModalComponent_div_0_Template","CateringOrderModalComponent_footer_1_Template","CateringOrderModalComponent_ng_template_2_Template","CateringOrderModalComponent_ng_template_4_Template","opt_r6","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_div_4_Template","_r11","group_r1","updateGroupOption","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_Template","opt_r14","_r18","ctx_r17","option_state","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_div_4_Template","ctx_r13","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_Template","CateringOrderOptionsModalComponent_div_7_ng_container_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_Template","CateringOrderOptionsModalComponent","groups","group_list","saveOptions","CateringOrderOptionsModalComponent_div_7_Template","notes","CateringOrderComponent_div_0_button_15_Template","show_items","deliver_at","time_format","display_name","organiser","host","charge_code","invoice_number","status","colour","CateringOrderComponent_ul_1_li_1_Template","status_r10","updateStatus","CateringOrderComponent","statuses","_settings","CATERING_STATUSES","_ref","s","_x","apply","arguments","i2","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringOrderComponent_div_0_Template","CateringOrderComponent_ul_1_Template","CateringOrderComponent_button_4_Template","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","filters","_filters","getValue","_poll","_loading","orders","combineLatest","debounceTime","switchMap","date","zones","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","ext","tap","shareReplay","asObservable","checkOrder","search","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","CalendarEvent","booking","saveEvent","toJSON","toPromise","_angular_core__WEBPACK_IMPORTED_MODULE_15__","Yz7","factory","ɵfac","providedIn","space_r4","toggleRoom","selected","availability","tmp_3_0","tmp_4_0","_r8","CateringRoomsStateModalComponent_main_7_tr_13_Template","rooms","tmp_1_0","CateringRoomsStateModalComponent","requestSpacesForZone","building","take","enableSelected","_this2","saveSettings","disabled_rooms","catch","disableSelected","_this3","disabled_list","CateringRoomsStateModalComponent_main_7_Template","CateringRoomsStateModalComponent_ng_template_13_Template","_r1","CateringStateService","_menu","_dialog","_updated","_currency","settings","active_building","showMetadata","catchError","of","details","post","require_notes","charge_codes","bld","getCateringForZone","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","close","findIndex","updateMenu","_this4","_this5","_this6","openConfirmModal","title","content","icon","class","_this7","editConfig","_this8","config","AttachedResourceConfigModalComponent","saveNotes","updateConfig","importMenu","_this9","updated_menu","notifyError","notifySuccess","zone_id","updateMetadata","_this10","old_settings","Array","addItemToOrder","match","i3","_angular_core__WEBPACK_IMPORTED_MODULE_22__","SharedCateringModule","_angular_core__WEBPACK_IMPORTED_MODULE_20__","oAB","cJS","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","i_r6","removeCode","ChargeCodeListModalComponent_main_6_div_1_Template","addCodesFromFile","ctx_r12","newCode","saveChargeCodes","ChargeCodeListModalComponent","_state","_dialog_ref","reader","evt","srcElement","cleaned_codes","idx","ChargeCodeListModalComponent_main_6_Template","ChargeCodeListModalComponent_footer_7_Template","ChargeCodeListModalComponent_ng_template_8_Template"],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-rooms-state-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering.vars.ts","./libs/catering/src/lib/charge-code-list-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div\n            class=\"w-full h-full bg-white dark:bg-neutral-700 border border-gray-300 dark:border-neutral-500 overflow-hidden rounded\"\n        >\n            <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n                <mat-checkbox\n                    class=\"mr-2\"\n                    matTooltip=\"Allow Ordering Item\"\n                    [(ngModel)]=\"is_enabled\"\n                ></mat-checkbox>\n                <div class=\"flex items-center p-2 flex-1\">\n                    <div class=\"flex-1\">\n                        <div>{{ item.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ item.category }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                    >\n                        {{ item.unit_price / 100 | currency: (symbol | async) }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    [matMenuTriggerFor]=\"menu\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!item.options.length\"\n                    (click)=\"show_options = !show_options\"\n                >\n                    <app-icon>expand_more</app-icon>\n                </button>\n            </div>\n            <div\n                options\n                *ngIf=\"item\"\n                class=\"bg-gray-100 dark:bg-neutral-700 overflow-hidden\"\n                [style.height]=\"\n                    show_options ? item.options.length * 3.5 + 'rem' : '0'\n                \"\n            >\n                <div\n                    class=\"flex p-2 items-center border-t border-solid border-gray-300 dark:border-neutral-500 relative\"\n                    *ngFor=\"let option of item.options\"\n                >\n                    <div\n                        class=\"absolute inset-y-0 left-0 w-2 bg-gray-400 dark:bg-neutral-600\"\n                    ></div>\n                    <div class=\"flex-1 pl-4 pr-2\">\n                        <div class=\"text\">{{ option.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ option.group }}\n                        </div>\n                    </div>\n                    <button\n                        edit\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"editOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        remove\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"removeOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"addOption()\"\n                >\n                    <app-icon>add</app-icon>\n                    <div class=\"ml-2\">Add Option</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"editItem()\"\n                >\n                    <app-icon>edit</app-icon>\n                    <div class=\"ml-2\">Edit Item</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"removeItem()\"\n                >\n                    <app-icon>delete</app-icon>\n                    <div class=\"ml-2\">Remove Item</div>\n                </button>\n            </mat-menu>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                width: 48rem;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n\n    public get is_enabled() {\n        return !this.item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public set is_enabled(state: boolean) {\n        let list = this.item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...this.item, hide_for_zones: list })\n        );\n    }\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab\n                *ngFor=\"let group of categories\"\n                [attr.label]=\"group\"\n                [label]=\"group\"\n            >\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\nconst ACTIVE_ITEMS = new Set<string>();\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right h-14 relative\">\n                <div\n                    class=\"border-b-2 border-l-2 border-gray-400 dark:border-neutral-500 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border border-gray-300 dark:border-neutral-500 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"toggle()\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 border-b border-gray-300 dark:border-neutral-500 border-solid py-4 space-x-2\"\n            >\n                <div class=\"\">{{ item?.name }}</div>\n                <div class=\"flex-1\">\n                    <div\n                        class=\"p-1 rounded-full bg-black/10 w-8 h-8 flex items-center justify-center\"\n                    >\n                        ⨯{{ item?.amount || item?.quantity || 1 }}\n                    </div>\n                </div>\n                <div class=\"flex space-x-2 mr-2\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-yellow-300 text-black rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public order_id: string;\n    @Input() public item: CateringItem;\n\n    public active = false;\n\n    public get item_key() {\n        return `${this.order_id}|${this.item?.id}`;\n    }\n\n    public ngOnInit() {\n        this.active = ACTIVE_ITEMS.has(this.item_key);\n    }\n\n    public toggle() {\n        if (ACTIVE_ITEMS.has(this.item_key)) {\n            ACTIVE_ITEMS.delete(this.item_key);\n            this.active = false;\n        } else {\n            ACTIVE_ITEMS.add(this.item_key);\n            this.active = true;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"sticky top-0 w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white dark:bg-neutral-800 dark:border-neutral-500\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-28\">Charge Code</div>\n            <div class=\"w-24\">Notes</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300 dark:border-neutral-500\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block opacity-60\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\nimport { AttachedResourceRuleset } from '@placeos/components';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<AttachedResourceRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--primary);\n                border-bottom: 2px solid var(--primary);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly AttachedResourceRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport {\n    ANIMATION_SHOW_CONTRACT_EXPAND,\n    AsyncHandler,\n    SettingsService,\n} from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 dark:bg-neutral-700\"\n            [class.bg-gray-100]=\"!show_items\"\n            [class.bg-gray-200]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div\n                class=\"w-20 flex items-center justify-center z-20 h-full\"\n                [class.bg-gray-200]=\"show_items\"\n                [class.dark:bg-neutral-700]=\"show_items\"\n            >\n                <div\n                    class=\"rounded-full bg-gray-400 dark:bg-neutral-800 p-2 text-2xl text-black dark:text-white opacity-60 flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">\n                {{ order.deliver_at | date: time_format }}\n            </div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-28\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-24\">\n                <button\n                    *ngIf=\"order.notes\"\n                    class=\"clear underline\"\n                    [matTooltip]=\"order.notes\"\n                >\n                    View\n                </button>\n            </div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button icon (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative z-0\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [order_id]=\"order?.id\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent extends AsyncHandler {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = async (s) => {\n        await this._orders.updateStatus(this.order, s);\n        this.timeout('status-change', () => ((this.order as any).status = s));\n    };\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { AsyncHandler, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list\n                .filter((order) => checkOrder(order, this._filters.getValue()))\n                .sort((a, b) => a.deliver_at - b.deliver_at)\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        const updated_order = new CateringOrder({\n            ...order,\n            status,\n            event: null,\n        });\n        const catering = [\n            ...order.event.ext('catering').filter((o) => o.id !== order.id),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const booking = await saveEvent(event.toJSON()).toPromise();\n        this._poll.next(Date.now());\n        (order as any).status = status;\n        return booking;\n    }\n}\n","import { Component } from '@angular/core';\nimport { unique } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from 'libs/spaces/src/lib/space.utilities';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering';\n\n@Component({\n    selector: 'catering-rooms-state-modal',\n    template: `\n        <div>\n            <header class=\"flex items-center justify-between p-2\">\n                <h3 class=\"p-2\">Set Catering Availability for Rooms</h3>\n                <button icon mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                class=\"max-h-[65vh] overflow-auto\"\n                *ngIf=\"!loading; else load_state\"\n            >\n                <table class=\"min-w-[32rem]\">\n                    <thead\n                        class=\"border-b border-gray-200 dark:border-neutral-500\"\n                    >\n                        <tr>\n                            <td class=\"w-12\" (click)=\"toggleRoom('*')\">\n                                <mat-checkbox\n                                    class=\"pointer-events-none\"\n                                    [checked]=\"\n                                        (rooms | async)?.length ===\n                                        selected.length\n                                    \"\n                                    [indeterminate]=\"\n                                        selected.length > 0 &&\n                                        (rooms | async)?.length !==\n                                            selected.length\n                                    \"\n                                ></mat-checkbox>\n                            </td>\n                            <td></td>\n                            <td class=\"text-right text-xs\">\n                                {{ (rooms | async)?.length }} Room(s)\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            *ngFor=\"let space of rooms | async\"\n                            class=\"hover:bg-black/10 dark:hover:bg-white/5\"\n                            (click)=\"toggleRoom(space.id)\"\n                        >\n                            <td>\n                                <mat-checkbox\n                                    class=\"pointer-events-none\"\n                                    [checked]=\"selected.includes(space.id)\"\n                                ></mat-checkbox>\n                            </td>\n                            <td>{{ space.display_name || space.name }}</td>\n                            <td class=\"text-right\">\n                                <span\n                                    class=\"px-2 py-1 rounded-2xl\"\n                                    [class.bg-green-600]=\"\n                                        !(availability | async)?.includes(\n                                            space.id\n                                        )\n                                    \"\n                                    [class.bg-red-600]=\"\n                                        (availability | async)?.includes(\n                                            space.id\n                                        )\n                                    \"\n                                >\n                                    {{\n                                        !(availability | async)?.includes(\n                                            space.id\n                                        )\n                                            ? 'Enabled'\n                                            : 'Disabled'\n                                    }}\n                                </span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </main>\n            <footer\n                class=\"flex items-center p-2 justify-end space-x-2 border-t border-gray-200 dark:border-neutral-500\"\n            >\n                <button btn matRipple (click)=\"enableSelected()\">\n                    Enable Selected\n                </button>\n                <button btn matRipple (click)=\"disableSelected()\">\n                    Disable Selected\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving disabled room list...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            td {\n                padding: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringRoomsStateModalComponent {\n    public loading = false;\n    public selected: string[] = [];\n    public readonly rooms = requestSpacesForZone(this._org.building.id);\n    public readonly availability = this._catering.availability;\n\n    constructor(\n        private _catering: CateringStateService,\n        private _org: OrganisationService\n    ) {}\n\n    public async toggleRoom(id: string) {\n        if (id === '*') {\n            const rooms = await this.rooms.pipe(take(1)).toPromise();\n            if (this.selected.length !== rooms.length)\n                this.selected = rooms.map((_) => _.id);\n            else this.selected = [];\n        } else {\n            if (this.selected.includes(id))\n                this.selected = this.selected.filter((_) => _ !== id);\n            else this.selected = [...this.selected, id];\n        }\n    }\n\n    public async enableSelected() {\n        this.loading = true;\n        const disabled_list = await this.availability.pipe(take(1)).toPromise();\n        const list = disabled_list.filter((_) => !this.selected.includes(_));\n        await this._catering\n            .saveSettings({ disabled_rooms: list })\n            .catch(() => null);\n        this.loading = false;\n    }\n\n    public async disableSelected() {\n        const disabled_list = await this.availability.pipe(take(1)).toPromise();\n        const list = unique(disabled_list.concat(this.selected));\n        await this._catering\n            .saveSettings({ disabled_rooms: list })\n            .catch(() => null);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    AttachedResourceConfigModalComponent,\n    AttachedResourceRuleset,\n    AttachedResourceConfigModalData,\n} from '@placeos/components';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = this._org.active_building.pipe(\n        filter((_) => !!_),\n        switchMap((_) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            AttachedResourceConfigModalComponent,\n            AttachedResourceConfigModalData\n        >(AttachedResourceConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        return updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<AttachedResourceRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: AttachedResourceRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { CateringRoomsStateModalComponent } from './catering-rooms-state-modal.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringRoomsStateModalComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-black/10 px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n"],"x_google_ignoreList":[]}