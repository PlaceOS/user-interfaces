{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"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","names":["i0","$event","i_r6","_r8","index","ctx_r7","charge_codes","ctx_r9","removeCode","ctx_r4","ChargeCodeListModalComponent_main_6_div_1_Template","ctx_r0","trackByFn","_r11","ctx_r10","addCodesFromFile","ctx_r12","newCode","ctx_r13","saveChargeCodes","ChargeCodeListModalComponent","constructor","_state","_dialog_ref","this","loading","ngOnInit","_this","_asyncToGenerator","pipe","take","toPromise","push","splice","event","target","file","files","reader","FileReader","readAsText","addEventListener","evt","list","csvToJson","srcElement","result","code","unique","value","_","notifyError","_this2","cleaned_codes","filter","trim","saveSettings","close","idx","item","t","i1","i2","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","ChargeCodeListModalComponent_main_6_Template","ChargeCodeListModalComponent_footer_7_Template","ChargeCodeListModalComponent_ng_template_8_Template","_r2","SharedCateringModule","oAB","cJS","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","_r5","handleFileEvent","ctx_r6","downloadTemplate","ctx_r3","CateringImportMenuModalComponent","EventEmitter","element","length","fileReader","e","data","emit","reason","metadata","type","toLowerCase","map","i","CateringItem","options","tags","id","name","group","category","multiple","unit_price","downloadFile","_angular_core__WEBPACK_IMPORTED_MODULE_1__","outputs","CateringImportMenuModalComponent_button_3_Template","CateringImportMenuModalComponent_main_4_Template","CateringImportMenuModalComponent_ng_template_5_Template","form","controls","invalid","touched","ctx_r8","item_r15","_r17","$implicit","ctx_r16","removeTag","CateringItemModalComponent_form_4_div_4_mat_chip_row_6_Template","_r19","ctx_r18","addTag","tag_list","_r13","separators","ctx_r11","CateringItemModalComponent_form_4_div_2_Template","CateringItemModalComponent_form_4_div_3_Template","CateringItemModalComponent_form_4_div_4_Template","CateringItemModalComponent_form_4_div_5_Template","CateringItemModalComponent_form_4_div_6_Template","_r21","ctx_r20","ctx_r22","ctx_r23","ctx_r24","ctx_r25","CateringItemModalComponent_form_4_div_27_Template","ctx_r1","description","tmp_6_0","get","hasTag","_c6","renderPercent","images","_r27","ctx_r26","saveChanges","ctx_r2","dirty","option_r28","CateringItemModalComponent","_data","categories","tag","includes","FormGroup","FormControl","Validators","accept_points","discount_cap","ENTER","COMMA","SPACE","markAsDirty","input","setValue","existing_tag","indexOf","randomInt","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_2__","i18n_0","$localize","CateringItemModalComponent_button_3_Template","CateringItemModalComponent_form_4_Template","CateringItemModalComponent_footer_5_Template","CateringItemModalComponent_ng_template_6_Template","CateringItemModalComponent_mat_option_10_Template","_r3","is_enabled","CateringMenuItemComponent_div_1_button_12_Template","show_options","symbol","can_edit","option_r8","editOption","_r16","ctx_r14","removeOption","CateringMenuItemComponent_div_2_div_1_button_7_Template","CateringMenuItemComponent_div_2_div_1_button_8_Template","CateringMenuItemComponent_div_2_div_1_Template","CateringMenuItemComponent","_catering","is_editable","hide_for_zones","zone","state","updateItem","currency","addOption","option","deleteOption","editItem","addItem","removeItem","deleteItem","inputs","attrs","_c0","CateringMenuItemComponent_div_1_Template","CateringMenuItemComponent_div_2_Template","item_r5","CateringMenuComponent_ng_container_2_ng_container_1_Template","menu","item_r8","CateringMenuComponent_mat_tab_4_ng_container_1_Template","group_r6","tab_menu","CateringMenuComponent","shown_tab","BehaviorSubject","menu_map","next","CateringMenuComponent_ng_container_2_Template","CateringMenuComponent_mat_tab_4_Template","CateringMenuComponent_ng_template_5_Template","tmp_0_0","CateringItemOptionModalComponent_form_4_div_1_Template","CateringItemOptionModalComponent_form_4_div_2_Template","CateringItemOptionModalComponent_form_4_div_3_Template","CateringItemOptionModalComponent_form_4_div_4_Template","_r12","option_r13","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringItemOptionModalComponent_button_3_Template","CateringItemOptionModalComponent_form_4_Template","CateringItemOptionModalComponent_footer_5_Template","CateringItemOptionModalComponent_ng_template_6_Template","CateringItemOptionModalComponent_mat_option_10_Template","opt_r2","CateringOrderItemComponent_ng_container_0_ng_container_14_div_1_Template","_r6","ctx_r5","toggle","CateringOrderItemComponent_ng_container_0_ng_container_14_Template","active","amount","quantity","option_list","ACTIVE_ITEMS","Set","CateringOrderItemComponent","item_key","order_id","has","delete","add","_angular_core__WEBPACK_IMPORTED_MODULE_0__","CateringOrderItemComponent_ng_container_0_Template","order_r3","CateringOrderListComponent","_orders","order_list","filtered","startPolling","ngOnDestroy","stopPolling","order","undefined","CateringOrderListComponent_li_18_Template","CateringOrderListComponent_div_20_Template","CateringOrderListComponent_mat_progress_bar_22_Template","tmp_2_0","item_r11","ctx_r15","updateItemQuantity","ctx_r19","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_4_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_a_counter_8_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_9_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_Template","cat_r8","menu_items","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_Template","CateringOrderModalComponent_div_0_ng_container_1_Template","show_order_details","_r4","_r28","ctx_r27","item_count","_r30","ctx_r29","ctx_r31","saveOrder","CateringOrderModalComponent_footer_1_ng_container_1_Template","CateringOrderModalComponent_footer_1_ng_template_2_Template","_r25","ctx_r34","optionsFor","item_r33","CateringOrderModalComponent_ng_template_4_div_4_div_4_Template","_r37","ctx_r36","total_cost","ctx_r32","CateringOrderModalComponent_ng_template_4_div_4_Template","items","CateringOrderModalComponent","AsyncHandler","_org","currency_code","super","CateringOrder","rules","getCateringConfig","space","level","parent_id","subscribe","cat","cateringItemAvailable","updateMenuQuantities","timeout","choose_options","old_item","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","sort","a","b","localeCompare","join","confirmOrder","_angular_core__WEBPACK_IMPORTED_MODULE_4__","features","CateringOrderModalComponent_div_0_Template","CateringOrderModalComponent_footer_1_Template","CateringOrderModalComponent_ng_template_2_Template","CateringOrderModalComponent_ng_template_4_Template","opt_r6","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_div_4_Template","group_r1","updateGroupOption","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_Template","opt_r14","_r18","ctx_r17","option_state","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_div_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_Template","CateringOrderOptionsModalComponent_div_7_ng_container_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_Template","CateringOrderOptionsModalComponent","groups","group_list","saveOptions","CateringOrderOptionsModalComponent_div_7_Template","notes","CateringOrderComponent_div_0_button_15_Template","show_items","deliver_at","time_format","display_name","organiser","host","charge_code","invoice_number","status","colour","CateringOrderComponent_ul_1_li_1_Template","status_r10","updateStatus","CateringOrderComponent","statuses","_settings","CATERING_STATUSES","_ref","s","_x","apply","arguments","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringOrderComponent_div_0_Template","CateringOrderComponent_ul_1_Template","CateringOrderComponent_button_4_Template","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","filters","_filters","getValue","_poll","_loading","orders","combineLatest","debounceTime","switchMap","date","zones","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","ext","tap","shareReplay","asObservable","checkOrder","search","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","CalendarEvent","booking","saveEvent","toJSON","_angular_core__WEBPACK_IMPORTED_MODULE_15__","Yz7","factory","ɵfac","providedIn","CateringStateService","building","_menu","_dialog","_updated","_currency","_change","settings","active_building","showMetadata","catchError","of","details","post","require_notes","availability","disabled_rooms","bld","getCateringForZone","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","_this3","findIndex","updateMenu","_this4","_this5","_this6","openConfirmModal","title","content","icon","class","_this7","editConfig","_this8","config","AttachedResourceConfigModalComponent","saveNotes","updateConfig","importMenu","_this9","updated_menu","catch","notifySuccess","zone_id","updateMetadata","_this10","old_settings","Array","addItemToOrder","match","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__"],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/charge-code-list-modal.component.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.vars.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-neutral px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-base-200 border-dashed rounded-xl hover:bg-base-200 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-base-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div\n            class=\"w-full h-full bg-base-100 border border-base-200 overflow-hidden rounded\"\n        >\n            <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n                <mat-checkbox\n                    class=\"mr-2\"\n                    matTooltip=\"Allow Ordering Item\"\n                    [(ngModel)]=\"is_enabled\"\n                ></mat-checkbox>\n                <div class=\"flex items-center p-2 flex-1\">\n                    <div class=\"flex-1\">\n                        <div>{{ item.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ item.category }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"p-2 m-2 text-xs font-bold text-secondary-content rounded bg-secondary\"\n                    >\n                        {{ item.unit_price / 100 | currency: (symbol | async) }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    [matMenuTriggerFor]=\"menu\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!item.options.length\"\n                    (click)=\"show_options = !show_options\"\n                >\n                    <app-icon>expand_more</app-icon>\n                </button>\n            </div>\n            <div\n                options\n                *ngIf=\"item\"\n                class=\"bg-base-200 overflow-hidden\"\n                [style.height]=\"\n                    show_options ? item.options.length * 3.5 + 'rem' : '0'\n                \"\n            >\n                <div\n                    class=\"flex p-2 items-center border-t border-solid border-base-200 relative\"\n                    *ngFor=\"let option of item.options\"\n                >\n                    <div\n                        class=\"absolute inset-y-0 left-0 w-2 bg-black opacity-10\"\n                    ></div>\n                    <div class=\"flex-1 pl-4 pr-2\">\n                        <div class=\"text\">{{ option.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ option.group }}\n                        </div>\n                    </div>\n                    <button\n                        edit\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"editOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        remove\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"removeOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"addOption()\"\n                >\n                    <app-icon>add</app-icon>\n                    <div class=\"ml-2\">Add Option</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"editItem()\"\n                >\n                    <app-icon>edit</app-icon>\n                    <div class=\"ml-2\">Edit Item</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"removeItem()\"\n                >\n                    <app-icon>delete</app-icon>\n                    <div class=\"ml-2\">Remove Item</div>\n                </button>\n            </mat-menu>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                width: 48rem;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n\n    public get is_enabled() {\n        return !this.item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public set is_enabled(state: boolean) {\n        let list = this.item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...this.item, hide_for_zones: list })\n        );\n    }\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab\n                *ngFor=\"let group of categories\"\n                [attr.label]=\"group\"\n                [label]=\"group\"\n            >\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\nconst ACTIVE_ITEMS = new Set<string>();\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right h-14 relative\">\n                <div\n                    class=\"border-b-2 border-l-2 border-base-200 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border border-base-200 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"toggle()\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 border-b border-base-200 border-solid py-4 space-x-2\"\n            >\n                <div class=\"\">{{ item?.name }}</div>\n                <div class=\"flex-1\">\n                    <div\n                        class=\"p-1 rounded-full bg-neutral w-8 h-8 flex items-center justify-center\"\n                    >\n                        ⨯{{ item?.amount || item?.quantity || 1 }}\n                    </div>\n                </div>\n                <div class=\"flex space-x-2 mr-2\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-warning text-black rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public order_id: string;\n    @Input() public item: CateringItem;\n\n    public active = false;\n\n    public get item_key() {\n        return `${this.order_id}|${this.item?.id}`;\n    }\n\n    public ngOnInit() {\n        this.active = ACTIVE_ITEMS.has(this.item_key);\n    }\n\n    public toggle() {\n        if (ACTIVE_ITEMS.has(this.item_key)) {\n            ACTIVE_ITEMS.delete(this.item_key);\n            this.active = false;\n        } else {\n            ACTIVE_ITEMS.add(this.item_key);\n            this.active = true;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"sticky top-0 w-full text-sm font-medium flex items-center py-4 border-solid border-b border-base-200 bg-base-100\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-28\">Charge Code</div>\n            <div class=\"w-24\">Notes</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-base-200\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block opacity-60\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p class=\"p-4 text-center\">No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\nimport { AttachedResourceRuleset } from '@placeos/components';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<AttachedResourceRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-base-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-base-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-base-200\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--s);\n                border-bottom: 2px solid var(--s);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly AttachedResourceRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-base-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport {\n    ANIMATION_SHOW_CONTRACT_EXPAND,\n    AsyncHandler,\n    SettingsService,\n} from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2\"\n            [class.bg-base-200]=\"!show_items\"\n            [class.bg-base-200]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div\n                class=\"w-20 flex items-center justify-center z-20 h-full\"\n                [class.bg-base-200]=\"show_items\"\n                [class.dark:bg-neutral-700]=\"show_items\"\n            >\n                <div\n                    class=\"rounded-full bg-base-300 p-2 text-2xl text-black opacity-60 flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">\n                {{ order.deliver_at | date: time_format }}\n            </div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-28\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-24\">\n                <button\n                    *ngIf=\"order.notes\"\n                    class=\"clear underline\"\n                    [matTooltip]=\"order.notes\"\n                >\n                    View\n                </button>\n            </div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button icon (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative z-0\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [order_id]=\"order?.id\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent extends AsyncHandler {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = async (s) => {\n        await this._orders.updateStatus(this.order, s);\n        this.timeout('status-change', () => ((this.order as any).status = s));\n    };\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { AsyncHandler, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list\n                .filter((order) => checkOrder(order, this._filters.getValue()))\n                .sort((a, b) => a.deliver_at - b.deliver_at)\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        const updated_order = new CateringOrder({\n            ...order,\n            status,\n            event: null,\n        });\n        const catering = [\n            ...order.event.ext('catering').filter((o) => o.id !== order.id),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const booking = await saveEvent(event.toJSON()).toPromise();\n        this._poll.next(Date.now());\n        (order as any).status = status;\n        return booking;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    AttachedResourceConfigModalComponent,\n    AttachedResourceRuleset,\n    AttachedResourceConfigModalData,\n} from '@placeos/components';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n\n    private _change = new BehaviorSubject(0);\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_),\n        switchMap(([_]) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            AttachedResourceConfigModalComponent,\n            AttachedResourceConfigModalData\n        >(AttachedResourceConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        const result = await updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n        this._change.next(Date.now());\n        return result;\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<AttachedResourceRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: AttachedResourceRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"x_google_ignoreList":[]}