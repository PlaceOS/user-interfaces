{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"olBAyEO,IAAMA,GAAb,MAAM,MAAOA,kDAAoB,0BAApBA,gCAjBLC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,IACAC,MACAC,SAKKb,CAAb,iOCtDYc,oBAA0D,cAC5CA,iBAAKA,oCAiECA,yBAIIA,SACJA,kCAHIA,oBAEAA,wEAdhBA,kBAGC,qBAHDA,CAGC,mBAIWA,4EAAkB,GAACC,KAGnBD,+BAMJA,UAEJA,4BAAoD,cAK5CA,4EAAkB,GAACC,KAJvBD,QAOAA,qBAAWA,kCAAsBA,UAErCA,qBAAqCA,2EAASA,uBAAoB,GAAE,GAChEA,oBAAUA,mBAAMA,mDAtBZA,+BAIqBA,uCAYrBA,wEApEpBA,iBAAiE,UAAjEA,CAAiE,qBAAjEA,CAAiE,aAOjDA,oEAAaA,eACnC,GALkBA,QAOAA,qBAAWA,oCAAwBA,UAEvCA,qBAGIA,8DAASE,qBAAgB,GAAI,KAAIC,2BAEjCH,oBAAUA,eAAGA,UAEjBA,qBAIIA,iHAGxB,GAAE,GACsBA,qBAAUA,UAIRA,UAENA,sBAAqCA,iEAASA,0BAAmB,GAAE,GAC/DA,qBAAUA,mBAAMA,YAGxBA,mBAQIA,0BAgCJA,gDAtEYA,iCAeJA,2CAKUA,gEAadA,uEAOqBA,mCAyDlC,IAAMI,EAAb,MAAM,MAAOA,EAgBTC,YACqCC,gBAfpBC,WAAQ,IAAIC,MAEtBD,cAAU,EAMDA,gBAAkCE,IAS9CF,KAAKG,UAAYJ,EAAMK,QAAU,IAAIC,IAAKC,IACtCA,EAAIC,MAAQD,EAAIC,MAAMF,IAAKG,GAAM,CAC7BA,EAAE,GACFC,KAAKC,UAAUF,EAAE,MAEdF,GAEd,CAdUK,aACP,MAAO,WAAaC,KAAKC,MAAsB,SAAhBD,KAAKE,SACvC,CAcMC,cACHf,KAAKgB,SAAU,EACf,MAAMb,EAAWH,KAAKG,SAASE,IAAKC,IACzB,IACAA,EACHC,MAAOD,EAAIC,MAAMF,IAAKG,IAClB,IAAIS,EAAQT,EAAE,GACd,IACIS,EAAQR,KAAKS,MAAMV,EAAE,GACX,CAAb,MAAa,CACd,MAAO,CAACA,EAAE,GAAIS,EAAP,MAInBjB,KAAKmB,MAAMC,KAAK,CAAEC,OAAQ,OAAQC,SAAUnB,GAC/C,+CA3CQN,GAA4BJ,MAiBzB8B,MAAe,0BAjBlB1B,EAA4B2B,4kCArHjC/B,kBAAQ,QACAA,uCAA2BA,QAC/BA,0BAGJA,QACAA,kBAAwC,cAGhCA,gCAASgC,uCAAwC,GAEjDhC,yBACJA,QACAA,wBA+EJA,QACAA,oBAEC,cACsBA,gCAASgC,eAAa,GAAEhC,yBAAYA,iBA9FbA,kCAWrBA,8aAwGpBI,CAAb,gJC7HYJ,oBAA0D,cAC5CA,iBAAKA,mDAGvBA,gBAAwC,UAAxCA,CAAwC,gBAILA,kBAAMA,QACjCA,aAAGA,uDAA2CA,QAC9CA,mBAGIA,2DAAUA,2BAAuB,GAHrCA,UAMJA,iBAAwD,cAIhDA,yDAASA,2BAAkB,GAE3BA,+BACJA,sCAIJA,mBAGIA,0BACAA,aAAGA,SAAaA,gCAAbA,2BAMZ,IAAMiC,EAAb,MAAM,MAAOA,EA1Cb5B,cA2CqBE,WAAQ,IAAIC,KAkDhC,CA9CU0B,gBAAgBR,GACnBnB,KAAKgB,QAAU,0BACf,MAAMY,EAA4BT,EAAMU,OACxC,IAAKD,GAASE,MAAO,OAAQ9B,KAAKgB,QAAU,GAC5C,MAAMc,EAAkBF,EAAQE,MAChC,IAAKA,EAAMC,OAAQ,OAAQ/B,KAAKgB,QAAU,GAC1C,MAAMgB,EAAOF,EAAM,GACbG,EAAa,IAAIC,WACvBD,EAAWE,iBAAiB,UAAYC,IACpC,MACMC,GAAOC,QADIF,EAAEP,OAAOU,QAE1BvC,KAAKgB,QAAU,GACfhB,KAAKmB,MAAMC,KAAK,CACZC,OAAQ,OACRC,SAAUe,EACLG,OAAQC,GAAuC,UAAhCA,EAAEC,MAAQ,IAAIC,eAC7BtC,IACIG,GACG,IAAIoC,IAAa,IACVpC,EACHqC,QAASR,EACJG,OACIC,GAEO,YADHA,EAAEC,MAAQ,IAAIC,eACCF,EAAEK,OAAStC,EAAEuC,IAEpC1C,IAAKoC,IAAO,CACTM,GAAIN,EAAEM,GACNC,KAAMP,EAAEO,KACRC,MAAOR,EAAES,SACTC,SAAUV,EAAEU,SACZC,WAAYX,EAAEW,kBAnB1C,GAyBJnB,EAAWoB,WAAWrB,EACzB,CAEMsB,oBAIHC,QAAa,2BAHI,sJAIpB,+CAlDQ7B,EAAgC,0BAAhCA,EAAgCF,80BAvCrC/B,oBAAuE,QAC/DA,gCAAoBA,QACxBA,0BAGJA,QACAA,yBAsBAA,iEA1B8CA,kCAIvCA,kCAAgB,yDAiClBiC,CAAb,0OC5BYjC,oBAA0D,cAC5CA,iBAAKA,oCAQnBA,kBAA8C,cAOtCA,iBAAIA,gBAAMA,aAACA,QAAOA,cACtBA,QACAA,6BACIA,oBAMAA,qBAAWA,4BAAgBA,mCAb3BA,6GAgBRA,kBAAkD,cAQ1CA,qBAAQA,gBAAMA,aAACA,QAAOA,cAC1BA,QACAA,6BACIA,oBAOAA,qBAAWA,gCAAoBA,8CAf/BA,2FAaIA,gJAiBAA,uBAIIA,wEAAWA,qBAAc,GAEzBA,SACAA,uBAOJA,oCAZIA,uBAAmB,gBAInBA,0BAGIA,2EArBpBA,kBAA8C,cAC1CA,YAQAA,QACAA,6BAAqC,yBAE7BA,6BAeAA,oBAOIA,0EAAwBA,kBAAc,GAP1CA,kDAxBJA,mFAUwBA,qCAkBhBA,oCAA4B,6CAA5BA,CAA4B,mDAQ5CA,kBAAqD,cACxBA,wBAAYA,QACrCA,6BACIA,uBAMJA,oCAEJA,kBAAoD,cAQ5CA,uBAAUA,gBAAMA,aAACA,QAAOA,cAC5BA,QACAA,6BACIA,oBAOAA,qBAAWA,kCAAsBA,mCAfjCA,yHAlGZA,kBAKIA,wBAmBAA,wBAqBAA,uBAuCAA,uBAWAA,wBAqBAA,kBAA+B,cACWA,0BAAcA,QACpDA,2BAA8CA,UAE5CA,UAENA,mBAA+B,eACQA,yBAAYA,QAC/CA,yBAQJA,sCAjIAA,0BAEoBA,4CAmBAA,gDAqBAA,4CAuCAA,mDAWAA,kDAuB8BA,0EAS1CA,wBAAS,UAATA,CAAS,SAATA,CAAS,sEAOrBA,qBAGC,eAC+CA,yDAASA,sBAAa,GAC9DA,kBACJA,kCAFmBA,gEAKnBA,kBACIA,0BACAA,aAAGA,mCAAuBA,oCAI9BA,yBACIA,SACJA,kCAF8CA,iBAC1CA,2BAaT,IAAM+D,GAAb,MAAM,MAAOA,EAwCT1D,YACqCC,gBAvCpBC,WAAQ,IAAIC,MAEtBD,UAAO,IAAIyD,KAAU,CACxBT,KAAM,IAAIU,KAAY1D,KAAK2D,KAAKX,MAAQ,GAAI,CAACY,gBAC7CC,YAAa,IAAIH,KAAY1D,KAAK2D,KAAKE,aAAe,IACtDX,SAAU,IAAIQ,KAAY1D,KAAK2D,KAAKT,UAAY,GAAI,CAChDU,gBAEJR,WAAY,IAAIM,KAAY1D,KAAK2D,KAAKP,WAAY,CAC9CQ,gBAEJd,KAAM,IAAIY,KAAY1D,KAAK2D,KAAKb,MAAQ,IACxCgB,cAAe,IAAIJ,KAAY1D,KAAK2D,KAAKG,gBAAiB,GAC1DC,aAAc,IAAIL,KAAY1D,KAAK2D,KAAKI,cAAgB,KAGrD/D,cAAU,EAEDA,gBAAuB,CAACgE,KAAOC,KAAOC,KAsBlD,CAnBOP,WACP,OAAO3D,KAAKD,MAAM4D,MAAQ,IAAIf,GACjC,CAGUuB,iBACP,OAAOnE,KAAKD,MAAMoE,YAAc,EACnC,CAEUC,eACP,OAAOpE,KAAKqE,KAAKC,SAASxB,KAAK7B,KAClC,CAEMsD,cAActD,EAAgB,GACjC,MAAO,GAAGA,IACb,CAUMuD,OAAOrD,GACV,IAAKnB,KAAKqE,OAASrE,KAAKqE,KAAKC,SAASxB,KAAM,OAC5C9C,KAAKqE,KAAKC,SAASxB,KAAK2B,cACxB,MAAMC,EAAQvD,EAAMuD,MACdzD,EAAQE,EAAMF,MACdmD,EAAWpE,KAAKoE,UACjBnD,GAAS,IAAI0D,SACdP,EAASQ,KAAK3D,GACdjB,KAAKqE,KAAKC,SAASxB,KAAK+B,SAAST,IAIjCM,IACAA,EAAMzD,MAAQ,GAErB,CAMM6D,UAAUC,GACb,IAAK/E,KAAKqE,OAASrE,KAAKqE,KAAKC,SAASxB,KAAM,OAC5C,MAAMsB,EAAWpE,KAAKoE,SACtBpE,KAAKqE,KAAKC,SAASxB,KAAK2B,cACxB,MAAMO,EAAQZ,EAASa,QAAQF,GAE3BC,GAAS,IACTZ,EAASc,OAAOF,EAAO,GACvBhF,KAAKqE,KAAKC,SAASxB,KAAK+B,SAAST,GAExC,CAEMrD,cACHf,KAAKgB,SAAU,EACfhB,KAAKmB,MAAMC,KAAK,CACZC,OAAQ,OACRC,SAAU,CACNqC,KAAM,IAAIf,IAAa,IAChB5C,KAAK2D,KACRZ,GAAI/C,KAAK2D,KAAKZ,IAAM,SAAQoC,QAAU,eACnCnF,KAAKqE,KAAKpD,UAI5B,+CA7FQuC,GAA0B/D,MAyCvB8B,MAAe,0BAzClBiC,EAA0BhC,+GA/GtB4D,+FAsBwBA,gzDAhFjC3F,kBAAQ,UACiBA,SAAmCA,QACxDA,0BAGJA,QACAA,0BAsIAA,0BAQAA,0CAMAA,mCACIA,+BAGJA,+BA7JyBA,kDACqBA,kCAMzCA,0CAAwB,cAqIxBA,kCAc8BA,gVAc9B+D,CAAb,+KChLQ/D,iBAAsD,UAAtDA,CAAsD,UAAtDA,CAAsD,SAGrCA,SAAeA,QACpBA,iBACIA,SACJA,UAEJA,iBAGIA,+CACJA,UAEJA,sBAAmD,eACrCA,sBAASA,UAEvBA,sBAGIA,iGAEAA,qBAAUA,wBAAWA,+CAnBZA,4BAEDA,wCAMJA,8EAGgBA,sCAKpBA,2FAcJA,kBAGC,WAHDA,CAGC,YAEyBA,SAAiBA,QACnCA,iBAAoCA,SAAkBA,UAE1DA,qBAIIA,sEAASA,sBAAkB,GAE3BA,oBAAUA,gBAAIA,UAElBA,qBAIIA,sEAASA,wBAAoB,GAE7BA,qBAAUA,mBAAMA,wCAjBEA,uBACkBA,kDAdhDA,kBAQIA,yBAyBJA,8BA7BIA,mEAMuBA,0CAyE5B,IAAM4F,EAAb,MAAM,MAAOA,EAuBTvF,YAAoBwF,oBAnBbtF,mBAAe,EAENA,eAAY,IAAMA,KAAKsF,UAAUC,UAAUvF,KAAK2D,MAEhD3D,gBAAcwF,GAC1BxF,KAAKsF,UAAUC,UAAUvF,KAAK2D,KAAM6B,GAExBxF,kBAAgBwF,GAC5BxF,KAAKsF,UAAUG,aAAazF,KAAK2D,KAAM6B,GAE3BxF,cAAW,IAAMA,KAAKsF,UAAUI,QAAQ1F,KAAK2D,MAE7C3D,gBAAa,IAAMA,KAAKsF,UAAUK,WAAW3F,KAAK2D,KAOX,CAJ5CiC,aACP,OAAO5F,KAAKsF,UAAUO,QACzB,+CArBQR,GAAyB5F,qCAAzB4F,EAAyB7D,++BA5G9B/B,yBAyBAA,uBAkCAA,2BAA0B,cAIlBA,gCAASgC,aAAW,GAEpBhC,oBAAUA,eAAGA,QACbA,iBAAkBA,sBAAUA,UAEhCA,oBAGIA,gCAASgC,YAAU,GAEnBhC,qBAAUA,iBAAIA,QACdA,kBAAkBA,sBAASA,UAE/BA,qBAGIA,gCAASgC,cAAY,GAErBhC,qBAAUA,mBAAMA,QAChBA,kBAAkBA,wBAAWA,mBAlFKA,qBA2BrCA,mcAiFA4F,CAAb,kJCpGoB5F,SACIA,iBACJA,kCAD4BA,mDAFhCA,SACIA,iDAGJA,8BAHmCA,sEAMnCA,SACIA,iBACJA,kCAD4BA,mDAFhCA,qBACIA,iDAGJA,4CAJ0CA,iBACPA,0EAMnCA,iBAAsD,cACxCA,iBAAKA,QACfA,aAAGA,4BAAgBA,WAe5B,IAAMqG,EAAb,MAAM,MAAOA,EAsBThG,YAAoBwF,oBApBJtF,UAAOA,KAAKsF,UAAUS,KAEtB/F,eAAY,IAAIgG,IAAwB,IAExChG,cAAWA,KAAK+F,KAAKE,MACjC5F,OAAK0F,IACD,MAAMG,EAAW,GACjB,UAAWjD,KAASjD,KAAKmE,WACrB+B,EAASjD,GAAS8C,EAAKvD,OAClBmB,GAASA,EAAKT,WAAaD,GAGpC,OAAOiD,IAQwC,CAJ5C/B,iBACP,OAAOnE,KAAKsF,UAAUnB,UACzB,+CApBQ2B,GAAqBrG,qCAArBqG,EAAqBtE,sVArC1B/B,2BAEIA,+CACqBgC,iBAA0B,IAA1BA,EAA8B,GAAEA,eACpD,GACX,GACUhC,qBACIA,iDAKJA,QACAA,2BAKJA,QACAA,uEAZuBA,iEAA8B,cAMtBA,gQAwB1BqG,CAAb,2MCvBYrG,oBAA0D,cAC5CA,iBAAKA,oCAQnBA,kBAA8C,cAOtCA,iBAAIA,gBAAMA,aAACA,QAAOA,cACtBA,QACAA,6BACIA,oBAMAA,qBAAWA,4BAAgBA,mCAb3BA,6GAgBRA,kBAA+C,cAQvCA,iBAAIA,gBAAMA,aAACA,QAAOA,cACtBA,QACAA,6BACIA,oBAOAA,qBAAWA,4BAAgBA,8CAf3BA,qFAaIA,2DAKZA,kBAAoD,cAC7BA,uBAAWA,QAC9BA,6BACIA,oBAOJA,iCAEJA,kBAAkD,qBAE1CA,yCACJA,oCA5DRA,kBAKIA,wBAmBAA,wBAqBAA,uBAYAA,uBAKJA,8BA3DIA,0BAEoBA,4CAmBAA,6CAqBAA,kDAYAA,yFAMxBA,qBAGC,eAC+CA,yDAASA,sBAAa,GAC9DA,kBACJA,kCAFmBA,gEAKnBA,kBACIA,0BACAA,aAAGA,0CAA8BA,oCAIrCA,yBACIA,SACJA,kCAFyCA,iBACrCA,2BAaT,IAAM0G,EAAb,MAAM,MAAOA,EAuBTrG,YACqCC,gBAtBpBC,WAAQ,IAAIC,MAEtBD,UAAO,IAAIyD,KAAU,CACxBT,KAAM,IAAIU,KAAY1D,KAAKwF,OAAOxC,MAAQ,GAAI,CAACY,gBAC/CX,MAAO,IAAIS,KAAY1D,KAAKwF,OAAOvC,OAAS,GAAI,CAACW,gBACjDR,WAAY,IAAIM,KAAY1D,KAAKwF,OAAOpC,YACxCD,SAAU,IAAIO,OAAc1D,KAAKwF,OAAOrC,SAAU,MAG/CnD,cAAU,CAcb,CAXOwF,aACP,OAAOxF,KAAKD,MAAMyF,MACrB,CAGUY,YACP,OAAOpG,KAAKD,MAAMqG,OAAS,EAC9B,CAMMrF,cACHf,KAAKgB,SAAU,EACf,MAAMqF,EAAa,IACZrG,KAAKwF,OACRzC,GAAI/C,KAAKwF,OAAOzC,IAAM,WAAUoC,QAAU,eACvCnF,KAAKqE,KAAKpD,OAEjBjB,KAAKmB,MAAMC,KAAK,CACZC,OAAQ,OACRC,SAAU,CACNqC,KAAM,IAAIf,IAAa,IAChB5C,KAAKD,MAAMuG,OACdzD,QAAS7C,KAAKD,MAAMuG,OAAOzD,QACtBL,OAAQhC,GAAMA,EAAEuC,KAAOsD,EAAWtD,IAClCwD,OAAO,CAACF,QAI5B,+CA7CQF,GAAgC1G,MAwB7B8B,MAAe,0BAxBlB4E,EAAgC3E,ssCApGrC/B,kBAAQ,UAEAA,SACJA,QACAA,0BAGJA,QACAA,wBA+DAA,0BAQAA,0CAMAA,mCACIA,+BAGJA,+BAvFQA,6DAEsCA,kCAMzCA,0CAAwB,cA8DxBA,kCAc8BA,qTAc9B0G,CAAb,8IChHQ1G,SACIA,iBACIA,iBACJA,QACAA,iBAAuB,aAAvBA,CAAuB,cASLA,SAAqCA,YAGvDA,iBACIA,SACJA,QACJA,8BAVYA,sCAA2B,sBAA3BA,CAA2B,yBAIjBA,8CAIdA,uDAmBT,IAAM+G,EAAb,MAAM,MAAOA,EAvCb1G,cA0CWE,aAAS,CACnB,+CAJYwG,EAA0B,0BAA1BA,EAA0BhF,gYApC/B/B,qCAAeA,6UAoCV+G,CAAb,0GCtBY/G,iBAIIA,6BACJA,kCADoBA,iDAEpBA,kBAIC,OACMA,8BAAkBA,gCAG7BA,+BAiBD,IAAMgH,EAAb,MAAM,MAAOA,EAMT3G,YAAoB4G,kBAJJ1G,gBAAaA,KAAK0G,QAAQC,SAE1B3G,aAAUA,KAAK0G,QAAQ1F,OAEe,CAE/C4F,WACH5G,KAAK0G,QAAQG,cAChB,CAEMC,cACH9G,KAAK0G,QAAQK,aAChB,CAGMC,UAAUhC,EAAeiC,GAC5B,OAAOA,EAAQA,EAAMlE,QAAKmE,CAC7B,+CAnBQT,GAA0BhH,qCAA1BgH,EAA0BjF,mrBA5C/B/B,iBAGIA,iBACAA,iBAAkBA,gBAAIA,QACtBA,iBAAoBA,oBAAQA,QAC5BA,iBAAkBA,gBAAIA,QACtBA,iBAAkBA,uBAAWA,QAC7BA,kBAAkBA,wBAAWA,QAC7BA,kBAAkBA,mBAAMA,QACxBA,kBACJA,QACAA,iBACIA,yCAMAA,2CAOJA,QACAA,oEAZ0BA,oDAAuB,4BAOxCA,uEAMJA,+PAgBAgH,CAAb,mPC8CwChH,kBAIIA,+BACJA,iDAOJA,wBAGIA,uFAE5BA,gCACV,GACmCA,0CALGA,qEAMJA,kBAGC,WAHDA,CAGC,cAHDA,CAGC,cAYqBA,kBAAMA,YAGxBA,kBAGIA,SACJA,QACAA,qBAEIA,8EAASA,mBAAa,GAEtBA,oBAAUA,eAAGA,8CAtBbA,6GAQIA,8BAQJA,6DAlDZA,kBAIC,WAJDA,CAIC,YAGWA,SACJA,QACAA,wBAMJA,QACAA,kBAGIA,6BACJA,QACAA,8BAQAA,yBA8BJA,6CApDYA,+BAICA,wCAQLA,2DAQCA,yCAIAA,+FApCjBA,qBAGC,WAEOA,yBA4DJA,qDA/DAA,iBAMyBA,kFATjCA,SACIA,2BAmEJA,6CAlESA,sFAJjBA,SACIA,yBACIA,gCAqEJA,QACJA,+BAtEsCA,iEAH1CA,iBACIA,gCAyEJA,yCAzEmBA,6CAA2B,uDA8E1CA,SACIA,qBACIA,oBACJA,QACAA,qBAOIA,sFAA8B,EAAI,GAElCA,qBACJA,QACJA,iCARQA,+CAA8B,8BAA9BA,CAA8B,+EAUlCA,qBAGIA,sFAA8B,EAAK,GAEnCA,kBACJA,QACAA,qBAAwBA,0DAASA,oBAAW,GACxCA,wBACJA,mCA9BRA,qBAIIA,gCAgBAA,2CAYJA,yCA5BmBA,6CAA2B,wCA8B1CA,kBACIA,0BACAA,aAAGA,SAAaA,gCAAbA,oDAeKA,kBAKIA,SAIJA,mDANIA,oCAEAA,iIAZZA,kBAIC,WAJDA,CAIC,YAEiCA,SAAeA,QACzCA,wBAUJA,QACAA,kBAGIA,6BACJA,QACAA,wBAEIA,+EAAiBA,gCAAgC,GACpDA,iDApB6BA,uBAGrBA,wCAYLA,2DAGAA,+DA5BZA,qBAA4B,QACpBA,yBAAaA,UAErBA,iBACIA,wBA4BJA,8BAzByBA,yCApL/B,WACFkE,EACApD,EACAY,GAEA,IAAIgG,GAAe,EACnB,UAAWC,KAAQ7G,EACf,GACIoD,EAAKT,WAAakE,EAAKpE,MACvBW,EAAKb,KAAKuE,SAASD,EAAKpE,OACxB7B,EAAMmG,OAAOC,MAAMF,SAASD,EAAKpE,OACnB,MAAdoE,EAAKpE,KACP,CACE,IAAIwE,EAAU,EACd,UAAWC,KAAaL,EAAK7G,MAAO,CAChC,MAAMmH,EAAO,IAAIC,KAAKxG,EAAMuG,MAC5B,OAAQD,EAAU,QACT,aACDD,IAAWI,OAAQF,GAAMG,OAASH,EAAMD,EAAU,KAC5C,EACA,EACN,UACC,cACDD,IAAWM,OAASJ,GAAMG,OAASH,EAAMD,EAAU,KAC7C,EACA,EACN,UACC,aACDD,GACIrG,EAAM4G,WAAYC,QAAgBP,EAAU,IACtC,EACA,EACV,UACC,aACDD,GACIrG,EAAM4G,WAAYC,QAAgBP,EAAU,IACtC,EACA,EACV,UACC,eACDD,GACIrG,EAAM8G,IAAI,kBAAoBR,EAAU,GAAK,EAAI,EACrD,cAEAD,IAEX,CACDL,EAAeK,GAAWJ,EAAK7G,MAAMwB,MACxC,CAEL,OAAOoF,CACV,CAkMM,IAAMe,EAAb,MAAM,MAAOA,UAAoCC,KAoB7CrI,YACqCC,GAEjCqI,QAFiCpI,aAnBpBA,WAAQ,IAAIC,MAEtBD,aAAU,GAUVA,gBAAsC,GAEtCA,gBAAuB,GAEdA,UAAOA,KAAKD,MAAMsI,MAAQ,MAMtCrI,KAAKgB,QAAU,iBAClB,CAEY4F,WAAQ,qCACjB0B,EAAKtH,QAAU,kBACfsH,EAAKrB,MAAQ,IAAIsB,IAAcD,EAAKvI,MAAMkH,OAC1CqB,EAAK/H,YAAc+H,EAAKvI,MAAMyI,kBAC1BF,EAAKrB,MAAM9F,OAAOmG,OAAOmB,OAAOC,WAEpCJ,EAAKvI,MAAMgG,KAAK4C,UAAWC,IACvBN,EAAKtH,QAAU,kBACf,MAAMmD,GAAa0E,QAAOD,EAAKvI,IAAKsD,GAASA,EAAKT,WAC5C7C,EAAM,GACZ,UAAWyI,KAAO3E,EACd9D,EAAIyI,GAAOF,EAAKpG,OAAQmB,GAEhBA,EAAKT,WAAa4F,GAClBC,EACIpF,EACA2E,EAAK/H,MACL+H,EAAKrB,MAAM9F,QAK3BmH,EAAKnE,WAAaA,EAClBmE,EAAKU,WAAa3I,EAClBiI,EAAKW,uBACLX,EAAKY,QAAQ,gBAAiB,IAAOZ,EAAKtH,QAAU,GAAK,IAAzD,EAzBa,IA2BpB,CAEM0E,QAAQ/B,EAAoBwF,GAA0B,GACzD,MAAMC,EAAWpJ,KAAKiH,MAAMoC,MAAMC,KAC7BC,GACGA,EAAIxG,KAAOY,EAAKZ,IAChBwG,EAAI1G,QAAQd,SACRwH,EAAI1G,QAAQ2G,OACR,CAAClB,EAAGmB,IACAnB,GACC3E,EAAKd,QAAQyG,KAAMI,IAAQD,EAAE1G,KAAO2G,GAAI3G,IACnC,EACA,GACV,IAGZoG,GAAkBxF,EAAKd,SAASd,OAChC/B,KAAKD,MAAM4J,cAAchG,EAAKd,SAAS+G,KAAM/G,IACzC,MAAMgH,EAAW,IAAIjH,IAAa,IAAKe,EAAMd,YAC7C7C,KAAK0F,QAAQmE,GAAU,EAAvB,GAGJ7J,KAAKiH,MAAQ,IAAIsB,IADduB,EAC4B,IACxB9J,KAAKiH,MACRoC,MAAOrJ,KAAKiH,MAAMoC,MACb7G,OACIhC,KAEOA,EAAEuC,KAAOY,EAAKZ,IACdvC,EAAEuJ,iBAAmBpG,EAAKoG,iBAGrCxD,OAAO,CACJ,IAAI3D,IAAa,IACVe,EACHqG,SAAUZ,EAASY,SAAW,OAKf,IACxBhK,KAAKiH,MACRoC,MAAOrJ,KAAKiH,MAAMoC,MAAM9C,OAAO,CAC3B,IAAI3D,IAAa,IAAKe,EAAMqG,SAAU,QAIlDhK,KAAKiJ,sBACR,CAEMgB,WAAWtG,GACd3D,KAAKiH,MAAQ,IAAIsB,IAAc,IACxBvI,KAAKiH,MACRoC,MAAOrJ,KAAKiH,MAAMoC,MAAM7G,OACnBC,GACGA,EAAEM,KAAOY,EAAKZ,IAAMN,EAAEsH,iBAAmBpG,EAAKoG,kBAG1D/J,KAAKiJ,sBACR,CAEMiB,mBAAmBvG,EAAoBwG,GAC1C,MAAMf,EAAWpJ,KAAKiH,MAAMoC,MAAMC,KAC7BC,GACGA,EAAIxG,KAAOY,EAAKZ,IAAMwG,EAAIQ,iBAAmBpG,EAAKoG,gBAE1D,IAAIV,EAAQ,IAAIrJ,KAAKiH,MAAMoC,OAEvBA,EADAD,EACQpJ,KAAKiH,MAAMoC,MACd7G,OACIhC,KAEOA,EAAEuC,KAAOY,EAAKZ,IACdvC,EAAEuJ,iBAAmBpG,EAAKoG,iBAGrCxD,OAAO,CAAC,IAAI3D,IAAa,IAAKe,EAAMqG,SAAUG,MAE3CnK,KAAKiH,MAAMoC,MAAM9C,OAAO,CAC5B,IAAI3D,IAAa,IAAKe,EAAMqG,SAAUG,MAG9Cd,EAAMe,KAAK,CAACC,EAAGC,IAAMD,EAAErH,KAAKuH,cAAcD,EAAEtH,OAC5ChD,KAAKiH,MAAQ,IAAIsB,IAAc,IACxBvI,KAAKiH,MACRoC,UAEJrJ,KAAKiJ,sBACR,CAEMA,uBACH,UAAWH,KAAO9I,KAAKgJ,WACnB,UAAWrF,KAAQ3D,KAAKgJ,WAAWF,GAC9BnF,EAAaqG,SAAWhK,KAAKiH,MAAMoC,MAAMG,OACtC,CAAClB,EAAG9H,IAAOA,EAAEuC,KAAOY,EAAKZ,GAAKuF,EAAI9H,EAAEwJ,SAAW1B,EAC/C,EAIf,CAEMkC,WAAW7G,GACd,OAAOA,EAAKd,QAAQxC,IAAKG,GAAMA,EAAEwC,MAAMyH,KAAK,KAC/C,CAEMC,YACH1K,KAAKmB,MAAMC,KAAK,CACZC,OAAQ,OACRC,SAAU,CAAE2F,MAAOjH,KAAKiH,QAE/B,CAEM0D,eACH3K,KAAK4K,oBAAqB,CAC7B,+CAxKQ1C,GAA2BzI,MAqBxB8B,MAAe,0BArBlB2G,EAA2B1G,myDA3LhC/B,uBA2EAA,2BAiCAA,0CAMAA,iEAlHiCA,yBAAgB,cA4E5CA,yvBA+GAyI,CAAb,6JC1NoCzI,kBAIIA,6BACJA,mDADIA,sFAbZA,+BAIC,WAJDA,CAIC,YAGWA,SACJA,QACAA,wBAMJA,oCAZAA,oBAIQA,+BAICA,6EArBrBA,SACIA,8BAIIA,sFAAiBA,+BAAgC,GAEjDA,+BAA6C,aACXA,gBAAIA,UAEtCA,qCAiBJA,QACJA,0CAhB4BA,2EA0BhBA,kBAIIA,6BACJA,mDADIA,qGAZZA,2BAEIA,+GAEAA,kBAA8C,YAEtCA,SACJA,QACAA,wBAMJA,iDAZAA,sCAIQA,+BAICA,6DAVbA,gEACoBA,kEAtChCA,iBAIC,WAC2CA,SAAgBA,QACxDA,iBACIA,gCA6BAA,0CAkBJA,+CAnDAA,sBAEwCA,uBAErBA,mCAAuB,eAkEnD,IAAMoL,EAAb,MAAM,MAAOA,EAST/K,YACqCC,gBARpBC,WAAQ,IAAIC,MAItBD,kBAAiC,GACxBA,UAAOA,KAAKD,MAAMsI,KAK9B,MAAMyC,GAASjC,QACX7I,KAAKD,MAAM8C,QAAQxC,IAAKG,GAAMA,EAAEyC,OAAS,UAEvC8H,EAAa,GACnB,UAAW9H,KAAS6H,EAAQ,CACxB,MAAMjI,EAAU7C,KAAKD,MAAM8C,QAAQL,OAAQhC,GAAMA,EAAEyC,QAAUA,GAC7D8H,EAAWnG,KAAK,CACZ5B,KAAMC,EACNE,WAAYN,EAAQyG,KAAM9I,GAAMA,EAAE2C,UAClCN,WAEP,CACD7C,KAAK8K,OAASC,CACjB,CAEMC,kBAAkB/H,EAA4BF,GACjD,UAAWyC,KAAUvC,EAAMJ,QACvB7C,KAAKiL,aAAazF,EAAOzC,IAAMyC,EAAOzC,KAAOA,CAEpD,CAEMmI,cACH,MAAMrI,EAAU7C,KAAKD,MAAM8C,QAAQL,OAC9BkH,GAAQ1J,KAAKiL,aAAavB,EAAI3G,KAEnC/C,KAAKmB,MAAMC,KAAK,CAAEC,OAAQ,OAAQC,SAAU,CAAEuB,YACjD,+CAtCQgI,GAAkCpL,MAU/B8B,MAAe,0BAVlBsJ,EAAkCrJ,y4BAhFvC/B,kBAAQ,QACAA,0BAAcA,QAClBA,oBAAyC,cAC3BA,iBAAKA,YAGvBA,kBACIA,uBAwDJA,QACAA,oBAAoB,cACgBA,gCAASgC,eAAa,GAClDhC,mBACJA,iBA1DsBA,uSAuErBoL,CAAb,qLCrFQpL,iBAIC,UAJDA,CAIC,UAJDA,CAIC,cAKqBA,wBAAYA,YAG9BA,iBAAuBA,yBAA0CA,QACjEA,iBACIA,SAKJA,QACAA,kBACIA,UAKJA,QACAA,mBAAkBA,UAAwCA,QAC1DA,mBACIA,UACJA,QACAA,mBAAkB,eAAlBA,CAAkB,aASNA,UACJA,QACAA,wBAAuBA,4BAAeA,YAG9CA,mBAAkB,gBACUA,6FACpBA,qBAAUA,UAIRA,iDAjDVA,4BAUuBA,2DAEnBA,4JAOAA,kLAMcA,mDAEdA,iEAOIA,iEACAA,6BAGIA,0DAOMA,gGAmBlBA,sBAIIA,mDAfRA,iBAMIA,kBAKAA,uBAMJA,8BAdIA,4BACAA,0CAKIA,4DAKiBA,iFAKrBA,qBAIIA,qEAASA,2BAAuB,GAEhCA,kBAIAA,mBAAwBA,SAAiBA,sCAFrCA,4CAEoBA,wBA2BjC,IAAM0L,EAAb,MAAM,MAAOA,EAcTrL,YAAoB4G,kBAXb1G,iBAAa,EAEJA,cAAWoL,IAEXpL,kBAAgBqL,GAC5BrL,KAAK0G,QAAQ4E,aAAatL,KAAKiH,MAAOoE,EAMY,CAJ3CE,aACP,OAAOvL,KAAKwL,SAASlC,KAAM9I,GAAMA,EAAEuC,KAAO/C,KAAKiH,MAAMsE,OACxD,+CAZQJ,GAAsB1L,qCAAtB0L,EAAsB3J,ysCA/G3B/B,yBAuDAA,sBAkBAA,2BACIA,0BAYJA,eAnFKA,sBAqDAA,+DAoBsBA,qbAiCnB,CAACgM,SAEJN,CAAb,+LCpFO,IAAMO,EAAb,MAAM,MAAOA,UAA8BvD,KA0CvCrI,cACIsI,QA1CIpI,WAAQ,IAAIgG,IAAwB,GACpChG,cAAW,IAAIgG,KAAyB,GACxChG,cAAW,IAAIgG,IAAsC,IAG7ChG,aAAsC2L,QAAc,CAChE3L,KAAK4L,SACL5L,KAAK6L,QACN5F,MACC6F,OAAa,MACbC,OAAU,EAAEC,MACRhM,KAAKiM,SAASC,MAAK,GACnB,MAAMC,GAAQC,QAAYC,OAAWL,EAAQtE,MAAQC,KAAK2E,QACpDC,GAAMH,QAAYI,OAASR,EAAQtE,MAAQC,KAAK2E,QACtD,OAAOG,QAAY,CACfC,UAAWV,EAAQzE,OAAS,IAAIkD,KAAK,KACrCkC,aAAcR,EACdS,WAAYL,GAHE,IAMtBlM,OAAKwM,IAAWC,QAAQD,EAAOxM,IAAKc,GAAUA,EAAM8G,IAAI,gBACxD8E,OAAI,IAAM/M,KAAKiM,SAASC,MAAK,KAC7Bc,OAAY,IAGAhN,aAAUA,KAAKiM,SAASgB,eAUxBjN,cAAWA,KAAKkN,OAAOjH,MACnC5F,OAAKuI,GACDA,EAAKpG,OAAQyE,GAvDzB,WACIA,EACA+E,GAEA,MAAMX,GAAKW,EAAQmB,QAAU,IAAIxK,cACjC,QAASsE,EAAMoC,MAAMC,KAChB3F,GACGA,EAAKX,KAAKL,cAAc0E,SAASgE,MAC/B1H,EAAKd,QAAQyG,KAAM9D,GACjBA,EAAOxC,KAAKL,cAAc0E,SAASgE,IAGlD,CA2CkC+B,CAAWnG,EAAOjH,KAAK4L,SAASyB,eAM3DrN,KAAKsN,aAAa,UAAWtN,KAAKkN,OAAOvE,YAC5C,CAjBUqD,cACP,OAAOhM,KAAK4L,SAASyB,UACxB,CAEUrB,YAAQA,GACfhM,KAAK4L,SAASM,KAAKF,EACtB,CAcMnF,aAAa0G,EAAgB,MAChCvN,KAAKwN,SACD,UACA,IAAMxN,KAAK6L,MAAMK,MAAK,IAAIvE,MAAO8F,WACjCF,EAEP,CAGMxG,cACH/G,KAAK0N,cAAc,UACtB,CAOMpC,aAAarE,EAAsBsE,GACtC,MAAMoC,EAAgB,IAAIpF,IAAc,IAAKtB,EAAOsE,WAC9CpK,EAAQ,IAAIyM,IAAc,IACzB3G,EAAM9F,MACT0M,SAAU,IACH5G,EAAM9F,MAAM8G,IAAI,YAAYzF,OAAQiH,GAAMA,EAAE1G,KAAOkE,EAAMlE,IAC5D4K,GACFtN,IAAKG,GAAM,IAAI+H,IAAc,IAAK/H,OAExC,OAAOsN,QAAU3M,EACpB,+CA5EQuK,EAAqB,4BAArBA,EAAqBqC,QAArBrC,EAAqB,qBAFlB,SAEHA,CAAb,yMCOO,IAAMsC,EAAb,MAAM,MAAOA,UAA6B7F,KAmBtCrI,YAAoBmO,EAAmCC,EAA4BC,GAA0B,MACzG/F,QADyGgG,OAAzFpO,YAAmCA,eAA4BA,iBAjB3EA,WAAQ,IAAIgG,IAAgC,IAE5ChG,cAAW,IAAIgG,KAAyB,GAExChG,eAAY,IAAIgG,IAAwB,OAEhChG,UAAOA,KAAKqO,MAAMpB,eAElBjN,aAAUA,KAAKiM,SAASgB,eAExBjN,cAAWA,KAAKsO,UAAUrB,eAStCjN,KAAKsN,aACD,WACAtN,KAAKiO,KAAKM,gBAAgB5F,UAA1B,yBAAoC,UAAO6F,GACvC,GAAIA,EAAK,CACL,MAAMzI,SAAcqI,EAAKK,mBAAmBD,EAAIzL,KAAK1C,IAChDG,GAAM,IAAIoC,IAAapC,IAE5B4N,EAAKE,UAAUpC,KAAKkC,EAAKD,UAAUO,IAAI,iBAAmBF,EAAI3I,UAAY,OAC1EuI,EAAKC,MAAMnC,KAAKnG,EACnB,CACJ,GARD,uDAUP,CAnBU5B,iBACP,MAAM4B,EAAO/F,KAAKqO,MAAMhB,WACxB,OAAOxE,QAAO9C,EAAK1F,IAAKG,GAAMA,EAAE0C,UACnC,CAsBYyL,oBAAoB1H,GAAoB,qCACjD,MAAM2H,EAAMnM,EAAKyL,QAAQW,KAGvB3G,IAA6B,CAC3B7F,KAAM,CACFgG,KAAM5F,EAAK6L,UAAUjB,WACrBpG,QACAlB,KAAMtD,EAAKsD,KACX/E,QAASyB,EAAKzB,QACdwH,kBAAoB/F,GAAMA,EAAK+F,kBAAkB/F,GACjDkH,cAAgBlH,GAAMA,EAAKkH,cAAclH,MAG3CqM,QAAgBC,QAAQC,KAAK,CAC/BJ,EAAIK,kBAAkB9N,MACjB8E,MAAKiJ,OAAOzM,GAAmB,SAAbA,EAAEpB,SACpB8N,YACLP,EAAIQ,cAAcD,cAEtBP,SAAIS,QACGP,GAASxN,UAAU2F,OAASA,CArBc,IAsBpD,CAEYvB,QAAQ/B,EAAqB,IAAIf,KAAc,qCACxD,MAAMgM,EAAMnM,EAAKyL,QAAQW,KAGvBrL,IAA4B,CAC1BnB,KAAM,CACFsB,OACAQ,WAAY1B,EAAK0B,cAGnB2K,QAAgBC,QAAQC,KAAK,CAC/BJ,EAAIK,kBAAkB9N,MACjB8E,MAAKiJ,OAAOzM,GAAmB,SAAbA,EAAEpB,SACpB8N,YACLP,EAAIQ,cAAcD,cAEtB,GAAwB,SAApBL,GAASzN,OAAmB,OAChC,MAAM0E,EAAOtD,EAAK4L,MAAMhB,WAClBrI,EAAQe,EAAKuJ,UAAW/F,GAAQA,EAAIxG,KAAOY,EAAKZ,IAClDiC,GAAS,EACTe,EAAKb,OAAOF,EAAO,EAAG8J,EAAQxN,SAASqC,MAEvCoC,EAAKnB,KAAKkK,EAAQxN,SAASqC,MAE/BlB,EAAK8M,WAAW9M,EAAKwL,KAAKuB,SAASzM,GAAIgD,GAAM6D,KACzC,KACInH,EAAK4L,MAAMnC,KAAK,IAAInG,IACpB6I,EAAIS,OAAJ,EAEJ,IAAOT,EAAIK,kBAAkBjO,SAAU,EA7Ba,IA+B3D,CAEYuE,UACT5B,EACA6B,EAAyB,IAAS,qCAElC,MAAMY,GAAQyC,QAAOlF,EAAKd,QAAQxC,IAAKG,GAAMA,EAAEyC,QACzC2L,EAAMa,EAAKvB,QAAQW,KAGvB1I,IAAkC,CAChC9D,KAAM,CACFiE,OAAQ3C,EACR6B,SACAY,WAGF0I,QAAgBC,QAAQC,KAAK,CAC/BJ,EAAIK,kBAAkB9N,MACjB8E,MAAKiJ,OAAOzM,GAAmB,SAAbA,EAAEpB,SACpB8N,YACLP,EAAIQ,cAAcD,cAEtB,GAAwB,SAApBL,GAASzN,OAAmB,OAChC,MAAM0E,EAAO0J,EAAKpB,MAAMhB,WAClBrI,EAAQe,EAAKuJ,UAAW/F,GAAQA,EAAIxG,KAAOY,EAAKZ,IAClDiC,GAAS,EACTe,EAAKb,OAAOF,EAAO,EAAG8J,EAAQxN,SAASqC,MAEvCoC,EAAKnB,KAAKkK,EAAQxN,SAASqC,MAE/B8L,EAAKF,WAAWE,EAAKxB,KAAKuB,SAASzM,GAAIgD,GAAM6D,KACzC,KACI6F,EAAKpB,MAAMnC,KAAK,IAAInG,IACpB6I,EAAIS,OAAJ,EAEJ,IAAOT,EAAIK,kBAAkBjO,SAAU,EAhCT,IAkCrC,CAEY2I,cAAc9G,GAAyB,qCAChD,MAAM+L,EAAMnM,EAAKyL,QAAQW,KAGvBhE,IAAoC,CAClCxI,KAAM,CACFgG,KAAM5F,EAAK6L,UAAUjB,WACrBxK,aAGFiM,QAAgBC,QAAQC,KAAK,CAC/BJ,EAAIK,kBAAkB9N,MACjB8E,MAAKiJ,OAAOzM,GAAmB,SAAbA,EAAEpB,SACpB8N,YACLP,EAAIQ,cAAcD,cAEtB,MAAwB,SAApBL,GAASzN,OAA0B,IACvCuN,EAAIS,QACGP,EAAQxN,SAASuB,QAlBwB,IAmBnD,CAEY8C,WAAWhC,GAAkB,qCACtC,MAAMmL,QAAgBY,QAClB,CACIC,MAAO,uBACPC,QAAS,qDAAqDjM,EAAKX,sBACnE6M,KAAM,CACFnN,KAAM,OACNoN,MAAO,iBACPF,QAAS,WAGjBnN,EAAKyL,SAET,GAAuB,SAAnBY,EAAQzN,OAAmB,OAC/ByN,EAAQ9N,QAAQ,6BAChB,MAAM+E,EAAOtD,EAAK4L,MAAMhB,WAAW7K,OAAQ+G,GAAQ5F,EAAKZ,KAAOwG,EAAIxG,IACnEN,EAAK8M,WAAW9M,EAAKwL,KAAKuB,SAASzM,GAAIgD,GAAM6D,KACzC,KACInH,EAAK4L,MAAMnC,KAAK,IAAInG,IACpB+I,EAAQO,OAAR,EAEJ,IAAMP,EAAQ9N,QAAQ,IArBY,IAuBzC,CAEYyE,aAAa9B,EAAoB6B,GAAsB,qCAChE,MAAMsJ,QAAgBY,QAClB,CACIC,MAAO,8BACPC,QAAS,wDAAwDpK,EAAOxC,eAAeW,EAAKX,SAC5F6M,KAAM,CACFnN,KAAM,OACNoN,MAAO,iBACPF,QAAS,WAGjBH,EAAKvB,SAET,GAAuB,SAAnBY,EAAQzN,OAAmB,OAC/ByN,EAAQ9N,QAAQ,oCAChB,MAAM+E,EAAO0J,EAAKpB,MAAMhB,WACxBtH,EAAKb,OACDa,EAAKuJ,UAAW/F,GAAQA,EAAIxG,KAAOY,EAAKZ,IACxC,EACA,IAAIH,IAAa,IACVe,EACHd,QAASc,EAAKd,QAAQL,OAAQkH,GAAQA,EAAI3G,KAAOyC,EAAOzC,OAGhE0M,EAAKF,WAAWE,EAAKxB,KAAKuB,SAASzM,GAAIgD,GAAM6D,KACzC,KACI6F,EAAKpB,MAAMnC,KAAK,IAAInG,IACpB+I,EAAQO,OAAR,EAEJ,IAAMP,EAAQ9N,QAAQ,IA7BsC,IA+BnE,CAEY+O,aAAU,qCACnB,MAAM3P,QAAeI,EAAKgI,kBAAkBhI,EAAKyN,KAAKuB,SAASzM,IACzDgD,EAAOvF,EAAK6N,MAAMhB,WAClBjH,GAAQyC,SAAOiE,QAAQ/G,EAAK1F,IAAKG,GAAM,CAACA,EAAE0C,YAAa1C,EAAEsC,SACzD8L,EAAMpO,EAAK0N,QAAQW,KAGvBhP,IAA8B,CAC5BwC,KAAM,CACFjC,SACAgG,WAGF0I,QAAgBC,QAAQC,KAAK,CAC/BJ,EAAIK,kBAAkB9N,MACjB8E,MAAKiJ,OAAOzM,GAAmB,SAAbA,EAAEpB,SACpB8N,YACLP,EAAIQ,cAAcD,cAEE,SAApBL,GAASzN,QACbb,EAAKwP,aAAaxP,EAAKyN,KAAKuB,SAASzM,GAAI+L,EAAQxN,UAAUsI,KACvD,IAAMgF,EAAIS,QACV,IAAOT,EAAIK,kBAAkBjO,SAAU,EAtBxB,IAwBtB,CAEYiP,aAAU,qCACnB,MAAMrB,EAAMpO,EAAK0N,QAAQW,KAAKnN,KACxBoN,QAAgBC,QAAQC,KAAK,CAC/BJ,EAAIK,kBAAkB9N,MACjB8E,MAAKiJ,OAAOzM,GAAmB,SAAbA,EAAEpB,SACpB8N,YACLP,EAAIQ,cAAcD,cAEtB,GAAwB,SAApBL,GAASzN,OAAmB,OAChCuN,EAAIK,kBAAkBjO,QAAU,mBAChC,MAAM+E,EAAOvF,EAAK6N,MAAMhB,WAClBmB,EAAMhO,EAAKyN,KAAKuB,SAChBU,GAAerH,QAAOiG,EAAQxN,SAASiF,OAAOR,GAAO,YACrDvF,EAAK+O,WAAWf,EAAIzL,GAAImN,GAAcC,MAAO1N,IAC/C2N,cAAY,iCACZxB,EAAIS,QACE5M,KAEV4N,QACI,wCAAwCvB,EAAQxN,SAASS,yBAE7D6M,EAAIS,OArBe,IAsBtB,CAEOE,WAAWe,EAAiBvK,GAChC,OAAOwK,SAAeD,EAAS,CAC3BvN,GAAIuN,EACJtN,KAAM,WACN8L,QAAS/I,EACTlC,YAAa,qBAAqByM,MACnCnB,WACN,CAEaV,mBAAmB6B,GAAe,0BAC5C,MAAMvK,SACIyK,SAAaF,EAAS,YAAYnB,aAC1CL,QACF,OAAO/I,aAAgB0K,MAAQ1K,EAAO,EAJM,IAK/C,CAEYyC,kBACT8H,EAAkBtQ,KAAKiO,KAAKuB,SAASzM,IAAE,0BAEvC,MAAMxC,SACIiQ,SAAaF,EAAS,mBAAmBnB,aACjDL,QACF,OAAOvO,aAAiBkQ,MAASlQ,EAAgB,EALV,IAM1C,CAEOyP,aAAaM,EAAiBlQ,GAClC,OAAOmQ,SAAeD,EAAS,CAC3BvN,GAAIuN,EACJtN,KAAM,kBACN8L,QAAS1O,EACTyD,YAAa,4BAA4ByM,MAC1CnB,WACN,CAEMuB,eAAezJ,EAAsB4C,GACxC,IAAIR,EAAQpC,EAAMoC,MAClB,MAAMsH,EAAQtH,EAAMC,KACf3F,GACGA,EAAKZ,KAAO8G,EAAS9G,IACrB8G,EAAShH,SAASd,SACd4B,EAAKd,SAAS2G,OACV,CAAClB,EAAGmB,IACAnB,GACCuB,EAAShH,QAAQyG,KAAMI,GAAQD,EAAE1G,KAAO2G,EAAI3G,IACvC,EACA,GACV,IAGhB4N,SACQA,EAAc3G,UAAY,EAC3BX,EAAQA,EAAM9C,OAAO,CAClB,IAAI3D,IAAa,IAAKiH,EAAUG,SAAU,MAElC,IAAIzB,IAAc,IAC7BtB,EACHoC,QACAlI,MAAO,MAGd,+CAnUQ6M,GAAoBvO,gEAApBuO,EAAoBD,QAApBC,EAAoB,qBAFjB,SAEHA,CAAb,sCCLO,MAAM9N,EAAyB,CAClC,CAAE6C,GAAI,aAAcC,KAAM,cAC1B,CAAED,GAAI,cAAeC,KAAM,eAC3B,CAAED,GAAI,aAAcC,KAAM,uBAC1B,CAAED,GAAI,aAAcC,KAAM,uBAC1B,CAAED,GAAI,YAAaC,KAAM,kBACzB,CAAED,GAAI,WAAYC,KAAM,iBACxB,CAAED,GAAI,eAAgBC,KAAM,gBAC5B,CAAED,GAAI,SAAUC,KAAM,kBARY,kCCtC/B,MAAMoI,EAAgC,CACzC,CAAErI,GAAI,UAAWC,KAAM,UAAW6M,KAAM,CAAEC,MAAO,kBAAoBc,OAAQ,QAC7E,CAAE7N,GAAI,WAAYC,KAAM,WAAY6M,KAAM,CAAEC,MAAO,mBAAqBc,OAAQ,WAChF,CACI7N,GAAI,YACJC,KAAM,YACN6M,KAAM,CAAEC,MAAO,oBACfc,OAAQ,WAEZ,CAAE7N,GAAI,QAASC,KAAM,QAAS6M,KAAM,CAAEC,MAAO,gBAAkBc,OAAQ,WACvE,CACI7N,GAAI,YACJC,KAAM,YACN6M,KAAM,CAAEC,MAAO,oBACfc,OAAQ,WAEZ,CACI7N,GAAI,YACJC,KAAM,YACN6M,KAAM,CAAEC,MAAO,oBACfc,OAAQ,WApB6B","names":["SharedCateringModule","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","i0","$event","set_r2","n","CateringConfigModalComponent","constructor","_data","this","EventEmitter","RULE_TYPES","rulesets","config","map","set","rules","i","JSON","stringify","new_id","Math","floor","random","saveChanges","loading","value","parse","event","emit","reason","metadata","MAT_DIALOG_DATA","selectors","ctx","CateringImportMenuModalComponent","handleFileEvent","element","target","files","length","file","fileReader","FileReader","addEventListener","e","data","csvToJson","result","filter","_","type","toLowerCase","CateringItem","options","tags","id","name","group","category","multiple","unit_price","readAsText","downloadTemplate","downloadFile","CateringItemModalComponent","FormGroup","FormControl","item","Validators","description","accept_points","discount_cap","ENTER","COMMA","SPACE","categories","tag_list","form","controls","renderPercent","addTag","markAsDirty","input","trim","push","setValue","removeTag","existing_tag","index","indexOf","splice","randomInt","$localize","CateringMenuItemComponent","_catering","addOption","option","deleteOption","addItem","deleteItem","symbol","currency","CateringMenuComponent","menu","BehaviorSubject","pipe","menu_map","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringOrderItemComponent","CateringOrderListComponent","_orders","filtered","ngOnInit","startPolling","ngOnDestroy","stopPolling","trackByFn","order","undefined","is_available","rule","includes","space","zones","matches","condition","date","Date","isAfter","setHours","isBefore","duration","stringToMinutes","ext","CateringOrderModalComponent","BaseClass","super","code","c","CateringOrder","getCateringConfig","level","parent_id","subscribe","list","unique","cat","cateringItemAvailable","menu_items","updateMenuQuantities","timeout","choose_options","old_item","items","find","itm","reduce","o","opt","selectOptions","then","new_item","W","options_string","quantity","removeItem","updateItemQuantity","amount","sort","a","b","localeCompare","optionsFor","join","saveOrder","confirmOrder","show_order_details","CateringOrderOptionsModalComponent","groups","group_list","updateGroupOption","option_state","saveOptions","CateringOrderComponent","CATERING_STATUSES","s","updateStatus","status","statuses","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","combineLatest","_filters","_poll","debounceTime","switchMap","filters","_loading","next","start","getUnixTime","startOfDay","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","tap","shareReplay","asObservable","orders","search","checkOrder","getValue","subscription","delay","interval","valueOf","clearInterval","updated_order","CalendarEvent","catering","saveEvent","factory","CateringStateService","_org","_dialog","_settings","C","_menu","_currency","active_building","bld","getCateringForZone","get","manageCateringOrder","ref","open","details","Promise","race","componentInstance","first","toPromise","afterClosed","close","findIndex","updateMenu","building","g","openConfirmModal","title","content","icon","class","editConfig","updateConfig","importMenu","updated_menu","catch","notifyError","notifySuccess","zone_id","updateMetadata","showMetadata","Array","addItemToOrder","match","colour"],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering.vars.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets; let i = index\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                    <button mat-icon-button class=\"mb-6\" (click)=\"rulesets.splice(i, 1)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex items-center px-2 h-20 space-x-2\"\n                        *ngFor=\"let rule of set.rules; let i = index\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                        <button mat-icon-button class=\"mb-6\" (click)=\"set.rules.splice(i, 1)\">\n                            <app-icon>delete</app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n            <div class=\"flex items-center p-2 flex-1\">\n                <div class=\"flex-1\">\n                    <div>{{ item.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">\n                        {{ item.category }}\n                    </div>\n                </div>\n                <div\n                    class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                >\n                    {{ item.unit_price / 100 | currency: (symbol | async) }}\n                </div>\n            </div>\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                <app-icon>more_vert</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                [disabled]=\"!item.options.length\"\n                (click)=\"show_options = !show_options\"\n            >\n                <app-icon>expand_more</app-icon>\n            </button>\n        </div>\n        <div\n            options\n            *ngIf=\"item\"\n            class=\"bg-gray-100 overflow-hidden\"\n            [style.height]=\"\n                show_options ? item.options.length * 3.5 + 'rem' : '0'\n            \"\n        >\n            <div\n                class=\"flex p-2 items-center border-none border-t border-solid border-gray-300\"\n                *ngFor=\"let option of item.options\"\n            >\n                <div class=\"flex-1 px-2\">\n                    <div class=\"text\">{{ option.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">{{ option.group }}</div>\n                </div>\n                <button\n                    edit\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"editOption(option)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    remove\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"removeOption(option)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </div>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"addOption()\"\n            >\n                <app-icon>add</app-icon>\n                <div class=\"ml-2\">Add Option</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"editItem()\"\n            >\n                <app-icon>edit</app-icon>\n                <div class=\"ml-2\">Edit Item</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"removeItem()\"\n            >\n                <app-icon>delete</app-icon>\n                <div class=\"ml-2\">Remove Item</div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                background-color: #fff;\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n                overflow: hidden;\n                width: 768px;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab *ngFor=\"let group of categories\" [label]=\"group\">\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right\">\n                <div name=\"item-bar\" class=\"bg-gray-300\"></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    mat-icon-button\n                    class=\"border border-gray-300 border-dashed text-2xl text-dark-fade\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div class=\"flex-1 border-b border-gray-300 border-solid py-4\">\n                {{ item?.name }}\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n\n            [name='item-bar'] {\n                height: 2px;\n                margin-left: auto;\n                margin-right: 1rem;\n                width: calc(50% - 0.9375rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public item: CateringItem;\n\n    public active = false;\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-24\">Charge Code</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block text-dark-fade\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency:code }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency:code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--primary);\n                border-bottom: 2px solid var(--primary);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public readonly code = this._data.code || 'USD';\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency:code }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency:code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 bg-gray-100\"\n            [class.shown]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div class=\"w-20 flex items-center justify-center\">\n                <div\n                    class=\"rounded-full bg-gray-300  p-2 text-2xl text-dark-fade flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">{{ order.deliver_at | date: 'shortTime' }}</div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-24\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button mat-icon-button (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <div\n                name=\"bar\"\n                class=\"absolute top-0 bg-gray-300\"\n                [style.height]=\"3.125 * order.items.length - 1 + 'rem'\"\n            ></div>\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            .shown {\n                background-color: #eee;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = (s) =>\n        this._orders.updateStatus(this.order, s);\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    constructor(private _orders: CateringOrdersService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends BaseClass {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(filters.date || Date.now()));\n            const end = getUnixTime(endOfDay(filters.date || Date.now()));\n            return queryEvents({\n                zone_ids: (filters.zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list.filter((order) => checkOrder(order, this._filters.getValue()))\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public updateStatus(order: CateringOrder, status: CateringOrderStatus) {\n        const updated_order = new CateringOrder({ ...order, status });\n        const event = new CalendarEvent({\n            ...order.event,\n            catering: [\n                ...order.event.ext('catering').filter((o) => o.id !== order.id),\n                updated_order,\n            ].map((i) => new CateringOrder({ ...i })),\n        });\n        return saveEvent(event);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog, private _settings: SettingsService) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(this._settings.get('app.currency') || bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, 'catering').toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n    /** Whether the catering option is active for the item */\n    active?: boolean;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"x_google_ignoreList":[]}