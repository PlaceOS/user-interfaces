{"version":3,"mappings":"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","names":["SharedCateringModule","imports","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","FormFieldsModule","i0","$event","set_r2","d","CateringConfigModalComponent","constructor","_data","this","EventEmitter","RULE_TYPES","rulesets","config","map","set","rules","i","JSON","stringify","Math","floor","random","saveChanges","loading","Object","value","parse","e","event","emit","reason","metadata","MAT_DIALOG_DATA","selectors","ctx","CateringImportMenuModalComponent","handleFileEvent","element","target","p","files","length","file","fileReader","FileReader","addEventListener","data","csvToJson","result","filter","_","type","toLowerCase","CateringItem","options","tags","id","name","group","category","multiple","unit_price","readAsText","downloadTemplate","downloadFile","CateringItemModalComponent","FormGroup","FormControl","item","Validators","description","accept_points","discount_cap","ENTER","COMMA","SPACE","categories","form","controls","renderPercent","addTag","markAsDirty","input","tag_list","trim","push","setValue","removeTag","existing_tag","index","indexOf","splice","randomInt","$localize","CateringMenuItemComponent","_catering","addOption","option","deleteOption","addItem","deleteItem","currency","CateringMenuComponent","menu","BehaviorSubject","pipe","menu_map","CateringItemOptionModalComponent","types","ngOnInit","new_option","parent","concat","CateringOrderItemComponent","CateringOrderListComponent","_orders","filtered","startPolling","ngOnDestroy","stopPolling","trackByFn","order","undefined","is_available","rule","includes","A","space","_a","zones","matches","condition","date","Date","isAfter","setHours","isBefore","duration","stringToMinutes","ext","CateringOrderModalComponent","BaseClass","super","CateringOrder","getCateringConfig","R","s","_b","level","_c","parent_id","subscribe","list","unique","cat","cateringItemAvailable","menu_items","updateMenuQuantities","timeout","choose_options","old_item","items","find","itm","reduce","c","o","opt","selectOptions","then","new_item","K","options_string","quantity","removeItem","updateItemQuantity","amount","sort","a","b","localeCompare","optionsFor","join","saveOrder","confirmOrder","show_order_details","CateringOrderOptionsModalComponent","groups","group_list","updateGroupOption","option_state","saveOptions","CateringOrderComponent","CATERING_STATUSES","updateStatus","statuses","status","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","combineLatest","_filters","_poll","debounceTime","switchMap","filters","_loading","next","start","getUnixTime","startOfDay","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","tap","shareReplay","asObservable","orders","search","checkOrder","getValue","subscription","delay","interval","valueOf","clearInterval","updated_order","CalendarEvent","catering","saveEvent","factory","CateringStateService","_org","_dialog","_menu","_currency","active_building","bld","__awaiter","getCateringForZone","manageCateringOrder","ref","open","details","Promise","race","componentInstance","first","toPromise","afterClosed","close","l","findIndex","updateMenu","building","f","openConfirmModal","title","content","icon","class","editConfig","updateConfig","importMenu","updated_menu","catch","notifyError","notifySuccess","zone_id","updateMetadata","showMetadata","Array","addItemToOrder","match","N","Z","colour"],"sources":["./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering.vars.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n            <div class=\"flex items-center p-2 flex-1\">\n                <div class=\"flex-1\">\n                    <div>{{ item.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">\n                        {{ item.category }}\n                    </div>\n                </div>\n                <div\n                    class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                >\n                    {{ item.unit_price / 100 | currency: (symbol | async) }}\n                </div>\n            </div>\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                <app-icon>more_vert</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                [disabled]=\"!item.options.length\"\n                (click)=\"show_options = !show_options\"\n            >\n                <app-icon>expand_more</app-icon>\n            </button>\n        </div>\n        <div\n            options\n            *ngIf=\"item\"\n            class=\"bg-gray-100 overflow-hidden\"\n            [style.height]=\"\n                show_options ? item.options.length * 3.5 + 'rem' : '0'\n            \"\n        >\n            <div\n                class=\"flex p-2 items-center border-none border-t border-solid border-gray-300\"\n                *ngFor=\"let option of item.options\"\n            >\n                <div class=\"flex-1 px-2\">\n                    <div class=\"text\">{{ option.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">{{ option.group }}</div>\n                </div>\n                <button\n                    edit\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"editOption(option)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    remove\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"removeOption(option)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </div>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"addOption()\"\n            >\n                <app-icon>add</app-icon>\n                <div class=\"ml-2\">Add Option</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"editItem()\"\n            >\n                <app-icon>edit</app-icon>\n                <div class=\"ml-2\">Edit Item</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"removeItem()\"\n            >\n                <app-icon>delete</app-icon>\n                <div class=\"ml-2\">Remove Item</div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                background-color: #fff;\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n                overflow: hidden;\n                width: 768px;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab *ngFor=\"let group of categories\" [label]=\"group\">\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <div class=\"w-20 text-right\">\n            <div name=\"item-bar\" class=\"bg-gray-300\"></div>\n        </div>\n        <div class=\"w-12 mr-4\">\n            <button\n                mat-icon-button\n                class=\"border border-gray-300 border-dashed text-2xl text-dark-fade\"\n                [class.bg-success]=\"active\"\n                [class.text-white]=\"active\"\n                [class.border-solid]=\"active\"\n            >\n                <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n            </button>\n        </div>\n        <div class=\"flex-1 border-b border-gray-300 border-solid py-4\">\n            {{ item?.name }}\n        </div>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n\n            [name='item-bar'] {\n                height: 2px;\n                margin-left: auto;\n                margin-right: 1rem;\n                width: calc(50% - 0.9375rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public item: CateringItem;\n\n    public active = false;\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-24\">Charge Code</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block text-dark-fade\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 bg-gray-100\"\n            [class.shown]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div class=\"w-20 flex items-center justify-center\">\n                <div\n                    class=\"rounded-full bg-gray-300  p-2 text-2xl text-dark-fade flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div class=\"w-24\">{{ order.deliver_at | date: 'shortTime' }}</div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-24\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button mat-icon-button (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <div\n                name=\"bar\"\n                class=\"absolute top-0 bg-gray-300\"\n                [style.height]=\"3.125 * order.items.length - 1 + 'rem'\"\n            ></div>\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            .shown {\n                background-color: #eee;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = (s) =>\n        this._orders.updateStatus(this.order, s);\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    constructor(private _orders: CateringOrdersService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends BaseClass {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(filters.date || Date.now()));\n            const end = getUnixTime(endOfDay(filters.date || Date.now()));\n            return queryEvents({\n                zone_ids: (filters.zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list.filter((order) => checkOrder(order, this._filters.getValue()))\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public updateStatus(order: CateringOrder, status: CateringOrderStatus) {\n        const updated_order = new CateringOrder({ ...order, status });\n        const event = new CalendarEvent({\n            ...order.event,\n            catering: [\n                ...order.event.ext('catering').filter((o) => o.id !== order.id),\n                updated_order,\n            ].map((i) => new CateringOrder({ ...i })),\n        });\n        return saveEvent(event);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, 'catering').toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"sourceRoot":"webpack:///","file":"default-libs_catering_src_index_ts.js"}