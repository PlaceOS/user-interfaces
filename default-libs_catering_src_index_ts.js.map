{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"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","names":["i0","$event","i_r2","_r1","index","ctx_r2","charge_codes","removeCode","ChargeCodeListModalComponent_main_6_div_1_Template","trackByFn","_r4","addCodesFromFile","newCode","saveChargeCodes","ChargeCodeListModalComponent","constructor","_state","_dialog_ref","this","loading","ngOnInit","_this","_asyncToGenerator","pipe","take","toPromise","push","splice","event","target","file","files","reader","FileReader","readAsText","addEventListener","evt","list","csvToJson","srcElement","result","code","unique","value","_","notifyError","_this2","cleaned_codes","filter","trim","saveSettings","close","idx","item","static","t","i1","i2","core","VBU","selectors","decls","vars","consts","template","rf","ctx","ChargeCodeListModalComponent_main_6_Template","ChargeCodeListModalComponent_footer_7_Template","ChargeCodeListModalComponent_ng_template_8_Template","load_state_r5","SharedCateringModule","$C","G2t","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","ctx_r1","handleFileEvent","downloadTemplate","CateringImportMenuModalComponent","EventEmitter","element","length","fileReader","e","data","emit","reason","metadata","type","toLowerCase","map","i","CateringItem","options","tags","id","name","group","category","multiple","unit_price","downloadFile","_angular_core__WEBPACK_IMPORTED_MODULE_1__","outputs","CateringImportMenuModalComponent_button_3_Template","CateringImportMenuModalComponent_main_4_Template","CateringImportMenuModalComponent_ng_template_5_Template","load_state_r3","form","controls","invalid","touched","auto_r3","item_r6","_r5","$implicit","removeTag","CateringItemModalComponent_form_4_div_4_mat_chip_row_6_Template","addTag","tag_list","chipList_r7","separators","CateringItemModalComponent_form_4_div_2_Template","CateringItemModalComponent_form_4_div_3_Template","CateringItemModalComponent_form_4_div_4_Template","CateringItemModalComponent_form_4_div_5_Template","CateringItemModalComponent_form_4_div_6_Template","CateringItemModalComponent_form_4_div_27_Template","description","tmp_9_0","get","hasTag","_c0","renderPercent","images","_r8","saveChanges","dirty","option_r9","CateringItemModalComponent","_data","categories","tag","includes","FormGroup","FormControl","Validators","required","accept_points","discount_cap","ENTER","COMMA","SPACE","markAsDirty","input","setValue","existing_tag","indexOf","randomInt","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_2__","i18n_0","$localize","CateringItemModalComponent_button_3_Template","CateringItemModalComponent_form_4_Template","CateringItemModalComponent_footer_5_Template","CateringItemModalComponent_ng_template_6_Template","CateringItemModalComponent_mat_option_10_Template","load_state_r10","menu_r4","_r2","is_enabled","CateringMenuItemComponent_div_1_button_12_Template","show_options","symbol","can_edit","option_r6","editOption","_r7","removeOption","CateringMenuItemComponent_div_2_div_1_button_7_Template","CateringMenuItemComponent_div_2_div_1_button_8_Template","CateringMenuItemComponent_div_2_div_1_Template","CateringMenuItemComponent","_catering","is_editable","hide_for_zones","zone","state","updateItem","currency","addOption","option","deleteOption","editItem","addItem","removeItem","deleteItem","inputs","attrs","CateringMenuItemComponent_div_1_Template","CateringMenuItemComponent_div_2_Template","item_r2","CateringMenuComponent_ng_container_2_ng_container_1_Template","menu","item_r4","CateringMenuComponent_mat_tab_4_ng_container_1_Template","group_r5","tab_menu","CateringMenuComponent","shown_tab","BehaviorSubject","menu_map","next","CateringMenuComponent_ng_container_2_Template","CateringMenuComponent_mat_tab_4_Template","CateringMenuComponent_ng_template_5_Template","tmp_1_0","empty_state_r6","ctx_r0","auto_r2","CateringItemOptionModalComponent_form_4_div_1_Template","CateringItemOptionModalComponent_form_4_div_2_Template","CateringItemOptionModalComponent_form_4_div_3_Template","CateringItemOptionModalComponent_form_4_div_4_Template","_r3","option_r4","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringItemOptionModalComponent_button_3_Template","CateringItemOptionModalComponent_form_4_Template","CateringItemOptionModalComponent_footer_5_Template","CateringItemOptionModalComponent_ng_template_6_Template","CateringItemOptionModalComponent_mat_option_10_Template","opt_r3","CateringOrderItemComponent_ng_container_0_ng_container_14_div_1_Template","toggle","CateringOrderItemComponent_ng_container_0_ng_container_14_Template","active","amount","quantity","option_list","ACTIVE_ITEMS","Set","CateringOrderItemComponent","item_key","order_id","has","delete","add","_angular_core__WEBPACK_IMPORTED_MODULE_0__","CateringOrderItemComponent_ng_container_0_Template","order_r1","CateringOrderListComponent","_orders","order_list","filtered","startPolling","ngOnDestroy","stopPolling","order","undefined","CateringOrderListComponent_li_20_Template","CateringOrderListComponent_div_22_Template","CateringOrderListComponent_mat_progress_bar_24_Template","tmp_2_0","updateItemQuantity","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_4_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_a_counter_8_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_9_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_Template","cat_r5","menu_items","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_Template","CateringOrderModalComponent_div_0_ng_container_1_Template","show_order_details","order_details_r6","item_count","saveOrder","CateringOrderModalComponent_footer_1_ng_container_1_Template","CateringOrderModalComponent_footer_1_ng_template_2_Template","order_actions_r9","optionsFor","item_r11","CateringOrderModalComponent_ng_template_4_div_4_div_4_Template","_r10","total_cost","CateringOrderModalComponent_ng_template_4_div_4_Template","items","CateringOrderModalComponent","AsyncHandler","_org","currency_code","super","CateringOrder","rules","getCateringConfig","space","level","parent_id","subscribe","cat","cateringItemAvailable","updateMenuQuantities","timeout","choose_options","old_item","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","sort","a","b","localeCompare","join","confirmOrder","_angular_core__WEBPACK_IMPORTED_MODULE_4__","features","CateringOrderModalComponent_div_0_Template","CateringOrderModalComponent_footer_1_Template","CateringOrderModalComponent_ng_template_2_Template","CateringOrderModalComponent_ng_template_4_Template","load_state_r12","opt_r4","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_div_4_Template","group_r2","updateGroupOption","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_Template","opt_r6","option_state","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_div_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_Template","CateringOrderOptionsModalComponent_div_7_ng_container_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_Template","multi_options_r7","CateringOrderOptionsModalComponent","groups","group_list","saveOptions","CateringOrderOptionsModalComponent_div_7_Template","notes","CateringOrderComponent_div_0_span_18_Template","CateringOrderComponent_div_0_span_21_Template","CateringOrderComponent_div_0_button_25_Template","CateringOrderComponent_div_0_span_28_Template","show_items","deliver_at","time_format","date","date_end","display_name","organiser","host","charge_code","invoice_number","status","colour","menu_r3","CateringOrderComponent_ul_1_li_1_Template","status_r6","updateStatus","CateringOrderComponent","statuses","_settings","CATERING_STATUSES","_ref","s","_x","apply","arguments","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringOrderComponent_div_0_Template","CateringOrderComponent_ul_1_Template","CateringOrderComponent_button_4_Template","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","filters","_filters","getValue","_poll","_loading","orders","combineLatest","debounceTime","switchMap","zones","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","catchError","of","events","flatten","valid_catering","format","tap","shareReplay","asObservable","checkOrder","search","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","extension_data","CalendarEvent","system_id","resources","system","booking","updateEventMetadata","_angular_core__WEBPACK_IMPORTED_MODULE_18__","jDH","factory","ɵfac","providedIn","CateringStateService","building","_menu","_dialog","_updated","_currency","_change","settings","active_building","showMetadata","details","post","require_notes","availability","disabled_rooms","bld","getCateringForZone","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","_this3","findIndex","updateMenu","_this4","_this5","_this6","openConfirmModal","title","content","icon","class","_this7","editConfig","_this8","config","AttachedResourceConfigModalComponent","saveNotes","updateConfig","importMenu","_this9","updated_menu","catch","notifySuccess","zone_id","updateMetadata","_this10","old_settings","Array","addItemToOrder","match","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/charge-code-list-modal.component.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.vars.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-neutral px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-base-200 border-dashed rounded-xl hover:bg-base-200 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-base-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div\n            class=\"w-full h-full bg-base-100 border border-base-200 overflow-hidden rounded\"\n        >\n            <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n                <mat-checkbox\n                    class=\"mr-2\"\n                    matTooltip=\"Allow Ordering Item\"\n                    [(ngModel)]=\"is_enabled\"\n                ></mat-checkbox>\n                <div class=\"flex items-center p-2 flex-1\">\n                    <div class=\"flex-1\">\n                        <div>{{ item.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ item.category }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"p-2 m-2 text-xs font-bold text-secondary-content rounded bg-secondary\"\n                    >\n                        {{ item.unit_price / 100 | currency: (symbol | async) }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    [matMenuTriggerFor]=\"menu\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!item.options.length\"\n                    (click)=\"show_options = !show_options\"\n                >\n                    <app-icon>expand_more</app-icon>\n                </button>\n            </div>\n            <div\n                options\n                *ngIf=\"item\"\n                class=\"bg-base-200 overflow-hidden\"\n                [style.height]=\"\n                    show_options ? item.options.length * 3.5 + 'rem' : '0'\n                \"\n            >\n                <div\n                    class=\"flex p-2 items-center border-t border-solid border-base-200 relative\"\n                    *ngFor=\"let option of item.options\"\n                >\n                    <div\n                        class=\"absolute inset-y-0 left-0 w-2 bg-black opacity-10\"\n                    ></div>\n                    <div class=\"flex-1 pl-4 pr-2\">\n                        <div class=\"text\">{{ option.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ option.group }}\n                        </div>\n                    </div>\n                    <button\n                        edit\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"editOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        remove\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"removeOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"addOption()\"\n                >\n                    <app-icon>add</app-icon>\n                    <div class=\"ml-2\">Add Option</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"editItem()\"\n                >\n                    <app-icon>edit</app-icon>\n                    <div class=\"ml-2\">Edit Item</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"removeItem()\"\n                >\n                    <app-icon>delete</app-icon>\n                    <div class=\"ml-2\">Remove Item</div>\n                </button>\n            </mat-menu>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                width: 48rem;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n\n    public get is_enabled() {\n        return !this.item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public set is_enabled(state: boolean) {\n        let list = this.item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...this.item, hide_for_zones: list })\n        );\n    }\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab\n                *ngFor=\"let group of categories\"\n                [attr.label]=\"group\"\n                [label]=\"group\"\n            >\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\nconst ACTIVE_ITEMS = new Set<string>();\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right h-14 relative\">\n                <div\n                    class=\"border-b-2 border-l-2 border-base-200 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border border-base-200 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"toggle()\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 border-b border-base-200 border-solid py-4 space-x-2\"\n            >\n                <div class=\"\">{{ item?.name }}</div>\n                <div class=\"flex-1\">\n                    <div\n                        class=\"p-1 rounded-full bg-neutral w-8 h-8 flex items-center justify-center\"\n                    >\n                        ⨯{{ item?.amount || item?.quantity || 1 }}\n                    </div>\n                </div>\n                <div class=\"flex space-x-2 mr-2\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-warning text-black rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public order_id: string;\n    @Input() public item: CateringItem;\n\n    public active = false;\n\n    public get item_key() {\n        return `${this.order_id}|${this.item?.id}`;\n    }\n\n    public ngOnInit() {\n        this.active = ACTIVE_ITEMS.has(this.item_key);\n    }\n\n    public toggle() {\n        if (ACTIVE_ITEMS.has(this.item_key)) {\n            ACTIVE_ITEMS.delete(this.item_key);\n            this.active = false;\n        } else {\n            ACTIVE_ITEMS.add(this.item_key);\n            this.active = true;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"sticky top-0 w-full text-sm font-medium flex items-center py-4 border-solid border-b border-base-200 bg-base-100\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"w-36\">Meeting Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-28\">Charge Code</div>\n            <div class=\"w-24\">Notes</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-base-200\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block opacity-30\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p class=\"p-4 text-center\">No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\nimport { AttachedResourceRuleset } from '@placeos/components';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<AttachedResourceRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-base-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-base-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-base-200\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--s);\n                border-bottom: 2px solid var(--s);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly AttachedResourceRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-base-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport {\n    ANIMATION_SHOW_CONTRACT_EXPAND,\n    AsyncHandler,\n    SettingsService,\n} from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2\"\n            [class.bg-base-200]=\"!show_items\"\n            [class.bg-base-200]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div\n                class=\"w-20 flex items-center justify-center z-20 h-full\"\n                [class.bg-base-200]=\"show_items\"\n                [class.dark:bg-neutral-700]=\"show_items\"\n            >\n                <div\n                    class=\"rounded-full bg-base-300 p-2 text-2xl text-black opacity-60 flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">\n                {{ order.deliver_at | date: time_format }}\n            </div>\n            <div time class=\"w-36 text-sm\">\n                {{ order.event?.date | date: 'MMM d' }},\n                {{ order.event?.date | date: time_format }}\n                <br />\n                {{ order.event?.date_end | date: 'MMM d' }},\n                {{ order.event?.date_end | date: time_format }}\n            </div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space?.display_name ||\n                        order.event?.space?.name ||\n                        ''\n                }}\n                <span\n                    class=\"opacity-30\"\n                    *ngIf=\"\n                        !(\n                            order.event?.space?.display_name ||\n                            order.event?.space?.name\n                        )\n                    \"\n                >\n                    No Location\n                </span>\n            </div>\n            <div class=\"w-56\">\n                {{ order.event?.organiser?.name || order.event?.host || '' }}\n                <span\n                    class=\"opacity-30\"\n                    *ngIf=\"!(order.event?.organiser?.name || order.event?.host)\"\n                >\n                    Unknown Host\n                </span>\n            </div>\n            <div class=\"w-28\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-24\">\n                <button\n                    *ngIf=\"order.notes\"\n                    class=\"clear underline\"\n                    [matTooltip]=\"order.notes\"\n                >\n                    View\n                </button>\n            </div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '' }}\n                <span class=\"opacity-30\" *ngIf=\"!order.invoice_number\">\n                    No Invoice\n                </span>\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button icon (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative z-0\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [order_id]=\"order?.id\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent extends AsyncHandler {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = async (s) => {\n        await this._orders.updateStatus(this.order, s);\n        this.timeout('status-change', () => ((this.order as any).status = s));\n    };\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    map,\n    switchMap,\n    debounceTime,\n    tap,\n    shareReplay,\n    catchError,\n} from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime, format } from 'date-fns';\n\nimport { AsyncHandler, currentUser, flatten } from '@placeos/common';\nimport {\n    queryEvents,\n    saveEvent,\n    updateEventMetadata,\n} from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            }).pipe(\n                catchError(() => of([])),\n                map((events) =>\n                    flatten(\n                        events.map((event) =>\n                            event.valid_catering.map(\n                                (o) => new CateringOrder({ ...o, event })\n                            )\n                        )\n                    )\n                ),\n                map((orders) =>\n                    orders.filter(\n                        (o) =>\n                            format(o.deliver_at, 'yyyy-MM-dd') ===\n                            format(start * 1000, 'yyyy-MM-dd')\n                    )\n                )\n            );\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list\n                .filter((order) => checkOrder(order, this._filters.getValue()))\n                .sort((a, b) => a.deliver_at - b.deliver_at)\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        order.status = status;\n        const updated_order = new CateringOrder({\n            ...order,\n            status,\n            event: null,\n        });\n        const catering = [\n            ...(order.event.extension_data.catering || []).filter(\n                (o) => o.id !== order.id\n            ),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const system_id = event?.resources[0]?.id || event?.system?.id;\n        const booking = await updateEventMetadata(\n            event.id,\n            system_id,\n            event.extension_data\n        ).toPromise();\n        this.timeout('refresh-list', () => this._poll.next(Date.now()), 1000);\n        (order as any).status = status;\n        return booking;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    AttachedResourceConfigModalComponent,\n    AttachedResourceRuleset,\n    AttachedResourceConfigModalData,\n} from '@placeos/components';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n\n    private _change = new BehaviorSubject(0);\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_),\n        switchMap(([_]) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            AttachedResourceConfigModalComponent,\n            AttachedResourceConfigModalData\n        >(AttachedResourceConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        const result = await updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n        this._change.next(Date.now());\n        return result;\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<AttachedResourceRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: AttachedResourceRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"x_google_ignoreList":[]}