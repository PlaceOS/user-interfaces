{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"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","names":["i0","$event","set_r2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","CateringConfigModalComponent","AsyncHandler","new_id","Math","floor","random","constructor","_data","super","this","EventEmitter","require_notes","RULE_TYPES","rulesets","config","map","set","rules","i","JSON","stringify","saveNotesSetting","value","timeout","saveNotes","saveChanges","loading","parse","event","emit","reason","metadata","MAT_DIALOG_DATA","selectors","ctx","CateringImportMenuModalComponent","handleFileEvent","element","target","files","length","file","fileReader","FileReader","addEventListener","e","data","csvToJson","result","filter","_","type","toLowerCase","CateringItem","options","tags","id","name","group","category","multiple","unit_price","readAsText","downloadTemplate","downloadFile","ctx_r20","ctx_r22","ctx_r23","ctx_r24","ctx_r25","CateringItemModalComponent","item","categories","tag_list","form","controls","renderPercent","hasTag","tag","includes","FormGroup","FormControl","Validators","description","accept_points","discount_cap","images","ENTER","COMMA","SPACE","addTag","markAsDirty","input","trim","push","setValue","removeTag","existing_tag","index","indexOf","splice","randomInt","_angular_core__WEBPACK_IMPORTED_MODULE_4__","$localize","CateringMenuItemComponent","can_edit","_catering","is_editable","is_enabled","hide_for_zones","zone","state","list","unique","updateItem","symbol","currency","addOption","option","deleteOption","addItem","deleteItem","CateringMenuComponent","menu","BehaviorSubject","pipe","menu_map","CateringItemOptionModalComponent","types","new_option","parent","concat","_angular_core__WEBPACK_IMPORTED_MODULE_2__","CateringOrderItemComponent","CateringOrderListComponent","_orders","filtered","ngOnInit","startPolling","ngOnDestroy","stopPolling","trackByFn","order","undefined","CateringOrderModalComponent","code","_org","currency_code","_this","CateringOrder","getCateringConfig","space","level","parent_id","subscribe","cat","cateringItemAvailable","menu_items","updateMenuQuantities","choose_options","old_item","items","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","quantity","removeItem","updateItemQuantity","amount","sort","a","b","localeCompare","optionsFor","join","saveOrder","confirmOrder","show_order_details","_angular_core__WEBPACK_IMPORTED_MODULE_6__","CateringOrderOptionsModalComponent","groups","group_list","updateGroupOption","option_state","saveOptions","CateringOrderComponent","status","statuses","CATERING_STATUSES","s","updateStatus","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","filters","_filters","getValue","next","combineLatest","_poll","debounceTime","switchMap","date","zones","_loading","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","ext","tap","shareReplay","asObservable","orders","checkOrder","search","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","CalendarEvent","booking","saveEvent","toPromise","factory","CateringRoomsStateModalComponent","requestSpacesForZone","building","availability","toggleRoom","rooms","take","selected","enableSelected","_this2","saveSettings","disabled_rooms","catch","disableSelected","disabled_list","_this3","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringStateService","_menu","_dialog","_settings","_currency","active_building","showMetadata","catchError","of","details","post","settings","charge_codes","bld","getCateringForZone","get","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","close","findIndex","updateMenu","_this4","_this5","openConfirmModal","title","content","icon","class","_this6","_this7","editConfig","_this8","updateConfig","importMenu","_this9","updated_menu","notifyError","notifySuccess","zone_id","updateMetadata","old_settings","_this10","Array","addItemToOrder","match","_angular_core__WEBPACK_IMPORTED_MODULE_22__","SharedCateringModule","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","colour","ChargeCodeListModalComponent","_state","_dialog_ref","newCode","removeCode","addCodesFromFile","reader","evt","srcElement","saveChargeCodes","cleaned_codes","idx"],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-rooms-state-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering.vars.ts","./libs/catering/src/lib/charge-code-list-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler } from '@placeos/common';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n    require_notes?: boolean;\n    saveNotes?: (v: boolean) => void;\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center max-w-lg px-4 pt-2 pb-4\">\n            <mat-checkbox\n                class=\"m-2\"\n                [ngModel]=\"require_notes\"\n                (ngModelChange)=\"saveNotesSetting($event)\"\n            >\n                Require notes for orders\n            </mat-checkbox>\n            <br />\n            <button\n                matRipple\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets; let i = index\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-6\"\n                        (click)=\"rulesets.splice(i, 1)\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex items-center px-2 h-20 space-x-2\"\n                        *ngFor=\"let rule of set.rules; let i = index\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                        <button\n                            icon\n                            matRipple\n                            class=\"mb-6\"\n                            (click)=\"set.rules.splice(i, 1)\"\n                        >\n                            <app-icon>delete</app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button btn matRipple class=\"mx-auto w-32\" (click)=\"saveChanges()\">\n                Save Changes\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent extends AsyncHandler {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n    public require_notes = this._data.require_notes;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        super();\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveNotesSetting(value: boolean) {\n        this.timeout(\n            'save-notes',\n            () => (this._data.saveNotes ? this._data.saveNotes(value) : ''),\n            1000\n        );\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div\n            class=\"w-full h-full bg-white dark:bg-neutral-700 border border-gray-300 dark:border-neutral-500 overflow-hidden rounded\"\n        >\n            <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n                <mat-checkbox\n                    class=\"mr-2\"\n                    matTooltip=\"Allow Ordering Item\"\n                    [(ngModel)]=\"is_enabled\"\n                ></mat-checkbox>\n                <div class=\"flex items-center p-2 flex-1\">\n                    <div class=\"flex-1\">\n                        <div>{{ item.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ item.category }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                    >\n                        {{ item.unit_price / 100 | currency: (symbol | async) }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    [matMenuTriggerFor]=\"menu\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!item.options.length\"\n                    (click)=\"show_options = !show_options\"\n                >\n                    <app-icon>expand_more</app-icon>\n                </button>\n            </div>\n            <div\n                options\n                *ngIf=\"item\"\n                class=\"bg-gray-100 dark:bg-neutral-700 overflow-hidden\"\n                [style.height]=\"\n                    show_options ? item.options.length * 3.5 + 'rem' : '0'\n                \"\n            >\n                <div\n                    class=\"flex p-2 items-center border-t border-solid border-gray-300 dark:border-neutral-500 relative\"\n                    *ngFor=\"let option of item.options\"\n                >\n                    <div\n                        class=\"absolute inset-y-0 left-0 w-2 bg-gray-400 dark:bg-neutral-600\"\n                    ></div>\n                    <div class=\"flex-1 pl-4 pr-2\">\n                        <div class=\"text\">{{ option.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ option.group }}\n                        </div>\n                    </div>\n                    <button\n                        edit\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"editOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        remove\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"removeOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"addOption()\"\n                >\n                    <app-icon>add</app-icon>\n                    <div class=\"ml-2\">Add Option</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"editItem()\"\n                >\n                    <app-icon>edit</app-icon>\n                    <div class=\"ml-2\">Edit Item</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"removeItem()\"\n                >\n                    <app-icon>delete</app-icon>\n                    <div class=\"ml-2\">Remove Item</div>\n                </button>\n            </mat-menu>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                width: 48rem;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n\n    public get is_enabled() {\n        return !this.item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public set is_enabled(state: boolean) {\n        let list = this.item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...this.item, hide_for_zones: list })\n        );\n    }\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab\n                *ngFor=\"let group of categories\"\n                [attr.label]=\"group\"\n                [label]=\"group\"\n            >\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right h-14 relative\">\n                <div\n                    class=\"border-b-2 border-l-2 border-gray-400 dark:border-neutral-500 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border border-gray-300 dark:border-neutral-500 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"active = !active\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 border-b border-gray-300 dark:border-neutral-500 border-solid py-4 space-x-2\"\n            >\n                <div class=\"\">{{ item?.name }}</div>\n                <div class=\"flex-1\">\n                    <div\n                        class=\"p-1 rounded-full bg-black/10 w-8 h-8 flex items-center justify-center\"\n                    >\n                        ⨯{{ item?.amount || item?.quantity || 1 }}\n                    </div>\n                </div>\n                <div class=\"flex space-x-2 mr-2\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-yellow-300 text-black rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public item: CateringItem;\n\n    public active = false;\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"sticky top-0 w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white dark:bg-neutral-800 dark:border-neutral-500\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-28\">Charge Code</div>\n            <div class=\"w-24\">Notes</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300 dark:border-neutral-500\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block opacity-60\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--primary);\n                border-bottom: 2px solid var(--primary);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { ANIMATION_SHOW_CONTRACT_EXPAND, AsyncHandler } from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 dark:bg-neutral-700\"\n            [class.bg-gray-100]=\"!show_items\"\n            [class.bg-gray-200]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div\n                class=\"w-20 flex items-center justify-center z-20 h-full\"\n                [class.bg-gray-200]=\"show_items\"\n                [class.dark:bg-neutral-700]=\"show_items\"\n            >\n                <div\n                    class=\"rounded-full bg-gray-400 dark:bg-neutral-800 p-2 text-2xl text-black dark:text-white opacity-60 flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">\n                {{ order.deliver_at | date: 'shortTime' }}\n            </div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-28\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-24\">\n                <button\n                    *ngIf=\"order.notes\"\n                    class=\"clear underline\"\n                    [matTooltip]=\"order.notes\"\n                >\n                    View\n                </button>\n            </div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button icon (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative z-0\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent extends AsyncHandler {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = async (s) => {\n        await this._orders.updateStatus(this.order, s);\n        this.timeout('status-change', () => ((this.order as any).status = s));\n    };\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    constructor(private _orders: CateringOrdersService) {\n        super();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { AsyncHandler, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list.filter((order) => checkOrder(order, this._filters.getValue()))\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        const updated_order = new CateringOrder({ ...order, status });\n        const catering = [\n            ...order.event.ext('catering').filter((o) => o.id !== order.id),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const booking = await saveEvent(event).toPromise();\n        this._poll.next(Date.now());\n        return booking;\n    }\n}\n","import { Component } from '@angular/core';\nimport { unique } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from 'libs/spaces/src/lib/space.utilities';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering';\n\n@Component({\n    selector: 'catering-rooms-state-modal',\n    template: `\n        <div>\n            <header class=\"flex items-center justify-between p-2\">\n                <h3 class=\"p-2\">Set Catering Availability for Rooms</h3>\n                <button icon mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                class=\"max-h-[65vh] overflow-auto\"\n                *ngIf=\"!loading; else load_state\"\n            >\n                <table class=\"min-w-[32rem]\">\n                    <thead\n                        class=\"border-b border-gray-200 dark:border-neutral-500\"\n                    >\n                        <tr>\n                            <td class=\"w-12\" (click)=\"toggleRoom('*')\">\n                                <mat-checkbox\n                                    class=\"pointer-events-none\"\n                                    [checked]=\"\n                                        (rooms | async)?.length ===\n                                        selected.length\n                                    \"\n                                    [indeterminate]=\"\n                                        selected.length > 0 &&\n                                        (rooms | async)?.length !==\n                                            selected.length\n                                    \"\n                                ></mat-checkbox>\n                            </td>\n                            <td></td>\n                            <td class=\"text-right text-xs\">\n                                {{ (rooms | async)?.length }} Room(s)\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            *ngFor=\"let space of rooms | async\"\n                            class=\"hover:bg-black/10 dark:hover:bg-white/5\"\n                            (click)=\"toggleRoom(space.id)\"\n                        >\n                            <td>\n                                <mat-checkbox\n                                    class=\"pointer-events-none\"\n                                    [checked]=\"selected.includes(space.id)\"\n                                ></mat-checkbox>\n                            </td>\n                            <td>{{ space.display_name || space.name }}</td>\n                            <td class=\"text-right\">\n                                <span\n                                    class=\"px-2 py-1 rounded-2xl\"\n                                    [class.bg-green-600]=\"\n                                        !(availability | async)?.includes(\n                                            space.id\n                                        )\n                                    \"\n                                    [class.bg-red-600]=\"\n                                        (availability | async)?.includes(\n                                            space.id\n                                        )\n                                    \"\n                                >\n                                    {{\n                                        !(availability | async)?.includes(\n                                            space.id\n                                        )\n                                            ? 'Enabled'\n                                            : 'Disabled'\n                                    }}\n                                </span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </main>\n            <footer\n                class=\"flex items-center p-2 justify-end space-x-2 border-t border-gray-200 dark:border-neutral-500\"\n            >\n                <button btn matRipple (click)=\"enableSelected()\">\n                    Enable Selected\n                </button>\n                <button btn matRipple (click)=\"disableSelected()\">\n                    Disable Selected\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving disabled room list...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            td {\n                padding: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringRoomsStateModalComponent {\n    public loading = false;\n    public selected: string[] = [];\n    public readonly rooms = requestSpacesForZone(this._org.building.id);\n    public readonly availability = this._catering.availability;\n\n    constructor(\n        private _catering: CateringStateService,\n        private _org: OrganisationService\n    ) {}\n\n    public async toggleRoom(id: string) {\n        if (id === '*') {\n            const rooms = await this.rooms.pipe(take(1)).toPromise();\n            if (this.selected.length !== rooms.length)\n                this.selected = rooms.map((_) => _.id);\n            else this.selected = [];\n        } else {\n            if (this.selected.includes(id))\n                this.selected = this.selected.filter((_) => _ !== id);\n            else this.selected = [...this.selected, id];\n        }\n    }\n\n    public async enableSelected() {\n        this.loading = true;\n        const disabled_list = await this.availability.pipe(take(1)).toPromise();\n        const list = disabled_list.filter((_) => !this.selected.includes(_));\n        await this._catering\n            .saveSettings({ disabled_rooms: list })\n            .catch(() => null);\n        this.loading = false;\n    }\n\n    public async disableSelected() {\n        const disabled_list = await this.availability.pipe(take(1)).toPromise();\n        const list = unique(disabled_list.concat(this.selected));\n        await this._catering\n            .saveSettings({ disabled_rooms: list })\n            .catch(() => null);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = this._org.active_building.pipe(\n        filter((_) => !!_),\n        switchMap((_) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        return updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus =\n    | 'accepted'\n    | 'preparing'\n    | 'ready'\n    | 'delivered'\n    | 'cancelled';\n\nexport interface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n    /** Whether the catering option is active for the item */\n    active?: boolean;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour' | 'is_before' | 'within_hours', number]\n    | ['min_length' | 'max_length' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour of Day' },\n    { id: 'before_hour', name: 'Before Hour of Day' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Hours before Meeting' },\n    { id: 'within_hours', name: 'Within Hours before Meeting' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { CateringRoomsStateModalComponent } from './catering-rooms-state-modal.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringRoomsStateModalComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-black/10 px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n"],"x_google_ignoreList":[]}