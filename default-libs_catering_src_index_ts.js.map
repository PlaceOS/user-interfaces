{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"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","names":["i0","$event","i_r6","_r8","index","ctx_r7","charge_codes","ctx_r9","removeCode","ctx_r4","ChargeCodeListModalComponent_main_6_div_1_Template","ctx_r0","trackByFn","_r11","ctx_r10","addCodesFromFile","ctx_r12","newCode","ctx_r13","saveChargeCodes","ChargeCodeListModalComponent","constructor","_state","_dialog_ref","this","loading","ngOnInit","_this","_asyncToGenerator","pipe","take","toPromise","push","splice","event","target","file","files","reader","FileReader","readAsText","addEventListener","evt","list","csvToJson","srcElement","result","code","unique","value","_","notifyError","_this2","cleaned_codes","filter","trim","saveSettings","close","idx","item","static","t","i1","i2","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","ChargeCodeListModalComponent_main_6_Template","ChargeCodeListModalComponent_footer_7_Template","ChargeCodeListModalComponent_ng_template_8_Template","_r2","SharedCateringModule","oAB","cJS","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","_r5","handleFileEvent","ctx_r6","downloadTemplate","ctx_r3","CateringImportMenuModalComponent","EventEmitter","element","length","fileReader","e","data","emit","reason","metadata","type","toLowerCase","map","i","CateringItem","options","tags","id","name","group","category","multiple","unit_price","downloadFile","_angular_core__WEBPACK_IMPORTED_MODULE_1__","outputs","CateringImportMenuModalComponent_button_3_Template","CateringImportMenuModalComponent_main_4_Template","CateringImportMenuModalComponent_ng_template_5_Template","form","controls","invalid","touched","ctx_r8","item_r15","_r17","$implicit","ctx_r16","removeTag","CateringItemModalComponent_form_4_div_4_mat_chip_row_6_Template","_r19","ctx_r18","addTag","tag_list","_r13","separators","ctx_r11","CateringItemModalComponent_form_4_div_2_Template","CateringItemModalComponent_form_4_div_3_Template","CateringItemModalComponent_form_4_div_4_Template","CateringItemModalComponent_form_4_div_5_Template","CateringItemModalComponent_form_4_div_6_Template","_r21","ctx_r20","ctx_r22","ctx_r23","ctx_r24","ctx_r25","CateringItemModalComponent_form_4_div_27_Template","ctx_r1","description","tmp_6_0","get","hasTag","_c6","renderPercent","images","_r27","ctx_r26","saveChanges","ctx_r2","dirty","option_r28","CateringItemModalComponent","_data","categories","tag","includes","FormGroup","FormControl","Validators","required","accept_points","discount_cap","ENTER","COMMA","SPACE","markAsDirty","input","setValue","existing_tag","indexOf","randomInt","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_2__","i18n_0","$localize","CateringItemModalComponent_button_3_Template","CateringItemModalComponent_form_4_Template","CateringItemModalComponent_footer_5_Template","CateringItemModalComponent_ng_template_6_Template","CateringItemModalComponent_mat_option_10_Template","_r3","is_enabled","CateringMenuItemComponent_div_1_button_12_Template","show_options","symbol","can_edit","option_r8","editOption","_r16","ctx_r14","removeOption","CateringMenuItemComponent_div_2_div_1_button_7_Template","CateringMenuItemComponent_div_2_div_1_button_8_Template","CateringMenuItemComponent_div_2_div_1_Template","CateringMenuItemComponent","_catering","is_editable","hide_for_zones","zone","state","updateItem","currency","addOption","option","deleteOption","editItem","addItem","removeItem","deleteItem","inputs","attrs","_c0","CateringMenuItemComponent_div_1_Template","CateringMenuItemComponent_div_2_Template","item_r5","CateringMenuComponent_ng_container_2_ng_container_1_Template","menu","item_r8","CateringMenuComponent_mat_tab_4_ng_container_1_Template","group_r6","tab_menu","CateringMenuComponent","shown_tab","BehaviorSubject","menu_map","next","CateringMenuComponent_ng_container_2_Template","CateringMenuComponent_mat_tab_4_Template","CateringMenuComponent_ng_template_5_Template","tmp_0_0","CateringItemOptionModalComponent_form_4_div_1_Template","CateringItemOptionModalComponent_form_4_div_2_Template","CateringItemOptionModalComponent_form_4_div_3_Template","CateringItemOptionModalComponent_form_4_div_4_Template","_r12","option_r13","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringItemOptionModalComponent_button_3_Template","CateringItemOptionModalComponent_form_4_Template","CateringItemOptionModalComponent_footer_5_Template","CateringItemOptionModalComponent_ng_template_6_Template","CateringItemOptionModalComponent_mat_option_10_Template","opt_r2","CateringOrderItemComponent_ng_container_0_ng_container_14_div_1_Template","_r6","ctx_r5","toggle","CateringOrderItemComponent_ng_container_0_ng_container_14_Template","active","amount","quantity","option_list","ACTIVE_ITEMS","Set","CateringOrderItemComponent","item_key","order_id","has","delete","add","_angular_core__WEBPACK_IMPORTED_MODULE_0__","CateringOrderItemComponent_ng_container_0_Template","order_r3","CateringOrderListComponent","_orders","order_list","filtered","startPolling","ngOnDestroy","stopPolling","order","undefined","CateringOrderListComponent_li_18_Template","CateringOrderListComponent_div_20_Template","CateringOrderListComponent_mat_progress_bar_22_Template","tmp_2_0","item_r11","ctx_r15","updateItemQuantity","ctx_r19","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_4_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_a_counter_8_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_9_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_Template","cat_r8","menu_items","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_Template","CateringOrderModalComponent_div_0_ng_container_1_Template","show_order_details","_r4","_r28","ctx_r27","item_count","_r30","ctx_r29","ctx_r31","saveOrder","CateringOrderModalComponent_footer_1_ng_container_1_Template","CateringOrderModalComponent_footer_1_ng_template_2_Template","_r25","ctx_r34","optionsFor","item_r33","CateringOrderModalComponent_ng_template_4_div_4_div_4_Template","_r37","ctx_r36","total_cost","ctx_r32","CateringOrderModalComponent_ng_template_4_div_4_Template","items","CateringOrderModalComponent","AsyncHandler","_org","currency_code","super","CateringOrder","rules","getCateringConfig","space","level","parent_id","subscribe","cat","cateringItemAvailable","updateMenuQuantities","timeout","choose_options","old_item","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","sort","a","b","localeCompare","join","confirmOrder","_angular_core__WEBPACK_IMPORTED_MODULE_4__","features","CateringOrderModalComponent_div_0_Template","CateringOrderModalComponent_footer_1_Template","CateringOrderModalComponent_ng_template_2_Template","CateringOrderModalComponent_ng_template_4_Template","opt_r6","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_div_4_Template","group_r1","updateGroupOption","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_Template","opt_r14","_r18","ctx_r17","option_state","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_div_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_Template","CateringOrderOptionsModalComponent_div_7_ng_container_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_Template","CateringOrderOptionsModalComponent","groups","group_list","saveOptions","CateringOrderOptionsModalComponent_div_7_Template","notes","CateringOrderComponent_div_0_button_15_Template","show_items","deliver_at","time_format","display_name","organiser","host","charge_code","invoice_number","status","colour","CateringOrderComponent_ul_1_li_1_Template","status_r10","updateStatus","CateringOrderComponent","statuses","_settings","CATERING_STATUSES","_ref","s","_x","apply","arguments","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringOrderComponent_div_0_Template","CateringOrderComponent_ul_1_Template","CateringOrderComponent_button_4_Template","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","filters","_filters","getValue","_poll","_loading","orders","combineLatest","debounceTime","switchMap","date","zones","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","ext","tap","shareReplay","asObservable","checkOrder","search","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","CalendarEvent","booking","saveEvent","toJSON","_angular_core__WEBPACK_IMPORTED_MODULE_15__","Yz7","factory","ɵfac","providedIn","CateringStateService","building","_menu","_dialog","_updated","_currency","_change","settings","active_building","showMetadata","catchError","of","details","post","require_notes","availability","disabled_rooms","bld","getCateringForZone","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","_this3","findIndex","updateMenu","_this4","_this5","_this6","openConfirmModal","title","content","icon","class","_this7","editConfig","_this8","config","AttachedResourceConfigModalComponent","saveNotes","updateConfig","importMenu","_this9","updated_menu","catch","notifySuccess","zone_id","updateMetadata","_this10","old_settings","Array","addItemToOrder","match","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__"],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/charge-code-list-modal.component.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.vars.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-neutral px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-base-200 border-dashed rounded-xl hover:bg-base-200 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-base-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div\n            class=\"w-full h-full bg-base-100 border border-base-200 overflow-hidden rounded\"\n        >\n            <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n                <mat-checkbox\n                    class=\"mr-2\"\n                    matTooltip=\"Allow Ordering Item\"\n                    [(ngModel)]=\"is_enabled\"\n                ></mat-checkbox>\n                <div class=\"flex items-center p-2 flex-1\">\n                    <div class=\"flex-1\">\n                        <div>{{ item.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ item.category }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"p-2 m-2 text-xs font-bold text-secondary-content rounded bg-secondary\"\n                    >\n                        {{ item.unit_price / 100 | currency: (symbol | async) }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    [matMenuTriggerFor]=\"menu\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!item.options.length\"\n                    (click)=\"show_options = !show_options\"\n                >\n                    <app-icon>expand_more</app-icon>\n                </button>\n            </div>\n            <div\n                options\n                *ngIf=\"item\"\n                class=\"bg-base-200 overflow-hidden\"\n                [style.height]=\"\n                    show_options ? item.options.length * 3.5 + 'rem' : '0'\n                \"\n            >\n                <div\n                    class=\"flex p-2 items-center border-t border-solid border-base-200 relative\"\n                    *ngFor=\"let option of item.options\"\n                >\n                    <div\n                        class=\"absolute inset-y-0 left-0 w-2 bg-black opacity-10\"\n                    ></div>\n                    <div class=\"flex-1 pl-4 pr-2\">\n                        <div class=\"text\">{{ option.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ option.group }}\n                        </div>\n                    </div>\n                    <button\n                        edit\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"editOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        remove\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"removeOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"addOption()\"\n                >\n                    <app-icon>add</app-icon>\n                    <div class=\"ml-2\">Add Option</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"editItem()\"\n                >\n                    <app-icon>edit</app-icon>\n                    <div class=\"ml-2\">Edit Item</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"removeItem()\"\n                >\n                    <app-icon>delete</app-icon>\n                    <div class=\"ml-2\">Remove Item</div>\n                </button>\n            </mat-menu>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                width: 48rem;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n\n    public get is_enabled() {\n        return !this.item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public set is_enabled(state: boolean) {\n        let list = this.item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...this.item, hide_for_zones: list })\n        );\n    }\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab\n                *ngFor=\"let group of categories\"\n                [attr.label]=\"group\"\n                [label]=\"group\"\n            >\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-base-200\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\nconst ACTIVE_ITEMS = new Set<string>();\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right h-14 relative\">\n                <div\n                    class=\"border-b-2 border-l-2 border-base-200 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border border-base-200 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"toggle()\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 border-b border-base-200 border-solid py-4 space-x-2\"\n            >\n                <div class=\"\">{{ item?.name }}</div>\n                <div class=\"flex-1\">\n                    <div\n                        class=\"p-1 rounded-full bg-neutral w-8 h-8 flex items-center justify-center\"\n                    >\n                        ⨯{{ item?.amount || item?.quantity || 1 }}\n                    </div>\n                </div>\n                <div class=\"flex space-x-2 mr-2\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-warning text-black rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public order_id: string;\n    @Input() public item: CateringItem;\n\n    public active = false;\n\n    public get item_key() {\n        return `${this.order_id}|${this.item?.id}`;\n    }\n\n    public ngOnInit() {\n        this.active = ACTIVE_ITEMS.has(this.item_key);\n    }\n\n    public toggle() {\n        if (ACTIVE_ITEMS.has(this.item_key)) {\n            ACTIVE_ITEMS.delete(this.item_key);\n            this.active = false;\n        } else {\n            ACTIVE_ITEMS.add(this.item_key);\n            this.active = true;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"sticky top-0 w-full text-sm font-medium flex items-center py-4 border-solid border-b border-base-200 bg-base-100\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-28\">Charge Code</div>\n            <div class=\"w-24\">Notes</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-base-200\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block opacity-60\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p class=\"p-4 text-center\">No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\nimport { AttachedResourceRuleset } from '@placeos/components';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<AttachedResourceRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-base-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-base-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-base-200\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--s);\n                border-bottom: 2px solid var(--s);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly AttachedResourceRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-base-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport {\n    ANIMATION_SHOW_CONTRACT_EXPAND,\n    AsyncHandler,\n    SettingsService,\n} from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2\"\n            [class.bg-base-200]=\"!show_items\"\n            [class.bg-base-200]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div\n                class=\"w-20 flex items-center justify-center z-20 h-full\"\n                [class.bg-base-200]=\"show_items\"\n                [class.dark:bg-neutral-700]=\"show_items\"\n            >\n                <div\n                    class=\"rounded-full bg-base-300 p-2 text-2xl text-black opacity-60 flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">\n                {{ order.deliver_at | date: time_format }}\n            </div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-28\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-24\">\n                <button\n                    *ngIf=\"order.notes\"\n                    class=\"clear underline\"\n                    [matTooltip]=\"order.notes\"\n                >\n                    View\n                </button>\n            </div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button icon (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative z-0\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [order_id]=\"order?.id\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent extends AsyncHandler {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = async (s) => {\n        await this._orders.updateStatus(this.order, s);\n        this.timeout('status-change', () => ((this.order as any).status = s));\n    };\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { AsyncHandler, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list\n                .filter((order) => checkOrder(order, this._filters.getValue()))\n                .sort((a, b) => a.deliver_at - b.deliver_at)\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        const updated_order = new CateringOrder({\n            ...order,\n            status,\n            event: null,\n        });\n        const catering = [\n            ...order.event.ext('catering').filter((o) => o.id !== order.id),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const booking = await saveEvent(event.toJSON()).toPromise();\n        this._poll.next(Date.now());\n        (order as any).status = status;\n        return booking;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    AttachedResourceConfigModalComponent,\n    AttachedResourceRuleset,\n    AttachedResourceConfigModalData,\n} from '@placeos/components';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n\n    private _change = new BehaviorSubject(0);\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_),\n        switchMap(([_]) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            AttachedResourceConfigModalComponent,\n            AttachedResourceConfigModalData\n        >(AttachedResourceConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        const result = await updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n        this._change.next(Date.now());\n        return result;\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<AttachedResourceRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: AttachedResourceRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n"],"x_google_ignoreList":[]}