{"version":3,"file":"default-libs_catering_src_index_ts.js","mappings":"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","names":["i0","type_r8","id","name","$event","rule_r5","_r10","$implicit","CateringConfigModalComponent_div_10_div_16_mat_option_3_Template","i_r6","index","set_r2","rules","splice","ctx_r4","rule_types","_r15","ctx_r16","push","show_rules","ctx_r17","i_r3","ctx_r18","rulesets","CateringConfigModalComponent_div_10_div_16_Template","length","ctx_r1","CateringConfigModalComponent","AsyncHandler","new_id","Math","floor","random","constructor","_data","super","this","event","EventEmitter","loading","require_notes","RULE_TYPES","config","map","set","i","JSON","stringify","saveNotesSetting","value","timeout","saveNotes","saveChanges","parse","emit","reason","metadata","t","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_2__","Xpm","selectors","outputs","features","decls","vars","consts","template","rf","ctx","CateringConfigModalComponent_button_3_Template","CateringConfigModalComponent_div_10_Template","_r5","handleFileEvent","ctx_r6","downloadTemplate","ctx_r3","CateringImportMenuModalComponent","element","target","files","file","fileReader","FileReader","addEventListener","e","data","csvToJson","result","filter","_","type","toLowerCase","CateringItem","options","tags","group","category","multiple","unit_price","readAsText","downloadFile","_angular_core__WEBPACK_IMPORTED_MODULE_1__","CateringImportMenuModalComponent_button_3_Template","CateringImportMenuModalComponent_main_4_Template","CateringImportMenuModalComponent_ng_template_5_Template","_r2","ctx_r7","form","controls","invalid","touched","ctx_r8","item_r15","_r17","removeTag","CateringItemModalComponent_form_4_div_4_mat_chip_row_6_Template","_r19","addTag","ctx_r9","tag_list","_r13","separators","ctx_r11","CateringItemModalComponent_form_4_div_2_Template","CateringItemModalComponent_form_4_div_3_Template","CateringItemModalComponent_form_4_div_4_Template","CateringItemModalComponent_form_4_div_5_Template","CateringItemModalComponent_form_4_div_6_Template","_r21","ctx_r20","ctx_r22","ctx_r23","ctx_r24","ctx_r25","CateringItemModalComponent_form_4_div_27_Template","description","tmp_6_0","get","hasTag","_c6","renderPercent","images","_r27","ctx_r26","ctx_r2","dirty","option_r28","CateringItemModalComponent","item","categories","tag","includes","FormGroup","FormControl","Validators","accept_points","discount_cap","ENTER","COMMA","SPACE","markAsDirty","input","trim","setValue","existing_tag","indexOf","randomInt","i18n_0","$localize","CateringItemModalComponent_button_3_Template","CateringItemModalComponent_form_4_Template","CateringItemModalComponent_footer_5_Template","CateringItemModalComponent_ng_template_6_Template","CateringItemModalComponent_mat_option_10_Template","_r3","is_enabled","CateringMenuItemComponent_div_1_button_12_Template","show_options","ctx_r0","symbol","can_edit","option_r8","editOption","_r16","ctx_r14","removeOption","CateringMenuItemComponent_div_2_div_1_button_7_Template","CateringMenuItemComponent_div_2_div_1_button_8_Template","CateringMenuItemComponent_div_2_div_1_Template","CateringMenuItemComponent","_catering","is_editable","hide_for_zones","zone","state","list","unique","updateItem","currency","addOption","option","deleteOption","editItem","addItem","removeItem","deleteItem","i1","inputs","attrs","_c0","CateringMenuItemComponent_div_1_Template","CateringMenuItemComponent_div_2_Template","item_r5","CateringMenuComponent_ng_container_2_ng_container_1_Template","menu","item_r8","CateringMenuComponent_mat_tab_4_ng_container_1_Template","group_r6","tab_menu","CateringMenuComponent","shown_tab","BehaviorSubject","pipe","menu_map","next","CateringMenuComponent_ng_container_2_Template","CateringMenuComponent_mat_tab_4_Template","CateringMenuComponent_ng_template_5_Template","tmp_0_0","CateringItemOptionModalComponent_form_4_div_1_Template","CateringItemOptionModalComponent_form_4_div_2_Template","CateringItemOptionModalComponent_form_4_div_3_Template","CateringItemOptionModalComponent_form_4_div_4_Template","_r12","option_r13","CateringItemOptionModalComponent","types","new_option","parent","concat","CateringItemOptionModalComponent_button_3_Template","CateringItemOptionModalComponent_form_4_Template","CateringItemOptionModalComponent_footer_5_Template","CateringItemOptionModalComponent_ng_template_6_Template","CateringItemOptionModalComponent_mat_option_10_Template","opt_r2","CateringOrderItemComponent_ng_container_0_ng_container_14_div_1_Template","_r6","ctx_r5","toggle","CateringOrderItemComponent_ng_container_0_ng_container_14_Template","active","amount","quantity","option_list","ACTIVE_ITEMS","Set","CateringOrderItemComponent","item_key","order_id","ngOnInit","has","delete","add","_angular_core__WEBPACK_IMPORTED_MODULE_0__","CateringOrderItemComponent_ng_container_0_Template","order_r3","CateringOrderListComponent","_orders","order_list","filtered","startPolling","ngOnDestroy","stopPolling","trackByFn","order","undefined","CateringOrderListComponent_li_18_Template","CateringOrderListComponent_div_20_Template","CateringOrderListComponent_mat_progress_bar_22_Template","tmp_2_0","item_r11","ctx_r15","updateItemQuantity","ctx_r19","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_4_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_a_counter_8_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_div_9_Template","ctx_r10","code","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_div_2_Template","cat_r8","menu_items","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_mat_tab_1_Template","CateringOrderModalComponent_div_0_ng_container_1_ng_container_2_Template","CateringOrderModalComponent_div_0_ng_container_1_Template","show_order_details","_r4","_r28","ctx_r27","item_count","_r30","ctx_r29","ctx_r31","saveOrder","CateringOrderModalComponent_footer_1_ng_container_1_Template","CateringOrderModalComponent_footer_1_ng_template_2_Template","_r25","ctx_r34","optionsFor","item_r33","CateringOrderModalComponent_ng_template_4_div_4_div_4_Template","_r37","ctx_r36","total_cost","ctx_r32","CateringOrderModalComponent_ng_template_4_div_4_Template","items","CateringOrderModalComponent","_org","currency_code","_this","_asyncToGenerator","CateringOrder","getCateringConfig","space","level","parent_id","subscribe","cat","cateringItemAvailable","updateMenuQuantities","choose_options","old_item","find","itm","reduce","c","o","opt","selectOptions","then","new_item","options_string","sort","a","b","localeCompare","join","confirmOrder","_angular_core__WEBPACK_IMPORTED_MODULE_4__","CateringOrderModalComponent_div_0_Template","CateringOrderModalComponent_footer_1_Template","CateringOrderModalComponent_ng_template_2_Template","CateringOrderModalComponent_ng_template_4_Template","opt_r6","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_div_4_Template","_r11","group_r1","updateGroupOption","CateringOrderOptionsModalComponent_div_7_ng_container_4_mat_radio_button_5_Template","opt_r14","_r18","option_state","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_div_4_Template","ctx_r13","CateringOrderOptionsModalComponent_div_7_ng_template_5_mat_checkbox_0_Template","CateringOrderOptionsModalComponent_div_7_ng_container_4_Template","CateringOrderOptionsModalComponent_div_7_ng_template_5_Template","CateringOrderOptionsModalComponent","groups","group_list","saveOptions","CateringOrderOptionsModalComponent_div_7_Template","notes","CateringOrderComponent_div_0_button_15_Template","show_items","deliver_at","time_format","display_name","organiser","host","charge_code","invoice_number","status","colour","CateringOrderComponent_ul_1_li_1_Template","status_r10","updateStatus","CateringOrderComponent","statuses","_settings","CATERING_STATUSES","_ref","s","_x","apply","arguments","i2","_angular_core__WEBPACK_IMPORTED_MODULE_5__","CateringOrderComponent_div_0_Template","CateringOrderComponent_ul_1_Template","CateringOrderComponent_button_4_Template","ANIMATION_SHOW_CONTRACT_EXPAND","CateringOrdersService","filters","_filters","getValue","_poll","_loading","orders","combineLatest","debounceTime","switchMap","date","zones","start","getUnixTime","startOfDay","Date","now","end","endOfDay","queryEvents","zone_ids","period_start","period_end","events","flatten","ext","tap","shareReplay","asObservable","checkOrder","search","subscription","delay","interval","valueOf","clearInterval","updated_order","catering","CalendarEvent","booking","saveEvent","toJSON","toPromise","_angular_core__WEBPACK_IMPORTED_MODULE_15__","Yz7","factory","ɵfac","providedIn","space_r4","toggleRoom","selected","availability","tmp_3_0","tmp_4_0","_r8","CateringRoomsStateModalComponent_main_7_tr_13_Template","rooms","tmp_1_0","CateringRoomsStateModalComponent","requestSpacesForZone","building","take","enableSelected","_this2","saveSettings","disabled_rooms","catch","disableSelected","_this3","disabled_list","CateringRoomsStateModalComponent_main_7_Template","CateringRoomsStateModalComponent_ng_template_13_Template","_r1","CateringStateService","_menu","_dialog","_updated","_currency","settings","active_building","showMetadata","catchError","of","details","post","charge_codes","bld","getCateringForZone","manageCateringOrder","ref","open","Promise","race","componentInstance","first","afterClosed","close","findIndex","updateMenu","_this4","_this5","_this6","openConfirmModal","title","content","icon","class","_this7","editConfig","_this8","updateConfig","importMenu","_this9","updated_menu","notifyError","notifySuccess","zone_id","updateMetadata","_this10","old_settings","Array","addItemToOrder","match","i3","_angular_core__WEBPACK_IMPORTED_MODULE_22__","SharedCateringModule","_angular_core__WEBPACK_IMPORTED_MODULE_21__","oAB","cJS","CommonModule","MatMenuModule","MatTabsModule","MatAutocompleteModule","MatDialogModule","MatCheckboxModule","MatRadioModule","MatTooltipModule","FormsModule","ReactiveFormsModule","ComponentsModule","MatFormFieldModule","FormFieldsModule","removeCode","ChargeCodeListModalComponent_main_6_div_1_Template","addCodesFromFile","ctx_r12","newCode","saveChargeCodes","ChargeCodeListModalComponent","_state","_dialog_ref","reader","evt","srcElement","cleaned_codes","idx","ChargeCodeListModalComponent_main_6_Template","ChargeCodeListModalComponent_footer_7_Template","ChargeCodeListModalComponent_ng_template_8_Template"],"sourceRoot":"webpack:///","sources":["./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering-rooms-state-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering.module.ts","./libs/catering/src/lib/catering.vars.ts","./libs/catering/src/lib/charge-code-list-modal.component.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler } from '@placeos/common';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n    require_notes?: boolean;\n    saveNotes?: (v: boolean) => void;\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center max-w-lg px-4 pt-2 pb-4\">\n            <mat-checkbox\n                class=\"m-2\"\n                [ngModel]=\"require_notes\"\n                (ngModelChange)=\"saveNotesSetting($event)\"\n            >\n                Require notes for orders\n            </mat-checkbox>\n            <br />\n            <button\n                matRipple\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets; let i = index\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        class=\"mb-6\"\n                        (click)=\"rulesets.splice(i, 1)\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex items-center px-2 h-20 space-x-2\"\n                        *ngFor=\"let rule of set.rules; let i = index\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                        <button\n                            icon\n                            matRipple\n                            class=\"mb-6\"\n                            (click)=\"set.rules.splice(i, 1)\"\n                        >\n                            <app-icon>delete</app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button btn matRipple class=\"mx-auto w-32\" (click)=\"saveChanges()\">\n                Save Changes\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent extends AsyncHandler {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n    public require_notes = this._data.require_notes;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        super();\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveNotesSetting(value: boolean) {\n        this.timeout(\n            'save-notes',\n            () => (this._data.saveNotes ? this._data.saveNotes(value) : ''),\n            1000\n        );\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    matRipple\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button icon matRipple mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex items-center space-x-2\">\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label\n                        for=\"title\"\n                        [class.error]=\"\n                            form.controls.name.invalid &&\n                            form.controls.name.touched\n                        \"\n                    >\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Item name\"\n                            formControlName=\"name\"\n                        />\n                        <mat-error>Name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.category\">\n                    <label\n                        for=\"category\"\n                        [class.error]=\"\n                            form.controls.category.invalid &&\n                            form.controls.category.touched\n                        \"\n                    >\n                        Category<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            formControlName=\"category\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-grid #chipList aria-label=\"Item Tags\">\n                        <mat-chip-row\n                            *ngFor=\"let item of tag_list\"\n                            (removed)=\"removeTag(item)\"\n                        >\n                            {{ item }}\n                            <button\n                                matChipRemove\n                                [attr.aria-label]=\"'Remove ' + item\"\n                            >\n                                <app-icon>cancel</app-icon>\n                            </button>\n                        </mat-chip-row>\n                    </mat-chip-grid>\n                    <input\n                        name=\"tags\"\n                        placeholder=\"Item tags e.g. Gluten Free, Vegan etc.\"\n                        i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                        [matChipInputFor]=\"chipList\"\n                        [matChipInputSeparatorKeyCodes]=\"separators\"\n                        [matChipInputAddOnBlur]=\"true\"\n                        (matChipInputTokenEnd)=\"addTag($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center flex-wrap max-w-lg\" list>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Gluten Free')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Gluten Free' })\n                            : removeTag('Gluten Free')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Gluten Free (GF)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegan')\"\n                    (ngModelChange)=\"\n                        $event ? addTag({ value: 'Vegan' }) : removeTag('Vegan')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegan (VG)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Vegetarian')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Vegetarian' })\n                            : removeTag('Vegetarian')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Vegetarian (V)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Dairy')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Dairy' })\n                            : removeTag('Contains Dairy')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Dairy (D)\n                </mat-checkbox>\n                <mat-checkbox\n                    [ngModel]=\"hasTag('Contains Nuts')\"\n                    (ngModelChange)=\"\n                        $event\n                            ? addTag({ value: 'Contains Nuts' })\n                            : removeTag('Contains Nuts')\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    Contains Nuts (N)\n                </mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                <image-list-field\n                    name=\"images\"\n                    formControlName=\"images\"\n                ></image-list-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [list] mat-checkbox {\n                margin: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n        images: new FormControl(this.item.images || []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    public hasTag(tag: string) {\n        return this.tag_list.includes(tag);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div\n            class=\"w-full h-full bg-white dark:bg-neutral-700 border border-gray-300 dark:border-neutral-500 overflow-hidden rounded\"\n        >\n            <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n                <mat-checkbox\n                    class=\"mr-2\"\n                    matTooltip=\"Allow Ordering Item\"\n                    [(ngModel)]=\"is_enabled\"\n                ></mat-checkbox>\n                <div class=\"flex items-center p-2 flex-1\">\n                    <div class=\"flex-1\">\n                        <div>{{ item.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ item.category }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                    >\n                        {{ item.unit_price / 100 | currency: (symbol | async) }}\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    [matMenuTriggerFor]=\"menu\"\n                    *ngIf=\"can_edit\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    [disabled]=\"!item.options.length\"\n                    (click)=\"show_options = !show_options\"\n                >\n                    <app-icon>expand_more</app-icon>\n                </button>\n            </div>\n            <div\n                options\n                *ngIf=\"item\"\n                class=\"bg-gray-100 dark:bg-neutral-700 overflow-hidden\"\n                [style.height]=\"\n                    show_options ? item.options.length * 3.5 + 'rem' : '0'\n                \"\n            >\n                <div\n                    class=\"flex p-2 items-center border-t border-solid border-gray-300 dark:border-neutral-500 relative\"\n                    *ngFor=\"let option of item.options\"\n                >\n                    <div\n                        class=\"absolute inset-y-0 left-0 w-2 bg-gray-400 dark:bg-neutral-600\"\n                    ></div>\n                    <div class=\"flex-1 pl-4 pr-2\">\n                        <div class=\"text\">{{ option.name }}</div>\n                        <div class=\"text-xs opacity-60\">\n                            {{ option.group }}\n                        </div>\n                    </div>\n                    <button\n                        edit\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"editOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        remove\n                        icon\n                        matRipple\n                        class=\"mx-2\"\n                        (click)=\"removeOption(option)\"\n                        *ngIf=\"can_edit\"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </div>\n            <mat-menu #menu=\"matMenu\">\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"addOption()\"\n                >\n                    <app-icon>add</app-icon>\n                    <div class=\"ml-2\">Add Option</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"editItem()\"\n                >\n                    <app-icon>edit</app-icon>\n                    <div class=\"ml-2\">Edit Item</div>\n                </button>\n                <button\n                    mat-menu-item\n                    class=\"flex items-center\"\n                    (click)=\"removeItem()\"\n                >\n                    <app-icon>delete</app-icon>\n                    <div class=\"ml-2\">Remove Item</div>\n                </button>\n            </mat-menu>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                overflow: hidden;\n                width: 48rem;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    public get can_edit() {\n        return this._catering.is_editable;\n    }\n\n    public get is_enabled() {\n        return !this.item.hide_for_zones.includes(this._catering.zone);\n    }\n\n    public set is_enabled(state: boolean) {\n        let list = this.item.hide_for_zones;\n        if (!state) list = unique([...list, this._catering.zone]);\n        else list = list.filter((_) => _ !== this._catering.zone);\n        this._catering.updateItem(\n            new CateringItem({ ...this.item, hide_for_zones: list })\n        );\n    }\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab\n                *ngFor=\"let group of categories\"\n                [attr.label]=\"group\"\n                [label]=\"group\"\n            >\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3>{{ option.id ? 'Edit' : 'Add' }} Item Option</h3>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto max-h-[65vh]\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button\n                btn\n                matRipple\n                [disabled]=\"!form.dirty\"\n                (click)=\"saveChanges()\"\n            >\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div loading class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [``],\n})\nexport class CateringItemOptionModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form = new FormGroup({\n        name: new FormControl(this.option.name || '', [Validators.required]),\n        group: new FormControl(this.option.group || '', [Validators.required]),\n        unit_price: new FormControl(this.option.unit_price),\n        multiple: new FormControl(!!this.option.multiple, []),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\nconst ACTIVE_ITEMS = new Set<string>();\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <ng-container *ngIf=\"item\">\n            <div class=\"w-20 text-right h-14 relative\">\n                <div\n                    class=\"border-b-2 border-l-2 border-gray-400 dark:border-neutral-500 w-4 h-16 absolute top-1/2 left-1/2 -translate-y-full\"\n                ></div>\n            </div>\n            <div class=\"w-12 mr-4\">\n                <button\n                    action\n                    icon\n                    matRipple\n                    class=\"border border-gray-300 dark:border-neutral-500 border-dashed text-xl text-dark-fade p-2\"\n                    [class.bg-success]=\"active\"\n                    [class.text-white]=\"active\"\n                    [class.border-solid]=\"active\"\n                    (click)=\"toggle()\"\n                >\n                    <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-1 border-b border-gray-300 dark:border-neutral-500 border-solid py-4 space-x-2\"\n            >\n                <div class=\"\">{{ item?.name }}</div>\n                <div class=\"flex-1\">\n                    <div\n                        class=\"p-1 rounded-full bg-black/10 w-8 h-8 flex items-center justify-center\"\n                    >\n                        ⨯{{ item?.amount || item?.quantity || 1 }}\n                    </div>\n                </div>\n                <div class=\"flex space-x-2 mr-2\">\n                    <ng-container *ngFor=\"let opt of item.option_list\">\n                        <div\n                            class=\"text-xs py-1 px-2 bg-yellow-300 text-black rounded-2xl shadow\"\n                            *ngIf=\"opt\"\n                        >\n                            {{ opt.name }}\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public order_id: string;\n    @Input() public item: CateringItem;\n\n    public active = false;\n\n    public get item_key() {\n        return `${this.order_id}|${this.item?.id}`;\n    }\n\n    public ngOnInit() {\n        this.active = ACTIVE_ITEMS.has(this.item_key);\n    }\n\n    public toggle() {\n        if (ACTIVE_ITEMS.has(this.item_key)) {\n            ACTIVE_ITEMS.delete(this.item_key);\n            this.active = false;\n        } else {\n            ACTIVE_ITEMS.add(this.item_key);\n            this.active = true;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"sticky top-0 w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white dark:bg-neutral-800 dark:border-neutral-500\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-28\">Charge Code</div>\n            <div class=\"w-24\">Notes</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300 dark:border-neutral-500\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block opacity-60\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\n\nimport { AsyncHandler, DialogEvent, HashMap, unique } from '@placeos/common';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport { OrganisationService } from '@placeos/organisation';\nimport { cateringItemAvailable } from './utilities';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    code: string;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{\n                                            item.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                icon\n                                                matRipple\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            icon\n                                            matRipple\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button btn matRipple class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    btn\n                    matRipple\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    matRipple\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save btn matRipple (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency: code }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n            }\n\n            input:focus {\n                border: none;\n                border-top: 2px solid var(--primary);\n                border-bottom: 2px solid var(--primary);\n                box-shadow: none;\n            }\n\n            input.error::placeholder {\n                color: rgba(var(--error), 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent\n    extends AsyncHandler\n    implements OnInit\n{\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption, CateringOptionGroup } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    code: string;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{\n                                            opt.unit_price / 100\n                                                | currency: code\n                                        }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency: code }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button btn matRipple class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n    public readonly code = this._data.code;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport {\n    ANIMATION_SHOW_CONTRACT_EXPAND,\n    AsyncHandler,\n    SettingsService,\n} from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 dark:bg-neutral-700\"\n            [class.bg-gray-100]=\"!show_items\"\n            [class.bg-gray-200]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div\n                class=\"w-20 flex items-center justify-center z-20 h-full\"\n                [class.bg-gray-200]=\"show_items\"\n                [class.dark:bg-neutral-700]=\"show_items\"\n            >\n                <div\n                    class=\"rounded-full bg-gray-400 dark:bg-neutral-800 p-2 text-2xl text-black dark:text-white opacity-60 flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div time class=\"w-24\">\n                {{ order.deliver_at | date: time_format }}\n            </div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-28\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-24\">\n                <button\n                    *ngIf=\"order.notes\"\n                    class=\"clear underline\"\n                    [matTooltip]=\"order.notes\"\n                >\n                    View\n                </button>\n            </div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button icon (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative z-0\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [order_id]=\"order?.id\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent extends AsyncHandler {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = async (s) => {\n        await this._orders.updateStatus(this.order, s);\n        this.timeout('status-change', () => ((this.order as any).status = s));\n    };\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { AsyncHandler, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([{ date, zones }]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(date || Date.now()));\n            const end = getUnixTime(endOfDay(date || Date.now()));\n            return queryEvents({\n                zone_ids: (zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list\n                .filter((order) => checkOrder(order, this._filters.getValue()))\n                .sort((a, b) => a.deliver_at - b.deliver_at)\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public async updateStatus(\n        order: CateringOrder,\n        status: CateringOrderStatus\n    ) {\n        const updated_order = new CateringOrder({\n            ...order,\n            status,\n            event: null,\n        });\n        const catering = [\n            ...order.event.ext('catering').filter((o) => o.id !== order.id),\n            updated_order,\n        ].map((i) => new CateringOrder({ ...i }));\n        const event = new CalendarEvent({\n            ...order.event,\n            catering,\n        });\n        const booking = await saveEvent(event.toJSON()).toPromise();\n        this._poll.next(Date.now());\n        (order as any).status = status;\n        return booking;\n    }\n}\n","import { Component } from '@angular/core';\nimport { unique } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from 'libs/spaces/src/lib/space.utilities';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering';\n\n@Component({\n    selector: 'catering-rooms-state-modal',\n    template: `\n        <div>\n            <header class=\"flex items-center justify-between p-2\">\n                <h3 class=\"p-2\">Set Catering Availability for Rooms</h3>\n                <button icon mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                class=\"max-h-[65vh] overflow-auto\"\n                *ngIf=\"!loading; else load_state\"\n            >\n                <table class=\"min-w-[32rem]\">\n                    <thead\n                        class=\"border-b border-gray-200 dark:border-neutral-500\"\n                    >\n                        <tr>\n                            <td class=\"w-12\" (click)=\"toggleRoom('*')\">\n                                <mat-checkbox\n                                    class=\"pointer-events-none\"\n                                    [checked]=\"\n                                        (rooms | async)?.length ===\n                                        selected.length\n                                    \"\n                                    [indeterminate]=\"\n                                        selected.length > 0 &&\n                                        (rooms | async)?.length !==\n                                            selected.length\n                                    \"\n                                ></mat-checkbox>\n                            </td>\n                            <td></td>\n                            <td class=\"text-right text-xs\">\n                                {{ (rooms | async)?.length }} Room(s)\n                            </td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            *ngFor=\"let space of rooms | async\"\n                            class=\"hover:bg-black/10 dark:hover:bg-white/5\"\n                            (click)=\"toggleRoom(space.id)\"\n                        >\n                            <td>\n                                <mat-checkbox\n                                    class=\"pointer-events-none\"\n                                    [checked]=\"selected.includes(space.id)\"\n                                ></mat-checkbox>\n                            </td>\n                            <td>{{ space.display_name || space.name }}</td>\n                            <td class=\"text-right\">\n                                <span\n                                    class=\"px-2 py-1 rounded-2xl\"\n                                    [class.bg-green-600]=\"\n                                        !(availability | async)?.includes(\n                                            space.id\n                                        )\n                                    \"\n                                    [class.bg-red-600]=\"\n                                        (availability | async)?.includes(\n                                            space.id\n                                        )\n                                    \"\n                                >\n                                    {{\n                                        !(availability | async)?.includes(\n                                            space.id\n                                        )\n                                            ? 'Enabled'\n                                            : 'Disabled'\n                                    }}\n                                </span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </main>\n            <footer\n                class=\"flex items-center p-2 justify-end space-x-2 border-t border-gray-200 dark:border-neutral-500\"\n            >\n                <button btn matRipple (click)=\"enableSelected()\">\n                    Enable Selected\n                </button>\n                <button btn matRipple (click)=\"disableSelected()\">\n                    Disable Selected\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving disabled room list...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            td {\n                padding: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringRoomsStateModalComponent {\n    public loading = false;\n    public selected: string[] = [];\n    public readonly rooms = requestSpacesForZone(this._org.building.id);\n    public readonly availability = this._catering.availability;\n\n    constructor(\n        private _catering: CateringStateService,\n        private _org: OrganisationService\n    ) {}\n\n    public async toggleRoom(id: string) {\n        if (id === '*') {\n            const rooms = await this.rooms.pipe(take(1)).toPromise();\n            if (this.selected.length !== rooms.length)\n                this.selected = rooms.map((_) => _.id);\n            else this.selected = [];\n        } else {\n            if (this.selected.includes(id))\n                this.selected = this.selected.filter((_) => _ !== id);\n            else this.selected = [...this.selected, id];\n        }\n    }\n\n    public async enableSelected() {\n        this.loading = true;\n        const disabled_list = await this.availability.pipe(take(1)).toPromise();\n        const list = disabled_list.filter((_) => !this.selected.includes(_));\n        await this._catering\n            .saveSettings({ disabled_rooms: list })\n            .catch(() => null);\n        this.loading = false;\n    }\n\n    public async disableSelected() {\n        const disabled_list = await this.availability.pipe(take(1)).toPromise();\n        const list = unique(disabled_list.concat(this.selected));\n        await this._catering\n            .saveSettings({ disabled_rooms: list })\n            .catch(() => null);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    updateMetadata,\n    showMetadata,\n    PlaceMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nexport interface CateringSettings {\n    require_notes?: boolean;\n    charge_codes?: string[];\n    disabled_rooms?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends AsyncHandler {\n    private _updated = new BehaviorSubject(0);\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public readonly settings = this._org.active_building.pipe(\n        filter((_) => !!_),\n        switchMap((_) =>\n            showMetadata(_.id, 'catering-settings').pipe(\n                catchError((_) => of({} as PlaceMetadata))\n            )\n        ),\n        map((_) => (_.details as CateringSettings) || {}),\n        tap((_) =>\n            this._settings.post('require_catering_notes', !!_?.require_notes)\n        ),\n        shareReplay(1)\n    );\n\n    public readonly charge_codes = this.settings.pipe(\n        map((_) => _.charge_codes || [])\n    );\n    public readonly availability = this.settings.pipe(\n        map((_) => _.disabled_rooms || [])\n    );\n\n    public zone = '';\n\n    public get is_editable() {\n        return !this.zone || this.zone === this._org.building?.id;\n    }\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(\n                        this._settings.get('app.currency') ||\n                            bld.currency ||\n                            'USD'\n                    );\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public updateItem(item: CateringItem) {\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) menu.splice(index, 1, item);\n        else menu.push(item);\n        this.updateMenu(this._org.building.id, menu).then(() =>\n            this._menu.next([...menu])\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                code: this._currency.getValue(),\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const { require_notes } = await this.settings.pipe(take(1)).toPromise();\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n                require_notes,\n                saveNotes: (b) => this.saveSettings({ require_notes: b }),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public async saveSettings(settings: CateringSettings) {\n        const old_settings = await this.settings.pipe(take(1)).toPromise();\n        return updateMetadata(this._org.building.id, {\n            id: this._org.building.id,\n            name: 'catering-settings',\n            details: { ...old_settings, ...settings },\n            description: `Catering settings for ${this._org.building.id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (await showMetadata(zone_id, 'catering').toPromise())\n            .details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus =\n    | 'accepted'\n    | 'preparing'\n    | 'ready'\n    | 'delivered'\n    | 'cancelled';\n\nexport interface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n    /** Whether the catering option is active for the item */\n    active?: boolean;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour' | 'is_before' | 'within_hours', number]\n    | ['min_length' | 'max_length' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour of Day' },\n    { id: 'before_hour', name: 'Before Hour of Day' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Hours before Meeting' },\n    { id: 'within_hours', name: 'Within Hours before Meeting' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n];\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\n\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nimport { NewCateringOrderModalComponent } from './catering-order-modal/new-catering-order-modal.component';\nimport { CateringItemListComponent } from './catering-order-modal/catering-item-list.component';\nimport { CateringItemDetailsComponent } from './catering-order-modal/catering-item-details.component';\nimport { CateringItemFiltersComponent } from './catering-order-modal/catering-item-filters.component';\nimport { CateringListFieldComponent } from './catering-list-field.component';\nimport { CateringRoomsStateModalComponent } from './catering-rooms-state-modal.component';\nimport { ChargeCodeListModalComponent } from './charge-code-list-modal.component';\nimport { CateringItemListItemComponent } from './catering-order-modal/catering-item-list-item.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n\n    CateringListFieldComponent,\n    NewCateringOrderModalComponent,\n    CateringItemListComponent,\n    CateringItemDetailsComponent,\n    CateringItemFiltersComponent,\n    CateringRoomsStateModalComponent,\n    CateringItemListItemComponent,\n\n    ChargeCodeListModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        MatFormFieldModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { csvToJson, notifyError, unique } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'charge-code-list-modal',\n    template: `\n        <header>\n            <h2>Edit Charge Codes</h2>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"overflow-auto max-h-[65vh] min-h-[20rem] flex flex-col\"\n        >\n            <div\n                class=\"flex items-center space-x-2 w-full hover:bg-black/10 px-2\"\n                *ngFor=\"\n                    let code of charge_codes;\n                    let i = index;\n                    trackBy: trackByFn\n                \"\n            >\n                <mat-form-field appearance=\"outline\" class=\"h-14 flex-1\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"charge_codes[i]\"\n                        placeholder=\"Charge Code\"\n                    />\n                </mat-form-field>\n                <button icon (click)=\"removeCode(i)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center p-2 space-x-2 border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn matRipple class=\"w-48 inverse relative\">\n                Import Codes\n                <input\n                    class=\"opacity-0 absolute inset-0\"\n                    type=\"file\"\n                    (change)=\"addCodesFromFile($event)\"\n                />\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"newCode()\">\n                Add Code\n            </button>\n            <button btn matRipple class=\"w-48\" (click)=\"saveChargeCodes()\">\n                Save Changes\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center p-20 space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving changes to charge codes...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ChargeCodeListModalComponent {\n    public charge_codes: string[] = [];\n    public loading = false;\n\n    constructor(\n        private _state: CateringStateService,\n        private _dialog_ref: MatDialogRef<ChargeCodeListModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        this.charge_codes =\n            (await this._state.charge_codes.pipe(take(1)).toPromise()) || [];\n    }\n\n    public newCode() {\n        this.charge_codes.push('');\n    }\n\n    public removeCode(index: number) {\n        this.charge_codes.splice(index, 1);\n    }\n\n    /**\n     * Load CSV file and populate the code list with the contents\n     * @param event File input field event\n     */\n    public addCodesFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    const list =\n                        csvToJson((evt.srcElement as any).result) || [];\n                    for (const { code, description } of list) {\n                        this.charge_codes.push(code);\n                    }\n                    this.charge_codes = unique(this.charge_codes);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    public async saveChargeCodes() {\n        this.loading = true;\n        const cleaned_codes = this.charge_codes.filter((_) => _ && _.trim());\n        await this._state.saveSettings({ charge_codes: cleaned_codes });\n        this._dialog_ref.close();\n    }\n\n    public trackByFn(idx: number, item: any) {\n        return idx;\n    }\n}\n"],"x_google_ignoreList":[]}