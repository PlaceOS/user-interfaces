{"version":3,"file":"apps_workplace_src_app_new-schedule_schedule_module_ts.js","mappings":"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","names":["dirtyDate","dirtyOptions","requiredArgs","arguments","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","toInteger","RangeError","date","toDate","day","getDay","diff","setDate","getDate","setHours","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","getFullYear","getMonth","i0","ScheduleCalendarComponent","constructor","this","startOfDay","Date","now","valueOf","fn","_onChange","_onTouch","ngOnInit","generateDates","setValue","new_value","active_date","offset","writeValue","value","changeMonth","change","addMonths","start","startOfWeek","startOfMonth","list","length","push","id","is_past","isBefore","is_month","isSameMonth","addDays","date_list","selectors","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","ctx","ScheduleStateService","BaseClass","super","BehaviorSubject","shown_types","combineLatest","_date","_poll","pipe","switchMap","queryEvents","period_start","getUnixTime","period_end","endOfDay","queryBookings","type","events","desks","parking","map","e","d","p","sort","a","b","tap","timeout","_loading","next","bookings","_filters","bkns","filters","filter","_","CalendarEvent","includes","asObservable","subscription","subscribe","toggleType","name","clear","i","getValue","factory","ScheduleFilterCardComponent","_state","_sheet_ref","t","dismiss","ScheduleFiltersComponent","_sheet","c","openFilters","open","ScheduleSidebarComponent","ScheduleMobileCalendarComponent","show_shortlist","short_list","ROUTES","path","component","ScheduleComponent","filtered_bookings","loading","isSameDay","isEvent","item","trackByFn","index","redirectTo","AppScheduleModule","CommonModule","SharedComponentModule","FormsModule","MatBottomSheetModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./node_modules/date-fns/esm/startOfWeek/index.js","./node_modules/date-fns/esm/startOfMonth/index.js","./node_modules/date-fns/esm/isSameMonth/index.js","./apps/workplace/src/app/new-schedule/schedule-calendar.component.ts","./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/new-schedule/schedule-filter-card.component.ts","./apps/workplace/src/app/new-schedule/schedule-filters.component.ts","./apps/workplace/src/app/new-schedule/schedule-sidebar.component.ts","./apps/workplace/src/app/new-schedule/schedule-mobile-calendar.component.ts","./apps/workplace/src/app/new-schedule/schedule.component.ts","./apps/workplace/src/app/new-schedule/schedule.module.ts"],"sourcesContent":["import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameMonth\n * @category Month Helpers\n * @summary Are the given dates in the same month (and year)?\n *\n * @description\n * Are the given dates in the same month (and year)?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same month (and year)\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 September 2014 and 25 September 2014 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))\n * //=> true\n *\n * @example\n * // Are 2 September 2014 and 25 September 2015 in the same month?\n * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))\n * //=> false\n */\n\nexport default function isSameMonth(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();\n}","import { Component, forwardRef, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    addDays,\n    addMonths,\n    isBefore,\n    isSameMonth,\n    startOfDay,\n    startOfMonth,\n    startOfWeek,\n} from 'date-fns';\n\n@Component({\n    selector: 'schedule-calendar',\n    template: `\n        <div class=\"p-2\">\n            <div class=\"flex items-center justify-between\">\n                <div class=\"px-2 font-medium\">\n                    {{ date_list[6]?.id || active_date | date: 'LLLL' }}\n                </div>\n                <div class=\"\">\n                    <button mat-icon-button (click)=\"changeMonth(-1)\">\n                        <app-icon>chevron_left</app-icon>\n                    </button>\n                    <button mat-icon-button (click)=\"changeMonth(1)\">\n                        <app-icon>chevron_right</app-icon>\n                    </button>\n                </div>\n            </div>\n            <div class=\"flex items-center text-sm\">\n                <div\n                    class=\"flex-1 opacity-60 text-center\"\n                    *ngFor=\"let day of date_list | slice: 0:7\"\n                >\n                    {{ day.id | date: 'EE' }}\n                </div>\n            </div>\n            <div class=\"flex items-center flex-wrap\">\n                <button\n                    mat-icon-button\n                    class=\"min-w-[14%] flex-1\"\n                    *ngFor=\"let day of date_list\"\n                    [class.text-opacity-30]=\"!day.is_month\"\n                    [class.text-primary]=\"day.id === active_date\"\n                    [class.text-black]=\"day.id !== active_date\"\n                    [class.dark:text-white]=\"day.id !== active_date\"\n                    [class.dark:text-opacity-30]=\"!day.is_month\"\n                    [class.bg-gray-200]=\"day.id === active_date\"\n                    [class.font-normal]=\"day.id !== active_date\"\n                    (click)=\"setValue(day.id)\"\n                >\n                    {{ day.id | date: 'd' }}\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ScheduleCalendarComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ScheduleCalendarComponent implements OnInit, ControlValueAccessor {\n    public active_date = startOfDay(Date.now()).valueOf();\n    public offset = 0;\n    public date_list = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit() {\n        this.generateDates();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        this.active_date = startOfDay(new_value).valueOf();\n        this.offset = 0;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.active_date = startOfDay(value).valueOf();\n        this.offset = 0;\n        this.generateDates();\n    }\n\n    public changeMonth(change: number) {\n        this.offset += change;\n        this.generateDates();\n    }\n\n    /* istanbul ignore next */\n    public readonly registerOnChange = (fn) => (this._onChange = fn);\n    /* istanbul ignore next */\n    public readonly registerOnTouched = (fn) => (this._onTouch = fn);\n\n    public generateDates() {\n        const date = addMonths(this.active_date, this.offset);\n        let start = startOfWeek(startOfMonth(date));\n        const now = startOfDay(Date.now());\n        const list = [];\n        while (list.length < 42) {\n            list.push({\n                id: start.valueOf(),\n                is_past: isBefore(start, now),\n                is_month: isSameMonth(start, date),\n            });\n            start = addDays(start, 1);\n        }\n        this.date_list = list;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { queryBookings } from '@placeos/bookings';\nimport { BaseClass } from '@placeos/common';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _poll = new BehaviorSubject(0);\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: ['event', 'desk', 'parking'],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    /** List of calendar events for the selected date */\n    public readonly events = combineLatest([this._date, this._poll]).pipe(\n        switchMap(([date]) =>\n            queryEvents({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            })\n        )\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks = combineLatest([this._date, this._poll]).pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'desk',\n            })\n        )\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking = combineLatest([this._date, this._poll]).pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n            })\n        )\n    );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.desks,\n        this.parking,\n    ]).pipe(\n        map(([e, d, p]) => [...e, ...d, ...p].sort((a, b) => a.date - b.date)),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false)))\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter(\n                (_) =>\n                    (_ instanceof CalendarEvent &&\n                        filters?.shown_types?.includes('event')) ||\n                    filters?.shown_types?.includes(_.type)\n            )\n        )\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    constructor() {\n        super();\n        this.subscription(\n            'date',\n            combineLatest([this._date, this._poll]).subscribe((_) => this._loading.next(true))\n        );\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({ ...filters, shown_types: shown_types.filter(_ => _ !== name) });\n        } else {\n            this._filters.next({ ...filters, shown_types: [...shown_types, name] });\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport { ScheduleStateService } from './schedule-state.service';\n\n@Component({\n    selector: 'schedule-filter-card',\n    template: `\n        <div class=\"flex items-center border-b border-gray-300 space-x-2 mb-4\">\n            <button mat-icon-button (click)=\"dismiss()\">\n                <app-icon>chevron_left</app-icon>\n            </button>\n            <h2 class=\"flex-1 w-1/2 text-center font-medium\">Booking Types</h2>\n            <app-icon></app-icon>\n        </div>\n        <div class=\"space-y-4 border-b border-gray-300 mb-4 pb-4\">\n            <button matRipple class=\"flex items-center space-x-2 w-full text-left\" (click)=\"toggleType('event')\">\n                <div\n                    class=\"h-10 w-10 rounded-full flex items-center justify-center text-2xl\"\n                >\n                    <app-icon>meeting_room</app-icon>\n                </div>\n                <div class=\"flex-1\">\n                    <div class=\"\">Room</div>\n                    <div class=\"text-sm opacity-60\">\n                        Room and meeting invites\n                    </div>\n                </div>\n                <mat-checkbox\n                    [ngModel]=\"\n                        (filters | async)?.shown_types?.includes('event')\n                    \"\n                ></mat-checkbox>\n            </button>\n            <button matRipple class=\"flex items-center space-x-2 w-full text-left\" (click)=\"toggleType('desk')\">\n                <div\n                    class=\"h-10 w-10 rounded-full flex items-center justify-center text-2xl\"\n                >\n                    <img src=\"assets/icons/desk-outline.svg\" class=\"w-6\" />\n                </div>\n                <div class=\"flex-1\">\n                    <div class=\"\">Desk</div>\n                    <div class=\"text-sm opacity-60\">Desk bookings</div>\n                </div>\n                <mat-checkbox\n                    [ngModel]=\"(filters | async)?.shown_types?.includes('desk')\"\n                ></mat-checkbox>\n            </button>\n            <button matRipple class=\"flex items-center space-x-2 w-full text-left\"  (click)=\"toggleType('parking')\">\n                <div\n                    class=\"h-10 w-10 rounded-full flex items-center justify-center text-2xl\"\n                >\n                    <app-icon>drive_eta</app-icon>\n                </div>\n                <div class=\"flex-1\">\n                    <div class=\"\">Parking</div>\n                    <div class=\"text-sm opacity-60\">Car space bookings</div>\n                </div>\n                <mat-checkbox\n                    [ngModel]=\"\n                        (filters | async)?.shown_types?.includes('parking')\n                    \"\n                ></mat-checkbox>\n            </button>\n        </div>\n        <button mat-button class=\"w-full\" (click)=\"dismiss()\">\n            Apply Filters\n        </button>\n    `,\n    styles: [`\n        mat-checkbox {\n            pointer-events: none;\n        }\n    `],\n})\nexport class ScheduleFilterCardComponent {\n    public readonly filters = this._state.filters;\n\n    public readonly toggleType = (t) => this._state.toggleType(t);\n    public readonly dismiss = () => this._sheet_ref.dismiss();\n\n    constructor(\n        private _state: ScheduleStateService,\n        private _sheet_ref: MatBottomSheetRef<ScheduleFilterCardComponent>\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { ScheduleFilterCardComponent } from './schedule-filter-card.component';\nimport { ScheduleStateService } from './schedule-state.service';\n\n@Component({\n    selector: 'schedule-filters',\n    template: `\n        <div\n            class=\"hidden sm:block bg-white dark:bg-neutral-800 border border-gray-300 rounded p-2\"\n        >\n            <h3 class=\"font-medium mb-2\">Category Filters</h3>\n            <div class=\"flex flex-wrap space-x-2\">\n                <div\n                    class=\"flex items-center rounded-3xl border border-gray-300\"\n                    *ngIf=\"(filters | async)?.shown_types?.includes('event')\"\n                >\n                    <div class=\" px-2\">Rooms</div>\n                    <button mat-icon-button (click)=\"toggleType('event', true)\">\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n                <div\n                    class=\"flex items-center rounded-3xl border border-gray-300\"\n                    *ngIf=\"(filters | async)?.shown_types?.includes('desk')\"\n                >\n                    <div class=\"px-2\">Desks</div>\n                    <button mat-icon-button (click)=\"toggleType('desk', true)\">\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n                <div\n                    class=\"flex items-center rounded-3xl border border-gray-300\"\n                    *ngIf=\"(filters | async)?.shown_types?.includes('parking')\"\n                >\n                    <div class=\" px-2\">Car Spaces</div>\n                    <button\n                        mat-icon-button\n                        (click)=\"toggleType('parking', true)\"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"sm:hidden flex items-center space-x-2\">\n            <button mat-button class=\"w-24\" (click)=\"openFilters()\">\n                Filters\n            </button>\n            <div\n                class=\"flex items-center rounded-3xl border border-gray-300 bg-white text-sm pl-2\"\n                *ngIf=\"(filters | async)?.shown_types?.includes('event')\"\n            >\n                <div>Rooms</div>\n                <button mat-icon-button (click)=\"toggleType('event', true)\">\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex items-center rounded-3xl border border-gray-300 bg-white text-sm pl-2\"\n                *ngIf=\"(filters | async)?.shown_types?.includes('desk')\"\n            >\n                <div>Desks</div>\n                <button mat-icon-button (click)=\"toggleType('desk', true)\">\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex items-center rounded-3xl border border-gray-300 bg-white text-sm pl-2\"\n                *ngIf=\"(filters | async)?.shown_types?.includes('parking')\"\n            >\n                <div>Car</div>\n                <button mat-icon-button (click)=\"toggleType('parking', true)\">\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ScheduleFiltersComponent {\n    public readonly filters = this._state.filters;\n\n    public readonly toggleType = (t, c = false) => this._state.toggleType(t, c);\n\n    constructor(\n        private _sheet: MatBottomSheet,\n        private _state: ScheduleStateService\n    ) {}\n\n    public openFilters() {\n        this._sheet.open(ScheduleFilterCardComponent);\n    }\n}\n","import { Component } from '@angular/core';\nimport { ScheduleStateService } from './schedule-state.service';\n\n@Component({\n    selector: 'schedule-sidebar',\n    template: `\n        <div\n            class=\"flex flex-col w-[18rem] h-full overflow-hidden bg-white dark:bg-neutral-700 border-r border-gray-300\"\n        >\n            <schedule-calendar\n                class=\"border-b border-gray-200\"\n                [ngModel]=\"date | async\"\n                (ngModelChange)=\"setDate($event)\"\n            ></schedule-calendar>\n            <h3 class=\"mx-4 mt-4 font-medium\">Filters</h3>\n            <div class=\"p-4 space-y-4\">\n                <button\n                    matRipple\n                    class=\"flex items-center space-x-2 w-full text-left\"\n                    (click)=\"toggleType('event')\"\n                >\n                    <div\n                        class=\"h-10 w-10 rounded-full flex items-center justify-center bg-gray-200 dark:bg-neutral-800 text-2xl\"\n                    >\n                        <app-icon>meeting_room</app-icon>\n                    </div>\n                    <div class=\"flex-1\">\n                        <div class=\"\">Room</div>\n                        <div class=\"text-sm opacity-60\">\n                            Room and meeting invites\n                        </div>\n                    </div>\n                    <mat-checkbox\n                        [ngModel]=\"\n                            (filters | async)?.shown_types?.includes('event')\n                        \"\n                    ></mat-checkbox>\n                </button>\n                <button\n                    matRipple\n                    class=\"flex items-center space-x-2 w-full text-left\"\n                    (click)=\"toggleType('desk')\"\n                >\n                    <div\n                        class=\"h-10 w-10 rounded-full flex items-center justify-center bg-gray-200 dark:bg-neutral-800 text-2xl\"\n                    >\n                        <img src=\"assets/icons/desk-outline.svg\" class=\"w-6\" />\n                    </div>\n                    <div class=\"flex-1\">\n                        <div class=\"\">Desk</div>\n                        <div class=\"text-sm opacity-60\">Desk bookings</div>\n                    </div>\n                    <mat-checkbox\n                        [ngModel]=\"\n                            (filters | async)?.shown_types?.includes('desk')\n                        \"\n                    ></mat-checkbox>\n                </button>\n                <button\n                    matRipple\n                    class=\"flex items-center space-x-2 w-full text-left\"\n                    (click)=\"toggleType('parking')\"\n                >\n                    <div\n                        class=\"h-10 w-10 rounded-full flex items-center justify-center bg-gray-200 dark:bg-neutral-800 text-2xl\"\n                    >\n                        <app-icon>drive_eta</app-icon>\n                    </div>\n                    <div class=\"flex-1\">\n                        <div class=\"\">Parking</div>\n                        <div class=\"text-sm opacity-60\">Car space bookings</div>\n                    </div>\n                    <mat-checkbox\n                        [ngModel]=\"\n                            (filters | async)?.shown_types?.includes('parking')\n                        \"\n                    ></mat-checkbox>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            mat-checkbox {\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ScheduleSidebarComponent {\n    public readonly filters = this._state.filters;\n    public readonly date = this._state.date;\n    public readonly toggleType = (t) => this._state.toggleType(t);\n    public readonly setDate = (d) => this._state.setDate(d);\n\n    constructor(private _state: ScheduleStateService) {}\n}\n","import { Component, forwardRef, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    addDays,\n    addMonths,\n    isBefore,\n    isSameMonth,\n    startOfDay,\n    startOfMonth,\n    startOfWeek,\n} from 'date-fns';\n\n@Component({\n    selector: 'schedule-mobile-calendar',\n    template: `\n        <div class=\"p-2\">\n            <button\n                class=\"flex items-center w-full p-2\"\n                matRipple\n                (click)=\"show_shortlist = !show_shortlist\"\n            >\n                <div class=\"px-2 font-medium\">\n                    {{ date_list[6]?.id || active_date | date: 'LLLL' }}\n                </div>\n                <app-icon>arrow_drop_down</app-icon>\n            </button>\n            <div class=\"flex items-center justify-center text-sm mb-2\">\n                <div\n                    class=\"opacity-60 text-center w-10 mx-2\"\n                    *ngFor=\"let day of date_list | slice: 0:7\"\n                >\n                    {{ day.id | date: 'EE' }}\n                </div>\n            </div>\n            <div class=\"flex items-center justify-between flex-wrap\">\n                <button\n                    mat-icon-button\n                    class=\"min-w-10 h-10 mx-2\"\n                    *ngFor=\"let day of list\"\n                    [class.text-opacity-30]=\"!day.is_month\"\n                    [class.text-primary]=\"day.id === active_date\"\n                    [class.text-black]=\"day.id !== active_date\"\n                    [class.bg-gray-200]=\"day.id === active_date\"\n                    [class.font-normal]=\"day.id !== active_date\"\n                    (click)=\"setValue(day.id)\"\n                >\n                    {{ day.id | date: 'd' }}\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ScheduleMobileCalendarComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ScheduleMobileCalendarComponent\n    implements OnInit, ControlValueAccessor {\n    public active_date = startOfDay(Date.now()).valueOf();\n    public offset = 0;\n    public date_list = [];\n    public short_list = [];\n    public show_shortlist = true;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit() {\n        this.generateDates();\n    }\n\n    public get list() {\n        return this.show_shortlist ? this.short_list : this.date_list;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        this.active_date = startOfDay(new_value).valueOf();\n        this.offset = 0;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.active_date = startOfDay(value).valueOf();\n        this.offset = 0;\n        this.generateDates();\n    }\n\n    public changeMonth(change: number) {\n        this.offset += change;\n        this.generateDates();\n    }\n\n    /* istanbul ignore next */\n    public readonly registerOnChange = (fn) => (this._onChange = fn);\n    /* istanbul ignore next */\n    public readonly registerOnTouched = (fn) => (this._onTouch = fn);\n\n    public generateDates() {\n        const date = addMonths(this.active_date, this.offset);\n        let start = startOfWeek(startOfMonth(date));\n        const now = startOfDay(Date.now());\n        let list = [];\n        while (list.length < 42) {\n            list.push({\n                id: start.valueOf(),\n                is_past: isBefore(start, now),\n                is_month: isSameMonth(start, date),\n            });\n            start = addDays(start, 1);\n        }\n        this.date_list = list;\n        start = startOfWeek(date);\n        list = [];\n        while (list.length < 7) {\n            list.push({\n                id: start.valueOf(),\n                is_past: isBefore(start, now),\n                is_month: isSameMonth(start, date),\n            });\n            start = addDays(start, 1);\n        }\n        this.short_list = list;\n    }\n}\n","import { Component } from '@angular/core';\nimport { CalendarEvent } from '@placeos/events';\nimport { isSameDay } from 'date-fns';\nimport { map } from 'rxjs/operators';\nimport { ScheduleStateService } from './schedule-state.service';\n\n@Component({\n    selector: 'app-schedule',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex flex-col sm:flex-row flex-1 h-1/2 bg-[#E5E5E5] dark:bg-zinc-600 relative\">\n            <schedule-sidebar class=\"hidden sm:block\"></schedule-sidebar>\n            <div class=\"w-full bg-white dark:bg-neutral-700 border-b border-gray-300 sm:hidden\">\n                <schedule-mobile-calendar\n                    [ngModel]=\"date | async\"\n                    (ngModelChange)=\"setDate($event)\"\n                ></schedule-mobile-calendar>\n            </div>\n            <div class=\"flex-1 h-full p-4 overflow-auto space-y-2\">\n                <schedule-filters></schedule-filters>\n                <h3 class=\"font-medium my-2\">\n                    {{ date | async | date: 'EEE dd LLL yyyy' }}\n                    <span *ngIf=\"is_today | async\">(Today)</span>\n                </h3>\n                <ng-container\n                    *ngIf=\"(bookings | async)?.length; else empty_state\"\n                >\n                    <ng-container *ngFor=\"let item of (loading | async) ? [] : bookings | async; trackBy: trackByFn\">\n                        <event-card\n                            *ngIf=\"isEvent(item); else booking_card\"\n                            [event]=\"item\"\n                        ></event-card>\n                        <ng-template #booking_card>\n                            <booking-card [booking]=\"item\"></booking-card>\n                        </ng-template>\n                    </ng-container>\n                </ng-container>\n            </div>\n            <mat-progress-bar\n                *ngIf=\"loading | async\"\n                class=\"absolute inset-x-0 bottom-0\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </div>\n        <footer-menu></footer-menu>\n        <ng-template #empty_state>\n            <div\n                class=\"w-full p-8 flex flex-col items-center justify-center space-y-4\"\n            >\n                <img src=\"assets/img/no-events.svg\" class=\"mr-4\" />\n                <p class=\"opacity-30\">\n                    No events and bookings for\n                    {{ date | async | date: 'EEEE, dd LLL yyyy' }}\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class ScheduleComponent {\n    public readonly bookings = this._state.filtered_bookings;\n    public readonly date = this._state.date;\n    public readonly loading = this._state.loading;\n    public readonly is_today = this.date.pipe(\n        map((_) => isSameDay(_, Date.now()))\n    );\n    public readonly setDate = (d) => this._state.setDate(d);\n\n    public isEvent(item: any) {\n        return item instanceof CalendarEvent;\n    }\n\n    constructor(private _state: ScheduleStateService) {}\n\n    public trackByFn(index: number, item: any) {\n        return item?.id;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { ScheduleCalendarComponent } from './schedule-calendar.component';\nimport { ScheduleFilterCardComponent } from './schedule-filter-card.component';\nimport { ScheduleFiltersComponent } from './schedule-filters.component';\nimport { ScheduleSidebarComponent } from './schedule-sidebar.component';\nimport { ScheduleComponent } from './schedule.component';\nimport { ScheduleMobileCalendarComponent } from './schedule-mobile-calendar.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: ScheduleComponent },\n    { path: '**', redirectTo: '' },\n];\n\nconst COMPONENTS = [\n    ScheduleComponent,\n    ScheduleSidebarComponent,\n    ScheduleCalendarComponent,\n    ScheduleFiltersComponent,\n    ScheduleFilterCardComponent,\n    ScheduleMobileCalendarComponent\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        SharedComponentModule,\n        FormsModule,\n        MatBottomSheetModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppScheduleModule {}\n"]}