{"version":3,"sources":["./src/app/schedule/view-event/booking-details/booking-details.component.html","./src/app/schedule/view-event/booking-details/booking-details.component.ts","./src/app/schedule/view-event/event-details/event-details.component.html","./src/app/schedule/view-event/event-details/event-details.component.ts","./src/app/schedule/view-event/view-event.component.html","./src/app/schedule/view-event/view-event.component.ts","./src/app/schedule/schedule-state.service.ts","/home/runner/work/user-interfaces/user-interfaces/node_modules/date-fns/esm/isToday/index.js","./src/app/schedule/event-list/event-list-item.component.ts","./src/app/schedule/event-list/event-list.component.ts","./src/app/schedule/event-list/event-view.component.ts","./src/app/schedule/schedule.component.ts","./src/app/schedule/schedule.routes.ts","./src/app/schedule/schedule.module.ts"],"names":["BookingDetailsComponent","_dialog","_router","_events","super","loading","this","item","date","end","add","duration","all_day","format","isSame","confirmDelete","space","name","map_id","asset_id","zones","open","width","maxWidth","maxHeight","data","title","content","okText","cancelText","afterClosed","subscribe","evt","deleteBooking","emit","delete","id","then","catch","navigate","EventDetailsComponent","_users","event","last_start","resources","creator","current","email","status","can_edit","now","isBefore","subtract","spaces","reduce","a","v","length","type","checked_in","localStorage","booking","setItem","JSON","stringify","ScheduleViewEventComponent","_bookings","_route","_location","menu","subscription","combineLatest","paramMap","queryParamMap","param","queryParam","has","get","calendar","loadEvent","editing","onChange","back","deleting","show","err","deleteEvent","ScheduleStateService","_calendars","_loading","BehaviorSubject","_poll","_active_item","_event_list","_options","Date","valueOf","asObservable","events","options","calendars","calendar_list","active_item","pipe","switchMap","getValue","catchError","_","filtered_events","map","filter","e","debounceTime","next","start","startOfDay","dirtyDate","requiredArgs","arguments","isSameDay","isToday","endOfDay","addDays","Promise","all","query","period_start","Math","floor","period_end","bookings","concat","event_list","console","log","list","find","i","sort","b","delay","interval","clearInterval","ScheduleEventListItemComponent","isAfter","addMinutes","location","has_visitors","ScheduleEventListComponent","ScheduleEventViewComponent","_state","_el","end_of_week","mapping","count","min_date","setDate","d","setOptions","setCalendar","startPolling","ngOnDestroy","stopPolling","day_lists","Array","prototype","slice","call","nativeElement","querySelectorAll","scroll_top","target","scrollTop","active_day","el","offsetTop","getAttribute","timeout","querySelector","scrollIntoView","behavior","inline","scrollTo","onScroll","ScheduleComponent","show_menu","ROUTES","path","component","redirectTo","ScheduleModule","forChild"],"mappings":"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","file":"schedule-schedule-module.b87c8b495dafd33cae3d.js","sourcesContent":["<div class=\"booking-details\" *ngIf=\"item\">\n    <div class=\"header\">\n        <div class=\"title\">{{ item.title || 'No Title' }}</div>\n        <div class=\"icons\">\n            <button mat-fab color=\"primary\" (click)=\"cancel()\">\n                <app-icon\n                    name=\"cancel\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete_forever' }\"\n                >\n                </app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"booking\">\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'perm_identity' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ item.user_name }}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'schedule' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ when }}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'place' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ item.description }}</div>\n                <button *ngIf=\"item.asset_id\" (click)=\"showSpace()\" mat-button>View</button>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { Booking } from '@user-interfaces/bookings';\nimport { EventsService } from '@user-interfaces/events';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\nimport { Space } from '@user-interfaces/spaces';\n\nimport { ViewRoomModalComponent } from '../../../overlays/view-room-modal/view-room-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'schedule-booking-details',\n    templateUrl: './booking-details.component.html',\n    styleUrls: ['./booking-details.component.scss'],\n})\nexport class BookingDetailsComponent extends BaseClass {\n    /** Booking desk to display */\n    @Input() public item: Booking;\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter();\n\n    constructor(\n        private _dialog: MatDialog,\n        private _router: Router,\n        private _events: EventsService\n    ) {\n        super();\n    }\n\n    /** Display string of when the event will occur */\n    public get when(): string {\n        if (!this.item) {\n            return 'Unable to determine.';\n        }\n        const date = dayjs(this.item.date);\n        const end = date.add(this.item.duration || 60, 'm');\n        if (this.item.all_day || this.item.duration > 23 * 60) {\n            return `${date.format('DD MMM YYYY')} - All Day`;\n        } else {\n            if (date.isSame(end, 'd')) {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format('h:mm A')}`;\n            } else {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format(\n                    'DD MMM YYYY, h:mm A'\n                )}`;\n            }\n        }\n    }\n\n    public cancel() {\n        this.confirmDelete();\n    }\n\n    public showSpace(): void {\n        const space = new Space({\n            name: 'Desk Booking',\n            map_id: this.item.asset_id,\n            zones: this.item.zones,\n        });\n        if (!space.level) {\n            // this._service.notifyInfo('The space cannot be located.');\n        }\n        const dialog_ref = this._dialog.open(ViewRoomModalComponent, {\n            width: '32em',\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: { space },\n        });\n    }\n\n    private confirmDelete() {\n        const dialog_ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Cancel Meeting',\n                content: `Are you sure you want to cancel this desk booking ?`,\n                okText: `I'm sure`,\n                cancelText: 'No',\n            },\n        });\n        dialog_ref.afterClosed().subscribe((evt) => {\n            if (evt) {\n                this.deleteBooking();\n            }\n        });\n    }\n\n    public async deleteBooking() {\n        this.loading.emit('Cancelling booking...');\n        await this._events.delete(this.item.id)\n            .then(() => {\n                // this._service.notifySuccess('Booking was successfuly deleted.');\n            })\n            .catch(() => {\n                // this._service.notifyError('Booking could not be deleted.');\n            });\n        this._router.navigate(['schedule']);\n        this.loading.emit('');\n    }\n}\n","<div class=\"event-details\" *ngIf=\"item\">\n    <div class=\"header\">\n        <div class=\"title\">{{ item.title || 'No Title' }}</div>\n        <div *ngIf=\"can_edit\" class=\"icons\">\n            <button mat-fab color=\"primary\" (click)=\"edit()\">\n                <app-icon\n                    name=\"edit\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'edit' }\"\n                ></app-icon>\n            </button>\n            <button mat-fab *ngIf=\"can_cancel\" color=\"primary\" (click)=\"cancelBooking()\">\n                <app-icon\n                    name=\"cancel\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete_forever' }\"\n                ></app-icon>\n            </button>\n            <button mat-fab color=\"primary\" (click)=\"duplicate()\">\n                <app-icon\n                    name=\"duplicate\"\n                    [icon]=\"{\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'control_point_duplicate'\n                    }\"\n                ></app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"event\">\n        <schedule-event-view [event]=\"item\"></schedule-event-view>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Booking } from '@user-interfaces/bookings';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { CalendarEvent } from '@user-interfaces/events';\nimport { Space } from '@user-interfaces/spaces';\nimport { StaffService } from '@user-interfaces/users';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'schedule-event-details',\n    templateUrl: './event-details.component.html',\n    styleUrls: ['./event-details.component.scss'],\n})\nexport class EventDetailsComponent extends BaseClass {\n    /** Booking to display */\n    @Input() public item: CalendarEvent;\n    /** Emitter for action on the display view */\n    @Output() public event = new EventEmitter();\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter();\n    /** Toggle for activating checkin */\n    public checked_in: boolean;\n    /** Mapping of spaces to last checkin time */\n    public last_start: { [id: string]: number } = {};\n    /** Whether to show full locations list */\n    public show_locations: boolean;\n    /** Whether to show full attendee list */\n    public show_attendees: boolean;\n\n    /** List of spaces associated with the event */\n    public get spaces(): Space[] {\n        return this.item.resources;\n    }\n\n    /** Host of the event */\n    public get organiser(): string {\n        return this.item.creator || this._users.current.name;\n    }\n\n    /** Whether the user is allowed to edit the event */\n    public get can_edit(): boolean {\n        const organiser = this.organiser;\n        const user = this._users.current;\n        return this.item.creator === user.email && this.status !== 'done';\n    }\n\n    /** can the user cancel the meeting */\n    public get can_cancel(): boolean {\n        return this.can_edit && this.status === 'future';\n    }\n\n    /** Status of the event */\n    public get status(): 'future' | 'upcoming' | 'done' | 'started' | 'in_progress' {\n        if (this.item) {\n            const now = dayjs();\n            const date = dayjs(this.item.date);\n            if (now.isBefore(date.subtract(15, 'm'), 'm')) {\n                return 'future';\n            } else if (now.isBefore(date, 'm')) {\n                return 'upcoming';\n            } else if (now.isBefore(date.add(15, 'm'), 'm')) {\n                return 'started';\n            } else if (now.isBefore(date.add(this.item.duration, 'm'), 'm')) {\n                return 'in_progress';\n            }\n        }\n        return 'done';\n    }\n\n    /** Whether the user has checkin to all the spaces in the event */\n    public get is_checked_in(): boolean {\n        return this.spaces.reduce(\n            (a, v) => a && this.item.date <= (this.last_start[v.id] || 0),\n            true\n        );\n    }\n\n    /** Whether the spaces can be controlled */\n    public get can_control(): boolean {\n        return this.spaces.length > 0 && this.status !== 'future' && this.status !== 'done';\n    }\n\n    /** Whether the user is able to checkin to the event */\n    public get can_checkin(): boolean {\n        return this.spaces.length > 0 && (this.status === 'upcoming' || this.status === 'started');\n    }\n\n    constructor(\n        private _users: StaffService,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    /**\n     * Enter edit mode for the booking\n     */\n    public edit(): void {\n        this.event.emit({ type: 'edit' });\n    }\n\n    /**\n     * Checkin the current booking\n     */\n    public checkin(): void {\n        this.checked_in = !this.checked_in;\n    }\n\n    /**\n     * Store the booking data and navigate to the booking form\n     */\n    public duplicate(): void {\n        if (localStorage) {\n            const booking = new Booking({ ...this.item as any, id: '' });\n            localStorage.setItem('STAFF.booking_form', JSON.stringify(booking));\n        }\n        this._router.navigate(['/book']);\n    }\n\n    /**\n     * Cancel the booking\n     */\n    public cancelBooking(): void {\n        this.event.emit({ type: 'cancel_booking' });\n    }\n}\n","<div class=\"event page\">\n    <header class=\"header\">\n        <a-topbar-header (menuChange)=\"menu.emit($event)\"></a-topbar-header>\n    </header>\n    <div class=\"actions\" [class.blank]=\"false\" [class.has-back]=\"true\">\n        <div class=\"back\">\n            <button mat-button (click)=\"back()\">\n                <div class=\"row\">\n                    <app-icon\n                        [icon]=\"{\n                            tye: 'icon',\n                            class: 'material-icons',\n                            content: 'keyboard_backspace'\n                        }\"\n                    ></app-icon>\n                    Back\n                </div>\n            </button>\n        </div>\n        <div class=\"search\"></div>\n    </div>\n    <main class=\"body\">\n        <ng-container *ngIf=\"loading\">\n            <div class=\"no-item center\">\n                <div class=\"icon\">\n                    <mat-spinner diameter=\"100\"></mat-spinner>\n                </div>\n                <div class=\"text\">\n                    {{ loading }}\n                </div>\n            </div>\n        </ng-container>\n        <div [hidden]=\"loading\" *ngIf=\"event\">\n            <ng-container [ngSwitch]=\"type\">\n                <schedule-booking-details\n                    *ngSwitchCase=\"'booking'\"\n                    [item]=\"event\"\n                    (loading)=\"loading = $event\"\n                >\n                </schedule-booking-details>\n                <schedule-event-details\n                    *ngSwitchDefault\n                    [item]=\"event\"\n                    (event)=\"onChange($event)\"\n                    (loading)=\"loading = $event\"\n                ></schedule-event-details>\n            </ng-container>\n        </div>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { combineLatest } from 'rxjs';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { CalendarEvent, EventsService } from '@user-interfaces/events';\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\n\n\n@Component({\n    selector: 'schedule-view-event',\n    templateUrl: './view-event.component.html',\n    styleUrls: ['./view-event.component.scss'],\n})\nexport class ScheduleViewEventComponent extends BaseClass implements OnInit {\n    /** ID of the current booking to display */\n    public id: string;\n    /** Calendar the event belongs to */\n    public calendar: string;\n    /** Type of event to retrieve */\n    public type: string;\n    /** Booking to display */\n    public event: CalendarEvent | Booking;\n    /** Whether booking data is being loaded */\n    public loading: string;\n    /** Whether booking is being edited */\n    public editing: boolean;\n    /** Whether booking is being deleted */\n    public deleting: boolean;\n    /** Menu event */\n    @Output() public menu = new EventEmitter(false);\n\n    constructor(\n        private _bookings: BookingsService,\n        private _events: EventsService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _location: Location\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.params',\n            combineLatest([this._route.paramMap, this._route.queryParamMap]).subscribe(\n                ([param, queryParam]) => {\n                    if (param.has('id')) {\n                        this.id = param.get('id');\n                    }\n                    if (queryParam.has('calendar')) {\n                        this.calendar = queryParam.get('calendar');\n                    }\n                    if (queryParam.has('type')) {\n                        this.type = queryParam.get('type');\n                    }\n                    if (this.id) {\n                        this.loadEvent();\n                    }\n                }\n            )\n        );\n    }\n\n    public back() {\n        if (this.editing) {\n            this.onChange({ type: 'cancel_edit' });\n        } else {\n            this._location.back();\n        }\n    }\n\n    /**\n     * Load the details of the active event\n     */\n    public async loadEvent() {\n        if (this.deleting) {\n            return;\n        }\n        this.loading = 'Loading booking data...';\n        let booking;\n        try {\n            switch (this.type) {\n                case 'booking':\n                    booking = await this._bookings.show(this.id);\n                    break;\n                default:\n                    booking = await this._events.show(this.id, { calendar: this.calendar });\n            }\n            this.loading = '';\n            this.event = booking;\n        } catch (err) {\n            this.loading = '';\n            // this._service.notifyError(`Failed to load booking data\\nID: ${this.id}`);\n            this._router.navigate(['/schedule']);\n        }\n    }\n\n    /**\n     * Delete event\n     */\n    private async deleteEvent() {\n        if (this.event && !this.loading) {\n            this.loading = 'Cancelling meeting...';\n            const { id, title } = this.event;\n            this.deleting = true;\n            await this._events\n                .delete(id, { calendar: (this.event as CalendarEvent).calendar })\n                .catch(() => {\n                    // this._service.notifyError(`Failed to cancel booking \\n ${title}`);\n                });\n            // this._service.notifySuccess(`Booking ${title} was successfully cancelled`);\n            this._router.navigate(['/schedule']);\n            this.event = null;\n            this.loading = '';\n            this.deleting = false;\n        }\n    }\n\n    private confirmDelete() {\n        const dialog_ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Cancel Meeting',\n                content: `Are you sure you want to cancel this meeting: ${this.event.title}`,\n                okText: `I'm sure`,\n                cancelText: 'No',\n            },\n        });\n        dialog_ref.afterClosed().subscribe((evt) => {\n            if (evt) {\n                this.deleteEvent();\n            }\n        });\n    }\n\n    /**\n     * Handle changes to sub-components\n     */\n    public onChange(event: { type: string }): void {\n        if (event.type === 'edit') {\n            if (localStorage) {\n                const booking = new CalendarEvent({ ...this.event as any });\n                localStorage.setItem('STAFF.booking_form', JSON.stringify(booking));\n            }\n            this._router.navigate(['/book', 'spaces']);\n        } else if (event.type === 'view' || event.type === 'cancel_edit') {\n            this.editing = false;\n        } else if (event.type === 'cancel_booking') {\n            this.editing = false;\n            this.confirmDelete();\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { CalendarService } from '@user-interfaces/calendar';\nimport { BaseClass, timePeriodsIntersect } from '@user-interfaces/common';\nimport { CalendarEvent, EventsService } from '@user-interfaces/events';\nimport { addDays, endOfDay, isToday, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { catchError, debounceTime, map, switchMap } from 'rxjs/operators';\n\nexport interface ScheduleOptions {\n    date: number;\n    calendar?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _poll = new BehaviorSubject<boolean>(false);\n\n    private _active_item = new BehaviorSubject<string>('');\n\n    private _event_list = new BehaviorSubject<(CalendarEvent | Booking)[]>([]);\n\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        date: new Date().valueOf(),\n    });\n\n    public readonly loading = this._loading.asObservable();\n    public readonly events = this._event_list.asObservable();\n    public readonly options = this._options.asObservable();\n    public readonly calendars = this._calendars.calendar_list;\n\n    public readonly active_item = this._active_item.pipe(\n        switchMap((id) =>\n            this._bookings.show(id, {\n                calendar: this._options.getValue().calendar,\n            })\n        ),\n        catchError((_) => this._events.show(this._active_item.getValue())),\n        catchError((_) => null)\n    );\n\n    public readonly filtered_events = combineLatest([\n        this._options,\n        this._event_list,\n    ]).pipe(\n        map(([options, events]) => {\n            return events.filter(\n                (e) =>\n                    (options.calendar && e instanceof CalendarEvent) ||\n                    ((!options.calendar || options.calendar === 'desks') && e instanceof Booking)\n            );\n        })\n    );\n\n    public get date() {\n        return this._options.getValue().date;\n    }\n\n    constructor(\n        private _events: EventsService,\n        private _bookings: BookingsService,\n        private _calendars: CalendarService\n    ) {\n        super();\n        this.subscription(\n            'event_list',\n            combineLatest([this._options, this._poll])\n                .pipe(\n                    debounceTime(1000),\n                    switchMap(([options]) => {\n                        this._loading.next(true);\n                        const start = startOfDay(options.date).valueOf();\n                        let duration = isToday(start) ? 6 : 4;\n                        const end = endOfDay(addDays(start, duration)).valueOf();\n                        return Promise.all([\n                            this._events.query({\n                                period_start: Math.floor(start / 1000),\n                                period_end: Math.floor(end / 1000),\n                                calendars: options.calendar,\n                            }),\n                            this._bookings.query({\n                                period_start: Math.floor(start / 1000),\n                                period_end: Math.floor(end / 1000),\n                                type: 'desk',\n                            }),\n                        ]);\n                    }),\n                    map(([events, bookings]) =>\n                        (events as any[]).concat(bookings)\n                    ),\n                    catchError(_ => [])\n                )\n                .subscribe((event_list) => {\n                    console.log('Event List:', event_list);\n                    const start = startOfDay(\n                        this._options.getValue().date\n                    ).valueOf();\n                    const end = endOfDay(addDays(start, 6)).valueOf();\n                    let list = this._event_list.getValue().filter((item) => {\n                        return (\n                            !timePeriodsIntersect(\n                                start,\n                                end,\n                                item.date,\n                                item.date + item.duration * 60 * 1000\n                            ) && !event_list.find((i) => i.id === item.id)\n                        );\n                    });\n                    list = list.concat(event_list)\n                    list.sort((a, b) => a.date - b.date);\n                    this._event_list.next(list);\n                    this._loading.next(false);\n                })\n        );\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this._poll.next(!this._poll.getValue());\n        this.interval(\n            'poll',\n            () => this._poll.next(!this._poll.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n}\n","import isSameDay from '../isSameDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name isToday\n * @category Day Helpers\n * @summary Is the given date today?\n * @pure false\n *\n * @description\n * Is the given date today?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is today\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\n * var result = isToday(new Date(2014, 9, 6, 14, 0))\n * //=> true\n */\n\nexport default function isToday(dirtyDate) {\n  requiredArgs(1, arguments);\n  return isSameDay(dirtyDate, Date.now());\n}","import { Component, HostListener, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { addMinutes, format, isAfter, isBefore } from 'date-fns';\n\nimport { Booking } from '@user-interfaces/bookings';\nimport { CalendarEvent } from '@user-interfaces/events';\n\n@Component({\n    selector: 'schedule-event-item',\n    template: `\n        <a\n            matRipple\n            [routerLink]=\"['/schedule', 'view', this.event.id]\"\n            [queryParams]=\"query\"\n            class=\"flex mb-1\"\n        >\n            <div\n                [class]=\"\n                    'h-20 w-20 flex flex-col items-center justify-center ' +\n                    status\n                \"\n                [class.done]=\"is_done\"\n            >\n                <div class=\"icon\" [ngSwitch]=\"event.status\">\n                    <app-icon *ngSwitchCase=\"'cancelled'\">cancel</app-icon>\n                    <app-icon *ngSwitchDefault>forum</app-icon>\n                </div>\n                <div>{{ time }}</div>\n                <label *ngIf=\"event.status === 'cancelled'\">(Cancelled)</label>\n            </div>\n            <div\n                class=\"flex flex-col h-20 flex-1 w-1/2 bg-white p-2 justify-center\"\n            >\n                <div class=\"text-lg font-medium capitalize pl-1 truncate\">\n                    {{ event.title }}\n                </div>\n                <div class=\"flex items-center\">\n                    <app-icon\n                        *ngIf=\"!!location\"\n                        [icon]=\"{\n                            type: 'icon',\n                            class: 'material-icons',\n                            content: 'place'\n                        }\"\n                    ></app-icon>\n                    <div class=\"truncate pl-1\">{{ location || 'No location' }}</div>\n                </div>\n            </div>\n        </a>\n    `,\n    styles: [\n        `\n            .confirmed,\n            .approved {\n                background: #388e3c;\n                color: #fff;\n            }\n\n            .tentative {\n                background: #ffa000;\n                color: #000;\n            }\n\n            .declined,\n            .cancelled {\n                background: #d32f2f;\n                color: #fff;\n            }\n\n            .done {\n                opacity: 0.35;\n            }\n        `,\n    ],\n})\nexport class ScheduleEventListItemComponent {\n    /** Booking to display */\n    @Input() public event: CalendarEvent | Booking;\n\n    public get isFuture(): boolean {\n        return isAfter(this.event.date, new Date());\n    }\n\n    public get status(): string {\n        return this.event.status;\n    }\n\n    public get is_done(): boolean {\n        return isBefore(\n            addMinutes(this.event.date, this.event.duration),\n            new Date()\n        );\n    }\n\n    /** Display location of the booking event */\n    public get location(): string {\n        if (\n            !this.event ||\n            this.event.type === 'date' ||\n            this.event.type === 'empty'\n        ) {\n            return 'No location';\n        }\n        return this.event.location;\n    }\n\n    /** Image name to display for the event */\n    public get type_image(): string {\n        if (\n            !this.event ||\n            this.event.type === 'date' ||\n            this.event.type === 'empty'\n        ) {\n            return 'block';\n        }\n        if (this.event instanceof CalendarEvent && this.event.has_visitors) {\n            return 'external';\n        }\n        return 'book_room';\n    }\n\n    public get time(): string {\n        return this.event.all_day || this.event.duration > 23 * 60\n            ? 'All Day'\n            : format(this.event.date, 'h:mm a');\n    }\n\n    public get query() {\n        return {\n            calendar: (this.event as CalendarEvent).calendar,\n            type: this.event.type,\n        };\n    }\n\n    constructor(private _router: Router) {}\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Booking } from '@user-interfaces/bookings';\nimport { CalendarEvent } from '@user-interfaces/events';\n\n@Component({\n    selector: 'schedule-event-date-list',\n    template: `\n        <div class=\"text-xl mb-4\">\n            {{ date | date: 'fullDate' }}\n        </div>\n        <ng-container *ngIf=\"events?.length; else empty_state\">\n            <schedule-event-item\n                id=\"{{ i }}\"\n                *ngFor=\"let item of events; let i = index\"\n                [event]=\"item\"\n            ></schedule-event-item>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"p-8\">No events for {{ date | date }}</div>\n        </ng-template>\n        <div class=\"mb-4\"></div>\n    `,\n    styles: [`\n    `],\n})\nexport class ScheduleEventListComponent {\n    @Input() public date: number;\n    @Input() public events: (CalendarEvent | Booking)[];\n}\n","import { Component, ElementRef, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, timePeriodsIntersect } from '@user-interfaces/common';\nimport { ScheduleStateService } from '../schedule-state.service';\nimport {\n    addDays,\n    endOfDay,\n    format,\n    isBefore,\n    isSameDay,\n    startOfDay,\n} from 'date-fns';\nimport { combineLatest } from 'rxjs';\n\n@Component({\n    selector: 'schedule-event-list',\n    template: `\n        <div\n            class=\"flex p-2 items-center bg-white border-b border-gray-200 shadow space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\" class=\"h-12\">\n                <mat-select\n                    name=\"calendars\"\n                    [ngModel]=\"(options | async).calendar\"\n                    (ngModelChange)=\"setCalendar($event)\"\n                >\n                    <mat-option\n                        *ngFor=\"let cal of calendars | async\"\n                        [value]=\"cal.id\"\n                    >\n                        {{ cal.summary }}\n                    </mat-option>\n                    <mat-option value=\"desks\">Desks</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-0\"></div>\n            <button mat-button class=\"clear\" [matMenuTriggerFor]=\"legend\">\n                Legend\n            </button>\n            <mat-menu #legend=\"matMenu\">\n                <div class=\"flex items-center px-4 py-2 hover:bg-gray-100\">\n                    <div class=\"bg-success h-2 w-2 rounded-full mr-4\"></div>\n                    Approved\n                </div>\n                <div class=\"flex items-center px-4 py-2 hover:bg-gray-100\">\n                    <div class=\"bg-pending h-2 w-2 rounded-full mr-4\"></div>\n                    Tentative\n                </div>\n                <div class=\"flex items-center px-4 py-2 hover:bg-gray-100\">\n                    <div class=\"bg-error h-2 w-2 rounded-full mr-4\"></div>\n                    Declined\n                </div>\n            </mat-menu>\n            <button mat-icon-button class=\"relative\" #dateMenu>\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'event' }\"\n                ></app-icon>\n                <input\n                    matInput\n                    class=\"opacity-0 absolute inset-0\"\n                    [ngModel]=\"(options | async)?.date\"\n                    (ngModelChange)=\"setDate($event); scrollTo($event)\"\n                    [matDatepicker]=\"picker\"\n                    [min]=\"min_date\"\n                />\n\n                <mat-datepicker-toggle\n                    class=\"opacity-0 absolute inset-0\"\n                    matSuffix\n                    [for]=\"picker\"\n                ></mat-datepicker-toggle>\n            </button>\n            <mat-datepicker #picker ></mat-datepicker>\n        </div>\n        <main class=\"w-full flex-1 h-1/2 flex flex-col\">\n            <div\n                class=\"flex-1 w-full h-1/2 overflow-auto p-4\"\n                (scroll)=\"onScroll($event)\"\n            >\n                <schedule-event-date-list\n                    *ngFor=\"let details of events | async | keyvalue\"\n                    [attr.date]=\"details.key | date: 'yyyy-MM-dd'\"\n                    [date]=\"details.key\"\n                    [events]=\"details.value\"\n                ></schedule-event-date-list>\n            </div>\n            <mat-progress-bar\n                mode=\"indeterminate\"\n                *ngIf=\"loading | async\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n                flex: 1;\n            }\n        `,\n    ],\n})\nexport class ScheduleEventViewComponent extends BaseClass implements OnInit {\n    public readonly loading = this._state.loading;\n    public readonly options = this._state.options;\n    public readonly calendars = this._state.calendars;\n\n    public readonly events = combineLatest([\n        this._state.filtered_events,\n        this._state.options,\n    ]).pipe(\n        map(([events, options]) => {\n            let start = startOfDay(new Date());\n            const end_of_week = addDays(options.date || start, 12);\n            const mapping = {};\n            let count = 0;\n            while (count < events.length || isBefore(start, end_of_week)) {\n                const end = endOfDay(start);\n                const list = events.filter((e) =>\n                    timePeriodsIntersect(\n                        start.valueOf(),\n                        end.valueOf(),\n                        e.date,\n                        e.date + e.duration * 60 * 1000\n                    )\n                );\n                count += list.length;\n                mapping[start.valueOf()] = list;\n                start = addDays(start, 1);\n            }\n            return mapping;\n        })\n    );\n\n    public readonly min_date = startOfDay(new Date());\n    public readonly setDate = (d) => this._state.setOptions({ date: d });\n    public readonly setCalendar = (d) =>\n        this._state.setOptions({ calendar: d });\n\n    constructor(\n        private _state: ScheduleStateService,\n        private _el: ElementRef<HTMLElement>\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this._state.stopPolling();\n    }\n\n    public onScroll(event): void {\n        const day_lists = Array.prototype.slice.call(\n            this._el?.nativeElement.querySelectorAll(\n                'schedule-event-date-list'\n            ) || []\n        );\n        if (!day_lists?.length) return;\n        const scroll_top = event.target.scrollTop;\n        let active_day: HTMLElement = null;\n        for (const el of day_lists) {\n            if (el.offsetTop - scroll_top > 0) {\n                active_day = el;\n                break;\n            }\n        }\n        if (!active_day) return;\n        const date = new Date(active_day.getAttribute('date'));\n        if (!isSameDay(date, this._state.date)) {\n            console.log('Date:', format(date, 'dd MMM yyyy'));\n            this.setDate(date.valueOf());\n        }\n    }\n\n    public scrollTo(date: number) {\n        this.timeout(\n            'scroll_to',\n            () => {\n                const el: HTMLElement = this._el?.nativeElement.querySelector(\n                    `[date=\"${format(date, 'yyyy-MM-dd')}\"]`\n                );\n                if (!el) return;\n                el.scrollIntoView({ behavior: 'smooth', inline: 'center' });\n            },\n            1000\n        );\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-schedule',\n    template: `\n        <a-topbar-header [(menu)]=\"show_menu\"></a-topbar-header>\n        <ng-container [ngSwitch]=\"page\">\n            <ng-container *ngSwitchCase=\"'view'\">\n                <schedule-view-event class=\"flex-1 h-1/2\"></schedule-view-event>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <schedule-event-list class=\"flex-1 h-1/2\"></schedule-event-list>\n            </ng-container>\n        </ng-container>\n        <a-footer-menu class=\"w-full\"></a-footer-menu>\n        <a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class ScheduleComponent {\n    /** Name of the page to render */\n    public page: string;\n    /** Whether to show menu */\n    public show_menu = false;\n}\n","import { Routes } from '@angular/router';\n\nimport { ScheduleComponent } from './schedule.component';\n\nexport const ROUTES: Routes = [\n    { path: '', component: ScheduleComponent },\n    { path: ':page', component: ScheduleComponent },\n    { path: ':page/:id', component: ScheduleComponent },\n    { path: '**', redirectTo: '' }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './schedule.routes';\nimport { SharedContentModule } from '../ui/shared.module';\n\nimport { ScheduleComponent } from './schedule.component';\nimport { ScheduleEventViewComponent } from './event-list/event-view.component';\nimport { ScheduleViewEventComponent } from './view-event/view-event.component';\nimport { ScheduleEventListItemComponent } from './event-list/event-list-item.component';\nimport { EventDetailsComponent } from './view-event/event-details/event-details.component';\nimport { EventEditComponent } from './view-event/event-edit/event-edit.component';\nimport { BookingDetailsComponent } from './view-event/booking-details/booking-details.component';\nimport { ScheduleEventListComponent } from './event-list/event-list.component'\n\n@NgModule({\n    declarations: [\n        ScheduleComponent,\n        ScheduleViewEventComponent,\n        ScheduleEventViewComponent,\n        ScheduleEventListComponent,\n        ScheduleEventListItemComponent,\n        EventDetailsComponent,\n        EventEditComponent,\n        BookingDetailsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        ScrollingModule,\n    ],\n})\nexport class ScheduleModule {}\n"],"sourceRoot":"webpack:///"}