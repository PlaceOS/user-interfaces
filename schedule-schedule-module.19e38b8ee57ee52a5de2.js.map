{"version":3,"sources":["./src/app/bookings/space-flow/space-flow.service.ts","./src/app/schedule/view-event/booking-details/booking-details.component.html","./src/app/schedule/view-event/booking-details/booking-details.component.ts","./src/app/schedule/view-event/event-details/event-details.component.html","./src/app/schedule/view-event/event-details/event-details.component.ts","./src/app/schedule/view-event/view-event.component.html","./src/app/schedule/view-event/view-event.component.ts","./src/app/schedule/event-list/list-item/list-item.component.html","./src/app/schedule/event-list/list-item/list-item.component.ts","./src/app/schedule/event-list/event-list.component.html","./src/app/schedule/event-list/event-list.component.ts","./src/app/schedule/schedule.template.html","./src/app/schedule/schedule.component.ts","./src/app/schedule/schedule.routes.ts","./src/app/schedule/schedule.module.ts"],"names":["clearEventFormState","sessionStorage","removeItem","localStorage","SpaceFlowService","_events","_calendar","_org","_staff","_dialog","super","_event","_form","_filters","_loading_spaces","_loading_event","event","this","asObservable","form","filters","loading_spaces","loading_event","spaces","pipe","next","getValue","value","period_start","Math","floor","Date","date","valueOf","period_end","duration","zones","length","building","id","availability","zone_ids","join","then","list","filter","space","capacity","clearState","setEvent","nearestTo","controls","subscription","storeState","name","setValue","ref","open","width","height","data","componentInstance","_","reason","subscribe","attendees","push","metadata","close","setItem","JSON","stringify","toJSON","event_data","getItem","parse","console","log","form_data","patchValue","filter_data","markAllAsTouched","organiser","host","current","email","title","valid","key","invalid","Promise","reject","values","save","BookingDetailsComponent","_router","loading","item","end","add","all_day","format","isSame","confirmDelete","map_id","asset_id","maxWidth","maxHeight","content","okText","cancelText","afterClosed","evt","deleteBooking","emit","delete","catch","navigate","EventDetailsComponent","_users","last_start","resources","creator","status","can_edit","now","isBefore","subtract","reduce","a","v","type","checked_in","booking","ScheduleViewEventComponent","_bookings","_route","_location","menu","combineLatest","paramMap","queryParamMap","param","queryParam","has","get","calendar","loadEvent","editing","onChange","back","deleting","show","err","deleteEvent","ScheduleEventListItemComponent","isAfter","is_done","location","has_visitors","query","navigateByUrl","ScheduleEventListComponent","_settings","_spaces","_calendars","event_list","events","shown_offset","date_offset","from","legend_list","params","initialised","first","calendar_list","calendars","find","i","primary","updateList","interval","start","startOf","endOf","unix","user","old_events","processEvents","map","timeout","scrollTo","date_str","filter_fn","new_items","old_items","concat","sort","b","event_promise","day","diff","max","scroll_to","index","findIndex","document","getElementById","scrollIntoView","behavior","queryParams","queryParamsHandling","trigger","closeMenu","onCalendarChange","updateDate","onScroll","ScheduleComponent","show_menu","post","page","loadEvents","saveEvents","ROUTES","path","component","redirectTo","ScheduleModule","forChild"],"mappings":"4FAEA,gPAoBO,SAASA,IACZC,eAAeC,WAAW,iBAC1BD,eAAeC,WAAW,sBAC1BC,aAAaD,WAAW,yBAIrB,Y,MAAME,UAAyB,IA6DlC,YACYC,EACAC,EACAC,EACAC,EACAC,GAERC,QANQ,KAAAL,UACA,KAAAC,YACA,KAAAC,OACA,KAAAC,SACA,KAAAC,UAhEJ,KAAAE,OAAS,IAAI,IAA+B,MAE5C,KAAAC,MAAQ,IAAI,IAA2B,MAEvC,KAAAC,SAAW,IAAI,IAAkC,IAEjD,KAAAC,gBAAkB,IAAI,KAAyB,GAE/C,KAAAC,eAAiB,IAAI,KAAyB,GAEtC,KAAAC,MAAQC,KAAKN,OAAOO,eACpB,KAAAC,KAAOF,KAAKL,MAAMM,eAIlB,KAAAE,QAAUH,KAAKJ,SAASK,eACxB,KAAAG,eAAiBJ,KAAKH,gBAAgBI,eACtC,KAAAI,cAAgBL,KAAKF,eAAeG,eAIpC,KAAAK,OAASN,KAAKJ,SAASW,KACnC,YAAWJ,I,QACPH,KAAKH,gBAAgBW,MAAK,GAC1B,MAAMN,EAAOF,KAAKL,MAAMc,WAAWC,MAC7BC,EAAeC,KAAKC,MACtB,IAAIC,KAAKZ,EAAKa,MAAMC,UAAY,KAE9BC,EAAaL,KAAKC,MACpB,YAAW,IAAIC,KAAKZ,EAAKa,MAAOb,EAAKgB,UAAY,IAAIF,UACjD,KAEFG,GAAsB,QAAd,EAAAhB,aAAO,EAAPA,EAASgB,aAAK,eAAEC,QACxBjB,EAAQgB,MACR,CAAmB,QAAnB,EAACnB,KAAKV,KAAK+B,gBAAQ,eAAEC,IAC3B,OAAOtB,KAAKX,UACPkC,aAAa,CACVC,SAAUL,EAAMM,KAAK,KACrBd,eACAM,eAEHS,KAAMC,IACH3B,KAAKH,gBAAgBW,MAAK,GACnBmB,EAAKC,OACPC,IACI1B,EAAQ2B,UACT3B,EAAQ2B,UAAYD,EAAMC,eAWlC,KAAAC,WAAa,IAAMhD,IAU/BiB,KAAKgC,SACD,IAAI,IAAc,CACdjB,KAAM,YAAsB,YAAW,IAAID,KAAQ,GAAI,CACnDmB,UAAW,IACZjB,aA3Df,iBACI,OAAOhB,KAAKL,MAAMc,WAKtB,oBACI,OAAOT,KAAKJ,SAASa,WAiCzB,qB,QACI,MAAMM,GAAsC,QAA/B,EAAqB,QAArB,EAAAf,KAAKL,MAAMc,kBAAU,eAAEyB,gBAAQ,eAAEnB,KAAKL,SAAS,IAAII,MAAOE,UACvE,OAAO,YAAQ,IAAIF,KAAKC,GAAO,YAAS,IAAID,OAuBzC,SAASf,GACZC,KAAKN,OAAOc,KAAKT,GACjB,MAAMG,EAAO,YAAkBH,GAC/BC,KAAKL,MAAMa,KAAKN,GAChBF,KAAKmC,aAAa,cAAe,IAAMnC,KAAKoC,cAIzC,SAAkBC,EAAc3B,GACnC,MAAMR,EAAOF,KAAKL,MAAMc,WACpBP,GAAQA,EAAKgC,SAASG,IACtBnC,EAAKgC,SAASG,GAAMC,SAAS5B,GAI9B,cACH,MAAM6B,EAAMvC,KAAKR,QAAQgD,KACrB,IACA,CACIC,MAAO,OACPC,OAAQ,OACRC,KAAM,KAGRzC,EAAOF,KAAKL,MAAMc,WACxB8B,EAAIK,kBAAkB7C,MACjBQ,KAAK,YAAOsC,GAAmB,SAAbA,EAAEC,SACpBC,UAAWhD,IACR,MAAMiD,EAAY9C,EAAKgC,SAASc,UAAUtC,OAAS,GACnDsC,EAAUC,KAAKlD,EAAMmD,UACrBhD,EAAKgC,SAASc,UAAUV,SAAS,YAAOU,EAAW,UACnDT,EAAIY,UAKT,YACHnD,KAAKgC,SAAShC,KAAKN,OAAOe,YAC1BT,KAAKJ,SAASY,KAAK,IAIhB,cAAcL,GACjBH,KAAKJ,SAASY,KAAKL,GAIhB,aACH,MAAMD,EAAOF,KAAKL,MAAMc,WACxBzB,eAAeoE,QACX,gBACAC,KAAKC,UAAUtD,KAAKN,OAAOe,WAAW8C,WAE1CvE,eAAeoE,QAAQ,qBAAsBC,KAAKC,UAAUpD,EAAKQ,QACjExB,aAAakE,QACT,wBACAC,KAAKC,UAAUtD,KAAKJ,SAASa,aAK9B,YACH,MAAM+C,EAAaxE,eAAeyE,QAAQ,kBAAoB,KAC1DD,GACAxD,KAAKN,OAAOc,KAAK,IAAI,IAAc6C,KAAKK,MAAMF,KAElDG,QAAQC,IAAI,SAAU5D,KAAKN,OAAOe,YAClC,MAAMoD,EAAY7E,eAAeyE,QAAQ,sBACzC,GAAII,EAAW,CACX,MAAM3D,EAAO,YAAkBF,KAAKN,OAAOe,YAC3CP,EAAK4D,WAAWT,KAAKK,MAAMG,IAC3B7D,KAAKL,MAAMa,KAAKN,GAEpB,MAAM6D,EAAc7E,aAAauE,QAAQ,yBACrCM,GACA/D,KAAKJ,SAASY,KAAK6C,KAAKK,MAAMK,IAK/B,OACH,MAAM7D,EAAOF,KAAKL,MAAMc,WAYxB,GAXAP,EAAK8D,mBACA9D,EAAKgC,SAAS+B,UAAUvD,OAAUR,EAAKgC,SAASgC,KAAKxD,OACtDR,EAAK4D,WAAW,CACZG,UAAWjE,KAAKT,OAAO4E,QACvBD,KAAMlE,KAAKT,OAAO4E,QAAQC,QAE7BlE,EAAKgC,SAASmC,MAAM3D,OACrBR,EAAK4D,WAAW,CACZO,MAAOrE,KAAKT,OAAO4E,QAAQC,SAG9BlE,EAAKoE,MAAO,CACb,MAAM3C,EAAO,GACb,IAAK,MAAM4C,KAAOrE,EAAKgC,SACfhC,EAAKgC,SAASqC,GAAKC,SACnB7C,EAAKsB,KAAKsB,GAGlB,OAAOE,QAAQC,OACX,YACI,oCAAoC/C,EAAKF,KAAK,WAI1DzB,KAAKF,eAAeU,MAAK,GACzB,MAAMmE,EAAS,IAAI,IAAc,OAAD,wBACzB3E,KAAKN,OAAOe,WAAW8C,UACvBvD,KAAKL,MAAMc,WAAWC,QAE7B,OAAOV,KAAKZ,QAAQwF,KAAKD,GAAQjD,KAC7B,IAAM1B,KAAKF,eAAeU,MAAK,GAC/B,IAAMR,KAAKF,eAAeU,MAAK,K,6CAhM9BrB,GAAgB,oD,yBAAhBA,EAAgB,QAAhBA,EAAgB,Y,GAAtB,I,4YCSS,oBAA8B,+DAAiC,eAAI,Q,qWAtCnF,gBACI,gBACI,gBAAmB,QAA8B,OACjD,gBACI,mBAAgC,2DAC5B,qBAKJ,OACJ,OACJ,OACA,gBACI,gBACI,gBACI,kBACI,uBAGJ,OACA,kBAAmB,SAAoB,OAC3C,OACA,iBACI,kBACI,uBAGJ,OACA,kBAAmB,SAAU,OACjC,OACA,iBACI,kBACI,uBAGJ,OACA,kBAAmB,SAAsB,OACzC,2BACJ,OACJ,OACJ,OACJ,O,uBAxC2B,uCAKP,+BAWI,gCAGW,+BAKX,gCAGW,qBAKX,gCAGW,iCACV,sCCnBlB,Y,MAAM0F,UAAgC,IAMzC,YACYrF,EACAsF,EACA1F,GAERK,QAJQ,KAAAD,UACA,KAAAsF,UACA,KAAA1F,UALK,KAAA2F,QAAU,IAAI,IAW/B,WACI,IAAK/E,KAAKgF,KACN,MAAO,uBAEX,MAAMjE,EAAO,EAAMf,KAAKgF,KAAKjE,MACvBkE,EAAMlE,EAAKmE,IAAIlF,KAAKgF,KAAK9D,UAAY,GAAI,KAC/C,OAAIlB,KAAKgF,KAAKG,SAAWnF,KAAKgF,KAAK9D,SAAW,KAChCH,EAAKqE,OAAO,eAAf,aAEHrE,EAAKsE,OAAOJ,EAAK,KACV,GAAGlE,EAAKqE,OAAO,4BAA4BH,EAAIG,OAAO,YAEtD,GAAGrE,EAAKqE,OAAO,4BAA4BH,EAAIG,OAClD,yBAMT,SACHpF,KAAKsF,gBAGF,YACH,MAAMzD,EAAQ,IAAI,IAAM,CACpBQ,KAAM,eACNkD,OAAQvF,KAAKgF,KAAKQ,SAClBrE,MAAOnB,KAAKgF,KAAK7D,QAKFnB,KAAKR,QAAQgD,KAAK,IAAwB,CACzDC,MAAO,OACPgD,SAAU,OACVC,UAAW,OACX/C,KAAM,CAAEd,WAIR,gBACe7B,KAAKR,QAAQgD,KAAK,IAAuB,CACxDG,KAAM,CACF0B,MAAO,iBACPsB,QAAS,sDACTC,OAAQ,WACRC,WAAY,QAGTC,cAAc/C,UAAWgD,IAC5BA,GACA/F,KAAKgG,kBAKJ,gB,mDACThG,KAAK+E,QAAQkB,KAAK,+BACZjG,KAAKZ,QAAQ8G,OAAOlG,KAAKgF,KAAK1D,IAC/BI,KAAK,QAGLyE,MAAM,QAGXnG,KAAK8E,QAAQsB,SAAS,CAAC,aACvBpG,KAAK+E,QAAQkB,KAAK,Q,6CAjFbpB,GAAuB,gC,uBAAvBA,EAAuB,2cDnBpC,wB,KAA8B,qB,62CCmBvB,G,2JCTK,mBAAmD,mEAC/C,sBAIJ,O,MAFQ,gC,gNAVZ,gBACI,mBAAgC,0DAC5B,qBAIJ,OACA,0BAMA,mBAAgC,+DAC5B,sBAQJ,OACJ,O,wBAnBY,+BAGS,kCAST,gC,yBAnBpB,gBACI,gBACI,gBAAmB,QAA8B,OACjD,sBAwBJ,OACA,gBACI,gCACJ,OACJ,Q,oBA7B2B,uCACb,gCA0Be,8BCbtB,Y,MAAMwB,UAA8B,IA0EvC,YACYC,EACAxB,GAERrF,QAHQ,KAAA6G,SACA,KAAAxB,UAxEK,KAAA/E,MAAQ,IAAI,IAEZ,KAAAgF,QAAU,IAAI,IAIxB,KAAAwB,WAAuC,GAO9C,aACI,OAAOvG,KAAKgF,KAAKwB,UAIrB,gBACI,OAAOxG,KAAKgF,KAAKyB,SAAWzG,KAAKsG,OAAOnC,QAAQ9B,KAIpD,eAGI,OAAOrC,KAAKgF,KAAKyB,UADJzG,KAAKsG,OAAOnC,QACSC,OAAyB,SAAhBpE,KAAK0G,OAIpD,iBACI,OAAO1G,KAAK2G,UAA4B,WAAhB3G,KAAK0G,OAIjC,aACI,GAAI1G,KAAKgF,KAAM,CACX,MAAM4B,EAAM,IACN7F,EAAO,EAAMf,KAAKgF,KAAKjE,MAC7B,GAAI6F,EAAIC,SAAS9F,EAAK+F,SAAS,GAAI,KAAM,KACrC,MAAO,SACJ,GAAIF,EAAIC,SAAS9F,EAAM,KAC1B,MAAO,WACJ,GAAI6F,EAAIC,SAAS9F,EAAKmE,IAAI,GAAI,KAAM,KACvC,MAAO,UACJ,GAAI0B,EAAIC,SAAS9F,EAAKmE,IAAIlF,KAAKgF,KAAK9D,SAAU,KAAM,KACvD,MAAO,cAGf,MAAO,OAIX,oBACI,OAAOlB,KAAKM,OAAOyG,OACf,CAACC,EAAGC,IAAMD,GAAKhH,KAAKgF,KAAKjE,OAASf,KAAKuG,WAAWU,EAAE3F,KAAO,IAC3D,GAKR,kBACI,OAAOtB,KAAKM,OAAOc,OAAS,GAAqB,WAAhBpB,KAAK0G,QAAuC,SAAhB1G,KAAK0G,OAItE,kBACI,OAAO1G,KAAKM,OAAOc,OAAS,IAAsB,aAAhBpB,KAAK0G,QAAyC,YAAhB1G,KAAK0G,QAalE,OACH1G,KAAKD,MAAMkG,KAAK,CAAEiB,KAAM,SAMrB,UACHlH,KAAKmH,YAAcnH,KAAKmH,WAMrB,YACH,GAAIjI,aAAc,CACd,MAAMkI,EAAU,IAAI,IAAQ,OAAD,wBAAMpH,KAAKgF,MAAW,CAAE1D,GAAI,MACvDpC,aAAakE,QAAQ,qBAAsBC,KAAKC,UAAU8D,IAE9DpH,KAAK8E,QAAQsB,SAAS,CAAC,UAMpB,gBACHpG,KAAKD,MAAMkG,KAAK,CAAEiB,KAAM,oB,6CA9GnBb,GAAqB,sB,uBAArBA,EAAqB,0eDhBlC,sB,KAA4B,qB,+lBCgBrB,G,yBCMC,QACI,iBACI,iBACI,yBACJ,OACA,iBACI,QACJ,OACJ,OACJ,Q,oBAHY,iC,uCAMJ,sCAGI,gEAEJ,O,wBAHI,sB,uCAIJ,oCAGI,gEAA0B,2DAE7B,O,wBAHG,sB,yBAVZ,iBACI,WACI,4CAMA,0CAMJ,OACJ,Q,oBAfK,yBACa,gCAEL,wC,2FClBd,Y,MAAMgB,UAAmC,IAkB5C,YACYC,EACAlI,EACA0F,EACAyC,EACA/H,EACAgI,GAER/H,QAPQ,KAAA6H,YACA,KAAAlI,UACA,KAAA0F,UACA,KAAAyC,SACA,KAAA/H,UACA,KAAAgI,YARK,KAAAC,KAAO,IAAI,KAAa,GAalC,WACHzH,KAAKmC,aACD,eACA,OAAAuF,EAAA,GAAc,CAAC1H,KAAKuH,OAAOI,SAAU3H,KAAKuH,OAAOK,gBAAgB7E,UAC7D,EAAE8E,EAAOC,MACDD,EAAME,IAAI,QACV/H,KAAKsB,GAAKuG,EAAMG,IAAI,OAEpBF,EAAWC,IAAI,cACf/H,KAAKiI,SAAWH,EAAWE,IAAI,aAE/BF,EAAWC,IAAI,UACf/H,KAAKkH,KAAOY,EAAWE,IAAI,SAE3BhI,KAAKsB,IACLtB,KAAKkI,eAOlB,OACClI,KAAKmI,QACLnI,KAAKoI,SAAS,CAAElB,KAAM,gBAEtBlH,KAAKwH,UAAUa,OAOV,Y,mDACT,GAAIrI,KAAKsI,SACL,OAGJ,IAAIlB,EADJpH,KAAK+E,QAAU,0BAEf,IACI,OAAQ/E,KAAKkH,MACT,IAAK,UACDE,QAAgBpH,KAAKsH,UAAUiB,KAAKvI,KAAKsB,IACzC,MACJ,QACI8F,QAAgBpH,KAAKZ,QAAQmJ,KAAKvI,KAAKsB,GAAI,CAAE2G,SAAUjI,KAAKiI,WAEpEjI,KAAK+E,QAAU,GACf/E,KAAKD,MAAQqH,EACf,MAAOoB,GACLxI,KAAK+E,QAAU,GAEf/E,KAAK8E,QAAQsB,SAAS,CAAC,kBAOjB,c,mDACV,GAAIpG,KAAKD,QAAUC,KAAK+E,QAAS,CAC7B/E,KAAK+E,QAAU,wBACf,MAAM,GAAEzD,GAActB,KAAKD,MAC3BC,KAAKsI,UAAW,QACVtI,KAAKZ,QACN8G,OAAO5E,EAAI,CAAE2G,SAAWjI,KAAKD,MAAwBkI,WACrD9B,MAAM,QAIXnG,KAAK8E,QAAQsB,SAAS,CAAC,cACvBpG,KAAKD,MAAQ,KACbC,KAAK+E,QAAU,GACf/E,KAAKsI,UAAW,MAIhB,gBACetI,KAAKR,QAAQgD,KAAK,IAAuB,CACxDG,KAAM,CACF0B,MAAO,iBACPsB,QAAS,iDAAiD3F,KAAKD,MAAMsE,MACrEuB,OAAQ,WACRC,WAAY,QAGTC,cAAc/C,UAAWgD,IAC5BA,GACA/F,KAAKyI,gBAQV,SAAS1I,GACZ,GAAmB,SAAfA,EAAMmH,KAAiB,CACvB,GAAIhI,aAAc,CACd,MAAMkI,EAAU,IAAI,IAAc,OAAD,UAAMpH,KAAKD,QAC5Cb,aAAakE,QAAQ,qBAAsBC,KAAKC,UAAU8D,IAE9DpH,KAAK8E,QAAQsB,SAAS,CAAC,QAAS,eACV,SAAfrG,EAAMmH,MAAkC,gBAAfnH,EAAMmH,KACtClH,KAAKmI,SAAU,EACO,mBAAfpI,EAAMmH,OACblH,KAAKmI,SAAU,EACfnI,KAAKsF,kB,6CAxIJ+B,GAA0B,8D,uBAA1BA,EAA0B,siBDjBvC,gBACI,mBACI,4BAAiB,sCAAc,EAAAI,KAAA,WAAmB,OACtD,OACA,gBACI,gBACI,mBAAmB,gCAAS,EAAAY,UACxB,gBACI,qBAOA,iBACJ,OACJ,OACJ,OACA,gBACJ,OACA,kBACI,iCAUA,wBAgBJ,OACA,qBACI,yBACJ,OACJ,Q,MAhDyB,yBAAqB,eAKtB,+BAaD,+BAUU,+B,kvDCf1B,G,oPCfC,qB,KAEI,wB,0BAHR,gBACI,4BAIA,QACJ,Q,qBAJS,wCAGL,qC,0BAEJ,gBACI,QACJ,Q,qBADI,qC,uGAKQ,qB,KAEI,wB,sGAEJ,qB,KAEI,wB,uBAIR,gBAA4C,sBAAW,Q,sGAKnD,qB,KAEI,wB,wCApBhB,gBAAoC,2EAChC,iBACI,iBACI,6BAIA,6BAIJ,OACA,cAAK,QAAU,OACf,0BACJ,OACA,iBACI,iBAAmB,SAAiB,OACpC,kBACI,6BAIA,kBAAkB,SAA+B,OACrD,OACJ,OACJ,O,wBAxBsC,+BAA7B,iCACiB,wCAET,yCAQJ,qBACG,kDAGW,4BAGV,kCAGa,yC,0BAjClC,gBACI,uBAOA,uBAGA,yBA0BJ,Q,oBArCgC,8BACtB,oCAOA,sCCmBH,a,MAAMK,UAAuC,IAIhD,YAAoBpB,EAAoCxC,GACpDrF,QADgB,KAAA6H,YAAoC,KAAAxC,UAIxD,eACI,OAAO,EAAM9E,KAAKD,MAAMgB,MAAM4H,QAAQ,IAAS,KAGnD,aACI,OAAO3I,KAAKD,MAAM2G,OAGtB,cACI,OAAO1G,KAAKD,MAAM6I,QAItB,eACI,OAAK5I,KAAKD,OAA6B,SAApBC,KAAKD,MAAMmH,MAAuC,UAApBlH,KAAKD,MAAMmH,KAGrDlH,KAAKD,MAAM8I,SAFP,cAMf,iBACI,OAAK7I,KAAKD,OAA6B,SAApBC,KAAKD,MAAMmH,MAAuC,UAApBlH,KAAKD,MAAMmH,KAGxDlH,KAAKD,MAAM+I,aACJ,WAEJ,YALI,QAQf,WACI,OAAK9I,KAAKD,OAA6B,SAApBC,KAAKD,MAAMmH,MAAuC,UAApBlH,KAAKD,MAAMmH,KAGrDlH,KAAKD,MAAMoF,SAAWnF,KAAKD,MAAMmB,SAAW,KAC7C,UACA,EAAMlB,KAAKD,MAAMgB,MAAMqE,OAAO,UAJzB,GAOR,OACH,MAAM2D,EAAQ,YAAc,CACxBd,SAAUjI,KAAKD,MAAMkI,SACrBf,KAAMlH,KAAKD,MAAMmH,OAGrBlH,KAAK8E,QAAQkE,cADD,kBAAkBhJ,KAAKD,MAAMuB,MAAMyH,M,6CArD1CL,GAA8B,sB,uBAA9BA,EAA8B,+hBD3B3C,uB,KAAM,sB,wvCC2BC,G,gDCfa,wBAII,QACJ,Q,yBAHI,mBAEA,iC,0BAWR,gBACI,iBAIA,QACJ,Q,yBAHQ,yCAEJ,8B,sBA6BJ,8B,yBAOI,iC,yBACI,U,SAEA,iB,sBAEJ,8B,oEChDb,a,MAAMO,UAAmC,IA+B5C,YACYC,EACA9J,EACA+J,EACAC,EACA9B,EACAC,EACAzC,GAERrF,QARQ,KAAAyJ,YACA,KAAA9J,UACA,KAAA+J,UACA,KAAAC,aACA,KAAA9B,YACA,KAAAC,SACA,KAAAzC,UApCgB,KAAAuE,WAAa,IAAI,IAEtC,KAAAC,OAAwB,GAMxB,KAAAC,aAAuB,EAEvB,KAAAC,YAAsB,EAItB,KAAAC,KAAe,IAAQzI,UAQvB,KAAA0I,YAAc,GAEJ,KAAAjC,KAAO,IAAI,IAiBrB,WACHzH,KAAKmC,aACD,cACAnC,KAAKuH,OAAOK,cAAc7E,UAAW4G,IAC7BA,EAAO5B,IAAI,WACX/H,KAAKiI,SAAW0B,EAAO3B,IAAI,aAIvChI,KAAKmJ,QAAQS,YAAYrJ,KAAK,OAAAsJ,EAAA,GAAOhH,GAAMA,IAAIE,UAAU,KACrD/C,KAAKoJ,WAAWQ,YAAYrJ,KAAK,OAAAsJ,EAAA,GAAOhH,GAAMA,IAAIE,UAAWrC,I,QACzDV,KAAK8J,cAAgB9J,KAAKoJ,WAAWW,UAChC/J,KAAKiI,WACNjI,KAAKiI,UACwC,QAAzC,EAAAjI,KAAK8J,cAAcE,KAAMC,GAAMA,EAAEC,gBAAQ,eAAE5I,MAA2B,QAAzB,EAAItB,KAAK8J,cAAc,UAAE,eAAExI,KAEhFtB,KAAKmK,aACLnK,KAAKoK,SAAS,gBAAiB,IAAMpK,KAAKmK,aAAc,SAGhEnK,KAAK0J,YAAc1J,KAAKkJ,UAAUlB,IAAI,uBAK7B,a,mDACThI,KAAK+E,SAAU,EACf,MAAMsF,EAAQ,IAAQnF,IAAIlF,KAAKwJ,YAAa,KAAKc,QAAQ,KACnDrF,EAAMoF,EAAMnF,IAAI,EAAG,KAAKqF,MAAM,KACpC,IAAIjB,EAEAA,EADkB,UAAlBtJ,KAAKiI,eACUjI,KAAKsH,UAAUyB,MAAM,CAChCpI,aAAc0J,EAAMG,OACpBvJ,WAAYgE,EAAIuF,OAChBtD,KAAM,OACNuD,KAAM,kBAGKzK,KAAKZ,QAAQ2J,MAAM,CAC9BgB,UAAW/J,KAAKiI,SAChBtH,aAAc0J,EAAMG,OACpBvJ,WAAYgE,EAAIuF,SAGxB,MAAM7I,EAAO2H,EACPoB,EAAa1K,KAAKsJ,OAAO1H,OAAQqI,IACnC,MAAMlJ,EAAO,EAAMkJ,EAAElJ,MACrB,MACe,SAAXkJ,EAAE/C,MACS,UAAX+C,EAAE/C,OACDnG,EAAK8F,SAASwD,EAAO,MAAQtJ,EAAK4H,QAAQ1D,EAAK,QAGxDjF,KAAKsJ,OAAStJ,KAAK2K,cAAchJ,EAAM+I,GAEvC,MAAMrB,EAAarJ,KAAKsJ,OAAO1H,OAAQqI,GAAiB,SAAXA,EAAE/C,MAA8B,UAAX+C,EAAE/C,MACpElH,KAAKqJ,WAAWpD,KAAKoD,EAAWuB,IAAKX,IAAM,CAAG3I,GAAI2I,EAAE3I,GAAIP,KAAMkJ,EAAElJ,SAEhEf,KAAK6K,QAAQ,YAAa,IAAM7K,KAAK8K,YACrC9K,KAAK+E,SAAU,KAQZ,cAAcpD,EAAa+I,EAA4B,IAC1D,IAAIpB,EAAwB,GAChB,IACZ,IAAIvI,EAAO,IAAQuJ,QAAQ,KAC3B,MAAMrF,EAAMlE,EAAKmE,IAAIlF,KAAKwJ,YAAcxJ,KAAKuJ,aAAc,KAAKgB,MAAM,KACtE,KAAOxJ,EAAK8F,SAAS5B,GAAMlE,EAAOA,EAAKmE,IAAI,EAAG,KAAM,CAChD,MAAM6F,EAAWhK,EAAKqE,OAAO,cAE7BkE,EAAOrG,KAAK,CACR3B,GAAIyJ,EACJ7D,KAAM,OACN7C,MAAOtD,EAAKqE,OAAO,gBACnBrE,KAAMA,EAAKC,YAEf,MAAMgK,EAA0Cf,GAChC,EAAMA,EAAElJ,MACTsE,OAAOtE,EAAM,KAGtBkK,EAAYtJ,EAAKC,OAAOoJ,GACxBE,EAAYR,EAAW9I,OAAOoJ,GAChCC,EAAU7J,QAAU8J,EAAU9J,OAC9BkI,EAASA,EAAO6B,OAAOF,GAAkBE,OAAOD,GAGhD5B,EAAOrG,KAAK,CACR3B,GAAOyJ,EAAH,SACJ7D,KAAM,QACN7C,MAAO,gBAAgBtD,EAAKqE,OAAO,gBACnCrE,KAAMA,EAAKC,UAAY,IAKnC,OADAsI,EAAO8B,KAAK,CAACpE,EAAGqE,IAAMrE,EAAEjG,KAAOsK,EAAEtK,MAC1B,YAAOuI,EAAQ,MAMnB,YACEtJ,KAAKsL,eAAiBtL,KAAK8J,gBAC5B9J,KAAKwJ,YAAcxJ,KAAKwJ,YAAc,EACtCxJ,KAAKmK,cAQN,WAAWpJ,GACd,MAAMwK,EAAM,EAAMxK,GAClBf,KAAKwJ,YAAc+B,EAAIC,KAAK,IAAS,KAAO,EAC5CxL,KAAKuJ,aAAe3I,KAAK6K,IAAIzL,KAAKuJ,aAAcvJ,KAAKwJ,YAAc,GACnExJ,KAAK0L,UAAYH,EAAInG,OAAO,qBACrBpF,KAAKsL,cAEZtL,KAAKmK,aAMD,WACJ,GAAInK,KAAK0L,UAAW,CAChB,MAAMC,EAAQ3L,KAAKsJ,OAAOsC,UAAW3B,GAAMA,EAAE3I,KAAOtB,KAAK0L,WACrDC,GAAS,GACTE,SAASC,eAAe,GAAGH,GAASI,eAAe,CAAEC,SAAU,WAEnEhM,KAAK0L,UAAY,IAKlB,mBACH1L,KAAKsJ,OAAS,GACdtJ,KAAKwJ,YAAc,EACnBxJ,KAAKe,KAAO,IAAQC,UACpBhB,KAAKmK,aACLnK,KAAK8E,QAAQsB,SAAS,CAAC,aAAc,CACjC6F,YAAa,CACT7H,MAAOpE,KAAKiI,UAEhBiE,oBAAqB,UAKtB,kBACHlM,KAAKmM,QAAQC,a,6CAxMRnD,GAA0B,wE,uBAA1BA,EAA0B,4D,GAAA,K,WA4BJ,K,o7BDrDnC,gBACI,mBACI,4BAAiB,sCAAc,EAAAxB,KAAA,WAAmB,OACtD,OACA,gBACI,gBACI,2BACI,uBAEI,yDAAsB,mCACL,EAAA4E,sBAEjB,8BAMA,uBAA0B,gBAAK,OACnC,OACJ,OACJ,OACA,iBACI,qBACI,oBACJ,OACA,4BACI,yBAOJ,OACJ,OACA,kBACI,wBACI,uBAGA,oBAII,yCAAiB,EAAAC,WAAA,MAJrB,OAQA,oCAKJ,OACA,kCACJ,OACJ,OACA,mBACI,kBACI,kBACI,sCAIJ,OACA,kBACI,gCAAmB,mCAAY,EAAAC,cAC3B,yCAKA,sCAIJ,OACJ,OACJ,OACJ,OACA,qBACI,yBACJ,OACJ,Q,iCA3EoB,mCAIoB,wCAUK,oCAIQ,sCAYjC,iCAKA,+BAAgB,mBAQhB,sBAWC,+BAOoB,iCAKhB,oD,wuFClDlB,G,wCCxBH,QACI,gCAAqB,8DAA4B,OACrD,Q,wCACA,QACI,gCACI,8DAA2B,kEAE9B,OACL,QCIG,a,MAAMC,UAA0B,IAQnC,YAAoBjF,EAAgC2B,GAChDzJ,QADgB,KAAA8H,SAAgC,KAAA2B,YAF7C,KAAAuD,WAAY,EAMZ,WACHzM,KAAKkJ,UAAUwD,KAAK,WAAY,UAChC1M,KAAKmC,aACD,cACAnC,KAAKuH,OAAOI,SAAS5E,UAAW4G,IACxBA,EAAO5B,IAAI,UACX/H,KAAK2M,KAAOhD,EAAO3B,IAAI,YAInChI,KAAK4M,aACL,cAOG,aAAavD,GAChBrJ,KAAKsJ,OAASD,EACdrJ,KAAK6M,aAMF,aACC3N,cACAA,aAAakE,QAAQ,eAAgBC,KAAKC,UAAUtD,KAAKsJ,QAAU,KAOpE,aACH,GAAIpK,aAAc,CACd,MAAMyD,EAAOzD,aAAauE,QAAQ,gBAClCzD,KAAKsJ,OAASjG,KAAKK,MAAMf,GAAQ,Q,6CAlDhC6J,GAAiB,sB,uBAAjBA,EAAiB,oNDb9B,UACI,gCAGA,gCAMJ,OACA,2BAAgB,uDAAqB,Q,MAXvB,wBACK,oCAUH,mC,gvDCET,GCTA,MAAMM,GAAiB,CAC1B,CAAEC,KAAM,GAAIC,UAAW,IACvB,CAAED,KAAM,QAASC,UAAW,IAC5B,CAAED,KAAM,YAAaC,UAAW,IAChC,CAAED,KAAM,KAAME,WAAY,K,iBC4BvB,a,MAAMC,G,8BAAAA,I,oDAAAA,IAAc,SATd,CACL,IACA,IACA,IACA,IAAaC,SAASL,IACtB,KACA,Q,GAGD","file":"schedule-schedule-module.19e38b8ee57ee52a5de2.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { addMinutes, roundToNearestMinutes, isAfter, endOfDay } from 'date-fns';\n\nimport { BaseClass, notifyError, unique } from '@user-interfaces/common';\nimport {\n    CalendarEvent,\n    EventsService,\n    generateEventForm,\n} from '@user-interfaces/events';\nimport { CalendarService } from '@user-interfaces/calendar';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { NewUserModalComponent, StaffService } from '@user-interfaces/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface EventFormFilters {\n    capacity?: number;\n    zones?: string[];\n}\n\nexport function clearEventFormState(): void {\n    sessionStorage.removeItem('PLACEOS.event');\n    sessionStorage.removeItem('PLACEOS.event_form');\n    localStorage.removeItem('PLACEOS.event_filters');\n}\n\n@Injectable()\nexport class SpaceFlowService extends BaseClass {\n    /** Active event being worked on */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Form fields for the current flow */\n    private _form = new BehaviorSubject<FormGroup>(null);\n    /** Form fields for the current flow */\n    private _filters = new BehaviorSubject<EventFormFilters>({});\n    /** Whether space listing is being retrieved */\n    private _loading_spaces = new BehaviorSubject<boolean>(false);\n    /** Whether changes to event are being saved */\n    private _loading_event = new BehaviorSubject<boolean>(false);\n\n    public readonly event = this._event.asObservable();\n    public readonly form = this._form.asObservable();\n    public get event_form() {\n        return this._form.getValue();\n    }\n    public readonly filters = this._filters.asObservable();\n    public readonly loading_spaces = this._loading_spaces.asObservable();\n    public readonly loading_event = this._loading_event.asObservable();\n    public get event_filters() {\n        return this._filters.getValue();\n    }\n    public readonly spaces = this._filters.pipe(\n        switchMap((filters) => {\n            this._loading_spaces.next(true);\n            const form = this._form.getValue().value;\n            const period_start = Math.floor(\n                new Date(form.date).valueOf() / 1000\n            );\n            const period_end = Math.floor(\n                addMinutes(new Date(form.date), form.duration || 60).valueOf() /\n                    1000\n            );\n            const zones = filters?.zones?.length\n                ? filters.zones\n                : [this._org.building?.id];\n            return this._calendar\n                .availability({\n                    zone_ids: zones.join(','),\n                    period_start,\n                    period_end,\n                })\n                .then((list) => {\n                    this._loading_spaces.next(false);\n                    return list.filter(\n                        (space) =>\n                            !filters.capacity ||\n                            filters.capacity >= space.capacity\n                    );\n                });\n        })\n    );\n\n    public get is_future_date() {\n        const date = this._form.getValue()?.controls?.date.value || new Date().valueOf();\n        return isAfter(new Date(date), endOfDay(new Date()));\n    }\n\n    public readonly clearState = () => clearEventFormState();\n\n    constructor(\n        private _events: EventsService,\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _staff: StaffService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.setEvent(\n            new CalendarEvent({\n                date: roundToNearestMinutes(addMinutes(new Date(), 2), {\n                    nearestTo: 5,\n                }).valueOf(),\n            })\n        );\n    }\n\n    /** Set the event being worked on */\n    public setEvent(event: CalendarEvent): void {\n        this._event.next(event);\n        const form = generateEventForm(event);\n        this._form.next(form);\n        this.subscription('form_change', () => this.storeState());\n    }\n\n    /** Set the value of the form control */\n    public setValue<T = any>(name: string, value: T): void {\n        const form = this._form.getValue();\n        if (form && form.controls[name]) {\n            form.controls[name].setValue(value);\n        }\n    }\n\n    public newAttendee() {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {},\n            }\n        );\n        const form = this._form.getValue();\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                const attendees = form.controls.attendees.value || [];\n                attendees.push(event.metadata);\n                form.controls.attendees.setValue(unique(attendees, 'email'));\n                ref.close();\n            });\n    }\n\n    /** Reset the form fields for the active event */\n    public clearForm(): void {\n        this.setEvent(this._event.getValue());\n        this._filters.next({});\n    }\n\n    /** Update the current form filters */\n    public updateFilters(filters: EventFormFilters) {\n        this._filters.next(filters);\n    }\n\n    /** Store current event details and form values */\n    public storeState(): void {\n        const form = this._form.getValue();\n        sessionStorage.setItem(\n            'PLACEOS.event',\n            JSON.stringify(this._event.getValue().toJSON())\n        );\n        sessionStorage.setItem('PLACEOS.event_form', JSON.stringify(form.value));\n        localStorage.setItem(\n            'PLACEOS.event_filters',\n            JSON.stringify(this._filters.getValue())\n        );\n    }\n\n    /** Load old event details and form values */\n    public loadState(): void {\n        const event_data = sessionStorage.getItem('PLACEOS.event') || '{}';\n        if (event_data) {\n            this._event.next(new CalendarEvent(JSON.parse(event_data)));\n        }\n        console.log('Event:', this._event.getValue());\n        const form_data = sessionStorage.getItem('PLACEOS.event_form');\n        if (form_data) {\n            const form = generateEventForm(this._event.getValue());\n            form.patchValue(JSON.parse(form_data));\n            this._form.next(form);\n        }\n        const filter_data = localStorage.getItem('PLACEOS.event_filters');\n        if (filter_data) {\n            this._filters.next(JSON.parse(filter_data));\n        }\n    }\n\n    /** Save changes to event to the server */\n    public save(): Promise<void> {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.controls.organiser.value || !form.controls.host.value)\n            form.patchValue({\n                organiser: this._staff.current,\n                host: this._staff.current.email,\n            });\n        if (!form.controls.title.value) {\n            form.patchValue({\n                title: this._staff.current.email\n            });\n        }\n        if (!form.valid) {\n            const list = [];\n            for (const key in form.controls) {\n                if (form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return Promise.reject(\n                notifyError(\n                    `Some form fields are not valid: [${list.join(', ')}]`\n                )\n            );\n        }\n        this._loading_event.next(true);\n        const values = new CalendarEvent({\n            ...this._event.getValue().toJSON(),\n            ...this._form.getValue().value,\n        });\n        return this._events.save(values).then(\n            () => this._loading_event.next(false),\n            () => this._loading_event.next(false)\n        );\n    }\n}\n","<div class=\"booking-details\" *ngIf=\"item\">\n    <div class=\"header\">\n        <div class=\"title\">{{ item.title || 'No Title' }}</div>\n        <div class=\"icons\">\n            <button mat-fab color=\"primary\" (click)=\"cancel()\">\n                <app-icon\n                    name=\"cancel\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete_forever' }\"\n                >\n                </app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"booking\">\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'perm_identity' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ item.user_name }}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'schedule' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ when }}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'place' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ item.description }}</div>\n                <button *ngIf=\"item.asset_id\" (click)=\"showSpace()\" mat-button>View</button>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { Booking } from '@user-interfaces/bookings';\nimport { EventsService } from '@user-interfaces/events';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\nimport { Space } from '@user-interfaces/spaces';\n\nimport { ViewRoomModalComponent } from '../../../overlays/view-room-modal/view-room-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'schedule-booking-details',\n    templateUrl: './booking-details.component.html',\n    styleUrls: ['./booking-details.component.scss'],\n})\nexport class BookingDetailsComponent extends BaseClass {\n    /** Booking desk to display */\n    @Input() public item: Booking;\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter();\n\n    constructor(\n        private _dialog: MatDialog,\n        private _router: Router,\n        private _events: EventsService\n    ) {\n        super();\n    }\n\n    /** Display string of when the event will occur */\n    public get when(): string {\n        if (!this.item) {\n            return 'Unable to determine.';\n        }\n        const date = dayjs(this.item.date);\n        const end = date.add(this.item.duration || 60, 'm');\n        if (this.item.all_day || this.item.duration > 23 * 60) {\n            return `${date.format('DD MMM YYYY')} - All Day`;\n        } else {\n            if (date.isSame(end, 'd')) {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format('h:mm A')}`;\n            } else {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format(\n                    'DD MMM YYYY, h:mm A'\n                )}`;\n            }\n        }\n    }\n\n    public cancel() {\n        this.confirmDelete();\n    }\n\n    public showSpace(): void {\n        const space = new Space({\n            name: 'Desk Booking',\n            map_id: this.item.asset_id,\n            zones: this.item.zones,\n        });\n        if (!space.level) {\n            // this._service.notifyInfo('The space cannot be located.');\n        }\n        const dialog_ref = this._dialog.open(ViewRoomModalComponent, {\n            width: '32em',\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: { space },\n        });\n    }\n\n    private confirmDelete() {\n        const dialog_ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Cancel Meeting',\n                content: `Are you sure you want to cancel this desk booking ?`,\n                okText: `I'm sure`,\n                cancelText: 'No',\n            },\n        });\n        dialog_ref.afterClosed().subscribe((evt) => {\n            if (evt) {\n                this.deleteBooking();\n            }\n        });\n    }\n\n    public async deleteBooking() {\n        this.loading.emit('Cancelling booking...');\n        await this._events.delete(this.item.id)\n            .then(() => {\n                // this._service.notifySuccess('Booking was successfuly deleted.');\n            })\n            .catch(() => {\n                // this._service.notifyError('Booking could not be deleted.');\n            });\n        this._router.navigate(['schedule']);\n        this.loading.emit('');\n    }\n}\n","<div class=\"event-details\" *ngIf=\"item\">\n    <div class=\"header\">\n        <div class=\"title\">{{ item.title || 'No Title' }}</div>\n        <div *ngIf=\"can_edit\" class=\"icons\">\n            <button mat-fab color=\"primary\" (click)=\"edit()\">\n                <app-icon\n                    name=\"edit\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'edit' }\"\n                ></app-icon>\n            </button>\n            <button mat-fab *ngIf=\"can_cancel\" color=\"primary\" (click)=\"cancelBooking()\">\n                <app-icon\n                    name=\"cancel\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete_forever' }\"\n                ></app-icon>\n            </button>\n            <button mat-fab color=\"primary\" (click)=\"duplicate()\">\n                <app-icon\n                    name=\"duplicate\"\n                    [icon]=\"{\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'control_point_duplicate'\n                    }\"\n                ></app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"event\">\n        <schedule-event-view [event]=\"item\"></schedule-event-view>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Booking } from '@user-interfaces/bookings';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { CalendarEvent } from '@user-interfaces/events';\nimport { Space } from '@user-interfaces/spaces';\nimport { StaffService } from '@user-interfaces/users';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'schedule-event-details',\n    templateUrl: './event-details.component.html',\n    styleUrls: ['./event-details.component.scss'],\n})\nexport class EventDetailsComponent extends BaseClass {\n    /** Booking to display */\n    @Input() public item: CalendarEvent;\n    /** Emitter for action on the display view */\n    @Output() public event = new EventEmitter();\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter();\n    /** Toggle for activating checkin */\n    public checked_in: boolean;\n    /** Mapping of spaces to last checkin time */\n    public last_start: { [id: string]: number } = {};\n    /** Whether to show full locations list */\n    public show_locations: boolean;\n    /** Whether to show full attendee list */\n    public show_attendees: boolean;\n\n    /** List of spaces associated with the event */\n    public get spaces(): Space[] {\n        return this.item.resources;\n    }\n\n    /** Host of the event */\n    public get organiser(): string {\n        return this.item.creator || this._users.current.name;\n    }\n\n    /** Whether the user is allowed to edit the event */\n    public get can_edit(): boolean {\n        const organiser = this.organiser;\n        const user = this._users.current;\n        return this.item.creator === user.email && this.status !== 'done';\n    }\n\n    /** can the user cancel the meeting */\n    public get can_cancel(): boolean {\n        return this.can_edit && this.status === 'future';\n    }\n\n    /** Status of the event */\n    public get status(): 'future' | 'upcoming' | 'done' | 'started' | 'in_progress' {\n        if (this.item) {\n            const now = dayjs();\n            const date = dayjs(this.item.date);\n            if (now.isBefore(date.subtract(15, 'm'), 'm')) {\n                return 'future';\n            } else if (now.isBefore(date, 'm')) {\n                return 'upcoming';\n            } else if (now.isBefore(date.add(15, 'm'), 'm')) {\n                return 'started';\n            } else if (now.isBefore(date.add(this.item.duration, 'm'), 'm')) {\n                return 'in_progress';\n            }\n        }\n        return 'done';\n    }\n\n    /** Whether the user has checkin to all the spaces in the event */\n    public get is_checked_in(): boolean {\n        return this.spaces.reduce(\n            (a, v) => a && this.item.date <= (this.last_start[v.id] || 0),\n            true\n        );\n    }\n\n    /** Whether the spaces can be controlled */\n    public get can_control(): boolean {\n        return this.spaces.length > 0 && this.status !== 'future' && this.status !== 'done';\n    }\n\n    /** Whether the user is able to checkin to the event */\n    public get can_checkin(): boolean {\n        return this.spaces.length > 0 && (this.status === 'upcoming' || this.status === 'started');\n    }\n\n    constructor(\n        private _users: StaffService,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    /**\n     * Enter edit mode for the booking\n     */\n    public edit(): void {\n        this.event.emit({ type: 'edit' });\n    }\n\n    /**\n     * Checkin the current booking\n     */\n    public checkin(): void {\n        this.checked_in = !this.checked_in;\n    }\n\n    /**\n     * Store the booking data and navigate to the booking form\n     */\n    public duplicate(): void {\n        if (localStorage) {\n            const booking = new Booking({ ...this.item as any, id: '' });\n            localStorage.setItem('STAFF.booking_form', JSON.stringify(booking));\n        }\n        this._router.navigate(['/book']);\n    }\n\n    /**\n     * Cancel the booking\n     */\n    public cancelBooking(): void {\n        this.event.emit({ type: 'cancel_booking' });\n    }\n}\n","<div class=\"event page\">\n    <header class=\"header\">\n        <a-topbar-header (menuChange)=\"menu.emit($event)\"></a-topbar-header>\n    </header>\n    <div class=\"actions\" [class.blank]=\"false\" [class.has-back]=\"true\">\n        <div class=\"back\">\n            <button mat-button (click)=\"back()\">\n                <div class=\"row\">\n                    <app-icon\n                        [icon]=\"{\n                            tye: 'icon',\n                            class: 'material-icons',\n                            content: 'keyboard_backspace'\n                        }\"\n                    ></app-icon>\n                    Back\n                </div>\n            </button>\n        </div>\n        <div class=\"search\"></div>\n    </div>\n    <main class=\"body\">\n        <ng-container *ngIf=\"loading\">\n            <div class=\"no-item center\">\n                <div class=\"icon\">\n                    <mat-spinner diameter=\"100\"></mat-spinner>\n                </div>\n                <div class=\"text\">\n                    {{ loading }}\n                </div>\n            </div>\n        </ng-container>\n        <div [hidden]=\"loading\" *ngIf=\"event\">\n            <ng-container [ngSwitch]=\"type\">\n                <schedule-booking-details\n                    *ngSwitchCase=\"'booking'\"\n                    [item]=\"event\"\n                    (loading)=\"loading = $event\"\n                >\n                </schedule-booking-details>\n                <schedule-event-details\n                    *ngSwitchDefault\n                    [item]=\"event\"\n                    (event)=\"onChange($event)\"\n                    (loading)=\"loading = $event\"\n                ></schedule-event-details>\n            </ng-container>\n        </div>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { combineLatest } from 'rxjs';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { CalendarEvent, EventsService } from '@user-interfaces/events';\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\n\n\n@Component({\n    selector: 'schedule-view-event',\n    templateUrl: './view-event.component.html',\n    styleUrls: ['./view-event.component.scss'],\n})\nexport class ScheduleViewEventComponent extends BaseClass implements OnInit {\n    /** ID of the current booking to display */\n    public id: string;\n    /** Calendar the event belongs to */\n    public calendar: string;\n    /** Type of event to retrieve */\n    public type: string;\n    /** Booking to display */\n    public event: CalendarEvent | Booking;\n    /** Whether booking data is being loaded */\n    public loading: string;\n    /** Whether booking is being edited */\n    public editing: boolean;\n    /** Whether booking is being deleted */\n    public deleting: boolean;\n    /** Menu event */\n    @Output() public menu = new EventEmitter(false);\n\n    constructor(\n        private _bookings: BookingsService,\n        private _events: EventsService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _location: Location\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.params',\n            combineLatest([this._route.paramMap, this._route.queryParamMap]).subscribe(\n                ([param, queryParam]) => {\n                    if (param.has('id')) {\n                        this.id = param.get('id');\n                    }\n                    if (queryParam.has('calendar')) {\n                        this.calendar = queryParam.get('calendar');\n                    }\n                    if (queryParam.has('type')) {\n                        this.type = queryParam.get('type');\n                    }\n                    if (this.id) {\n                        this.loadEvent();\n                    }\n                }\n            )\n        );\n    }\n\n    public back() {\n        if (this.editing) {\n            this.onChange({ type: 'cancel_edit' });\n        } else {\n            this._location.back();\n        }\n    }\n\n    /**\n     * Load the details of the active event\n     */\n    public async loadEvent() {\n        if (this.deleting) {\n            return;\n        }\n        this.loading = 'Loading booking data...';\n        let booking;\n        try {\n            switch (this.type) {\n                case 'booking':\n                    booking = await this._bookings.show(this.id);\n                    break;\n                default:\n                    booking = await this._events.show(this.id, { calendar: this.calendar });\n            }\n            this.loading = '';\n            this.event = booking;\n        } catch (err) {\n            this.loading = '';\n            // this._service.notifyError(`Failed to load booking data\\nID: ${this.id}`);\n            this._router.navigate(['/schedule']);\n        }\n    }\n\n    /**\n     * Delete event\n     */\n    private async deleteEvent() {\n        if (this.event && !this.loading) {\n            this.loading = 'Cancelling meeting...';\n            const { id, title } = this.event;\n            this.deleting = true;\n            await this._events\n                .delete(id, { calendar: (this.event as CalendarEvent).calendar })\n                .catch(() => {\n                    // this._service.notifyError(`Failed to cancel booking \\n ${title}`);\n                });\n            // this._service.notifySuccess(`Booking ${title} was successfully cancelled`);\n            this._router.navigate(['/schedule']);\n            this.event = null;\n            this.loading = '';\n            this.deleting = false;\n        }\n    }\n\n    private confirmDelete() {\n        const dialog_ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Cancel Meeting',\n                content: `Are you sure you want to cancel this meeting: ${this.event.title}`,\n                okText: `I'm sure`,\n                cancelText: 'No',\n            },\n        });\n        dialog_ref.afterClosed().subscribe((evt) => {\n            if (evt) {\n                this.deleteEvent();\n            }\n        });\n    }\n\n    /**\n     * Handle changes to sub-components\n     */\n    public onChange(event: { type: string }): void {\n        if (event.type === 'edit') {\n            if (localStorage) {\n                const booking = new CalendarEvent({ ...this.event as any });\n                localStorage.setItem('STAFF.booking_form', JSON.stringify(booking));\n            }\n            this._router.navigate(['/book', 'spaces']);\n        } else if (event.type === 'view' || event.type === 'cancel_edit') {\n            this.editing = false;\n        } else if (event.type === 'cancel_booking') {\n            this.editing = false;\n            this.confirmDelete();\n        }\n    }\n}\n","<div *ngIf=\"event\" class=\"item\" [ngSwitch]=\"event.type\">\n    <div *ngSwitchCase=\"'date'\" class=\"date\">\n        <app-icon\n            *ngIf=\"!!event.is_today\"\n            [icon]=\"{ type: 'icon', class: 'material-icons', content: 'radio_button_checked' }\"\n        ></app-icon>\n        {{ event.title }}\n    </div>\n    <div *ngSwitchCase=\"'empty'\" class=\"empty\">\n        {{ event.title }}\n    </div>\n    <div *ngSwitchDefault class=\"event\" (click)=\"view(event)\">\n        <div [ngClass]=\"'time ' + status\" [class.done]=\"is_done\">\n            <div class=\"icon\" [ngSwitch]=\"event.status\">\n                <app-icon\n                    *ngSwitchCase=\"'cancelled'\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'cancel' }\"\n                ></app-icon>\n                <app-icon\n                    *ngSwitchDefault\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'forum' }\"\n                ></app-icon>\n            </div>\n            <div>{{ time }}</div>\n            <label *ngIf=\"event.status === 'cancelled'\">(Cancelled)</label>\n        </div>\n        <div class=\"details\">\n            <div class=\"title\">{{ event.title }}</div>\n            <div class=\"location\">\n                <app-icon\n                    *ngIf=\"!!location\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'place' }\"\n                ></app-icon>\n                <div class=\"text\">{{ location || 'No location' }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BookingsService } from '@user-interfaces/bookings';\nimport { BaseClass, toQueryString } from '@user-interfaces/common';\n\nimport * as dayjs from 'dayjs';\n\nexport interface BookingLike {\n    /** ID of the item */\n    id: string;\n    /** Sorting weight of the item */\n    order_id?: string;\n    /** Type of item to render */\n    type: 'date' | 'event' | 'empty' | 'desk';\n    /** Date in UTC milliseconds */\n    date: number;\n    /** Current state of the booking */\n    status?: 'confirmed' | 'tentative' | 'cancelled';\n    [key: string]: any;\n}\n\n@Component({\n    selector: 'schedule-event-item',\n    templateUrl: './list-item.component.html',\n    styleUrls: ['./list-item.component.scss'],\n})\nexport class ScheduleEventListItemComponent extends BaseClass {\n    /** Booking to display */\n    @Input() public event: BookingLike;\n\n    constructor(private _bookings: BookingsService, private _router: Router) {\n        super();\n    }\n\n    public get isFuture(): boolean {\n        return dayjs(this.event.date).isAfter(dayjs(), 'm');\n    }\n\n    public get status(): string {\n        return this.event.status;\n    }\n\n    public get is_done(): boolean {\n        return this.event.is_done;\n    }\n\n    /** Display location of the booking event */\n    public get location(): string {\n        if (!this.event || this.event.type === 'date' || this.event.type === 'empty') {\n            return 'No location';\n        }\n        return this.event.location;\n    }\n\n    /** Image name to display for the event */\n    public get type_image(): string {\n        if (!this.event || this.event.type === 'date' || this.event.type === 'empty') {\n            return 'block';\n        }\n        if (this.event.has_visitors) {\n            return 'external';\n        }\n        return 'book_room';\n    }\n\n    public get time(): string {\n        if (!this.event || this.event.type === 'date' || this.event.type === 'empty') {\n            return '';\n        }\n        return this.event.all_day || this.event.duration > 23 * 60\n            ? 'All Day'\n            : dayjs(this.event.date).format('h:mm A');\n    }\n\n    public view() {\n        const query = toQueryString({\n            calendar: this.event.calendar,\n            type: this.event.type,\n        });\n        const url = `/schedule/view/${this.event.id}?${query}`;\n        this._router.navigateByUrl(url);\n    }\n}\n","<div class=\"schedule page\">\n    <header class=\"header\">\n        <a-topbar-header (menuChange)=\"menu.emit($event)\"></a-topbar-header>\n    </header>\n    <div class=\"actions\">\n        <div class=\"calendars\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    name=\"calendars\"\n                    [(ngModel)]=\"calendar\"\n                    (ngModelChange)=\"onCalendarChange()\"\n                >\n                    <mat-option\n                        *ngFor=\"let cal of calendar_list\"\n                        [value]=\"cal.id\"\n                    >\n                        {{ cal.summary }}\n                    </mat-option>\n                    <mat-option value=\"desks\">Desks</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"legend\">\n            <button mat-button class=\"clear\" [matMenuTriggerFor]=\"legend\">\n                Legend\n            </button>\n            <mat-menu #legend=\"matMenu\">\n                <div class=\"legend\" *ngFor=\"let item of legend_list\">\n                    <div\n                        class=\"color\"\n                        [style.background-color]=\"item.color\"\n                    ></div>\n                    {{ item.name }}\n                </div>\n            </mat-menu>\n        </div>\n        <div class=\"date\">\n            <button mat-icon-button class=\"relative\" #dateMenu>\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'event' }\"\n                ></app-icon>\n                <input\n                    matInput\n                    class=\"opacity-0 absolute inset-0\"\n                    [ngModel]=\"date\"\n                    (ngModelChange)=\"updateDate($event)\"\n                    [matDatepicker]=\"picker\"\n                />\n\n                <mat-datepicker-toggle\n                    class=\"opacity-0 absolute inset-0\"\n                    matSuffix\n                    [for]=\"picker\"\n                ></mat-datepicker-toggle>\n            </button>\n            <mat-datepicker #picker></mat-datepicker>\n        </div>\n    </div>\n    <main class=\"body\">\n        <div class=\"event-list\">\n            <div class=\"progress\">\n                <mat-progress-bar\n                    mode=\"indeterminate\"\n                    *ngIf=\"loading\"\n                ></mat-progress-bar>\n            </div>\n            <div class=\"body\">\n                <a-infinite-scroll (scrolled)=\"onScroll()\">\n                    <schedule-event-item\n                        id=\"{{ i }}\"\n                        *ngFor=\"let item of events; let i = index\"\n                        [event]=\"item\"\n                    ></schedule-event-item>\n                    <mat-progress-bar\n                        mode=\"indeterminate\"\n                        *ngIf=\"loading && events.length > 0\"\n                    ></mat-progress-bar>\n                </a-infinite-scroll>\n            </div>\n        </div>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n","import { Component, Output, EventEmitter, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass, SettingsService, unique } from '@user-interfaces/common';\nimport { Calendar, CalendarService } from '@user-interfaces/calendar';\nimport { EventsService } from '@user-interfaces/events';\nimport { SpacesService } from '@user-interfaces/spaces';\nimport { BookingsService } from '@user-interfaces/bookings';\n\nimport { BookingLike } from './list-item/list-item.component';\n\nimport * as dayjs from 'dayjs';\n\nexport interface EventPair {\n    id: string;\n    date: number;\n}\n\n@Component({\n    selector: 'schedule-event-list',\n    templateUrl: './event-list.component.html',\n    styleUrls: ['./event-list.component.scss'],\n})\nexport class ScheduleEventListComponent extends BaseClass implements OnInit {\n    /** Emitter  */\n    @Output('eventList') public event_list = new EventEmitter<EventPair[]>();\n    /** List of items to display on the event list */\n    public events: BookingLike[] = [];\n    /** Update promise */\n    public event_promise: Promise<void>;\n    /** Whether bookings are being updated */\n    public loading: boolean;\n    /** Number of days to render in the list from the current date */\n    public shown_offset: number = 7;\n    /** Offset of the date to show events for */\n    public date_offset: number = 0;\n    /** Date to scroll to on next update */\n    public scroll_to: string;\n    /** Current UTC epoch */\n    public from: number = dayjs().valueOf();\n    /** Current UTC epoch */\n    public date: number;\n    /** List of user calendars */\n    public calendar_list: Calendar[];\n    /** Selected calendar id to display */\n    public calendar: string;\n    /** Legend */\n    public legend_list = [];\n    /** Menu event */\n    @Output() public menu = new EventEmitter();\n\n    @ViewChild('dateMenu', { read: MatMenuTrigger, static: false })\n    public trigger: MatMenuTrigger;\n\n    constructor(\n        private _settings: SettingsService,\n        private _events: EventsService,\n        private _spaces: SpacesService,\n        private _calendars: CalendarService,\n        private _bookings: BookingsService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('email')) {\n                    this.calendar = params.get('email');\n                }\n            })\n        );\n        this._spaces.initialised.pipe(first((_) => _)).subscribe(() => {\n            this._calendars.initialised.pipe(first((_) => _)).subscribe((value) => {\n                this.calendar_list = this._calendars.calendars;\n                if (!this.calendar) {\n                    this.calendar =\n                        this.calendar_list.find((i) => i.primary)?.id || this.calendar_list[0]?.id;\n                }\n                this.updateList();\n                this.interval('update_events', () => this.updateList(), 100 * 1000);\n            });\n        });\n        this.legend_list = this._settings.get('app.schedule.legend');\n    }\n    /**\n     * Update the list of events for the currently visible period\n     */\n    public async updateList() {\n        this.loading = true;\n        const start = dayjs().add(this.date_offset, 'd').startOf('d');\n        const end = start.add(7, 'd').endOf('d');\n        let events;\n        if (this.calendar === 'desks') {\n            events = await this._bookings.query({\n                period_start: start.unix(),\n                period_end: end.unix(),\n                type: 'desk',\n                user: 'current',\n            });\n        } else {\n            events = await this._events.query({\n                calendars: this.calendar,\n                period_start: start.unix(),\n                period_end: end.unix(),\n            });\n        }\n        const list = events;\n        const old_events = this.events.filter((i) => {\n            const date = dayjs(i.date);\n            return (\n                i.type !== 'date' &&\n                i.type !== 'empty' &&\n                (date.isBefore(start, 's') || date.isAfter(end, 's'))\n            );\n        });\n        this.events = this.processEvents(list, old_events);\n        // Update event list for view listing\n        const event_list = this.events.filter((i) => i.type !== 'date' && i.type !== 'empty');\n        this.event_list.emit(event_list.map((i) => ({ id: i.id, date: i.date })));\n        // Scroll to date if needed\n        this.timeout('scroll_to', () => this.scrollTo());\n        this.loading = false;\n    }\n\n    /**\n     * Process list of new items and merge with the old\n     * @param list List of new bookings to generate event blocks for\n     * @param old_events List of relevant old event blocks\n     */\n    public processEvents(list: any[], old_events: BookingLike[] = []): BookingLike[] {\n        let events: BookingLike[] = [];\n        const now = dayjs();\n        let date = dayjs().startOf('d');\n        const end = date.add(this.date_offset + this.shown_offset, 'd').endOf('d');\n        for (; date.isBefore(end); date = date.add(1, 'd')) {\n            const date_str = date.format('YYYY-MM-DD');\n            // Add date block\n            events.push({\n                id: date_str,\n                type: 'date',\n                title: date.format('dddd, DD MMM'),\n                date: date.valueOf(),\n            });\n            const filter_fn: (_: BookingLike) => boolean = (i) => {\n                const day = dayjs(i.date);\n                return day.isSame(date, 'd');\n            };\n            // Add events for today to list\n            const new_items = list.filter(filter_fn as any);\n            const old_items = old_events.filter(filter_fn as any);\n            if (new_items.length || old_items.length) {\n                events = events.concat(new_items as any).concat(old_items);\n            } else {\n                // Add block for no events if so\n                events.push({\n                    id: `${date_str}-empty`,\n                    type: 'empty',\n                    title: `No items for ${date.format('dddd, DD MMM')}`,\n                    date: date.valueOf() + 1,\n                });\n            }\n        }\n        events.sort((a, b) => a.date - b.date);\n        return unique(events, 'id');\n    }\n\n    /**\n     * Handle scrolling on the event list\n     */\n    public onScroll() {\n        if (!this.event_promise && this.calendar_list) {\n            this.date_offset = this.date_offset + 7;\n            this.updateList();\n        }\n    }\n\n    /**\n     * Update the date offset\n     * @param date UTC milliseconds epoch of new date offset\n     */\n    public updateDate(date: number) {\n        const day = dayjs(date);\n        this.date_offset = day.diff(dayjs(), 'd') - 1;\n        this.shown_offset = Math.max(this.shown_offset, this.date_offset + 3);\n        this.scroll_to = day.format('YYYY-MM-DD');\n        delete this.event_promise;\n        // this.date = dayjs().add(this.date_offset, 'd').valueOf();\n        this.updateList();\n    }\n\n    /**\n     * Scroll to a previously defined date on the event list\n     */\n    private scrollTo() {\n        if (this.scroll_to) {\n            const index = this.events.findIndex((i) => i.id === this.scroll_to);\n            if (index > -1) {\n                document.getElementById(`${index}`).scrollIntoView({ behavior: 'smooth' });\n            }\n            this.scroll_to = '';\n        }\n    }\n\n    /** On calendar change */\n    public onCalendarChange() {\n        this.events = [];\n        this.date_offset = 0;\n        this.date = dayjs().valueOf();\n        this.updateList();\n        this._router.navigate(['/schedule'], {\n            queryParams: {\n                email: this.calendar,\n            },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    /** Close calendar */\n    public closeDatePicker() {\n        this.trigger.closeMenu();\n    }\n}\n","<ng-container [ngSwitch]=\"page\">\n    <ng-container *ngSwitchCase=\"'view'\">\n        <schedule-view-event (menu)=\"show_menu = $event\"></schedule-view-event>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n        <schedule-event-list\n            (menu)=\"show_menu = $event\"\n            (eventList)=\"updateEvents($event)\"\n        ></schedule-event-list>\n    </ng-container>\n</ng-container>\n<a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass, SettingsService } from '@user-interfaces/common';\nimport { clearEventFormState } from '../bookings/space-flow/space-flow.service';\n\nimport { EventPair } from './event-list/event-list.component';\n\n@Component({\n    selector: 'app-schedule',\n    templateUrl: './schedule.template.html',\n    styleUrls: ['./schedule.styles.scss'],\n})\nexport class ScheduleComponent extends BaseClass implements OnInit {\n    /** Name of the page to render */\n    public page: string;\n    /** Current list of loaded events */\n    public events: EventPair[];\n    /** Whether to show menu */\n    public show_menu = false;\n\n    constructor(private _route: ActivatedRoute, private _settings: SettingsService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.post('navTitle', 'My Day');\n        this.subscription(\n            'route.route',\n            this._route.paramMap.subscribe((params) => {\n                if (params.has('page')) {\n                    this.page = params.get('page');\n                }\n            })\n        );\n        this.loadEvents();\n        clearEventFormState();\n    }\n\n    /**\n     * Update local event listing\n     * @param event_list New list of events\n     */\n    public updateEvents(event_list: EventPair[]) {\n        this.events = event_list;\n        this.saveEvents();\n    }\n\n    /**\n     * Save the current event listing\n     */\n    public saveEvents() {\n        if (localStorage) {\n            localStorage.setItem('STAFF.events', JSON.stringify(this.events || []));\n        }\n    }\n\n    /**\n     * Load the last saved event listing\n     */\n    public loadEvents() {\n        if (localStorage) {\n            const data = localStorage.getItem('STAFF.events');\n            this.events = JSON.parse(data || '[]');\n        }\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { ScheduleComponent } from './schedule.component';\n\nexport const ROUTES: Routes = [\n    { path: '', component: ScheduleComponent },\n    { path: ':page', component: ScheduleComponent },\n    { path: ':page/:id', component: ScheduleComponent },\n    { path: '**', redirectTo: '' }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './schedule.routes';\nimport { SharedContentModule } from '../ui/shared.module';\n\nimport { ScheduleComponent } from './schedule.component';\nimport { ScheduleEventListComponent } from './event-list/event-list.component';\nimport { ScheduleViewEventComponent } from './view-event/view-event.component';\nimport { ScheduleEventListItemComponent } from './event-list/list-item/list-item.component';\nimport { EventDetailsComponent } from './view-event/event-details/event-details.component';\nimport { EventEditComponent } from './view-event/event-edit/event-edit.component';\nimport { BookingDetailsComponent } from './view-event/booking-details/booking-details.component';\n\n@NgModule({\n    declarations: [\n        ScheduleComponent,\n        ScheduleViewEventComponent,\n        ScheduleEventListComponent,\n        ScheduleEventListItemComponent,\n        EventDetailsComponent,\n        EventEditComponent,\n        BookingDetailsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        ScrollingModule,\n    ],\n})\nexport class ScheduleModule {}\n"],"sourceRoot":"webpack:///"}