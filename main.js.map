{"version":3,"sources":["./apps/control/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./libs/common/src/lib/base.class.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/common/src/lib/general.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/control/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/angular-animations.ts","./libs/users/src/lib/user.utilities.ts","./libs/users/src/lib/user.class.ts","./libs/common/src/lib/user-state.ts","./libs/components/src/lib/binding.directive.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/custom-tooltip.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/components.module.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/events/src/lib/helpers.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/common/src/lib/api.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./apps/control/src/app/bootstrap.component.ts","./apps/control/src/app/ui/source-select-modal.component.ts","./apps/control/src/app/control-state.service.ts","./apps/control/src/app/ui/blinds-tooltip.component.ts","./apps/control/src/app/ui/joystick.component.ts","./apps/control/src/app/ui/camera-tooltip.component.ts","./apps/control/src/app/ui/help-tooltip.component.ts","./apps/control/src/app/ui/lighting-tooltip.component.ts","./apps/control/src/app/ui/microphone-tooltip.component.ts","./apps/control/src/app/ui/power-tooltip.component.ts","./apps/control/src/app/topbar-header.component.ts","./apps/control/src/app/ui/source-select.component.ts","./apps/control/src/app/ui/output-display.component.ts","./apps/control/src/app/advanced-view.component.ts","./apps/control/src/app/page-view.component.ts","./apps/control/src/app/ui/duration.pipe.ts","./apps/control/src/app/status-bar.component.ts","./apps/control/src/app/main-view.component.ts","./apps/control/src/app/app-routing.module.ts","./libs/events/src/lib/event.class.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/mocks/src/index.ts","./libs/components/src/lib/app.component.ts","./libs/common/src/lib/placeos.ts","./apps/control/src/environments/environment.prod.ts","./apps/control/src/app/ui/ui.module.ts","./apps/control/src/app/app.module.ts","./apps/control/src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","BaseClass","_timers","_intervals","_subscriptions","_initialised","BehaviorSubject","initialised","this","asObservable","getValue","destroy","key","clearTimeout","clearInterval","unsub","name","fn","delay","Function","setTimeout","setInterval","Subscription","unsubscribe","contains","subs","Object","filter","k","includes","ConfirmModalComponent","_dialog_ref","_data","event","title","content","confirm_text","cancel_text","icon","class","disableClose","enableClose","emit","reason","_app_name","setAppName","log","type","msg","args","stream","force","app_name","window","debug","colors","console","getItemWithKeys","map","shift","length","array","el","pos","arr","indexOf","find","i","ceil","floor","Math","random","timePeriodsIntersect","start1","end1","start2","end2","seed","str","h","imul","charCodeAt","xmur3","rand","a","b","c","d","t","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","addEventListener","mapKey","toLowerCase","last_down","next","preventDefault","combo","combination","Array","split","validCombination","push","last_key","updateCombinationEndList","subscribe","count","presses","state","reduce","v","replace","non_meta","DEFAULT_SETTINGS","composer","domain","route","protocol","port","use_domain","local_login","app","description","short_name","logo","src","logo_dark","general","SettingsService","_title","super","_overrides","_subjects","_observables","now","Date","time","built","init","value","getTitle","setTitle","get","location","pathname","slice","join","toUpperCase","application","settings","override_settings","override","_service","_available","_activated","_timer","notify","message","action","on_action","config","snackbar_ref","open","panelClass","duration","dismiss","onAction","notifySuccess","notifyInfo","info","opacity","height","USER_DOMAIN","StaffUser","data","email","first_name","last_name","phone","organisation","notes","photo","username","organizer","groups","checked_in","required","response_status","sys_admin","support","extension_data","assistance_required","is_external","endsWith","visit_expected","card_number","staff_id","is_logged_in","_current_user","currentUser","jest","pipe","retry","user","BindingDirective","_element","_renderer","index","params","modelChange","_","bindVariable","changes","sys","mod","bind","model","previousValue","execute","on_event","subscription","listen","nativeElement","binding","exec","result","ActionIconComponent","className","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","IconComponent","PopoutMenuComponent","actions","timeout","show","close","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","MAP_FEATURE_DATA","StatusOverlayComponent","loading","error","links","injector","CustomTooltipData","CustomTooltipComponent","_overlay","_injector","backdrop","_overlay_ref","onClick","_updateInjector","x_pos","y_pos","ngOnDestroy","_updateType","_portal","create","hasBackdrop","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","attach","backdropClick","dispose","providers","provide","useValue","parent","BuildingLevel","parent_id","display_name","map_id","capacity","locations","parts","number","Building","raw_data","disc_info","discovery_info","zone_id","zone","extras","extra_id","extra_name","loan_items","levels","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl","lvl_features","feature","level_id","bindings","timezone","catering_hours","start","end","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","Organisation","tags","_settings","OrganisationService","_router","_buildings","_active_building","_levels","building_list","level_list","active_building","active_levels","combineLatest","bld","levelsForBuilding","_building_settings","overrides","buildingSettings","bld_id","building","_organisation","details","buildings","id_list","tries","load","catch","err","notifyError","min","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","toPromise","auth","org","list","org_zone","navigate","limit","localStorage","getItem","sort","localeCompare","m","prev","curr","concat","setItem","feature_list","features","bookable","zones","support_url","image","configurations","level","availability","SpacesService","_org","_list","_compare","space","loadSpaces","predicate","valid_spaces","levelWithID","GlobalLoadingComponent","_spaces","MAT_MODULES","ComponentsModule","SpaceSelectItemComponent","DURATION_MAP","month","months","week","weeks","day","days","hour","hours","minute","minutes","DEFAULT_RULES","auto_approve","hidden","stringToMinutes","addToDate","add","date","checkRulesMatch","host","ruleset","matches","conditions","every","is_before","is_after","min_length","max_length","primary","summary","can_edit","resource","system","starts_at","ends_at","status","valueOf","SpaceSelectModalComponent","spaces","space_types","available_spaces","switchMap","q","query","hasOwnProperty","cal","querySpaceFreeBusy","zone_ids","period_start","period_end","shareReplay","filtered_spaces","filterSpacesFromRules","rulemap","rules","rulesForSpace","tap","forEach","multiple","space_map","save","metadata","SPACE_COUNT","BootstrapComponent","system_list","filtered_list","system_id","selected_system","bootstrap","configure","clearBootstrap","removeItem","space_list","queryParamMap","has","checkBootstrapped","search","s","SourceSelectModalComponent","output","ControlStateService","_dialog","_id","_system","_inputs","_outputs","_volume","_mute","_input_data","_output_data","_lights","_blinds","_screens","input_list","output_list","lights","blinds","screens","volume","mute","capture_list","mic_list","camera_list","distinct","bindToState","bindSources","input","source","mod_name","bindTo","undefined","l","alias_list","alias","updateSourceData","list_observer","findIndex","item","splice","on_change","updateProperty","BlindsTooltipComponent","_state","_tooltip","JoystickTilt","JoystickPan","JoystickComponent","panChange","tiltChange","pan","Stop","Left","tilt","Up","move_event","MouseEvent","end_event","_box","_panning_el","getBoundingClientRect","handlePan","point","x","clientX","y","clientY","touches","eventToPoint","angle","atan2","top","left","width","PI","Down","Right","startPan","$event","ZoomDirection","CameraTooltipComponent","presets","preset","zoom","dir","In","Out","HelpTooltipComponent","LightingTooltipComponent","MicrophoneTooltipComponent","PowerTooltipComponent","shutdown","powerOff","TopbarHeaderComponent","lights_list","blinds_list","cmp","lighting","power","help","camera","mics","SourceSelectComponent","output_id","outputs","input_types","input_map","types","setRoute","ICON_MAP","Display","PC","Laptop","Camera","TV","OutputDisplayComponent","_input","icons","switchSource","ControlAdvancedViewComponent","page","page_count","fill","ControlPageViewComponent","padLength","DurationPipe","ControlStatusBarComponent","capture_mod","setVolume","routes","path","component","ControlMainViewComponent","_route","powerOn","paramMap","setID","redirectTo","AppRoutingModule","useHash","_default_user","MOCK_MENU","unit_price","category","options","group","generateCateringOrder","event_start","event_end","mx","event_id","invoice_number","charge_code","deliver_at","items","idx","quantity","MOCK_ORGS","created_at","updated_at","triggers","MOCK_BUILDINGS","MOCK_LEVELS","num","substr","mockLevel","p","MOCK_METADATA","current","contacts","padString","method","callback","request","query_params","area_management","location_services","catering","route_params","generateMockDeskMetadata","body","DESK_FEATURES","desks","DOMAIN","PREDEF_USERS","ACTIVE_USER","MOCK_STAFF","MOCK_GUESTS","randomSpaceFeatures","f","numFeatures","res","r","MOCK_SPACES","linked","long_name","searchable","controlable","cost_hour","setup","breakdown","bookings","linked_rooms","generateMockSpace","EVENT_TIME","startOf","nextEventTime","unix","event_status","randomStatus","rnd","MOCK_EVENTS","PEOPLE","attendees","unshift","calendar","creator","private","all_day","recurring","recurrence","attachments","event_spaces","person","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","last_seen","subtract","geo","lat","lon","RoomModule","connected","active","env_sources","inputs","$updateState","following","$mute","locked","Mic1","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","u","bkn","pending","subSeconds","MockLocationServicesModule","overview","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","DisplayModule","MicrophoneModule","interval","CaptureModule","live","remaining","$start","createCaptureModule","createSystem","System","Bookings","AreaManagement","createCameraModule","createDisplayModule","Microphone","createMicrophoneModule","Capture","events","new_event","handleSpaceAvailability","system_ids","setHours","startOfDay","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","updateBooking","ZONE_MOCKS","USER_MOCKS","SYSTEM_MOCKS","EVENT_MOCKS","CALENDAR_MOCKS","BOOKING_MOCKS","BINDING_MOCKS","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","reload","copy","navigator","clipboard","readText","tkn","addHours","mock","origin","hostname","url","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","setupPlace","onInitError","cache","isEnabled","available","hash","activateUpdate","activated","checkForUpdate","setupCache","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","ANGULAR_MODULES","UIModule","AppModule","showDialog","deps","enabled","bootstrapModule"],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 763;\nmodule.exports = webpackEmptyAsyncContext;","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","\nconst general = {\n}\n\n\nconst app = {\n    name: 'Control',\n    title: 'PlaceOS',\n    description: 'Room Control UI',\n    short_name: 'PlaceOS',\n    logo: {\n        type: 'img',\n        src: 'assets/logo-light.svg'\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg'\n    },\n    general\n}\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/control',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"f42a236\",\n    \"hash\": \"f42a236\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"f42a236\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1627444768379\n};\n/* tslint:enable */\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import {\n    Directive,\n    Input,\n    SimpleChanges,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    ElementRef,\n    Renderer2,\n    EventEmitter,\n    Output,\n} from '@angular/core';\nimport { onlineState, authority, getModule } from '@placeos/ts-client';\n\nimport { BaseClass } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Directive({\n    selector: 'i[bind], [binding], co-bind',\n})\nexport class BindingDirective<T = any>\n    extends BaseClass\n    implements OnInit, OnChanges, OnDestroy {\n    /** ID of the system to bind */\n    @Input() public sys: string;\n    /** Class name of the module to bind */\n    @Input() public mod: string;\n    /** Index of the system to bind */\n    @Input() public index = 1;\n    /** Status variable to bind to */\n    @Input() public bind: string;\n    /** Method to execute */\n    @Input() public exec: string;\n    /** Event to listen for on the parent */\n    @Input('onEvent') public on_event: string;\n    /** ID of the system to bind to */\n    @Input() public params: any[] = [];\n    /** Current value of the binding */\n    @Input() public model: T;\n    /** Emitter for changes to the value of the binding */\n    @Output() public modelChange = new EventEmitter<T>();\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _renderer: Renderer2\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        onlineState()\n            ?.pipe(first((_) => _))\n            .subscribe((_) => this.bindVariable());\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.sys || changes.mod || changes.bind) {\n            this.bindVariable();\n        }\n        if (\n            changes.model &&\n            changes.model.previousValue !== this.model &&\n            this.model != null\n        ) {\n            this.execute();\n        }\n        if (changes.on_event && this.on_event) {\n            this.subscription(\n                'on_event',\n                this._renderer.listen(\n                    this._element.nativeElement,\n                    this.on_event,\n                    () => this.execute()\n                )\n            );\n        }\n    }\n\n    /** Bind to set status variable */\n    private bindVariable() {\n        if (authority() && this.bind && this.sys && this.mod) {\n            const module = getModule(this.sys, this.mod, this.index);\n            const binding = module.binding(this.bind);\n            this.subscription('binding', binding.bind());\n            this.subscription(\n                'on_changes',\n                binding.listen().subscribe((value) =>\n                    setTimeout(() => {\n                        this.model = value;\n                        this.modelChange.emit(this.model);\n                    }, 10)\n                )\n            );\n        }\n    }\n\n    /** Excute the set method on the module */\n    private execute() {\n        if (authority() && this.exec && this.sys && this.mod) {\n            const module = getModule(this.sys, this.mod, this.index);\n            if (this.bind) this.params = [this.model];\n            module.execute(this.exec, this.params).then((result) => {\n                // Emit exec result if not bound to status variable\n                if (!this.bind) {\n                    this.model = result;\n                    this.modelChange.emit(this.model);\n                }\n            });\n        }\n    }\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T) {\n        this.model = value;\n        this.modelChange.emit(this.model);\n        this.execute();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        if (!getViewer(this.viewer) || this.loading) {\n            return this.timeout('update_view', () => this.updateView());\n        }\n        try {\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        updateViewer(this.viewer, {\n            zoom: this.zoom,\n            desired_zoom: this.zoom,\n            center: this.center,\n            desired_center: this.center,\n            options: this.options,\n        });\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Injectable,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Injectable()\nexport class CustomTooltipData<T = any> {\n    data: T;\n    close: () => void;\n    constructor(d) {\n        this.data = d.data;\n        this.close = d.close || (() => null);\n    }\n}\n\n@Component({\n    selector: '[customTooltip]',\n    template: `\n        <ng-content></ng-content>\n\n        <ng-template cdk-portal>\n            <div custom-tooltip [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'component'\">\n                    <ng-container\n                        *ngComponentOutlet=\"content; injector: injector\"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'html'\">\n                    <div [innerHTML]=\"content | sanitize\"></div>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <ng-container\n                        *ngTemplateOutlet=\"content; context: data\"\n                    ></ng-container>\n                </ng-container>\n            </div>\n        </ng-template>\n    `,\n})\nexport class CustomTooltipComponent<T = any>\n    extends BaseClass\n    implements OnChanges, OnDestroy {\n    /** Horizontal position of the rendered overlay */\n    @Input('xPosition') public x_pos: 'start' | 'center' | 'end';\n    /** Vertical position of the rendered overlay */\n    @Input('yPosition') public y_pos: 'top' | 'center' | 'bottom';\n    /** Content to render in the tooltip */\n    @Input() public content: TemplateRef<any> | Type<any> | string;\n    /** Data associated with the tooltip content */\n    @Input() public data: T;\n    /** Whether tooltip has a backdrop */\n    @Input() public backdrop = true;\n    /** Type of content to render */\n    public type: 'template' | 'component' | 'html' = 'template';\n\n    public injector: Injector;\n\n    private _overlay_ref: OverlayRef = null;\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('click') public readonly onClick = () => this.open();\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay,\n        private _injector: Injector\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        this._updateInjector();\n        if (\n            this._overlay_ref &&\n            (changes.x_pos || changes.y_pos || changes.content)\n        ) {\n            this.open();\n        }\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public open() {\n        this._updateType();\n        if (this._overlay_ref) this.close();\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            hasBackdrop: !!this.backdrop,\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withPositions([\n                    {\n                        originX: this.x_pos || 'end',\n                        originY:\n                            (this.y_pos === 'top'\n                                ? 'bottom'\n                                : this.y_pos == 'bottom'\n                                ? 'top'\n                                : this.y_pos) || 'bottom',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'top',\n                    },\n                ]),\n        });\n        this._overlay_ref.attach(this._portal);\n        if (this.backdrop) {\n            this.subscription(\n                'backdrop',\n                this._overlay_ref.backdropClick().subscribe(() => this.close())\n            );\n        }\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    private _updateType() {\n        this.type =\n            typeof this.content === 'string'\n                ? 'html'\n                : this.content instanceof TemplateRef\n                ? 'template'\n                : 'component';\n    }\n\n    private _updateInjector() {\n        this.injector = Injector.create({\n            providers: [\n                {\n                    provide: CustomTooltipData,\n                    useValue: { data: this.data, close: () => this.close() },\n                },\n            ],\n            parent: this._injector,\n        });\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MapPolygonComponent } from './map-polygon.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    MapPolygonComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { Space, SpacesService } from '@placeos/spaces';\n\n@Component({\n    selector: '[app-bootstrap]',\n    template: `\n        <div\n            class=\"rounded shadow m-4 bg-white overflow-hidden mx-auto text-center flex flex-col items-center\"\n        >\n            <h2 class=\"bg-secondary text-white py-2 px-4 m-0 w-full text-2xl\">Control Interface Setup</h2>\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <p class=\"description my-3\">Input the PlaceOS <em>System ID</em> to bootstrap</p>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>System ID</mat-label>\n                    <input\n                        matInput\n                        [(ngModel)]=\"system_id\"\n                        [matAutocomplete]=\"auto\"\n                        placeholder=\"System ID\"\n                        (ngModelChange)=\"filter($event)\"\n                    />\n                </mat-form-field>\n                <mat-autocomplete #auto=\"matAutocomplete\">\n                    <mat-option *ngFor=\"let option of filtered_list\" [value]=\"option.id\">\n                        <div class=\"leading-tight\">\n                            <div class=\"name\">{{ option.name }}</div>\n                            <div class=\"text-xs text-dark-fade\">{{ option.id }}</div>\n                        </div>\n                    </mat-option>\n                </mat-autocomplete>\n                <button mat-button [disabled]=\"!system_id\" (click)=\"bootstrap()\">Submit</button>\n            </ng-container>\n        </div>\n        <ng-template #load_state>\n            <div class=\"my-16 flex flex-col items-center\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <div class=\"m-4\">Loading system data...</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: #f0f0f0;\n                background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='hexagons' fill='%23ddd' fill-opacity='1' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n            }\n\n            :host > div {\n                width: 26rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            mat-form-field {\n                width: calc(100% - 2rem);\n            }\n\n            button {\n                width: 8rem;\n                margin: 0.5rem;\n                margin-top: 0;\n            }\n        `,\n    ],\n})\nexport class BootstrapComponent extends BaseClass implements OnInit {\n    /** List of available systems */\n    public system_list: Space[] = [];\n    /** List of available systems */\n    public filtered_list: Space[] = [];\n    /** Whether application data is loading */\n    public loading: boolean;\n    /** ID of the system to bootstrap */\n    public system_id: string = '';\n    /** Selected system to bootstrap */\n    public selected_system: Space = null;\n    /** Whether input field is focused */\n    public input_focus: boolean;\n\n    constructor(\n        private _spaces: SpacesService,\n        private route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        this.system_list = this._spaces.space_list || [];\n        this.filter('');\n        this.loading = false;\n        this.subscription(\n            'route.query',\n            this.route.queryParamMap.subscribe((params) => {\n                if (params.has('clear') && params.get('clear')) {\n                    this.clearBootstrap();\n                } else if (params.has('system_id') || params.has('sys_id')) {\n                    this.system_id = params.get('system_id') || params.get('sys_id');\n                    this.bootstrap();\n                }\n            })\n        );\n\n        this.checkBootstrapped();\n    }\n\n    /**\n     * Setup the default system for the application to bind to\n     */\n    public readonly bootstrap = () => this.configure(this.system_id);\n\n    /**\n     * Check if the application has previously been bootstrapped\n     */\n    private checkBootstrapped(): void {\n        this.loading = true;\n        if (localStorage) {\n            const system_id = localStorage.getItem('PLACEOS.CONTROL.system');\n            if (system_id) {\n                this._router.navigate(['panel', system_id]);\n                return;\n            }\n        }\n        this.loading = false;\n    }\n\n    /**\n     * Save the bootstrapped ID and redirect to the panel for that ID\n     * @param system_id System to bootstrap\n     */\n    private configure(system_id: string): void {\n        this.loading = true;\n        if (localStorage) {\n            localStorage.setItem('PLACEOS.CONTROL.system', system_id);\n            localStorage.setItem('trust', 'true');\n            localStorage.setItem('fixed_device', 'true');\n        }\n        this._router.navigate(['panel', system_id]);\n        this.loading = false;\n    }\n\n    /**\n     * Remove any previously set bootstrapping details\n     */\n    private readonly clearBootstrap = () => localStorage.removeItem('PLACEOS.CONTROL.system');\n\n    public filter(search: string) {\n        const s = search.toLowerCase();\n        this.filtered_list = this.system_list\n            .filter((i) => i.name.toLowerCase().includes(s) || i.id.includes(search))\n            .slice(0, 100);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport class SourceSelectModalData {\n    output: string;\n}\n\n@Component({\n    selector: 'source-select-modal',\n    template: `\n        <div class=\"fixed inset-0 bg-white flex flex-col items-center py-16 px-8\">\n            <source-select [output]=\"output\" (source)=\"close()\"></source-select>\n            <button\n                mat-icon-button\n                mat-dialog-close\n                class=\"absolute top-8 right-8\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n    `\n})\nexport class SourceSelectModalComponent {\n    public readonly output = this._data.output;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: SourceSelectModalData,\n        private _dialog_ref: MatDialogRef<SourceSelectModalComponent>\n    ) {}\n\n    public close() {\n        this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { getModule } from '@placeos/ts-client';\nimport { distinct, map, shareReplay } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { SourceSelectModalComponent } from './ui/source-select-modal.component';\n\nexport interface EnvironmentSource {\n    name: string;\n    states: string[];\n    state: string;\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n    hidden?: boolean;\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n    hidden?: boolean;\n}\n\nexport interface SystemState {\n    name?: string;\n    power?: boolean;\n    connected?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ControlStateService extends BaseClass {\n    private _id = new BehaviorSubject<string>('');\n    private _system = new BehaviorSubject<SystemState>({});\n    private _inputs = new BehaviorSubject<string[]>([]);\n    private _outputs = new BehaviorSubject<string[]>([]);\n    private _volume = new BehaviorSubject<number>(0);\n    private _mute = new BehaviorSubject<boolean>(false);\n    private _input_data = new BehaviorSubject<RoomInput[]>([]);\n    private _output_data = new BehaviorSubject<RoomOutput[]>([]);\n    private _lights = new BehaviorSubject<string[]>([]);\n    private _blinds = new BehaviorSubject<string[]>([]);\n    private _screens = new BehaviorSubject<string[]>([]);\n\n    /** General data associated with the active system */\n    public readonly system = this._system.asObservable();\n    /** List of available input sources */\n    public readonly input_list = this._input_data.pipe(\n        map((_) => _.filter((_) => !_.hidden)),\n        shareReplay(1)\n    );\n    /** List of available output sources */\n    public readonly output_list = this._output_data.pipe(\n        map((_) => _.filter((_) => !_.hidden)),\n        shareReplay(1)\n    );\n    /** List of available light sources */\n    public readonly lights = this._lights.asObservable();\n    /** List of available blind sources */\n    public readonly blinds = this._blinds.asObservable();\n    public readonly screens = this._screens.asObservable();\n    public readonly volume = this._volume.asObservable();\n    public readonly mute = this._mute.asObservable();\n    /** List of available capture output sources */\n    public readonly capture_list = this._output_data.pipe(\n        map((list) =>\n            list?.filter(\n                (_) => _.type === 'recording' || _.mod?.includes('Capture')\n            )\n        )\n    );\n    /** List of available microphone input sources */\n    public readonly mic_list = this._input_data.pipe(\n        map((list) =>\n            list?.filter(\n                (_) => _.type === 'mic' || _.mod?.includes('Microphone')\n            )\n        )\n    );\n    /** List of available camera input sources */\n    public readonly camera_list = this._input_data.pipe(\n        map((list) =>\n            list?.filter((_) => _.type === 'cam' || _.mod?.includes('Camera'))\n        )\n    );\n\n    public get id() {\n        return this._id.getValue();\n    }\n\n    constructor(private _dialog: MatDialog) {\n        super();\n        this._id.pipe(distinct()).subscribe((id) => this.bindToState(id));\n        this._inputs.subscribe((_) => this.bindSources('input', _ || []));\n        this._outputs.subscribe((_) => this.bindSources('output', _ || []));\n    }\n\n    public setID(id: string) {\n        this._id.next(id);\n    }\n\n    /** Power on the active system */\n    public powerOn() {\n        return this.execute('powerup');\n    }\n\n    /** Power off the active system */\n    public powerOff() {\n        return this.execute('shutdown');\n    }\n\n    /** Route input source to output */\n    public setRoute(input: string, output: string) {\n        return this.execute('route', [input, output]);\n    }\n\n    public setMute(state: boolean = true, source: string = '') {\n        if (!source) {\n            this._mute.next(state);\n        }\n        return this.execute('mute', source ? [state, source] : [state]);\n    }\n\n    public setVolume(value: number = 0, source: string = '') {\n        if (!source) {\n            this._volume.next(value);\n        }\n        return this.execute('volume', source ? [value, source] : [value]);\n    }\n\n    private execute(\n        name: string,\n        params: any[] = [],\n        mod_name: string = 'System'\n    ) {\n        const mod = getModule(this._id.getValue(), mod_name);\n        if (!mod) return;\n        return mod.execute(name, params);\n    }\n\n    public switchSource(output: string) {\n        this._dialog.open(SourceSelectModalComponent, {\n            data: { output },\n        });\n    }\n\n    private bindToState(id: string) {\n        if (!id) return;\n        this.bindTo(id, 'name');\n        this.bindTo(id, 'active');\n        this.bindTo(id, 'connected');\n        this.bindTo(id, 'recording');\n        this.bindTo(id, 'has_zoom');\n        this.bindTo(id, 'inputs', undefined, (l) => this._inputs.next(l));\n        this.bindTo(id, 'outputs', undefined, (l) => this._outputs.next(l));\n        this.bindTo(id, 'lights', undefined, (l) => this._lights.next(l));\n        this.bindTo(id, 'blinds', undefined, (l) => this._blinds.next(l));\n        this.bindTo(id, 'screen', undefined, (l) => this._screens.next(l));\n    }\n\n    /** Bind to changes on input or output sources */\n    private bindSources(type: 'input' | 'output', alias_list: string[]) {\n        const id = this._id.getValue();\n        if (!id) return;\n        for (const alias of alias_list) {\n            this.bindTo(id, `${type}/${alias}`, undefined, (d) =>\n                this.updateSourceData(type, alias, d)\n            );\n        }\n    }\n\n    /** Update listed data for given source */\n    private updateSourceData(\n        type: 'input' | 'output',\n        id: string,\n        data: HashMap\n    ) {\n        const list_observer =\n            type === 'input' ? this._input_data : this._output_data;\n        const list: any[] = [...list_observer.getValue()];\n        const index = list.findIndex((item) => item.id === id);\n        if (index >= 0) {\n            list.splice(index, 1, { id, ...data });\n        } else {\n            list.push({ id, ...data });\n        }\n        list_observer.next(list);\n    }\n\n    /** List to binding */\n    private bindTo(\n        id: string,\n        name: string,\n        mod: string = 'System',\n        on_change: (v: any) => void = (v) => this.updateProperty(name, v)\n    ) {\n        const module = getModule(id, mod).binding(name);\n        this.subscription(\n            `listen:${name}`,\n            module.listen().subscribe(on_change)\n        );\n        this.subscription(`bind:${name}`, module.bind());\n    }\n\n    /** Update properties of the system data */\n    private updateProperty(name: string, value: any) {\n        const item = { ...this._system.getValue() };\n        item[name] = value;\n        this._system.next(item);\n    }\n}\n","import { Component } from \"@angular/core\";\nimport { CustomTooltipData } from \"@placeos/components\";\n\nimport { ControlStateService, EnvironmentSource } from \"../control-state.service\";\n\n@Component({\n    selector: 'blinds-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <div hidden *ngIf=\"!!(blinds | async)[0]\">\n                <i\n                    binding\n                    [(model)]=\"blind\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    [bind]=\"'blinds/' + (blinds | async)[0]\"\n                ></i>\n            </div>\n            <h3 class=\"mb-2 text-xl font-medium\">Blinds Presets</h3>\n            <ng-container *ngIf=\"blind?.states?.length; else empty_state\">\n                <button\n                    state\n                    mat-button\n                    class=\"w-64\"\n                    *ngFor=\"let state of blind.states\"\n                    [class.inverse]=\"state === blind.state\"\n                    binding\n                    onEvent=\"click\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    exec=\"environment\"\n                    [params]=\"[(blinds | async)[0], state]\"\n                >\n                    {{ state }}\n                </button>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex items-center justify-center p-8\">\n                <p>No presets available for blinds</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BlindsTooltipComponent {\n    public blind: EnvironmentSource;\n\n    public readonly blinds = this._state.blinds;\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    Renderer2,\n    ViewChild,\n} from '@angular/core';\nimport { Point } from '@placeos/svg-viewer';\nimport { BaseClass } from '@placeos/common';\n\n/**\n * Grab point details from mouse or touch event\n * @param event Event to grab details from\n */\nexport function eventToPoint(event: MouseEvent | TouchEvent): Point {\n    if (!event) {\n        return { x: -1, y: -1 };\n    }\n    if (event instanceof MouseEvent) {\n        return { x: event.clientX, y: event.clientY };\n    }\n    return event.touches && event.touches.length > 0\n        ? { x: event.touches[0].clientX, y: event.touches[0].clientY }\n        : { x: -1, y: -1 };\n}\n\nexport enum JoystickTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum JoystickPan {\n    Left,\n    Right,\n    Stop,\n}\n\n@Component({\n    selector: 'joystick',\n    template: `\n        <div\n            #panning_control\n            joystick\n            (mousedown)=\"startPan($event)\"\n            (touchstart)=\"startPan($event)\"\n            class=\"relative h-48 w-48 rounded-full bg-gray-600 text-white\"\n        >\n            <div class=\"absolute inset-0 flex text-5xl items-center\">\n                <app-icon style=\"transform: translateX(-.5rem)\">\n                    chevron_left\n                </app-icon>\n            </div>\n            <div\n                class=\"absolute inset-0 flex text-5xl items-center justify-end\"\n            >\n                <app-icon style=\"transform: translateX(.5rem)\"\n                    >chevron_right</app-icon\n                >\n            </div>\n            <div class=\"absolute inset-0 flex text-5xl justify-center\">\n                <app-icon style=\"transform: translateY(-.5rem)\"\n                    >expand_less</app-icon\n                >\n            </div>\n            <div\n                class=\"absolute inset-0 flex text-5xl items-end justify-center\"\n            >\n                <app-icon style=\"transform: translateY(.5rem)\"\n                    >expand_more</app-icon\n                >\n            </div>\n            <div\n                class=\"absolute top-12 left-12 right-12 bottom-12 bg-white rounded-full flex items-center justify-center\"\n            >\n                <div\n                    thumb\n                    [style.transform]=\"thumb_transform\"\n                    class=\"bg-black h-12 w-12 rounded-full\"\n                ></div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class JoystickComponent extends BaseClass {\n    @Input() public pan: JoystickPan;\n    @Input() public tilt: JoystickTilt;\n\n    @Output() public panChange = new EventEmitter<JoystickPan>();\n    @Output() public tiltChange = new EventEmitter<JoystickTilt>();\n\n    @ViewChild('panning_control', { static: true })\n    private _panning_el: ElementRef<HTMLDivElement>;\n\n    private _box: ClientRect;\n\n    constructor(private _renderer: Renderer2) {\n        super();\n    }\n\n    public get thumb_transform() {\n        return `translate(${\n            this.pan === JoystickPan.Stop\n                ? '0'\n                : this.pan === JoystickPan.Left\n                ? '-50'\n                : '50'\n        }%, ${\n            this.tilt === JoystickTilt.Stop\n                ? '0'\n                : this.tilt === JoystickTilt.Up\n                ? '-50'\n                : '50'\n        }%)`;\n    }\n\n    public startPan(event: MouseEvent | TouchEvent) {\n        const move_event =\n            event instanceof MouseEvent ? 'mousemove' : 'touchmove';\n        const end_event = event instanceof MouseEvent ? 'mouseup' : 'touchend';\n        this._box = this._panning_el.nativeElement.getBoundingClientRect();\n        this.subscription(\n            'on_move',\n            this._renderer.listen('window', move_event, (e) =>\n                this.handlePan(e)\n            )\n        );\n        this.subscription(\n            'on_end',\n            this._renderer.listen('window', end_event, (_) => {\n                this.unsub('on_move');\n                this.unsub('on_end');\n                this.tilt = JoystickTilt.Stop;\n                this.pan = JoystickPan.Stop;\n            })\n        );\n        this.handlePan(event);\n    }\n\n    public handlePan(event: MouseEvent | TouchEvent) {\n        const point = eventToPoint(event);\n        const box_point = {\n            y: this._box.top + this._box.height / 2,\n            x: this._box.left + this._box.width / 2,\n        };\n        const angle =\n            (Math.atan2(point.y - box_point.y, point.x - box_point.x) * 180) /\n            Math.PI;\n        this.tilt =\n            angle >= 150 || angle <= -150 || (angle > -30 && angle < 30)\n                ? JoystickTilt.Stop\n                : angle > 0\n                ? JoystickTilt.Down\n                : JoystickTilt.Up;\n        this.pan =\n            (angle >= 60 && angle <= 120) || (angle <= -60 && angle >= -120)\n                ? JoystickPan.Stop\n                : angle > 90 || angle < -90\n                ? JoystickPan.Left\n                : JoystickPan.Right;\n        this.tiltChange.emit(this.tilt);\n        this.panChange.emit(this.pan);\n    }\n}\n","import { Component, Renderer2 } from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService, RoomInput } from '../control-state.service';\nimport { JoystickPan, JoystickTilt } from './joystick.component';\n\nexport enum ZoomDirection {\n    In,\n    Out,\n    Stop,\n}\n@Component({\n    selector: 'camera-tooltip',\n    template: `\n        <div\n            class=\"my-2 bg-white shadow rounded flex flex-col\"\n            *ngIf=\"(camera_list | async)?.length; else empty_state\"\n        >\n            <mat-form-field appearance=\"outline\" class=\"m-4 h-12\">\n                <mat-select\n                    [(ngModel)]=\"active_camera\"\n                    placeholder=\"Select Camera\"\n                >\n                    <mat-option\n                        *ngFor=\"let cam of camera_list | async\"\n                        [value]=\"cam\"\n                    >\n                        {{ cam.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex relative border-t border-gray-400 mt-1\">\n                <div\n                    class=\"flex flex-col items-center border-r border-gray-400 p-4 space-y-2\"\n                >\n                    <h3 class=\"mb-2 text-xl font-medium\">Presets</h3>\n                    <ng-container *ngIf=\"presets?.length; else no_presets\">\n                        <button\n                            preset\n                            mat-button\n                            class=\"w-48\"\n                            [class.inverse]=\"preset === name\"\n                            *ngFor=\"let name of presets\"\n                            (click)=\"preset = name\"\n                        >\n                            {{ name }}\n                        </button>\n                    </ng-container>\n                    <ng-template #no_presets>\n                        <p>No presets for this camera</p>\n                    </ng-template>\n                </div>\n                <div class=\"p-4\">\n                    <h3 class=\"mb-2 text-xl font-medium\">Controls</h3>\n                    <div class=\"flex items-center space-x-2\">\n                        <joystick [(pan)]=\"pan\" [(tilt)]=\"tilt\"></joystick>\n                        <div\n                            zoom\n                            class=\"flex flex-col items-center border border-gray-600 rounded\"\n                        >\n                            <button\n                                zoom-in\n                                mat-icon-button\n                                class=\"rounded\"\n                                (mousedown)=\"startZoom('in', $event)\"\n                                (touchstart)=\"startZoom('in', $event)\"\n                                (contextmenu)=\"$event.preventDefault()\"\n                            >\n                                <app-icon>add</app-icon>\n                            </button>\n                            <div\n                                class=\"text-xs h-10 w-10 flex items-center justify-center border-t border-b border-gray-600\"\n                            >\n                                Zoom\n                            </div>\n\n                            <button\n                                zoom-out\n                                mat-icon-button\n                                class=\"rounded\"\n                                (mousedown)=\"startZoom('out', $event)\"\n                                (touchstart)=\"startZoom('out', $event)\"\n                                (contextmenu)=\"$event.preventDefault()\"\n                            >\n                                <app-icon>remove</app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div\n                    class=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\"\n                    *ngIf=\"!active_camera\"\n                >\n                    <p>Select a camera to control.</p>\n                </div>\n            </div>\n        </div>\n        <div hidden *ngIf=\"active_camera?.mod\">\n            <i\n                binding\n                [model]=\"zoom\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.mod\"\n                bind=\"zoom\"\n                exec=\"zoom\"\n            ></i>\n            <i\n                binding\n                [model]=\"pan\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.mod\"\n                bind=\"pan\"\n                exec=\"pan\"\n            ></i>\n            <i\n                binding\n                [model]=\"tilt\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.mod\"\n                bind=\"tilt\"\n                exec=\"tilt\"\n            ></i>\n            <i\n                binding\n                [(model)]=\"presets\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.mod\"\n                bind=\"presets\"\n            ></i>\n            <i\n                binding\n                [(model)]=\"preset\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.mod\"\n                bind=\"preset\"\n                exec=\"recall\"\n            ></i>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"my-2 bg-white shadow rounded flex flex-col p-8 text-center\"\n            >\n                <p>No cameras available for this system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CameraTooltipComponent extends BaseClass {\n    /** Currently active camera */\n    public active_camera: RoomInput;\n    /** List of available presets for the active camera */\n    public presets: string[] = [];\n    /** Currently active preset */\n    public preset: string = '';\n    /** Current zoom value for camera */\n    public zoom: ZoomDirection = ZoomDirection.Stop;\n    /** Current panning value for camera */\n    public pan: JoystickPan = JoystickPan.Stop;\n    /** Current tilting value for camera */\n    public tilt: JoystickTilt = JoystickTilt.Stop;\n    /** List of available cameras to select from */\n    public readonly camera_list = this._state.camera_list;\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData,\n        private _renderer: Renderer2\n    ) {\n        super();\n    }\n\n    public startZoom(dir: 'in' | 'out', e: MouseEvent | TouchEvent) {\n        const end_event = e instanceof MouseEvent ? 'mouseup' : 'touchend';\n        this.zoom = dir === 'in' ? ZoomDirection.In : ZoomDirection.Out;\n        this.subscription(\n            'on_end',\n            this._renderer.listen('window', end_event, (_) => {\n                this.unsub('on_move');\n                this.unsub('on_end');\n                this.zoom = ZoomDirection.Stop;\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService } from '../control-state.service';\n\n@Component({\n    selector: 'help-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <h3 class=\"mb-2 text-xl font-medium\">Need help?</h3>\n            <p>\n                Contact <span contact>{{ support_contact || ' your administrator' }}</span> if you\n                require <br />assisatance at\n                <a email class=\"underline\" [href]=\"'mailto:' + (support_email || 'support@place.tech')\">{{\n                    support_email || 'support@place.tech'\n                }}</a>\n                or phone\n                <a phone class=\"underline\" [href]=\"'tel:' + (support_phone || '0412345678')\">{{\n                    support_phone || '0412345678'\n                }}</a>\n            </p>\n        </div>\n    `,\n    styles: [``],\n})\nexport class HelpTooltipComponent {\n    public support_contact: string;\n\n    public support_email: string;\n\n    public support_phone: string;\n\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport {\n    ControlStateService,\n    EnvironmentSource,\n} from '../control-state.service';\n\n@Component({\n    selector: 'lighting-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <div hidden *ngIf=\"!!(lights | async)[0]\">\n                <i\n                    binding\n                    [(model)]=\"light\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    [bind]=\"'lights/' + (lights | async)[0]\"\n                ></i>\n            </div>\n            <h3 class=\"mb-2 text-xl font-medium\">Lighting Presets</h3>\n            <ng-container *ngIf=\"light?.states?.length; else empty_state\">\n                <button\n                    state\n                    mat-button\n                    class=\"w-64\"\n                    *ngFor=\"let state of light.states\"\n                    [class.inverse]=\"state === light.state\"\n                    binding\n                    onEvent=\"click\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    exec=\"environment\"\n                    [params]=\"[(lights | async)[0], state]\"\n                >\n                    {{ state }}\n                </button>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex items-center justify-center p-8\">\n                <p>No presets available for lights</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LightingTooltipComponent {\n    public light: EnvironmentSource;\n\n    public readonly lights = this._state.lights;\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService } from '../control-state.service';\n\n@Component({\n    selector: 'microphone-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <h3 class=\"mb-2 text-xl font-medium\">Microphones</h3>\n            <ng-container *ngIf=\"(mic_list | async)?.length; else empty_state\">\n                <div *ngFor=\"let mic of mic_list | async\">\n                    <label [for]=\"mic.id\">{{ mic.name }}</label>\n                    <div\n                        class=\"flex items-center space-x-2 w-64\"\n                        [attr.name]=\"mic.id\"\n                    >\n                        <button\n                            mute\n                            mat-icon-button\n                            (click)=\"mute[mic.id] = !mute[mic.id]\"\n                        >\n                            <app-icon>{{\n                                mute[mic.id]\n                                    ? 'volume_off'\n                                    : volume[mic.id] > 0\n                                    ? 'volume_up'\n                                    : 'volume_mute'\n                            }}</app-icon>\n                        </button>\n                        <mat-slider\n                            [ngModel]=\"!mute[mic.id] ? volume[mic.id] : 0\"\n                            (ngModelChange)=\"\n                                volume[mic.id] = $event; mute[mic.id] = false\n                            \"\n                            class=\"flex-1\"\n                        ></mat-slider>\n                    </div>\n                    <div hidden *ngIf=\"mic?.mod\">\n                        <i\n                            binding\n                            [sys]=\"id\"\n                            [mod]=\"mic.mod\"\n                            bind=\"volume\"\n                            exec=\"volume\"\n                            [(model)]=\"volume[mic.id]\"\n                        ></i>\n                        <i\n                            binding\n                            [sys]=\"id\"\n                            [mod]=\"mic.mod\"\n                            bind=\"mute\"\n                            exec=\"mute\"\n                            [(model)]=\"mute[mic.id]\"\n                        ></i>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex items-center justify-center p-8\">\n                <p>No microphones available for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class MicrophoneTooltipComponent {\n    /** List of microphones */\n    public readonly mic_list = this._state.mic_list;\n    /** Mapping of microphones to their volume */\n    public readonly volume = {};\n    /** Mapping of microphones to their mute state */\n    public readonly mute = {};\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService } from '../control-state.service';\n\n@Component({\n    selector: 'power-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <h3 class=\"mb-2 font-medium text-center\">\n                Are you sure you want to shutdown <br />the system?\n            </h3>\n            <button mat-button class=\"w-64\" (click)=\"shutdown()\">\n                Yes, I'm sure\n            </button>\n            <button mat-button class=\"w-64 inverse\" (click)=\"close()\">No, go back</button>\n        </div>\n    `,\n    styles: [``],\n})\nexport class PowerTooltipComponent {\n    /** Shutdown the system */\n    public readonly shutdown = () => this._state.powerOff();\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    constructor(private _state: ControlStateService, private _tooltip: CustomTooltipData) {}\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { ControlStateService } from './control-state.service';\nimport { BlindsTooltipComponent } from './ui/blinds-tooltip.component';\nimport { CameraTooltipComponent } from './ui/camera-tooltip.component';\nimport { HelpTooltipComponent } from './ui/help-tooltip.component';\nimport { LightingTooltipComponent } from './ui/lighting-tooltip.component';\nimport { MicrophoneTooltipComponent } from './ui/microphone-tooltip.component';\nimport { PowerTooltipComponent } from './ui/power-tooltip.component';\n\n@Component({\n    selector: 'topbar-header',\n    template: `\n        <div class=\"flex-1 px-4\">\n            <img logo class=\"h-10\" [src]=\"logo?.src\" alt=\"Logo\" />\n        </div>\n        <div class=\"p-4 text-lg\">{{ (system | async).name }}</div>\n        <div class=\"flex-1 p-4 flex items-center justify-end space-x-2\">\n            <div customTooltip [content]=\"cmp.lighting\" *ngIf=\"(lights_list | async)?.length\">\n                <button lights mat-icon-button>\n                    <app-icon>brightness_high</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.blinds\" *ngIf=\"(blinds_list | async)?.length\">\n                <button blinds mat-icon-button>\n                    <app-icon>unfold_more</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.mics\" *ngIf=\"(mic_list | async)?.length\">\n                <button mics mat-icon-button>\n                    <app-icon>mic</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.camera\" *ngIf=\"(camera_list | async)?.length\">\n                <button cameras mat-icon-button>\n                    <app-icon>photo_camera</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.help\">\n                <button help mat-icon-button>\n                    <app-icon>help</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.power\">\n                <button power mat-icon-button>\n                    <app-icon>power_settings_new</app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                border-bottom: 1px solid #ccc8;\n            }\n\n            img {\n                max-height: calc(100% - 1rem);\n            }\n\n            button {\n                border-radius: 0.25rem;\n                background-color: rgba(255, 255, 255, 0.15);\n            }\n        `,\n    ],\n})\nexport class TopbarHeaderComponent {\n    public readonly system = this._state.system;\n    public readonly mic_list = this._state.mic_list;\n    public readonly camera_list = this._state.camera_list;\n    public readonly lights_list = this._state.lights;\n    public readonly blinds_list = this._state.blinds;\n\n    public readonly cmp = {\n        lighting: LightingTooltipComponent,\n        power: PowerTooltipComponent,\n        help: HelpTooltipComponent,\n        blinds: BlindsTooltipComponent,\n        camera: CameraTooltipComponent,\n        mics: MicrophoneTooltipComponent\n    };\n\n    public readonly powerOff = () => this._state.powerOff();\n\n    public get logo() {\n        return this._settings.get('app.logo_dark') || {};\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: ControlStateService\n    ) {}\n}\n","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { unique } from '@placeos/common';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ControlStateService, RoomInput } from '../control-state.service';\n\n@Component({\n    selector: 'source-select',\n    template: `\n        <div class=\"flex flex-col items-center text-black p-4\">\n            <h3 class=\"font-medium text-xl mb-2\">\n                Select input source for\n                {{ (details | async)?.name || '= No Name =' }}\n            </h3>\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"flex flex-wrap divide divide-gray-200\"\n                    *ngIf=\"(input_types | async)?.length; else empty_state\"\n                >\n                    <div\n                        group\n                        *ngFor=\"let type of input_types | async\"\n                        class=\"flex flex-col p-2 space-y-2\"\n                    >\n                        <h4 class=\"text-center underline\">{{ type }}</h4>\n                        <button\n                            mat-button\n                            source\n                            class=\"w-48\"\n                            [class.inverse]=\"\n                                input.id === (details | async)?.source\n                            \"\n                            *ngFor=\"let input of (input_map | async)[type]\"\n                            (click)=\"selectSource(input)\"\n                        >\n                            <div class=\"truncate\">{{ input.name }}</div>\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center p-8 m-auto\">\n                <p>\n                    No input sources available for the selected output({{\n                        details?.name || 'Unknown'\n                    }})\n                </p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 m-auto\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Switching input source...</p>\n            </div>\n        </ng-template>\n    `\n})\nexport class SourceSelectComponent implements OnChanges {\n    // ID of the selected output\n    @Input() public output: string;\n    /** Emitter for changes to the selected input source */\n    @Output() public source = new EventEmitter();\n    /** Whether routing is loading */\n    public loading: boolean;\n    // Store for the ID of the selected output\n    public readonly output_id = new BehaviorSubject('');\n    // Name of the currently selected output\n    public readonly details = combineLatest([\n        this.output_id,\n        this._state.output_list,\n    ]).pipe(map(([id, list]) => list.find((_) => _.id === id)));\n    /** List of inputs available for selected output */\n    public readonly input_list = combineLatest([\n        this.output_id,\n        this._state.input_list,\n    ]).pipe(\n        map(([id, list]) =>\n            list.filter((_) => !_.outputs || _.outputs.includes(id))\n        )\n    );\n    /** Available types of inputs */\n    public readonly input_types = this.input_list.pipe(\n        map((list) => unique(list.map((_) => _.type)))\n    );\n    /** Mapping of input types to inputs */\n    public readonly input_map = combineLatest([\n        this.input_list,\n        this.input_types,\n    ]).pipe(\n        map(([list, types]) =>\n            types.reduce((m, t) => {\n                m[t] = list.filter((_) => _.type === t);\n                return m;\n            }, {})\n        )\n    );\n\n    constructor(private _state: ControlStateService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.output) {\n            this.output_id.next(this.output || '');\n        }\n    }\n\n    public async selectSource(input: RoomInput) {\n        this.loading = true;\n        await this._state.setRoute(input.id, this.output);\n        this.loading = false;\n        this.source.emit(input);\n    }\n}\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ControlStateService, RoomOutput } from '../control-state.service';\n\nconst ICON_MAP = {\n    Display: 'deskotp_windows',\n    PC: 'desktop_windows',\n    Laptop: 'laptop_chromebook',\n    Camera: 'videocam',\n    TV: 'tv',\n};\n\n@Component({\n    selector: 'output-display',\n    template: `\n        <div class=\"p-4 m-2 bg-white rounded shadow text-black\">\n            <div\n                view\n                matRipple\n                class=\"h-48 border border-gray-300 relative rounded mb-2 flex flex-col items-center justify-center space-y-2\"\n                [class.opacity-60]=\"!(input | async)\"\n                [class.bg-gray-300]=\"!(input | async)\"\n                (click)=\"switchSource()\"\n            >\n                <div\n                    class=\"absolute top-1 left-1 bg-secondary text-white shadow px-2 py-1 rounded\"\n                >\n                    {{ item?.name }}\n                </div>\n                <app-icon class=\"text-7xl\">{{\n                    icons[(input | async)?.type] || 'add_to_queue'\n                }}</app-icon>\n                <p class=\"font-medium\">\n                    {{\n                        (input | async)?.name || 'Click to select input source'\n                    }}\n                </p>\n                <p class=\"text-xs\">\n                    <span *ngIf=\"(input | async)?.name\" class=\"opacity-50\">\n                        Click to switch input source\n                    </span>\n                </p>\n            </div>\n            <div class=\"flex items-center space-x-2 w-full\">\n                <button mat-icon-button (click)=\"mute = !mute\">\n                    <app-icon>{{\n                        mute\n                            ? 'volume_off'\n                            : volume > 0\n                            ? 'volume_up'\n                            : 'volume_mute'\n                    }}</app-icon>\n                </button>\n                <mat-slider\n                    [ngModel]=\"!mute ? volume : 0\"\n                    (ngModelChange)=\"volume = $event; mute = false\"\n                    class=\"flex-1\"\n                ></mat-slider>\n            </div>\n        </div>\n        <div *ngIf=\"item?.mod\">\n            <i\n                binding\n                [sys]=\"id\"\n                [mod]=\"item.mod\"\n                bind=\"volume\"\n                exec=\"volume\"\n                [(model)]=\"volume\"\n            ></i>\n            <i\n                binding\n                [sys]=\"id\"\n                [mod]=\"item.mod\"\n                bind=\"mute\"\n                exec=\"mute\"\n                [(model)]=\"mute\"\n            ></i>\n        </div>\n    `,\n    styles: [\n        `\n            [view] {\n                width: 28vw;\n            }\n        `,\n    ],\n})\nexport class OutputDisplayComponent {\n    @Input() public item: RoomOutput;\n    /** Current volume level for output */\n    public volume: number;\n    /** Current mute state of the output */\n    public mute: boolean;\n    /** ID of the input associated with the displayed output */\n    private _input = new BehaviorSubject('');\n    /** Details of the associated input */\n    public readonly input = combineLatest([\n        this._input,\n        this._state.input_list,\n    ]).pipe(map(([id, list]) => list.find((_) => _.id === id)));\n\n    public readonly icons = ICON_MAP;\n\n    public readonly switchSource = () => this._state.switchSource(this.item.id);\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(private _state: ControlStateService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.item) {\n            this._input.next(this.item?.source || '');\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { ControlStateService } from './control-state.service';\n\n@Component({\n    selector: 'control-advanced-view',\n    template: `\n        <div\n            class=\"w-full flex-1 h-1/2 flex items-center justify-center flex-wrap\"\n            *ngIf=\"(outputs | async)?.length; else empty_state\"\n        >\n            <output-display\n                *ngFor=\"\n                    let output of outputs\n                        | async\n                        | slice: page * 6:(page + 1) * 6\n                \"\n                [item]=\"output\"\n            ></output-display>\n        </div>\n        <div\n            class=\"w-full h-12 flex items-center justify-center px-2 pb-2 space-x-2\"\n            *ngIf=\"(page_count | async)?.length > 1\"\n        >\n            <button\n                mat-icon-button\n                *ngFor=\"let idx of page_count | async; let i = index\"\n                [class.bg-primary]=\"page === i\"\n                [class.text-black]=\"page !== i\"\n                [class.bg-gray-100]=\"page !== i\"\n                (click)=\"page = i\"\n            >\n                {{ i + 1 }}\n            </button>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No output devices setup for this system.</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                width: 100%;\n                height: 100%;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class ControlAdvancedViewComponent {\n    public page = 0;\n\n    public readonly outputs = this._state.output_list.pipe(map((_) => _ || []));\n\n    public readonly page_count = this.outputs.pipe(\n        map((_) => new Array(Math.floor(_.length / 6) + 1).fill(0))\n    );\n\n    constructor(private _state: ControlStateService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[control-page-view]',\n    template: `\n        <ng-container [ngSwitch]=\"view\">\n            <source-select\n                *ngSwitchCase=\"'basic'\"\n                output=\"'ALL'\"\n            ></source-select>\n            <control-advanced-view *ngSwitchDefault></control-advanced-view>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                flex: 1;\n                height: 50%;\n                overflow: hidden;\n                background: #f0f0f0;\n                color: rgba(0,0,0,.85);\n            }\n        `,\n    ],\n})\nexport class ControlPageViewComponent {\n    public view: 'basic' | 'advanced';\n}\n","import { Pipe } from \"@angular/core\";\n\nexport function padLength(value: number | string, length: number = 2): string {\n    let str = `${value}`;\n    while (str.length < length) str = `0${str}`;\n    return str;\n}\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe {\n    public transform(length: number): string {\n        let str = `${padLength(Math.floor(length / 60) % 60)}:${padLength(length % 60)}`;\n        const hours = Math.floor(length / 60 / 60);\n        if (hours > 0) {\n            str = `${padLength(hours)}:${str}`;\n        }\n        return str;\n    }\n}\n","import { Component } from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport { map } from 'rxjs/operators';\nimport { ControlStateService } from './control-state.service';\n\n@Component({\n    selector: 'control-status-bar',\n    template: `\n        <div\n            recording\n            *ngIf=\"!!(capture_mod | async)\"\n            class=\"text-xs divide-x divide-gray-100 text-white flex items-center\"\n        >\n            <div hidden>\n                <i\n                    binding\n                    [(model)]=\"rec_status\"\n                    [sys]=\"id\"\n                    [mod]=\"(capture_mod | async)?.mod\"\n                    bind=\"status\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_title\"\n                    [sys]=\"id\"\n                    [mod]=\"(capture_mod | async)?.mod\"\n                    bind=\"title\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_remaining\"\n                    [sys]=\"id\"\n                    [mod]=\"(capture_mod | async)?.mod\"\n                    bind=\"remaining\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_current\"\n                    [sys]=\"id\"\n                    [mod]=\"(capture_mod | async)?.mod\"\n                    bind=\"current\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_next\"\n                    [sys]=\"id\"\n                    [mod]=\"(capture_mod | async)?.mod\"\n                    bind=\"current\"\n                ></i>\n            </div>\n            <div\n                class=\"h-12 p-2 w-24 flex items-center justify-center text-center\"\n            >\n                {{ rec_title || '~Unnamed Recording~' }}\n            </div>\n            <div class=\"h-12 w-12 flex items-center justify-center\">\n                <button mat-icon-button mute class=\"rounded-none\">\n                    <app-icon>fiber_manual_record</app-icon>\n                </button>\n            </div>\n            <div class=\"h-12 w-12 flex items-center justify-center\">\n                <button\n                    [attr.place-action]=\"\n                        rec_status === 'playing' ? 'pause' : 'start'\n                    \"\n                    mat-icon-button\n                    class=\"rounded-none\"\n                    binding\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    onEvent=\"click\"\n                    [exec]=\"rec_status === 'playing' ? 'pause' : 'start'\"\n                >\n                    <app-icon>{{\n                        rec_status === 'playing' ? 'pause' : 'play_arrow'\n                    }}</app-icon>\n                </button>\n            </div>\n            <div class=\"h-12 flex flex-col p-2 w-32\">\n                <div\n                    class=\"p-2 rounded uppercase text-center\"\n                    [class.bg-error]=\"rec_status === 'playing'\"\n                    [class.bg-pending]=\"rec_status === 'paused'\"\n                    [class.bg-gray-400]=\"rec_status === 'stopped'\"\n                >\n                    {{\n                        rec_status === 'playing'\n                            ? 'Recording'\n                            : rec_status === 'paused'\n                            ? 'Paused'\n                            : 'Idle'\n                    }}\n                </div>\n            </div>\n            <div class=\"h-12 p-2\">\n                <label>Remaining</label>\n                <div class=\"\">{{ rec_remaining | duration }}</div>\n            </div>\n            <div class=\"h-12 p-2\">\n                <label>Next Recording</label>\n                <div class=\"\">{{ rec_current | duration }}</div>\n            </div>\n        </div>\n        <div class=\"flex-1\"></div>\n        <div class=\"flex items-center space-x-2 w-64 py-2 px-4\">\n            <button mat-icon-button (click)=\"mute = !mute\">\n                <app-icon>{{\n                    mute\n                        ? 'volume_off'\n                        : (volume | async) > 0\n                        ? 'volume_up'\n                        : 'volume_mute'\n                }}</app-icon>\n            </button>\n            <mat-slider\n                white\n                [ngModel]=\"!mute ? (volume | async) : 0\"\n                (ngModelChange)=\"setVolume($event); mute = false\"\n                class=\"flex-1\"\n            ></mat-slider>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                border-bottom: 1px solid #ccc8;\n                height: 3rem;\n                overflow: hidden;\n            }\n        `,\n    ],\n})\nexport class ControlStatusBarComponent extends BaseClass {\n    /** Current global volume for system */\n    public readonly volume = this._state.volume;\n    /** Details of the active system */\n    public readonly system = this._state.system;\n\n    public readonly capture_mod = this._state.capture_list.pipe(\n        map((_) => _[0])\n    );\n\n    public mute: boolean;\n    public rec_status: string;\n    public rec_title: string;\n\n    public readonly setVolume = (v) => this._state.setVolume(v);\n\n    public get id() {\n        return this._state.id;\n    }\n\n    constructor(private _state: ControlStateService) {\n        super();\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BaseClass } from '@placeos/common';\n\nimport { ControlStateService } from './control-state.service';\n\n@Component({\n    selector: 'app-control-main-view',\n    template: `\n        <ng-container *ngIf=\"(system | async).connected; else load_state\">\n            <div\n                *ngIf=\"(system | async).active; else power_off_state\"\n                class=\"absolute inset-0 flex flex-col\"\n            >\n                <topbar-header></topbar-header>\n                <div control-page-view></div>\n                <control-status-bar></control-status-bar>\n            </div>\n        </ng-container>\n        <ng-template #power_off_state>\n            <div\n                name=\"splash\"\n                class=\"absolute inset-0 text-white flex flex-col items-center justify-center\"\n                (click)=\"powerOn()\"\n                (touchend)=\"powerOn()\"\n            >\n                <h2 class=\"font-light text-4xl mb-4\">Touch to Start</h2>\n                <p class=\"text-lg\">{{ (system | async).name }}</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                name=\"loader\"\n                class=\"absolute inset-0 bg-white text-black flex flex-col items-center justify-center\"\n            >\n                <mat-spinner class=\"mb-4\" [diameter]=\"64\"></mat-spinner>\n                <div class=\"text-2xl my-4\">\n                    Connecting to system(<em>{{ id }}</em\n                    >)...\n                </div>\n                <div class=\"text-base\"></div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                background-color: #000051;\n                color: #fff;\n            }\n\n            [name='loader'] {\n                background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 304 304' width='304' height='304'%3E%3Cpath fill='%23000' fill-opacity='0.05' d='M44.1 224a5 5 0 1 1 0 2H0v-2h44.1zm160 48a5 5 0 1 1 0 2H82v-2h122.1zm57.8-46a5 5 0 1 1 0-2H304v2h-42.1zm0 16a5 5 0 1 1 0-2H304v2h-42.1zm6.2-114a5 5 0 1 1 0 2h-86.2a5 5 0 1 1 0-2h86.2zm-256-48a5 5 0 1 1 0 2H0v-2h12.1zm185.8 34a5 5 0 1 1 0-2h86.2a5 5 0 1 1 0 2h-86.2zM258 12.1a5 5 0 1 1-2 0V0h2v12.1zm-64 208a5 5 0 1 1-2 0v-54.2a5 5 0 1 1 2 0v54.2zm48-198.2V80h62v2h-64V21.9a5 5 0 1 1 2 0zm16 16V64h46v2h-48V37.9a5 5 0 1 1 2 0zm-128 96V208h16v12.1a5 5 0 1 1-2 0V210h-16v-76.1a5 5 0 1 1 2 0zm-5.9-21.9a5 5 0 1 1 0 2H114v48H85.9a5 5 0 1 1 0-2H112v-48h12.1zm-6.2 130a5 5 0 1 1 0-2H176v-74.1a5 5 0 1 1 2 0V242h-60.1zm-16-64a5 5 0 1 1 0-2H114v48h10.1a5 5 0 1 1 0 2H112v-48h-10.1zM66 284.1a5 5 0 1 1-2 0V274H50v30h-2v-32h18v12.1zM236.1 176a5 5 0 1 1 0 2H226v94h48v32h-2v-30h-48v-98h12.1zm25.8-30a5 5 0 1 1 0-2H274v44.1a5 5 0 1 1-2 0V146h-10.1zm-64 96a5 5 0 1 1 0-2H208v-80h16v-14h-42.1a5 5 0 1 1 0-2H226v18h-16v80h-12.1zm86.2-210a5 5 0 1 1 0 2H272V0h2v32h10.1zM98 101.9V146H53.9a5 5 0 1 1 0-2H96v-42.1a5 5 0 1 1 2 0zM53.9 34a5 5 0 1 1 0-2H80V0h2v34H53.9zm60.1 3.9V66H82v64H69.9a5 5 0 1 1 0-2H80V64h32V37.9a5 5 0 1 1 2 0zM101.9 82a5 5 0 1 1 0-2H128V37.9a5 5 0 1 1 2 0V82h-28.1zm16-64a5 5 0 1 1 0-2H146v44.1a5 5 0 1 1-2 0V18h-26.1zm102.2 270a5 5 0 1 1 0 2H98v14h-2v-16h124.1zM242 149.9V160h16v34h-16v62h48v48h-2v-46h-48v-66h16v-30h-16v-12.1a5 5 0 1 1 2 0zM53.9 18a5 5 0 1 1 0-2H64V2H48V0h18v18H53.9zm112 32a5 5 0 1 1 0-2H192V0h50v2h-48v48h-28.1zm-48-48a5 5 0 0 1-9.8-2h2.07a3 3 0 1 0 5.66 0H178v34h-18V21.9a5 5 0 1 1 2 0V32h14V2h-58.1zm0 96a5 5 0 1 1 0-2H137l32-32h39V21.9a5 5 0 1 1 2 0V66h-40.17l-32 32H117.9zm28.1 90.1a5 5 0 1 1-2 0v-76.51L175.59 80H224V21.9a5 5 0 1 1 2 0V82h-49.59L146 112.41v75.69zm16 32a5 5 0 1 1-2 0v-99.51L184.59 96H300.1a5 5 0 0 1 3.9-3.9v2.07a3 3 0 0 0 0 5.66v2.07a5 5 0 0 1-3.9-3.9H185.41L162 121.41v98.69zm-144-64a5 5 0 1 1-2 0v-3.51l48-48V48h32V0h2v50H66v55.41l-48 48v2.69zM50 53.9v43.51l-48 48V208h26.1a5 5 0 1 1 0 2H0v-65.41l48-48V53.9a5 5 0 1 1 2 0zm-16 16V89.41l-34 34v-2.82l32-32V69.9a5 5 0 1 1 2 0zM12.1 32a5 5 0 1 1 0 2H9.41L0 43.41V40.6L8.59 32h3.51zm265.8 18a5 5 0 1 1 0-2h18.69l7.41-7.41v2.82L297.41 50H277.9zm-16 160a5 5 0 1 1 0-2H288v-71.41l16-16v2.82l-14 14V210h-28.1zm-208 32a5 5 0 1 1 0-2H64v-22.59L40.59 194H21.9a5 5 0 1 1 0-2H41.41L66 216.59V242H53.9zm150.2 14a5 5 0 1 1 0 2H96v-56.6L56.6 162H37.9a5 5 0 1 1 0-2h19.5L98 200.6V256h106.1zm-150.2 2a5 5 0 1 1 0-2H80v-46.59L48.59 178H21.9a5 5 0 1 1 0-2H49.41L82 208.59V258H53.9zM34 39.8v1.61L9.41 66H0v-2h8.59L32 40.59V0h2v39.8zM2 300.1a5 5 0 0 1 3.9 3.9H3.83A3 3 0 0 0 0 302.17V256h18v48h-2v-46H2v42.1zM34 241v63h-2v-62H0v-2h34v1zM17 18H0v-2h16V0h2v18h-1zm273-2h14v2h-16V0h2v16zm-32 273v15h-2v-14h-14v14h-2v-16h18v1zM0 92.1A5.02 5.02 0 0 1 6 97a5 5 0 0 1-6 4.9v-2.07a3 3 0 1 0 0-5.66V92.1zM80 272h2v32h-2v-32zm37.9 32h-2.07a3 3 0 0 0-5.66 0h-2.07a5 5 0 0 1 9.8 0zM5.9 0A5.02 5.02 0 0 1 0 5.9V3.83A3 3 0 0 0 3.83 0H5.9zm294.2 0h2.07A3 3 0 0 0 304 3.83V5.9a5 5 0 0 1-3.9-5.9zm3.9 300.1v2.07a3 3 0 0 0-1.83 1.83h-2.07a5 5 0 0 1 3.9-3.9zM97 100a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-48 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 96a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-144a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-96 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm96 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-32 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM49 36a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-32 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM33 68a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 240a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm80-176a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm112 176a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM17 180a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM17 84a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6z'%3E%3C/path%3E%3C/svg%3E\");\n            }\n\n            [name='splash'] {\n                animation: crossfade 10s linear;\n                animation-iteration-count: infinite;\n            }\n        `,\n    ],\n})\nexport class ControlMainViewComponent extends BaseClass {\n    public readonly system = this._state.system;\n\n    public readonly powerOn = () => this._state.powerOn();\n    public get id() {\n        return this._state.id;\n    }\n\n    constructor(\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _state: ControlStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((params) =>\n                params.has('system')\n                    ? this._state.setID(params.get('system'))\n                    : ''\n            )\n        );\n        this.timeout('init', () =>\n            !this._state.id ? this._router.navigate(['/bootstrap']) : ''\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BootstrapComponent } from './bootstrap.component';\nimport { ControlMainViewComponent } from './main-view.component';\n\nconst routes: Routes = [\n    {\n        path: 'bootstrap',\n        component: BootstrapComponent,\n    },\n    {\n        path: 'panel/:system',\n        component: ControlMainViewComponent,\n    },\n    { path: '**', redirectTo: 'bootstrap' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.visit_expected) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), []);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/zones',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.tags === 'org') {\n            return MOCK_ORGS;\n        } else if (request.query_params.tags === 'building') {\n            return MOCK_BUILDINGS;\n        } else if (request.query_params.tags === 'level') {\n            return MOCK_LEVELS;\n        }\n        throw { status: 404, message: 'Zones not found' };\n    },\n});\n\nfunction padString(str: string | number, length: number = 5) {\n    str = `${str}`;\n    while (str.length < length) str = `0${str}`;\n    return str;\n}\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.name === 'bindings') {\n            return {\n                bindings: {\n                    details: {\n                        area_management: 'space-0',\n                        location_services: 'space-0',\n                    },\n                },\n            };\n        }\n        if (request.query_params.name === 'catering') {\n            return {\n                catering: {\n                    details: MOCK_MENU,\n                },\n            };\n        }\n        if (request.query_params.name === 'desks') {\n            const parts = request.route_params.id.split('-');\n            const id = parts[parts.length - 1];\n            return generateMockDeskMetadata(id);\n        }\n        if (\n            MOCK_METADATA[request.route_params.id] &&\n            MOCK_METADATA[request.route_params.id][request.query_params.name]\n        ) {\n            return MOCK_METADATA[request.route_params.id];\n        } else if (\n            MOCK_METADATA[request.route_params.id] &&\n            !request.query_params.name\n        ) {\n            return MOCK_METADATA[request.route_params.id] || {};\n        }\n        return {};\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        if (!MOCK_METADATA[request.route_params.id])\n            MOCK_METADATA[request.route_params.id] = {};\n        MOCK_METADATA[request.route_params.id][request.body.name] =\n            request.body;\n    },\n});\n\nconst DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\nfunction generateMockDeskMetadata(id: string) {\n    return {\n        desks: {\n            details: new Array(30).fill(0).map((_, idx) => ({\n                id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                bookable: predictableRandomInt(9999) % 4 !== 0,\n                group: '',\n                features: DESK_FEATURES.filter(\n                    (_) => predictableRandomInt(99999) % 3 === 0\n                ),\n            })),\n        },\n    };\n}\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id/children',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const zone = MOCK_BUILDINGS.find(\n            (_) => _.id === request.route_params.id\n        );\n        if (!zone)\n            throw {\n                status: 404,\n                message: `Unable to find zone with id \"${request.route_params.id}\"`,\n            };\n        return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map((lvl) => {\n            const parts = lvl.id.split('-');\n            const id = parts[parts.length - 1];\n            return {\n                zone: lvl,\n                metadata: generateMockDeskMetadata(id),\n            };\n        });\n    },\n});\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/users/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.id === 'current') {\n            return ACTIVE_USER;\n        }\n        const person = MOCK_STAFF.find(user => user.email === request.route_params.id);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_STAFF.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const id = decodeURIComponent(request.route_params.id);\n        const person = MOCK_STAFF.find(user => user.email === id);\n        if (person) {\n            return {\n                ...person,\n                location: generateLocation()\n            };\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_GUESTS.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const person = MOCK_GUESTS.find(user => user.email === request.route_params.email);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email/meetings',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.email) {\n            const email = request.route_params.email.toLowerCase();\n            const events = MOCK_EVENTS.filter(\n                (event) => event.attendees.find(user => user.email.toLowerCase() === email)\n            );\n            return events;\n        }\n        throw { status: 404, message: `Unable to find meetings with guest with email ${request.route_params.email}` };\n    },\n});\n\n\n\nconst LOCATION_TYPES = ['meeting', 'desk_id', 'laptop', 'mobile', 'geo', 'none'];\n\nfunction generateLocation() {\n    const type = LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n    const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n    const level_spaces = MOCK_SPACES.filter(s => s.zones.includes(level.id));\n    const space = level_spaces[predictableRandomInt(level_spaces.length)] || {};\n    const location: HashMap = {};\n    switch (type) {\n        case 'meeting':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                system: space.id,\n                map_id: space.map_id,\n                event_id: ''\n            };\n            break;\n        case 'desk_id':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                map_id: space.map_id,\n                checked_in: dayjs().unix()\n            };\n            break;\n        case 'laptop':\n        case 'mobile':\n            location[type] = {\n                building: level.parent_id,\n                level: level.id,\n                x: +predictableRandomInt(10000),\n                y: +predictableRandomInt(5000),\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n        case 'geo':\n            location.geo = {\n                lat: predictableRandomInt(180) - 90,\n                lon: predictableRandomInt(360) - 180,\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n    }\n    return location;\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $powerup() {\n        console.log('Power On');\n        this.active = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.active = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nMOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/systems',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        return MOCK_SPACES;\n    }\n});\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        let events = MOCK_EVENTS;\n        if (!_.query_params.zone_ids) {\n            events = events.filter(\n                (event) =>\n                    !!event.attendees.find(\n                        (user) => user.email === ACTIVE_USER.email\n                    )\n            );\n        }\n        if (_.query_params.period_start) {\n            events = events.filter((e) =>\n                timePeriodsIntersect(\n                    _.query_params.period_start,\n                    _.query_params.period_end,\n                    e.event_start,\n                    e.event_end\n                )\n            );\n        }\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = {\n            ...request.body,\n            id: `-cal-event-${predictableRandomInt(999)}`,\n        };\n        new_event.attendees = [\n            MOCK_STAFF.find((_) => _.email === new_event.host),\n            ...(new_event.attendees || []),\n        ];\n        new_event.attendees.forEach((user) => {\n            if (user.zones) user.resource = true;\n        });\n\n        if (new_event.system) {\n            new_event.attendees = [\n                ...(new_event.attendees || []),\n                { ...new_event.system, resource: true },\n            ];\n        }\n        MOCK_EVENTS.push(new_event);\n        return new_event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const item = MOCK_EVENTS.find(\n            (event) => event.id === request.route_params.id\n        );\n        if (item) {\n            return item;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'DELETE',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex(\n            (event) => event.id === request.route_params.id\n        );\n        if (index > 0) {\n            if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                MOCK_EVENTS.splice(index, 1);\n            } else {\n                const user = MOCK_EVENTS[index].attendees.find((_) => _.email === ACTIVE_USER.email);\n                user.response_status = 'declined';\n            }\n            return;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex(\n            (event) => event.id === request.route_params.id\n        );\n        if (index >= 0) {\n            return MOCK_EVENTS.splice(index, 1, request.body);\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id/guests/:email/checkin',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const event = MOCK_EVENTS.find(\n            (event) => event.id === request.route_params.id\n        );\n        if (event) {\n            const checked_in = (event.extension_data as any).checked_in || [];\n            (event.extension_data as any).checked_in = checked_in.concat([\n                request.route_params.email,\n            ]);\n            return event;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { timePeriodsIntersect } from '@placeos/common';\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => [],\n});\n\nconst handleSpaceAvailability = (request) => {\n    const start = +request.query_params.period_start;\n    const end = +request.query_params.period_end;\n    const zones = (request.query_params.zone_ids || '')\n        .split(',')\n        .filter((i) => !!i);\n    const systems = (request.query_params.system_ids || '')\n        .split(',')\n        .filter((i) => !!i);\n\n    const spaces = MOCK_SPACES.filter((space) =>\n        zones.length\n            ? zones.reduce(\n                  (has, zone) => has && space.zones.includes(zone),\n                  true\n              )\n            : systems.length\n            ? systems.includes(space.id)\n            : true\n    ).filter((space) => {\n        const bookings = MOCK_EVENTS.filter((event) =>\n            event.attendees.find((user) => user.id === space.id)\n        );\n        for (const event of bookings) {\n            if (\n                timePeriodsIntersect(\n                    start,\n                    end,\n                    event.event_start,\n                    event.event_end\n                )\n            )\n                return false;\n        }\n        return true;\n    });\n    return spaces;\n};\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/availability',\n    metadata: {},\n    method: 'GET',\n    callback: (request) =>\n        handleSpaceAvailability(request).map((_) => ({\n            resource: _,\n        })),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/free_busy',\n    metadata: {},\n    method: 'GET',\n    callback: (request) =>\n        handleSpaceAvailability(request).map((_) => ({\n            resource: _,\n        })),\n});\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const events = MOCK_BOOKINGS.filter(\n            (event) =>\n                timePeriodsIntersect(\n                    _.query_params.period_start,\n                    _.query_params.period_end,\n                    event.booking_start,\n                    event.booking_end\n                ) && event.type === _.query_params.type\n        );\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n        if (!event)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${_.route_params.id}`,\n            };\n        return event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = {\n            ...request.body,\n            id: `-booking-${predictableRandomInt(999)}`,\n        };\n        MOCK_BOOKINGS.push(new_event);\n        return new_event;\n    },\n});\n\nconst updateBooking = (id, data) => {\n    const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n    if (index < 0)\n        throw {\n            status: 404,\n            message: `Unable to find booking with ID ${id}`,\n        };\n    const new_event = { ...data };\n    MOCK_BOOKINGS.splice(index, 1, new_event);\n    return new_event;\n};\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'PUT',\n    callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/approve',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            approved: true,\n            rejected: false,\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/reject',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            approved: false,\n            rejected: true,\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/check_in',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            checked_in: req.query_params.state === 'true',\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'DELETE',\n    callback: (req) => {\n        const index = MOCK_BOOKINGS.findIndex(\n            (e) => e.id === req.route_params.id\n        );\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${req.route_params.id}`,\n            };\n        MOCK_BOOKINGS.splice(index, 1);\n        return;\n    },\n});\n","import { log } from '@placeos/common';\n\nimport * as ZONE_MOCKS from './lib/api/zones.mock';\nimport * as USER_MOCKS from './lib/api/users.mock';\nimport * as SYSTEM_MOCKS from './lib/api/systems.mock';\nimport * as EVENT_MOCKS from './lib/api/events.mock';\nimport * as CALENDAR_MOCKS from './lib/api/calendars.mock';\nimport * as BOOKING_MOCKS from './lib/api/bookings.mock';\n\nimport * as BINDING_MOCKS from './lib/systems-bindings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n    BINDING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        console.log('MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 5 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                currentUser()?.email?.split('@')[1]\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","export const environment = {\n    production: true,\n};\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSliderModule } from '@angular/material/slider';\n\nimport { ComponentsModule } from '@placeos/components';\nimport { LightingTooltipComponent } from './lighting-tooltip.component';\nimport { PowerTooltipComponent } from './power-tooltip.component';\nimport { HelpTooltipComponent } from './help-tooltip.component';\nimport { BlindsTooltipComponent } from './blinds-tooltip.component';\nimport { CameraTooltipComponent } from './camera-tooltip.component';\nimport { MicrophoneTooltipComponent } from './microphone-tooltip.component';\nimport { SourceSelectComponent } from './source-select.component';\nimport { SourceSelectModalComponent } from './source-select-modal.component';\nimport { OutputDisplayComponent } from './output-display.component';\nimport { JoystickComponent } from './joystick.component';\nimport { DurationPipe } from './duration.pipe';\n\nconst COMPONENTS: Type<any>[] = [\n    LightingTooltipComponent,\n    PowerTooltipComponent,\n    HelpTooltipComponent,\n    BlindsTooltipComponent,\n    CameraTooltipComponent,\n    MicrophoneTooltipComponent,\n    SourceSelectComponent,\n    SourceSelectModalComponent,\n    OutputDisplayComponent,\n    JoystickComponent,\n\n    DurationPipe\n];\n\nconst MAT_MODULES: any[] = [\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatSliderModule\n];\n\nconst ANGULAR_MODULES: any[] = [FormsModule, ReactiveFormsModule];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        ...MAT_MODULES,\n        ...ANGULAR_MODULES,\n    ],\n    exports: [\n        ComponentsModule,\n        ...COMPONENTS,\n        ...MAT_MODULES,\n        ...ANGULAR_MODULES,\n    ],\n})\nexport class UIModule {}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSliderModule } from '@angular/material/slider';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from '../../../../libs/components/src/lib/app.component';\nimport { environment } from '../environments/environment';\nimport { UIModule } from './ui/ui.module';\nimport { BootstrapComponent } from './bootstrap.component';\nimport { ControlMainViewComponent } from './main-view.component';\nimport { TopbarHeaderComponent } from './topbar-header.component';\nimport { ControlPageViewComponent } from './page-view.component';\nimport { ControlStatusBarComponent } from './status-bar.component';\nimport { ControlAdvancedViewComponent } from './advanced-view.component';\n\nimport * as Sentry from '@sentry/angular';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        BootstrapComponent,\n        ControlMainViewComponent,\n        TopbarHeaderComponent,\n        ControlPageViewComponent,\n        ControlStatusBarComponent,\n        ControlAdvancedViewComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        UIModule,\n        MatSliderModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"],"sourceRoot":"webpack:///"}