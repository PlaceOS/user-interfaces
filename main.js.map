{"version":3,"sources":["./apps/map-kiosk/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./libs/common/src/lib/base.class.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/common/src/lib/general.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/map-kiosk/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/angular-animations.ts","./libs/users/src/lib/user.utilities.ts","./libs/users/src/lib/user.class.ts","./libs/common/src/lib/user-state.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/organisation/src/lib/desk.class.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/unauthorised.component.ts","./libs/components/src/lib/components.module.ts","./libs/form-fields/src/lib/duration-field.component.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/events/src/lib/helpers.ts","./libs/events/src/lib/event.class.ts","./libs/form-fields/src/lib/form-fields.module.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/explore/src/lib/explore-state.service.ts","./libs/events/src/lib/events.fn.ts","./libs/events/src/lib/validators.ts","./libs/explore/src/lib/explore-space-info.component.ts","./libs/events/src/lib/utilities.ts","./libs/explore/src/lib/explore-booking-modal.component.ts","./libs/explore/src/lib/explore-spaces.service.ts","./libs/explore/src/lib/explore-zones.service.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/explore/src/lib/explore-device-info.component.ts","./libs/explore/src/lib/explore-desk-info.component.ts","./libs/explore/src/lib/explore-desks.service.ts","./libs/explore/src/lib/explore-zoom-control.component.ts","./libs/explore/src/lib/explore-search.service.ts","./libs/users/src/lib/staff.fn.ts","./libs/explore/src/lib/explore-search.component.ts","./libs/explore/src/lib/explore.module.ts","./apps/map-kiosk/src/app/bootstrap.component.ts","./apps/map-kiosk/src/app/footer-menu.component.ts","./apps/map-kiosk/src/app/desk-booking.component.ts","./apps/map-kiosk/src/app/explore-level-select.component.ts","./apps/map-kiosk/src/app/app-routing.module.ts","./apps/map-kiosk/src/app/explore.component.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/mocks/src/index.ts","./libs/components/src/lib/app.component.ts","./libs/common/src/lib/placeos.ts","./apps/map-kiosk/src/app/app.module.ts","./apps/map-kiosk/src/environments/environment.prod.ts","./apps/map-kiosk/src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","BaseClass","_timers","_intervals","_subscriptions","_initialised","initialised","this","asObservable","getValue","destroy","key","clearTimeout","clearInterval","unsub","name","fn","delay","Function","setTimeout","setInterval","Subscription","unsubscribe","contains","subs","Object","filter","k","includes","CONFIRM_METADATA","height","width","maxHeight","maxWidth","ConfirmModalComponent","_dialog_ref","_data","event","title","content","confirm_text","cancel_text","icon","class","disableClose","enableClose","emit","reason","_app_name","setAppName","log","type","msg","args","stream","force","app_name","window","debug","colors","console","getItemWithKeys","map","shift","length","array","el","pos","arr","indexOf","find","i","randomInt","ceil","floor","Math","random","start1","end1","start2","end2","seed","str","h","imul","charCodeAt","xmur3","rand","a","b","c","d","t","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","addEventListener","mapKey","toLowerCase","last_down","next","preventDefault","combo","combination","Array","split","validCombination","push","last_key","updateCombinationEndList","subscribe","count","presses","state","reduce","v","replace","non_meta","DEFAULT_SETTINGS","composer","domain","route","protocol","port","use_domain","local_login","app","description","short_name","logo","src","logo_dark","general","desks","hide_reason","can_set_host","SettingsService","_title","super","_overrides","_subjects","_observables","now","Date","time","built","init","value","getTitle","setTitle","get","location","pathname","slice","join","toUpperCase","application","settings","override_settings","override","hasOwnProperty","_service","_available","_activated","_timer","notify","message","action","on_action","config","snackbar_ref","open","panelClass","duration","dismiss","onAction","error","notifyInfo","info","opacity","USER_DOMAIN","User","data","email","first_name","last_name","phone","organisation","notes","photo","username","organizer","groups","checked_in","required","response_status","sys_admin","support","extension_data","assistance_required","is_external","endsWith","visit_expected","card_number","staff_id","is_logged_in","_current_user","jest","pipe","retry","user","ActionIconComponent","className","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","IconComponent","PopoutMenuComponent","actions","timeout","show","close","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","MAP_FEATURE_DATA","InteractiveMapComponent","_injector","zoom","center","x","y","injectors","_on_changes","updateDisplay","features","f","idx","_feature_list","toArray","nativeElement","viewer","changes","createView","providers","provide","useValue","_","position","parent","focus","focusOn","styles","labels","updateView","loading","feature_list","options","desired_zoom","desired_center","_outlet_el","element","url","subscription","rect","mappings","w","StatusOverlayComponent","links","DEFAULT_KEYS","VirtualKeyboardComponent","_element","_overlay","keyset","_overlay_ref","onFocus","enabled","onBlur","ngOnDestroy","blur","_portal","create","positionStrategy","global","bottom","centerHorizontally","attach","dispose","cursor_pos","selectionStart","substr","max","dispatchEvent","InputEvent","updateKeyState","focusInput","selectionEnd","BuildingLevel","parent_id","display_name","map_id","capacity","locations","parts","number","Building","raw_data","disc_info","discovery_info","zone_id","zone","extras","extra_id","extra_name","loan_items","levels","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl","lvl_features","feature","level_id","bindings","timezone","catering_hours","start","end","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","Organisation","tags","_settings","OrganisationService","_router","_buildings","_active_building","_levels","building_list","level_list","active_building","active_levels","bld","levelsForBuilding","_building_settings","overrides","buildingSettings","bld_id","building","_organisation","details","buildings","id_list","tries","load","catch","err","min","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","toPromise","auth","org","list","org_zone","navigate","limit","localStorage","getItem","sort","localeCompare","m","prev","curr","concat","setItem","Desk","toJSON","format","bookable","qr_code","Space","zones","support_url","image","configurations","level","availability","SpacesService","_org","_list","_compare","space","loadSpaces","predicate","valid_spaces","sys","levelWithID","GlobalLoadingComponent","_spaces","UnauthorisedComponent","MAT_MODULES","ComponentsModule","DurationFieldComponent","step","specialPreprops","duration_options","generateDurationOptions","new_value","_onChange","disabled","_onTouch","blocks","date","option","add","hours","minutes","useExisting","multi","setValue","NewUserModalComponent","form","fields","generateUserForm","markAllAsTouched","valid","new_user","metadata","UserFormComponent","controls","invalid","touched","CateringItem","category","unit_price","quantity","discount_cap","accept_points","total_cost","options_string","CateringOrder","system_id","event_id","items","item_count","amount","item","charge_code","status","invoice_number","deliver_at","getTime","DURATION_MAP","month","months","week","weeks","day","days","hour","minute","DEFAULT_RULES","auto_approve","hidden","stringToMinutes","addToDate","checkRulesMatch","host","ruleset","matches","conditions","every","is_before","is_after","min_length","max_length","_default_user","event_start","roundToNearestMinutes","nearestTo","event_end","calendar","creator","attendees","resource","u","resources","s","body","private","all_day","recurring","recurring_master_id","organiser","master","recurrence","range_start","valueOf","range_end","interval","pattern","days_of_week","system","old_system","attachments","some","eventStatus","catering","obj","set","breakdown","is_today","FormFieldsModule","SpaceSelectItemComponent","primary","summary","can_edit","starts_at","ends_at","CALENDAR_ENDPOINT","calendarsToSpaces","cal","SpaceSelectModalComponent","spaces","space_types","available_spaces","q","query","zone_ids","period_start","period_end","filtered_spaces","filterSpacesFromRules","rulemap","rules","rulesForSpace","forEach","multiple","space_map","save","SPACE_COUNT","ExploreStateService","_level","_positions","_styles","_features","_actions","_labels","_options","_message","map_url","map_positions","map_features","debounceTime","disable","disable_features","map_actions","disable_actions","map_labels","disable_labels","map_styles","style_mappings","text","display","disable_styles","setLevel","setOptions","style_map","feature_map","actions_map","labels_map","EVENTS_ENDPOINT","endInFuture","control","setMinutes","setHours","ExploreSpaceInfoComponent","_details","events","parentElement","ngOnInit","parseInt","style","top","left","y_pos","x_pos","ExploreBookingModalComponent","booking","visitor_type","ext","needs_space","needs_parking","valueChanges","o","l","on_error","system_ids","method","encodeURIComponent","updateEvent","createEvent","DEFAULT_COLOURS","free","pending","reserved","busy","unknown","ExploreSpacesService","_state","_dialog","_bookings","_statuses","_bind","unsubWith","mod","binding","listen","handleBookingsChange","bind","handleStatusChange","updateActions","updateHoverElements","bookings","updateStatus","colours","fill","setStyles","hover","setFeatures","callback","bookSpace","setActions","ExploreZonesService","_capacity","area_management","parseData","zone_metadata","all","areas","area","properties","label_location","filled","area_id","ambient_temp","people_count","humidity","queue_size","setLabels","DeskQuestionsModalComponent","travelled","unwell","contact","failure","asset_id","booking_start","booking_end","booking_type","abs","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","rejected","approved","approver_id","approver_email","approver_name","access","addHours","BOOKINGS_ENDPOINT","BookingFormService","_view","_form","_form_value","_booking","_loading","last_success","JSON","parse","sessionStorage","assets","distinctUntilKeyChanged","of","an_array","stack","res","pop","isArray","reverse","flatten","asset","available_assets","bkn","grouped_availability","asset_list","members","group","clearForm","booked_by","booked_by_id","booked_by_email","booker","patchValue","emitEvent","generateBookingForm","storeForm","newForm","removeItem","stringify","checkQuestions","dialog","ref","race","componentInstance","afterClosed","openConfirmModal","postForm","result","updateBooking","createBooking","setView","ExploreDeviceInfoComponent","mac","manufacturer","os","ssid","variance","toFixed","diameter","bg_color","distance_color","overlay_ref","onEnter","loadUser","onLeave","onClick","onTouch","formatDistanceToNow","last_seen","addSuffix","distance","execute","assigned_to","flexibleConnectedTo","_dot","withPositions","originX","originY","overlayX","overlayY","ExploreDeskInfoComponent","ExploreDesksService","_in_use","_desks","_reserved","_poll","_desk_bookings","desk_list","j","catchError","processBindingChange","_state_change","in_use","is_used","is_reserved","processDesks","enable_booking","devices","at_location","processDevices","desk_id","device","map_width","map_height","coordinates_from","desk","book_fn","confirmPost","ExploreZoomControlComponent","zoomIn","setPositions","positions","zoomOut","reset","ExploreSearchService","_emergency_contacts","_filter","emergency_contacts","_user_search","search_fn","search_results","users","contacts","search","results","searchStaff","location_services","contacts_map","ExploreSearchComponent","_el","_search","_route","search_str","setFilter","select","checkClick","target","_input_el","relativeTo","queryParams","closeSearch","showSearch","SharedExploreModule","BootstrapComponent","rotations","active_level","queryParamMap","params","has","osk_enabled","bootstrapKiosk","checkBootstrap","active_rotation","active_location","FooterMenuComponent","DeskBookingComponent","resetCountdown","countdown_time","ExploreLevelSelectComponent","_orgs","routes","path","component","ExploreComponent","_s","_zones","reset_delay","onMouse","resetKiosk","document","activeElement","closeAll","redirectTo","AppRoutingModule","useHash","MOCK_MENU","generateCateringOrder","mx","MOCK_ORGS","created_at","updated_at","triggers","MOCK_BUILDINGS","MOCK_LEVELS","num","mockLevel","p","MOCK_METADATA","current","padString","request","query_params","route_params","generateMockDeskMetadata","DESK_FEATURES","DOMAIN","PREDEF_USERS","ACTIVE_USER","MOCK_STAFF","MOCK_GUESTS","randomSpaceFeatures","numFeatures","r","MOCK_SPACES","linked","long_name","searchable","controlable","cost_hour","setup","linked_rooms","generateMockSpace","EVENT_TIME","startOf","nextEventTime","unix","event_status","randomStatus","rnd","MOCK_EVENTS","index","PEOPLE","unshift","event_spaces","person","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","subtract","geo","lat","lon","RoomModule","volume","connected","active","input_list","output_list","env_sources","inputs","outputs","source","input","output","$updateState","following","mute","$mute","locked","Mic1","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","updateBookings","subSeconds","MockLocationServicesModule","overview","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","updateLocations","s2_cell_id","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","CaptureModule","live","remaining","$start","createCaptureModule","createSystem","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","new_event","findIndex","splice","handleSpaceAvailability","TYPES","MOCK_BOOKINGS","lvls","approver","ZONE_MOCKS","USER_MOCKS","SYSTEM_MOCKS","EVENT_MOCKS","CALENDAR_MOCKS","BOOKING_MOCKS","BINDING_MOCKS","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","reload","copy","navigator","clipboard","readText","tkn","mock","origin","hostname","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","setupPlace","onInitError","cache","isEnabled","available","hash","activateUpdate","activated","checkForUpdate","setupCache","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","AppModule","showDialog","deps","bootstrapModule"],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 9921;\nmodule.exports = webpackEmptyAsyncContext;","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","const general = {};\n\nconst desks = {\n    hide_reason: true,\n    can_set_host: true,\n};\n\nconst app = {\n    name: 'MapKiosk',\n    title: 'PlaceOS',\n    description: 'Map Kiosk UI',\n    short_name: 'PlaceOS',\n    logo: {\n        type: 'img',\n        src: 'assets/logo-light.svg',\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg',\n    },\n    general,\n    desks,\n};\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/kiosk',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app,\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"bf84a09\",\n    \"hash\": \"bf84a09\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"bf84a09\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1627440053382\n};\n/* tslint:enable */\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        if (!getViewer(this.viewer) || this.loading) {\n            return this.timeout('update_view', () => this.updateView());\n        }\n        try {\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        updateViewer(this.viewer, {\n            zoom: this.zoom,\n            desired_zoom: this.zoom,\n            center: this.center,\n            desired_center: this.center,\n            options: this.options,\n        });\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { PlaceZone } from '@placeos/ts-client';\n\nexport class Desk {\n    /** ID of the desk also map_id */\n    public readonly id: string;\n    /** ID of the desk on the associated map */\n    public readonly map_id: string;\n    /** Name of the desk */\n    public readonly name: string;\n    /** Whether desk is available / bookable */\n    public readonly bookable: boolean;\n    /** Zone/Level of the desk */\n    public readonly zone: PlaceZone;\n    /** Group/Department allocated to the desk */\n    public readonly groups: string[];\n    /** QR code image data */\n    public readonly qr_code: string;\n\n    constructor(data: Partial<Desk> = {}) {\n        this.id = data.id || '';\n        this.map_id = data.map_id || data.id || '';\n        this.name = data.name || '';\n        this.bookable = data.bookable ?? false;\n        this.zone = data.zone || new PlaceZone();\n        this.groups = data.groups || [];\n        this.qr_code = data.qr_code || '';\n    }\n\n    public format() {\n        const { id, name, bookable, groups } = this;\n        return {\n            id,\n            name,\n            bookable,\n            groups,\n        };\n    }\n\n    public readonly toJSON = () => this.format();\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-unauthorised',\n    template: `\n        <div\n            class=\"unauthorised rounded m-4 text-center bg-white text-black border border-gray-400 p-4 shadow\"\n        >\n            <h1 class=\"text-4xl\">403</h1>\n            <h3 class=\"text-2xl\" i18n=\"@@forbiddenLabel\">Access forbidden.</h3>\n            <p class=\"py-4\" i18n=\"@@invalidPermissionLabel\">\n                You do not have permission to view this page and your access\n                attempt has been recorded.\n            </p>\n            <p i18n=\"@@contactAdminLabel\">\n                Contact your Administrator if you feel that you should have\n                access.\n            </p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            .unauthorised {\n                width: 28em;\n                max-width: calc(100vw - 1rem);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .unauthorised {\n                    background-color: #262626;\n                    color: #fff;\n                }\n            }\n        `,\n    ],\n})\nexport class UnauthorisedComponent {}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Identity } from '@placeos/common';\nimport { formatDuration } from 'date-fns';\nimport * as dayjs from 'dayjs';\n\n\n\n@Component({\n    selector: 'a-duration-field',\n    template: `\n        <div class=\"duration-field\" [attr.disabled]=\"disabled\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    #select\n                    [value]=\"duration\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"duration + ' minutes'\"\n                    (valueChange)=\"setValue($event)\"\n                >\n                    <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n                <mat-error><ng-content></ng-content></mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DurationFieldComponent implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max = 240;\n    /** Minimum duration option available */\n    @Input() public min = 30;\n    /** Step value between options */\n    @Input() public step = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Special case prepopulation i.e. out of step options */\n    @Input() public specialPreprops: Array<number> = [];\n\n    public duration = 60;\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        const date = this.time ? dayjs(this.time) : null;\n\n        // Add special case for 10min duration/prepropulation\n        for (const option of this.specialPreprops) {\n            blocks.push({\n                id: option,\n                name: date\n                    ? `${date.add(option, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(option / 60),\n                          minutes: option % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(option / 60), minutes: option % 60 })}`,\n            });\n        }\n\n        while (time <= max) {\n            blocks.push({\n                id: time,\n                name: date\n                    ? `${date.add(time, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(time / 60),\n                          minutes: time % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(time / 60), minutes: time % 60 })}`,\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.visit_expected) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    Point,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { SpacesService } from '@placeos/spaces';\n\nexport interface MapOptions {\n    /** List of keys to ignore for any map resource */\n    disable?: string[];\n    /** List of keys to ignore for map labels */\n    disable_labels?: string[];\n    /** List of keys to ignore for map actions */\n    disable_actions?: string[];\n    /** List of keys to ignore for map features */\n    disable_features?: string[];\n    /** List of keys to ignore for map styles */\n    disable_styles?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({});\n\n    private _message = new BehaviorSubject<string>('');\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Currently active level */\n    public readonly message = this._message.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([\n        this._level,\n        this._spaces.list,\n    ]).pipe(\n        map(([level, spaces]) =>\n            spaces.filter((space) => space.zones.includes(level?.id))\n        )\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(\n        map((lvl) => (lvl ? lvl.map_id : '') || '')\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([features, options]) => {\n            let list = [];\n            for (const key in features) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_features?.includes(key)\n                )\n                    continue;\n                list = list.concat(features[key]);\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = combineLatest([\n        this._actions,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([actions, options]) => {\n            let list = [];\n            for (const key in actions) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_actions?.includes(key)\n                )\n                    continue;\n                list = list.concat(actions[key]);\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([\n        this._labels,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([labels, options]) => {\n            let list = [];\n            for (const key in labels) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_labels?.includes(key)\n                )\n                    continue;\n                list = list.concat(labels[key]);\n            }\n            return list;\n        })\n    );\n    /** Current map styles */\n    public readonly map_styles = combineLatest([\n        this._styles,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([styles, options]) => {\n            let style_mappings = { text: { display: 'none' } };\n            for (const key in styles) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_styles?.includes(key)\n                )\n                    continue;\n                style_mappings = { ...style_mappings, ...styles[key] };\n            }\n            if (!options.disable?.includes('zones')) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    public get active_level() {\n        return this._level.getValue();\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._org.active_building.pipe(filter((_) => !!_)).subscribe((bld) => {\n            const level = this._level.getValue();\n            const level_list = this._org.levelsForBuilding(bld);\n            const has_level = level_list.find((lvl) => level?.id === lvl.id);\n            if (!has_level && level_list.length) {\n                this.setLevel(level_list[0].id);\n            }\n            if (this._settings.get('app.explore.display_devices') !== false) {\n                this.setOptions({ disable: ['devices'] });\n            }\n            if (this._settings.get('app.explore.disable_actions')) {\n                this.setOptions({\n                    disable_actions: this._settings.get(\n                        'app.explore.disable_actions'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_labels')) {\n                this.setOptions({\n                    disable_labels: this._settings.get(\n                        'app.explore.disable_labels'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_features')) {\n                this.setOptions({\n                    disable_features: this._settings.get(\n                        'app.explore.disable_features'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_styles')) {\n                this.setOptions({\n                    disable_styles: this._settings.get(\n                        'app.explore.disable_styles'\n                    ),\n                });\n            }\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from 'libs/users/src/lib/user.class';\n\nimport { CalendarEvent } from './event.class';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, new CalendarEvent(data).toJSON()).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        method === 'patch' ? data : new CalendarEvent(data).toJSON()\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => {\n    delete (data as any)?.status;\n    return data.id ? updateEvent(data.id, data, q) : createEvent(data);\n};\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        {\n            response_type: 'void',\n        }\n    );\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/approve?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/reject?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/guests/${guest_id}/checkin${query ? '?' + query : ''}`,\n        ''\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","import { AbstractControl } from '@angular/forms';\nimport { addMinutes, isAfter, isBefore } from 'date-fns';\n\nexport const endInFuture = (control: AbstractControl) => {\n    if (\n        control.parent?.get('date') &&\n        isAfter(\n            new Date(),\n            addMinutes(control.parent.get('date').value, control.value)\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(\n    control: AbstractControl\n): { [key: string]: boolean } | null {\n    return control.value && isBefore(control.value, new Date())\n        ? { is_future: true }\n        : null;\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { CalendarEvent } from '@placeos/events';\nimport { Space } from '@placeos/spaces';\n\nexport interface SpaceInfoData {\n    space: Space;\n    events: CalendarEvent[];\n    status:\n        | 'free'\n        | 'busy'\n        | 'pending'\n        | 'reserved'\n        | 'not-bookable'\n        | 'unknown'\n        | '';\n}\n\n@Component({\n    selector: 'explore-space-info',\n    template: `\n        <div\n            *ngIf=\"space\"\n            name=\"space-info\"\n            [id]=\"space.id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 class=\"m-0 mb-2\">{{ space.display_name || space.name }}</h4>\n                <div capacity class=\"text-sm\" *ngIf=\"space.capacity >= 0\">\n                    <span>Capacity: </span>{{ space.capacity }}\n                    {{ space.capacity === 1 ? 'person' : 'people' }}\n                </div>\n                <div class=\"flex flex-wrap my-2 text-sm\">\n                    <div\n                        status\n                        [class]=\"\n                            'capitalize rounded p-1 px-2 text-light ' + status\n                        \"\n                    >\n                        {{ status }}\n                    </div>\n                    <div available-until *ngIf=\"status !== 'not-bookable'\">\n                        {{ available_until }}\n                    </div>\n                </div>\n                <div features *ngIf=\"space.features?.length > 0\">\n                    <h4 class=\"m-0 mb-2\">Room Features</h4>\n                    <ul class=\"pl-2\">\n                        <li\n                            class=\"text-sm\"\n                            *ngFor=\"let feature of space.features\"\n                        >\n                            {{ feature }}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [status] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [status].busy {\n                background-color: #e53935;\n            }\n\n            [status].pending {\n                background-color: #ffb300;\n            }\n\n            [status].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreSpaceInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly space = this._details.space;\n    /** List of upcoming events for space */\n    public readonly events = this._details.events;\n    /** Current status of the space */\n    public readonly status = this._details.status;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: SpaceInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration, [endInFuture]),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.ext('visitor_type')),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(event.ext('needs_parking') || false),\n        system: new FormControl(event.system),\n    });\n    form.get('organiser').valueChanges.subscribe((o) =>\n        form.controls.host.setValue(o?.email)\n    );\n    form.get('resources').valueChanges.subscribe((l) =>\n        form.controls.system.setValue(l.length ? l[0] : null)\n    );\n    if (event.id) {\n        form.get('host').disable();\n        form.get('organiser').disable();\n    }\n    if (event.state === 'started') form.get('date').disable();\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport { CalendarEvent, generateEventForm, saveEvent } from '@placeos/events';\nimport { Space } from '@placeos/spaces';\nimport { querySpaceAvailability } from '@placeos/calendar';\n\nexport interface ExploreBookingModalData {\n    space: Space;\n}\n\n@Component({\n    selector: 'explore-booking-modal',\n    template: `\n        <header>\n            <h2>New Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main *ngIf=\"form\" [formGroup]=\"form\" class=\"p-4\">\n                <div class=\"flex flex-col\">\n                    <label for=\"title\">Title<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"title\"\n                            formControlName=\"title\"\n                            placeholder=\"Booking Title\"\n                        />\n                        <mat-error>Booking title is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>Space:</label>\n                    <div name=\"space\" class=\"sm:mt-4 mb-4\">\n                        {{\n                            form.controls.resources?.value[0]?.display_name ||\n                                form.controls.resources?.value[0]?.name\n                        }}\n                    </div>\n                </div>\n                <div class=\"flex sm:space-x-4 flex-wrap\">\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.date\">\n                        <label>Date:</label>\n                        <div class=\"sm:mt-4 mb-4\">\n                            {{ form.controls.date?.value | date: 'medium' }}\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.duration\">\n                        <label>Duration:</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                        ></a-duration-field>\n                    </div>\n                </div>\n            </main>\n            <footer class=\"flex justify-center p-2 border-t border-gray-200\">\n                <button mat-button (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div load class=\"h-64 flex flex-col items-center justify-center\">\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            header {\n                max-width: calc(100vw + 100%);\n            }\n\n            [load] {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class ExploreBookingModalComponent implements OnInit {\n    public booking: CalendarEvent;\n    public form: FormGroup;\n    public loading = '';\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ExploreBookingModalData,\n        private _dialog_ref: MatDialogRef<ExploreBookingModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.booking = new CalendarEvent({\n            attendees: [{ ...(this._data.space || {}), resource: true } as any],\n        });\n        this.form = generateEventForm(this.booking);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        const on_error = (msg) => {\n            this.loading = '';\n            notifyError(msg);\n            this._dialog_ref.disableClose = false;\n        };\n        if (!this.form.valid) {\n            const list = [];\n            for (const key in this.form.controls) {\n                if (this.form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            throw on_error(\n                `Some form fields are not valid: [${list.join(', ')}]`\n            );\n        }\n        this._dialog_ref.disableClose = true;\n        this.loading = 'Checking space availability...';\n        const spaces = await querySpaceAvailability({\n            system_ids: this.form.controls.resources.value\n                ?.map((s) => s.id)\n                .join(','),\n            period_start: Math.floor(this.form.value.date / 1000),\n            period_end:\n                Math.floor(this.form.value.date / 1000) +\n                this.form.value.duration * 60,\n        })\n            .toPromise()\n            .catch((e) => {\n                on_error(\n                    'Space is unavailble for the selected time and duration'\n                );\n                throw e;\n            });\n        if (spaces.length <= 0) {\n            return on_error(\n                'Space is unavailble for the selected time and duration'\n            );\n        }\n        this.loading = 'Creating booking...';\n        await saveEvent(new CalendarEvent(this.form.value))\n            .toPromise()\n            .catch((e) => {\n                on_error('Error creating booking.');\n                throw e;\n            });\n        notifySuccess(\n            `Successfully created booking in ${\n                this._data.space.display_name || this._data.space.name\n            }`\n        );\n        this._dialog_ref.close();\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@placeos/svg-viewer';\nimport { map } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    HashMap,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#e65100',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _statuses: HashMap<string> = {};\n\n    private _bind = this._state.spaces.pipe(\n        map((list) => {\n            console.log('Spaces:', list);\n            this.unsubWith('b-');\n            this.unsubWith('s-');\n            this._statuses = {};\n            if (!list?.length) return;\n            for (const space of list) {\n                const mod = getModule(space.id, 'Bookings');\n                let binding = mod.binding('bookings');\n                this.subscription(\n                    `b-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleBookingsChange(list, space, d)\n                        )\n                );\n                this.subscription(`b-bind-${space.id}`, binding.bind());\n                binding = mod.binding('status');\n                this.subscription(\n                    `s-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleStatusChange(list, space, d)\n                        )\n                );\n                this.subscription(`s-bind-${space.id}`, binding.bind());\n            }\n            this.updateActions(list);\n            this.updateHoverElements(list);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription('spaces', this._bind.subscribe());\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy' || !space.bookable) {\n            return notifyError(\n                `${\n                    space.display_name || space.name\n                } is unavailable at the current time`\n            );\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space },\n        });\n    }\n\n    public handleBookingsChange(\n        spaces: Space[],\n        space: Space,\n        bookings: HashMap[]\n    ) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout(\n            'update_hover_els',\n            () => this.updateHoverElements(spaces),\n            100\n        );\n    }\n\n    public handleStatusChange(spaces: Space[], space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus(spaces);\n                this.updateHoverElements(spaces);\n            },\n            100\n        );\n    }\n\n    private updateStatus(spaces: Space[]) {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const space of spaces) {\n            const status = this._statuses[space.id] || 'not-bookable';\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${status}`] ||\n                    colours[`${status}`] ||\n                    DEFAULT_COLOURS[`${status}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements(spaces: Space[]) {\n        const features: ViewerFeature[] = [];\n        for (const space of spaces) {\n            features.push({\n                location: space.map_id,\n                hover: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions(spaces: Space[]) {\n        const actions: ViewAction[] = [];\n        for (const space of spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { ViewerLabel, Point } from '@placeos/svg-viewer';\nimport { first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\n\nconst EMPTY_LABEL = { location: { x: -10, y: -10 }, content: '0% Usage' };\n\nexport interface ZoneData {\n    /** ID of the zone */\n    area_id: string;\n    /** Number of devices in the zone */\n    count: number;\n\n    ambient_temp: number;\n    people_count: number;\n    humidity: number;\n    queue_size: number;\n    counter: number;\n}\n\n@Injectable()\nexport class ExploreZonesService extends BaseClass {\n    private _statuses: HashMap<string> = {};\n    private _labels: HashMap<ViewerLabel> = {};\n    private _location: HashMap<Point> = {};\n    private _capacity: HashMap<number> = {};\n\n    private _bind = this._state.level.pipe(\n        map((lvl) => {\n            if (!lvl) return;\n            this._statuses = {};\n            const building = this._org.buildings.find(\n                (bld) => bld.id === lvl.parent_id\n            );\n            if (!building) return;\n            const system_id =\n                building.bindings.area_management ||\n                this._org.organisation.bindings.area_management;\n            if (!system_id) return;\n            const binding = getModule(system_id, 'AreaManagement').binding(\n                `${lvl.id}:areas`\n            );\n            console.log('Bind:', binding);\n            this.subscription(\n                `zones`,\n                binding.listen().subscribe((d) => this.parseData(d))\n            );\n            this.subscription('binding', binding.bind());\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        const zone_metadata = await Promise.all(\n            this._org.levels.map((bld) =>\n                showMetadata(bld.id, { name: 'map_regions' }).toPromise()\n            )\n        );\n        for (const zone of zone_metadata) {\n            const areas = (zone?.details as any)?.areas;\n            if (areas) {\n                for (const area of areas) {\n                    this._capacity[area.id] = area.properties?.capacity || 100;\n                    this._location[area.id] =\n                        area.properties?.label_location || null;\n                }\n            }\n        }\n        this.subscription('bind', this._bind.subscribe());\n    }\n\n    public parseData(data?: { value: ZoneData[] }) {\n        const value = data?.value || [];\n        const labels = [];\n        for (const zone of value) {\n            const filled = zone.count / (this._capacity[zone.area_id] || 100);\n            this._statuses[zone.area_id] =\n                filled < 0.4 ? 'free' : filled < 0.75 ? 'pending' : 'busy';\n            if (!this._location[zone.area_id]) continue;\n            let content = `${zone.count || 0} ${\n                zone.count === 1 ? 'Device' : 'Devices'\n            }\\n`;\n            if (zone.ambient_temp)\n                content += `Ambient Temp: ${zone.ambient_temp} ˚C\\n`;\n            if (zone.people_count > 0)\n                content += `${zone.people_count} ${\n                    zone.people_count === 1 ? 'Person' : 'People'\n                }\\n`;\n            if (zone.humidity) content += `Humidity: ${zone.humidity}%\\n`;\n            if (zone.queue_size) content += `Queue Size: ${zone.queue_size}%\\n`;\n            if (zone.counter) content += `Count: ${zone.queue_size}\\n`;\n            this._labels[zone.area_id] = {\n                location: this._location[zone.area_id],\n                content,\n            };\n            labels.push(this._labels[zone.area_id]);\n        }\n        this._state.setLabels('zones', labels);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const zone_id in this._statuses) {\n            if (!this._statuses[zone_id]) continue;\n            style_map[`#${zone_id}`] = {\n                fill:\n                    colours[`zone-${this._statuses[zone_id]}`] ||\n                    colours[`${this._statuses[zone_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[zone_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('zones', style_map);\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.booking_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 2), {\n                        nearestTo: 5,\n                    })\n            );\n        this.booking_end =\n            data.booking_end ||\n            getUnixTime(addMinutes(this.booking_start * 1000, data.duration || 60));\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(differenceInMinutes(\n                this.booking_start * 1000,\n                this.booking_end * 1000\n            ));\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? true;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (\n                                        _.metadata.desks?.details || []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const asset of assets) {\n                asset.features?.forEach((_) => list.push(_));\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find((bkn) => bkn.asset_id === asset.id)\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content: `Would you like to book the ${options.type} ${\n                    form.get('asset_id').value\n                } for ${format(form.get('date').value, 'dd MMM yyyy')}`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Performing booking request...');\n        await this.postForm().catch((_) => {\n            notifyError(_);\n            details.close();\n            throw _;\n        });\n        details.close();\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const asset_id = form.get('asset_id').value;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(form.get('date').value),\n            period_end: getUnixTime(\n                form.get('date').value + form.get('duration').value * 60 * 1000\n            ),\n            type: this._options.getValue().type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id))\n            throw `${asset_id} is not available at the selected time`;\n        if (\n            bookings.find(\n                (_) =>\n                    _.user_email ===\n                    (form.value.user_email || currentUser()?.email)\n            )\n        )\n            throw `You already have a desk booked`;\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        this.clearForm();\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    private async checkQuestions() {\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n}\n","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\nexport interface DeviceInfoData {\n    mac: string;\n    variance: number;\n    last_seen: number;\n    system: string;\n    manufacturer?: string;\n    os?: string;\n    ssid?: string;\n    user?: any;\n    bg_color?: string;\n}\n\n@Component({\n    selector: '[explore-device-info]',\n    template: `\n        <div\n            name=\"radius\"\n            (mouseenter)=\"loadUser()\"\n            class=\"radius absolute center bg-blue-600 bg-opacity-25 border-4 border-dashed border-blue-600 rounded-full\"\n            [style]=\"'height: ' + diameter + '%; width: ' + diameter + '%;'\"\n        ></div>\n        <div\n            name=\"dot\"\n            #dot\n            class=\"h-2 w-2 absolute center rounded-full pointer-events-auto shadow\"\n            [style.background-color]=\"bg_color\"\n        ></div>\n\n        <ng-template cdk-portal>\n            <div\n                name=\"device-info\"\n                class=\"w-64 rounded bg-white p-4 top-0 left-0 shadow pointer-events-none\"\n                (mouseleave)=\"close()\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <p><label>MAC:</label> {{ mac }}</p>\n                    <p><label>Accuracy:</label> {{ variance }}m</p>\n                    <p><label>Last Seen:</label> {{ last_seen }}</p>\n                    <p type *ngIf=\"manufacturer\">\n                        <label>Manufacturer:</label> {{ manufacturer }}\n                    </p>\n                    <p os *ngIf=\"os\"><label>OS:</label> {{ os }}</p>\n                    <p ssid *ngIf=\"ssid\"><label>SSID:</label> {{ ssid }}</p>\n                    <p username *ngIf=\"username\">\n                        <label>Username:</label>\n                        {{ user?.name || user?.username || username }}\n                    </p>\n                    <p user *ngIf=\"user\">\n                        <label>Type:</label> {{ user.type }}\n                    </p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: auto;\n            }\n\n            :host > [name='dot'] {\n                background-color: #616161;\n            }\n\n            :host:hover > [name='radius'] {\n                opacity: 1;\n            }\n\n            [name='radius'] {\n                opacity: 0;\n                transition: opacity 200ms;\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ExploreDeviceInfoComponent implements OnInit {\n    /** Name of the user associated with the mac address */\n    public username = '';\n    /** User details associated with device */\n    public readonly user = this._details.user;\n    /** Mac Address of the device */\n    public readonly mac = this._details.mac;\n    /** Mac Address of the device */\n    public readonly manufacturer = this._details.manufacturer;\n    /** Mac Address of the device */\n    public readonly os = this._details.os;\n    /** Mac Address of the device */\n    public readonly ssid = this._details.ssid;\n    /** Accuracy of the location data */\n    public readonly variance = this._details.variance?.toFixed(2);\n    /** Diameter of the radius circle */\n    public readonly diameter = this._details.variance * 100;\n    /** Background color for the dot */\n    public readonly bg_color = this._details.bg_color || this.distance_color;\n\n    public overlay_ref: OverlayRef = null;\n    /** Time of the last update */\n    public get last_seen() {\n        return formatDistanceToNow((this._details.last_seen || 0) * 1000, {\n            addSuffix: true,\n        });\n    }\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'end' | 'start';\n    public get distance() {\n        return Math.abs(\n            differenceInMinutes(\n                (this._details.last_seen || 0) * 1000,\n                new Date()\n            )\n        );\n    }\n\n    public get distance_color() {\n        return this.distance < 10\n            ? '#43a047'\n            : this.distance < 20\n            ? '#ffb300'\n            : '#e53935';\n    }\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n    @ViewChild('dot') private _dot: ElementRef<HTMLDivElement>;\n\n    @HostListener('mouseenter') public onEnter = () => this.loadUser();\n    @HostListener('mouseleave') public onLeave = () => this.close();\n    @HostListener('click') public onClick = () => this.loadUser();\n    @HostListener('touchend') public onTouch = () => this.loadUser();\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeviceInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public async loadUser() {\n        this.open();\n        if (this.username) return;\n        const mod = getModule(this._details.system, 'LocationServices');\n        if (mod) {\n            this.username = 'Loading...';\n            const details = await mod\n                .execute('check_ownership_of', [this.mac])\n                .catch((_) => null);\n            this.username =\n                details && details.assigned_to ? details.assigned_to : '';\n        }\n    }\n\n    public open() {\n        if (this.overlay_ref) this.close();\n        if (!this._portal) return;\n        this.overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._dot)\n                .withPositions([\n                    {\n                        originX: this.x_pos === 'start' ? 'end' : 'start',\n                        originY: this.y_pos === 'top' ? 'bottom' : 'top',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'bottom',\n                    },\n                ]),\n        });\n        this.overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this.overlay_ref) {\n            this.overlay_ref.dispose();\n            this.overlay_ref = null;\n        }\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@placeos/components';\n\nexport interface DeskInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 map-id class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p user class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p start class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeskInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    HashMap,\n    notifySuccess,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    BookingFormService,\n    DesksService,\n    queryBookings,\n} from '@placeos/bookings';\nimport { StaffUser } from '@placeos/users';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nexport interface DeskOptions {\n    enable_booking?: boolean;\n    date?: number | Date;\n    zones?: string[];\n    host?: StaffUser;\n}\nexport interface DesksStats {\n    free: number;\n    occupied: number;\n    total: number;\n}\n\n@Injectable()\nexport class ExploreDesksService extends BaseClass implements OnDestroy {\n    private _in_use = new BehaviorSubject<string[]>([]);\n    private _options = new BehaviorSubject<DeskOptions>({});\n    private _desks = new BehaviorSubject<string[]>([]);\n    private _reserved = new BehaviorSubject<string[]>([]);\n    private _statuses: HashMap<string> = {};\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _desk_bookings = combineLatest([\n        this._state.level,\n        this._poll,\n    ]).pipe(\n        switchMap(([lvl]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(new Date())),\n                period_end: getUnixTime(endOfDay(new Date())),\n                type: 'desk',\n                zones: lvl.id,\n            })\n        )\n    );\n\n    public readonly desk_list = this._state.level.pipe(\n        switchMap((lvl) =>\n            showMetadata(lvl.id, { name: 'desks' }).pipe(\n                map((i) =>\n                    (i.details instanceof Array ? i.details : []).map(\n                        (j: HashMap) => new Desk({ ...j, zone: lvl as any })\n                    )\n                )\n            )\n        ),\n        catchError((e) => [])\n    );\n\n    private _bind = this._state.level.pipe(\n        map((lvl) => {\n            this._statuses = {};\n            this.unsubWith('lvl');\n            if (!lvl) return;\n            const building = this._org.buildings.find(\n                (bld) => bld.id === lvl.parent_id\n            );\n            if (!building) return;\n            const system_id =\n                building.bindings?.area_management ||\n                this._org.organisation.bindings?.area_management;\n            if (!system_id) return;\n            let binding = getModule(system_id, 'AreaManagement').binding(\n                lvl.id\n            );\n            this.subscription(\n                `lvl-in_use`,\n                binding\n                    .listen()\n                    .subscribe((d) =>\n                        this.processBindingChange(d || {}, system_id)\n                    )\n            );\n            this.subscription('lvl-in_use_bind', binding.bind());\n            binding = getModule(system_id, 'AreaManagement').binding(\n                `${lvl.id}:desk_ids`\n            );\n            this.subscription(\n                `lvl-desks_list`,\n                binding.listen().subscribe((d) => this._desks.next(d || []))\n            );\n            this.subscription('lvl-desk_list_bind', binding.bind());\n        })\n    );\n\n    private _state_change = combineLatest([\n        this.desk_list,\n        this._in_use,\n        this._reserved,\n        this._options,\n    ]).pipe(\n        // debounceTime(50),\n        map(([desks, in_use, reserved]) => {\n            this._statuses = {};\n            for (const { id, bookable } of desks) {\n                const is_used = in_use.some((i) => id === i);\n                const is_reserved = reserved.some((i) => id === i);\n                this._statuses[id] = bookable\n                    ? !is_used\n                        ? 'free'\n                        : is_reserved\n                        ? 'reserved'\n                        : 'busy'\n                    : 'not-bookable';\n            }\n            this.processDesks(desks);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _bookings: BookingFormService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.setOptions({\n            enable_booking: this._settings.get('app.desks.enabled') !== false,\n        });\n        this.subscription('bind', this._bind.subscribe());\n        this.subscription('changes', this._state_change.subscribe());\n        this.subscription(\n            'desks',\n            this.desk_list.subscribe((desks) => this.processDesks(desks))\n        );\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.subscription(\n            'desks_in_use_bookings',\n            this._desk_bookings.subscribe((_) =>\n                this._in_use.next(_.map((i) => i.asset_id))\n            )\n        );\n        this.interval(\n            'poll',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: DeskOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public processBindingChange(\n        { value }: { value: any[] },\n        system_id: string\n    ) {\n        const devices = (value || []).filter(\n            (v) => !['desk', 'booking'].includes(v.location)\n        );\n        const desks = (value || []).filter(\n            (v) =>\n                v.location === 'desk' ||\n                (v.location === 'booking' && v.type === 'desk')\n        );\n        this._in_use.next(desks.map((v) => v.map_id || v.asset_id));\n        this._reserved.next(\n            desks\n                .filter((v) => !v.at_location)\n                .map((v) => v.map_id || v.asset_id)\n        );\n        this.processDevices(devices, system_id);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk_id in this._statuses) {\n            if (!this._statuses[desk_id]) continue;\n            style_map[`#${desk_id}`] = {\n                fill:\n                    colours[`desk-${this._statuses[desk_id]}`] ||\n                    colours[`${this._statuses[desk_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[desk_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('desks', style_map);\n    }\n\n    private processDevices(devices: HashMap[], system_id: string) {\n        const list = [];\n        for (const device of devices) {\n            const x = device.x / device.map_width;\n            const y = device.y / device.map_height;\n            list.push({\n                location: {\n                    x: device.coordinates_from?.includes('right') ? 1 - x : x,\n                    y: device.coordinates_from?.includes('bottom') ? 1 - y : y,\n                },\n                content: ExploreDeviceInfoComponent,\n                data: { ...device, system: system_id },\n            });\n        }\n        this._state.setFeatures('devices', list);\n    }\n\n    private processDesks(desks: HashMap[]) {\n        const list = [];\n        const actions = [];\n        const options = this._options.getValue();\n        for (const desk of desks) {\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    status: this._statuses[desk.map_id],\n                },\n            });\n            const book_fn = async () => {\n                this._bookings.newForm();\n                this._bookings.form.patchValue({\n                    asset_id: desk.id,\n                    user: options.host || currentUser(),\n                    booking_type: 'desk',\n                });\n                await this._bookings.confirmPost();\n                notifySuccess(\n                    `Successfull booked desk ${desk.name || desk.id}`\n                );\n            };\n            actions.push({\n                id: desk.id,\n                action: 'click',\n                callback: book_fn,\n            });\n            actions.push({\n                id: desk.id,\n                action: 'touchend',\n                callback: book_fn,\n            });\n        }\n        this._state.setActions(\n            'desks',\n            this._options.getValue().enable_booking ? actions : []\n        );\n        this._state.setFeatures('desks', list);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button z-in mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon>add</app-icon>\n        </button>\n        <button z-out mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon>remove</app-icon>\n        </button>\n        <button reset mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon>autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 0.5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () =>\n        this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { SpacesService } from '@placeos/spaces';\nimport { searchStaff, StaffUser, User } from '@placeos/users';\nimport { getModule } from '@placeos/ts-client';\nimport { unique } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface SearchResult {\n    /** Unique ID of the result item */\n    id: string;\n    /** Type of the item being displayed */\n    type: 'space' | 'user' | 'contact' | 'feature';\n    /** Main display string for the item */\n    name: string;\n    /** Secondary display string for the item. e.g. email, location, coordinates */\n    description: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreSearchService {\n    /** Current search results for staff users */\n    private _emergency_contacts = new BehaviorSubject<User[]>([]);\n    /** Filter string for results */\n    private _filter = new BehaviorSubject<string>('');\n    /** Whether results are being loaded */\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly emergency_contacts = this._emergency_contacts.asObservable();\n\n    private _user_search: Observable<StaffUser[]> = this._filter.pipe(\n        debounceTime(400),\n        tap(() => this._loading.next(true)),\n        switchMap((q) => (q?.length > 2 ? this.search_fn(q) : of([]))),\n        catchError(() => [])\n    );\n\n    public readonly search_results: Observable<SearchResult[]> = combineLatest([\n        this._spaces.list,\n        this._user_search,\n        this._emergency_contacts,\n    ]).pipe(\n        debounceTime(1000),\n        map(([spaces, users, contacts]) => {\n            const filter = this._filter.getValue() || '';\n            const search = filter.toLowerCase();\n            const results = unique(\n                [\n                    ...spaces\n                        .filter(\n                            (_) =>\n                                _.email.toLowerCase().includes(search) ||\n                                _.name.toLowerCase().includes(search) ||\n                                _.display_name.toLowerCase().includes(search)\n                        )\n                        .map((s) => ({\n                            id: s.id,\n                            type: 'space',\n                            name: s.display_name || s.name,\n                            description: `Capacity: ${s.capacity} `,\n                        })),\n                    ...contacts\n                        .map((u) => ({\n                            id: u.email,\n                            type: (u as any).type || 'contact',\n                            name: u.name,\n                            description: u.email,\n                        }))\n                        .filter(\n                            (_) =>\n                                _.name.toLowerCase().includes(search) ||\n                                _.description.toLowerCase().includes(search) ||\n                                _.type.toLowerCase().includes(search)\n                        ),\n                    ...users.map((u) => ({\n                        id: u.email,\n                        type: 'user',\n                        name: u.name,\n                        description: u.email,\n                    })),\n                ],\n                'id'\n            );\n            results.sort((a, b) => a.name.localeCompare(b.name));\n            return results;\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Obverable for whether results are being loaded */\n    public readonly loading = this._loading.asObservable();\n    /** Function used to query for users */\n    public search_fn = (q: string) => searchStaff(q);\n\n    constructor(\n        private _spaces: SpacesService,\n        private _org: OrganisationService\n    ) {\n        this._spaces.list.subscribe();\n        this.search_results.subscribe();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        const mod = getModule(\n            this._org.organisation.bindings?.location_services,\n            'LocationServices'\n        );\n        if (mod) {\n            const binding = mod.binding('emergency_contacts');\n            binding.listen().subscribe((contacts_map) => {\n                const list = [];\n                for (const type in contacts_map) {\n                    for (const user of contacts_map[type]) {\n                        list.push({ ...user, type });\n                    }\n                }\n                this._emergency_contacts.next(list);\n            });\n            binding.bind();\n        }\n    }\n\n    public setFilter(str: string) {\n        this._filter.next(str);\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n","import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\n\nimport { ExploreSearchService, SearchResult } from './explore-search.service';\n\n@Component({\n    selector: 'explore-search',\n    template: `\n        <div\n            role=\"search\"\n            tabindex=\"0\"\n            matRipple\n            class=\"bg-white m-2 flex items-center z-10 relative overflow-hidden outline-none\"\n            [class.show]=\"show || search_str\"\n        >\n            <app-icon\n                class=\"text-2xl outline-none\"\n                tabindex=\"0\"\n                (click)=\"show ? closeSearch($event) : showSearch()\"\n            >\n                {{ show || search_str ? 'close' : 'search' }}\n            </app-icon>\n            <input\n                #input\n                keyboard\n                class=\"flex-1 text-base border-none outline-none\"\n                [(ngModel)]=\"search_str\"\n                (ngModelChange)=\"setItem($event)\"\n                placeholder=\"Search for...\"\n                (blur)=\"show = !!search_str\"\n                [matAutocomplete]=\"auto\"\n                [matAutocompleteConnectedTo]=\"origin\"\n            />\n            <mat-spinner\n                *ngIf=\"loading | async\"\n                class=\"mr-2\"\n                [diameter]=\"32\"\n            ></mat-spinner>\n            <div\n                class=\"absolute bottom-0 left-8 right-8 min-w-[20rem]\"\n                matAutocompleteOrigin\n                #origin=\"matAutocompleteOrigin\"\n            ></div>\n        </div>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <ng-container\n                *ngIf=\"(loading | async) !== true && (show || search_str)\"\n            >\n                <mat-option\n                    *ngIf=\"!(results | async)?.length\"\n                    class=\"pointer-events-none\"\n                >\n                    No matches found\n                </mat-option>\n                <mat-option\n                    *ngFor=\"let option of results | async | slice: 0:5\"\n                    [value]=\"option\"\n                >\n                    <div class=\"flex items-center leading-tight\">\n                        <div class=\"flex-1 overflow-hidden\">\n                            <div class=\"truncate w-full\">{{ option.name }}</div>\n                            <div class=\"text-xs\">{{ option.description }}</div>\n                        </div>\n                        <div\n                            class=\"text-xs font-bold p-2 capitalize text-white bg-gray-500 rounded\"\n                        >\n                            {{ option.type }}\n                        </div>\n                    </div>\n                </mat-option>\n            </ng-container>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            :host {\n                z-index: 99;\n            }\n\n            [role='search'] {\n                height: 3.125rem;\n                width: 3.125rem;\n                border-radius: 1.5rem;\n                border: 1px solid #ccc;\n                transition: width 200ms;\n            }\n\n            app-icon {\n                margin: 0.55rem;\n            }\n\n            [role='search'].show {\n                width: 32rem;\n                max-width: calc(100vw - 1rem);\n                border-color: #1e88e5;\n            }\n        `,\n    ],\n})\nexport class ExploreSearchComponent extends BaseClass {\n    public show = false;\n    public search_str = '';\n    public readonly results = this._search.search_results;\n    public readonly loading = this._search.loading;\n    public readonly setFilter = (s) => this._search.setFilter(s);\n    public readonly setItem = (i) =>\n        i instanceof Object ? this.select(i) : this.setFilter(i);\n\n    @ViewChild('input') private _input_el: ElementRef<HTMLInputElement>;\n\n    @HostListener('document:click', ['$event'])\n    public checkClick(event) {\n        if (!this._el?.nativeElement?.contains(event.target)) {\n            this.show = false;\n            this._input_el.nativeElement.blur();\n        }\n    }\n\n    @HostListener('document:touchstart', ['$event']) public onTouch = (e) =>\n        this.checkClick(e);\n\n    constructor(\n        private _el: ElementRef<HTMLElement>,\n        private _search: ExploreSearchService,\n        private _router: Router,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public showSearch() {\n        this.show = true;\n        if (this._input_el?.nativeElement) {\n            this.timeout(\n                'focus',\n                () => this._input_el.nativeElement.focus(),\n                300\n            );\n        }\n    }\n\n    public closeSearch(e?: any) {\n        this.show = false;\n        this.search_str = '';\n        this.setFilter('');\n        if (this._input_el?.nativeElement) {\n            this._input_el.nativeElement.focus();\n            this._input_el.nativeElement.blur();\n        }\n    }\n\n    public select(item: SearchResult) {\n        this.search_str = item.name;\n        const query: any = {};\n        const type =\n            item.type === 'space'\n                ? 'space'\n                : item.type === 'feature'\n                ? 'feature'\n                : 'user';\n        query[type] = item.id;\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: query,\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        OverlayModule,\n        PortalModule,\n        FormFieldsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { BaseClass, Identity } from '@placeos/common';\nimport { VirtualKeyboardComponent } from '@placeos/components';\nimport {\n    Building,\n    BuildingLevel,\n    OrganisationService,\n} from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: '[bootstrap]',\n    template: `\n        <div\n            form\n            class=\"absolute top-2 left-1/2 transform -translate-x-1/2 bg-white overflow-hidden flex flex-col items-center shadow rounded\"\n        >\n            <header\n                class=\"px-4 py-2 bg-primary text-white w-full text-lg font-medium mb-2\"\n            >\n                Map Kiosk Setup\n            </header>\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div *ngIf=\"buildings && buildings.length\">\n                    <label>Select a building from the dropdown below</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            #select\n                            building\n                            [(ngModel)]=\"active_building\"\n                            (ngModelChange)=\"updateRotations()\"\n                            placeholder=\"Select building\"\n                        >\n                            <mat-option\n                                *ngFor=\"let option of buildings\"\n                                [value]=\"option\"\n                            >\n                                {{ option.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div *ngIf=\"levels && levels.length\">\n                    <label>Select a level from the dropdown below</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            #select\n                            level\n                            [(ngModel)]=\"active_level\"\n                            placeholder=\"Select level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let option of levels\"\n                                [value]=\"option\"\n                            >\n                                {{ option.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div *ngIf=\"rotations && rotations.length\">\n                    <label>\n                        Please select an orientation from the dropdown below\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            #select\n                            [(value)]=\"active_rotation\"\n                            placeholder=\"Select orientation\"\n                        >\n                            <mat-option\n                                *ngFor=\"let option of rotations\"\n                                [value]=\"option\"\n                            >\n                                {{ option.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div *ngIf=\"locations && locations.length\">\n                    <label>\n                        Please select an fixed location from the dropdown below\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            #select\n                            [(value)]=\"active_location\"\n                            placeholder=\"Select location\"\n                        >\n                            <mat-option\n                                *ngFor=\"let option of locations\"\n                                [value]=\"option\"\n                            >\n                                {{ option.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <button\n                    mat-button\n                    class=\"mb-2\"\n                    [disabled]=\"!active_building && !active_level\"\n                    (click)=\"bootstrapKiosk()\"\n                >\n                    Finish Setup\n                </button>\n            </ng-container>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 m-auto\">\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n\n            [form] > div {\n                padding: 0 1em;\n            }\n        `,\n    ],\n})\nexport class BootstrapComponent extends BaseClass implements OnInit {\n    /** Loading state of the bootstrap */\n    public loading: string;\n    /** Actively selected building */\n    public active_building: Building;\n    /** Actively selected level */\n    public active_level: BuildingLevel;\n    /** Actively selected level */\n    public active_rotation: Identity;\n    /** Actively selected location */\n    public active_location: Identity;\n\n    public rotations: Identity[] = [];\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** List of available levels */\n    public get levels(): readonly BuildingLevel[] {\n        if (!this.active_building) {\n            return [];\n        }\n        return this._org.levelsForBuilding(this.active_building) || [];\n    }\n\n    /** List of available locations */\n    public get locations(): readonly Identity[] {\n        if (!this.active_level) {\n            return [];\n        }\n        return this.active_level.locations || [];\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('osk')) {\n                    const osk_enabled = params.get('osk') === 'true';\n                    localStorage.setItem('OSK.enabled', `${osk_enabled}`);\n                }\n                if (params.has('clear') && params.get('clear') === 'true') {\n                    localStorage.removeItem('KIOSK.building');\n                    localStorage.removeItem('KIOSK.level');\n                    localStorage.removeItem('KIOSK.orientation');\n                }\n                if (params.has('level')) {\n                    const level = this._org.levelWithID([params.get('level')]);\n                    if (level) {\n                        this.active_level = level;\n                        this.bootstrapKiosk();\n                    }\n                }\n            })\n        );\n        this.timeout('check', () => this.checkBootstrap(), 1000);\n    }\n\n    public updateRotations() {\n        const orientations = this.active_building.orientations;\n        const rotations: Identity[] = [];\n        for (const key in orientations) {\n            if (orientations[key]) {\n                rotations.push({\n                    id: key,\n                    name: `${key.split('_').join(' ')} (${\n                        orientations[key] * 90\n                    }°)`,\n                    value: orientations[key],\n                });\n            }\n        }\n        this.rotations = rotations;\n        this.active_rotation = this.rotations[0];\n    }\n\n    /**\n     * Store bootstrapped values and navigate to the main page\n     */\n    public bootstrapKiosk() {\n        this.loading = 'Bootstrapping application...';\n        if (this.active_level) {\n            if (localStorage) {\n                localStorage.setItem(\n                    'KIOSK.building',\n                    this.active_building?.id || this.active_level.parent_id\n                );\n                localStorage.setItem('KIOSK.level', this.active_level.id);\n                if (this.active_rotation) {\n                    localStorage.setItem(\n                        'KIOSK.orientation',\n                        `${this.active_rotation.id}`\n                    );\n                }\n                if (this.active_location) {\n                    localStorage.setItem(\n                        'KIOSK.location',\n                        `${this.active_location.id}`\n                    );\n                }\n            }\n            this._router.navigate(['/explore']);\n        }\n        this.loading = null;\n    }\n\n    /**\n     * Check for any existing bootstrapped values\n     */\n    private checkBootstrap() {\n        this.loading = 'Checking for existing parameters...';\n        if (localStorage) {\n            const building_id = localStorage.getItem('KIOSK.building');\n            const level_id = localStorage.getItem('KIOSK.level');\n            if (building_id && level_id) {\n                this._router.navigate(['/explore']);\n            }\n        }\n        VirtualKeyboardComponent.enabled =\n            localStorage.getItem('OSK.enabled') === 'true';\n        this.loading = null;\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'footer-menu',\n    template: `\n        <div\n            class=\"flex items-center bg-white divide-x border-t border-solid border-gray-300 w-full\"\n        >\n            <a\n                mat-button\n                class=\"flex-1 h-16 !rounded-none\"\n                [routerLink]=\"['/desks']\"\n                routerLinkActive=\"!bg-primary !text-white\"\n            >\n                <div class=\"flex flex-col items-center justify-center\">\n                    <app-icon class=\"text-2xl\">book</app-icon>\n                    <p class=\"m-0\">Book Desk</p>\n                </div>\n            </a>\n            <a\n                mat-button\n                class=\"flex-1 h-16 !rounded-none\"\n                [routerLink]=\"['/explore']\"\n                routerLinkActive=\"!bg-primary !text-white\"\n            >\n                <div class=\"flex flex-col items-center justify-center\">\n                    <app-icon class=\"text-2xl\">place</app-icon>\n                    <p class=\"m-0\">Map</p>\n                </div>\n            </a>\n        </div>\n    `\n})\nexport class FooterMenuComponent {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseClass, current_user, SettingsService } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: '[desk-booking]',\n    template: ` <footer-menu></footer-menu> `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background: #f0f0f0;\n            }\n\n            desk-flow-listing {\n                max-height: calc(100% - 4rem);\n            }\n        `,\n    ],\n})\nexport class DeskBookingComponent extends BaseClass implements OnInit {\n    public get countdown_time() {\n        return (\n            this._settings.get('app.general.kiosk_reset_delay') || 5 * 60 * 1000\n        );\n    }\n\n    constructor(private _settings: SettingsService, private _router: Router) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.resetCountdown();\n    }\n\n    public resetCountdown() {\n        this.timeout(\n            'reset',\n            () => this._router.navigate(['/explore']),\n            this.countdown_time\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from '@placeos/explore';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'explore-level-select',\n    template: `\n        <div\n            class=\"m-2 rounded overflow-hidden bg-white shadow border border-solid border-gray-300\"\n        >\n            <button\n                *ngFor=\"let lvl of levels | async\"\n                class=\"flex flex-col items-center justify-center h-16 w-16 p-2 border-none\"\n                [class.active]=\"lvl.id === (level | async)?.id\"\n                (click)=\"setLevel(lvl)\"\n                matRipple\n            >\n                <div class=\"text-2xl\">{{ lvl.number }}</div>\n                <p class=\"text-sm whitespace-nowrap m-0\">\n                    {{ lvl.display_name || lvl.name }}\n                </p>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            .active {\n                color: var(--primary) !important;\n            }\n\n            button:not(:first-child) {\n                border-top: 1px solid #ccc !important;\n            }\n        `,\n    ],\n})\nexport class ExploreLevelSelectComponent {\n    public readonly levels = this._orgs.active_levels;\n    public readonly level = this._state.level;\n\n    public readonly setLevel = (lvl) => this._state.setLevel(lvl.id);\n\n    constructor(\n        private _orgs: OrganisationService,\n        private _state: ExploreStateService\n    ) {}\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UnauthorisedComponent } from '@placeos/components';\nimport { BootstrapComponent } from './bootstrap.component';\nimport { DeskBookingComponent } from './desk-booking.component';\nimport { ExploreComponent } from './explore.component';\n\nconst routes: Routes = [\n    {\n        path: 'unauthorised',\n        component: UnauthorisedComponent,\n    },\n    { path: 'bootstrap', component: BootstrapComponent },\n    { path: 'explore', component: ExploreComponent },\n    { path: 'desks', component: DeskBookingComponent },\n    { path: '**', redirectTo: 'bootstrap' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, HostListener, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BaseClass, current_user, SettingsService } from '@placeos/common';\nimport { VirtualKeyboardComponent } from '@placeos/components';\nimport {\n    ExploreDesksService,\n    ExploreSpacesService,\n    ExploreStateService,\n    ExploreZonesService,\n} from '@placeos/explore';\nimport { OrganisationService } from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: '[app-explore]',\n    template: `\n        <div\n            class=\"absolute top-0 left-0 bg-white rounded-br-xl p-2 z-10 shadow\"\n        >\n            <img class=\"w-32\" [src]=\"logo?.src\" />\n        </div>\n        <!-- <explore-map-stack class=\"z-0\"></explore-map-stack> -->\n        <div class=\"flex-1 h-1/2 w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async)?.zoom\"\n                [center]=\"(positions | async)?.center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n                [labels]=\"labels | async\"\n            ></i-map>\n        </div>\n        <explore-zoom-controls\n            class=\"absolute top-1/2 transform -translate-y-1/2 right-0\"\n        ></explore-zoom-controls>\n        <explore-level-select\n            class=\"absolute left-1 top-1/2 transform -translate-y-1/2 z-10\"\n        ></explore-level-select>\n        <explore-search class=\"absolute top-1 right-1\"></explore-search>\n        <!-- <footer-menu class=\"w-full\"></footer-menu> -->\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                display: flex;\n                flex-direction: column;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: #f0f0f0;\n            }\n        `,\n    ],\n    providers: [ExploreSpacesService, ExploreDesksService, ExploreZonesService],\n})\nexport class ExploreComponent extends BaseClass implements OnInit {\n    public reset_delay = 180;\n    public get logo() {\n        return this._settings.get('app.logo');\n    }\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._state.map_labels;\n    /** Observable for the active map */\n    public readonly options = this._state.options;\n\n    @HostListener('window:mousedown') public onMouse = () =>\n        this.timeout('reset', () => this.resetKiosk(), this.reset_delay * 1000);\n    @HostListener('window:touchstart') public onTouch = () =>\n        this.timeout('reset', () => this.resetKiosk(), this.reset_delay * 1000);\n\n    constructor(\n        private _state: ExploreStateService,\n        private _s: ExploreSpacesService,\n        private _desks: ExploreDesksService,\n        private _zones: ExploreZonesService,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.reset_delay =\n            this._settings.get('app.inactivity_timeout_secs') || 180;\n        this.resetKiosk();\n        VirtualKeyboardComponent.enabled =\n            localStorage.getItem('OSK.enabled') === 'true';\n    }\n\n    public resetKiosk() {\n        if ((document.activeElement as any)?.blur)\n            (document.activeElement as any)?.blur();\n        const level = localStorage.getItem('KIOSK.level');\n        this._state.setPositions(1, { x: 0.5, y: 0.5 });\n        if (level) this._state.setLevel(level);\n        this._dialog.closeAll();\n    }\n}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), []);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/zones',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.tags === 'org') {\n            return MOCK_ORGS;\n        } else if (request.query_params.tags === 'building') {\n            return MOCK_BUILDINGS;\n        } else if (request.query_params.tags === 'level') {\n            return MOCK_LEVELS;\n        }\n        throw { status: 404, message: 'Zones not found' };\n    },\n});\n\nfunction padString(str: string | number, length: number = 5) {\n    str = `${str}`;\n    while (str.length < length) str = `0${str}`;\n    return str;\n}\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.name === 'bindings') {\n            return {\n                bindings: {\n                    details: {\n                        area_management: 'space-0',\n                        location_services: 'space-0',\n                    },\n                },\n            };\n        }\n        if (request.query_params.name === 'catering') {\n            return {\n                catering: {\n                    details: MOCK_MENU,\n                },\n            };\n        }\n        if (request.query_params.name === 'desks') {\n            const parts = request.route_params.id.split('-');\n            const id = parts[parts.length - 1];\n            return generateMockDeskMetadata(id);\n        }\n        if (\n            MOCK_METADATA[request.route_params.id] &&\n            MOCK_METADATA[request.route_params.id][request.query_params.name]\n        ) {\n            return MOCK_METADATA[request.route_params.id];\n        } else if (\n            MOCK_METADATA[request.route_params.id] &&\n            !request.query_params.name\n        ) {\n            return MOCK_METADATA[request.route_params.id] || {};\n        }\n        return {};\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        if (!MOCK_METADATA[request.route_params.id])\n            MOCK_METADATA[request.route_params.id] = {};\n        MOCK_METADATA[request.route_params.id][request.body.name] =\n            request.body;\n    },\n});\n\nconst DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\nfunction generateMockDeskMetadata(id: string) {\n    return {\n        desks: {\n            details: new Array(30).fill(0).map((_, idx) => ({\n                id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                bookable: predictableRandomInt(9999) % 4 !== 0,\n                group: '',\n                features: DESK_FEATURES.filter(\n                    (_) => predictableRandomInt(99999) % 3 === 0\n                ),\n            })),\n        },\n    };\n}\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id/children',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const zone = MOCK_BUILDINGS.find(\n            (_) => _.id === request.route_params.id\n        );\n        if (!zone)\n            throw {\n                status: 404,\n                message: `Unable to find zone with id \"${request.route_params.id}\"`,\n            };\n        return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map((lvl) => {\n            const parts = lvl.id.split('-');\n            const id = parts[parts.length - 1];\n            return {\n                zone: lvl,\n                metadata: generateMockDeskMetadata(id),\n            };\n        });\n    },\n});\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/users/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.id === 'current') {\n            return ACTIVE_USER;\n        }\n        const person = MOCK_STAFF.find(user => user.email === request.route_params.id);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_STAFF.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const id = decodeURIComponent(request.route_params.id);\n        const person = MOCK_STAFF.find(user => user.email === id);\n        if (person) {\n            return {\n                ...person,\n                location: generateLocation()\n            };\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_GUESTS.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const person = MOCK_GUESTS.find(user => user.email === request.route_params.email);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email/meetings',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.email) {\n            const email = request.route_params.email.toLowerCase();\n            const events = MOCK_EVENTS.filter(\n                (event) => event.attendees.find(user => user.email.toLowerCase() === email)\n            );\n            return events;\n        }\n        throw { status: 404, message: `Unable to find meetings with guest with email ${request.route_params.email}` };\n    },\n});\n\n\n\nconst LOCATION_TYPES = ['meeting', 'desk_id', 'laptop', 'mobile', 'geo', 'none'];\n\nfunction generateLocation() {\n    const type = LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n    const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n    const level_spaces = MOCK_SPACES.filter(s => s.zones.includes(level.id));\n    const space = level_spaces[predictableRandomInt(level_spaces.length)] || {};\n    const location: HashMap = {};\n    switch (type) {\n        case 'meeting':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                system: space.id,\n                map_id: space.map_id,\n                event_id: ''\n            };\n            break;\n        case 'desk_id':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                map_id: space.map_id,\n                checked_in: dayjs().unix()\n            };\n            break;\n        case 'laptop':\n        case 'mobile':\n            location[type] = {\n                building: level.parent_id,\n                level: level.id,\n                x: +predictableRandomInt(10000),\n                y: +predictableRandomInt(5000),\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n        case 'geo':\n            location.geo = {\n                lat: predictableRandomInt(180) - 90,\n                lon: predictableRandomInt(360) - 180,\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n    }\n    return location;\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $powerup() {\n        console.log('Power On');\n        this.active = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.active = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nMOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/systems',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        return MOCK_SPACES;\n    }\n});\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        let events = MOCK_EVENTS;\n        if (!_.query_params.zone_ids) {\n            events = events.filter(\n                (event) =>\n                    !!event.attendees.find(\n                        (user) => user.email === ACTIVE_USER.email\n                    )\n            );\n        }\n        if (_.query_params.period_start) {\n            events = events.filter((e) =>\n                timePeriodsIntersect(\n                    _.query_params.period_start,\n                    _.query_params.period_end,\n                    e.event_start,\n                    e.event_end\n                )\n            );\n        }\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = {\n            ...request.body,\n            id: `-cal-event-${predictableRandomInt(999)}`,\n        };\n        new_event.attendees = [\n            MOCK_STAFF.find((_) => _.email === new_event.host),\n            ...(new_event.attendees || []),\n        ];\n        new_event.attendees.forEach((user) => {\n            if (user.zones) user.resource = true;\n        });\n\n        if (new_event.system) {\n            new_event.attendees = [\n                ...(new_event.attendees || []),\n                { ...new_event.system, resource: true },\n            ];\n        }\n        MOCK_EVENTS.push(new_event);\n        return new_event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const item = MOCK_EVENTS.find(\n            (event) => event.id === request.route_params.id\n        );\n        if (item) {\n            return item;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'DELETE',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex(\n            (event) => event.id === request.route_params.id\n        );\n        if (index > 0) {\n            if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                MOCK_EVENTS.splice(index, 1);\n            } else {\n                const user = MOCK_EVENTS[index].attendees.find((_) => _.email === ACTIVE_USER.email);\n                user.response_status = 'declined';\n            }\n            return;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex(\n            (event) => event.id === request.route_params.id\n        );\n        if (index >= 0) {\n            return MOCK_EVENTS.splice(index, 1, request.body);\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id/guests/:email/checkin',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const event = MOCK_EVENTS.find(\n            (event) => event.id === request.route_params.id\n        );\n        if (event) {\n            const checked_in = (event.extension_data as any).checked_in || [];\n            (event.extension_data as any).checked_in = checked_in.concat([\n                request.route_params.email,\n            ]);\n            return event;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { timePeriodsIntersect } from '@placeos/common';\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => [],\n});\n\nconst handleSpaceAvailability = (request) => {\n    const start = +request.query_params.period_start;\n    const end = +request.query_params.period_end;\n    const zones = (request.query_params.zone_ids || '')\n        .split(',')\n        .filter((i) => !!i);\n    const systems = (request.query_params.system_ids || '')\n        .split(',')\n        .filter((i) => !!i);\n\n    const spaces = MOCK_SPACES.filter((space) =>\n        zones.length\n            ? zones.reduce(\n                  (has, zone) => has && space.zones.includes(zone),\n                  true\n              )\n            : systems.length\n            ? systems.includes(space.id)\n            : true\n    ).filter((space) => {\n        const bookings = MOCK_EVENTS.filter((event) =>\n            event.attendees.find((user) => user.id === space.id)\n        );\n        for (const event of bookings) {\n            if (\n                timePeriodsIntersect(\n                    start,\n                    end,\n                    event.event_start,\n                    event.event_end\n                )\n            )\n                return false;\n        }\n        return true;\n    });\n    return spaces;\n};\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/availability',\n    metadata: {},\n    method: 'GET',\n    callback: (request) =>\n        handleSpaceAvailability(request).map((_) => ({\n            resource: _,\n        })),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/free_busy',\n    metadata: {},\n    method: 'GET',\n    callback: (request) =>\n        handleSpaceAvailability(request).map((_) => ({\n            resource: _,\n        })),\n});\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const events = MOCK_BOOKINGS.filter(\n            (event) =>\n                timePeriodsIntersect(\n                    _.query_params.period_start,\n                    _.query_params.period_end,\n                    event.booking_start,\n                    event.booking_end\n                ) && event.type === _.query_params.type\n        );\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n        if (!event)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${_.route_params.id}`,\n            };\n        return event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = {\n            ...request.body,\n            id: `-booking-${predictableRandomInt(999)}`,\n        };\n        MOCK_BOOKINGS.push(new_event);\n        return new_event;\n    },\n});\n\nconst updateBooking = (id, data) => {\n    const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n    if (index < 0)\n        throw {\n            status: 404,\n            message: `Unable to find booking with ID ${id}`,\n        };\n    const new_event = { ...data };\n    MOCK_BOOKINGS.splice(index, 1, new_event);\n    return new_event;\n};\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'PUT',\n    callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/approve',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            approved: true,\n            rejected: false,\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/reject',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            approved: false,\n            rejected: true,\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/check_in',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            checked_in: req.query_params.state === 'true',\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'DELETE',\n    callback: (req) => {\n        const index = MOCK_BOOKINGS.findIndex(\n            (e) => e.id === req.route_params.id\n        );\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${req.route_params.id}`,\n            };\n        MOCK_BOOKINGS.splice(index, 1);\n        return;\n    },\n});\n","import { log } from '@placeos/common';\n\nimport * as ZONE_MOCKS from './lib/api/zones.mock';\nimport * as USER_MOCKS from './lib/api/users.mock';\nimport * as SYSTEM_MOCKS from './lib/api/systems.mock';\nimport * as EVENT_MOCKS from './lib/api/events.mock';\nimport * as CALENDAR_MOCKS from './lib/api/calendars.mock';\nimport * as BOOKING_MOCKS from './lib/api/bookings.mock';\n\nimport * as BINDING_MOCKS from './lib/systems-bindings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n    BINDING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        console.log('MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 5 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                currentUser()?.email?.split('@')[1]\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\n\nimport { ComponentsModule, UnauthorisedComponent } from '@placeos/components';\nimport { SharedExploreModule } from '@placeos/explore';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from 'libs/components/src/lib/app.component';\nimport { environment } from '../environments/environment';\nimport { BootstrapComponent } from './bootstrap.component';\nimport { ExploreComponent } from './explore.component';\nimport { ExploreLevelSelectComponent } from './explore-level-select.component';\nimport { ExploreMapStackComponent } from './explore-map-stack.component';\nimport { FooterMenuComponent } from './footer-menu.component';\nimport { DeskBookingComponent } from './desk-booking.component';\n\nimport * as Sentry from '@sentry/angular';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        UnauthorisedComponent,\n        BootstrapComponent,\n        ExploreComponent,\n        ExploreLevelSelectComponent,\n        ExploreMapStackComponent,\n        DeskBookingComponent,\n        FooterMenuComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatRippleModule,\n        MatButtonToggleModule,\n        ComponentsModule,\n        FormFieldsModule,\n        SharedExploreModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export const environment = {\n    production: true,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"],"sourceRoot":"webpack:///"}