{"version":3,"sources":["./apps/visitor-kiosk/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./apps/visitor-kiosk/src/app/ui/shared.module.ts","./apps/visitor-kiosk/src/app/ui/take-photo/take-photo.component.ts","./apps/visitor-kiosk/src/app/ui/topbar-header.component.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/index.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/components/src/lib/app.component.ts","./apps/visitor-kiosk/src/app/bootstrap/bootstrap.component.html","./apps/visitor-kiosk/src/app/bootstrap/bootstrap.component.ts","./apps/visitor-kiosk/src/app/welcome.component.ts","./apps/visitor-kiosk/src/app/app-routing.module.ts","./apps/visitor-kiosk/src/app/overlays/overlays.module.ts","./apps/visitor-kiosk/src/app/app.module.ts","./apps/visitor-kiosk/src/environments/environment.ts","./apps/visitor-kiosk/src/main.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/visitor-kiosk/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/angular-animations.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/placeos.ts","./libs/common/src/lib/user-state.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/base.class.ts","./libs/common/src/lib/general.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/map-pin.component.ts","./libs/components/src/lib/map-radius.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/components.module.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/components/src/lib/custom-tooltip.component.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/map-polygon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/user-avatar.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/events/src/lib/event.class.ts","./libs/events/src/lib/helpers.ts","./libs/organisation/src/lib/desk.class.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/users/src/lib/location.class.ts","./libs/users/src/lib/guests.fn.ts","./libs/users/src/lib/staff.fn.ts","./libs/users/src/lib/user.class.ts","./libs/users/src/lib/user.utilities.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","MATERIAL_MODULES","CDK_MODULES","SharedContentModule","TakePhotoComponent","photoAccepted","hasPhoto","canvasContext","constraints","audio","video","width","min","max","height","imgSrc","setTimeout","this","getCanvasContext","stopCapture","canvas","console","log","document","getElementById","startCapture","navigator","mediaDevices","getUserMedia","stream","srcObject","getVideoTracks","forEach","track","stop","getContext","drawImage","clearRect","toDataURL","emit","err","error","cancelPhoto","TopbarHeaderComponent","format","MOCK_MENU","name","unit_price","category","options","group","generateCateringOrder","event","duration","differenceInMinutes","event_start","event_end","mx","length","event_id","invoice_number","charge_code","deliver_at","addMinutes","Math","floor","items","Array","fill","map","_","idx","quantity","MOCK_ORGS","created_at","updated_at","description","tags","count","capacity","parent_id","triggers","MOCK_BUILDINGS","levels","MOCK_LEVELS","bld","level","building","num","map_id","substr","endsWith","split","type","location","display_name","mockLevel","reduce","p","c","concat","MOCK_METADATA","current","contacts","details","email","first_name","last_name","ZONE_MOCKS","padString","str","path","metadata","method","callback","request","query_params","status","message","bindings","area_management","location_services","catering","parts","route_params","generateMockDeskMetadata","body","DESK_FEATURES","desks","bookable","features","filter","zone","find","lvl","registerMocks","DOMAIN","PREDEF_USERS","ACTIVE_USER","groups","MOCK_STAFF","i","join","toLowerCase","MOCK_GUESTS","visit_expected","randomSpaceFeatures","f","numFeatures","res","push","el","r","indexOf","MOCK_SPACES","zones","d","EVENT_TIME","startOf","hour","nextEventTime","save","next","add","unix","event_status","randomStatus","rnd","MOCK_EVENTS","index","PEOPLE","attendees","sort","a","b","space","resource","unshift","host","calendar","creator","response_status","title","private","timezone","all_day","recurring","recurrence","attachments","system","extension_data","setup","breakdown","event_spaces","USER_MOCKS","person","user","q","search","includes","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","s","meeting","checked_in","x","y","last_seen","subtract","geo","lat","lon","RoomModule","_data","volume","connected","active","input_list","output_list","env_sources","inputs","Object","outputs","t","source","key","input","output","$updateState","routes","following","value","state","mute","$mute","locked","data","Mic1","mod","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","overrides","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","bookings","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","setInterval","u","date","Date","bkn","valueOf","isBefore","start","pending","subSeconds","addSeconds","MockLocationServicesModule","overview","username","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","number","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","interval","CaptureModule","live","remaining","clearInterval","$start","createCaptureModule","SYSTEM_MOCKS","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","createSystem","EVENT_MOCKS","events","zone_ids","period_start","period_end","new_event","item","findIndex","splice","CALENDAR_MOCKS","handleSpaceAvailability","end","systems","system_ids","has","setHours","startOfDay","getUnixTime","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","BOOKING_MOCKS","updateBooking","AppComponent","_tracing","_settings","_org","_spaces","_cache","_snackbar","_hotkey","_clipboard","super","listen","localStorage","setItem","getItem","reload","copy","clipboard","readText","tkn","addHours","initialised","pipe","first","toPromise","get","settings","mock","origin","catch","onInitError","timeout","clearTimeout","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","is_logged_in","BootstrapComponent","_route","_router","rotations","buildings","active_building","levelsForBuilding","active_level","locations","subscription","queryParamMap","subscribe","params","removeItem","checkBootstrap","orientations","hasOwnProperty","active_rotation","loading","active_location","navigate","building_id","level_id","checkForOldBootstrapParameters","orientation","component","WelcomeComponent","route","paramMap","loadChildren","m","AppExploreModule","VisitorCheckinModule","redirectTo","AppRoutingModule","useHash","SharedOverlaysModule","AppModule","provide","useValue","showDialog","deps","enabled","bootstrapModule","Calendar","primary","summary","can_edit","availability","starts_at","ends_at","hidden","CALENDAR_ENDPOINT","calendarsToSpaces","org","list","cal","levelWithID","querySpaceAvailability","query","queryCalendarAvailability","querySpaceFreeBusy","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","window","addEventListener","mapKey","last_down","BehaviorSubject","asObservable","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","getValue","v","replace","non_meta","DEFAULT_SETTINGS","debug","composer","domain","protocol","port","use_domain","local_login","app","short_name","logo_light","src","logo_dark","general","menu","children","copyright","position","checkin","stages","home","background","tiles","icon","class","content","help","link","columns","booking","booking_types","display","show_fields","html_body","multiple_spaces","desk_start","space_display","show_images","directory","show_avatars","min_search_length","explore","colors","can_select_building","show_legend_group_names","legend","Spaces","Desks","Zones","Icons","SettingsService","_title","_app_name","_overrides","_subjects","_observables","now","time","built","isSameDay","init","getTitle","setTitle","pathname","slice","toUpperCase","_initialised","application","override_settings","override","opacity","_service","_available","_activated","_timer","setNotifyOutlet","snackbar","notify","action","on_action","config","snackbar_ref","open","panelClass","dismiss","onAction","notifySuccess","msg","notifyError","notifyInfo","info","setupCache","cache","isEnabled","unsubscribe","available","hash","activateUpdate","activated","checkForUpdate","setupPlace","hostname","url","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","_current_user","current_user","currentUser","jest","delay","retry","toQueryString","BaseClass","_timers","_intervals","_subscriptions","destroy","unsub","fn","Function","contains","subs","k","setAppName","args","force","app_name","getItemWithKeys","shift","unique","array","pos","arr","randomInt","ceil","random","openConfirmModal","dialog","ref","race","componentInstance","reason","afterClosed","close","csvToJson","csv","delimiter","objPattern","RegExp","arrMatches","arrData","exec","headers","row","element","JSON","parse","downloadFile","filename","contents","createElement","setAttribute","encodeURIComponent","style","appendChild","click","removeChild","flatten","an_array","stack","pop","isArray","reverse","timePeriodsIntersect","start1","end1","start2","end2","seed","h","imul","charCodeAt","xmur3","rand","predictableRandomInt","timeFormatString","localeString","toLocaleTimeString","querySelector","getAttribute","language","is24HourTime","getInvalidFields","form","invalid","controls","valid","ActionIconComponent","className","PopoutMenuComponent","actions","show","MapPinComponent","_details","stroke","show_message","MapRadiusComponent","_el","zoom","radius","formatDistanceToNow","updateRadius","box","nativeElement","getBoundingClientRect","StatusOverlayComponent","links","MAT_MODULES","ComponentsModule","CONFIRM_METADATA","maxHeight","maxWidth","ConfirmModalComponent","_dialog_ref","confirm_text","cancel_text","disableClose","enableClose","injector","CustomTooltipData","CustomTooltipComponent","_element","_overlay","_injector","backdrop","hover","_overlay_ref","onClick","onEnter","onLeave","changes","_updateInjector","x_pos","y_pos","ngOnDestroy","_updateType","_portal","create","hasBackdrop","positionStrategy","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","attach","backdropClick","dispose","providers","parent","GlobalLoadingComponent","IconComponent","MAP_FEATURE_DATA","InteractiveMapComponent","center","injectors","_on_changes","updateDisplay","_feature_list","toArray","viewer","createView","focus","focusOn","styles","labels","updateView","feature_list","desired_zoom","desired_center","_outlet_el","rect","mappings","w","MapPolygonComponent","_cdr","color","padding","scale","offset_x","offset_y","points","point_list","data$","processPoints","diff","x_min","x_max","y_min","y_max","range","ratio","edge_padding","detectChanges","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","UserAvatarComponent","DEFAULT_KEYS","VirtualKeyboardComponent","keyset","onFocus","onBlur","blur","global","bottom","centerHorizontally","cursor_pos","selectionStart","dispatchEvent","InputEvent","updateKeyState","focusInput","selectionEnd","CateringItem","discount_cap","accept_points","total_cost","options_string","localeCompare","CateringOrder","system_id","item_count","amount","getTime","_default_user","setDefaultCreator","CalendarEvent","roundToNearestMinutes","nearestTo","resources","recurring_master_id","organiser","master","range_start","range_end","pattern","days_of_week","old_system","is_external","obj","set","hours","minutes","is_today","isAfter","eventStatus","every","some","DURATION_MAP","month","months","week","weeks","day","days","minute","DEFAULT_RULES","auto_approve","stringToMinutes","addToDate","filterSpacesFromRules","spaces","rulemap","ruleset","checkRulesMatch","rules","rulesForSpace","matches","conditions","is_before","is_after","min_length","max_length","Desk","toJSON","qr_code","BuildingLevel","Organisation","raw_data","Building","disc_info","discovery_info","zone_id","extras","extra_id","extra_name","loan_items","_roles","roles","_lockers","lockers","locker_structure","_systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl_features","feature","catering_hours","visitor_space","holding_bay","address","booking_details","booking_rules","catering_restricted_from","currency","OrganisationService","_buildings","_active_building","_levels","building_list","level_list","active_levels","combineLatest","_building_settings","buildingSettings","bld_id","_organisation","id_list","tries","load","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","auth","org_zone","limit","prev","curr","SpaceSelectItemComponent","SpaceSelectModalComponent","space_types","available_spaces","switchMap","shareReplay","filtered_spaces","tap","multiple","space_map","SPACE_COUNT","generateMockSpace","linked","long_name","searchable","controlable","cost_hour","support_url","linked_rooms","image","Space","configurations","SpacesService","_list","_compare","loadSpaces","predicate","valid_spaces","organisation","sys","NewUserModalComponent","markAllAsTouched","new_user","UserFormComponent","touched","SharedUsersModule","MapLocation","GUEST_ENDPOINT","searchGuests","showGuest","listGuestMeetings","STAFF_ENDPOINT","searchStaff","showStaff","User","phone","notes","photo","organizer","required","sys_admin","support","assistance_required","GuestUser","preferred_beverage","accepted_terms_conditions","StaffUser","card_number","staff_id","USER_DOMAIN","setInternalUserDomain","generateUserForm","fields","generateGuestForm"],"mappings":"iFAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,KAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,IAGRL,EAAyBQ,KAAO,IAAM,GACtCR,EAAyBG,QAAUH,EACnCA,EAAyBS,GAAK,KAC9BC,EAAOC,QAAUX,G,qUCuBjB,MAWMY,EAA0B,CAC5B,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGEC,EAAqB,CACvB,MAwBG,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAjBA,CACL,KACA,KACA,KACA,KACA,KACA,QACGF,KACAC,GAGH,KApCJ,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KAIA,Q,GAwBG,I,iICzDK,qBAA2E,+DACvE,wBACJ,S,wCAGA,qBAAmC,iEAC/B,oBACJ,QACA,qBAAmB,iEACf,oBACJ,SAsBL,Y,MAAME,EAiBT,cAhBiB,KAAAC,cAAgB,IAAI,MACE,KAAAC,UAAW,EAG1C,KAAAC,cAAgB,KAEhB,KAAAC,YAAc,CAClBC,OAAO,EACPC,MAAO,CACHC,MAAO,CAAEC,IAAK,IAAKC,IAAK,KACxBC,OAAQ,CAAEF,IAAK,IAAKC,IAAK,OAI1B,KAAAE,OAAS,KAIT,WACHC,WAAW,IAAMC,KAAKC,mBAAoB,KAGvC,cACHD,KAAKE,cACLF,KAAKP,MAAQ,KACbO,KAAKV,cAAgB,KACrBU,KAAKG,OAAS,KACdH,KAAKF,OAAS,KAGV,eAIJ,GAHAE,KAAKF,OAAS,KACdM,QAAQC,IAAI,oCACZL,KAAKP,MAAQa,SAASC,eAAe,UAChCP,KAAKP,MACN,OAAOM,WAAW,IAAMC,KAAKQ,eAAgB,KAE7CC,UAAUC,aACLC,aAAaX,KAAKT,aAClBf,KAAMoC,IACHZ,KAAKP,MAAMoB,UAAYD,IAK/B,cACJR,QAAQC,IAAI,mCACRL,KAAKP,OAASO,KAAKP,MAAMoB,WACzBb,KAAKP,MAAMoB,UACNC,iBACAC,QAASC,GAAUA,EAAMC,QAI9B,mBAGJ,GAFAb,QAAQC,IAAI,wCACZL,KAAKG,OAASG,SAASC,eAAe,WACjCP,KAAKG,OACN,OAAOJ,WAAW,IAAMC,KAAKC,mBAAoB,KAErDD,KAAKV,cAAgBU,KAAKG,OAAOe,WAAW,MAC5CnB,WAAW,IAAMC,KAAKQ,eAAgB,KAGnC,YACHJ,QAAQC,IAAI,iCACZL,KAAKV,cAAc6B,UACfnB,KAAKP,MACL,EACA,EACAO,KAAKG,OAAOT,MACZM,KAAKG,OAAON,QAEhBG,KAAKX,UAAW,EAChBW,KAAKE,cAGF,cACHE,QAAQC,IAAI,mCACZL,KAAKV,cAAc8B,UACf,EACA,EACApB,KAAKG,OAAOT,MACZM,KAAKG,OAAON,QAEhBG,KAAKX,UAAW,EAChBW,KAAKQ,eAGF,cACH,IACIR,KAAKF,OAASE,KAAKG,OAAOkB,UAAU,aAAc,KAClDrB,KAAKZ,cAAckC,KAAKtB,KAAKF,QAC7BM,QAAQC,IAAI,2CACd,MAAOkB,GACLnB,QAAQoB,MACJ,yDACAD,GAEJvB,KAAKZ,cAAckC,KAAK,MACxBtB,KAAKyB,gB,6CArGJtC,I,wBAAAA,EAAkB,wE,gsBApDvB,iBACI,yBACA,iBAAkB,0BAAc,QAChC,qBAQA,sBAOJ,QACA,iBACI,0BAGJ,QACA,4C,uBAJgC,mCAAiB,gB,qNAgClD,I,uICvBA,Y,MAAMuC,UAA8B,KACvC,WACI,OAAO,IAAQC,OAAO,e,0EAFjBD,KAAqB,GAArBA,I,2BAAAA,EAAqB,qXAhC1B,iBACI,eAKI,iBACJ,QACA,iBAGI,SACJ,QACJ,S,MAVQ,wCAQA,iC,6LAqBT,I,iQCtCA,MAAME,EAAY,CACrB,CACI/C,GAAI,SACJgD,KAAM,SACNC,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAEnD,GAAI,QAASgD,KAAM,YAAaI,MAAO,QACzC,CAAEpD,GAAI,QAASgD,KAAM,QAASI,MAAO,QACrC,CAAEpD,GAAI,QAASgD,KAAM,UAAWI,MAAO,SAAUH,WAAY,IAC7D,CAAEjD,GAAI,QAASgD,KAAM,UAAWI,MAAO,SAAUH,WAAY,IAC7D,CAAEjD,GAAI,QAASgD,KAAM,UAAWI,MAAO,SAAUH,WAAY,IAC7D,CAAEjD,GAAI,QAASgD,KAAM,UAAWI,MAAO,SAAUH,WAAY,MAGrE,CACIjD,GAAI,SACJgD,KAAM,OACNC,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAEnD,GAAI,QAASgD,KAAM,QAASI,MAAO,QACrC,CAAEpD,GAAI,QAASgD,KAAM,UAAWI,MAAO,QACvC,CAAEpD,GAAI,QAASgD,KAAM,OAAQI,MAAO,QACpC,CAAEpD,GAAI,QAASgD,KAAM,YAAaI,MAAO,UAGjD,CAAEpD,GAAI,SAAUgD,KAAM,QAASC,WAAY,IAAKC,SAAU,UAC1D,CACIlD,GAAI,SACJgD,KAAM,SACNC,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAEnD,GAAI,QAASgD,KAAM,YAAaI,MAAO,QACzC,CAAEpD,GAAI,QAASgD,KAAM,SAAUI,MAAO,QACtC,CAAEpD,GAAI,QAASgD,KAAM,YAAaI,MAAO,UAGjD,CACIpD,GAAI,SACJgD,KAAM,UACNC,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAEnD,GAAI,QAASgD,KAAM,YAAaI,MAAO,QACzC,CAAEpD,GAAI,QAASgD,KAAM,YAAaI,MAAO,QACzC,CAAEpD,GAAI,QAASgD,KAAM,YAAaI,MAAO,UAGjD,CACIpD,GAAI,SACJgD,KAAM,eACNC,WAAY,IACZC,SAAU,eACVC,QAAS,CACL,CACInD,GAAI,QACJgD,KAAM,eACNI,MAAO,QACPH,WAAY,IAEhB,CAAEjD,GAAI,QAASgD,KAAM,YAAaI,MAAO,QAASH,WAAY,IAC9D,CACIjD,GAAI,QACJgD,KAAM,gBACNI,MAAO,QACPH,WAAY,IAEhB,CACIjD,GAAI,QACJgD,KAAM,qBACNI,MAAO,QACPH,WAAY,MAIxB,CACIjD,GAAI,SACJgD,KAAM,WACNC,WAAY,IACZC,SAAU,eACVC,QAAS,CACL,CAAEnD,GAAI,QAASgD,KAAM,eAAgBI,MAAO,QAC5C,CAAEpD,GAAI,QAASgD,KAAM,UAAWI,MAAO,QACvC,CAAEpD,GAAI,QAASgD,KAAM,cAAeI,MAAO,WAKhD,SAASC,EAAsBC,GAClC,MAAMC,GAAW,EAAAC,EAAA,GAAoBF,EAAMG,YAAaH,EAAMI,WACxDC,GAAK,QAAqBZ,EAAUa,QAC1C,MAAO,CACH5D,GAAI,UAAS,QAAqB,UAClC6D,SAAUP,EAAMtD,GAChB8D,eAAgB,KAAI,QAAqB,UACzCC,YAAa,KAAI,QAAqB,QACtCC,YAAY,EAAAC,EAAA,GACY,IAApBX,EAAMG,YAC2C,GAAjD,QAAqBS,KAAKC,MAAMZ,EAAW,KAE/Ca,MAAO,IAAIC,MAAM,GAAGC,KAAK,GAAGC,IAAI,CAACC,EAAGC,IAAS,OAAD,wBACrC1B,EAAWY,EAAKc,EAAO1B,EAAUa,SAAO,CAC3CT,QAAS,GACTuB,UAAU,QAAqB,GAAI,OC5GxC,MAAMC,EAAY,CACrB,CACIC,WAAY,WACZC,WAAY,WACZ7B,KAAM,UACN8B,YAAa,GACbC,KAAM,MACNC,MAAO,EACPC,SAAU,EACVC,UAAW,GACXC,SAAU,GACVnF,GAAI,qBAICoF,EAAiB,CAC1B,CACIpC,KAAM,SACN8B,YAAa,GACbC,KAAM,WACNC,MAAO,EACPC,SAAU,EACVC,UAAW,mBACXC,SAAU,GACVnF,GAAI,SACJqF,OAAQ,CAAC,SAAU,WAEvB,CACIrC,KAAM,WACN8B,YAAa,GACbC,KAAM,WACNC,MAAO,EACPC,SAAU,EACVC,UAAW,mBACXC,SAAU,GACVnF,GAAI,SACJqF,OAAQ,CAAC,QAAS,WA4BbC,EAAcF,EAAeb,IAAKgB,GAC3CA,EAAIF,OAAOd,IAAI,CAACiB,EAAOf,IAzBT,EACdzE,EACAyE,EACAgB,EACAC,EAAc,MAEd,IAAIC,EAAS3F,EAAG4F,OAAO,GAEvB,OADAD,EAAS,qBAAqBD,QACvB,CACH1F,GAAI,GAAGyF,EAASzF,MAAMA,IACtBgD,KAAM,SAAShD,EAAG6F,SAAS,MAAQ,IAAM7F,EAAG8F,MAAM,KAAK,KACvDZ,UAAWO,EAASzF,GACpB8E,YAAa,GACbC,KAAM,QACNY,SACA7F,KAAM,gBACNiG,KAAM,cACNf,MAAO,EACPC,SAAU,GACVe,SAAU,oBACVC,aAAc,KAMdC,CAAUV,EAAOf,EAAKc,GAAMC,EAAMM,MAAM,KAAK,MAEnDK,OAAO,CAACC,EAAGC,IAAMD,EAAEE,OAAOD,GAAI,IC/D1BE,EAAgB,CAClBC,QAAS,CACLC,SAAU,CACNzD,KAAM,WACN8B,YAAa,GACb4B,QAAS,CACL,CACI1G,GAAI,SACJgD,KAAM,+BACN2D,MAAO,iBACPC,WAAY,WACZC,UAAW,aAEf,CACI7G,GAAI,SACJgD,KAAM,0BACN2D,MAAO,kBACPC,WAAY,OACZC,UAAW,gBAOlBC,EAEb,WAiBI,SAASC,EAAUC,EAAsBpD,EAAiB,GAEtD,IADAoD,EAAM,GAAGA,IACFA,EAAIpD,OAASA,GAAQoD,EAAM,IAAIA,IACtC,OAAOA,GAnBX,SAAqB,CACjBC,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAkC,QAA9BA,EAAQC,aAAavC,KACrB,OAAOJ,EACJ,GAAkC,aAA9B0C,EAAQC,aAAavC,KAC5B,OAAOK,EACJ,GAAkC,UAA9BiC,EAAQC,aAAavC,KAC5B,OAAOO,EAEX,KAAM,CAAEiC,OAAQ,IAAKC,QAAS,uBAUtC,SAAqB,CACjBP,KAAM,8BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAkC,aAA9BA,EAAQC,aAAatE,KACrB,MAAO,CACHyE,SAAU,CACNf,QAAS,CACLgB,gBAAiB,UACjBC,kBAAmB,aAKnC,GAAkC,aAA9BN,EAAQC,aAAatE,KACrB,MAAO,CACH4E,SAAU,CACNlB,QAAS3D,IAIrB,GAAkC,UAA9BsE,EAAQC,aAAatE,KAAkB,CACvC,MAAM6E,EAAQR,EAAQS,aAAa9H,GAAG8F,MAAM,KAE5C,OAAOiC,EADIF,EAAMA,EAAMjE,OAAS,IAGpC,OACI2C,EAAcc,EAAQS,aAAa9H,KACnCuG,EAAcc,EAAQS,aAAa9H,IAC/BqH,EAAQC,aAAatE,MAGlBuD,EAAcc,EAAQS,aAAa9H,IAE1CuG,EAAcc,EAAQS,aAAa9H,MAClCqH,EAAQC,aAAatE,MAEfuD,EAAcc,EAAQS,aAAa9H,KAEvC,OAIf,SAAqB,CACjBiH,KAAM,8BACNC,SAAU,GACVC,OAAQ,QACRC,SAAWC,IACFd,EAAcc,EAAQS,aAAa9H,MACpCuG,EAAcc,EAAQS,aAAa9H,IAAM,IAC7CuG,EAAcc,EAAQS,aAAa9H,IAAIqH,EAAQW,KAAKhF,MAChDqE,EAAQW,QAIpB,MAAMC,EAAgB,CAAC,eAAgB,iBAAkB,gBAEzD,SAASF,EAAyB/H,GAC9B,MAAO,CACHkI,MAAO,CACHxB,QAAS,IAAIrC,MAAM,IAAIC,KAAK,GAAGC,IAAI,CAACC,EAAGC,KAAQ,CAC3CzE,GAAI,SAAS+G,EAAU/G,EAAI,MAAM+G,EAAUtC,EAAM,EAAG,KACpDzB,KAAM,QAAQhD,KAAM+G,EAAUtC,EAAM,EAAG,KACvC0D,UAAU,QAAqB,MAAQ,GAAM,EAC7C/E,MAAO,GACPgF,SAAUH,EAAcI,OACnB7D,IAAM,QAAqB,OAAS,GAAM,SAO/D,SAAqB,CACjByC,KAAM,uCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMiB,EAAOlD,EAAemD,KACvB/D,GAAMA,EAAExE,KAAOqH,EAAQS,aAAa9H,IAEzC,IAAKsI,EACD,KAAM,CACFf,OAAQ,IACRC,QAAS,gCAAgCH,EAAQS,aAAa9H,OAEtE,OAAOsF,EAAY+C,OAAQ7D,GAAMA,EAAEU,YAAcoD,EAAKtI,IAAIuE,IACrDiE,IACG,MAAMX,EAAQW,EAAIxI,GAAG8F,MAAM,KAE3B,MAAO,CACHwC,KAAME,EACNtB,SAAUa,EAHHF,EAAMA,EAAMjE,OAAS,UAnH1B6E,GC7BbC,EAAS,aCEhBC,EAAe,CACjB,qBACA,gBACA,UACA,kBACA,cACA,aACA,cACA,WACA,gBACA,cACA,gBACA,qBACA,iBACA,iBAGSC,EAAc,CACvB5I,GAAI,UACJgD,KAAM,sBACN2D,MAAO,iBACPkC,OAAQ,CAAC,QAAS,KAGTC,EAAaH,EAAapE,IAAI,CAACvB,EAAM+F,KAAM,CACpD/I,GAAI,QAAQ+I,EAAI,IAChB/F,KAAM,GAAGA,cACT2D,MAAO,GAAG3D,EAAK8C,MAAM,KAAKkD,KAAK,KAAKC,iBAAiBP,OACrDpC,OAAO,CAACsC,IAECM,EAAcP,EAAapE,IAAI,CAACvB,EAAM+F,KAAM,CACrD/I,GAAI,SAAS+I,EAAI,IACjB/F,KAAM,GAAGA,eACT2D,MAAO,GAAG3D,EAAK8C,MAAM,KAAKkD,KAAK,KAAKC,qBAAqBP,IACzDS,gBAAgB,QAAqB,OAAS,GAAM,K,cClCxD,MAAMC,EAAsB,KACxB,MAAMC,EAAI,CAAC,aAAc,UAAW,YAAa,SAC3CC,GAAc,QAAqBD,EAAEzF,OAAS,GAC9C2F,EAAM,GACZ,IAAK,IAAIR,EAAI,EAAGA,EAAIO,EAAaP,IAC7BQ,EAAIC,KAAKH,GAAE,QAAqBA,EAAEzF,UAEtC,OAAO2F,EAAIlB,OAAO,CAACoB,EAAIV,EAAGW,IAAMA,EAAEC,QAAQF,KAAQV,IAGzCa,EAAc,CACvB,CACI5G,KAAM,wBACN2C,OAAQ,oBACRkE,MAAO,CAAC,SAAU,kBAEtB,CACI7G,KAAM,wBACN2C,OAAQ,oBACRkE,MAAO,CAAC,SAAU,kBAEtB,CACI7G,KAAM,wBACN2C,OAAQ,oBACRkE,MAAO,CAAC,SAAU,kBAEtB,CACI7G,KAAM,wBACN2C,OAAQ,oBACRkE,MAAO,CAAC,SAAU,kBAEtB,CACI7G,KAAM,wBACN2C,OAAQ,oBACRkE,MAAO,CAAC,SAAU,kBAEtB,CACI7G,KAAM,wBACN2C,OAAQ,oBACRkE,MAAO,CAAC,SAAU,kBAEtB,CACI7G,KAAM,uBACN2C,OAAQ,mBACRkE,MAAO,CAAC,SAAU,iBAEtB,CACI7G,KAAM,uBACN2C,OAAQ,mBACRkE,MAAO,CAAC,SAAU,iBAEtB,CACI7G,KAAM,uBACN2C,OAAQ,mBACRkE,MAAO,CAAC,SAAU,iBAEtB,CACI7G,KAAM,uBACN2C,OAAQ,mBACRkE,MAAO,CAAC,SAAU,iBAEtB,CACI7G,KAAM,uBACN2C,OAAQ,mBACRkE,MAAO,CAAC,SAAU,kBAExBtF,IAAKuF,IAAM,QAAkB,OAAD,wBAAMA,GAAC,CAAE1B,SAAUgB,Q,cC/DjD,IAAIW,EAAa,IAAQC,QAAQ,KAAKC,KAAK,GAE3C,MAAMC,EAAgB,CAACC,GAAO,KAC1B,MAAMC,EAAOL,EAAWM,IAAoC,KAA/B,QAAqB,GAAK,GAAS,KAIhE,OAHIF,IACAJ,EAAaK,GAEVA,EAAKE,QAGVC,EAAe,CAAC,YAAa,YAAa,aAC1CC,EAAe,KACjB,MAAMC,GAAM,QAAqB,IACjC,OAAOA,EAAM,EACPF,EAAa,GACbE,EAAM,EACNF,EAAa,GACbA,EAAa,IAGVG,EAAc,IAAIrG,MAAM,KAAKC,KAAK,GAAGC,IAAI,CAACC,EAAGmG,KACtD,MAAMC,EAAS9B,EAAWxC,OAAO4C,GACjC,IAAI2B,EAAmB,IAAIxG,OAAM,QAAqB,EAAG,IACpDC,KAAK,GACLC,IAAI,IAAMqG,GAAO,QAAqBA,EAAOhH,UAClDiH,EAAUC,KACN,CAACC,EAAGC,KAAOD,EAAE5B,eAAiB,GAAK,IAAM6B,EAAE7B,eAAiB,GAAK,IAErE,MAAM8B,EAAQrB,GAAY,QAAqBA,EAAYhG,SAC3DiH,EAAYA,EAAUvE,OAAO,OAAD,wBAAM2E,GAAK,CAAEC,UAAU,MAC/C,QAAqB,MAAQ,GAAM,EAAGL,EAAUM,QAAQvC,GACvDiC,EAAUM,QAAQrC,GAAW,QAAqBA,EAAWlF,UAClEiH,GAAY,QAAOA,EAAW,SAC9B,MAAMpH,EAAcyG,GAAc,GAC5BxG,EAAYwG,IAClB,MAAO,CACHlK,GAAI,aAAa2K,IACjBpD,OAAQiD,IACRY,KAAMP,EAAU,GAAGlE,MACnB0E,SAAU,cACVC,QAAS,oBACTT,WAAW,QAAOA,EAAW,SAAStG,IAAKC,GAAO,OAAD,wBAC1CA,GAAC,CACJ+G,iBACI,QAAqB,OAAS,GAAM,EAC9B,YACA,QAAqB,OAAS,GAAM,EACpC,WACA,eAEdC,MAAO,gBAAgBb,IACvB3C,KAAM,gBACNyD,SAAS,EACThI,cACAC,YACAgI,SAAU,mBACVC,SAAS,EACT3F,SAAU,GAAGiF,EAAMjI,OACnB4I,WAAW,EACXC,WAAY,GACZC,YAAa,GACbC,OAAQd,EACRe,eAAgB,CACZpE,UACI,QAAqB,OAAS,GAAM,EAC9B,CACIvE,EAAsB,CAClBrD,GAAI,aAAa2K,IACjBlH,cACAC,eAGR,GACVuI,MAAiC,GAA1B,QAAqB,GAC5BC,UAAqC,GAA1B,QAAqB,OAKtCC,EAAe,GACrBzB,EAAYxI,QAASoB,IACZ6I,EAAa7I,EAAMyI,OAAO/L,MAC3BmM,EAAa7I,EAAMyI,OAAO/L,IAAM,IAEpCmM,EAAa7I,EAAMyI,OAAO/L,IAAIwJ,KAAKlG,KChFhC,MAAM8I,EAEb,YACI,SAAqB,CACjBnF,KAAM,2BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAgC,YAA5BA,EAAQS,aAAa9H,GACrB,OAAO4I,EAEX,MAAMyD,EAASvD,EAAWP,KACrB+D,GAASA,EAAK3F,QAAUU,EAAQS,aAAa9H,IAElD,GAAIqM,EACA,OAAOA,EAEX,KAAM,CAAE9E,OAAQ,IAAKC,QAAS,sBAItC,SAAqB,CACjBP,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQC,aAAaiF,EAAG,CACxB,MAAMC,EAASnF,EAAQC,aAAaiF,EAAEtD,cACtC,OAAOH,EAAWT,OACbiE,GACGA,EAAKtJ,KAAKiG,cAAcwD,SAASD,IACjCF,EAAK3F,MAAMsC,cAAcwD,SAASD,IAG9C,OAAO1D,MAIf,SAAqB,CACjB7B,KAAM,2BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMrH,EAAK0M,mBAAmBrF,EAAQS,aAAa9H,IAC7CqM,EAASvD,EAAWP,KAAM+D,GAASA,EAAK3F,QAAU3G,GACxD,GAAIqM,EACA,OAAO,OAAP,wBACOA,GAAM,CACTrG,SAAU2G,MAGlB,KAAM,CAAEpF,OAAQ,IAAKC,QAAS,sBAItC,SAAqB,CACjBP,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQC,aAAaiF,EAAG,CACxB,MAAMC,EAASnF,EAAQC,aAAaiF,EAAEtD,cACtC,OAAOC,EAAYb,OACdiE,GACGA,EAAKtJ,KAAKiG,cAAcwD,SAASD,IACjCF,EAAK3F,MAAMsC,cAAcwD,SAASD,IAG9C,OAAO1D,MAIf,SAAqB,CACjB7B,KAAM,8BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMgF,EAASnD,EAAYX,KACtB+D,GAASA,EAAK3F,QAAUU,EAAQS,aAAanB,OAElD,GAAI0F,EACA,OAAOA,EAEX,KAAM,CAAE9E,OAAQ,IAAKC,QAAS,uBAItC,SAAqB,CACjBP,KAAM,uCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQS,aAAanB,MAAO,CAC5B,MAAMA,EAAQU,EAAQS,aAAanB,MAAMsC,cAMzC,OALeyB,EAAYrC,OAAQ/E,GAC/BA,EAAMuH,UAAUtC,KACX+D,GAASA,EAAK3F,MAAMsC,gBAAkBtC,IAKnD,KAAM,CACFY,OAAQ,IACRC,QAAS,iDAAiDH,EAAQS,aAAanB,YAK3F,MAAMiG,EAAiB,CACnB,UACA,UACA,SACA,SACA,MACA,QAGJ,SAASD,IACL,MAAM5G,EACF6G,GAAe,QAAqBA,EAAehJ,SACjD4B,EAAQF,GAAY,QAAqBA,EAAY1B,SACrDiJ,EAAejD,EAAYvB,OAAQyE,GACrCA,EAAEjD,MAAM4C,SAASjH,EAAMxF,KAErBiL,EACF4B,GAAa,QAAqBA,EAAajJ,UAAY,GACzDoC,EAAoB,GAC1B,OAAQD,GACJ,IAAK,UACDC,EAAS+G,QAAU,CACftH,SAAUD,EAAMN,UAChBM,MAAOA,EAAMxF,GACb+L,OAAQd,EAAMjL,GACd2F,OAAQsF,EAAMtF,OACd9B,SAAU,IAEd,MACJ,IAAK,UACDmC,EAAS+G,QAAU,CACftH,SAAUD,EAAMN,UAChBM,MAAOA,EAAMxF,GACb2F,OAAQsF,EAAMtF,OACdqH,WAAY,IAAQ1C,QAExB,MACJ,IAAK,SACL,IAAK,SACDtE,EAASD,GAAQ,CACbN,SAAUD,EAAMN,UAChBM,MAAOA,EAAMxF,GACbiN,IAAI,QAAqB,KACzBC,IAAI,QAAqB,KACzBC,UAAW,IACNC,UAAS,QAAqB,IAAK,KACnC9C,QAET,MACJ,IAAK,MACDtE,EAASqH,IAAM,CACXC,KAAK,QAAqB,KAAO,GACjCC,KAAK,QAAqB,KAAO,IACjCJ,UAAW,IACNC,UAAS,QAAqB,IAAK,KACnC9C,QAIjB,OAAOtE,GAvKW,GCuB1B,MAAMwH,EAeF,YAAYC,G,MAFL,KAAAC,OAAS,EAGZvM,KAAK6B,KAAOyK,EAAMzK,MAAQ,cAC1B7B,KAAKwM,UAA2B,QAAf,EAAAF,EAAME,iBAAS,SAChCxM,KAAKyM,OAASH,EAAMG,SAAU,EAC9BzM,KAAK0M,WAAaJ,EAAMI,WACxB1M,KAAK2M,YAAcL,EAAMK,YACzB3M,KAAK4M,YAAcN,EAAMM,aAAe,GACxC5M,KAAK6M,OAASC,OAAOlO,KAAKoB,KAAK0M,YAAc,KAAO,GACpD1M,KAAK+M,QAAUD,OAAOlO,KAAKoB,KAAK2M,aAAe,KAAO,IACxC,QAAO3M,KAAK4M,YAAYxJ,IAAKC,GAAMA,EAAEuB,OAC7C7D,QACDiM,GACIhN,KAAK,GAAGgN,KAAOhN,KAAK4M,YAChB1F,OAAQ7D,GAAMA,EAAEuB,OAASoI,GACzB5J,IAAKC,GAAMA,EAAExE,KAE1BmB,KAAK4M,YAAY7L,QACZkM,GAAYjN,KAAK,GAAGiN,EAAOrI,QAAQqI,EAAOpO,MAAQoO,GAEvDjN,KAAK6M,OAAO9L,QACPmM,GAASlN,KAAK,SAASkN,KAASlN,KAAK0M,WAAWQ,IAErDlN,KAAK+M,QAAQhM,QACRmM,GAASlN,KAAK,UAAUkN,KAASlN,KAAK2M,YAAYO,IAI3D,WACI9M,QAAQC,IAAI,YACZL,KAAKyM,QAAS,EAOlB,YACIzM,KAAKyM,QAAS,EAGlB,UAWA,OAAOU,EAAeC,GACdpN,KAAK6M,OAAOvB,SAAS6B,IAAUnN,KAAK+M,QAAQzB,SAAS8B,KACrDpN,KAAKqN,aAAaF,EAAO,CACrBG,QAAQ,QAAO,IACPtN,KAAK0M,WAAWS,GAAOG,QAAU,GACrCF,MAGRpN,KAAKqN,aAAaD,EAAQ,CACtBH,OAAQE,EACRI,UAAWJ,KASvB,YAKA,YAEA,eAMA,SAKA,UAEA,UAMA,WAOA,WAMA,QAAQK,EAAeP,EAAiB,OACrB,QAAXA,IACAjN,KAAKuM,OAASiB,GAItB,MAAMC,GAAiB,EAAMR,EAAiB,OAC1CjN,KAAKqN,aAAaJ,EAAQ,CAAES,KAAMD,IAMtC,QAAQR,EAAiB,OACrBjN,KAAK2N,OAAM,EAAOV,GAUtB,aAAapO,EAAY4O,GACrB,MAAMR,EAASjN,KAAK4M,YAAYxF,KAAM/D,GAAMA,EAAExE,KAAOA,GACjDoO,IACAjN,KAAK,GAAGiN,EAAOrI,QAAQqI,EAAOpO,MAAQ,OAAH,wBAAQoO,GAAM,CAAEQ,WAI3D,MAAMR,GACFjN,KAAKqN,aAAaJ,EAAQ,CAAEW,QAAQ,IAGxC,QAAQX,GACJjN,KAAKqN,aAAaJ,EAAQ,CAAEW,QAAQ,IAGxC,aAAaX,EAAgBY,GACrB7N,KAAK,SAASiN,MACdjN,KAAK,SAASiN,KAAY,OAAH,wBAAQjN,KAAK,SAASiN,MAAcY,GAC3D7N,KAAK0M,WAAWO,GAAU,OAAH,wBAAQjN,KAAK,SAASiN,MAAcY,IACpD7N,KAAK,UAAUiN,OACtBjN,KAAK,UAAUiN,KAAY,OAAH,wBAAQjN,KAAK,UAAUiN,MAAcY,GAC7D7N,KAAK2M,YAAYM,GAAU,OAAH,wBAAQjN,KAAK,UAAUiN,MAAcY,KAKzE,MAAMnB,EAAsB,CACxBoB,KAAM,CACFjM,KAAM,cACN+C,KAAM,aACNmJ,IAAK,gBAETC,KAAM,CACFnM,KAAM,YACN+C,KAAM,aACNmJ,IAAK,gBAETE,KAAM,CACFpM,KAAM,eACN+C,KAAM,aACNmJ,IAAK,gBAETG,IAAK,CACDrM,KAAM,OACN+C,KAAM,MAEVuJ,IAAK,CACDtM,KAAM,OACN+C,KAAM,MAEVwJ,IAAK,CACDvM,KAAM,OACN+C,KAAM,MAEVyJ,IAAK,CACDxM,KAAM,OACN+C,KAAM,MAEV0J,KAAM,CACFzM,KAAM,cACN+C,KAAM,UAEV2J,IAAK,CACD1M,KAAM,aACN+C,KAAM,UAEV4J,QAAS,CACL3M,KAAM,cACN+C,KAAM,SACNmJ,IAAK,YAETU,QAAS,CACL5M,KAAM,eACN+C,KAAM,SACNmJ,IAAK,YAETW,QAAS,CACL7M,KAAM,gBACN+C,KAAM,SACNmJ,IAAK,YAETY,QAAS,CACL9M,KAAM,iBACN+C,KAAM,SACNmJ,IAAK,YAETa,IAAK,CACD/M,KAAM,SACN+C,KAAM,KACNmJ,IAAK,WAIPpB,EAAuB,CACzBkC,SAAU,CACNhN,KAAM,YACN+C,KAAM,UACNqI,OAAQ,MACRc,IAAK,aAETe,SAAU,CACNjN,KAAM,YACN+C,KAAM,UACNmJ,IAAK,aAETgB,SAAU,CACNlN,KAAM,YACN+C,KAAM,UACNqI,OAAQ,MACRc,IAAK,aAETiB,SAAU,CACNnN,KAAM,YACN+C,KAAM,UACNmJ,IAAK,aAETkB,SAAU,CACNpN,KAAM,YACN+C,KAAM,UACNmJ,IAAK,YACLd,OAAQ,QAIVL,EAAqB,CACvB,CACI/N,GAAI,SACJgD,KAAM,WACN+C,KAAM,SACNsK,OAAQ,CAAC,MAAO,eAAgB,UAAW,QAC3CzB,MAAO,OAEX,CACI5O,GAAI,SACJgD,KAAM,SACN+C,KAAM,SACNsK,OAAQ,CAAC,MAAO,eAAgB,WAChCzB,MAAO,OAEX,CACI5O,GAAI,UACJgD,KAAM,SACN+C,KAAM,SACNsK,OAAQ,CAAC,KAAM,QACfzB,MAAO,SAIF0B,EAAqB,CAACrF,EAAgBsF,EAAqB,KACpE,IAAI/C,EAAW,OAAD,sCACPvC,GAAK,CACR4C,aACAC,cACAC,gBACGwC,I,kCC1UJ,MAAMC,GAAb,cAEI,KAAAC,UAAY,mBAEZ,KAAAC,kBAAmB,EAEnB,KAAAC,qBAAsB,EAEtB,KAAAC,SAAsB,GACtB,KAAAC,eAAiB,EACjB,KAAAC,eAAiB,EAEjB,KAAAC,WAAa,GAEb,KAAAC,YAAc,GAEd,KAAAC,qBAAuB,EAEvB,KAAA1J,OAAuD,QAGpD,SAAS2J,GACZjG,EACAsF,EAAwC,IAExC,MAAMrB,EAAM,OAAH,sCACF,IAAIsB,IACJD,GAAS,CAEZY,eAAgB,SAAUhD,GACtBhN,KAAK8P,qBAAuB9C,GAGhCiD,aAAc,SAAUjD,KAExBkD,UAAW,SAAUC,EAAanD,EAAYoD,OAIlD,OAFAC,GAAevG,EAAOiE,GACtBuC,YAAY,IAAMD,GAAevG,EAAOiE,GAAM,KACvCA,EAGX,SAASsC,GAAevG,EAAgBiE,G,MACpC,MAAM0B,EACFlG,EAAYrC,OAAQ/E,IAAS,MACzB,OAAe,QAAf,EAAAA,EAAMuH,iBAAS,eAAEtC,KAAMmJ,GAAMA,EAAE/K,QAAUsE,EAAMtE,UAC9C,GAGT,GAFAiK,EAAS9F,KAAK,CAACC,EAAGC,IAAMD,EAAEtH,YAAcuH,EAAEvH,aAC1CyL,EAAI0B,SAAWA,GACV3F,EAAM9C,SACP,OAAQ+G,EAAI3H,OAAS,eAEzB,MAAMoK,EAAO,IAAIC,KACXpL,EAAUoK,EAASrI,KAAMsJ,IAC3B,QACIF,EAAKG,UACLH,EAAKG,UACLD,EAAIpO,YACJoO,EAAInO,YAGN0G,EAAOwG,EAASrI,KAAMsJ,IACxB,EAAAE,EAAA,GAASJ,EAAKG,UAAWD,EAAIpO,cAE3BuO,EAAQ,IAAIJ,KAAsB,QAAhB,EAAApL,GAAW4D,SAAK,eAAE3G,aACpCwO,GAAU,QACZN,EACAA,GACA,EAAAO,EAAA,GAAWF,EAAO9C,EAAI4B,iBACtB,EAAAqB,EAAA,GAAWH,EAAO9C,EAAI2B,iBAE1B3B,EAAI3H,OAASf,EACPyL,EACI,UACA,OACJ7H,GAAQ6H,EACR,UACA,O,eC3DH,MAAMG,GAAb,cAEI,KAAAC,SAAkC,GAElC,aAAa1L,EAAe2L,KAGhC,SAASC,GAAQC,EAAYlB,EAAc,GACvC,IAAItK,EAAM,GAAGwL,IACb,KAAOxL,EAAIpD,OAAS0N,GAChBtK,EAAM,IAAMA,EAEhB,OAAOA,EAGJ,SAASyL,GACZxH,EACAsF,EAAqB,IAErB,MAAMrB,EAAM,IAAIkD,GAChB,IAAK,MAAM5J,KAAOlD,EACd4J,EAAImD,SAAS7J,EAAIxI,IAAM,CACnB0S,WAAY,IACZC,WAAY,EACZC,gBAAiB,IACjBC,aAAc,EACdC,iBAAkB,EAClBC,eAAgB,EAChBC,eAAgB,KAEpB9D,EAAI,GAAG1G,EAAIxI,eAAiB,IAAIqE,MAAM6K,EAAImD,SAAS7J,EAAIxI,IAAI0S,YACtDpO,KAAK,GACLC,IAAI,CAACC,EAAGC,IAAQ,SAAS+D,EAAIyK,UAAUV,GAAQ9N,MACpDyK,EAAI,GAAG1G,EAAIxI,MAAQ,CAAE2O,MAAO,IAIhC,OAFAuE,GAAgBhE,EAAK5J,GACrBmM,YAAY,IAAMyB,GAAgBhE,EAAK5J,GAAc,KAC9C4J,EAGJ,SAASgE,GACZhE,EACA7J,GAEA,IAAK,MAAMmD,KAAOnD,EACd6J,EAAI1G,EAAIxI,IAAM,CACV2O,MAAO,IAAItK,OAAM,QAAqB,KACjCC,KAAK,GACLC,IAAI,IAAMoI,GAAiBnE,EAAK0G,EAAI,GAAG1G,EAAIxI,kBAKrD,SAAS2M,GACZnE,EACAN,EACAiL,EAAQrK,GAGR,OADc,QAAqB,MAAQ,GAAM,EAE3C,CACI9C,SAAU,OACVoN,aAAa,QAAqB,MAAQ,GAAM,EAChDzN,OAAQuC,GAAM,QAAqBA,EAAMtE,SACzCyP,IAAK,aACDF,GAAM,QAAqBA,EAAMvP,SAAS+C,OAE9CnB,MAAOgD,EAAIxI,GACXyF,SAAU+C,EAAItD,WAElB,CACIc,SAAU,WACVsN,iBAAkB,cAClBrG,GAAG,QAAqB,KAAQ,GAChCC,GAAG,QAAqB,KAAQ,GAChCK,IAAK,kBACLD,IAAK,kBACLiG,WAAY,eACZF,IAAK,aACDF,GAAM,QAAqBA,EAAMvP,SAAS+C,OAE9C6M,SAAU,iBACVrG,UAAWjJ,KAAKC,OAAM,IAAIyN,MAAOE,UAAY,KAC7C2B,UAAW,IACXC,WAAY,KC7F1B,MAAMC,GAWF,YAAYnP,GACRrD,KAAKyS,QAAU,CAAC,aAAc,WAAY,gBAG9C,KAAKC,IAEL,MAAMC,IAEN,QAAQ9Q,IAER,aAAaA,KCjCjB,MAAM+Q,GAYF,YAAYvP,GACRrD,KAAKuM,QAAS,QAAU,KAT5B,MAAMkB,GAAiB,GACnBzN,KAAK0N,KAAOD,EAGhB,QAAQD,GACJxN,KAAKuM,OAASiB,GCTtB,MAAMqF,GAYF,YAAYxP,GACRrD,KAAKuM,QAAS,QAAU,KAT5B,MAAMkB,GAAiB,GACnBzN,KAAK0N,KAAOD,EAGhB,QAAQD,GACJxN,KAAKuM,OAASiB,GCTtB,IAAIsF,GAEG,MAAMC,GAST,YAAY1P,GAPZ,KAAA+C,OAA2C,UAE3C,KAAA4M,MAAgB,EAMZhT,KAAKiT,WAAY,QAAU,OAG/B,SACIjT,KAAKoG,OAAS,UACd0M,GAAWxC,YAAY,KACftQ,KAAKiT,UAAY,GAAGC,cAAcJ,IACtC9S,KAAKiT,UAAYjT,KAAKiT,UAAY,EAClCjT,KAAKqF,QAAUrF,KAAKqF,QAAU,GAC/B,KAGP,SACIrF,KAAKoG,OAAS,SACd8M,cAAcJ,IAGlB,UACI9S,KAAKmT,SAGT,QACInT,KAAKoG,OAAS,UACdpG,KAAKqF,QAAU,EACf6N,cAAcJ,KAKf,MAAMM,GAAsB,CAACtJ,EAAgBsF,EAAqB,KACrE,IAAI2D,GAAc,OAAD,wBAAMjJ,GAAUsF,ICvCxBiE,IAGT5K,EAAY1H,QAAQ,CAAC+I,EAAYN,ICG9B,SAAsBM,IACzB,SAAeA,EAAMjL,GAAI,CACrByU,OAAQ,CAACnE,EAAmBrF,IAC5ByJ,SAAU,CAACxD,GAAqBjG,IAChC0J,eAAgB,CAAClC,MACjBmC,OAAQ,IAAIvQ,MAAM,IAAIC,KAAK,GAAGC,IAAIC,GLsBR,EAACyG,EAAgBsF,EAAqB,KACpE,IAAIoD,GAAa,OAAD,wBAAM1I,GAAUsF,IKvBWsE,CAAmB5J,IAC1D6J,QAAS,IAAIzQ,MAAM,IAAIC,KAAK,GAAGC,IAAIC,GJER,EAACyG,EAAgBsF,EAAqB,KACrE,IAAIwD,GAAc,OAAD,wBAAM9I,GAAUsF,IIHWwE,CAAoB9J,IAC5D+J,WAAY,IAAI3Q,MAAM,IAAIC,KAAK,GAAGC,IAAIC,GHCR,EAClCyG,EACAsF,EAAqB,KACpB,IAAIyD,GAAiB,OAAD,wBAAM/I,GAAUsF,IGJU0E,CAAuBhK,IAClEiK,QAAS,CAACX,GAAoBtJ,MDXSkK,CAAalK,SAExD,SAAqB,CACjBhE,KAAM,yBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GACAuC,KEVNwL,KAGT,SAAqB,CACjBnO,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAW5C,IACP,IAAI6Q,EAAS3K,EAmBb,OAlBKlG,EAAE8C,aAAagO,WAChBD,EAASA,EAAOhN,OACX/E,KACKA,EAAMuH,UAAUtC,KACb+D,GAASA,EAAK3F,QAAUiC,EAAYjC,SAIjDnC,EAAE8C,aAAaiO,eACfF,EAASA,EAAOhN,OAAQzI,IACpB,QACI4E,EAAE8C,aAAaiO,aACf/Q,EAAE8C,aAAakO,WACf5V,EAAE6D,YACF7D,EAAE8D,aAIP2R,MAIf,SAAqB,CACjBpO,KAAM,uBACNC,SAAU,GACVC,OAAQ,OACRC,SAAWC,IACP,MAAMoO,EAAY,OAAH,wBACRpO,EAAQW,MAAI,CACfhI,GAAI,eAAc,QAAqB,SAiB3C,OAfAyV,EAAU5K,UAAY,CAClB/B,EAAWP,KAAM/D,GAAMA,EAAEmC,QAAU8O,EAAUrK,SACzCqK,EAAU5K,WAAa,IAE/B4K,EAAU5K,UAAU3I,QAASoK,IACrBA,EAAKzC,QAAOyC,EAAKpB,UAAW,KAGhCuK,EAAU1J,SACV0J,EAAU5K,UAAY,IACd4K,EAAU5K,WAAa,G,+BACtB4K,EAAU1J,QAAM,CAAEb,UAAU,MAGzCR,EAAYlB,KAAKiM,GACVA,MAIf,SAAqB,CACjBxO,KAAM,2BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMqO,EAAOhL,EAAYnC,KACpBjF,GAAUA,EAAMtD,KAAOqH,EAAQS,aAAa9H,IAEjD,GAAI0V,EACA,OAAOA,EAEX,KAAM,CAAEnO,OAAQ,IAAKC,QAAS,uBAItC,SAAqB,CACjBP,KAAM,2BACNC,SAAU,GACVC,OAAQ,SACRC,SAAWC,IACP,MAAMsD,EAAQD,EAAYiL,UACrBrS,GAAUA,EAAMtD,KAAOqH,EAAQS,aAAa9H,IAEjD,KAAI2K,EAAQ,GAWZ,KAAM,CAAEpD,OAAQ,IAAKC,QAAS,mBAVtBkD,EAAYC,GAAOS,OAASxC,EAAYjC,MACxC+D,EAAYkL,OAAOjL,EAAO,GAEbD,EAAYC,GAAOE,UAAUtC,KACrC/D,GAAMA,EAAEmC,QAAUiC,EAAYjC,OAE9B4E,gBAAkB,eAQvC,SAAqB,CACjBtE,KAAM,2BACNC,SAAU,GACVC,OAAQ,QACRC,SAAWC,IACP,MAAMsD,EAAQD,EAAYiL,UACrBrS,GAAUA,EAAMtD,KAAOqH,EAAQS,aAAa9H,IAEjD,GAAI2K,GAAS,EACT,OAAOD,EAAYkL,OAAOjL,EAAO,EAAGtD,EAAQW,MAEhD,KAAM,CAAET,OAAQ,IAAKC,QAAS,2BAItC,SAAqB,CACjBP,KAAM,iDACNC,SAAU,GACVC,OAAQ,OACRC,SAAWC,IACP,MAAM/D,EAAQoH,EAAYnC,KACrBjF,GAAUA,EAAMtD,KAAOqH,EAAQS,aAAa9H,IAEjD,GAAIsD,EAMA,OAHCA,EAAM0I,eAAuBgB,YADzB1J,EAAM0I,eAAuBgB,YAAc,IACM1G,OAAO,CACzDe,EAAQS,aAAanB,QAElBrD,EAEX,KAAM,CAAEiE,OAAQ,IAAKC,QAAS,uBC9H7BqO,GAEb,YACI,SAAqB,CACjB5O,KAAM,0BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GAAY,KAG3B,MAAMyO,EAA2BzO,IAC7B,MAAM2K,GAAS3K,EAAQC,aAAaiO,aAC9BQ,GAAO1O,EAAQC,aAAakO,WAC5B3L,GAASxC,EAAQC,aAAagO,UAAY,IAC3CxP,MAAM,KACNuC,OAAQU,KAAQA,GACfiN,GAAW3O,EAAQC,aAAa2O,YAAc,IAC/CnQ,MAAM,KACNuC,OAAQU,KAAQA,GA4BrB,OA1Bea,EAAYvB,OAAQ4C,GAC/BpB,EAAMjG,OACAiG,EAAM1D,OACF,CAAC+P,EAAK5N,IAAS4N,GAAOjL,EAAMpB,MAAM4C,SAASnE,IAC3C,IAEJ0N,EAAQpS,QACRoS,EAAQvJ,SAASxB,EAAMjL,KAE/BqI,OAAQ4C,IACN,MAAM2F,EAAWlG,EAAYrC,OAAQ/E,GACjCA,EAAMuH,UAAUtC,KAAM+D,GAASA,EAAKtM,KAAOiL,EAAMjL,KAErD,IAAK,MAAMsD,KAASsN,EAChB,IACI,QACIoB,EACA+D,EACAzS,EAAMG,YACNH,EAAMI,WAGV,OAAO,EAEf,OAAO,MAKf,SAAqB,CACjBuD,KAAM,uCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GACPyO,EAAwBzO,GAAS9C,IAAKC,IAAM,CACxC0G,SAAU1G,QAItB,SAAqB,CACjByC,KAAM,oCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GACPyO,EAAwBzO,GAAS9C,IAAKC,IAAM,CACxC0G,SAAU1G,OAjEI,G,mCCD9B,IAAI,IAAa,EAAA2R,GAAA,IAAS,EAAAC,GAAA,GAAW,IAAIxE,MAAS,GAElD,MAAM,GAAgB,CAACzH,GAAO,KAC1B,MAAMC,GAAO,EAAAnG,EAAA,GAAW,GAA4C,KAA/B,QAAqB,GAAK,IAE/D,OADIkG,IAAM,GAAaC,IAChB,EAAAiM,GAAA,GAAYjM,IAGjBkM,GAAQ,CAAC,OAAQ,WAEVC,GAAgB,IAAIlS,MAAM,KAAKC,KAAK,GAAGC,IAAI,CAACC,EAAGmG,KACxD,MAAM2B,EAAOxD,GAAW,QAAqBA,EAAWlF,SAClDmC,EAAOuQ,IAAM,QAAqBA,GAAM1S,SACxC2B,EAAMH,GAAe,QAAqBA,EAAexB,SACzD4S,EAAOlR,EAAY+C,OAAQ7D,GAAMA,EAAEU,YAAcK,EAAIvF,IACrDwI,EAAMgO,GAAK,QAAqBA,EAAK5S,SACrC6S,GAAW,QAAqB,QAAU,EAC1CC,EAAW5N,GAAW,QAAqBA,EAAWlF,SAC5D,MAAO,CACH5D,GAAI,WAAW2K,IACfgM,cAAe,IAAc,GAC7BC,YAAa,KACbC,QAASvK,EAAKtM,GACd8W,UAAWxK,EAAKtJ,KAChB+T,WAAYzK,EAAK3F,MACjBqQ,SAAU,QAAQxO,aAAG,EAAHA,EAAKxI,MAAM2K,IAC7B7F,YAAa,QAAQ6F,IACrBa,MAAO,GAAGzF,aAAgB4E,IAC1B5E,OACAiH,YAAY,QAAqB,QAAU,GAAM,EACjDiK,QAAQ,QAAqB,QAAU,GAAM,EAC7CR,SAAuB,IAAbA,EACVS,SAAuB,IAAbT,EACVU,YAA0B,IAAbV,EAAiBC,EAAS1W,GAAK,GAC5CoX,cAA4B,IAAbX,EAAiBC,EAAS1T,KAAO,GAChDqU,eAA6B,IAAbZ,EAAiBC,EAAS/P,MAAQ,GAClDkD,MAAO,CAACtE,EAAIvF,GAAIwI,aAAG,EAAHA,EAAKxI,IACrBgM,eAAgB,MClCxB,IACIlF,WAAU,EACVsF,WAAU,EACVoI,aAAY,GACZY,YAAW,GACXS,eAAc,GACdyB,cCRJ,YACI,SAAqB,CACjBrQ,KAAM,yBACNC,SAAU,GACVC,OAAQ,MACRC,SAAW5C,GACQ+R,GAAclO,OACxB/E,IACG,QACIkB,EAAE8C,aAAaiO,aACf/Q,EAAE8C,aAAakO,WACflS,EAAMqT,cACNrT,EAAMsT,cACLtT,EAAMyC,OAASvB,EAAE8C,aAAavB,SAMnD,SAAqB,CACjBkB,KAAM,6BACNC,SAAU,GACVC,OAAQ,MACRC,SAAW5C,IACP,MAAMlB,EAAQiT,GAAchO,KAAM3I,GAAMA,EAAEI,KAAOwE,EAAEsD,aAAa9H,IAChE,IAAKsD,EACD,KAAM,CACFiE,OAAQ,IACRC,QAAS,kCAAkChD,EAAEsD,aAAa9H,MAElE,OAAOsD,MAIf,SAAqB,CACjB2D,KAAM,yBACNC,SAAU,GACVC,OAAQ,OACRC,SAAWC,IACP,MAAMoO,EAAY,OAAH,wBACRpO,EAAQW,MAAI,CACfhI,GAAI,aAAY,QAAqB,SAGzC,OADAuW,GAAc/M,KAAKiM,GACZA,KAIf,MAAM8B,EAAgB,CAACvX,EAAIgP,KACvB,MAAMrE,EAAQ4L,GAAcZ,UAAW/V,GAAMA,EAAEI,KAAOA,GACtD,GAAI2K,EAAQ,EACR,KAAM,CACFpD,OAAQ,IACRC,QAAS,kCAAkCxH,KAEnD,MAAMyV,EAAY,OAAH,UAAQzG,GAEvB,OADAuH,GAAcX,OAAOjL,EAAO,EAAG8K,GACxBA,IAGX,SAAqB,CACjBxO,KAAM,6BACNC,SAAU,GACVC,OAAQ,MACRC,SAAW5H,GAAQ+X,EAAc/X,EAAIsI,aAAa9H,GAAI,OAAF,UAAOR,EAAIwI,UAGnE,SAAqB,CACjBf,KAAM,qCACNC,SAAU,GACVC,OAAQ,OACRC,SAAW5H,GACP+X,EAAc/X,EAAIsI,aAAa9H,GAAI,OAAF,wBAC1BR,EAAIwI,MAAI,CACXyO,UAAU,EACVS,UAAU,QAItB,SAAqB,CACjBjQ,KAAM,oCACNC,SAAU,GACVC,OAAQ,OACRC,SAAW5H,GACP+X,EAAc/X,EAAIsI,aAAa9H,GAAI,OAAF,wBAC1BR,EAAIwI,MAAI,CACXyO,UAAU,EACVS,UAAU,QAItB,SAAqB,CACjBjQ,KAAM,sCACNC,SAAU,GACVC,OAAQ,OACRC,SAAW5H,GACP+X,EAAc/X,EAAIsI,aAAa9H,GAAI,OAAF,wBAC1BR,EAAIwI,MAAI,CACXgF,WAAuC,SAA3BxN,EAAI8H,aAAasH,YAIzC,SAAqB,CACjB3H,KAAM,6BACNC,SAAU,GACVC,OAAQ,SACRC,SAAW5H,IACP,MAAMmL,EAAQ4L,GAAcZ,UACvB/V,GAAMA,EAAEI,KAAOR,EAAIsI,aAAa9H,IAErC,GAAI2K,EAAQ,EACR,KAAM,CACFpD,OAAQ,IACRC,QAAS,kCAAkChI,EAAIsI,aAAa9H,MAEpEuW,GAAcX,OAAOjL,EAAO,MArHX,KDa7B,QAAI,QAAS,oC,2DEyCN,a,MAAM6M,UAAqB,KAC9B,YACYC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAERC,QATQ,KAAAR,WACA,KAAAC,YACA,KAAAC,OACA,KAAAC,UACA,KAAAC,SACA,KAAAC,YACA,KAAAC,UACA,KAAAC,aAKC,W,uDACT,QAAI,MAAO,SAAU,GACrB7W,KAAK4W,QAAQG,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,KACrDC,aAAaC,QACT,OACA,GAAoC,SAAjCD,aAAaE,QAAQ,WAE5BrS,SAASsS,WAEbnX,KAAK4W,QAAQG,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,KACrD/W,KAAK6W,WAAWO,KAAK,IAAG,eAAW,eACnC,QAAc,gCAElBpX,KAAK4W,QAAQG,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,K,MAClC,QAAnB,EAAAtW,UAAU4W,iBAAS,SAAEC,WAAW9Y,KAAM+Y,IAClC,MAAM7Q,EAAQ6Q,EAAI5S,MAAM,KAClB9F,GAAK,WACXmY,aAAaC,QAAQ,GAAGpY,iBAAmB,GAAG6H,EAAM,MACpDsQ,aAAaC,QAAQ,GAAGpY,kBAAoB,GAAG6H,EAAM,MACrDsQ,aAAaC,QACT,GAAGpY,eACH,IAAG,EAAA2Y,EAAA,GAAS,IAAI/G,KAAQ,GAAGE,cAE/B,QAAc,8BACd5Q,WAAW,IAAM8E,SAASsS,SAAU,UAG5C,QAAgBnX,KAAK2W,iBAEf3W,KAAKuW,UAAUkB,YAAYC,MAAK,EAAAC,EAAA,GAAOtU,GAAMA,IAAIuU,aACvD,QAAW5X,KAAKuW,UAAUsB,IAAI,mBAC9B,MAAMC,EAAW9X,KAAKuW,UAAUsB,IAAI,aAAe,GACnDC,EAASC,OACH/X,KAAKuW,UAAUsB,IAAI,SACrBhT,SAASmT,OAAO1M,SAAS,yBAEvB,QAAWwM,GAAUG,MAAM,IAAMjY,KAAKkY,gBAC5C,QAAWlY,KAAK0W,QAChB1W,KAAKmY,QAAQ,gBAAiB,IAAMnY,KAAKkY,cAAe,YAClD,WAAkB,EAAAP,EAAA,GAAOtU,KAAQA,IAAIuU,YAC3C5X,KAAKoY,aAAa,kBAClB,QAAkB,YAClB,QACIpY,KAAKuW,UAAUsB,IAAI,sCACK,QAApB,EAAa,QAAb,oBAAa,eAAErS,aAAK,eAAEb,MAAM,KAAK,KAhF1C,SAAoB0T,EAAaC,EAAsB,IACrDD,GACL,EAAAE,EAAY,CACRF,MACAG,aAAc,CACV,IAAI,oBAA4B,CAC5BC,eAAgB,CAAC,YAAa5T,SAASmT,QACvCU,uBAAwB,QAGhCC,iBAAkBL,IAwElBM,CAAW5Y,KAAKuW,UAAUsB,IAAI,qBAG1B,c,OACA,aAAyB,QAAb,oBAAa,eAAEgB,gBAC/BzY,QAAQoB,MAAM,6BACd,WACAqD,SAASsS,W,6CAnEJd,GAAY,qG,wBAAZA,EAAY,sFALjB,yBACA,4B,wCAID,G,0HC5CiB,yBACI,SACJ,S,yBAF6C,iBACzC,gC,yCAVhB,iBACI,iBAAO,4DAAgD,QACvD,4BACI,0BAEI,6EAA2B,sEAI3B,+BAGJ,QACJ,QACJ,Q,yBATY,0CAI+B,uC,0BAU/B,yBACI,SACJ,S,yBAF0C,iBACtC,gC,yCALhB,iBACI,iBAAO,yDAA6C,QACpD,4BACI,2BAAoB,0EAChB,+BAGJ,QACJ,QACJ,Q,yBAN4B,uCACe,oC,0BAc/B,yBACI,SACJ,S,yBAF6C,iBACzC,gC,yCAThB,iBACI,iBAAO,gEAAoD,QAC3D,4BACI,2BAEI,6EAGA,+BAGJ,QACJ,QACJ,Q,yBARY,0CAG+B,uC,0BAU/B,yBACI,SACJ,S,yBAF6C,iBACzC,gC,yCALhB,iBACI,iBAAO,mEAAuD,QAC9D,4BACI,2BAAoB,6EAChB,+BAGJ,QACJ,QACJ,Q,yBAN4B,0CACe,uC,0BA5C/C,gBACI,wBAeA,wBAUA,wBAcA,wBAUJ,S,qBAjDwB,uDAeA,iDAUA,uDAcA,wD,yCAWxB,kBACI,qBAGI,oEAEA,0BACJ,QACJ,Q,wBALQ,gE,0BAQZ,gBACI,kBACI,kBACI,0BACJ,QACA,kBAAkB,SAAa,QACnC,QACJ,S,qBAF0B,2BC7DvB,a,MAAMyC,UAA2B,KAmCpC,YACYtC,EACAuC,EACAC,GAERlC,QAJQ,KAAAN,OACA,KAAAuC,SACA,KAAAC,UA1BL,KAAAC,UAAwB,GAG/B,gBACI,OAAOjZ,KAAKwW,KAAK0C,UAIrB,aACI,OAAKlZ,KAAKmZ,iBAGHnZ,KAAKwW,KAAK4C,kBAAkBpZ,KAAKmZ,kBAF7B,GAMf,gBACI,OAAKnZ,KAAKqZ,cAGHrZ,KAAKqZ,aAAaC,WAFd,GAaR,WACHtZ,KAAKuZ,aACD,cACAvZ,KAAK+Y,OAAOS,cAAcC,UAAWC,IAC7BA,EAAO3E,IAAI,UAAoC,SAAxB2E,EAAO7B,IAAI,WAClCb,aAAa2C,WAAW,kBACxB3C,aAAa2C,WAAW,eACxB3C,aAAa2C,WAAW,yBAIpC3Z,KAAKmY,QAAQ,QAAS,IAAMnY,KAAK4Z,iBAAkB,KAGhD,kBACH,MAAMC,EAAe7Z,KAAKmZ,gBAAgBU,aACpCZ,EAAwB,GAC9B,IAAK,MAAM/L,KAAO2M,EACVA,EAAaC,eAAe5M,IAC5B+L,EAAU5Q,KAAK,CACXxJ,GAAIqO,EACJrL,KAAM,GAAGqL,EAAIvI,MAAM,KAAKkD,KAAK,SAA6B,GAApBgS,EAAa3M,UACnDM,MAAOqM,EAAa3M,KAIhClN,KAAKiZ,UAAYA,EACjBjZ,KAAK+Z,gBAAkB/Z,KAAKiZ,UAAU,GAMnC,iBACHjZ,KAAKga,QAAU,+BACXha,KAAKmZ,iBAAmBnZ,KAAKqZ,eACzBrC,eACAA,aAAaC,QAAQ,iBAAkBjX,KAAKmZ,gBAAgBta,IAC5DmY,aAAaC,QAAQ,cAAejX,KAAKqZ,aAAaxa,IAClDmB,KAAK+Z,iBACL/C,aAAaC,QAAQ,oBAAqBjX,KAAK+Z,gBAAgBvM,OAE/DxN,KAAKia,iBACLjD,aAAaC,QAAQ,iBAAkB,GAAGjX,KAAKia,gBAAgBpb,OAGvEmB,KAAKgZ,QAAQkB,SAAS,CAAC,cAE3Bla,KAAKga,QAAU,KAMX,iBAEJ,GADAha,KAAKga,QAAU,sCACXhD,aAAc,CACd,MAAMmD,EAAcnD,aAAaE,QAAQ,kBACnCkD,EAAWpD,aAAaE,QAAQ,eAClCiD,GAAeC,EACfpa,KAAKgZ,QAAQkB,SAAS,CAAC,aAEvBla,KAAKqa,iCAGbra,KAAKga,QAAU,KAGX,iCACJ,MAAMG,EAAcnD,aAAaE,QAAQ,aACnCkD,EAAWpD,aAAaE,QAAQ,aAChCoD,EAActD,aAAaE,QAAQ,mBACzC,GAAIoD,EACA,OAAQA,GACJ,IAAK,WACDtD,aAAaC,QAAQ,oBAAqB,KAC1C,MACJ,IAAK,oBACDD,aAAaC,QAAQ,oBAAqB,KAC1C,MACJ,IAAK,mBACDD,aAAaC,QAAQ,oBAAqB,KAIlDkD,GAAeC,IACfpD,aAAaC,QAAQ,iBAAkBkD,GACvCnD,aAAaC,QAAQ,cAAemD,GACpCpa,KAAKgZ,QAAQkB,SAAS,CAAC,e,6CAnItBpB,GAAkB,uC,wBAAlBA,EAAkB,4mB,GAAA,MDV3B,iBACI,kBACI,iCACJ,QACA,yBAmDA,2BASJ,QACJ,4C,sBA7De,kCAAgB,cAmDd,oC,0hGC7CV,G,oFCaS,eAMI,qBACJ,S,qBAJI,yC,wCCrBdxL,GAAiB,CACnB,CAAExH,KAAM,YAAayU,UAAWzB,IAChC,CAAEhT,KAAM,UAAWyU,UDkChB,M,MAAMC,UAAyB,KAQlC,YACYC,EACAlE,GAERO,QAHQ,KAAA2D,QACA,KAAAlE,YARL,KAAAlS,MAAgB,GAEvB,iBACI,OAAOrE,KAAKuW,UAAUsB,IAAI,uBAUvB,WACH7X,KAAKuZ,aACD,eACAvZ,KAAKya,MAAMC,SAASjB,UAAWC,IACvBA,EAAO3E,IAAI,WACX/U,KAAKqE,MAAQqV,EAAO7B,IAAI,aAIpC7X,KAAKuZ,aACD,QACAvZ,KAAKuW,UACAQ,OAAO,eACP0C,UAAWpS,GAASrH,KAAKqE,MAAQgD,K,6CA5BrCmT,GAAgB,0B,wBAAhBA,EAAgB,isBAlCrB,iBAII,6BACA,iBAGI,gBAAqB,iDAAqC,QAC1D,eAKI,sBACJ,QACA,sBAQJ,QACJ,S,MAvBI,kDASQ,yCAMC,iC,4HAiBd,ICjCH,CACI1U,KAAM,UACN6U,aAAc,IAAM,8GAAmCnc,KAAMoc,GAAMA,EAAEC,mBAEzE,CACI/U,KAAM,UACN6U,aAAc,IAAM,8GAAmCnc,KAAMoc,GAAMA,EAAEE,uBAEzE,CAAEhV,KAAM,KAAMiV,WAAY,cAOvB,a,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAHA,CAAC,aAAqB1N,GAAQ,CAAE2N,SAAS,KACxC,Q,GAEP,G,8CCOA,a,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAZA,CACL,MACA,MACA,S,GASD,G,eCeA,a,MAAMC,G,6CAAAA,I,wBAAAA,EAAS,WAFN9E,M,6BAZD,CACP,CACI+E,QAAS,MACTC,SAAU,KAA0B,CAChCC,YAAY,KAGpB,CACIF,QAAS,KACTG,KAAM,CAAC,QAEd,SAvBQ,CACL,KACA,KACAP,GACA,cAA6B,iBAAkB,CAC3CQ,SCpBI,IDsBR,KACA,KACAN,GACA,S,GAgBD,GEpCP,OACGO,gBAAgBN,IAChBlD,MAAO1W,GAAQnB,QAAQoB,MAAMD,K,qECNzB,MAAMma,EAkBT,YAAY7N,EAA0B,IAClC7N,KAAKnB,GAAKgP,EAAKhP,IAAM,GACrBmB,KAAK6B,KAAOgM,EAAKhM,MAAQ,GACzB7B,KAAK2b,UAAY9N,EAAK8N,QACtB3b,KAAK4b,QAAU/N,EAAK+N,SAAW,GAC/B5b,KAAK6b,WAAahO,EAAKgO,SACvB7b,KAAK+J,SAAW,IAAI,IAAM8D,EAAK9D,UAAa8D,EAAajD,QACzD5K,KAAK8b,cAAgBjO,EAAKiO,cAAgB,IAAI1Y,IAC1C,EAAG2Y,YAAWC,UAASxL,OAAMpO,WAAUgE,aAC5B,CACHoK,KAAM,IAAIC,KAAKD,EAAMuL,GAAWpL,UAChCvO,SACIA,IAAY,OAAoB4Z,EAASD,GAC7C3V,OAAQA,KAIpBpG,KAAKic,SAAWpO,EAAKoO,U,6GC9B7B,MAAMC,EAAoB,0BAmBpBC,EAAqBC,IACvB,OAAKC,GACDA,EACKnV,OAAQoV,KAAUA,EAAIvS,UACtB3G,IACIkZ,GACG,IAAI,IAAM,OAAD,wBACFA,EAAIvS,UAAQ,CACf1F,MAAO+X,aAAG,EAAHA,EAAKG,YAAYD,EAAIvS,SAASrB,OACrCoT,aAAcQ,EAAIR,iBAG7B5U,OAAQ4C,GAAUA,EAAM9C,WAI9B,SAASwV,EACZpR,EACAgR,GAEA,OA7BG,SACHhR,GAEA,MAAMqR,GAAQ,QAAcrR,GAC5B,OAAO,SACH,GAAG8Q,iBAAiCO,EAAQ,IAAMA,EAAQ,MAC5D/E,MAAK,OAAK9P,GAAMA,EAAExE,IAAK8B,GAAM,IAAI,IAASA,MAuBrCwX,CAA0BtR,GAAGsM,KAAKyE,EAAkBC,IAIxD,SAASO,EACZvR,EACAgR,GAEA,MAAMK,GAAQ,QAAcrR,GAC5B,OAAO,SACH,GAAG8Q,cAA8BO,EAAQ,IAAMA,EAAQ,MACzD/E,MACE,OAAK9P,GAAMA,EAAExE,IAAK8B,GAAM,IAAI,IAASA,KACrCiX,EAAkBC,M,oVCxD1B,MAAMQ,EAAoC,CAAC,UAAW,QAAS,MAAO,OAAQ,MAKvE,Y,MAAMC,EAcT,cAZQ,KAAAC,eAAmD,GAEnD,KAAAC,kBAAiD,GAEjD,KAAAC,UAAsB,GAEtB,KAAAC,kBAAgC,GAEhC,KAAAC,QAAkB,EAKtBC,OAAOC,iBAAiB,UAAYjb,IAChC,MAAMxD,EAAOqB,KAAKqd,QAAQlb,EAAMxD,MAAQ,IAAImJ,eACxC9H,KAAKsd,YAAc3e,IACdqB,KAAK8c,eAAene,KACrBqB,KAAK8c,eAAene,GAAQ,IAAI4e,EAAA,EAAgB,MAChDvd,KAAK+c,kBAAkBpe,GAAQqB,KAAK8c,eAAene,GAAM6e,gBAE7Dxd,KAAK8c,eAAene,GAAMsK,OAAOjJ,KAAKkd,SAClCld,KAAKgd,UAAUxU,QAAQ7J,IAAS,GAChCwD,EAAMsb,iBAEVzd,KAAKsd,UAAY3e,KAIzBwe,OAAOC,iBAAiB,QAAUjb,IAC9B,MAAMxD,EAAOqB,KAAKqd,QAAQlb,EAAMxD,MAAQ,IAAImJ,eAC5C9H,KAAK8c,eAAene,GAAMsK,KAAK,MAC3BjJ,KAAKsd,YAAc3e,IACnBqB,KAAKsd,UAAY,QAUtB,OAAOI,EAA0BzU,GAEpC,MAAM0U,GADND,EAASA,aAAiBxa,MAAQwa,EAAQA,EAAM/Y,MAAM,MAClBvB,IAAIwE,GAAK5H,KAAKqd,OAAOzV,EAAEE,gBAC3D,GAAI6V,EAAYlb,OAAS,GAAKzC,KAAK4d,iBAAiBD,GAAc,CAC9D3d,KAAKid,kBAAkB5U,KAAKsV,GAC5B,MAAME,EAAWF,EAAYA,EAAYlb,OAAS,GAMlD,OALKzC,KAAK8c,eAAee,KACrB7d,KAAK8c,eAAee,GAAY,IAAIN,EAAA,EAAgB,MACpDvd,KAAK+c,kBAAkBc,GAAY7d,KAAK8c,eAAee,GAAUL,gBAErExd,KAAK8d,2BACE9d,KAAK+c,kBAAkBc,GAAUpE,UAAW5V,IAC/C,GAAIA,EAAO,CACP,MAAMka,EAAoB,GAC1B,GAAIJ,EAAYlb,OAAS,EAAG,CAExB,IAAK,MAAMyK,KAAOyQ,EAAa,CAC3B,MAAMlQ,EAAQzN,KAAK8c,eAAe5P,GAClC6Q,EAAQ1V,KAAKoF,GAAQA,EAAMuQ,aAAoB,GAGnD,IAAK,IAAIpW,EAAI,EAAGA,EAAI+V,EAAYlb,OAAS,EAAGmF,IACxC,GAAImW,EAAQnW,GAAKmW,EAAQnW,EAAI,GAAM,OAG7BmW,EAAQ/Y,OAAO,CAAC4E,EAAGqU,IAAMrU,GAAKqU,EAAI,EAAI,GAAK,GAAI,IAChDN,EAAYlb,QACrBwG,OAKhB,OAAO,KAOH,OAAOtK,GACX,OAAIA,EAAK6J,QAAQ,QAAU,GAAK7J,EAAK6J,QAAQ,UAAY,GAAK7J,EAAK6J,QAAQ,YAAc,EAC9E7J,EAAKuf,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAE9Cvf,EAMH,2BAEJ,IAAK,MAAM+e,KAAS1d,KAAKid,kBACrBjd,KAAKgd,UAAU3U,KAAKqV,EAAMA,EAAMjb,OAAS,IAE7CzC,KAAKgd,WAAY,QAJA,IAWb,iBAAiBU,GACrB,IAAIS,EAAW,EACf,IAAK,MAAMjR,KAAOwQ,EACVd,EAAwBpU,QAAQ0E,GAAO,GACvCiR,IAGR,OAAOA,EAAW,G,6CAhHbtB,I,0BAAAA,EAAc,QAAdA,EAAc,qBAFX,S,GAET,G,kCCPP,MAiUauB,EAAmB,CAC5BC,OAAO,EACPC,SAAU,CACNC,OAAQ,GACR9D,MAAO,iBACP+D,SAAU,GACVC,KAAM,GACNC,YAAY,EACZC,aAAa,GAEjBC,IAnCQ,CACR/c,KAAM,eACNwI,MAAO,gBACP1G,YAAa,0CACbkb,WAAY,QACZC,WAAY,CACRla,KAAM,MACNma,IAAK,yBAETC,UAAW,CACPpa,KAAM,MACNma,IAAK,wBAETE,QArTY,CACZC,KAAM,CACFjc,MAAO,CACH,CACIpB,KAAM,OACN4Y,MAAO,SAEX,CACI5Y,KAAM,UACN4Y,MAAO,QACP0E,SAAU,CACN,CACItd,KAAM,SACN4Y,MAAO,gBAEX,CACI5Y,KAAM,QACN4Y,MAAO,iBAInB,CACI5Y,KAAM,UACN4Y,MAAO,WACP0E,SAAU,CACN,CACItd,KAAM,SACN4Y,MAAO,mBAEX,CACI5Y,KAAM,SACN4Y,MAAO,qBAInB,CACI5Y,KAAM,OACN4Y,MAAO,SAEX,CACI5Y,KAAM,WACN4Y,MAAO,aAEX,CACI5Y,KAAM,UACN4Y,MAAO,YAEX,CACI5Y,KAAM,YACN4Y,MAAO,eAGf2E,UAAW,mBACXC,SAAU,QAEdC,QAAS,CACLC,OAAQ,CACJ,SACA,UAGA,SACA,cACA,WAuPRC,KA/OS,CACTC,WAAY,yBACZC,MAAO,CACH,CACI7d,KAAM,UACN4Y,MAAO,eACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,UAGjB,CACIhe,KAAM,QACN4Y,MAAO,cACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,aAGjB,CACIhe,KAAM,UACN4Y,MAAO,WACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,QAGjB,CACIhe,KAAM,OACN4Y,MAAO,QACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,iBAGjB,CACIhe,KAAM,WACN4Y,MAAO,YACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,UAGjB,CACIhe,KAAM,UACN4Y,MAAO,WACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,oBAGjB,CACIhe,KAAM,YACN4Y,MAAO,aACPkF,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,aAiLrBC,KAvKS,CACTJ,MAAO,CACH,CACI7d,KAAM,eACNke,KAAM,qCACNJ,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,OAEbJ,WACI,qKAER,CACI5d,KAAM,oBACNke,KAAM,8DACNJ,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,QAEbJ,WAAY,4BAEhB,CACI5d,KAAM,gBACNke,KAAM,qCACNJ,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,QAEbJ,WACI,kWAER,CACI5d,KAAM,WACNke,KAAM,4BACNJ,KAAM,CACF/a,KAAM,OACNgb,MAAO,iBACPC,QAAS,YAEbJ,WACI,mWAGZO,QAAS,GA0HTC,QAnHY,CACZC,cAAe,CACX,CAAEC,QAAS,WAAY3S,MAAO,YAC9B,CAAE2S,QAAS,SAAU3S,MAAO,UAC5B,CAAE2S,QAAS,WAAY3S,MAAO,YAC9B,CAAE2S,QAAS,QAAS3S,MAAO,SAC3B,CAAE2S,QAAS,WAAY3S,MAAO,YAC9B,CAAE2S,QAAS,YAAa3S,MAAO,cAEnC4S,YAAa,CACT,YACA,OACA,WACA,OACA,WACA,YACA,aACA,QACA,QAEJC,WAAW,EACXC,iBAAiB,EACjBC,WAAY,GA8FZC,cAvFkB,CAClBC,aAAa,GAuFbC,UAhFc,CACdC,cAAc,EACdC,kBAAmB,GA+EnBC,QAxEY,CACZC,OAAQ,CACJ,kBAAmB,UACnB,oBAAqB,UACrB,oBAAqB,UACrB,qBAAsB,OAEtB,iBAAkB,UAClB,wBAAyB,UACzB,mBAAoB,UACpB,0BAA2B,UAC3B,gBAAiB,UACjB,uBAAwB,UACxB,oBAAqB,OACrB,2BAA4B,OAE5B,WAAY,UACZ,cAAe,UACf,YAAa,WAEjBC,qBAAqB,EACrBC,yBAAyB,EACzBC,OAAQ,CACJC,OAAQ,CACJ,CAAEhU,IAAK,kBAAmBrL,KAAM,mBAChC,CAAEqL,IAAK,oBAAqBrL,KAAM,8BAClC,CAAEqL,IAAK,oBAAqBrL,KAAM,gBAClC,CAAEqL,IAAK,qBAAsBrL,KAAM,uBAEvCsf,MAAO,CACH,CAAEjU,IAAK,iBAAkBrL,KAAM,kBAC/B,CAAEqL,IAAK,gBAAiBrL,KAAM,iBAC9B,CAAEqL,IAAK,mBAAoBrL,KAAM,eACjC,CAAEqL,IAAK,oBAAqBrL,KAAM,sBAEtCuf,MAAO,CACH,CAAElU,IAAK,WAAYrL,KAAM,wBACzB,CAAEqL,IAAK,cAAerL,KAAM,2BAC5B,CAAEqL,IAAK,YAAarL,KAAM,0BAE9Bwf,MAAO,CACH,CACInU,IAAK,WACLrL,KAAM,MACN8d,KAAM,CAAE/a,KAAM,OAAQgb,MAAO,iBAAkBC,QAAS,eA6CpE9H,MAAM,G,aC3TH,Y,MAAMuJ,UAAwB,IAmDjC,YAAoBC,GAChBzK,QADgB,KAAAyK,SAjDZ,KAAAC,UAAY,UAEZ,KAAAC,WAAa,IAAIlE,EAAA,EAA2B,IAE5C,KAAAmE,UAA2C,GAE3C,KAAAC,aAAyC,GA6C7C,MAAMC,EAAM,IAAInR,KACVoR,EAAO,IAAIpR,KChEb,eDiEEqR,GAAQ,EAAAC,EAAA,GAAUH,EAAKC,GACvB,aAAY,EAAAlgB,EAAA,GAAOkgB,EAAM,YACzB,EAAAlgB,EAAA,GAAOkgB,EAAM,uBACnB,QAAI,OAAQ,OAAqB,KAAM,SAAS,IAChD,QAAI,MAAO,oBAA4BC,IAAS,KAAM,SAAS,GAC/D9hB,KAAKgiB,OA/CT,cAAqBxU,GACjBxN,KAAKyhB,WAAWxY,KAAKuE,GAIlB,OAAgB3L,GAKnB,OAJK7B,KAAK2hB,aAAa9f,KACnB7B,KAAK0hB,UAAU7f,GAAQ,IAAI0b,EAAA,EAAmB,MAC9Cvd,KAAK2hB,aAAa9f,GAAQ7B,KAAK0hB,UAAU7f,GAAM2b,gBAE5Cxd,KAAK2hB,aAAa9f,GAItB,KAAQA,EAAc2L,GACpBxN,KAAK2hB,aAAa9f,KACnB7B,KAAK0hB,UAAU7f,GAAQ,IAAI0b,EAAA,EAAmB,MAC9Cvd,KAAK2hB,aAAa9f,GAAQ7B,KAAK0hB,UAAU7f,GAAM2b,gBAEnDxd,KAAK0hB,UAAU7f,GAAMoH,KAAKuE,GAGvB,MAAe3L,GAClB,OAAQ7B,KAAK2hB,aAAa9f,GAEpB7B,KAAK0hB,UAAU7f,GAAMmc,WADrB,KAKV,YACI,OAAOhe,KAAKuhB,OAAOU,WAEvB,UAAiBzU,GACbxN,KAAKuhB,OAAOW,SACR,GAAG1U,OAAWxN,KAAK6X,IAAI,aAAe7X,KAAKwhB,aAmBtC,O,oDACLxhB,KAAK6X,IAAI,WACTsF,OAAOkB,OAAQ,IAEA,QAAf,EAAAre,KAAK6X,IAAI,cAAM,eAAEhW,QACjB7B,KAAKwhB,UAAYxhB,KAAK6X,IAAI,OAAOhW,MAErC7B,KAAKwhB,UACD3c,SAASsd,SAASC,MAAM,GAAGzd,MAAM,KAAKkD,KAAK,MAAQ7H,KAAKwhB,WAC5D,QAAWxhB,KAAKwhB,UAAU7c,MAAM,KAAKkD,KAAK,KAAKwa,gBAC/C,QAAI,WAAY,gCAChBriB,KAAKsiB,aAAarZ,MAAK,GACnBkU,OAAOkB,QACFlB,OAAOoF,cAAapF,OAAOoF,YAAc,IAC9CpF,OAAOoF,YAAYzK,SAAW9X,QAKtC,eACI,OAAOA,KAAKwhB,UAOT,IAAatU,GAChB,MAAMtO,EAAOsO,EAAIvI,MAAM,KACvB,GAAgB,QAAZ/F,EAAK,GACL,OAAO,QAAgBA,EAAMwf,GAEjC,MAAMoE,EAAoBxiB,KAAKyhB,WAAWzD,WAC1C,IAAK,MAAMyE,KAAYD,EAAmB,CACtC,MAAMhV,GAAQ,QAAgB5O,EAAKwjB,MAAM,GAAIK,GAC7C,GAAa,MAATjV,EACA,OAAOA,EAGf,OAAO,QAAgB5O,EAAMwf,I,6CAzGxBkD,GAAe,c,0BAAfA,EAAe,QAAfA,EAAe,qBAFZ,S,GAET,G,wBEpBmC,QAAQ,OAAQ,EACtD,QAAW,SAAU,EACjB,QAAM,CAAEoB,QAAS,EAAG7iB,OAAQ,KAC5B,QAAQ,KAAK,QAAM,CAAE6iB,QAAS,EAAG7iB,OAAQ,UAE7C,QAAW,SAAU,EACjB,QAAM,CAAE6iB,QAAS,EAAG7iB,OAAQ,OAC5B,QAAQ,KAAK,QAAM,CAAE6iB,QAAS,EAAG7iB,OAAQ,UAIH,QAAQ,OAAQ,EAC1D,QAAM,QAAQ,QAAM,CAAE6iB,QAAS,EAAG7iB,OAAQ,QAC1C,QAAM,QAAQ,QAAM,CAAE6iB,QAAS,EAAG7iB,OAAQ,EAAG,iBAAkB,WAC/D,QAAW,iBAAiB,QAAQ,oB,cCdxC,IAAI8iB,ECIAC,EACAC,EACAC,EDJG,SAASC,EAAgBC,GAC5BL,EAAWK,EAWR,SAASC,EACZre,EACAyB,EACA6c,EAAiB,KACjBC,EACAC,EAAqC,IAErC,IAAKT,EACD,MAAM,IAAIjkB,MAAM,4CAEpB,MAAM2kB,EAAeV,EAASW,KAAKjd,EAAS6c,EAAQ,OAAF,QAC9CK,WAAY,CAAC3e,GACbxC,SAAU,KACPghB,IAEHF,IACAC,EAAYA,GAAa,KAAOE,EAAaG,WAC7CH,EAAaI,WAAWhK,UAAU,IAAM0J,MAWzC,SAASO,EACZC,EACAT,EACAC,EACAC,EAAqC,IAErChjB,QAAQie,MAAMsF,GACdV,EAAO,UAAWU,EAAKT,EAAQC,EAAWC,GAUvC,SAASQ,EACZD,EACAT,EACAC,EACAC,EAAqC,IAErChjB,QAAQoB,MAAMmiB,GACdV,EAAO,QAASU,EAAKT,EAAQC,EAAWC,GA2BrC,SAASS,EACZF,EACAT,EACAC,EACAC,EAAqC,IAErChjB,QAAQ0jB,KAAKH,GACbV,EAAO,OAAQU,EAAKT,EAAQC,EAAWC,GCpFpC,SAASW,EACZC,EACAf,EAAuB,KAAM,MAC7BnQ,EAAmB,KAEfkR,EAAMC,YACFrB,GAAYA,EAAWsB,cACvBrB,GAAYA,EAAWqB,cACvBpB,GAAQ5P,cAAc4P,GAC1BF,EAAaoB,EAAMG,UAAU1K,UAAWtX,KAGpC,QAAI,QAAS,wCAFyBA,EAAMkD,QAAQ+e,6BACVjiB,EAAMgiB,UAAUC,QAqBtE,SAAwBJ,GAChBA,EAAMC,aACN,QAAI,QAAS,sCACbD,EAAMK,iBAAiB7lB,KAAK,KACxBqlB,EAAW,gDAAiD,UAAW,IACnEhf,SAASsS,QAAO,OAxBpBkN,CAAeL,KAEnBnB,EAAamB,EAAMM,UAAU7K,UAAU,MACnC,QAAI,QAAS,mCACbwJ,EAAO,gDAAiD,IACpDpe,SAASsS,QAAO,MAGxB2L,EAAcxS,YAAY,MACtB,QAAI,QAAS,2BACb0T,EAAMO,kBACPzR,ICnBJ,SAAe0R,EAAW1M,G,8CAC7B,MAAM0G,EAAW1G,EAAS0G,UAAY3Z,SAAS2Z,SACzCvU,EAAO6N,EAASyG,QAAU1Z,SAAS4f,SACnChG,EAAO3G,EAAS2G,MAAQ5Z,SAAS4Z,KACjCiG,EAAM5M,EAAS4G,WACf,GAAGF,MAAavU,KAAQwU,IACxB5Z,SAASmT,OACTyC,GAAS5V,SAASsd,SAAW,KAAKjE,QAAQ,KAAM,KACtD9d,QAAQC,IACJ,QACAyX,EAASC,KACTlT,SAAS8f,KAAKrZ,SAAS,aACU,SAAjC0L,aAAaE,QAAQ,SAEzB,MAAMa,EACFD,EAASC,MACTlT,SAAS8f,KAAKrZ,SAAS,cACU,SAAjC0L,aAAaE,QAAQ,QAEnBkM,EAA2B,CAC7BwB,UAAW,YACXC,MAAO,SACP5a,KAAM,GAAGA,IAAOwU,EAAO,IAAMA,EAAO,KACpCqG,SAAU,GAAGJ,yBACbK,UAAW,GAAGL,qBACdM,aAAc,GAAGngB,SAASmT,SAASyC,mBACnCwK,cAAenN,EAAS6G,YACxBuG,YAAY,EACZnN,QAWJ,OATIf,cACAA,aAAaC,QACT,OACA,KAAKc,IAASlT,SAAS8f,KAAKrZ,SAAS,iBAGzCyM,GACA8L,EAAW,8BAER,SAAMT,K,4CCxDjB,MAAM+B,EAAgB,IAAI5H,EAAA,EAA2B,MAExC6H,EAAeD,EAAc3H,eAkBnC,SAAS6H,IACZ,OAAOF,EAAcnH,WAfzBje,WAAW,KACP,IACI,GAAIulB,KAAM,OACZ,WACF,SAAS,WACJ5N,MACG,EAAA6N,EAAA,GAAM,MACN,EAAAC,EAAA,GAAM,KACN,EAAApiB,EAAA,GAAKwE,GAAM,IAAI,KAAUA,KAE5B6R,UAAWtO,GAASga,EAAclc,KAAKkC,KAC7C,M,4BCjBI,SAASsa,EAAcriB,GAC1B,IAAIyC,EAAM,GACV,GAAIzC,EACA,IAAK,MAAM8J,KAAO9J,EACVA,EAAI0W,eAAe5M,IAAnB9J,MAA2BA,EAAI8J,KAC/BrH,GAAO,GAAIA,EAAM,IAAM,KAAMqH,KAAO9J,EAAI8J,MAIpD,OAAOrH,E,iGCTJ,Y,MAAM6f,EAHb,cAKc,KAAAC,QAAsC,GAEtC,KAAAC,WAAyC,GAEzC,KAAAC,eAEN,GAEe,KAAAvD,aAAe,IAAI,KAAyB,GAE/C,KAAA7K,YAAczX,KAAKsiB,aAAa9E,eAGhD,qBACI,OAAOxd,KAAKsiB,aAAatE,WAGtB,cACHhe,KAAK8lB,UAGC,UACN,IAAK,MAAM5Y,KAAOlN,KAAK2lB,QACfzY,KAAOlN,KAAK2lB,SACZ3lB,KAAKoY,aAAalL,GAG1B,IAAK,MAAMA,KAAOlN,KAAK4lB,WACf1Y,KAAOlN,KAAK4lB,YACZ5lB,KAAKkT,cAAchG,GAG3B,IAAK,MAAMA,KAAOlN,KAAK6lB,eACf3Y,KAAOlN,KAAK6lB,gBACZ7lB,KAAK+lB,MAAM7Y,GAWb,QAAQrL,EAAcmkB,EAAgBT,EAAgB,KAC5D,KAAI1jB,GAAQmkB,GAAMA,aAAcC,UAO5B,MAAM,IAAIvnB,MACNmD,EACM,6CACA,8CATV7B,KAAKoY,aAAavW,GAClB7B,KAAK2lB,QAAQ9jB,GAAa9B,WAAW,KACjCimB,IACAhmB,KAAK2lB,QAAQ9jB,GAAQ,MACtB0jB,GAcD,aAAa1jB,GACf7B,KAAK2lB,QAAQ9jB,KACbuW,aAAapY,KAAK2lB,QAAQ9jB,IAC1B7B,KAAK2lB,QAAQ9jB,GAAQ,MAUnB,SAASA,EAAcmkB,EAAgBT,EAAgB,KAC7D,KAAI1jB,GAAQmkB,GAAMA,aAAcC,UAI5B,MAAM,IAAIvnB,MACNmD,EACM,8CACA,+CANV7B,KAAKkT,cAAcrR,GACnB7B,KAAK4lB,WAAW/jB,GAAayO,YAAY,IAAM0V,IAAMT,GAcnD,cAAc1jB,GAChB7B,KAAK4lB,WAAW/jB,KAChBqR,cAAclT,KAAK4lB,WAAW/jB,IAC9B7B,KAAK4lB,WAAW/jB,GAAQ,MAStB,aAAaA,EAAckkB,GACjC/lB,KAAK+lB,MAAMlkB,GACX7B,KAAK6lB,eAAehkB,GAAQkkB,EAOtB,MAAMlkB,GACR7B,KAAK6lB,gBAAkB7lB,KAAK6lB,eAAehkB,KAC3C7B,KAAK6lB,eAAehkB,aAAiB,IAC9B7B,KAAK6lB,eAAehkB,GAAuBqiB,cAC3ClkB,KAAK6lB,eAAehkB,KAC3B7B,KAAK6lB,eAAehkB,GAAQ,MAK1B,UAAUqkB,GAChB,MAAMC,EAAOrZ,OAAOlO,KAAKoB,KAAK6lB,gBAAgB3e,OAAQkf,GAClDA,EAAE9a,SAAS4a,IAEf,IAAK,MAAMhZ,KAAOiZ,EACdnmB,KAAK+lB,MAAM7Y,I,6CArIVwY,I,0BAAAA,EAAS,QAATA,EAAS,qBAFN,S,GAET,I,4LCaP,IAAIlE,EAAY,MAET,SAAS6E,EAAWxkB,GACvB2f,EAAY3f,EAWT,SAASxB,EACZuE,EACA+e,EACA2C,EACA1lB,EAAwB,QACxB2lB,GAAiB,EACjBC,EAAmBhF,GAEnB,GAAIrE,OAAOkB,OAASkI,EAAO,CACvB,MAAMzF,EAAmB,CACrB,iBACA,iBACA,kBAEAwF,EACAlmB,QAAQQ,GACJ,MAAM4lB,QAAe5hB,QAAW+e,OAC7B7C,EACHwF,GAGJlmB,QAAQQ,GAAQ,MAAM4lB,QAAe5hB,QAAW+e,OAAU7C,IAU/D,SAAS2F,EAAgB7nB,EAAgBwE,GAC5C,MAAM8J,EAAMtO,EAAK8nB,QACjB,OAAItjB,GAAmB,MAAZA,EAAI8J,GACJtO,EAAK6D,OAAS,EAAIgkB,EAAgB7nB,EAAMwE,EAAI8J,IAAQ9J,EAAI8J,GAE5D,KAQJ,SAASyZ,EAAgBC,EAAa,GAAI1Z,EAAc,IAC3D,OAAO0Z,EAAM1f,OACT,CAACoB,EAAIue,EAAKC,IACNA,EAAIte,QAEMse,EAAI1f,KADV8F,EACgBtF,GAAMA,EAAEsF,KAAS5E,EAAG4E,GACpBtF,GAAMA,IAAMU,MAC1Bue,GASX,SAASE,EAAUC,EAAchkB,EAAgB,GACpD,OAAOD,KAAKC,MAAMD,KAAKkkB,UAAYD,EAAOhkB,IAAUA,EAGjD,SAAekkB,EAClBrZ,EACAsZ,G,8CAEA,MAAMC,EAAMD,EAAO7D,KACf,IAAqB,+BAEd,KAAgB,CACnBzV,UAGR,OAAO,OAAP,8BACcvP,QAAQ+oB,KAAK,CACnBD,EAAIE,kBAAkBnlB,MACjBuV,MAAK,OAAOrU,GAAmB,SAAbA,EAAEkkB,SACpB3P,YACLwP,EAAII,cAAc5P,eACnB,CACHoC,QAAUrO,GAAOyb,EAAIE,kBAAkBtN,QAAUrO,EACjD8b,MAAO,IAAML,EAAIK,YAQlB,SAASC,EAAUC,EAAaC,EAAoB,KACvD,MAAMC,EAAa,IAAIC,OACnB,+DACA,MAEJ,IAAIC,EAAa,KACjB,MAAMC,EAAU,CAAC,IACjB,KAAQD,EAAaF,EAAWI,KAAKN,IAC7BI,EAAW,GAAGtlB,QAA4B,MAAlBslB,EAAW,IAAYC,EAAQ3f,KAAK,IAChE2f,EAAQA,EAAQvlB,OAAS,GAAG4F,KACxB0f,EAAW,GACLA,EAAW,GAAG7J,QAAQ,IAAI4J,OAAO,KAAM,KAAM,KAC7CC,EAAW,IAGzB,MAAMG,EAAoBF,EAAQvT,OAAO,EAAG,GAAG,GAa/C,OAZiBuT,EAAQ5kB,IAAK+kB,IAC1B,MAAMC,EAAU,GAChB,IAAK,IAAIxgB,EAAI,EAAGA,EAAIugB,EAAI1lB,OAAQmF,IAAK,CACjC,MAAMsF,EAAMgb,EAAQtgB,GAAGjD,MAAM,KAAKkD,KAAK,KAAKC,cAC5C,IACIsgB,EAAQlb,GAAOmb,KAAKC,MAAMH,EAAIvgB,IAChC,MAAOnJ,GACL2pB,EAAQlb,GAAOib,EAAIvgB,IAAM,IAGjC,OAAOwgB,IA2BR,SAASG,EAAaC,EAAkBC,GAC3C,MAAML,EAAU9nB,SAASooB,cAAc,KACvCN,EAAQO,aACJ,OACA,iCAAmCC,mBAAmBH,IAE1DL,EAAQO,aAAa,WAAYH,GAEjCJ,EAAQS,MAAM1I,QAAU,OACxB7f,SAASuG,KAAKiiB,YAAYV,GAE1BA,EAAQW,QAERzoB,SAASuG,KAAKmiB,YAAYZ,GAsBvB,SAASa,EAAiBC,GAC7B,MAAMC,EAAQ,IAAID,GACZ9gB,EAAM,GACZ,KAAO+gB,EAAM1mB,QAAQ,CAEjB,MAAMwG,EAAOkgB,EAAMC,MACflmB,MAAMmmB,QAAQpgB,GAEdkgB,EAAM9gB,QAAQY,GAEdb,EAAIC,KAAKY,GAIjB,OAAOb,EAAIkhB,UAUR,SAASC,EAAqBC,EAAQC,EAAMC,EAAQC,GACvD,OACKH,GAAUE,GAAUF,EAASG,GAC7BF,EAAOC,GAAUD,EAAOE,GACxBD,GAAUF,GAAUE,EAASD,GAC7BE,EAAOH,GAAUG,GAAQF,EAIlC,MAAMG,EAQN,SAAe/jB,GACX,IAAIgkB,EAAI,WAAahkB,EAAIpD,OACzB,IAAK,IAAImF,EAAI,EAAGA,EAAI/B,EAAIpD,OAAQmF,IAC3BiiB,EAAI9mB,KAAK+mB,KAAKD,EAAIhkB,EAAIkkB,WAAWniB,GAAI,YACjCiiB,EAAKA,GAAK,GAAOA,IAAM,GAChC,OAAO,WAGH,OAFAA,EAAI9mB,KAAK+mB,KAAKD,EAAKA,IAAM,GAAK,YAC9BA,EAAI9mB,KAAK+mB,KAAKD,EAAKA,IAAM,GAAK,aACtBA,GAAKA,IAAM,MAAQ,GAhBtBG,CAAM,WACbC,GAmBSrgB,EAnBI,WAmBDC,EAnBa,UAmBV3E,EAnBsB,WAmBnByD,EAnB+BihB,IAoB5C,WAKH,IAAI5c,GAJJpD,KAAO,IACPC,KAAO,GAGW,EAOlB,OANAD,EAAIC,EAAKA,IAAM,EACfA,GAJA3E,KAAO,IAIGA,GAAK,GAAM,EAGrB8H,EAAKA,GADLrE,EAAS,GALTA,KAAO,GAKO,GACA,EACdzD,GAHAA,EAAKA,GAAK,GAAOA,IAAM,IAGd8H,EAAK,GACNA,IAAM,GAAK,aAb3B,IAAepD,EAAGC,EAAG3E,EAAGyD,EAjBjB,SAASuhB,EAAqBlD,EAAe,IAAKhkB,EAAgB,GACrE,OAAOD,KAAKC,MAAMinB,KAAUjD,EAAOhkB,IAAUA,EAkC1C,SAASmnB,IACZ,OAIG,WACH,MACMC,GADO,IAAI3Z,MAEZ4Z,mBACG/pB,SAASgqB,cAAc,QAAQC,aAAa,SACxC9pB,UAAU+pB,UAEjB1iB,cACL,OAAOsiB,EAAa5hB,QAAQ,MAAQ,GAAK4hB,EAAa5hB,QAAQ,MAAQ,EAZ/DiiB,GAAiB,QAAU,SAe/B,SAASC,EAAiBC,GAC7B,MAAMC,EAAU,GAChB,IAAK,MAAM1d,KAAOyd,EAAKE,SACdF,EAAKE,SAAS3d,GAAK4d,OACpBF,EAAQviB,KAAK6E,GAGrB,OAAO0d,I,2SClSC,eACI,oBACI,SACJ,QACJ,S,qBAJK,+BAEG,4D,sBAGR,iBACI,yBACJ,S,MADiB,+B,sBAmCtB,Y,MAAMG,EAtDb,cA0DoB,KAAAC,UAAoB,iBAQpB,KAAAvd,MAAkC,I,6CAZzCsd,I,wBAAAA,EAAmB,yb,QAnDxB,oBAMI,sBACI,SACA,SACJ,QACA,uBAKA,uBAGJ,S,MAfI,qCACA,wCAEe,wCAAuB,eAClC,kCAGoC,2CAKZ,mC,uZAoCjC,G,sDC9CC,oBAKI,8DAA+B,OAAtB,EAAA7H,OAAA,WAAoB,QAAS,IAEtC,sBACJ,Q,gDAJI,qCAGU,0BAwCf,Y,MAAM+H,UAA4B,KAlDzC,c,oBAoDoB,KAAAC,QAA0B,GAEzB,KAAAhI,OAAS,IAAI,MAIvB,QACHljB,KAAKmY,QAAQ,QAAS,IAAOnY,KAAKmrB,MAAO,I,0EATpCF,KAAmB,GAAnBA,I,2BAAAA,EAAmB,mZA/CxB,0BASA,oBAII,iDAAsB,iCACC,EAAAxD,QAAU,KAAE,SAEnC,oBAAU,SAAgC,QAC9C,S,MAdqB,2BASjB,8BAIU,2C,0WA+Bf,G,gFC7CC,iBAKI,SACJ,S,qBADI,mC,wCAEJ,yBAKI,4DAEA,aACI,kBAQJ,QACJ,Q,wBAbI,yBAKQ,8BAAmB,oBAkDhC,Y,MAAM2D,EAaT,YAA8CC,GAAA,KAAAA,WAX9B,KAAAhlB,QAAUrG,KAAKqrB,SAAShlB,QAExB,KAAAlD,KAAOnD,KAAKqrB,SAASloB,MAAQ,UAE7B,KAAAmoB,OAAStrB,KAAKqrB,SAASC,QAAU,OAEjC,KAAApI,OAASljB,KAAKqrB,SAASnI,QAAU,KAO1C,WACHnjB,WAAW,IAAOC,KAAKmrB,MAAO,EAAO,KACrCprB,WAAW,IAAOC,KAAKurB,cAAe,EAAO,M,6CAjBxCH,GAAe,MAaJ,O,wBAbXA,EAAe,gtBAlEpB,uBAOA,wB,MALK,wCAMA,gC,gcA0DN,G,iEC/CS,kBACI,SACJ,S,sBADI,sD,yBARR,iBAMI,SACA,wBAGJ,S,sBAPI,wCAGA,kCACO,oC,wCAff,WAAqC,4EACjC,iBAOA,uBAWJ,Q,wBAhBQ,wCAA6B,+BAA7B,CAA6B,6BAA7B,CAA6B,+BAM5B,kDAyCV,Y,MAAMI,EAoBT,YACsCH,EAC1BI,GAD0B,KAAAJ,WAC1B,KAAAI,MArBL,KAAAC,KAAO,EAEP,KAAAC,OAAS3rB,KAAKqrB,SAASM,QAAU,GAExB,KAAAtlB,QAAUrG,KAAKqrB,SAAShlB,QAExB,KAAAlD,KAAOnD,KAAKqrB,SAASloB,MAAQ,UAE7B,KAAAmoB,OAAStrB,KAAKqrB,SAASC,QAAU,UAEjC,KAAAtf,UAAoBhM,KAAKqrB,SAASrf,WAAa,EAa3DhM,KAAKqrB,SAASK,KAAKjS,UAAWwE,GAC1Blb,KAAKnD,IAAI,GAAMI,KAAK0rB,KAAOzN,GAAK,IAZxC,mBACI,OAAO,EAAA2N,EAAA,GAAqC,IAAjB5rB,KAAKgM,WAAoB,OAejD,WACHjM,WAAW,IAAOC,KAAKmrB,MAAO,EAAO,KACrCprB,WAAW,IAAOC,KAAKurB,cAAe,EAAO,KAG1C,kBACHvrB,KAAK6rB,eAGF,eACH,MAAMC,EAAM9rB,KAAKyrB,IAAIM,cAAcC,wBACnC,IAAKF,EAAIpsB,MAAO,OAAOK,WAAW,IAAMC,KAAK6rB,eAAgB,KAC7D7rB,KAAK2rB,OAAS5oB,KAAKnD,IACf,IACCI,KAAKqrB,SAASM,QAAU,KAAOG,EAAIpsB,OAAS,M,6CA3C5C8rB,GAAkB,MAqBf,KAAgB,e,wBArBnBA,EAAkB,ufAlDvB,gC,KAAe,gC,iUAkDhB,G,sBChDa,SACI,SACJ,S,wDAGA,eAOI,SACJ,S,yBAHI,uCAEA,gC,yBArBZ,SACI,iBAKI,oBAAU,SAA8B,QAC5C,QACA,iBACI,gCAGJ,QACA,iBACI,qBASJ,QACJ,S,gCArBQ,wCAA6B,sBAGnB,uCAGK,gCAAc,cASR,mC,yBAS5B,eAAS,SAAW,S,qBAAX,yB,yBAGV,0BACA,gBAAuC,SAAa,S,qBADvC,qBAC0B,2B,cAK5C,Y,MAAMS,EA3Cb,cA6CoB,KAAAjS,QAAkB,GAElB,KAAAxY,MAAgB,GAEhB,KAAA0qB,MAA2B,I,6CANlCD,I,wBAAAA,EAAsB,+pB,GAAA,M,QAxC3B,iBAII,gCAyBJ,QACA,0CAGA,2C,sBA7BmB,kCAAgB,gB,iBAoCpC,G,8ECqBP,MAAME,EAAqB,CACvB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,MAoCG,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,6BANE,CACP,CAAEhR,QAAS,KAAiBC,SAAU,SACtC,CAAED,QAAS,IAAkBC,SAAU,KAC1C,SAJQ,CAAC,KAAc,KAAa,QAAwB8Q,GA7C7D,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,Q,GAoCG,G,MAhCHpB,EAAmB,MACnB,IAAa,e,MACbE,EAAmB,WADnB,KAAa,I,MAIb,IAAqB,WAJrB,IAAa,oB,MASbgB,EAAsB,MATtB,IAAa,qB,sGC1DT,kBAII,sBACA,eAKJ,S,qBANc,8BAIN,6C,wCAGR,oBAII,oBACI,SACJ,QACA,oBAA8C,+DAC1C,SACJ,QACJ,Q,wBALQ,sCAGA,wC,yBAIJ,mBACI,kBAGI,0BACA,aAAG,SAAa,QACpB,QACJ,S,qBAFW,2BAzChB,MAAMI,EAAmB,CAC5BxsB,OAAQ,OACRH,MAAO,OACP4sB,UAAW,oBACXC,SAAU,qBA4CP,Y,MAAMC,EAuBT,YACYC,EACyBngB,GADzB,KAAAmgB,cACyB,KAAAngB,QArBpB,KAAAnK,MAAQ,IAAI,MAEb,KAAAkI,MAAgBrK,KAAKsM,MAAMjC,OAAS,UAEpC,KAAAwV,QAAkB7f,KAAKsM,MAAMuT,SAAW,gBAExC,KAAA6M,aAAuB1sB,KAAKsM,MAAMogB,cAAgB,SAElD,KAAAC,YAAsB3sB,KAAKsM,MAAMqgB,aAAe,SAEhD,KAAAhN,KAAwB3f,KAAKsM,MAAMqT,MAAQ,CACvDC,MAAO,iBACPC,QAAS,QAGG,KAAA+M,aAAe,IAAO5sB,KAAKysB,YAAYG,cAAe,EAEtD,KAAAC,YAAc,IAAO7sB,KAAKysB,YAAYG,cAAe,EAQ9D,YACH5sB,KAAKmC,MAAMb,KAAK,CAAEimB,OAAQ,U,6CA9BrBiF,GAAqB,kBAyBlB,Q,wBAzBHA,EAAqB,8sB,GAAA,MAtC1B,kBACI,gBAAqB,SAAW,QACpC,QACA,wBAWA,0BAWA,2C,sBAxByB,wBAGpB,kCAAgB,cAYhB,oC,iBAsBN,I,+JC9Ba,S,yBADJ,SACI,gCAGJ,S,sBAFS,8CAA4B,8BAAAM,W,yBAGrC,SACI,iB,oBACJ,S,sBADS,wD,qBAGL,S,yBADJ,SACI,gCAGJ,S,sBAFS,6CAA2B,mC,yBAXxC,iBACI,gCAKA,gCAGA,gCAKJ,S,qBAdqC,yBAClB,2CAKA,uC,cArBxB,Y,MAAMC,EAGT,YAAYpkB,GACR3I,KAAK6N,KAAOlF,EAAEkF,KACd7N,KAAKynB,MAAQ9e,EAAE8e,OAAS,KAAO,O,iEAL1BsF,EAAiB,QAAjBA,EAAiB,Y,GAAvB,GAiCA,Q,MAAMC,UACD,KA6BR,YACYC,EACAC,EACAC,GAERrW,QAJQ,KAAAmW,WACA,KAAAC,WACA,KAAAC,YArBI,KAAAC,UAAW,EAEX,KAAAC,OAAQ,EAEjB,KAAAzoB,KAA0C,WAIzC,KAAA0oB,aAA2B,KAII,KAAAC,QAAU,IAAMvtB,KAAKsjB,OAChB,KAAAkK,QAAU,IAClDxtB,KAAKqtB,MAAQrtB,KAAKsjB,OAAS,GACa,KAAAmK,QAAU,IAClDztB,KAAKqtB,MAAQrtB,KAAKynB,QAAU,GAUzB,YAAYiG,GACf1tB,KAAK2tB,kBAED3tB,KAAKstB,eACJI,EAAQE,OAASF,EAAQG,OAASH,EAAQ7N,UAE3C7f,KAAKsjB,OAIN,cACHxM,MAAMgX,cACN9tB,KAAKynB,QAGF,OACHznB,KAAK+tB,cACD/tB,KAAKstB,cAActtB,KAAKynB,QACvBznB,KAAKguB,UACVhuB,KAAKstB,aAAettB,KAAKktB,SAASe,OAAO,CACrCC,cAAeluB,KAAKotB,SACpBe,iBAAkBnuB,KAAKktB,SAClB7N,WACA+O,oBAAoBpuB,KAAKitB,UACzBoB,cAAc,CACX,CACIC,QAAStuB,KAAK4tB,OAAS,MACvBW,SACoB,QAAfvuB,KAAK6tB,MACA,SACc,UAAd7tB,KAAK6tB,MACL,MACA7tB,KAAK6tB,QAAU,SACzBW,SAAUxuB,KAAK4tB,OAAS,MACxBa,SAAUzuB,KAAK6tB,OAAS,WAIxC7tB,KAAKstB,aAAaoB,OAAO1uB,KAAKguB,SAC1BhuB,KAAKotB,UACLptB,KAAKuZ,aACD,WACAvZ,KAAKstB,aAAaqB,gBAAgBlV,UAAU,IAAMzZ,KAAKynB,WAK5D,QACCznB,KAAKstB,eACLttB,KAAKstB,aAAasB,UAClB5uB,KAAKstB,aAAe,MAIpB,cACJttB,KAAK4E,KACuB,iBAAjB5E,KAAK6f,QACN,OACA7f,KAAK6f,mBAAmB,MACxB,WACA,YAGN,kBACJ7f,KAAK8sB,SAAW,aAAgB,CAC5B+B,UAAW,CACP,CACIzT,QAAS2R,EACT1R,SAAU,CAAExN,KAAM7N,KAAK6N,KAAM4Z,MAAO,IAAMznB,KAAKynB,WAGvDqH,OAAQ9uB,KAAKmtB,a,6CA7GZH,GAAsB,wC,wBAAtBA,EAAsB,4D,GAAA,K,KAsBpB,KAAS,G,mHAtBX,a,CAAS,+BAAT,a,CAAS,+BAAT,e,kdArBL,SAEA,iC,4EAmBD,I,6IC3CC,iBAII,yBACJ,S,MADiB,+BAgBlB,Y,MAAM+B,EAGT,YACYvY,EACAC,GADA,KAAAD,OACA,KAAAC,UAGC,W,8CACTzW,KAAKga,SAAU,QACTha,KAAKwW,KAAKiB,YAAYC,MAAK,OAAOrU,GAAMA,IAAIuU,kBAC5C5X,KAAKyW,QAAQgB,YAAYC,MAAK,OAAOrU,GAAMA,IAAIuU,YACrD7X,WAAW,IAAOC,KAAKga,SAAU,EAAQ,Q,6CAZpC+U,GAAsB,wB,wBAAtBA,EAAsB,iSApB3B,uB,KACK,yB,s+BAmBN,I,wGCtBK,aACI,SACA,SACJ,S,qBAHwC,qDACpC,0D,yBAGJ,iB,sCAAyC,qD,cAwB9C,Y,MAAMC,EAhCb,cAiCoB,KAAAhE,UAAoB,kB,6CAD3BgE,I,wBAAAA,EAAa,+M,QA7BlB,iBACI,qBAIA,uBACJ,S,MALQ,oDAIE,qD,6OAwBX,I,yMCQC,yB,KAGI,qB,qBAmBgB,S,yBADJ,SACI,iCAMJ,S,yDALS,8CAGnB,6C,yBAGU,SACI,kB,oBACJ,S,gCADS,wD,qBAGL,S,yBADJ,SACI,iCAMJ,S,gCALS,6CAGlB,mC,yBAxBC,eACI,mBAOI,iCAQA,iCAGA,iCAQJ,QACJ,S,0CAtBQ,6CAFA,0BAA+B,oBAIhB,2CAQA,uC,yBAvB3B,SAOI,uBA6BJ,S,yBA7BU,0B,yBARd,iBACI,gCAqCJ,S,qBAlCA,qCACF,yDAhBC,MAAMC,EAAmB,IAAI,MAAe,yBAkE5C,Y,MAAMC,UACD,KA4DR,YAAoB/B,GAChBrW,QADgB,KAAAqW,YArDJ,KAAAzB,KAAO,EAEP,KAAAyD,OAAgB,CAAErjB,EAAG,GAAKC,EAAG,IActC,KAAAqjB,UAAwB,GAKvB,KAAAC,YAAuC,IAAI,IAAgB,MAO7B,WAClCrvB,KAAK0rB,KAAO,EACZ1rB,KAAKmvB,OAAS,CAAErjB,EAAG,GAAKC,EAAG,IAC3B/L,KAAKsvB,gBAGF,KACHzP,GAEA,MAA0B,iBAAZA,EACR,OACAA,aAAmB,MACnB,WACA,YAGV,mBACI,OAAQ7f,KAAKiH,UAAY,IACpB7D,IAAI,CAAC8E,EAAG5E,K,MAAQ,OAAC,OAAD,wBACV4E,GAAC,CACJ2X,QAA0C,QAAjC,EAAA7f,KAAKuvB,cAAcC,UAAUlsB,UAAI,eAAEyoB,kBAE/C7kB,OAAQgB,GAAMA,EAAE2X,SAOlB,YACH,UAGG,cACC7f,KAAKyvB,SACL,QAAazvB,KAAKyvB,QAInB,YAAY/B,GACXA,EAAQ3O,KAAO/e,KAAK+e,KACpB/e,KAAK0vB,aAELhC,EAAQzmB,WACRjH,KAAKovB,WAAapvB,KAAKiH,UAAY,IAAI7D,IAAK8E,GACxC,aAAgB,CACZ2mB,UAAW,CACP,CACIzT,QAAS6T,EACT5T,SAAU,OAAF,wBACDnT,EAAE2F,MAAI,CACT6d,KAAM1rB,KAAKqvB,YAAY3X,MAAK,OAAKrU,GAAMA,EAAEqoB,OACzCrM,SAAUrf,KAAKqvB,YAAY3X,MACvB,OAAKrU,GAAMA,EAAE8rB,aAK7BL,OAAQ9uB,KAAKmtB,cAIrBntB,KAAKyvB,SACD/B,EAAQiC,OAAS3vB,KAAK2vB,MACtB3vB,KAAK4vB,QAAQ5vB,KAAK2vB,QACXjC,EAAQhC,MAAQgC,EAAQyB,SAC/BnvB,KAAKsvB,iBAGL5B,EAAQmC,QACRnC,EAAQzmB,UACRymB,EAAQoC,QACRpC,EAAQxC,UAERlrB,KAAKmY,QAAQ,cAAe,IAAMnY,KAAK+vB,aAAc,MAK1D,kBACH/vB,KAAK0vB,aAID,aACJ,IACI,KAAK,QAAU1vB,KAAKyvB,SAAWzvB,KAAKga,QAChC,OAAOha,KAAKmY,QAAQ,cAAe,IAAMnY,KAAK+vB,eAElD,QAAa/vB,KAAKyvB,OAAQ,CACtBI,OAAQ7vB,KAAK6vB,OACb5oB,SAAUjH,KAAKgwB,aACfF,OAAQ9vB,KAAK8vB,OACb5E,QAASlrB,KAAKkrB,QACdlpB,QAAShC,KAAKgC,UAEpB,MAAOvD,KAIL,gBACJ,KACI,QAAauB,KAAKyvB,OAAQ,CACtB/D,KAAM1rB,KAAK0rB,KACXuE,aAAcjwB,KAAK0rB,KACnByD,OAAQnvB,KAAKmvB,OACbe,eAAgBlwB,KAAKmvB,OACrBntB,QAAShC,KAAKgC,UAEpB,MAAOvD,KAGC,a,0DACNuB,KAAK+e,MAAsB,QAAf,EAAA/e,KAAKmwB,kBAAU,eAAEpE,iBAAkB/rB,KAAKga,SACpDha,KAAKga,SAAU,EACXha,KAAKyvB,UACL,QAAazvB,KAAKyvB,OAAQ,CACtBI,OAAQ7vB,KAAK6vB,OACb5oB,SAAU,GACV6oB,OAAQ9vB,KAAK8vB,OACb5E,QAASlrB,KAAKkrB,QACdlpB,QAAShC,KAAKgC,WAElB,QAAahC,KAAKyvB,SAEtBzvB,KAAKyvB,aAAe,QAAa,CAC7BrH,QAAwB,QAAf,EAAApoB,KAAKmwB,kBAAU,eAAEpE,cAC1BrH,IAAK1kB,KAAK+e,IACV8Q,OAAQ7vB,KAAK6vB,OACbnE,KAAM1rB,KAAK0rB,KACXuE,aAAcjwB,KAAK0rB,KACnByD,OAAQnvB,KAAKmvB,OACbloB,SAAUjH,KAAKgwB,aACfF,OAAQ9vB,KAAK8vB,OACb5E,QAASlrB,KAAKkrB,QACdlpB,QAAShC,KAAKgC,UAElBhC,KAAKga,SAAU,EACfha,KAAKuZ,aACD,eACkC,QAAlC,WAAsBvZ,KAAKyvB,eAAO,eAAEhW,UAAWwE,GAC3Cje,KAAKqvB,YAAYpmB,KAAKgV,OAI7Bje,KAAK+e,OAAuB,QAAf,EAAA/e,KAAKmwB,kBAAU,eAAEpE,gBAC/B/rB,KAAKga,UAELha,KAAKmY,QAAQ,cAAe,IAAMnY,KAAK0vB,gBAIvC,QAAQ7wB,GACZ,IAAKA,IAAOmB,KAAKyvB,OAAQ,OACzB,MAAMA,GAAiB,QAAUzvB,KAAKyvB,QACtC,IAAKA,EAAQ,OACb,MAAMW,EAAOX,EAAOY,SAASxxB,GACxBuxB,IACLpwB,KAAKmvB,OAAS,CACVrjB,EAAG,GAAKskB,EAAKtkB,EAAIskB,EAAKE,EAAI,GAC1BvkB,EAAG,GAAKqkB,EAAKrkB,EAAIqkB,EAAKvG,EAAI,IAE9B7pB,KAAKsvB,kB,6CAtMAJ,GAAuB,e,wBAAvBA,EAAuB,kE,GAAA,M,kLAAvB,eAAU,U,opBA7Df,mBACA,+BAKA,wB,MAJK,4CAIQ,mE,yMAuDd,I,qJCpES,mB,yBAKI,uBAAuB,gBAHvB,oBAAyB,aAAzB,CAAyB,QAyCtC,Y,MAAMqB,UAA4B,KAsBrC,YACsClF,EAC1BmF,GAER1Z,QAHkC,KAAAuU,WAC1B,KAAAmF,OAtBL,KAAA3uB,KAAO7B,KAAKqrB,SAASxpB,KAErB,KAAAsB,KAAO,GAAGnD,KAAKqrB,SAASoF,OAAS,cAEjC,KAAAnF,OAAStrB,KAAKqrB,SAASoF,OAAS,UAEhC,KAAAC,QAAU,GAEV,KAAAC,MAAQ,EAER,KAAAC,SAAW,EACX,KAAAC,SAAW,EACX,KAAAnxB,MAAQ,EACR,KAAAG,OAAS,EAGT,KAAAixB,OAAS,SAAS9wB,KAAKH,UAAUG,KAAKN,SAASM,KAAKH,UAAUG,KAAKN,UAEnE,KAAAqxB,WAAiC,GASjC,WACC/wB,KAAKqrB,SAAS2F,OACdhxB,KAAKuZ,aACD,OACAvZ,KAAKqrB,SAAS2F,MAAMvX,UAAWpW,IAC3BrD,KAAK6B,KAAOwB,EAAExB,KACd7B,KAAKmD,KAAO,GAAGE,EAAEotB,OAAS,cAC1BzwB,KAAKsrB,OAASjoB,EAAEotB,OAAS,UACzBzwB,KAAKixB,cAAc5tB,EAAEytB,WAIjC9wB,KAAKixB,cAAcjxB,KAAKqrB,SAASyF,QAG9B,cAAcA,G,MACjB,MAAMI,EAAwBJ,EAAO9rB,OACjC,CAAC4V,GAAI9O,EAAGC,MAAO,CACXolB,MAAOrlB,EAAI8O,EAAEuW,MAAQrlB,EAAI8O,EAAEuW,MAC3BC,MAAOtlB,EAAI8O,EAAEwW,MAAQtlB,EAAI8O,EAAEwW,MAC3BC,MAAOtlB,EAAI6O,EAAEyW,MAAQtlB,EAAI6O,EAAEyW,MAC3BC,MAAOvlB,EAAI6O,EAAE0W,MAAQvlB,EAAI6O,EAAE0W,QAE/B,CACIH,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,OAAQ,MAGhBtxB,KAAK4wB,SAAwB,IAAbM,EAAKC,MACrBnxB,KAAK6wB,SAAwB,IAAbK,EAAKG,MACrB,MAAME,EACCL,EAAKE,MAAQF,EAAKC,MADnBI,EAECL,EAAKI,MAAQJ,EAAKG,MAEzBrxB,KAAKN,MAAkB,IAAV6xB,EAAgBvxB,KAAK2wB,MAClC3wB,KAAKH,OAAmB,IAAV0xB,IAA8B,QAAb,EAAAvxB,KAAKqrB,gBAAQ,eAAEmG,QAAS,GAAKxxB,KAAK2wB,MACjE,MAAMc,EAAezxB,KAAK0wB,QAAU,EAAI,EACxC1wB,KAAKN,MAAQqD,KAAKC,MAAmB,IAAbhD,KAAKN,OAAe,IAC5CM,KAAKH,OAASkD,KAAKC,MAAoB,IAAdhD,KAAKH,QAAgB,IAC9CG,KAAK8wB,OAASA,EACT9rB,OACG,CAAC2G,GAAIG,EAAGC,KACJ,GAAGJ,IAAIA,EAAI,IAAM,MACXG,EAAIolB,EAAKC,OAASI,EAAWvxB,KAAKN,MAAQ+xB,MAE1C1lB,EAAImlB,EAAKG,OAASE,EAAWvxB,KAAKH,OACpC4xB,IAER,IAEHvT,QAAQ,OAAQ,KACrBle,KAAK+wB,WAAaD,EAAO1tB,IAAI,EAAE0I,EAAGC,KAAO,EACnCD,EAAIolB,EAAKC,OAASI,EAAWvxB,KAAKN,MAAQ+xB,GAC1C1lB,EAAImlB,EAAKG,OAASE,EAAWvxB,KAAKH,OAAS4xB,IAEjDzxB,KAAKN,MAAQM,KAAKN,MAAQM,KAAK0wB,QAAU,EACzC1wB,KAAKH,OAASG,KAAKH,OAASG,KAAK0wB,QAAU,EAC3C1wB,KAAKwwB,KAAKkB,iB,6CAxFLnB,GAAmB,MAuBhB,KAAgB,e,wBAvBnBA,EAAmB,uWAzDxB,iBACI,yBAQI,mBAKA,0BAQJ,QACA,yBAII,SACJ,QACJ,S,MAxBQ,kDAA2C,qCAH3C,iEASI,8BAAmB,mBADnB,yBAKkB,uCAYtB,iC,qSA8BT,I,oECxEA,Y,MAAMoB,EACT,YAAoBC,GAAA,KAAAA,YAOb,UACHpkB,EACA5I,EAAyD,QAEzD,OAAQA,GACJ,IAAK,WACD,OAAO5E,KAAK4xB,UAAUC,+BAA+BrkB,GACzD,IAAK,MACD,OAAOxN,KAAK4xB,UAAUE,uBAAuBtkB,GACjD,IAAK,SACD,OAAOxN,KAAK4xB,UAAUG,0BAA0BvkB,GACpD,IAAK,QACD,OAAOxN,KAAK4xB,UAAUI,yBAAyBxkB,GACnD,QACI,OAAOxN,KAAK4xB,UAAUK,wBAAwBzkB,K,6CAtBjDmkB,GAAQ,iB,qCAARA,EAAQ,U,GAAd,I,oECHFO,EAAL,SAAKA,G,OACD,mBACA,mBACA,qBACA,uBACA,iBACA,mCANCA,EAAL,CAOC,IAKM,Y,MAAMC,EACT,YAAoBP,GAAA,KAAAA,YAEpB,UACIpkB,EACA5I,EAAyD,QAEzD,OAAQA,GACJ,IAAK,WACD,OAAO5E,KAAK4xB,UAAUQ,SAASF,EAAgBG,aAAc7kB,GACjE,IAAK,MACD,OAAOxN,KAAK4xB,UAAUQ,SAASF,EAAgBI,IAAK9kB,GACxD,IAAK,SACD,OAAOxN,KAAK4xB,UAAUQ,SAASF,EAAgBK,OAAQ/kB,GAC3D,IAAK,QACD,OAAOxN,KAAK4xB,UAAUQ,SAASF,EAAgBM,MAAOhlB,GAC1D,QACI,OAAOxN,KAAK4xB,UAAUQ,SAASF,EAAgBO,KAAMjlB,K,6CAjBxD2kB,GAAY,iB,yCAAZA,EAAY,U,GAAlB,I,wGCJK,iBAKI,SACJ,S,sBADI,oC,yBAVR,iBAKI,uBAOJ,S,gCATI,2BAKK,qCAAmB,e,yBAMxB,iB,sCAA2B,uDAmBhC,Y,MAAMO,EAIT,eACI,IAAK1yB,KAAKmL,KAAM,MAAO,KACvB,MAAMzE,EAAQ1G,KAAKmL,KAAKtJ,KACnBqc,QAAQ,oBAAqB,IAC7BvZ,MAAM,KACX,OAAO+B,EAAMjE,OAAS,EAChB,GAAGiE,EAAM,GAAG,KAAKA,EAAMA,EAAMjE,OAAS,GAAG,KACzCzC,KAAKmL,KAAKtJ,KAAKugB,MAAM,EAAG,I,6CAXzBsQ,I,wBAAAA,EAAmB,wfAjCxB,uBAaA,2C,KAXK,sB,yNA+BN,I,mJCcqB,iB,sBAII,uC,wCAvBZ,SACI,iBAMI,iEAAsB,kFAGtB,SASA,uBAMJ,QACJ,Q,4BArBQ,iDAAkD,uBAHlD,eAQA,uGAUK,qC,yBAzBjB,iBAKI,gCA2BJ,S,yBA3BkC,6B,yBATtC,iBAII,uBAiCJ,S,qBA9BwB,oC,cApB9BC,EAAe,CACjB,aAAahuB,MAAM,IACnB,aAAaA,MAAM,IACnB,YAAYA,MAAM,IAClB,UAAUA,MAAM,IAChB,CAAC,SAAU,UAAW,gBA+EnB,Y,MAAMiuB,UAAiC,KAoB1C,YACY3F,EACAC,GAERpW,QAHQ,KAAAmW,WACA,KAAAC,WAlBI,KAAA2F,OAASF,EAElB,KAAAllB,MAAqC,SAEpC,KAAA6f,aAA2B,KAIL,KAAAwF,QAAU,KAC/BF,EAAyBpX,UAC9Bxb,KAAKsjB,OACLtjB,KAAKoY,aAAa,UAEO,KAAA2a,OAAS,IAClC/yB,KAAKmY,QAAQ,OAAQ,IAAMnY,KAAKynB,SAS7B,cACH3Q,MAAMgX,cACN9tB,KAAKynB,QAGF,a,YACyB,QAA5B,EAAa,QAAb,EAAAznB,KAAKitB,gBAAQ,eAAElB,qBAAa,SAAEiH,OACF,QAA5B,EAAa,QAAb,EAAAhzB,KAAKitB,gBAAQ,eAAElB,qBAAa,SAAE4D,QAG3B,OACC3vB,KAAKstB,cACJttB,KAAKguB,UACVhuB,KAAKstB,aAAettB,KAAKktB,SAASe,OAAO,CACrCE,iBAAkBnuB,KAAKktB,SAClB7N,WACA4T,SACAC,SACAC,uBAETnzB,KAAKstB,aAAaoB,OAAO1uB,KAAKguB,UAG3B,QACChuB,KAAKstB,eACLttB,KAAKstB,aAAasB,UAClB5uB,KAAKstB,aAAe,MAIrB,eAAepgB,GAClB,IAAIkmB,EAAapzB,KAAKitB,SAASlB,cAAcsH,eAC7C,MAAMxtB,EAAM7F,KAAKitB,SAASlB,cAAcve,OAAS,GACjD,OAAQN,EAAIpF,eACR,IAAK,SACL,IAAK,UACD9H,KAAKyN,MAAQ,QACb,MACJ,IAAK,cACDzN,KAAKitB,SAASlB,cAAcve,MAAQ,GAAG3H,EAAIpB,OACvC,EACA2uB,EAAa,KACbvtB,EAAIpB,OAAO2uB,EAAYvtB,EAAIpD,UAC/B2wB,EAAarwB,KAAKnD,IAAI,EAAGwzB,EAAa,GACtC,MACJ,IAAK,UACDpzB,KAAKitB,SAASlB,cAAcve,MAAQ,GAAG3H,EAAIpB,OACvC,EACA2uB,MACMvtB,EAAIpB,OAAO2uB,EAAYvtB,EAAIpD,UACrC2wB,GAAc,EACd,MACJ,QACuB,UAAfpzB,KAAKyN,QAAmBzN,KAAKyN,MAAQ,UACzCzN,KAAKitB,SAASlB,cAAcve,MAAQ,GAAG3H,EAAIpB,OACvC,EACA2uB,KACAlmB,IAAMrH,EAAIpB,OAAO2uB,EAAYvtB,EAAIpD,UACrC2wB,GAAc,EAEtBpzB,KAAKitB,SAASlB,cAAcuH,cAAc,IAAIC,WAAW,UACzDvzB,KAAKwzB,iBACLxzB,KAAKmY,QACD,QACA,KACInY,KAAKyzB,aACLzzB,KAAKitB,SAASlB,cAAcsH,eAAiBD,EAC7CpzB,KAAKitB,SAASlB,cAAc2H,aAAeN,GAE/C,IAID,iBACHpzB,KAAK6yB,OAAS7yB,KAAK6yB,OAAOzvB,IAAKC,GAC3BA,EAAED,IAAKgjB,GACHA,EAAE3jB,OAAS,EACL2jB,EACAA,EACmB,WAAfpmB,KAAKyN,MACC,cACA,oB,6CA5GnBmlB,GAAwB,2B,wBAAxBA,EAAwB,uF,GAAA,K,KAUtB,KAAS,G,mHAVX,a,CAAS,yBAAT,c,8tBAzEL,SACA,iC,ybAwED,I,0JC9FA,MAAMe,EA0BT,YAAY9lB,EAA8B,I,MACtC7N,KAAKnB,GAAKgP,EAAKhP,IAAM,GACrBmB,KAAK6B,KAAOgM,EAAKhM,MAAQgM,EAAKhP,IAAM,GACpCmB,KAAK+B,SAAW8L,EAAK9L,UAAY,GACjC/B,KAAK8B,WAAa+L,EAAK/L,YAAc,EACrC9B,KAAK2D,YAAckK,EAAKlK,aAAe,GACvC3D,KAAKuD,SAAWsK,EAAKtK,UAAY,EACjCvD,KAAK4zB,aAAe/lB,EAAK+lB,cAAgB,EACzC5zB,KAAK6zB,gBAAkBhmB,EAAKgmB,cAC5B7zB,KAAKgC,QAAU6L,EAAK7L,SAAW,GAC/BhC,KAAK4D,KAAOiK,EAAKjK,MAAQ,GACzB5D,KAAK8zB,YACA9zB,KAAK8B,WACF9B,KAAKgC,QACAoB,IAAKwE,GAAMA,EAAE9F,YAAc,GAC3BkD,OAAO,CAACE,EAAG0E,IAAM1E,EAAI0E,EAAG,IACjC5J,KAAKuD,SAETvD,KAAK+zB,gBACW,QAAZ,EAAA/zB,KAAKgC,eAAO,eACNoB,IAAKC,GAAMA,EAAExE,IAAM,IACpB8K,KAAK,CAACC,EAAGC,IAAMD,EAAEoqB,cAAcnqB,IAC/BhC,KAAK,OAAQ,IC5CvB,MAAMosB,EAwBT,YAAYpmB,EAA+B,I,QACvC7N,KAAKnB,GAAKgP,EAAKhP,IAAM,UAAS,QAAU,QAAW,OACnDmB,KAAKk0B,UAAYrmB,EAAKqmB,WAAa,GACnCl0B,KAAK0C,SAAWmL,EAAKnL,WAAsB,QAAV,EAAAmL,EAAK1L,aAAK,eAAEtD,KAAM,GACnDmB,KAAKiD,OAAS4K,EAAK5K,OAAS,IAAIG,IAAKwE,GAAM,IAAI+rB,EAAa/rB,IAC5D5H,KAAKm0B,WAAan0B,KAAKiD,MAAM+B,OACzB,CAACovB,EAAQ7f,IAAS6f,EAAS7f,EAAKhR,SAChC,GAEJvD,KAAK8zB,WAAa9zB,KAAKiD,MAAM+B,OACzB,CAACovB,EAAQ7f,IAAS6f,GAAU7f,EAAKuf,YAAc,GAC/C,GAEJ9zB,KAAK4C,YAAciL,EAAKjL,aAAe,GACvC5C,KAAKoG,OAASyH,EAAKzH,QAAU,WAC7BpG,KAAK2C,eAAiBkL,EAAKlL,gBAAkB,GAC7C3C,KAAKmC,MAAQ0L,EAAK1L,OAAS,KAC3BnC,KAAK6C,WACDgL,EAAKhL,YACJgL,EAAa2C,OACJ,QAAV,EAAAxQ,KAAKmC,aAAK,eAAEqO,QACZ,IAAIC,MAAO4jB,W,iCC5BvB,IAAIC,EAA0B,CAAEz1B,GAAI,UAAWgD,KAAM,gBAE9C,SAAS0yB,EAAkBppB,GAC1BA,IAAMmpB,EAAgBnpB,GAMvB,MAAMqpB,EA6DT,YAAY3mB,EAAuC,I,MAC/C7N,KAAKnB,GAAKgP,EAAKhP,IAAM,GACrBmB,KAAKsC,YACDuL,EAAKvL,cACL,EAAA4S,EAAA,GACIrH,EAAK2C,OACD,EAAAikB,EAAA,IAAsB,EAAA3xB,EAAA,GAAW,IAAI2N,KAAQ,GAAI,CAC7CikB,UAAW,KAG3B10B,KAAKuC,UACDsL,EAAKtL,YACL,EAAA2S,EAAA,IACI,EAAApS,EAAA,GAA8B,IAAnB9C,KAAKsC,YAAoBuL,EAAKzL,UAAY,KAE7DpC,KAAKkK,SAAW2D,EAAK3D,UAAY,GACjClK,KAAKmK,SACoC,QAApC,EAAA0D,EAAK1D,SAAWmqB,EAAc9uB,aAAM,eAAEsC,gBAAiB,GAC5D9H,KAAKiK,MACD4D,EAAK5D,MACLjK,KAAKmK,SACLmqB,EAAc9uB,OACd,IACFsC,cACF,MAAM4B,EAAqBmE,EAAKnE,WAAa,GAC7C1J,KAAK0J,UAAYA,EACZxC,OAAQiE,IAAeA,EAAKpB,UAC5B3G,IAAKmN,GAAM,IAAI,KAAKA,IACzBvQ,KAAK20B,WACD,QACI9mB,EAAK8mB,WACDjrB,EACKxC,OAAQiE,GAASA,EAAKpB,UACtB3G,IAAKuI,GAAM,IAAI,IAAMA,IAC9B,UACC,GACT3L,KAAKqK,MAAQwD,EAAKxD,OAAS,GAC3BrK,KAAK6G,KAAOgH,EAAKhH,MAAQ,GACzB7G,KAAKsK,UAAYuD,EAAKvD,QACtBtK,KAAKwK,UAAYqD,EAAKrD,QACtBxK,KAAKwQ,KAA0B,IAAnBxQ,KAAKsC,YACjBtC,KAAKoC,SAAWpC,KAAKwK,QACf,KACAqD,EAAKzL,WACL,EAAAC,EAAA,GAAqC,IAAjBwL,EAAKtL,UAAkBvC,KAAKwQ,OAChD,GACNxQ,KAAKuK,SAAWsD,EAAKtD,UAAY,GACjCvK,KAAK6E,SAAWgJ,EAAKhJ,UAAY,GACjC7E,KAAKyK,YAAcoD,EAAKpD,UACxBzK,KAAK40B,oBAAsB/mB,EAAK+mB,qBAAuB,GACvD50B,KAAK60B,UAAY70B,KAAK0J,UAAUtC,KAC3B+D,GAASA,EAAK3F,QAAUxF,KAAKiK,MAElCjK,KAAK80B,OAASjnB,EAAKinB,OAAS,IAAIN,EAAc3mB,EAAKinB,QAAU,KAEzD90B,KAAK0K,WADLmD,EAAKpD,UACa,CACdoG,MACuB,IAAnB7Q,KAAKsC,aACL,IAAImO,KACuC,IAAtC5C,EAAKnD,WAAmBqqB,aAC3BpkB,UACNiE,IACI/G,EAAKnD,WAAWkK,KAChB,IAAInE,KACqC,IAApC5C,EAAKnD,WAAmBsqB,WAC3BrkB,UACNmC,SAAUjF,EAAKnD,WAAWoI,SAC1BmiB,QAASpnB,EAAKnD,WAAWuqB,QACzBC,aAAcrnB,EAAKnD,WAAWwqB,cAGhB,GAEtB,MAAMtqB,EAASiD,EAAKjD,QAEhBA,aAAM,EAANA,EAAQpF,SACPxF,KAAK20B,UAAUvtB,KAAM/D,GAAMA,EAAEmC,QAAUoF,EAAOpF,QAE/CxF,KAAK20B,UAAUtsB,KAAK,IAAI,IAAMuC,IAElC5K,KAAK4K,OAASA,GAAW5K,KAAK20B,UAAU,IAAc,KACtD30B,KAAKm1B,WAAatnB,EAAKsnB,YAActnB,EAAKjD,OAC1C5K,KAAK2K,YAAckD,EAAKlD,aAAe,GACvC3K,KAAK6K,eAAiBgD,EAAKhD,gBAAkB,GAC7C7K,KAAKoG,QAAS,QAAYpG,OAAS,OACnCA,KAAK4E,KACe,aAAhB5E,KAAKoG,OACC,YACApG,KAAK0J,UAAUtC,KAAM/D,GAAMA,EAAE+xB,aAC7B,WACA,WACV,IAAK,MAAMloB,KAAOW,EACRX,KAAOlN,OACTA,KAAK6K,eAAeqC,GAChBW,EAAKX,IAAQlN,KAAK6K,eAAeqC,IAG7ClN,KAAK6K,eAAepE,UAAYzG,KAAK6K,eAAepE,UAAY,IAAIrD,IAC/DwE,GAAM,IAAIqsB,EAAc,OAAD,wBAAMrsB,GAAC,CAAEzF,MAAOnC,SAtGzC,IAAwCkN,GAC3C,OAAOlN,KAAK6K,eAAeqC,GA0G/B,aACI,OAAOlN,KAAK0J,UAAUxC,OAAQgB,KAAQA,EAAEktB,aAG5C,YACI,OAAOp1B,KAAK20B,UAAU,IAAM,KAEhC,eACI,OAAO,EAAA5S,EAAA,GAAU,IAAItR,KAAKzQ,KAAKwQ,MAAO,IAAIC,MAMvC,S,MACH,MAAM4kB,EAAG,iBAAiBr1B,MACpB4U,GAAM,EAAAM,EAAA,IAAY,EAAApS,EAAA,GAAW9C,KAAKwQ,KAAMxQ,KAAKoC,WAC7CoO,EAAOxQ,KAAKwK,SAAU,EAAA8qB,EAAA,GAAIt1B,KAAKwQ,KAAM,CAAE+kB,MAAO,KAAQv1B,KAAKwQ,KACjE6kB,EAAI/yB,aAAc,EAAA4S,EAAA,GAAY1E,GAC9B6kB,EAAI9yB,UAAYqS,EAChB,MAAMlL,EAAY1J,KAAK0J,UAyBvB,OAxBI1J,KAAKyK,YACL4qB,EAAI3qB,WAAa,OAAH,wBACP1K,KAAK0K,YAAU,CAClBqqB,YAAaM,EAAI/yB,YACjB0yB,WAAW,EAAA9f,EAAA,GAAYlV,KAAK0K,WAAWkK,QAG/CygB,EAAI3qB,WAAa2qB,EAAI3qB,YACfoC,OAAOlO,KAAKy2B,EAAI3qB,YAAYjI,OACxB4yB,EAAI3qB,WAER,KACN2qB,EAAI3rB,WAAY,QAAOA,EAAW,SAC7B1J,KAAKwK,UACN6qB,EAAIxqB,eAAeE,UAAY,IAEnCsqB,EAAIxqB,eAAepE,SAAW4uB,EAAIxqB,eAAepE,SAASrD,IACrDwE,GAAM,IAAIqsB,EAAc,OAAD,wBAAMrsB,GAAC,CAAEzF,MAAO,SAE5CkzB,EAAInB,UAAuB,QAAX,EAAAl0B,KAAK4K,cAAM,eAAE/L,UACtBw2B,EAAI5uB,gBACJ4uB,EAAI7kB,YACJ6kB,EAAIjzB,gBACJizB,EAAIjvB,OACJivB,EAIX,YAMI,MAAMzT,EAAM,IAAInR,KACVD,EAAOxQ,KAAKwQ,KAClB,OAAI,EAAAI,EAAA,GAASgR,GAAK,EAAA1Y,EAAA,GAAIsH,EAAM,CAAEglB,SAAU,MAAe,UACnD,EAAA5kB,EAAA,GAASgR,EAAKpR,GAAc,YAC5B,EAAAI,EAAA,GAASgR,GAAK,EAAA1Y,EAAA,GAAIsH,EAAM,CAAEglB,QAAS,MAAe,WAClD,EAAA5kB,EAAA,GAASgR,GAAK,EAAA1Y,EAAA,GAAIsH,EAAM,CAAEglB,QAASx1B,KAAKoC,YACjC,cACJ,OAGX,mBACI,MAAMwf,EAAM,IAAInR,KAChB,OACIzQ,KAAKy1B,WACJ,EAAAC,EAAA,GAAQ9T,EAAK5hB,KAAKwQ,QACf,EAAAI,EAAA,GAASgR,GAAK,EAAA9e,EAAA,GAAW9C,KAAKwQ,KAAMxQ,KAAKoC,c,uFCpPlD,SAASuzB,EACZpwB,G,MAEA,OAAqB,QAAjB,EAAAA,EAAQovB,iBAAS,eAAElyB,QACf8C,EAAQovB,UAAUiB,MAAOhuB,GAA4B,aAAtBA,EAAEwC,iBAC1B,WAEP7E,EAAQovB,UAAUkB,KACbjuB,GACyB,cAAtBA,EAAEwC,iBACoB,gBAAtBxC,EAAEwC,iBAGH,YAEJ,WAEJ,WA2FX,MAMM0rB,EAA+C,CACjDC,MAHU,MAIVC,OAJU,MAKVC,KANS,MAOTC,MAPS,MAQTC,IATQ,KAURC,KAVQ,KAWRttB,KAZS,GAaTysB,MAbS,GAcTc,OAfW,EAgBXb,QAhBW,GAmBTc,EAA8B,CAChCC,cAAc,EACdta,QAAQ,GAOL,SAASua,EAAgB3wB,GAC5B,MAAMa,GAASb,GAAO,IAAIlB,MAAM,KAChC,OAAO+B,EAAMjE,OAAS,GAAKiE,EAAM,GAAKovB,EAAapvB,EAAM,IAAM,EAG5D,SAAS+vB,EAAUvtB,EAAasH,EAAsB,IAAIC,MAC7D,OAAO,OAAWD,EAAMgmB,EAAgBttB,IAGrC,SAASwtB,EACZC,EACApxB,EACAqxB,GAEA,OAAOD,EAAOzvB,OACT7D,IAAK,MAAC,QAAiD,QAAhD,EAIT,SACHkC,EACAqxB,G,MAEA,MAAM,MAAE9sB,GAAUvE,EAClB,IAAK,MAAM4B,KAAQ2C,EAAMpB,MACrB,GAAiB,QAAb,EAAAkuB,EAAQzvB,UAAK,eAAE1E,OACf,IAAK,MAAMo0B,KAAWD,EAAQzvB,GAC1B,GAAI0vB,GAAWC,EAAgBvxB,EAASsxB,GACpC,OAAO,OAAP,wBAAYP,GAAkBO,EAAQE,OAItD,OAAOT,EAjBKU,CAAc,OAAD,wBAAMzxB,GAAO,CAAEuE,MAAOzG,IAAKuzB,UAAQ,eAAE3a,UAoB3D,SAAS6a,GACZ,KAAEtmB,EAAI,SAAEpO,EAAQ,KAAE6H,GAClB4sB,GAEA,IAAII,EAAU,EACd,MAAM,WAAEC,GAAeL,EACvB,OAAKK,IAEDA,EAAWxvB,kBAAkBxE,OAC7Bg0B,EAAWxvB,OAAOkuB,MAAOvyB,IAAK,MAAC,OAAY,QAAZ,EAAA4G,aAAI,EAAJA,EAAMvC,cAAM,eAAE4D,SAASjI,OAEtD4zB,GAAW,GAEXC,EAAWC,YACX,QAAS,OAAW3mB,EAAMpO,GAAWq0B,EAAUS,EAAWC,cAE1DF,GAAW,GACXC,EAAWE,WAAY,OAAQ5mB,EAAMimB,EAAUS,EAAWE,aAC1DH,GAAW,GAEXC,EAAWG,YACXb,EAAgBU,EAAWG,aAAej1B,IAE1C60B,GAAW,GAEXC,EAAWI,YACXd,EAAgBU,EAAWI,aAAel1B,IAE1C60B,GAAW,GACRA,GAAWnqB,OAAOlO,KAAKs4B,GAAYz0B,U,gHC5NvC,MAAM80B,EAgBT,YAAY1pB,EAAsB,I,MAoBlB,KAAA2pB,OAAS,IAAMx3B,KAAK2B,SAnBhC3B,KAAKnB,GAAKgP,EAAKhP,IAAM,GACrBmB,KAAKwE,OAASqJ,EAAKrJ,QAAUqJ,EAAKhP,IAAM,GACxCmB,KAAK6B,KAAOgM,EAAKhM,MAAQ,GACzB7B,KAAKgH,SAAwB,QAAb,EAAA6G,EAAK7G,gBAAQ,SAC7BhH,KAAKmH,KAAO0G,EAAK1G,MAAQ,IAAI,MAC7BnH,KAAK0H,OAASmG,EAAKnG,QAAU,GAC7B1H,KAAKy3B,QAAU5pB,EAAK4pB,SAAW,GAG5B,SACH,MAAM,GAAE54B,EAAE,KAAEgD,EAAI,SAAEmF,EAAQ,OAAEU,GAAW1H,KACvC,MAAO,CACHnB,KACAgD,OACAmF,WACAU,a,6CC/BL,MAAMgwB,EAoBT,YAAYprB,EAAgC,I,MAJ5B,KAAAwL,SAAoB,GAKhC9X,KAAKnB,GAAKyN,EAAMzN,IAAM,GACtBmB,KAAK+D,UAAYuI,EAAMvI,WAAa,GACpC/D,KAAK6B,KAAOyK,EAAMzK,MAAQ,GAC1B7B,KAAK8E,aAAewH,EAAMxH,cAAgB,GAC1C9E,KAAKwE,OAAS8H,EAAM9H,QAAU,GAC9BxE,KAAK8D,SAAWwI,EAAMxI,UAAY,EAClC9D,KAAKsZ,UAAYhN,EAAMgN,WAAa,GACpC,MAAM5S,EAAQ1G,KAAK8E,aAAaH,MAAM,KACtC3E,KAAK8R,QAIA,QAHA,EAAApL,EAAMjE,QAAU,EACXiE,EAAMA,EAAMjE,OAAS,GACrBzC,KAAK8E,aAAa,UACvB,eAAEud,gBAAiB,M,2DC9BzB,MAAMsV,EAkBT,YAAYC,EAA0C,IAClD53B,KAAKnB,GAAK+4B,EAAS/4B,IAAM,GACzBmB,KAAK6B,KAAO+1B,EAAS/1B,MAAQ,GAC7B7B,KAAK2D,YAAci0B,EAASj0B,aAAe,GAC3C3D,KAAK4D,KAAOg0B,EAASh0B,MAAQ,GAC7B5D,KAAK6D,MAAQ+zB,EAAS/zB,OAAS,EAC/B7D,KAAK8D,SAAW8zB,EAAS9zB,UAAY,EACrC9D,KAAKsG,SAAWsxB,EAAStxB,UAAY,GACrCtG,KAAKuW,UAAYqhB,EAAS9f,UAAY,GAOnC,QAAQ5K,GACX,MAAMtO,EAAOsO,EAAIvI,MAAM,KAEvB,OADc,QAAgB/F,EAAMoB,KAAKuW,c,iICS1C,MAAMshB,EAyDT,YAAYD,EAAsC,IAC9C53B,KAAKnB,GAAK+4B,EAAS/4B,IAAM,GACzBmB,KAAK6B,KAAO+1B,EAAS/1B,MAAQ,GAC7B,MAAMiW,EAAW8f,EAAS9f,UAAY,GACtC9X,KAAK8E,aAAe8yB,EAAS9yB,aAC7B,MAAMgzB,EAAYhgB,EAASigB,gBAAkBjgB,EAC7C9X,KAAKg4B,QAAUJ,EAASI,SAAWJ,EAASzwB,KAC5CnH,KAAKi4B,QAAUL,EAASK,QAAUH,EAAUG,QAAU,IAAI70B,IAAKwE,IAAM,CACjE/I,GAAI+I,EAAEswB,UAAYtwB,EAAE/I,GACpBgD,KAAM+F,EAAEuwB,YAAcvwB,EAAE/F,QAE5B7B,KAAKo4B,YACDR,EAASQ,YACTN,EAAUM,YACV,IACFh1B,IAAKwE,IAAM,CACT/I,GAAI+I,EAAEswB,UAAYtwB,EAAE/I,GACpBgD,KAAM+F,EAAEuwB,YAAcvwB,EAAE/F,QAE5B7B,KAAKkE,QAAU0zB,EAAS1zB,QAAU4zB,EAAU5zB,QAAU,IAAId,IACrDwE,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAEuS,YAAana,KAAKnB,OAEvDmB,KAAKq4B,OAAST,EAASU,OAASR,EAAUQ,OAAS,GACnDt4B,KAAKu4B,SACDX,EAASY,SACTZ,EAASa,kBACTX,EAAUW,kBACV,GACJz4B,KAAK04B,SAAWd,EAAS/iB,SAAWijB,EAAUjjB,SAAW,GACzD7U,KAAK24B,eACDf,EAASgB,eAAiBd,EAAUc,eAAiB,GACzD54B,KAAK64B,UAAYjB,EAAS/yB,UACtBizB,EAAUjzB,UAAY,CAAEi0B,UAAW,KAAMC,SAAU,MACvD/4B,KAAKg5B,oBACDpB,EAASoB,qBAAuBlB,EAAUkB,qBAAuB,GACrEh5B,KAAKi5B,WAAarB,EAASqB,YAAcnB,EAAUmB,YAAc,GACjE,MAAMC,EAAc,GACpB,GAAItB,EAASuB,eACT,IAAK,MAAM9xB,KAAOuwB,EAASuB,eACvB,GAAI9xB,KAAOuwB,EAASuB,eAAgB,CAChC,MAAMC,EAAexB,EAASuB,eAAe9xB,IAAQ,GACrD,IAAK,MAAMgyB,KAAWD,EACdC,KAAWD,GACXF,EAAY7wB,KAAK,CACbxJ,GAAIu6B,EAAaC,GACjBx3B,KAAMw3B,EACNjf,SAAU/S,IAOlCrH,KAAKsG,SAAWsxB,EAAStxB,UAAY,GACrCtG,KAAKk5B,YAAcA,EACnBl5B,KAAKuK,SACDqtB,EAASrtB,UAAYutB,EAAUvtB,UAAYuN,EAASvN,UAAY,GACpEvK,KAAKs5B,eAAiB1B,EAAS0B,gBAC3BxB,EAAUwB,gBACVxhB,EAASwhB,gBAAkB,CAAEzoB,MAAO,EAAG+D,IAAK,IAChD5U,KAAKu5B,cACD3B,EAAS2B,eACTzB,EAAUyB,eACVzhB,EAASyhB,eACT,GACJv5B,KAAKw5B,YACD5B,EAAS4B,aACT1B,EAAU0B,aACV1hB,EAAS0hB,aACT,GACJx5B,KAAKrB,KAAOi5B,EAASj5B,MAAQm5B,EAAUn5B,MAAQmZ,EAASnZ,MAAQ,GAChEqB,KAAKy5B,QACD7B,EAAS6B,SAAW3B,EAAU2B,SAAW3hB,EAAS2hB,SAAW,GACjEz5B,KAAK6Z,aACD+d,EAAS/d,cACTie,EAAUje,cACV/B,EAAS+B,cACT,GACJ7Z,KAAK05B,gBACD9B,EAAS8B,iBACT5B,EAAU4B,iBACV5hB,EAAS4hB,iBACT,KACJ15B,KAAK25B,cACD/B,EAAS+B,eACT7B,EAAU6B,eACV7hB,EAAS6hB,eACT,GACJ35B,KAAK45B,yBACDhC,EAASgC,0BACT9B,EAAU8B,0BACV9hB,EAAS8hB,2BACR,KACL55B,KAAK65B,SACDjC,EAASiC,UACT/B,EAAU+B,UACV/hB,EAAS+hB,UACT,MAOD,KAAKh4B,GACR,MAAO,IAAK7B,KAAKq4B,OAAOx2B,IAAS,IAKrC,iBACI,OAAOiL,OAAOlO,KAAKoB,KAAKq4B,QAAQnxB,OAAQU,GAAMA,KAAK5H,KAAKq4B,QAG5D,cACI,OAAO,OAAP,UAAar4B,KAAKu4B,UAAY,IAGlC,cACI,OAAO,OAAP,UAAav4B,KAAK04B,UAAY,IAGlC,oBACI,OAAO,OAAP,UAAa14B,KAAK24B,gBAAkB,IAOjC,iBAAiBve,GACpB,OAAQpa,KAAKk5B,aAAe,IAAIhyB,OAAQU,GAAMA,EAAEwS,WAAaA,I,kCCtN9D,Y,MAAM0f,EA+ET,YAAoBnX,EAAmC3J,GAAnC,KAAA2J,WAAmC,KAAA3J,UA7EpC,KAAAsJ,aAAe,IAAI/E,EAAA,GAAyB,GAE/C,KAAA9F,YAAczX,KAAKsiB,aAAa9E,eAC/B,KAAAuc,WAAa,IAAIxc,EAAA,EAA4B,IAC7C,KAAAyc,iBAAmB,IAAIzc,EAAA,EAA0B,MACjD,KAAA0c,QAAU,IAAI1c,EAAA,EAAiC,IAGhD,KAAA2c,cAAgBl6B,KAAK+5B,WAAWvc,eAEhC,KAAA2c,WAAan6B,KAAKi6B,QAAQzc,eAE1B,KAAArE,gBAAkBnZ,KAAKg6B,iBAAiBxc,eAExC,KAAA4c,eAAgB,EAAAC,EAAA,IAAc,CAC1Cr6B,KAAKi6B,QACLj6B,KAAKg6B,mBACNtiB,MAAK,EAAAtU,EAAA,GAAI,EAAEC,EAAGe,KAAUA,EAAMpE,KAAKoZ,kBAAkBhV,GAAO,KAIvD,KAAAmS,UAAqB,GAErB,KAAA+jB,mBAAuC,IAuD3C,WACK5iB,MAAK,EAAAC,EAAA,GAAOtU,GAAMA,IAClBoW,UAAU,IAAM1Z,WAAW,IAAMC,KAAKgiB,OAAQ,MACnDhiB,KAAKmZ,gBAAgBM,UAAWrV,IACxBA,IACApE,KAAK2iB,SAASvT,UAAY,CACtBpP,KAAKuW,UACLvW,KAAKu6B,iBAAiBn2B,EAAIvF,QA3D1C,eACI,OAAOmB,KAAKuW,UAIhB,wBACI,OAAOvW,KAAKs6B,mBAIT,iBAAiBE,EAAiB,IAIrC,OAHKA,GAAUx6B,KAAKsE,WAChBk2B,EAASx6B,KAAKsE,SAASzF,IAEpBmB,KAAKs6B,oBACNt6B,KAAKs6B,mBAAmBE,IACxB,GAIV,mBACI,OAAOx6B,KAAKy6B,cAIhB,gBACI,OAAOz6B,KAAK+5B,WAAW/b,WAI3B,eACI,OAAOhe,KAAKg6B,iBAAiBhc,WAEjC,aAAoB5Z,GAChBpE,KAAKg6B,iBAAiB/wB,KAAK7E,GAC3BpE,KAAK2iB,SAASvT,UAAY,CACtBpP,KAAKuW,UAAUhR,QACfvF,KAAKu6B,iBAAiBn2B,EAAIvF,IAAI0G,SAK/B,KAAK1G,GACR,OAAOmB,KAAKkZ,UAAU9R,KAAMQ,GAAMA,EAAE/I,KAAOA,GAI/C,aACI,OAAOmB,KAAKi6B,QAAQjc,WAqBjB,YAAY0c,GACf,OAAO16B,KAAKkE,OAAOkD,KAAMC,GAAQqzB,aAAO,EAAPA,EAASpvB,SAASjE,EAAIxI,KAOpD,kBAAkBuF,GACrB,OAAOpE,KAAKkE,OAAOgD,OAAQG,GAAQA,EAAItD,YAAcK,EAAIvF,IAG/C,KAAK87B,EAAgB,G,8CAC/B36B,KAAKsiB,aAAarZ,MAAK,SACjBjJ,KAAK46B,OAAO3iB,MAAO1W,IAGrB,MAFA,QAAY,gDACZxB,WAAW,IAAMC,KAAKgiB,KAAK2Y,GAAQ53B,KAAKpD,IAAI,IAAQ,MAAQg7B,IACtDp5B,IAEVvB,KAAKsiB,aAAarZ,MAAK,GACnBkU,OAAOkB,QACFlB,OAAOoF,cAAapF,OAAOoF,YAAc,IAC9CpF,OAAOoF,YAAYsY,KAAO76B,QAOpB,O,oDACJA,KAAK86B,yBACL96B,KAAK+6B,sBACL/6B,KAAKg7B,mBACLh7B,KAAKi7B,iBAMF,mB,sDACT,MAAMC,QAAiB,SAAW,CAAEt3B,KAAM,QACrC8T,MAAK,EAAAtU,EAAA,GAAKwE,GAAMA,EAAEiG,OAClB+J,YACL,GAAIsjB,EAASz4B,OAAQ,CACjB,MAAM04B,GAAO,WACP/e,EACF8e,EAAS9zB,KACJiV,IAAQ,MAAC,mBAAYA,EAAKxd,MAAmB,QAAZ,EAAAs8B,aAAI,EAAJA,EAAM/X,cAAM,eAAEgY,aAC/CF,EAAS,GACZ50B,EAEL,QAF0B,QACjB,SAAa8V,EAAIvd,GAAI,CAAEgD,KAAM,aAAc+V,mBACpD,eAAErS,QACGuS,EAEL,QAF0B,QACjB,SAAasE,EAAIvd,GAAI,CAAEgD,KAAM,aAAc+V,mBACpD,eAAErS,QACHvF,KAAKuW,UAAY,OAAH,wBAAQvW,KAAKuW,WAAcuB,GACzC9X,KAAKy6B,cAAgB,IAAI,IAAa,OAAD,wBAAMre,GAAG,CAAE9V,mBAEhDtG,KAAKgZ,QAAQkB,SAAS,CAAC,qBAOlB,gB,sDACT,MAAMggB,QAAsB,SAAW,CACnCt2B,KAAM,WACNy3B,MAAO,MAEN3jB,MACG,EAAAtU,EAAA,GAAKwE,GACDA,EAAEiG,KAAK3G,OAAQ7D,GAAMA,EAAEU,YAAc/D,KAAKy6B,cAAc57B,MAG/D+Y,aACAsiB,aAAa,EAAbA,EAAez3B,SAChBzC,KAAKgZ,QAAQkB,SAAS,CAAC,mBAE3B,MAAMhB,EAAY,GAClB,IAAK,MAAM9U,KAAO81B,EAAe,CAC7B,MAAM5zB,EAEL,QAF0B,QACjB,SAAalC,EAAIvF,GAAI,CAAEgD,KAAM,aAAc+V,mBACpD,eAAErS,QACH2T,EAAU7Q,KAAK,IAAIwvB,EAAS,OAAD,wBAAMzzB,GAAG,CAAEkC,eAE1CtG,KAAK+5B,WAAW9wB,KAAKiQ,GACrB,MAAMra,EAAKmY,aAAaE,QAAQ,oBAC5BrY,GAAMmB,KAAKkZ,UAAU9R,KAAMhD,GAAQA,EAAIvF,KAAOA,IAC9CmB,KAAKg6B,iBAAiB/wB,KAClBjJ,KAAKkZ,UAAU9R,KAAMhD,GAAQA,EAAIvF,KAAOA,MAG9B,QAAb,EAAAmB,KAAKsE,gBAAQ,eAAEzF,MAAMqa,aAAS,EAATA,EAAWzW,QAAS,IAC1CzC,KAAKsE,SAAW4U,EAAU,MAOrB,a,8CACT,MAAMihB,QAAmB,SAAW,CAChCv2B,KAAM,QACNy3B,MAAO,OAEN3jB,MAAK,EAAAtU,EAAA,GAAKwE,GAAMA,EAAEiG,OAClB+J,aACAuiB,aAAU,EAAVA,EAAY13B,SACbzC,KAAKgZ,QAAQkB,SAAS,CAAC,mBAE3B,MAAMhW,EAASi2B,EAAW/2B,IAAKiE,GAAQ,IAAI,IAAcA,IACzDnD,EAAOyF,KAAK,CAACC,EAAGC,KAAOD,EAAE/H,MAAQ,IAAImyB,cAAcnqB,EAAEhI,MAAQ,KAC7D7B,KAAKi6B,QAAQhxB,KAAK/E,KAGtB,6BACI,OAAOlE,KAAKkZ,UACP9V,IAAKwX,GAAM,IAAIA,EAAEoe,sBACjBh0B,OAAO,CAACs2B,EAAMC,IAASD,EAAKn2B,OAAOo2B,GAAO,IAC1C5xB,KAAK,CAACC,EAAGC,IAAMD,EAAE/H,KAAKmyB,cAAcnqB,EAAEhI,OAGlC,e,8CACT,IAAK7B,KAAKy6B,cAAe,OACzB,MAAMjU,EAAW,IACbxmB,KAAK2iB,SAAS9K,IAAI,aAAe,aACnC/P,oBACF9H,KAAKuW,gBAAkB,SAAavW,KAAKy6B,cAAc57B,GAAI,CACvDgD,KAAM2kB,IACP5O,YACH,MAAMsB,EAAYlZ,KAAKkZ,UACvB,IAAK,MAAM9U,KAAO8U,EACdlZ,KAAKs6B,mBAAmBl2B,EAAIvF,UAAY,SAAauF,EAAIvF,GAAI,CACzDgD,KAAM2kB,IACP5O,YAEP5X,KAAK2iB,SAASvT,UAAY,CACtBpP,KAAKuW,UAAUhR,QACfvF,KAAKu6B,iBAAiBv6B,KAAKsE,SAASzF,IAAI0G,WAKzC,aAAa1G,GAChBmY,aAAaC,QAAQ,mBAAoBpY,I,6CAlPpCi7B,GAAmB,0B,0BAAnBA,EAAmB,QAAnBA,EAAmB,qBAFhB,S,GAET,I,wGCPK,iBACI,oBAAU,0BAAc,QACxB,eAAK,SAAoB,QAC7B,S,sBADS,kC,wCAET,oBAGI,kDAAS5W,OAAA,SAET,oBAAU,SAER,QACN,Q,yBAHc,oD,yBApBlB,iBAKI,iBACI,iBAAgC,SAAgB,QAChD,iBACI,SACJ,QACJ,QACA,uBAIA,0BASJ,S,gCAlBwC,6BAE5B,6HAGwB,6CAM3B,kCAAgB,e,yBASrB,qBACI,SACJ,S,qBAFgC,oCAC5B,6DAMT,Y,MAAMsY,EApCb,cA4CqB,KAAAtY,OAAS,IAAI,O,6CARrBsY,I,wBAAAA,EAAwB,4mBAjC7B,uBAyBA,2C,KAtBK,uB,iBA8BN,G,6JCea,yBACI,SACJ,S,yBAF0C,iBACtC,gD,wCAXZ,6BAII,yBAGI,0DAAiBl3B,SAAA,UAGjB,+BAGJ,QACJ,Q,wBARQ,gDAI4B,uC,yBAc5B,yBAII,SACJ,S,yBAHI,oBAEA,gC,wCAbZ,6BAII,yBAEI,mEAGA,+BAMJ,QACJ,Q,wBAVQ,iCAIqB,yC,wCAkBb,kCAKI,+FACH,Q,6CAJG,iBAAe,wB,yBALvB,SAGI,wCAOJ,S,oCANS,2C,yBAVb,SAMI,iC,iBAWJ,S,sBAV0B,wD,yBAR9B,SACI,gC,iBAkBJ,S,uCAjBS,4EAGb,e,wBAuBY,kC,oCAEI,iBAAe,wB,yBALvB,SAGI,wCAMJ,S,sBAL0B,oC,yBAT9B,kBAKI,gCAUJ,S,iCAZI,8BAGK,iDAA+B,e,wCAW5C,kBACI,qBAAmB,0DACf,SACJ,QACJ,Q,wBAFQ,oE,sBAIJ,kBACI,sBAA2B,iBAAK,QAChC,aAAG,qBAAS,QAChB,S,sBAGA,kBACI,0BACA,aAAG,uCAA2B,QAClC,SAqBT,Y,MAAMm3B,UAAkC,KAyD3C,YACYjlB,EACAD,EACyBjK,GAEjCwK,QAJQ,KAAAN,OACA,KAAAD,YACyB,KAAAjK,QA1DpB,KAAAnK,MAAQ,IAAI,MAEtB,KAAAw0B,OAAkB,IAAK32B,KAAKsM,MAAMqqB,QAAU,IAE5C,KAAAryB,SAAW,IAAIiZ,EAAA,EAA0B,MAIzC,KAAAme,YAA0B,GAMjB,KAAAC,kBAAmB,EAAAtB,EAAA,IAAc,CAACr6B,KAAKsE,WAAWoT,MAC9D,EAAAkkB,EAAA,GAAU,EAAEx3B,MACRpE,KAAKga,SAAU,GACR,QAAmB,CACtB7F,SAAU/P,aAAG,EAAHA,EAAKvF,GACfuV,cAAc,EAAAc,EAAA,GAAYlV,KAAKsM,MAAMkE,MACrC6D,YAAY,EAAAa,EAAA,IACR,EAAApS,EAAA,GAAW9C,KAAKsM,MAAMkE,KAAMxQ,KAAKsM,MAAMlK,gBAInD,EAAAy5B,EAAA,GAAY,IAGA,KAAAC,gBAAkB97B,KAAK27B,iBAAiBjkB,MACpD,EAAAtU,EAAA,GAAKiZ,IACD,QACIA,EACA,+BAAKrc,KAAKsM,OAAK,CAAErC,MAAM,YACvBjK,KAAKwW,KAAKlS,SAASq1B,iBAG3B,EAAAoC,EAAA,GAAI,IAAO/7B,KAAKga,SAAU,IAyB1Bha,KAAKsE,SAAS2E,KAAKjJ,KAAKwW,KAAKlS,UAAYtE,KAAKkZ,UAAU,IACxDlZ,KAAKuZ,aACD,SACAvZ,KAAK87B,gBAAgBriB,UAAWpW,GAAMA,IAzB9C,gBACI,OAAOrD,KAAKwW,KAAK0C,UAIrB,eACI,QAASlZ,KAAKuW,UAAUsB,IAAI,+BAIhC,gBACI,MAAM8e,EAAS,GAEf,OADA32B,KAAK22B,OAAO51B,QAAS+I,GAAW6sB,EAAO7sB,EAAMjL,KAAM,GAC5C83B,EAgBJ,cAAc7sB,GACb9J,KAAKg8B,SACAh8B,KAAKi8B,UAAUnyB,EAAMjL,KACtBmB,KAAK22B,OAAOtuB,KAAKyB,IAGrB9J,KAAK22B,OAAS,CAAC7sB,GACf9J,KAAKgJ,QAIN,OACHhJ,KAAKmC,MAAMb,KAAK,CAAEimB,OAAQ,OAAQxhB,SAAU/F,KAAK22B,U,6CAlF5C8E,GAAyB,8BA4DtB,Q,wBA5DHA,EAAyB,wiC,GAAA,MApH9B,kBACI,sBAA2B,iBAAK,QAChC,iBACI,SACJ,QACA,oBACI,sBAA2B,iBAAK,QACpC,QACJ,QACA,gBACI,kCAeA,mCAiBA,kBACI,iCAoBA,wBAgBJ,QACA,2BAKA,2CAMA,2CAMJ,S,uBA9FQ,sDASC,yDAeA,6DAgBc,kCAAgB,cAsB1B,kCAeA,oC,+LAoCd,G,gFC5IHA,EAAyB,wCACzBD,EAAwB,c,MAAxBA,EAAwB,oB,sBCR5B,IAAIU,EAAsB,EAEnB,SAASC,EAAkB/sB,EAAqB,IACnD,MAAMvQ,EAAK,SAASq9B,IACdr6B,EAAO,cAAcq6B,IACrBE,GAAS,QAAqB,OAAS,GAAM,GAAKF,EAAc,EAChEpyB,EAAQ,OAAH,QACPjL,KACAgD,OACAw6B,UAAW,GAAGx6B,sBACd2C,OAAQ,GAAG03B,IACXp4B,SAAwC,GAA9B,QAAqB,GAAI,GACnC0B,MAAO,GAAG3D,EAAKiG,cAAcnD,MAAM,KAAKkD,KAAK,QAAQ,OACrDjD,KAAM,GACN03B,YAAY,QAAqB,OAAS,GAAM,EAChDC,aAAa,QAAqB,OAAS,GAAM,EACjDv1B,UAAU,QAAqB,OAAS,GAAM,EAC9Cw1B,UAAuC,KAA5B,QAAqB,KAChC1xB,MAAiC,GAA1B,QAAqB,GAC5BC,UAAqC,GAA1B,QAAqB,GAChCrC,MAAO,CAAC,cACR+zB,YAAa,oBAAoB59B,IACjC4Q,SAAU,GACVitB,aAAcN,EACR,CAAC,UAAS,QAAqBF,EAAc,MAC7C,GACNS,MAAO,IACJvtB,GASP,OAPItF,EAAsB,gBAAKA,EAAsB,eAAErH,OAAS,IAC5DqH,EAAsB,eAAE/I,QACnBqiB,GACIA,EAAOtf,UAAW,QAAqBgG,EAAMhG,UAAY,GAElEgG,EAAsB,eAAE,GAAGhG,SAAWgG,EAAMhG,UAEzCgG,E,0EC5BJ,MAAM8yB,EAkCT,YAAY/uB,EAAuB,IAC/B7N,KAAKnB,GAAKgP,EAAKhP,IAAM,GACrBmB,KAAK6B,KAAOgM,EAAKhM,MAAQ,GACzB7B,KAAK8E,aAAe+I,EAAK/I,cAAgB,GACzC9E,KAAKwF,OAASqI,EAAKrI,OAAS,IAAIsC,cAChC9H,KAAK8D,SAAW+J,EAAK/J,WAAa,EAClC9D,KAAKgwB,aAAeniB,EAAKmiB,cAAiBniB,EAAK5G,UAAoB,GACnEjH,KAAKgH,WAAa6G,EAAK7G,SACvBhH,KAAK0I,MAAQmF,EAAKnF,OAAS,GAC3B1I,KAAKy8B,YAAc5uB,EAAK4uB,aAAe,GACvCz8B,KAAKwE,OAASqJ,EAAKrJ,QAAU,GAC7BxE,KAAK28B,MAAQ9uB,EAAK8uB,OAAS,GAC3B38B,KAAK68B,eAAiBhvB,EAAKgvB,gBAAkB,GAC7C78B,KAAKiH,SAAW4G,EAAK5G,UAAY,GACjCjH,KAAKoK,gBAAkByD,EAAKzD,gBAC5BpK,KAAKqE,MAAQwJ,EAAKxJ,OAAS,IAAI,KAC/BrE,KAAK8b,aAAejO,EAAKiO,cAAgB,M,iICjD1C,Y,MAAMghB,EAkBT,YAAoBtmB,GAAA,KAAAA,OAhBZ,KAAAumB,MAAQ,IAAI,IAAyB,IAE1B,KAAAza,aAAe,IAAI,KAAyB,GAE/C,KAAA7K,YAAczX,KAAKsiB,aAAa9E,eAEhC,KAAAnB,KAAOrc,KAAK+8B,MAAMvf,eAExB,KAAAwf,SAAYlzB,GAClBA,EAAMpB,MAAM4C,SAAStL,KAAKwW,KAAKlS,SAASzF,IAQxCmB,KAAKwW,KAAKiB,YACLC,MAAK,OAAOrU,GAAMA,IAClBoW,UAAU,IAAMzZ,KAAKi9B,cAP9B,iBACI,OAAOj9B,KAAK+8B,MAAM/e,WAaf,OAAOkf,EAAmCl9B,KAAKg9B,UAClD,OAAOh9B,KAAK+8B,MAAM/e,WAAW9W,OAAQ7D,GAAM65B,EAAU75B,IAOlD,KAAKxE,GACR,OAAOmB,KAAK+8B,MACP/e,WACA5W,KAAM0C,GAAUA,EAAMjL,KAAOA,GAAMiL,EAAMtE,QAAU3G,GAG9C,a,8CACV,MAcMs+B,SAdgB,SAAa,CAC/BnF,QAASh4B,KAAKwW,KAAK4mB,aAAav+B,GAChCw8B,MAAO,MAEN3jB,MAAK,OAAK9P,GAAMA,EAAEiG,OAClB+J,aACsBxU,IACtBi6B,GACG,IAAI,IAAM,OAAD,wBACDA,GAAW,CACfh5B,MAAOrE,KAAKwW,KAAK+F,YAAY,IAAI8gB,EAAI30B,YAIjBxB,OAAQ4C,GAAUA,EAAMtF,QACxDxE,KAAK+8B,MAAM9zB,KAAKk0B,GAChBn9B,KAAKsiB,aAAarZ,MAAK,M,6CA3DlB6zB,GAAa,c,0BAAbA,EAAa,QAAbA,EAAa,qBAFV,S,GAET,I,uQCQC,kBAII,uBACJ,S,qBADe,+B,wCAEf,oBAII,oBAAoD,kBAAM,QAC1D,qBAAmB,iEAAwB,gBAAI,QACnD,S,sBAEI,mBACI,0BACA,aAAG,8BAAkB,QACzB,SAgBL,Y,MAAMQ,UAA8B,KAUvC,YAA6ChxB,GACzCwK,QADyC,KAAAxK,QAR5B,KAAAnK,MAAQ,IAAI,MAYtB,WACHnC,KAAKmL,KAAOnL,KAAKsM,MAAMnB,MAAQ,GAC/BnL,KAAK2qB,MAAO,QAAiB3qB,KAAKmL,MAG/B,cAEH,GADAnL,KAAK2qB,KAAK4S,mBACNv9B,KAAK2qB,KAAKG,MAAO,CACjB,MAAM0S,EAAW,IAAI,KAAK,OAAD,wBAClBx9B,KAAK2qB,KAAKnd,OAAK,CAClB5I,KAAM,cAEV5E,KAAKmC,MAAMb,KAAK,CAAEimB,OAAQ,OAAQxhB,SAAUy3B,M,6CA1B3CF,GAAqB,MAUV,Q,wBAVXA,EAAqB,stB,GAAA,MA1C1B,kBACI,iBACI,SACJ,QACA,iBACA,oBACI,oBAAU,iBAAK,QACnB,QACJ,QACA,wBAMA,0BAOA,2C,uBApBQ,+EASH,kCAAgB,cAMhB,oC,kJAyBN,G,iDC9CK,iBACI,mBACI,iBAAI,gBAAM,aAAC,QAAO,cACtB,QACA,4BACI,mBAMA,qBAAW,4BAAgB,QAC/B,QACJ,S,sBAZsB,4C,yBAatB,iBACI,mBACI,kBAAK,gBAAM,aAAC,QAAO,cACvB,QACA,4BACI,mBAMA,qBAAW,qCAAyB,QACxC,QACJ,S,sBAZuB,6C,yBAavB,iBACI,mBACI,yBAAY,gBAAM,aAAC,QAAO,cAC9B,QACA,4BACI,oBAMA,qBAAW,oCAAwB,QACvC,QACJ,S,sBAZqB,oD,yBAarB,iBACI,oBACI,oBACJ,QACA,4BACI,oBAOA,qBAAW,mCAAuB,QACtC,QACJ,S,sBAbuB,6C,sBAcvB,iBACI,2BAKI,iCACJ,QACJ,S,sBACA,iBACI,2BAKI,4BACJ,QACJ,S,yBA3EJ,kBACI,wBAcA,wBAcA,wBAcA,uBAeA,uBASA,uBASJ,S,qBA5E6B,0BACL,4CAcA,6CAcA,oDAcA,6CAeA,2DASA,uDAwBzB,Y,MAAMG,EAIF,SAAS57B,GACZ,OACI7B,KAAK2qB,KAAKE,SAAShpB,GAAM+oB,SAAW5qB,KAAK2qB,KAAKE,SAAShpB,GAAM67B,S,6CAN5DD,I,wBAAAA,EAAiB,yyBA3FtB,wB,KAAiB,sB,uLA2FlB,G,kCC3EA,Y,MAAME,G,6CAAAA,I,wBAAAA,I,4BAVA,CACL,KACA,KACA,KACA,KACA,KACA,S,GAID,G,MAXYL,EAAuB,CAAF,KAAE,mBAAAG,EAAiB,U,cCRpD,MAAMG,EAsBT,YAAYtxB,EAAiB,IACzBtM,KAAK4E,KAAO0H,EAAM1H,MAAQ0H,EAAMzH,UAAY,QAC5C7E,KAAKqf,SAAW/S,EAAM+S,UAClB/S,EAAM9H,QAAU,CACZsH,EAAGQ,EAAMR,EAAIQ,EAAMgG,WAAa,EAChCvG,EAAGO,EAAMP,EAAIO,EAAMiG,YAAc,GAEzCvS,KAAKqS,SAAW/F,EAAM+F,UAAY,EAClCrS,KAAKgM,UAAYM,EAAMN,YAAa,EAAAkJ,EAAA,GAAY,IAAIzE,MACpDzQ,KAAKqE,MAAQiI,EAAMjI,MACnBrE,KAAKsE,SAAWgI,EAAMhI,SACtBtE,KAAKiS,cAAgB3F,EAAM2F,YAC3BjS,KAAKmS,iBAAmB7F,EAAM6F,kBAAoB,Y,2CC7B1D,MAAM0rB,EAAiB,uBAiBhB,SAASC,EAAa1yB,GACzB,MAAMqR,GAAQ,OAAc,CAAErR,MAC9B,OAAO,SAAI,GAAGyyB,IAAiBzyB,EAAI,IAAMqR,EAAQ,MAAM/E,MACnD,OAAK2E,GAASA,EAAKjZ,IAAKmR,GAAS,IAAI,KAAUA,MAmBhD,SAASwpB,EAAUl/B,GACtB,OAAO,SAAI,GAAGg/B,KAAkBjV,mBAAmB/pB,MAAO6Y,MACtD,OAAKnD,GAAS,IAAI,KAAUA,KA6B7B,SAASypB,EAAkBn/B,GAC9B,OAAO,SAAI,GAAGg/B,KAAkBjV,mBAAmB/pB,eAAgB6Y,MAC/D,OAAK2E,GAASA,EAAKjZ,IAAKmR,GAAS,IAAI,IAAcA,MC1E3D,MAAM0pB,EAAiB,uBAMhB,SAASC,EAAY9yB,GACxB,MAAMqR,GAAQ,OAAc,CAAErR,MAC9B,OAAO,SAAI,GAAG6yB,IAAiB7yB,EAAI,IAAMqR,EAAQ,MAAM/E,MACnD,OAAK2E,GAASA,EAAKjZ,IAAKmR,GAAS,IAAI,KAAUA,MAQhD,SAAS4pB,EAAUt/B,GACtB,OAAO,SAAI,GAAGo/B,KAAkBrV,mBAAmB/pB,MAAO6Y,MACtD,OAAKnD,GAAS,IAAI,KAAUA,O,8ECV7B,MAAM6pB,EAwCT,YAAYvwB,EAA8B,I,YACtC7N,KAAKnB,GAAKgP,EAAKhP,IAAM,GACrBmB,KAAK6B,KAAOgM,EAAKhM,MAAQ,GACzB7B,KAAKwF,MAAQqI,EAAKrI,OAAS,GAC3BxF,KAAKyF,WAAaoI,EAAKpI,YAAcoI,EAAKhM,MAAQ,GAClD7B,KAAK0F,UAAYmI,EAAKnI,WAAa,GACnC1F,KAAKq+B,MAAQxwB,EAAKwwB,OAAS,GAC3Br+B,KAAKo9B,aAAevvB,EAAKuvB,cAAgB,GACzCp9B,KAAKs+B,MAAQzwB,EAAKywB,OAAS,GAC3Bt+B,KAAKu+B,MAAQ1wB,EAAK0wB,OAAS,GAC3Bv+B,KAAKmR,SAAWtD,EAAKsD,UAAY,GACjCnR,KAAKw+B,YAAc3wB,EAAK2wB,UACxBx+B,KAAK0H,OAASmG,EAAKnG,QAAU,GAC7B1H,KAAK6L,aAAegC,EAAKhC,WACzB7L,KAAKy+B,SAAwB,QAAb,EAAA5wB,EAAK4wB,gBAAQ,SAC7Bz+B,KAAKoK,gBAAkByD,EAAKzD,iBAAmB,GAC/C,MAAM1C,EAASmG,EAAKnG,QAAU,GAC1BmG,EAAK6wB,WAAWh3B,EAAOW,KAAK,iBAC5BwF,EAAK8wB,SAASj3B,EAAOW,KAAK,mBAC9BrI,KAAK0H,OAASA,EACd1H,KAAK6K,eAAiBgD,EAAKhD,gBAAkB,GAC7C7K,KAAK6K,eAAe+zB,oBAChB/wB,EAAK+wB,qBAAuB5+B,KAAK6K,eAAe+zB,oBACpD5+B,KAAKo1B,cAAyB,QAAV,EAAAp1B,KAAKwF,aAAK,eAAEd,SAAS,GAAG,SAC5C1E,KAAKgI,eAAoC,QAAnB,EAAA6F,EAAK7F,sBAAc,SACzChI,KAAK4+B,uBAA2C,QAAnB,EAAA5+B,KAAK6K,sBAAc,eAAE+zB,sBAInD,MAAMC,UAAkBT,EAM3B,YAAYvwB,EAA2B,IACnCiJ,MAAMjJ,GACN7N,KAAK8+B,mBAAqBjxB,EAAKixB,oBAAsB,GACrD9+B,KAAK++B,0BACDlxB,EAAKkxB,4BAA6B,GAIvC,MAAMC,UAAkBZ,EAU3B,YAAYvwB,EAA2B,IACnCiJ,MAAMjJ,GACN7N,KAAKi/B,YAAcpxB,EAAKoxB,aAAe,GACvCj/B,KAAKk/B,SAAWrxB,EAAKqxB,UAAY,GACjCl/B,KAAK6E,SAAWgJ,EAAKhJ,UAAY,GACjC7E,KAAK6Y,eAAiBhL,EAAKgL,gB,+FC5GnC,IAIWsmB,EAAc,aAElB,SAASC,EAAsB7gB,GAClC4gB,EAAc5gB,EA8DX,SAAS8gB,EAAiBl0B,G,MAC7B,IAAKA,EACD,MAAMzM,MAAM,kBAGhB,MAAM4gC,EAA+B,CACjCz9B,KAAM,IAAI,KAAYsJ,EAAKtJ,MAAQ,IACnC2D,MAAO,IAAI,KAAY2F,EAAK3F,OAAS,GAAI,CACrC,WACA,gBAEJ43B,aAAc,IAAI,KACdjyB,EAAKiyB,cAAgB,GACrB,eAEJiB,MAAO,IAAI,KAAYlzB,EAAKkzB,OAAS,IACrCO,oBAAqB,IAAI,KAAYzzB,EAAKyzB,sBAAuB,GACjE52B,eAAgB,IAAI,KAA+B,QAAnB,EAAAmD,EAAKnD,sBAAc,WAKvD,OADa,IAAI,KAAUs3B,GAIxB,SAASC,EACZp0B,EACAlB,EAAe,IAEf,MAAMq1B,EAA+B,CACjCz9B,KAAM,IAAI,KAAYsJ,EAAKtJ,MAAQ,IACnC2D,MAAO,IAAI,KAAY2F,EAAK3F,OAAS,GAAI,CACrC,WACA,gBAEJ43B,aAAc,IAAI,KACdjyB,EAAKiyB,cAAgB,GACrB,eAEJiB,MAAO,IAAI,KAAYlzB,EAAKkzB,OAAS,IACrCp0B,KAAM,IAAI,KAAYA,GAAQ,GAAI,CAAC,iBAIvC,OADa,IAAI,KAAUq1B,M","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8174;\nmodule.exports = webpackEmptyAsyncContext;","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { EditorModule } from '@tinymce/tinymce-angular';\n\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatRadioModule } from '@angular/material/radio';\n\nimport { TopbarHeaderComponent } from './topbar-header.component';\nimport { FooterMenuComponent } from './footer-menu/footer-menu.component';\n\nimport { UserFormComponent } from './forms/user-form/user-form.component';\nimport { BookingFormComponent } from './forms/booking-form/booking-form.component';\n\nimport { MapControlsComponent } from './map-controls/map-controls.component';\nimport { TakePhotoComponent } from './take-photo/take-photo.component';\nimport { ComponentsModule } from '@placeos/components';\n\nconst COMPONENTS: Type<any>[] = [\n    TopbarHeaderComponent,\n    FooterMenuComponent,\n\n    UserFormComponent,\n    BookingFormComponent,\n\n    MapControlsComponent,\n    TakePhotoComponent\n];\n\nconst MATERIAL_MODULES: any[] = [\n    MatButtonModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatChipsModule,\n    MatRippleModule,\n    MatMenuModule,\n    MatBottomSheetModule,\n    MatCheckboxModule,\n    MatRadioModule\n];\n\nconst CDK_MODULES: any[] = [\n    ScrollingModule\n];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        RouterModule,\n        EditorModule,\n        ...MATERIAL_MODULES,\n        ...CDK_MODULES\n    ],\n    exports: [\n        ComponentsModule,\n        ...COMPONENTS,\n        ...MATERIAL_MODULES,\n        ...CDK_MODULES\n    ]\n})\nexport class SharedContentModule {}\n","import {\n    Component,\n    OnInit,\n    HostBinding,\n    OnDestroy,\n    Output,\n    EventEmitter,\n} from '@angular/core';\n\n@Component({\n    selector: 'a-take-photo',\n    template: `\n        <div name=\"camera\" class=\"flex flex-col items-center justify-center rounded overflow-hidden relative\">\n            <mat-spinner diameter=\"32\"></mat-spinner>\n            <div class=\"text\">Please wait...</div>\n            <video\n                id=\"video\"\n                #video\n                autoplay\n                width=\"360\"\n                height=\"400\"\n                class=\"absolute inset-0\"\n            ></video>\n            <canvas\n                id=\"canvas\"\n                #canvas\n                class=\"absolute inset-0\"\n                width=\"360\"\n                height=\"400\"\n            ></canvas>\n        </div>\n        <div class=\"flex items-center justify-center mt-4 space-x-2\">\n            <button class=\"take-photo\" *ngIf=\"!hasPhoto; else accept_state\" mat-button (click)=\"takePhoto()\">\n                Take Photo\n            </button>\n        </div>\n        <ng-template #accept_state>\n            <button class=\"inverse\" mat-button (click)=\"cancelPhoto()\">\n                Cancel\n            </button>\n            <button mat-button (click)=\"acceptPhoto()\">\n                Accept\n            </button>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            }\n\n            [name=\"camera\"] {\n                width: 22.5rem;\n                height: 25rem;\n            }\n\n            button {\n                width: 8rem;\n            }\n        `,\n    ],\n})\nexport class TakePhotoComponent implements OnInit, OnDestroy {\n    @Output() public photoAccepted = new EventEmitter();\n    @HostBinding('class.has-photo') public hasPhoto = false;\n    public video: any;\n    public canvas: any;\n    private canvasContext = null;\n\n    private constraints = {\n        audio: false,\n        video: {\n            width: { min: 360, max: 360 },\n            height: { min: 400, max: 400 },\n        },\n    };\n\n    public imgSrc = null;\n\n    constructor() {}\n\n    public ngOnInit() {\n        setTimeout(() => this.getCanvasContext(), 500);\n    }\n\n    public ngOnDestroy() {\n        this.stopCapture();\n        this.video = null;\n        this.canvasContext = null;\n        this.canvas = null;\n        this.imgSrc = null;\n    }\n\n    private startCapture() {\n        this.imgSrc = null;\n        console.log('TakePhotoComponent::startCapture');\n        this.video = document.getElementById('video') as any;\n        if (!this.video) {\n            return setTimeout(() => this.startCapture(), 200);\n        } else {\n            navigator.mediaDevices\n                .getUserMedia(this.constraints)\n                .then((stream) => {\n                    this.video.srcObject = stream;\n                });\n        }\n    }\n\n    private stopCapture() {\n        console.log('TakePhotoComponent::stopCapture');\n        if (this.video && this.video.srcObject) {\n            this.video.srcObject\n                .getVideoTracks()\n                .forEach((track) => track.stop());\n        }\n    }\n\n    private getCanvasContext() {\n        console.log('TakePhotoComponent::getCanvasContext');\n        this.canvas = document.getElementById('canvas') as any;\n        if (!this.canvas) {\n            return setTimeout(() => this.getCanvasContext(), 200);\n        }\n        this.canvasContext = this.canvas.getContext('2d');\n        setTimeout(() => this.startCapture(), 200);\n    }\n\n    public takePhoto() {\n        console.log('TakePhotoComponent::takePhoto');\n        this.canvasContext.drawImage(\n            this.video,\n            0,\n            0,\n            this.canvas.width,\n            this.canvas.height\n        );\n        this.hasPhoto = true;\n        this.stopCapture();\n    }\n\n    public cancelPhoto() {\n        console.log('TakePhotoComponent::cancelPhoto');\n        this.canvasContext.clearRect(\n            0,\n            0,\n            this.canvas.width,\n            this.canvas.height\n        );\n        this.hasPhoto = false;\n        this.startCapture();\n    }\n\n    public acceptPhoto() {\n        try {\n            this.imgSrc = this.canvas.toDataURL('image/jpeg', 0.75);\n            this.photoAccepted.emit(this.imgSrc);\n            console.log('TakePhotoComponent::acceptPhoto Success');\n        } catch (err) {\n            console.error(\n                'TakePhotoComponent::acceptPhoto Error converting image',\n                err\n            );\n            this.photoAccepted.emit(null);\n            this.cancelPhoto();\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-topbar-header',\n    template: `\n        <div class=\"flex items-center bg-gray-900 shadow\">\n            <a\n                mat-button\n                [routerLink]=\"['/home']\"\n                class=\"h-full flex flex-col justify-center bg-black px-4\"\n            >\n                <img class=\"h-10 my-2\" src=\"assets/logo-dark.svg\" />\n            </a>\n            <div\n                class=\"ml-auto h-full flex flex-col justify-center text-white px-4\"\n            >\n                {{ time }}\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div {\n                height: 3.5rem;\n            }\n\n            a {\n                border-radius: 0;\n            }\n\n            img {\n                max-height: 2.5rem;\n                max-width: 50vw;\n            }\n        `,\n    ],\n})\nexport class TopbarHeaderComponent extends BaseClass {\n    public get time() {\n        return dayjs().format('dddd h:mmA');\n    }\n}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), []);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nexport const ZONE_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/zones',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.tags === 'org') {\n                return MOCK_ORGS;\n            } else if (request.query_params.tags === 'building') {\n                return MOCK_BUILDINGS;\n            } else if (request.query_params.tags === 'level') {\n                return MOCK_LEVELS;\n            }\n            throw { status: 404, message: 'Zones not found' };\n        },\n    });\n\n    function padString(str: string | number, length: number = 5) {\n        str = `${str}`;\n        while (str.length < length) str = `0${str}`;\n        return str;\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.name === 'bindings') {\n                return {\n                    bindings: {\n                        details: {\n                            area_management: 'space-0',\n                            location_services: 'space-0',\n                        },\n                    },\n                };\n            }\n            if (request.query_params.name === 'catering') {\n                return {\n                    catering: {\n                        details: MOCK_MENU,\n                    },\n                };\n            }\n            if (request.query_params.name === 'desks') {\n                const parts = request.route_params.id.split('-');\n                const id = parts[parts.length - 1];\n                return generateMockDeskMetadata(id);\n            }\n            if (\n                MOCK_METADATA[request.route_params.id] &&\n                MOCK_METADATA[request.route_params.id][\n                    request.query_params.name\n                ]\n            ) {\n                return MOCK_METADATA[request.route_params.id];\n            } else if (\n                MOCK_METADATA[request.route_params.id] &&\n                !request.query_params.name\n            ) {\n                return MOCK_METADATA[request.route_params.id] || {};\n            }\n            return {};\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            if (!MOCK_METADATA[request.route_params.id])\n                MOCK_METADATA[request.route_params.id] = {};\n            MOCK_METADATA[request.route_params.id][request.body.name] =\n                request.body;\n        },\n    });\n\n    const DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\n    function generateMockDeskMetadata(id: string) {\n        return {\n            desks: {\n                details: new Array(30).fill(0).map((_, idx) => ({\n                    id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                    name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                    bookable: predictableRandomInt(9999) % 4 !== 0,\n                    group: '',\n                    features: DESK_FEATURES.filter(\n                        (_) => predictableRandomInt(99999) % 3 === 0\n                    ),\n                })),\n            },\n        };\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id/children',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const zone = MOCK_BUILDINGS.find(\n                (_) => _.id === request.route_params.id\n            );\n            if (!zone)\n                throw {\n                    status: 404,\n                    message: `Unable to find zone with id \"${request.route_params.id}\"`,\n                };\n            return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map(\n                (lvl) => {\n                    const parts = lvl.id.split('-');\n                    const id = parts[parts.length - 1];\n                    return {\n                        zone: lvl,\n                        metadata: generateMockDeskMetadata(id),\n                    };\n                }\n            );\n        },\n    });\n}\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nexport const USER_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/users/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.id === 'current') {\n                return ACTIVE_USER;\n            }\n            const person = MOCK_STAFF.find(\n                (user) => user.email === request.route_params.id\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_STAFF.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const id = decodeURIComponent(request.route_params.id);\n            const person = MOCK_STAFF.find((user) => user.email === id);\n            if (person) {\n                return {\n                    ...person,\n                    location: generateLocation(),\n                };\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_GUESTS.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const person = MOCK_GUESTS.find(\n                (user) => user.email === request.route_params.email\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email/meetings',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.email) {\n                const email = request.route_params.email.toLowerCase();\n                const events = MOCK_EVENTS.filter((event) =>\n                    event.attendees.find(\n                        (user) => user.email.toLowerCase() === email\n                    )\n                );\n                return events;\n            }\n            throw {\n                status: 404,\n                message: `Unable to find meetings with guest with email ${request.route_params.email}`,\n            };\n        },\n    });\n\n    const LOCATION_TYPES = [\n        'meeting',\n        'desk_id',\n        'laptop',\n        'mobile',\n        'geo',\n        'none',\n    ];\n\n    function generateLocation() {\n        const type =\n            LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n        const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n        const level_spaces = MOCK_SPACES.filter((s) =>\n            s.zones.includes(level.id)\n        );\n        const space =\n            level_spaces[predictableRandomInt(level_spaces.length)] || {};\n        const location: HashMap = {};\n        switch (type) {\n            case 'meeting':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    system: space.id,\n                    map_id: space.map_id,\n                    event_id: '',\n                };\n                break;\n            case 'desk_id':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    map_id: space.map_id,\n                    checked_in: dayjs().unix(),\n                };\n                break;\n            case 'laptop':\n            case 'mobile':\n                location[type] = {\n                    building: level.parent_id,\n                    level: level.id,\n                    x: +predictableRandomInt(10000),\n                    y: +predictableRandomInt(5000),\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n            case 'geo':\n                location.geo = {\n                    lat: predictableRandomInt(180) - 90,\n                    lon: predictableRandomInt(360) - 180,\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n        }\n        return location;\n    }\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $powerup() {\n        console.log('Power On');\n        this.active = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.active = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nexport const SYSTEM_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    MOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/systems',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            return MOCK_SPACES;\n        },\n    });\n}\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const EVENT_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            let events = MOCK_EVENTS;\n            if (!_.query_params.zone_ids) {\n                events = events.filter(\n                    (event) =>\n                        !!event.attendees.find(\n                            (user) => user.email === ACTIVE_USER.email\n                        )\n                );\n            }\n            if (_.query_params.period_start) {\n                events = events.filter((e) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        e.event_start,\n                        e.event_end\n                    )\n                );\n            }\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-cal-event-${predictableRandomInt(999)}`,\n            };\n            new_event.attendees = [\n                MOCK_STAFF.find((_) => _.email === new_event.host),\n                ...(new_event.attendees || []),\n            ];\n            new_event.attendees.forEach((user) => {\n                if (user.zones) user.resource = true;\n            });\n\n            if (new_event.system) {\n                new_event.attendees = [\n                    ...(new_event.attendees || []),\n                    { ...new_event.system, resource: true },\n                ];\n            }\n            MOCK_EVENTS.push(new_event);\n            return new_event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const item = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (item) {\n                return item;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index > 0) {\n                if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                    MOCK_EVENTS.splice(index, 1);\n                } else {\n                    const user = MOCK_EVENTS[index].attendees.find(\n                        (_) => _.email === ACTIVE_USER.email\n                    );\n                    user.response_status = 'declined';\n                }\n                return;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index >= 0) {\n                return MOCK_EVENTS.splice(index, 1, request.body);\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id/guests/:email/checkin',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const event = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (event) {\n                const checked_in =\n                    (event.extension_data as any).checked_in || [];\n                (event.extension_data as any).checked_in = checked_in.concat([\n                    request.route_params.email,\n                ]);\n                return event;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n}\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport { timePeriodsIntersect } from '@placeos/common';\n\nexport const CALENDAR_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => [],\n    });\n\n    const handleSpaceAvailability = (request) => {\n        const start = +request.query_params.period_start;\n        const end = +request.query_params.period_end;\n        const zones = (request.query_params.zone_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n        const systems = (request.query_params.system_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n\n        const spaces = MOCK_SPACES.filter((space) =>\n            zones.length\n                ? zones.reduce(\n                      (has, zone) => has && space.zones.includes(zone),\n                      true\n                  )\n                : systems.length\n                ? systems.includes(space.id)\n                : true\n        ).filter((space) => {\n            const bookings = MOCK_EVENTS.filter((event) =>\n                event.attendees.find((user) => user.id === space.id)\n            );\n            for (const event of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        start,\n                        end,\n                        event.event_start,\n                        event.event_end\n                    )\n                )\n                    return false;\n            }\n            return true;\n        });\n        return spaces;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/availability',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/free_busy',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n}\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { log } from '@placeos/common';\n\nimport { ZONE_MOCKS } from './lib/api/zones.mock';\nimport { USER_MOCKS } from './lib/api/users.mock';\nimport { SYSTEM_MOCKS } from './lib/api/systems.mock';\nimport { EVENT_MOCKS } from './lib/api/events.mock';\nimport { CALENDAR_MOCKS } from './lib/api/calendars.mock';\nimport { BOOKING_MOCKS } from './lib/api/bookings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nexport const BOOKING_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const events = MOCK_BOOKINGS.filter(\n                (event) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        event.booking_start,\n                        event.booking_end\n                    ) && event.type === _.query_params.type\n            );\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n            if (!event)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${_.route_params.id}`,\n                };\n            return event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-booking-${predictableRandomInt(999)}`,\n            };\n            MOCK_BOOKINGS.push(new_event);\n            return new_event;\n        },\n    });\n\n    const updateBooking = (id, data) => {\n        const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${id}`,\n            };\n        const new_event = { ...data };\n        MOCK_BOOKINGS.splice(index, 1, new_event);\n        return new_event;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'PUT',\n        callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/approve',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: true,\n                rejected: false,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/reject',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: false,\n                rejected: true,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/check_in',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                checked_in: req.query_params.state === 'true',\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (req) => {\n            const index = MOCK_BOOKINGS.findIndex(\n                (e) => e.id === req.route_params.id\n            );\n            if (index < 0)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${req.route_params.id}`,\n                };\n            MOCK_BOOKINGS.splice(index, 1);\n            return;\n        },\n    });\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n    log,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        log('APP', 'MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 15 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                currentUser()?.email?.split('@')[1]\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","\n    <div class=\"details\">\n        <header>\n            Visitor Kiosk Setup\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div class=\"field\" *ngIf=\"buildings && buildings.length\">\n                <label>Please select a building from the dropdown below</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        #select\n                        [(value)]=\"active_building\"\n                        (valueChange)=\"updateRotations()\"\n                        placeholder=\"Select building\"\n                    >\n                        <mat-option *ngFor=\"let option of buildings\" [value]=\"option\">\n                            {{ option.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"levels && levels.length\">\n                <label>Please select a level from the dropdown below</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select #select [(value)]=\"active_level\" placeholder=\"Select level\">\n                        <mat-option *ngFor=\"let option of levels\" [value]=\"option\">\n                            {{ option.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"rotations && rotations.length\">\n                <label>Please select an orientation from the dropdown below</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select\n                        #select\n                        [(value)]=\"active_rotation\"\n                        placeholder=\"Select orientation\"\n                    >\n                        <mat-option *ngFor=\"let option of rotations\" [value]=\"option\">\n                            {{ option.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"locations && locations.length\">\n                <label>Please select an fixed location from the dropdown below</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select #select [(value)]=\"active_location\" placeholder=\"Select location\">\n                        <mat-option *ngFor=\"let option of locations\" [value]=\"option\">\n                            {{ option.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer *ngIf=\"!loading\">\n            <button\n                mat-button\n                [disabled]=\"!active_building && !active_level\"\n                (click)=\"bootstrapKiosk()\"\n            >\n                Finish Setup\n            </button>\n        </footer>\n    </div>\n<ng-template #load_state>\n    <main>\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"64\"></mat-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </main>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { BaseClass, Identity } from '@placeos/common';\nimport { Building, BuildingLevel, OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: '[bootstrap]',\n    templateUrl: './bootstrap.component.html',\n    styleUrls: ['./bootstrap.component.scss'],\n})\nexport class BootstrapComponent extends BaseClass implements OnInit {\n    /** Loading state of the bootstrap */\n    public loading: string;\n    /** Actively selected building */\n    public active_building: Building;\n    /** Actively selected level */\n    public active_level: BuildingLevel;\n    /** Actively selected level */\n    public active_rotation: Identity;\n    /** Actively selected location */\n    public active_location: Identity;\n\n    public rotations: Identity[] = [];\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** List of available levels */\n    public get levels(): readonly BuildingLevel[] {\n        if (!this.active_building) {\n            return [];\n        }\n        return this._org.levelsForBuilding(this.active_building) || [];\n    }\n\n    /** List of available locations */\n    public get locations(): readonly Identity[] {\n        if (!this.active_level) {\n            return [];\n        }\n        return this.active_level.locations || [];\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('clear') && params.get('clear') === 'true') {\n                    localStorage.removeItem('KIOSK.building');\n                    localStorage.removeItem('KIOSK.level');\n                    localStorage.removeItem('KIOSK.orientation');\n                }\n            })\n        );\n        this.timeout('check', () => this.checkBootstrap(), 1000);\n    }\n\n    public updateRotations() {\n        const orientations = this.active_building.orientations;\n        const rotations: Identity[] = [];\n        for (const key in orientations) {\n            if (orientations.hasOwnProperty(key)) {\n                rotations.push({\n                    id: key,\n                    name: `${key.split('_').join(' ')} (${orientations[key] * 90}°)`,\n                    value: orientations[key],\n                });\n            }\n        }\n        this.rotations = rotations;\n        this.active_rotation = this.rotations[0];\n    }\n\n    /**\n     * Store bootstrapped values and navigate to the main page\n     */\n    public bootstrapKiosk() {\n        this.loading = 'Bootstrapping application...';\n        if (this.active_building && this.active_level) {\n            if (localStorage) {\n                localStorage.setItem('KIOSK.building', this.active_building.id);\n                localStorage.setItem('KIOSK.level', this.active_level.id);\n                if (this.active_rotation) {\n                    localStorage.setItem('KIOSK.orientation', this.active_rotation.value);\n                }\n                if (this.active_location) {\n                    localStorage.setItem('KIOSK.location', `${this.active_location.id}`);\n                }\n            }\n            this._router.navigate(['/welcome']);\n        }\n        this.loading = null;\n    }\n\n    /**\n     * Check for any existing bootstrapped values\n     */\n    private checkBootstrap() {\n        this.loading = 'Checking for existing parameters...';\n        if (localStorage) {\n            const building_id = localStorage.getItem('KIOSK.building');\n            const level_id = localStorage.getItem('KIOSK.level');\n            if (building_id && level_id) {\n                this._router.navigate(['/welcome']);\n            } else {\n                this.checkForOldBootstrapParameters();\n            }\n        }\n        this.loading = null;\n    }\n\n    private checkForOldBootstrapParameters() {\n        const building_id = localStorage.getItem('KIOSK.bld');\n        const level_id = localStorage.getItem('KIOSK.lvl');\n        const orientation = localStorage.getItem('map_orientation');\n        if (orientation) {\n            switch (orientation) {\n                case 'portrait':\n                    localStorage.setItem('KIOSK.orientation', `1`);\n                    break;\n                case 'landscape_reverse':\n                    localStorage.setItem('KIOSK.orientation', `2`);\n                    break;\n                case 'portrait_reverse':\n                    localStorage.setItem('KIOSK.orientation', `3`);\n                    break;\n            }\n        }\n        if (building_id && level_id) {\n            localStorage.setItem('KIOSK.building', building_id);\n            localStorage.setItem('KIOSK.level', level_id);\n            this._router.navigate(['/welcome']);\n        }\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass, SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'app-welcome',\n    template: `\n        <div\n            class=\"absolute inset-0 bg-transparent z-50 flex flex-col items-center justify-center bg-center bg-cover\"\n            [style.background-image]=\"'url(' + background + ')'\"\n        >\n            <a-topbar-header class=\"w-full\"></a-topbar-header>\n            <div\n                class=\"flex flex-col flex-1 w-full items-center justify-center text-white bg-black bg-opacity-50 space-y-4\"\n            >\n                <h3 class=\"text-2xl\">Welcome to PlaceOS Self Service Kiosk</h3>\n                <a\n                    matRipple\n                    [routerLink]=\"['/checkin']\"\n                    class=\"text-xl py-2 px-8 mt-4 border-2 border-white text-white w-40 whitespace-nowrap flex items-center justify-center\"\n                >\n                    Check In\n                </a>\n                <a\n                    *ngIf=\"level\"\n                    matRipple\n                    [routerLink]=\"['/explore', level]\"\n                    class=\"text-xl py-2 px-8 mt-4 border-2 border-white text-white w-40 whitespace-nowrap flex items-center justify-center\"\n                >\n                    Explore\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [`\n        a {\n            height: 3.5rem;\n            background-color: rgba(255,255,255, .25);\n        }\n    `],\n})\nexport class WelcomeComponent extends BaseClass implements OnInit, OnDestroy {\n    /** Level to initially load on explore */\n    public level: string = '';\n\n    public get background() {\n        return this._settings.get('app.home.background');\n    }\n\n    constructor(\n        private route: ActivatedRoute,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this.route.paramMap.subscribe((params) => {\n                if (params.has('level')) {\n                    this.level = params.get('level');\n                }\n            })\n        );\n        this.subscription(\n            'level',\n            this._settings\n                .listen('KIOSK.level')\n                .subscribe((lvl) => (this.level = lvl))\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BootstrapComponent } from './bootstrap/bootstrap.component';\nimport { WelcomeComponent } from './welcome.component';\n\nconst routes: Routes = [\n    { path: 'bootstrap', component: BootstrapComponent },\n    { path: 'welcome', component: WelcomeComponent },\n    {\n        path: 'explore',\n        loadChildren: () => import('./explore/explore.module').then((m) => m.AppExploreModule),\n    },\n    {\n        path: 'checkin',\n        loadChildren: () => import('./checkin/checkin.module').then((m) => m.VisitorCheckinModule),\n    },\n    { path: '**', redirectTo: 'bootstrap' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedContentModule } from '../ui/shared.module';\n\nimport { ViewRoomModalComponent } from './view-room-modal/view-room-modal.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal/explore-booking-modal.component';\nimport { SharedUsersModule } from '@placeos/users';\n\nconst OVERLAYS: Type<any>[] = [\n    ViewRoomModalComponent\n];\n\n@NgModule({\n    declarations: [\n        ...OVERLAYS,\n        ExploreBookingModalComponent\n    ],\n    imports: [\n        CommonModule,\n        SharedUsersModule,\n        SharedContentModule\n    ],\n    exports: [\n        ...OVERLAYS\n    ],\n    entryComponents: [\n        ...OVERLAYS\n    ]\n})\nexport class SharedOverlaysModule {}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { AppComponent } from '../../../../libs/components/src/lib/app.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { SharedOverlaysModule } from './overlays/overlays.module';\nimport { SharedContentModule } from './ui/shared.module';\nimport { BootstrapComponent } from './bootstrap/bootstrap.component';\nimport { WelcomeComponent } from './welcome.component';\nimport { environment } from '../environments/environment';\n\nimport * as Sentry from '@sentry/angular';\n@NgModule({\n    declarations: [AppComponent, BootstrapComponent, WelcomeComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n        HttpClientModule,\n        FormsModule,\n        SharedOverlaysModule,\n        SharedContentModule,\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","// This file can be replaced durinx build by using the `fileReplacements` array.\n// `nx build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","\n\n/**\n * GENERAL APPLICATION SETTINGS\n */\nconst general = {\n    menu: {\n        items: [\n            {\n                name: 'Home',\n                route: '/home',\n            },\n            {\n                name: 'Booking',\n                route: '/book',\n                children: [\n                    {\n                        name: 'Spaces',\n                        route: '/book/spaces',\n                    },\n                    {\n                        name: 'Desks',\n                        route: '/book/desks',\n                    },\n                ],\n            },\n            {\n                name: 'Explore',\n                route: '/explore',\n                children: [\n                    {\n                        name: 'People',\n                        route: '/explore/people',\n                    },\n                    {\n                        name: 'Spaces',\n                        route: '/explore/spaces',\n                    },\n                ],\n            },\n            {\n                name: 'Help',\n                route: '/help',\n            },\n            {\n                name: 'Schedule',\n                route: '/schedule',\n            },\n            {\n                name: 'Control',\n                route: '/control',\n            },\n            {\n                name: 'Directory',\n                route: '/directory',\n            },\n        ],\n        copyright: 'Place Technology',\n        position: 'left',\n    },\n    checkin: {\n        stages: [\n            'qrcode',\n            'details',\n            // 'photo',\n            // 'visitor-pass',\n            'result',\n            'preferences',\n            'final',\n        ],\n    },\n} as any;\n\n/**\n * HOME PAGE SETTINGS\n */\nconst home = {\n    background: 'assets/img/skyline.jpg',\n    tiles: [\n        {\n            name: 'Booking',\n            route: '/book/spaces',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'event',\n            },\n        },\n        {\n            name: 'Desks',\n            route: '/book/desks',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'pin_drop',\n            },\n        },\n        {\n            name: 'Explore',\n            route: '/explore',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'map',\n            },\n        },\n        {\n            name: 'Help',\n            route: '/help',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'help_outline',\n            },\n        },\n        {\n            name: 'Schedule',\n            route: '/schedule',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'today',\n            },\n        },\n        {\n            name: 'Control',\n            route: '/control',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'settings_remote',\n            },\n        },\n        {\n            name: 'Directory',\n            route: '/directory',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'search',\n            },\n        },\n    ],\n};\n\n/**\n * HELP/SUPPORT SETTINGS\n */\n\nconst help = {\n    tiles: [\n        {\n            name: 'About Engine',\n            link: 'https://place.technology/resources',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'dns',\n            },\n            background:\n                'https://static1.squarespace.com/static/52142586e4b0c09536a144ad/5c8ed203a4222fa1927bbab3/5cb7cba66e9a7f63584b4d39/1555549341622/too-many-buttons.jpg?format=2500w',\n        },\n        {\n            name: 'General Enquiries',\n            link: 'mailto:equiries@place.technology?subject=Staff%20App%20Demo',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'mail',\n            },\n            background: 'assets/img/it-banner.jpg',\n        },\n        {\n            name: 'Contact Place',\n            link: 'https://place.technology/contact-1',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'call',\n            },\n            background:\n                'https://images.squarespace-cdn.com/content/v1/52142586e4b0c09536a144ad/1569984759306-M6ZOKD64OG009U68MYUL/ke17ZwdGBToddI8pDm48kCX-V5vw-8h9IBXN10-_8XN7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0p4Wyba38KfG317vYluk45_zZdtnDCZTLKcP2mivxmYi50xvY5saIGKMgOza9mH4XA/image-asset.jpeg?format=2500w',\n        },\n        {\n            name: 'About Us',\n            link: 'https://place.technology/',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'business',\n            },\n            background:\n                'https://images.squarespace-cdn.com/content/v1/52142586e4b0c09536a144ad/1569985184499-QF839PTJ2EV30KIZF59X/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/image-asset.jpeg?format=2500w',\n        },\n    ],\n    columns: 2,\n};\n\n/**\n * BOOKING FLOW SETTINGS\n */\n\nconst booking = {\n    booking_types: [\n        { display: 'Internal', value: 'internal' },\n        { display: 'Client', value: 'client' },\n        { display: 'External', value: 'external' },\n        { display: 'Setup', value: 'setup' },\n        { display: 'Training', value: 'training' },\n        { display: 'Interview', value: 'interview' },\n    ],\n    show_fields: [\n        'attendees',\n        'body',\n        'catering',\n        'date',\n        'duration',\n        'organiser',\n        'recurrence',\n        'title',\n        'type',\n    ],\n    html_body: true,\n    multiple_spaces: false,\n    desk_start: 9,\n};\n\n/*===========================*\\\n||  SPACE LISTING SETTINGS   ||\n\\*===========================*/\n\nconst space_display = {\n    show_images: false,\n};\n\n/*===========================*\\\n||  USER DIRECTORY SETTINGS  ||\n\\*===========================*/\n\nconst directory = {\n    show_avatars: true,\n    min_search_length: 3,\n};\n\n/*===========================*\\\n||    EXPLORE MAP SETTINGS   ||\n\\*===========================*/\n\nconst explore = {\n    colors: {\n        'space-available': '#43a047',\n        'space-requestable': '#ffb300',\n        'space-unavailable': '#e53935',\n        'space-not-bookable': '#ccc',\n\n        'desk-available': '#43a047',\n        'desk-available-stroke': '#1b5e20',\n        'desk-unavailable': '#e53935',\n        'desk-unavailable-stroke': '#b71c1c',\n        'desk-reserved': '#ffb300',\n        'desk-reserved-stroke': '#ff6f00',\n        'desk-not-bookable': '#fff',\n        'desk-not-bookable-stroke': '#ccc',\n\n        'zone-low': '#43a047',\n        'zone-medium': '#ffb300',\n        'zone-high': '#e53935',\n    },\n    can_select_building: false,\n    show_legend_group_names: true,\n    legend: {\n        Spaces: [\n            { key: 'space-available', name: 'Space Available' },\n            { key: 'space-requestable', name: 'Space available by request' },\n            { key: 'space-unavailable', name: 'Space in use' },\n            { key: 'space-not-bookable', name: 'Space not Bookable' },\n        ],\n        Desks: [\n            { key: 'desk-available', name: 'Desk Available' },\n            { key: 'desk-reserved', name: 'Desk Reserved' },\n            { key: 'desk-unavailable', name: 'Desk in use' },\n            { key: 'desk-not-bookable', name: 'Desk not bookable' },\n        ],\n        Zones: [\n            { key: 'zone-low', name: 'Low Zone Utilisation' },\n            { key: 'zone-medium', name: 'Medium Zone Utilisation' },\n            { key: 'zone-high', name: 'High Zone Utilisation' },\n        ],\n        Icons: [\n            {\n                key: 'icon-bin',\n                name: 'Bin',\n                icon: { type: 'icon', class: 'material-icons', content: 'delete' },\n            },\n        ],\n    },\n};\n\n/**\n * ROOT APPLICATION SETTINGS\n */\nconst app = {\n    name: 'VisitorKiosk',\n    title: 'Visitor Kiosk',\n    description: 'Kiosk UI written with Angular Framework',\n    short_name: 'KIOSK',\n    logo_light: {\n        type: 'img',\n        src: 'assets/logo-light.svg'\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg'\n    },\n    general,\n    home,\n    help,\n    booking,\n    space_display,\n    directory,\n    explore\n};\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/visitor-kiosk',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app,\n    mock: false,\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"184cb9d\",\n    \"hash\": \"184cb9d\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"184cb9d\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1628218513247\n};\n/* tslint:enable */\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPinData {\n    message: string;\n    fill: string;\n    stroke: string;\n    action?: () => void;\n}\n\n@Component({\n    selector: '[map-pin]',\n    template: `\n        <div\n            name=\"message\"\n            *ngIf=\"message && show_message\"\n            class=\"p-2 m-2 rounded bg-white text-gray-700 shadow\"\n        >\n            {{ message }}\n        </div>\n        <svg\n            *ngIf=\"show\"\n            name=\"pin\"\n            viewBox=\"0 0 380 560\"\n            [class.action]=\"action\"\n            (click)=\"action()\"\n        >\n            <g>\n                <path\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                    stroke-width=\"25\"\n                    d=\"M182.9,551.7c0,0.1,0.2,0.3,0.2,0.3S358.3,283,358.3,194.6c0-130.1-88.8-186.7-175.4-186.9\n            C96.3,7.9,7.5,64.5,7.5,194.6c0,88.4,175.3,357.4,175.3,357.4S182.9,551.7,182.9,551.7z M122.2,187.2c0-33.6,27.2-60.8,60.8-60.8\n            c33.6,0,60.8,27.2,60.8,60.8S216.5,248,182.9,248C149.4,248,122.2,220.8,122.2,187.2z\"\n                />\n            </g>\n        </svg>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                bottom: 0;\n                left: 50%;\n                width: 24rem;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                transform: translateX(-50%);\n                z-index: -1;\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            .action {\n                pointer-events: auto;\n            }\n\n            svg {\n                width: 2rem;\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translateY(-100%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translateY(0%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapPinComponent implements OnInit {\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#fff';\n    /** Action to perform when clicking pin */\n    public readonly action = this._details.action || null;\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(@Inject(MAP_FEATURE_DATA) private _details: MapPinData) {}\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapRadiusData {\n    message: string;\n    radius: number;\n    fill: string;\n    stroke: string;\n    last_seen?: number;\n    zoom: Observable<number>;\n}\n\n@Component({\n    selector: '[map-radius]',\n    template: `\n        <ng-container *ngIf=\"show && radius\" (window:resize)=\"updateRadius()\">\n            <div\n                class=\"center border-4 rounded-full border-dashed\"\n                [style.border-color]=\"stroke\"\n                [style.background-color]=\"fill + '40'\"\n                [style.width]=\"radius * zoom + 'px'\"\n                [style.height]=\"radius * zoom + 'px'\"\n            ></div>\n            <div\n                *ngIf=\"message && show_message\"\n                name=\"message\"\n                [style.top]=\"'-' + (radius / 2) * zoom + 'px'\"\n                class=\"p-2 m-2 rounded bg-white text-gray-700 shadow absolute top-0 whitespace-no-wrap flex flex-col\"\n            >\n                {{ message }}\n                <span *ngIf=\"last_seen\" class=\"text-xs\">\n                    Last updated: {{ last_seen_at }}\n                </span>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                height: 100%;\n                width: 100%;\n            }\n\n            [name='message'] {\n                transform: translate(-50%, -120%);\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translate(-50%, -220%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translate(-50%, -120%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapRadiusComponent implements OnInit {\n    public zoom = 1;\n    /** Size of the area marked by this component */\n    public radius = this._details.radius || 10;\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#e53935';\n\n    public readonly last_seen: number = this._details.last_seen || 0;\n\n    public get last_seen_at() {\n        return formatDistanceToNow(this.last_seen * 1000) + ' ago';\n    }\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapRadiusData,\n        private _el: ElementRef<HTMLElement>\n    ) {\n        this._details.zoom.subscribe((v) =>\n            Math.max(0.5, (this.zoom = v || 1))\n        );\n    }\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n\n    public ngAfterViewInit() {\n        this.updateRadius();\n    }\n\n    public updateRadius() {\n        const box = this._el.nativeElement.getBoundingClientRect();\n        if (!box.width) return setTimeout(() => this.updateRadius(), 300);\n        this.radius = Math.max(\n            64,\n            (this._details.radius || 10) * (box.width || 10)\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MapPolygonComponent } from './map-polygon.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    MapPolygonComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Injectable,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\n@Injectable()\nexport class CustomTooltipData<T = any> {\n    data: T;\n    close: () => void;\n    constructor(d) {\n        this.data = d.data;\n        this.close = d.close || (() => null);\n    }\n}\n\n@Component({\n    selector: '[customTooltip]',\n    template: `\n        <ng-content></ng-content>\n\n        <ng-template cdk-portal>\n            <div custom-tooltip class=\"relative\" [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'component'\">\n                    <ng-container\n                        *ngComponentOutlet=\"content; injector: injector\"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'html'\">\n                    <div [innerHTML]=\"content | sanitize\"></div>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <ng-container\n                        *ngTemplateOutlet=\"content; context: data\"\n                    ></ng-container>\n                </ng-container>\n            </div>\n        </ng-template>\n    `,\n})\nexport class CustomTooltipComponent<T = any>\n    extends BaseClass\n    implements OnChanges, OnDestroy {\n    /** Horizontal position of the rendered overlay */\n    @Input('xPosition') public x_pos: 'start' | 'center' | 'end';\n    /** Vertical position of the rendered overlay */\n    @Input('yPosition') public y_pos: 'top' | 'center' | 'bottom';\n    /** Content to render in the tooltip */\n    @Input() public content: TemplateRef<any> | Type<any> | string;\n    /** Data associated with the tooltip content */\n    @Input() public data: T;\n    /** Whether tooltip has a backdrop */\n    @Input() public backdrop = true;\n    /** Whether tooltip has a backdrop */\n    @Input() public hover = false;\n    /** Type of content to render */\n    public type: 'template' | 'component' | 'html' = 'template';\n\n    public injector: Injector;\n\n    private _overlay_ref: OverlayRef = null;\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('click') public readonly onClick = () => this.open();\n    @HostListener('mouseenter') public readonly onEnter = () =>\n        this.hover ? this.open() : '';\n    @HostListener('mouseleave') public readonly onLeave = () =>\n        this.hover ? this.close() : '';\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay,\n        private _injector: Injector\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        this._updateInjector();\n        if (\n            this._overlay_ref &&\n            (changes.x_pos || changes.y_pos || changes.content)\n        ) {\n            this.open();\n        }\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public open() {\n        this._updateType();\n        if (this._overlay_ref) this.close();\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            hasBackdrop: !!this.backdrop,\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withPositions([\n                    {\n                        originX: this.x_pos || 'end',\n                        originY:\n                            (this.y_pos === 'top'\n                                ? 'bottom'\n                                : this.y_pos == 'bottom'\n                                ? 'top'\n                                : this.y_pos) || 'bottom',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'top',\n                    },\n                ]),\n        });\n        this._overlay_ref.attach(this._portal);\n        if (this.backdrop) {\n            this.subscription(\n                'backdrop',\n                this._overlay_ref.backdropClick().subscribe(() => this.close())\n            );\n        }\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    private _updateType() {\n        this.type =\n            typeof this.content === 'string'\n                ? 'html'\n                : this.content instanceof TemplateRef\n                ? 'template'\n                : 'component';\n    }\n\n    private _updateInjector() {\n        this.injector = Injector.create({\n            providers: [\n                {\n                    provide: CustomTooltipData,\n                    useValue: { data: this.data, close: () => this.close() },\n                },\n            ],\n            parent: this._injector,\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        try {\n            if (!getViewer(this.viewer) || this.loading) {\n                return this.timeout('update_view', () => this.updateView());\n            }\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        try {\n            updateViewer(this.viewer, {\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                desired_center: this.center,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                updateViewer(this.viewer, {\n                    styles: this.styles,\n                    features: [],\n                    labels: this.labels,\n                    actions: this.actions,\n                    options: this.options,\n                });\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        if (!id || !this.viewer) return;\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPolygonData {\n    /** Name of the region */\n    name: string;\n    /** Color to display region in on overlay */\n    color: string;\n    /** Array of points that define the shape of the region */\n    points: [number, number][];\n    /**  */\n    ratio?: number;\n\n    data$?: Observable<MapPolygonData>;\n}\n\n@Component({\n    selector: '[map-polygon]',\n    template: `\n        <div polygon class=\"absolute w-full h-full center\">\n            <svg\n                [attr.viewBox]=\"\n                    '0 0 ' + width + padding + ' ' + height + padding\n                \"\n                [style.width]=\"width * (100 / scale) + '%'\"\n                [style.height]=\"height * (100 / scale) + '%'\"\n                class=\"center top-1/2 left-1/2\"\n            >\n                <polygon\n                    [attr.points]=\"points\"\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                />\n                <circle\n                    *ngFor=\"let point of point_list\"\n                    [attr.cx]=\"point[0] || 0\"\n                    [attr.cy]=\"point[1] || 0\"\n                    [attr.r]=\"4\"\n                    [style.stroke]=\"'#000'\"\n                    [style.fill]=\"'#fffd'\"\n                />\n            </svg>\n            <div\n                text\n                class=\"center top-1/2 left-1/2 text-shadow text-white text-xl text-center whitespace-pre-line\"\n            >\n                {{ name }}\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            polygon {\n                stroke-width: 4;\n            }\n            circle {\n                stroke-width: 2;\n            }\n\n            svg {\n                width: 100%;\n                height: 100%;\n            }\n\n            .center {\n                position: absolute;\n                transform: translate(-50%, -50%);\n            }\n\n            [text] {\n                width: 32rem;\n                max-width: 65vw;\n            }\n        `,\n    ],\n})\nexport class MapPolygonComponent extends BaseClass implements OnInit {\n    /** Message to display above the pin */\n    public name = this._details.name;\n    /** Fill colour for the pin SVG */\n    public fill = `${this._details.color || '#e53935'}88`;\n    /** Stroke colour for the pin SVG */\n    public stroke = this._details.color || '#e53935';\n\n    public padding = 32;\n\n    public scale = 8;\n\n    public offset_x = 0;\n    public offset_y = 0;\n    public width = 1;\n    public height = 1;\n\n    /** List of points for drawing the polygon */\n    public points = `0,0 0,${this.height} ${this.width},${this.height} ${this.width},0`;\n\n    public point_list: [number, number][] = [];\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapPolygonData,\n        private _cdr: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        if (this._details.data$) {\n            this.subscription(\n                'data',\n                this._details.data$.subscribe((_) => {\n                    this.name = _.name;\n                    this.fill = `${_.color || '#e53935'}88`;\n                    this.stroke = _.color || '#e53935';\n                    this.processPoints(_.points);\n                })\n            );\n        }\n        this.processPoints(this._details.points);\n    }\n\n    public processPoints(points: [number, number][]) {\n        const diff: HashMap<number> = points.reduce(\n            (m, [x, y]) => ({\n                x_min: x < m.x_min ? x : m.x_min,\n                x_max: x > m.x_max ? x : m.x_max,\n                y_min: y < m.y_min ? y : m.y_min,\n                y_max: y > m.y_max ? y : m.y_max,\n            }),\n            {\n                x_min: 100,\n                x_max: -100,\n                y_min: 100,\n                y_max: -100,\n            }\n        );\n        this.offset_x = diff.x_min * 100;\n        this.offset_y = diff.y_min * 100;\n        const range = {\n            x: diff.x_max - diff.x_min,\n            y: diff.y_max - diff.y_min,\n        };\n        this.width = range.x * 100 * this.scale;\n        this.height = range.y * 100 * (this._details?.ratio || 1) * this.scale;\n        const edge_padding = this.padding / 2 + 8;\n        this.width = Math.floor(this.width * 100) / 100;\n        this.height = Math.floor(this.height * 100) / 100;\n        this.points = points\n            .reduce(\n                (s, [x, y]) =>\n                    `${s}${s ? ' ' : ''}${\n                        ((x - diff.x_min) / range.x) * this.width + edge_padding\n                    },${\n                        ((y - diff.y_min) / range.y) * this.height +\n                        edge_padding\n                    }`,\n                ''\n            )\n            .replace(/NaN/g, '0');\n        this.point_list = points.map(([x, y]) => [\n            ((x - diff.x_min) / range.x) * this.width + edge_padding,\n            ((y - diff.y_min) / range.y) * this.height + edge_padding,\n        ]);\n        this.width = this.width + this.padding + 8;\n        this.height = this.height + this.padding + 8;\n        this._cdr.detectChanges();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { User } from '../../../users/src/lib/user.class';\n\n@Component({\n    selector: 'a-user-avatar',\n    template: `\n        <div\n            class=\"flex items-center justify-center rounded-full overflow-hidden border-2 border-white\"\n            *ngIf=\"user\"\n            [attr.user-id]=\"user.id\"\n        >\n            <div\n                initials\n                class=\"text-black text-opacity-50 uppercase\"\n                *ngIf=\"!user.photo; else image_state\"\n            >\n                {{ initials }}\n            </div>\n        </div>\n        <ng-template #image_state>\n            <img class=\"h-full w-full\" [src]=\"user.photo | safe: 'resource'\" />\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                height: 2.5em;\n                width: 2.5em;\n                background-color: #ccc;\n                overflow: hidden;\n                border: 2px solid white;\n            }\n\n            .initials {\n                font-size: 1em;\n            }\n        `,\n    ],\n})\nexport class UserAvatarComponent {\n    /** User to display avatar for */\n    @Input() public user: User;\n\n    public get initials(): string {\n        if (!this.user) return 'NA';\n        const parts = this.user.name\n            .replace(/[()[\\]\\-+=\\\\/]+/gi, '')\n            .split(' ');\n        return parts.length > 1\n            ? `${parts[0][0]}${parts[parts.length - 1][0]}`\n            : this.user.name.slice(0, 2);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.is_external) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { PlaceZone } from '@placeos/ts-client';\n\nexport class Desk {\n    /** ID of the desk also map_id */\n    public readonly id: string;\n    /** ID of the desk on the associated map */\n    public readonly map_id: string;\n    /** Name of the desk */\n    public readonly name: string;\n    /** Whether desk is available / bookable */\n    public readonly bookable: boolean;\n    /** Zone/Level of the desk */\n    public readonly zone: PlaceZone;\n    /** Group/Department allocated to the desk */\n    public readonly groups: string[];\n    /** QR code image data */\n    public readonly qr_code: string;\n\n    constructor(data: Partial<Desk> = {}) {\n        this.id = data.id || '';\n        this.map_id = data.map_id || data.id || '';\n        this.name = data.name || '';\n        this.bookable = data.bookable ?? false;\n        this.zone = data.zone || new PlaceZone();\n        this.groups = data.groups || [];\n        this.qr_code = data.qr_code || '';\n    }\n\n    public format() {\n        const { id, name, bookable, groups } = this;\n        return {\n            id,\n            name,\n            bookable,\n            groups,\n        };\n    }\n\n    public readonly toJSON = () => this.format();\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { Point } from '@placeos/svg-viewer';\nimport { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n","import { del, get, patch } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from './user.class';\nimport { Observable } from 'rxjs';\n\nconst GUEST_ENDPOINT = '/api/staff/v1/guests';\n\nexport interface GuestsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n}\n\n/**\n * Search guests\n * @param q Search string for filtering guests\n */\nexport function searchGuests(q: string): Observable<GuestUser[]> {\n    const query = toQueryString({ q });\n    return get(`${GUEST_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * List guests\n * @param q Parameters to pass to the API request\n */\nexport function queryGuests(q: GuestsQueryParams): Observable<GuestUser[]> {\n    const query = toQueryString({ ...q });\n    return get(`${GUEST_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * Get guest details\n * @param id ID of the guest\n */\nexport function showGuest(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Update guest metadata\n * @param id ID of the guest\n * @param data New metadata state\n */\nexport function updateGuest(id: string, data: Partial<GuestUser>) {\n    return patch(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, data).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Remove a guest\n * @param id ID of the guest to remove\n */\nexport function removeGuest(id: string) {\n    return del(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * List upcoming meetings for a guest\n * @param id ID of the guest\n */\nexport function listGuestMeetings(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}/meetings`).pipe(\n        map((list) => list.map((item) => new CalendarEvent(item)))\n    );\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n"],"sourceRoot":"webpack:///"}