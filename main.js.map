{"version":3,"sources":["./apps/workplace/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./apps/workplace/src/app/components/event-timeline/event-timeline.component.html","./apps/workplace/src/app/components/event-timeline/event-timeline.component.ts","./apps/workplace/src/app/components/global-search.component.ts","./apps/workplace/src/app/components/nav-menu.component.ts","./apps/workplace/src/app/components/shared.module.ts","./apps/workplace/src/app/components/topbar.component.ts","./apps/workplace/src/app/components/vertical-timeline/vertical-timeline.component.html","./apps/workplace/src/app/components/vertical-timeline/vertical-timeline.component.ts","./apps/workplace/src/app/overlays/map-locate-modal.component.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/index.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/components/src/lib/app.component.ts","./apps/workplace/src/app/app-routing.module.ts","./apps/workplace/src/app/overlays/overlays.module.ts","./apps/workplace/src/app/app.module.ts","./apps/workplace/src/environments/environment.prod.ts","./apps/workplace/src/main.ts","./libs/bookings/src/lib/desk-confirm-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/bookings/src/lib/desk.service.ts","./libs/calendar/src/lib/calendar.service.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/workplace/src/environments/settings.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/angular-animations.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/formatting.ts","./libs/common/src/lib/placeos.ts","./libs/common/src/lib/user-state.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/base.class.ts","./libs/common/src/lib/general.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/map-pin.component.ts","./libs/components/src/lib/map-radius.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/login.component.ts","./libs/components/src/lib/unauthorised.component.ts","./libs/components/src/lib/misconfigured.component.ts","./libs/components/src/lib/authorised-user.guard.ts","./libs/components/src/lib/components.module.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/components/src/lib/custom-tooltip.component.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/map-polygon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/user-avatar.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/events/src/lib/validators.ts","./libs/events/src/lib/utilities.ts","./libs/events/src/lib/event-form.service.ts","./libs/events/src/lib/event.class.ts","./libs/events/src/lib/events.fn.ts","./libs/events/src/lib/helpers.ts","./libs/explore/src/lib/explore-search.service.ts","./libs/explore/src/lib/explore.module.ts","./libs/explore/src/lib/explore-booking-modal.component.ts","./libs/explore/src/lib/explore-desk-info.component.ts","./libs/explore/src/lib/explore-desks.service.ts","./libs/explore/src/lib/explore-device-info.component.ts","./libs/explore/src/lib/explore-map-control.component.ts","./libs/explore/src/lib/explore-map-view.component.ts","./libs/explore/src/lib/explore-space-info.component.ts","./libs/explore/src/lib/explore-spaces.service.ts","./libs/explore/src/lib/explore-state.service.ts","./libs/explore/src/lib/explore-zones.service.ts","./libs/explore/src/lib/explore-zoom-control.component.ts","./libs/form-fields/src/lib/form-fields.module.ts","./libs/form-fields/src/lib/action-field.component.ts","./libs/form-fields/src/lib/counter.component.ts","./libs/form-fields/src/lib/date-field.component.ts","./libs/form-fields/src/lib/duration-field.component.ts","./libs/form-fields/src/lib/time-field.component.ts","./libs/form-fields/src/lib/user-list-field.component.ts","./libs/form-fields/src/lib/user-search-field.component.ts","./libs/organisation/src/lib/desk.class.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/users/src/lib/location.class.ts","./libs/users/src/lib/guests.fn.ts","./libs/users/src/lib/staff.fn.ts","./libs/users/src/lib/user.class.ts","./libs/users/src/lib/user.utilities.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","EventTimelineComponent","date","valueOf","duration","can_select","dateChange","durationChange","groupsChange","vertical","model","this","start","hour","minute","end","generateBlocks","updateTime","interval","now","tomorrow","add","startOf","timeout","updateStartEnd","Math","floor","diff","changes","groups","processGroups","updatePeriod","blocks","time","isBefore","push","format","display","short","divider","grp","blk_end","events","filter","i","event_time","isAfter","isSame","checkInUseBlocks","map","unavailable","event","hoursToDate","blk","find","t","timestamp","parts","split","period","start_time","today","move","block","emit","content","center","x","touches","length","clientX","y","clientY","content_box","nativeElement","getBoundingClientRect","percent_w","left","width","percent_h","top","height","percent","end_time","block_size","ceil","max","resetMove","GlobalSearchComponent","_service","results","search_results","loading","filter_str","setFilter","s","Object","NavMenuComponent","_settings","super","entered","value","post","clearTimeout","get","hidden","MATERIAL_MODULES","SharedComponentModule","TopbarComponent","location","href","logout","VerticalTimelineComponent","offset","endOf","timeline_start","timeline_end","show","disabled","minutes","active_move","off","active_start","active_length","setMove","MapLocateModalComponent","_data","item","style_map","level","processFeature","processStyles","styles","map_id","features","data","name","zoom","MOCK_MENU","unit_price","category","options","group","generateCateringOrder","differenceInMinutes","event_start","event_end","mx","event_id","invoice_number","charge_code","deliver_at","addMinutes","items","Array","fill","_","idx","quantity","MOCK_ORGS","created_at","updated_at","description","tags","count","capacity","parent_id","triggers","MOCK_BUILDINGS","levels","MOCK_LEVELS","bld","building","num","substr","endsWith","type","display_name","mockLevel","reduce","p","c","concat","MOCK_METADATA","current","contacts","details","email","first_name","last_name","ZONE_MOCKS","padString","str","path","metadata","method","callback","request","query_params","status","message","bindings","area_management","location_services","catering","route_params","generateMockDeskMetadata","body","DESK_FEATURES","desks","bookable","zone","lvl","registerMocks","DOMAIN","PREDEF_USERS","ACTIVE_USER","MOCK_STAFF","join","toLowerCase","MOCK_GUESTS","visit_expected","randomSpaceFeatures","f","numFeatures","res","el","r","indexOf","MOCK_SPACES","zones","d","EVENT_TIME","nextEventTime","save","next","unix","event_status","randomStatus","rnd","MOCK_EVENTS","index","PEOPLE","attendees","sort","a","b","space","resource","unshift","host","calendar","creator","response_status","title","private","timezone","all_day","recurring","recurrence","attachments","system","extension_data","setup","breakdown","event_spaces","forEach","USER_MOCKS","person","user","q","search","includes","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","checked_in","last_seen","subtract","geo","lat","lon","RoomModule","volume","connected","active","input_list","output_list","env_sources","inputs","outputs","source","key","console","log","input","output","$updateState","routes","following","state","mute","$mute","locked","Mic1","mod","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","overrides","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","bookings","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","setInterval","u","Date","bkn","pending","subSeconds","addSeconds","MockLocationServicesModule","overview","username","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","number","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","CaptureModule","live","remaining","clearInterval","$start","createCaptureModule","SYSTEM_MOCKS","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","createSystem","EVENT_MOCKS","zone_ids","period_start","period_end","new_event","findIndex","splice","CALENDAR_MOCKS","handleSpaceAvailability","systems","system_ids","has","setHours","startOfDay","getUnixTime","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","BOOKING_MOCKS","updateBooking","AppComponent","_tracing","_org","_spaces","_cache","_snackbar","_hotkey","_clipboard","listen","localStorage","setItem","getItem","reload","copy","navigator","clipboard","readText","tkn","addHours","setTimeout","initialised","pipe","first","toPromise","settings","mock","origin","catch","onInitError","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","is_logged_in","error","component","canActivate","canLoad","loadChildren","m","DashboardModule","BookModule","ExploreModule","ControlModule","DirectoryModule","AppScheduleModule","HelpModule","redirectTo","pathMatch","AppRoutingModule","useHash","SharedOverlaysModule","AppModule","provide","useValue","showDialog","deps","enabled","bootstrapModule","err","DeskConfirmModalComponent","can_set_date","reason","DeskQuestionsModalComponent","form","travelled","unwell","contact","markAllAsTouched","valid","failure","roundToNearestMinutes","nearestTo","booking_type","abs","Intl","DateTimeFormat","resolvedOptions","timeZone","isSameDay","BOOKINGS_ENDPOINT","queryBookings","query","list","showBooking","encodeURIComponent","saveBooking","createBooking","removeBooking","response_type","BOOKING_URLS","BookingFormService","_router","_dialog","_view","BehaviorSubject","_options","_form","_form_value","_booking","_loading","last_success","JSON","parse","sessionStorage","asObservable","shareReplay","assets","distinctUntilKeyChanged","switchMap","of","tap","asset","localeCompare","available_assets","combineLatest","debounceTime","zone_id","every","grouped_availability","asset_list","members","pop","subscription","subscribe","booking","url","clearForm","setOptions","getValue","booked_by","booked_by_id","booked_by_email","valueChanges","v","booker","patchValue","emitEvent","generateBookingForm","storeForm","newForm","removeItem","stringify","checkQuestions","icon","postForm","close","result","setView","ref","open","race","componentInstance","afterClosed","DesksService","error_on_host","levelWithID","success","desk_list","endOfDay","all","desk","makeDeskBooking","for_user","booking_data","CalendarService","_calendars","calendar_list","freeBusy","availability","init","load","_initialised","calendars","old_booking","Calendar","primary","summary","can_edit","starts_at","ends_at","CALENDAR_ENDPOINT","queryCalendars","queryCalendarAvailability","calendarsToSpaces","org","cal","querySpaceAvailability","querySpaceFreeBusy","CateringItem","discount_cap","accept_points","total_cost","options_string","CateringOrder","system_id","item_count","amount","getTime","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","window","addEventListener","mapKey","last_down","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","replace","non_meta","DEFAULT_SETTINGS","debug","composer","domain","route","protocol","port","use_domain","local_login","app","short_name","logo_light","src","logo_dark","general","menu_items","class","copyright","position","help","tiles","link","background","columns","booking_types","los_groups","ifs","deals","assurance","tax","consulting","ladies","it","capacity_filters","show_fields","html_body","multiple_spaces","desk_start","space_display","show_images","directory","show_avatars","min_search_length","explore","colors","can_select_building","show_legend_group_names","legend","Spaces","analytics","tracking_id","schedule","color","VERSION","SettingsService","_title","_app_name","_overrides","_subjects","_observables","built","semver","hash","getTitle","setTitle","pathname","slice","toUpperCase","application","override_settings","override","opacity","ANIMATION_SHOW_CONTRACT_EXPAND","_available","_activated","_timer","setNotifyOutlet","snackbar","notify","action","on_action","config","snackbar_ref","panelClass","dismiss","onAction","notifySuccess","msg","notifyError","notifyInfo","info","setupCache","cache","isEnabled","unsubscribe","available","activateUpdate","activated","checkForUpdate","formatRecurrence","pattern","charAt","setupPlace","hostname","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","_current_user","current_user","currentUser","jest","delay","retry","toQueryString","hasOwnProperty","BaseClass","_timers","_intervals","_subscriptions","destroy","unsub","fn","Function","contains","subs","k","setAppName","args","stream","force","app_name","getItemWithKeys","shift","unique","array","pos","arr","randomInt","random","openConfirmModal","dialog","csvToJson","csv","delimiter","objPattern","RegExp","arrMatches","arrData","exec","headers","row","element","downloadFile","filename","contents","document","createElement","setAttribute","style","appendChild","click","removeChild","flatten","an_array","stack","isArray","reverse","timePeriodsIntersect","start1","end1","start2","end2","seed","h","imul","charCodeAt","xmur3","rand","predictableRandomInt","timeFormatString","localeString","toLocaleTimeString","querySelector","getAttribute","language","is24HourTime","getInvalidFields","invalid","controls","ActionIconComponent","className","PopoutMenuComponent","actions","MapPinComponent","_details","stroke","show_message","MapRadiusComponent","_el","radius","formatDistanceToNow","updateRadius","box","StatusOverlayComponent","links","UnauthorisedComponent","MisconfiguredComponent","PLACEOS_APP_ACCESS","AuthorisedUserGuard","_access","checkUser","segments","can_activate","navigate","MAT_MODULES","ComponentsModule","CONFIRM_METADATA","maxHeight","maxWidth","ConfirmModalComponent","_dialog_ref","confirm_text","cancel_text","disableClose","enableClose","injector","CustomTooltipData","CustomTooltipComponent","_element","_overlay","_injector","backdrop","hover","_overlay_ref","onClick","onEnter","onLeave","_updateInjector","x_pos","y_pos","ngOnDestroy","_updateType","_portal","create","hasBackdrop","positionStrategy","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","attach","backdropClick","dispose","providers","parent","GlobalLoadingComponent","IconComponent","MAP_FEATURE_DATA","InteractiveMapComponent","injectors","_on_changes","updateDisplay","_feature_list","toArray","viewer","createView","focus","focusOn","labels","updateView","feature_list","desired_zoom","desired_center","_outlet_el","rect","mappings","w","MapPolygonComponent","_cdr","padding","scale","offset_x","offset_y","points","point_list","data$","processPoints","x_min","x_max","y_min","y_max","range","ratio","edge_padding","detectChanges","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","UserAvatarComponent","DEFAULT_KEYS","VirtualKeyboardComponent","keyset","onFocus","onBlur","blur","global","bottom","centerHorizontally","cursor_pos","selectionStart","dispatchEvent","InputEvent","updateKeyState","focusInput","selectionEnd","endInFuture","control","generateEventForm","organiser","resources","recurring_master_id","master","visitor_type","ext","needs_space","needs_parking","setValue","l","disable","setMinutes","days","EventFormService","_event","available_spaces","view","some","spaces","space_list","_default_user","setDefaultCreator","CalendarEvent","range_start","range_end","days_of_week","old_system","is_external","obj","hours","is_today","EVENTS_ENDPOINT","queryEvents","showEvent","saveEvent","toJSON","updateEvent","createEvent","removeEvent","eventStatus","DURATION_MAP","month","months","week","weeks","day","DEFAULT_RULES","auto_approve","stringToMinutes","addToDate","filterSpacesFromRules","rulemap","ruleset","checkRulesMatch","rules","rulesForSpace","matches","conditions","is_before","is_after","min_length","max_length","ExploreSearchService","_emergency_contacts","_filter","emergency_contacts","_user_search","search_fn","catchError","organisation","binding","contacts_map","bind","SharedExploreModule","ExploreBookingModalComponent","on_error","ExploreDeskInfoComponent","tries","parentElement","ngOnInit","parseInt","ExploreDesksService","_state","_bookings","_in_use","_desks","_reserved","_statuses","_poll","_desk_bookings","j","_bind","unsubWith","buildings","processBindingChange","_state_change","in_use","reserved","is_used","is_reserved","processDesks","enable_booking","devices","processDevices","updateStatus","colours","desk_id","setStyles","device","setFeatures","book_fn","confirmPost","setActions","ExploreDeviceInfoComponent","manufacturer","os","ssid","toFixed","diameter","bg_color","distance_color","overlay_ref","loadUser","onTouch","addSuffix","distance","execute","assigned_to","_dot","ExploreMapControlComponent","_route","building_list","active_building","active_levels","setLevel","relativeTo","queryParams","setBuilding","queryParamMap","params","ExploreMapViewComponent","_s","_zones","map_url","map_styles","positions","map_positions","map_features","map_actions","map_labels","toggleZones","locateSpace","locateUser","feature","locate_details","locations","priority","ExploreSpaceInfoComponent","DEFAULT_COLOURS","free","busy","unknown","ExploreSpacesService","handleBookingsChange","handleStatusChange","updateActions","updateHoverElements","full_size","bookSpace","ExploreStateService","_level","_positions","_styles","_features","_actions","_labels","_message","disable_features","disable_actions","disable_labels","style_mappings","text","disable_styles","level_list","levelsForBuilding","old_options","feature_map","actions_map","labels_map","ExploreZonesService","_location","_capacity","_draw","_points","parseData","zone_metadata","areas","area","properties","label_location","draw_polygon","geometry","coordinates","filled","area_id","ambient_temp","people_count","humidity","queue_size","z_index","setLabels","colour","getCenterPoint","ExploreZoomControlComponent","zoomIn","setPositions","min","zoomOut","reset","FormFieldsModule","ActionFieldComponent","show_tooltip","performAction","CounterComponent","step","ctrl_key","shift_key","new_value","_onChange","_onTouch","useExisting","multi","remove","FieldDateAdapter","displayFormat","FIELD_DATE_FORMATS","dateInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DateFieldComponent","_from","_to","toISOString","old_date","new_date","getHours","getMinutes","from","useClass","DurationFieldComponent","specialPreprops","duration_options","generateDurationOptions","option","TimeFieldComponent","no_past_times","show_select","_time_options","generateAvailableTimes","select_field","openedChange","datestamp","show_past","showSelect","$event","stopPropagation","UserListFieldComponent","limit","guests","hide_actions","new_user","user_list","active_list","validFn","test","emptyClick","openNewUserModal","search_user","a_user","target","file","files","reader","FileReader","readAsText","evt","processCsvData","srcElement","staff_id","internal_emails","phone","addUser","UserSearchFieldComponent","query_fn","search$","search_results$","search_str","cancelReset","blurInput","_input_el","active_user","resetSearchString","Desk","qr_code","BuildingLevel","Organisation","raw_data","Building","disc_info","discovery_info","extras","extra_id","extra_name","loan_items","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","_phone_numbers","phone_numbers","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl_features","level_id","catering_hours","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","OrganisationService","_buildings","_active_building","_levels","_building_settings","buildingSettings","bld_id","_organisation","id_list","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","auth","org_zone","prev","curr","SpaceSelectItemComponent","SpaceSelectModalComponent","space_types","filtered_spaces","multiple","space_map","SPACE_COUNT","generateMockSpace","linked","long_name","searchable","controlable","cost_hour","support_url","linked_rooms","image","Space","configurations","SpacesService","_list","_compare","loadSpaces","predicate","valid_spaces","sys","NewUserModalComponent","UserFormComponent","touched","MapLocation","searchGuests","STAFF_ENDPOINT","searchStaff","showStaff","User","notes","photo","organizer","required","sys_admin","support","assistance_required","GuestUser","preferred_beverage","accepted_terms_conditions","StaffUser","card_number","USER_DOMAIN","setInternalUserDomain","generateUserForm","fields"],"mappings":"iFAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,KAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,IAGRL,EAAyBQ,KAAO,IAAM,GACtCR,EAAyBG,QAAUH,EACnCA,EAAyBS,GAAK,KAC9BC,EAAOC,QAAUX,G,qICNG,kBACI,gBAAM,SAAe,QACzB,S,+BADU,yB,yBAFd,kBACI,wBAGJ,S,yBAHuB,+B,wCAWvB,kBAII,gFAEA,kBACJ,Q,4BAJI,mCAGiB,8BAAuB,sB,wBAE5C,kB,qBAGI,kDAAsD,4C,wCAG1D,kBAQI,kBAEI,6DAAqB,UAArB,CAA8B,wDACR,WACzB,QACD,kBAEI,6DAAqB,UAArB,CAA8B,wDACR,WACzB,QACD,kBAEI,6DAAqB,QAArB,CAA4B,wDACN,SACzB,QACL,Q,wBApBI,uDAA2D,+CAA3D,CAA2D,+CAA3D,CAA2D,kD,wCA0B/D,kBAAqC,2DAAS,WAC1C,gBAA0B,iBAAK,QACnC,S,yBAII,kBAMI,kBAAkB,SAAgB,QACtC,S,oCAJI,kDAAgE,6CAG9C,wB,yBAP1B,kBACI,wBAQJ,S,yBAN0B,oC,yBAXlC,kBACI,iBACI,kBAAkB,SAAc,QAChC,wBAGJ,QACA,iBACI,uBAUJ,QACJ,S,yBAnB6D,2BAEnC,uBACC,gCAKqB,oC,6BClBjD,Y,MAAMY,UAA+B,KAL5C,c,oBASoB,KAAAC,KAAO,IAAQC,UAEf,KAAAC,SAAW,GAEX,KAAAC,YAAa,EAIZ,KAAAC,WAAa,IAAI,MACjB,KAAAC,eAAiB,IAAI,MACrB,KAAAC,aAAe,IAAI,MAE7B,KAAAC,UAAW,EACX,KAAAC,MAAiC,GAIjC,WACHC,KAAKD,MAAME,MAAQ,EAAMD,KAAKT,MAAMW,KAAK,GAAGC,OAAO,IACnDH,KAAKD,MAAMK,IAAM,EAAMJ,KAAKT,MAAMW,KAAK,IAAIC,OAAO,IAClDH,KAAKK,iBACLL,KAAKM,aACLN,KAAKO,SAAS,QAAS,IAAMP,KAAKM,aAAc,KAChD,MAAME,EAAM,IACNC,EAAW,IAAQC,IAAI,EAAG,KAAKC,QAAQ,KAC7CX,KAAKY,QACD,cACA,KACIZ,KAAKa,iBACLb,KAAKO,SAAS,cAAe,IAAMP,KAAKa,iBAAkB,QAE9DC,KAAKC,MAAMN,EAASO,KAAKR,EAAK,OAI/B,YAAYS,GACXA,EAAQC,QACRlB,KAAKmB,iBAELF,EAAQ1B,MAAQ0B,EAAQxB,WACxBO,KAAKa,iBAIN,iBACHb,KAAKD,MAAME,MAAQ,EAAMD,KAAKT,MAAMW,KAAK,GAAGC,OAAO,IACnDH,KAAKD,MAAMK,IAAM,EAAMJ,KAAKT,MAAMW,KAAK,IAAIC,OAAO,IAClDH,KAAKoB,eACLpB,KAAKM,aAGF,iBACH,MACMF,EAAMJ,KAAKD,MAAMK,IACjBiB,EAA2B,GACjC,IAAK,IAAIC,EAAO,EAHFtB,KAAKD,MAAME,OAGKqB,EAAKC,SAASnB,GAAMkB,EAAOA,EAAKZ,IAAI,EAAG,KACjEW,EAAOG,KAAK,CACRrC,GAAImC,EAAKG,OAAO,SAChBC,QAASJ,EAAKG,OAAO,WACrBE,MAAOL,EAAKG,OAAO,QACnBvB,KAAwB,IAAlBoB,EAAKnB,SACXyB,QAASN,EAAKnB,SAAW,IAAO,IAGxCH,KAAKD,MAAMsB,OAASA,EAGjB,gBACHrB,KAAKY,QACD,UACA,KACIZ,KAAKD,MAAMmB,OAAS,GACpB,MAAM3B,EAAO,EAAMS,KAAKD,MAAME,OACxBG,EAAMJ,KAAKD,MAAMK,IACvB,IAAK,MAAMyB,KAAO7B,KAAKkB,QAAU,GAAI,CACjC,MAAMG,EAA2B,GACjC,IAAK,IAAIC,EAAO,EAAM/B,GAAO+B,EAAKC,SAASnB,GAAMkB,EAAOA,EAAKZ,IAAI,EAAG,KAAM,CACtE,MAAMoB,EAAU,EAAMR,GAAMZ,IAAI,EAAG,KACnC,IAAIqB,EAAS,GACTF,EAAIE,SACJA,EAASF,EAAIE,OAAOC,OAAQC,IACxB,MAAMC,EAAa,EAAMlC,KAAKT,MACzBW,KAAKY,KAAKC,MAAMkB,EAAEhC,QAClBE,OAAOW,KAAKC,MAAiB,GAAVkB,EAAEhC,MAAc,KACxC,OACKiC,EAAWC,QAAQb,EAAM,MACtBY,EAAWE,OAAOd,EAAM,OAC5BY,EAAWX,SAASO,EAAS,QAIzCT,EAAOG,KAAK,CACRrC,GAAImC,EAAKG,OAAO,SAChBM,WAGR/B,KAAKD,MAAMmB,OAAOM,KAAK,OAAD,wBAAMK,GAAG,CAAER,YAErCrB,KAAKqC,oBAET,IAID,mBACH,IAAKrC,KAAKD,MAAMsB,OACZ,OAEJ,MAAMA,EAA2BrB,KAAKD,MAAMsB,OAAOiB,IAAKL,GAAO,OAAD,wBACvDA,GAAC,CACJM,aAAa,KAEjB,IAAK,MAAMV,KAAO7B,KAAKD,MAAMmB,OACzB,IAAK,MAAMsB,KAASX,EAAIE,QAAU,GAAI,CAClC,MAAM9B,EAAQD,KAAKyC,YAAYD,EAAMvC,OAC/BG,EAAM,EAAMH,GAAOS,IAAI8B,EAAM/C,SAAU,KAC7C,IAAK,IAAI6B,EAAO,EAAMrB,GAAQqB,EAAKC,SAASnB,GAAMkB,EAAOA,EAAKZ,IAAI,EAAG,KAAM,CACvE,MAAMgB,EAAUJ,EAAKG,OAAO,SACtBiB,EAAMrB,EAAOsB,KAAMV,GAAMA,EAAE9C,KAAOuC,GACpCgB,IACAA,EAAIH,aAAc,IAKlCvC,KAAKD,MAAMsB,OAASA,EAGjB,YAAYC,GACf,IAAIsB,EAAI,IACHjC,QAAQ,KACRT,KAAKY,KAAKC,MAAMO,IAChBnB,OAAOW,KAAKC,MAAc,GAAPO,EAAa,KAErC,OADAsB,EAAIA,EAAEzC,OAAoC,EAA7BW,KAAKC,MAAM6B,EAAEzC,SAAW,IAC9ByC,EAGJ,WAAWC,GACd,MAAMC,EAAQD,EAAUE,MAAM,KAC9B,IAAIH,EAAI,IACHjC,QAAQ,KACRT,MAAM4C,EAAM,IACZ3C,QAAQ2C,EAAM,IAEnB,OADAF,EAAIA,EAAEzC,OAAoC,EAA7BW,KAAKC,MAAM6B,EAAEzC,SAAW,IAC9ByC,EAGJ,eACH,MAAM3C,EAAQ,EAAMD,KAAKT,MAAMoB,QAAQ,KACjCqC,EAAShD,KAAKD,MAAMK,IAAIY,KAAKhB,KAAKD,MAAME,MAAO,KAAO,GAC5DD,KAAKD,MAAMkD,WAAahD,EAAMe,KAAKhB,KAAKD,MAAME,MAAO,KAAO,GAAK+C,EACjEhD,KAAKD,MAAMN,SAAWO,KAAKP,SAAW,GAAKuD,EAGxC,aACH,MAAM/C,EAAQ,IAAQU,QAAQ,KACxBqC,EAAShD,KAAKD,MAAMK,IAAIY,KAAKhB,KAAKD,MAAME,MAAO,KAAO,GAC5DD,KAAKD,MAAMmD,MAAQjD,EAAMe,KAAKhB,KAAKD,MAAME,MAAO,KAAO,GAAK+C,EAGzD,YACHhD,KAAKD,MAAMoD,KAAO,GAGf,QAAQA,GACXnD,KAAKD,MAAMoD,KAAOA,EAGf,QAAQC,GACX,IAAKA,EACD,OAEJ,MAAMN,EAAQM,EAAMjE,GAAG4D,MAAM,KACvBzB,EAAO,EAAMtB,KAAKT,MACnBW,MAAM4C,EAAM,IACZ3C,QAAQ2C,EAAM,IACnB9C,KAAKT,KAAO+B,EAAK9B,UACjBQ,KAAKL,WAAW0D,KAAKrD,KAAKT,MAC1BS,KAAKoB,eAGF,KAAKrC,GACRiB,KAAKY,QACD,OACA,KACI,GAAIZ,KAAKD,MAAMoD,MAAQnD,KAAKsD,QAAS,CACjC,MAAMC,EAAS,CACXC,EACIzE,EAAE0E,SAAW1E,EAAE0E,QAAQC,OAAS,GAC1B3E,EAAE0E,QAAQ,GAAGE,SACb5E,EAAE4E,QACZC,EACI7E,EAAE0E,SAAW1E,EAAE0E,QAAQC,OAAS,GAC1B3E,EAAE0E,QAAQ,GAAGI,SACb9E,EAAE8E,SAEVC,EAAc9D,KAAKsD,QAAQS,cAAcC,wBACzCC,GAAaV,EAAOC,EAAIM,EAAYI,MAAQJ,EAAYK,MACxDC,GAAab,EAAOK,EAAIE,EAAYO,KAAOP,EAAYQ,OACvDC,EAAWvE,KAAKF,SAAuBsE,EAAZH,EAE3BhB,EAAajD,KAAKD,MAAME,MAAMC,OAASF,KAAKD,MAAME,MAAME,SAAW,GACnEqE,EAAWxE,KAAKD,MAAMK,IAAIF,OAASF,KAAKD,MAAMK,IAAID,SAAW,GAE7DsE,EAAa,GACbvE,EACFY,KAAK4D,OAHSF,EAAWvB,GAGFsB,EAAUtB,IAAe,GAAKwB,KACpD,GAAKA,GACV,GAAwB,QAApBzE,KAAKD,MAAMoD,KAAgB,CAC3B,IAAI5D,EAAO,EAAMS,KAAKT,MACtB,MAAMa,EAAM,EAAMJ,KAAKT,MAClBW,KAAKY,KAAKC,MAAMb,IAChBC,OAAOW,KAAKC,MAAc,GAAPb,EAAa,KACrC,GAAIE,EAAIgC,OAAO7C,EAAM,MAAQa,EAAImB,SAAShC,EAAM,KAC5CA,EAAO,EAAMa,GAAKM,KAAKV,KAAKP,SAAU,KACtCO,KAAKT,KAAOA,EAAKC,cACd,CACH,MAAMC,EAAWqB,KAAKC,MAAMX,EAAIY,KAAKzB,EAAM,MAC3CS,KAAKP,SAAWqB,KAAK6D,IAAI,GAAIlF,GAAYgF,GACzCzE,KAAKJ,eAAeyD,KAAKrD,KAAKP,gBAE/B,GAAwB,UAApBO,KAAKD,MAAMoD,KAAkB,CACpC,MAAM5D,EAAO,EAAMS,KAAKT,MACnBW,KAAKY,KAAKC,MAAMb,IAChBC,OAAOW,KAAKC,MAAc,GAAPb,EAAa,KACrCF,KAAKT,KAAOA,EAAKC,UAErBQ,KAAKL,WAAW0D,KAAKrD,KAAKT,MAC1BS,KAAKoB,iBAGb,K,0EA3OC9B,KAAsB,GAAtBA,I,2BAAAA,EAAsB,uD,GAAA,K,wqCD/CnC,eACI,iBAAmB,kCAAkB,EAAAsF,cAAW,QAA7B,CAA8B,6BAAoB,EAAAA,cAAW,SAC5E,iBACI,iBACA,iBACI,uBAKJ,QACJ,QACJ,QACA,iBACI,iBACI,iBACA,mBAA2B,qCAAa,EAAAzB,KAAA,IAAb,CAA0B,+BAAc,EAAAA,KAAA,KAC/D,wBAQA,yBAMA,yBAwBJ,QACJ,QACA,yBAoBJ,QACJ,S,MA9EK,iDAKmD,qDAcpB,qDAQf,uCAMA,oCAwBoB,uD,6qICVlC,I,6JC1BK,yB,KAAqC,qB,sBASjC,yBAII,8BACJ,S,8HACA,yBAII,gBASI,kBACI,kBACI,SACJ,QACA,kBACI,SACJ,QACJ,QACA,kBAGI,SACJ,QACJ,QACJ,S,yBAzBI,iBAGI,wCAA2B,gEAUnB,+BAGA,sCAMJ,gC,yBA/BhB,SACI,+B,iBAMA,gC,kCA4BJ,S,2BAjCS,mEAMkB,+DAuDhC,Y,MAAM0B,EAWT,YAAoBC,GAAA,KAAAA,WAVJ,KAAAC,QAAU/E,KAAK8E,SAASE,eACxB,KAAAC,QAAUjF,KAAK8E,SAASG,QAEjC,KAAAC,WAAa,GAEJ,KAAAC,UAAaC,GACzBA,aAAaC,OACNrF,KAAKkF,WAAa,GACnBlF,KAAK8E,SAASK,UAAUC,I,6CATzBP,GAAqB,c,wBAArBA,EAAqB,y6B,GAAA,MArF1B,iBAII,sBAA2B,kBAAM,QACjC,qBAII,0DAAwB,mCACP,EAAAM,UAAA,KALrB,QASA,+B,iBACA,mBAKJ,QACA,mCACI,kC,kBAoCJ,S,kCAjDQ,uCAAwB,oBAAxB,CAAwB,gCAKd,4CAQC,kE,8kBA+DpB,I,qKCjFK,eASI,iBAII,sBACA,iBAQI,SACJ,QACJ,QACJ,S,mCApBI,gCAA8B,oBAD9B,wCAOI,yCAEU,8BAIN,kCAAuB,oBAAvB,CAAuB,2BAAvB,CAAuB,qBAKvB,gCAyCjB,Y,MAAMG,UAAyB,KAclC,YAAoBC,GAChBC,QADgB,KAAAD,YAEhBvF,KAAKyF,UAfT,aACI,OAAOzF,KAAKuF,UAAUG,MAAM,aAGhC,WAAkBA,GACd1F,KAAKuF,UAAUI,KAAK,YAAaD,GACjC1F,KAAK4F,aAAa,WAGtB,iBACI,OAAO5F,KAAKuF,UAAUM,IAAI,2BAA6B,GAQpD,UACH7F,KAAK8F,QAAS,EACd9F,KAAKY,QAAQ,UAAW,IAAOZ,KAAK8F,QAAS,EAAO,M,6CArB/CR,GAAgB,c,wBAAhBA,EAAgB,s/BApErB,iBACA,iBAEI,8CAAuB,EAAAG,UAAY,KAEnC,sBA0BJ,QACA,oBAGI,qDAEA,oBACI,SACJ,QACJ,S,MAhCyB,uCA8BjB,kE,udA8BT,I,0WCzCP,MASMM,EAA0B,CAC5B,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MAqBG,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAhBA,CACL,KACA,cAAsB,IACtB,KACA,KACA,KACA,QACGD,GAIH,KACA,KAlCJ,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,Q,GAqBG,I,oMCjEK,gBAMI,kBACJ,S,qBAJI,+BAG0B,0D,yBAE9B,cAA+B,SAAW,S,qBAAX,yB,yBAQ/B,kBAKI,4BAIA,kBACI,kBAAqB,SAAe,QACpC,kBAAgC,SAAgB,QACpD,QACJ,S,qBANQ,8BAGqB,4BACW,8B,yBAShC,mBAII,SACJ,S,+BADI,2B,yBALR,SACI,yBAMJ,S,yBAJS,0B,sDARb,kBAKI,iCAQJ,S,qBARoC,qD,qBA6BpC,4BAKL,Y,MAAME,EAoBT,YAAoBV,GAAA,KAAAA,YAhBpB,WACI,OAAOvF,KAAKuF,UAAUM,IAAI,iBAG9B,YACI,OAAO7F,KAAKuF,UAAUG,MAAM,cAGhC,WACI,OAAO,UAGX,cACI,OAAO,KAKJ,UACH,WACAQ,SAASC,KAAO,W,6CAxBXF,GAAe,c,wBAAfA,EAAe,kxC,GAAA,MAzEpB,iBAII,qBAQA,sBACA,2BAKJ,QACA,2BACI,uBAcA,uBAcA,oBAAsB,gCAAS,EAAAG,WAC3B,iBACI,uBAA0B,mBAAM,QAChC,gBAAK,mBAAM,QACf,QACJ,QACA,mBAII,gBACI,uBAAS,cAAG,UAAkB,QAClC,QACA,mBACI,U,kCAEJ,QACJ,QACJ,QACA,6C,kCA3DS,8BAIA,+BAAa,cAGd,8BAAa,uBAQZ,8BAcA,8BAsBe,gCAGZ,+G,qFAWb,I,yJCjFS,kBAAoC,SAAkB,S,+BAAlB,2B,yBADxC,kBACI,wBACJ,S,yBADuB,+B,wBAIvB,kB,yBAGI,4BAA+B,cAA/B,CAA+B,sBAA/B,CAA+B,8BCaxC,Y,MAAMC,UAAkC,KAL/C,c,oBAqBW,KAAAC,OAAS,CAAE9C,EAAG,EAAGI,EAAG,GAGV,KAAAjE,WAAa,IAAI,MACjB,KAAAC,eAAiB,IAAI,MACrB,KAAAC,aAAe,IAAI,MAK7B,WACHG,KAAKK,iBAGF,YAAYY,GACXA,EAAQC,QACRlB,KAAKqC,oBAELpB,EAAQ1B,MAAQ0B,EAAQxB,WACxBO,KAAKa,iBAKb,qBACI,OAAO,EAAMb,KAAKT,MAAMoB,QAAQ,KAIpC,mBACI,OAAO,EAAMX,KAAKT,MAAMgH,MAAM,KAG3B,iBACHvG,KAAKqB,OAAS,GACd,MAAMpB,EAAQD,KAAKwG,eACbpG,EAAMJ,KAAKyG,aACXjG,EAAM,IACZ,IAAK,IAAIc,EAAOrB,EAAOqB,EAAKC,SAASnB,EAAK,KAAMkB,EAAOA,EAAKZ,IAAI,EAAG,KAC/DV,KAAKqB,OAAOG,KAAK,CACbrC,GAAImC,EAAKG,OAAO,SAChBC,QAASJ,EAAKG,OAAO,SACrBvB,KAAwB,IAAlBoB,EAAKnB,SACXuG,KAAMpF,EAAKnB,SAAW,IAAO,EAC7BwG,SAAUrF,EAAKC,SAASf,EAAK,OAGrCR,KAAKqC,mBAGT,cACI,MAAM9C,EAAO,EAAMS,KAAKT,MAClBa,EAAM,EAAMJ,KAAKT,MAAMmB,IAAIV,KAAKP,SAAU,KAC1CA,GAAW,OAAe,CAAEmH,QAAS5G,KAAKP,WAChD,MAAO,GAAGF,EAAKkC,OAAO,gBAAgBrB,EAAIqB,OAAO,eAAehC,KAG7D,KAAKV,GACRiB,KAAKY,QACD,OACA,KACI,GAAIZ,KAAK6G,aAAe7G,KAAKoD,MAAO,CAChC,MAAMG,EAAS,CACXC,EACIzE,EAAE0E,SAAW1E,EAAE0E,QAAQC,OAAS,GAC1B3E,EAAE0E,QAAQ,GAAGE,SACb5E,EAAE4E,QACZC,EACI7E,EAAE0E,SAAW1E,EAAE0E,QAAQC,OAAS,GAC1B3E,EAAE0E,QAAQ,GAAGI,SACb9E,EAAE8E,SAEViD,EAA2B,WAArB9G,KAAK6G,YAA2B,CAAErD,EAAG,EAAGI,EAAG,GAAM5D,KAAKsG,OAC5DxC,EAAc9D,KAAKoD,MAAMW,cAAcC,wBAGvCO,GADahB,EAAOK,EAAIkD,EAAIlD,EAAIE,EAAYO,KAAOP,EAAYQ,OAG/DrB,EACFjD,KAAKwG,eAAetG,OAASF,KAAKwG,eAAerG,SAAW,GAC1DqE,EAAWxE,KAAKyG,aAAavG,OAASF,KAAKyG,aAAatG,SAAW,GAEnEsE,EAAa,GACbvE,EACFY,KAAK4D,OAHSF,EAAWvB,GAGFsB,EAAUtB,IAAe,GAAKwB,KACpD,GAAKA,GACV,GAAyB,WAArBzE,KAAK6G,YAA0B,CAC/B,IAAItH,EAAO,EAAMS,KAAKT,MACtB,MAAMa,EAAM,EAAMJ,KAAKT,MAClBW,KAAKY,KAAKC,MAAMb,IAChBC,OAAOW,KAAKC,MAAc,GAAPb,EAAa,KACrC,GAAIE,EAAIgC,OAAO7C,EAAM,MAAQa,EAAImB,SAAShC,EAAM,KAC5CA,EAAO,EAAMa,GAAKM,KAAKV,KAAKP,SAAU,KACtCO,KAAKT,KAAOA,EAAKC,cACd,CACH,MAAMC,EAAWqB,KAAKC,MAAMX,EAAIY,KAAKzB,EAAM,MAC3CS,KAAKP,SAAWqB,KAAK6D,IAAI,GAAIlF,GAAYgF,GACzCzE,KAAKJ,eAAeyD,KAAKrD,KAAKP,gBAE/B,GAAyB,QAArBO,KAAK6G,YAAuB,CACnC,MAAMtH,EAAO,EAAMS,KAAKT,MACnBW,KAAKY,KAAKC,MAAMb,IAChBC,OAAOW,KAAKC,MAAc,GAAPb,EAAa,KACrCF,KAAKT,KAAOA,EAAKC,UAErBQ,KAAKL,WAAW0D,KAAKrD,KAAKT,MAC1BS,KAAKa,mBAGb,IAWD,QAAQsC,GACXnD,KAAK6G,YAAc1D,EAGhB,mBACH,IAAKnD,KAAKqB,SAAWrB,KAAKkB,OACtB,OAEJ,MAAMG,EAASrB,KAAKqB,OAAOiB,IAAKL,GAAO,OAAD,wBAC/BA,GAAC,CACJM,aAAa,KAEjB,IAAK,MAAMV,KAAO7B,KAAKkB,OACnB,IAAK,MAAMsB,KAASX,EAAIE,QAAU,GAAI,CAClC,MAAM9B,EAAQD,KAAKyC,YAAYD,EAAMvC,OAC/BG,EAAM,EAAMH,GAAOS,IAAI8B,EAAM/C,SAAU,KAC7C,IAAK,IAAI6B,EAAO,EAAMrB,GAAQqB,EAAKC,SAASnB,GAAMkB,EAAOA,EAAKZ,IAAI,EAAG,KAAM,CACvE,MAAMgB,EAAUJ,EAAKG,OAAO,SACtBiB,EAAMrB,EAAOsB,KAAMV,GAAMA,EAAE9C,KAAOuC,GACpCgB,IACAA,EAAIH,aAAc,IAKlCvC,KAAKqB,OAASA,EAGX,YAAYC,GACf,IAAIsB,EAAI,IACHjC,QAAQ,KACRT,KAAKY,KAAKC,MAAMO,IAChBnB,OAAOW,KAAKC,MAAc,GAAPO,EAAa,KAErC,OADAsB,EAAIA,EAAEzC,OAAoC,EAA7BW,KAAKC,MAAM6B,EAAEzC,SAAW,IAC9ByC,EAGJ,iBACH5C,KAAKoB,eAGF,YACHpB,KAAK6G,YAAc,GAGhB,eACH,MAAM5G,EAAQ,EAAMD,KAAKT,MAAMoB,QAAQ,KACjCqC,EAAShD,KAAKyG,aAAazF,KAAKhB,KAAKwG,eAAgB,KAAO,GAClExG,KAAK+G,aAAe9G,EAAMe,KAAKhB,KAAKwG,eAAgB,KAAO,GAAKxD,EAChEhD,KAAKgH,cAAgBhH,KAAKP,SAAW,GAAKuD,G,0EAzLrCqD,KAAyB,GAAzBA,I,2BAAAA,EAAyB,0D,GAAA,M,wxBDxBtC,iBAAsB,kCAAkB,EAAAzB,cAAW,QAA7B,CAA8B,6BAAoB,EAAAA,cAAW,SAC/E,iBAAqB,qCAAa,EAAAzB,KAAA,IAAb,CAA0B,+BAAc,EAAAA,KAAA,KACzD,iBACI,uBAGJ,QACA,mBACI,uBAQA,mBAMI,iBAAmB,oCAAa,EAAA8D,QAAQ,QAArB,CAA4B,+BAAe,EAAAA,QAAQ,SAClE,UACJ,QACA,mBAEI,oCAAa,EAAAA,QAAQ,QAArB,CAA4B,+BACd,EAAAA,QAAQ,SACzB,QACD,mBAEI,oCAAa,EAAAA,QAAQ,WAArB,CAA+B,+BACjB,EAAAA,QAAQ,YACzB,QACL,QACJ,QACJ,QACJ,S,MAnC8C,mCAOb,mCASjB,6CAAsC,kCAIlC,oC,o9DCCb,I,oKCDC,iBAKI,mBAKI,yBACJ,QACA,iBAGI,SACJ,QACJ,S,qBAXQ,qCAAoB,qBAApB,CAAoB,uBASpB,yDAoBT,Y,MAAMC,UAAgC,KAczC,YAA6CC,GACzC3B,QADyC,KAAA2B,QAZ5B,KAAA3E,MAAQ,IAAI,MAEtB,KAAA4E,KAAkBpH,KAAKmH,MAAMC,KAI7B,KAAAC,UAA0B,GAEjC,YACI,OAAOrH,KAAKoH,KAAKE,MAOd,WACHtH,KAAKuH,iBACLvH,KAAKwH,gBAGF,gB,MACH,MAAMC,EAAuB,IAChB,QAAT,EAAAzH,KAAKoH,YAAI,eAAEM,UACXD,EAAO,UAAY,CAAE/F,QAAS,QAC9B+F,EAAO,UAAY,CAAE/F,QAAS,SAElC1B,KAAKqH,UAAYI,EAId,iBACH,IAAKzH,KAAKoH,KAAM,OAAO,KASvBpH,KAAK2H,SAAW,CARF,CACVzB,SAAUlG,KAAKoH,KAAKM,OACpBpE,QAAS,KACTsE,KAAM,CACFC,KAAM7H,KAAKoH,KAAKS,MAEpBC,KAAM,O,6CAzCLZ,GAAuB,MAcZ,Q,wBAdXA,EAAuB,4jBAvC5B,oBACI,oBAAU,iBAAK,QACf,gBAAiB,SAAe,QACpC,QACA,uBAkBA,oBAGI,oBACI,mBACJ,QACJ,S,MA1BqB,4BAKhB,iC,2GAgCN,I,wRCvDA,MAAMa,EAAY,CACrB,CACI5I,GAAI,SACJ0I,KAAM,SACNG,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAE/I,GAAI,QAAS0I,KAAM,YAAaM,MAAO,QACzC,CAAEhJ,GAAI,QAAS0I,KAAM,QAASM,MAAO,QACrC,CAAEhJ,GAAI,QAAS0I,KAAM,UAAWM,MAAO,SAAUH,WAAY,IAC7D,CAAE7I,GAAI,QAAS0I,KAAM,UAAWM,MAAO,SAAUH,WAAY,IAC7D,CAAE7I,GAAI,QAAS0I,KAAM,UAAWM,MAAO,SAAUH,WAAY,IAC7D,CAAE7I,GAAI,QAAS0I,KAAM,UAAWM,MAAO,SAAUH,WAAY,MAGrE,CACI7I,GAAI,SACJ0I,KAAM,OACNG,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAE/I,GAAI,QAAS0I,KAAM,QAASM,MAAO,QACrC,CAAEhJ,GAAI,QAAS0I,KAAM,UAAWM,MAAO,QACvC,CAAEhJ,GAAI,QAAS0I,KAAM,OAAQM,MAAO,QACpC,CAAEhJ,GAAI,QAAS0I,KAAM,YAAaM,MAAO,UAGjD,CAAEhJ,GAAI,SAAU0I,KAAM,QAASG,WAAY,IAAKC,SAAU,UAC1D,CACI9I,GAAI,SACJ0I,KAAM,SACNG,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAE/I,GAAI,QAAS0I,KAAM,YAAaM,MAAO,QACzC,CAAEhJ,GAAI,QAAS0I,KAAM,SAAUM,MAAO,QACtC,CAAEhJ,GAAI,QAAS0I,KAAM,YAAaM,MAAO,UAGjD,CACIhJ,GAAI,SACJ0I,KAAM,UACNG,WAAY,IACZC,SAAU,SACVC,QAAS,CACL,CAAE/I,GAAI,QAAS0I,KAAM,YAAaM,MAAO,QACzC,CAAEhJ,GAAI,QAAS0I,KAAM,YAAaM,MAAO,QACzC,CAAEhJ,GAAI,QAAS0I,KAAM,YAAaM,MAAO,UAGjD,CACIhJ,GAAI,SACJ0I,KAAM,eACNG,WAAY,IACZC,SAAU,eACVC,QAAS,CACL,CACI/I,GAAI,QACJ0I,KAAM,eACNM,MAAO,QACPH,WAAY,IAEhB,CAAE7I,GAAI,QAAS0I,KAAM,YAAaM,MAAO,QAASH,WAAY,IAC9D,CACI7I,GAAI,QACJ0I,KAAM,gBACNM,MAAO,QACPH,WAAY,IAEhB,CACI7I,GAAI,QACJ0I,KAAM,qBACNM,MAAO,QACPH,WAAY,MAIxB,CACI7I,GAAI,SACJ0I,KAAM,WACNG,WAAY,IACZC,SAAU,eACVC,QAAS,CACL,CAAE/I,GAAI,QAAS0I,KAAM,eAAgBM,MAAO,QAC5C,CAAEhJ,GAAI,QAAS0I,KAAM,UAAWM,MAAO,QACvC,CAAEhJ,GAAI,QAAS0I,KAAM,cAAeM,MAAO,WAKhD,SAASC,EAAsB5F,GAClC,MAAM/C,GAAW,EAAA4I,EAAA,GAAoB7F,EAAM8F,YAAa9F,EAAM+F,WACxDC,GAAK,QAAqBT,EAAUrE,QAC1C,MAAO,CACHvE,GAAI,UAAS,QAAqB,UAClCsJ,SAAUjG,EAAMrD,GAChBuJ,eAAgB,KAAI,QAAqB,UACzCC,YAAa,KAAI,QAAqB,QACtCC,YAAY,EAAAC,EAAA,GACY,IAApBrG,EAAM8F,YAC2C,GAAjD,QAAqBxH,KAAKC,MAAMtB,EAAW,KAE/CqJ,MAAO,IAAIC,MAAM,GAAGC,KAAK,GAAG1G,IAAI,CAAC2G,EAAGC,IAAS,OAAD,wBACrCnB,EAAWS,EAAKU,EAAOnB,EAAUrE,SAAO,CAC3CwE,QAAS,GACTiB,UAAU,QAAqB,GAAI,OC5GxC,MAAMC,EAAY,CACrB,CACIC,WAAY,WACZC,WAAY,WACZzB,KAAM,UACN0B,YAAa,GACbC,KAAM,MACNC,MAAO,EACPC,SAAU,EACVC,UAAW,GACXC,SAAU,GACVzK,GAAI,qBAIC0K,EAAiB,CAC1B,CACIhC,KAAM,SACN0B,YAAa,GACbC,KAAM,WACNC,MAAO,EACPC,SAAU,EACVC,UAAW,mBACXC,SAAU,GACVzK,GAAI,SACJ2K,OAAQ,CAAC,SAAU,WAEvB,CACIjC,KAAM,WACN0B,YAAa,GACbC,KAAM,WACNC,MAAO,EACPC,SAAU,EACVC,UAAW,mBACXC,SAAU,GACVzK,GAAI,SACJ2K,OAAQ,CAAC,QAAS,WA4BbC,EAAcF,EAAevH,IAAK0H,GAC3CA,EAAIF,OAAOxH,IAAI,CAACgF,EAAO4B,IAzBT,EACd/J,EACA+J,EACAe,EACAC,EAAc,MAEd,IAAIxC,EAASvI,EAAGgL,OAAO,GAEvB,OADAzC,EAAS,qBAAqBwC,QACvB,CACH/K,GAAI,GAAG8K,EAAS9K,MAAMA,IACtB0I,KAAM,SAAS1I,EAAGiL,SAAS,MAAQ,IAAMjL,EAAG4D,MAAM,KAAK,KACvD4G,UAAWM,EAAS9K,GACpBoK,YAAa,GACbC,KAAM,QACN9B,SACAzI,KAAM,gBACNoL,KAAM,cACNZ,MAAO,EACPC,SAAU,GACVxD,SAAU,oBACVoE,aAAc,KAMdC,CAAUjD,EAAO4B,EAAKc,GAAM1C,EAAMvE,MAAM,KAAK,MAEnDyH,OAAO,CAACC,EAAGC,IAAMD,EAAEE,OAAOD,GAAI,IC/D1BE,EAAgB,CAClBC,QAAS,CACLC,SAAU,CACNjD,KAAM,WACN0B,YAAa,GACbwB,QAAS,CACL,CACI5L,GAAI,SACJ0I,KAAM,+BACNmD,MAAO,iBACPC,WAAY,WACZC,UAAW,aAEf,CACI/L,GAAI,SACJ0I,KAAM,0BACNmD,MAAO,kBACPC,WAAY,OACZC,UAAW,gBAOlBC,EAEb,WAiBI,SAASC,EAAUC,EAAsB3H,EAAiB,GAEtD,IADA2H,EAAM,GAAGA,IACFA,EAAI3H,OAASA,GAAQ2H,EAAM,IAAIA,IACtC,OAAOA,GAnBX,SAAqB,CACjBC,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAkC,QAA9BA,EAAQC,aAAanC,KACrB,OAAOJ,EACJ,GAAkC,aAA9BsC,EAAQC,aAAanC,KAC5B,OAAOK,EACJ,GAAkC,UAA9B6B,EAAQC,aAAanC,KAC5B,OAAOO,EAEX,KAAM,CAAE6B,OAAQ,IAAKC,QAAS,uBAUtC,SAAqB,CACjBP,KAAM,8BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAkC,aAA9BA,EAAQC,aAAa9D,KACrB,MAAO,CACHiE,SAAU,CACNf,QAAS,CACLgB,gBAAiB,UACjBC,kBAAmB,aAKnC,GAAkC,aAA9BN,EAAQC,aAAa9D,KACrB,MAAO,CACHoE,SAAU,CACNlB,QAAShD,IAIrB,GAAkC,UAA9B2D,EAAQC,aAAa9D,KAAkB,CACvC,MAAM/E,EAAQ4I,EAAQQ,aAAa/M,GAAG4D,MAAM,KAE5C,OAAOoJ,EADIrJ,EAAMA,EAAMY,OAAS,IAGpC,OACIkH,EAAcc,EAAQQ,aAAa/M,KACnCyL,EAAcc,EAAQQ,aAAa/M,IAC/BuM,EAAQC,aAAa9D,MAGlB+C,EAAcc,EAAQQ,aAAa/M,IAE1CyL,EAAcc,EAAQQ,aAAa/M,MAClCuM,EAAQC,aAAa9D,MAEf+C,EAAcc,EAAQQ,aAAa/M,KAEvC,OAIf,SAAqB,CACjBmM,KAAM,8BACNC,SAAU,GACVC,OAAQ,QACRC,SAAWC,IACFd,EAAcc,EAAQQ,aAAa/M,MACpCyL,EAAcc,EAAQQ,aAAa/M,IAAM,IAC7CyL,EAAcc,EAAQQ,aAAa/M,IAAIuM,EAAQU,KAAKvE,MAChD6D,EAAQU,QAIpB,MAAMC,EAAgB,CAAC,eAAgB,iBAAkB,gBAEzD,SAASF,EAAyBhN,GAC9B,MAAO,CACHmN,MAAO,CACHvB,QAAS,IAAIhC,MAAM,IAAIC,KAAK,GAAG1G,IAAI,CAAC2G,EAAGC,KAAQ,CAC3C/J,GAAI,SAASiM,EAAUjM,EAAI,MAAMiM,EAAUlC,EAAM,EAAG,KACpDrB,KAAM,QAAQ1I,KAAMiM,EAAUlC,EAAM,EAAG,KACvCqD,UAAU,QAAqB,MAAQ,GAAM,EAC7CpE,MAAO,GACPR,SAAU0E,EAAcrK,OACnBiH,IAAM,QAAqB,OAAS,GAAM,SAO/D,SAAqB,CACjBqC,KAAM,uCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMc,EAAO3C,EAAelH,KACvBsG,GAAMA,EAAE9J,KAAOuM,EAAQQ,aAAa/M,IAEzC,IAAKqN,EACD,KAAM,CACFZ,OAAQ,IACRC,QAAS,gCAAgCH,EAAQQ,aAAa/M,OAEtE,OAAO4K,EAAY/H,OAAQiH,GAAMA,EAAEU,YAAc6C,EAAKrN,IAAImD,IACrDmK,IACG,MAAM3J,EAAQ2J,EAAItN,GAAG4D,MAAM,KAE3B,MAAO,CACHyJ,KAAMC,EACNlB,SAAUY,EAHHrJ,EAAMA,EAAMY,OAAS,UAnH1BgJ,GC7BbC,EAAS,aCEhBC,EAAe,CACjB,qBACA,gBACA,UACA,kBACA,cACA,aACA,cACA,WACA,gBACA,cACA,gBACA,qBACA,iBACA,iBAGSC,EAAc,CACvB1N,GAAI,UACJ0I,KAAM,sBACNmD,MAAO,iBACP9J,OAAQ,CAAC,QAAS,KAGT4L,EAAaF,EAAatK,IAAI,CAACuF,EAAM5F,KAAM,CACpD9C,GAAI,QAAQ8C,EAAI,IAChB4F,KAAM,GAAGA,cACTmD,MAAO,GAAGnD,EAAK9E,MAAM,KAAKgK,KAAK,KAAKC,iBAAiBL,OACrDhC,OAAO,CAACkC,IAECI,EAAcL,EAAatK,IAAI,CAACuF,EAAM5F,KAAM,CACrD9C,GAAI,SAAS8C,EAAI,IACjB4F,KAAM,GAAGA,eACTmD,MAAO,GAAGnD,EAAK9E,MAAM,KAAKgK,KAAK,KAAKC,qBAAqBL,IACzDO,gBAAgB,QAAqB,OAAS,GAAM,K,cClCxD,MAAMC,EAAsB,KACxB,MAAMC,EAAI,CAAC,aAAc,UAAW,YAAa,SAC3CC,GAAc,QAAqBD,EAAE1J,OAAS,GAC9C4J,EAAM,GACZ,IAAK,IAAIrL,EAAI,EAAGA,EAAIoL,EAAapL,IAC7BqL,EAAI9L,KAAK4L,GAAE,QAAqBA,EAAE1J,UAEtC,OAAO4J,EAAItL,OAAO,CAACuL,EAAItL,EAAGuL,IAAMA,EAAEC,QAAQF,KAAQtL,IAGzCyL,EAAc,CACvB,CACI7F,KAAM,wBACNH,OAAQ,oBACRiG,MAAO,CAAC,SAAU,kBAEtB,CACI9F,KAAM,wBACNH,OAAQ,oBACRiG,MAAO,CAAC,SAAU,kBAEtB,CACI9F,KAAM,wBACNH,OAAQ,oBACRiG,MAAO,CAAC,SAAU,kBAEtB,CACI9F,KAAM,wBACNH,OAAQ,oBACRiG,MAAO,CAAC,SAAU,kBAEtB,CACI9F,KAAM,wBACNH,OAAQ,oBACRiG,MAAO,CAAC,SAAU,kBAEtB,CACI9F,KAAM,wBACNH,OAAQ,oBACRiG,MAAO,CAAC,SAAU,kBAEtB,CACI9F,KAAM,uBACNH,OAAQ,mBACRiG,MAAO,CAAC,SAAU,iBAEtB,CACI9F,KAAM,uBACNH,OAAQ,mBACRiG,MAAO,CAAC,SAAU,iBAEtB,CACI9F,KAAM,uBACNH,OAAQ,mBACRiG,MAAO,CAAC,SAAU,iBAEtB,CACI9F,KAAM,uBACNH,OAAQ,mBACRiG,MAAO,CAAC,SAAU,iBAEtB,CACI9F,KAAM,uBACNH,OAAQ,mBACRiG,MAAO,CAAC,SAAU,kBAExBrL,IAAKsL,IAAM,QAAkB,OAAD,wBAAMA,GAAC,CAAEjG,SAAUwF,Q,cC/DjD,IAAIU,EAAa,IAAQlN,QAAQ,KAAKT,KAAK,GAE3C,MAAM4N,EAAgB,CAACC,GAAO,KAC1B,MAAMC,EAAOH,EAAWnN,IAAoC,KAA/B,QAAqB,GAAK,GAAS,KAIhE,OAHIqN,IACAF,EAAaG,GAEVA,EAAKC,QAGVC,EAAe,CAAC,YAAa,YAAa,aAC1CC,EAAe,KACjB,MAAMC,GAAM,QAAqB,IACjC,OAAOA,EAAM,EACPF,EAAa,GACbE,EAAM,EACNF,EAAa,GACbA,EAAa,IAGVG,EAAc,IAAItF,MAAM,KAAKC,KAAK,GAAG1G,IAAI,CAAC2G,EAAGqF,KACtD,MAAMC,EAASzB,EAAWnC,OAAOsC,GACjC,IAAIuB,EAAmB,IAAIzF,OAAM,QAAqB,EAAG,IACpDC,KAAK,GACL1G,IAAI,IAAMiM,GAAO,QAAqBA,EAAO7K,UAClD8K,EAAUC,KACN,CAACC,EAAGC,KAAOD,EAAExB,eAAiB,GAAK,IAAMyB,EAAEzB,eAAiB,GAAK,IAErE,MAAM0B,EAAQlB,GAAY,QAAqBA,EAAYhK,SAC3D8K,EAAYA,EAAU7D,OAAO,OAAD,wBAAMiE,GAAK,CAAEC,UAAU,MAC/C,QAAqB,MAAQ,GAAM,EAAGL,EAAUM,QAAQjC,GACvD2B,EAAUM,QAAQhC,GAAW,QAAqBA,EAAWpJ,UAClE8K,GAAY,QAAOA,EAAW,SAC9B,MAAMlG,EAAcwF,GAAc,GAC5BvF,EAAYuF,IAClB,MAAO,CACH3O,GAAI,aAAamP,IACjB1C,OAAQuC,IACRY,KAAMP,EAAU,GAAGxD,MACnBgE,SAAU,cACVC,QAAS,oBACTT,WAAW,QAAOA,EAAW,SAASlM,IAAK2G,GAAO,OAAD,wBAC1CA,GAAC,CACJiG,iBACI,QAAqB,OAAS,GAAM,EAC9B,YACA,QAAqB,OAAS,GAAM,EACpC,WACA,eAEdC,MAAO,gBAAgBb,IACvBlC,KAAM,gBACNgD,SAAS,EACT9G,cACAC,YACA8G,SAAU,mBACVC,SAAS,EACTpJ,SAAU,GAAG0I,EAAM/G,OACnB0H,WAAW,EACXC,WAAY,GACZC,YAAa,GACbC,OAAQd,EACRe,eAAgB,CACZ1D,UACI,QAAqB,OAAS,GAAM,EAC9B,CACI7D,EAAsB,CAClBjJ,GAAI,aAAamP,IACjBhG,cACAC,eAGR,GACVqH,MAAiC,GAA1B,QAAqB,GAC5BC,UAAqC,GAA1B,QAAqB,OAKtCC,EAAe,GACrBzB,EAAY0B,QAASvN,IACZsN,EAAatN,EAAMkN,OAAOvQ,MAC3B2Q,EAAatN,EAAMkN,OAAOvQ,IAAM,IAEpC2Q,EAAatN,EAAMkN,OAAOvQ,IAAIqC,KAAKgB,KChFhC,MAAMwN,EAEb,YACI,SAAqB,CACjB1E,KAAM,2BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAgC,YAA5BA,EAAQQ,aAAa/M,GACrB,OAAO0N,EAEX,MAAMoD,EAASnD,EAAWnK,KACrBuN,GAASA,EAAKlF,QAAUU,EAAQQ,aAAa/M,IAElD,GAAI8Q,EACA,OAAOA,EAEX,KAAM,CAAErE,OAAQ,IAAKC,QAAS,sBAItC,SAAqB,CACjBP,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQC,aAAawE,EAAG,CACxB,MAAMC,EAAS1E,EAAQC,aAAawE,EAAEnD,cACtC,OAAOF,EAAW9K,OACbkO,GACGA,EAAKrI,KAAKmF,cAAcqD,SAASD,IACjCF,EAAKlF,MAAMgC,cAAcqD,SAASD,IAG9C,OAAOtD,MAIf,SAAqB,CACjBxB,KAAM,2BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMvM,EAAKmR,mBAAmB5E,EAAQQ,aAAa/M,IAC7C8Q,EAASnD,EAAWnK,KAAMuN,GAASA,EAAKlF,QAAU7L,GACxD,GAAI8Q,EACA,OAAO,OAAP,wBACOA,GAAM,CACT/J,SAAUqK,MAGlB,KAAM,CAAE3E,OAAQ,IAAKC,QAAS,sBAItC,SAAqB,CACjBP,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQC,aAAawE,EAAG,CACxB,MAAMC,EAAS1E,EAAQC,aAAawE,EAAEnD,cACtC,OAAOC,EAAYjL,OACdkO,GACGA,EAAKrI,KAAKmF,cAAcqD,SAASD,IACjCF,EAAKlF,MAAMgC,cAAcqD,SAASD,IAG9C,OAAOtD,MAIf,SAAqB,CACjBxB,KAAM,8BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMuE,EAAShD,EAAYtK,KACtBuN,GAASA,EAAKlF,QAAUU,EAAQQ,aAAalB,OAElD,GAAIiF,EACA,OAAOA,EAEX,KAAM,CAAErE,OAAQ,IAAKC,QAAS,uBAItC,SAAqB,CACjBP,KAAM,uCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQQ,aAAalB,MAAO,CAC5B,MAAMA,EAAQU,EAAQQ,aAAalB,MAAMgC,cAMzC,OALeqB,EAAYrM,OAAQQ,GAC/BA,EAAMgM,UAAU7L,KACXuN,GAASA,EAAKlF,MAAMgC,gBAAkBhC,IAKnD,KAAM,CACFY,OAAQ,IACRC,QAAS,iDAAiDH,EAAQQ,aAAalB,YAK3F,MAAMwF,EAAiB,CACnB,UACA,UACA,SACA,SACA,MACA,QAGJ,SAASD,IACL,MAAMlG,EACFmG,GAAe,QAAqBA,EAAe9M,SACjD4D,EAAQyC,GAAY,QAAqBA,EAAYrG,SACrD+M,EAAe/C,EAAY1L,OAAQoD,GACrCA,EAAEuI,MAAM0C,SAAS/I,EAAMnI,KAErByP,EACF6B,GAAa,QAAqBA,EAAa/M,UAAY,GACzDwC,EAAoB,GAC1B,OAAQmE,GACJ,IAAK,UACDnE,EAASwK,QAAU,CACfzG,SAAU3C,EAAMqC,UAChBrC,MAAOA,EAAMnI,GACbuQ,OAAQd,EAAMzP,GACduI,OAAQkH,EAAMlH,OACde,SAAU,IAEd,MACJ,IAAK,UACDvC,EAASwK,QAAU,CACfzG,SAAU3C,EAAMqC,UAChBrC,MAAOA,EAAMnI,GACbuI,OAAQkH,EAAMlH,OACdiJ,WAAY,IAAQ1C,QAExB,MACJ,IAAK,SACL,IAAK,SACD/H,EAASmE,GAAQ,CACbJ,SAAU3C,EAAMqC,UAChBrC,MAAOA,EAAMnI,GACbqE,IAAI,QAAqB,KACzBI,IAAI,QAAqB,KACzBgN,UAAW,IACNC,UAAS,QAAqB,IAAK,KACnC5C,QAET,MACJ,IAAK,MACD/H,EAAS4K,IAAM,CACXC,KAAK,QAAqB,KAAO,GACjCC,KAAK,QAAqB,KAAO,IACjCJ,UAAW,IACNC,UAAS,QAAqB,IAAK,KACnC5C,QAIjB,OAAO/H,GAvKW,GCuB1B,MAAM+K,EAeF,YAAY9J,G,MAFL,KAAA+J,OAAS,EAGZlR,KAAK6H,KAAOV,EAAMU,MAAQ,cAC1B7H,KAAKmR,UAA2B,QAAf,EAAAhK,EAAMgK,iBAAS,SAChCnR,KAAKoR,OAASjK,EAAMiK,SAAU,EAC9BpR,KAAKqR,WAAalK,EAAMkK,WACxBrR,KAAKsR,YAAcnK,EAAMmK,YACzBtR,KAAKuR,YAAcpK,EAAMoK,aAAe,GACxCvR,KAAKwR,OAASnM,OAAOnG,KAAKc,KAAKqR,YAAc,KAAO,GACpDrR,KAAKyR,QAAUpM,OAAOnG,KAAKc,KAAKsR,aAAe,KAAO,IACxC,QAAOtR,KAAKuR,YAAYjP,IAAK2G,GAAMA,EAAEoB,OAC7C0F,QACDnN,GACI5C,KAAK,GAAG4C,KAAO5C,KAAKuR,YAChBvP,OAAQiH,GAAMA,EAAEoB,OAASzH,GACzBN,IAAK2G,GAAMA,EAAE9J,KAE1Ba,KAAKuR,YAAYxB,QACZ2B,GAAY1R,KAAK,GAAG0R,EAAOrH,QAAQqH,EAAOvS,MAAQuS,GAEvD1R,KAAKwR,OAAOzB,QACP4B,GAAS3R,KAAK,SAAS2R,KAAS3R,KAAKqR,WAAWM,IAErD3R,KAAKyR,QAAQ1B,QACR4B,GAAS3R,KAAK,UAAU2R,KAAS3R,KAAKsR,YAAYK,IAI3D,WACIC,QAAQC,IAAI,YACZ7R,KAAKoR,QAAS,EAOlB,YACIpR,KAAKoR,QAAS,EAGlB,UAWA,OAAOU,EAAeC,GACd/R,KAAKwR,OAAOnB,SAASyB,IAAU9R,KAAKyR,QAAQpB,SAAS0B,KACrD/R,KAAKgS,aAAaF,EAAO,CACrBG,QAAQ,QAAO,IACPjS,KAAKqR,WAAWS,GAAOG,QAAU,GACrCF,MAGR/R,KAAKgS,aAAaD,EAAQ,CACtBL,OAAQI,EACRI,UAAWJ,KASvB,YAKA,YAEA,eAMA,SAKA,UAEA,UAMA,WAOA,WAMA,QAAQpM,EAAegM,EAAiB,OACrB,QAAXA,IACA1R,KAAKkR,OAASxL,GAItB,MAAMyM,GAAiB,EAAMT,EAAiB,OAC1C1R,KAAKgS,aAAaN,EAAQ,CAAEU,KAAMD,IAMtC,QAAQT,EAAiB,OACrB1R,KAAKqS,OAAM,EAAOX,GAUtB,aAAavS,EAAYgT,GACrB,MAAMT,EAAS1R,KAAKuR,YAAY5O,KAAMsG,GAAMA,EAAE9J,KAAOA,GACjDuS,IACA1R,KAAK,GAAG0R,EAAOrH,QAAQqH,EAAOvS,MAAQ,OAAH,wBAAQuS,GAAM,CAAES,WAI3D,MAAMT,GACF1R,KAAKgS,aAAaN,EAAQ,CAAEY,QAAQ,IAGxC,QAAQZ,GACJ1R,KAAKgS,aAAaN,EAAQ,CAAEY,QAAQ,IAGxC,aAAaZ,EAAgB9J,GACrB5H,KAAK,SAAS0R,MACd1R,KAAK,SAAS0R,KAAY,OAAH,wBAAQ1R,KAAK,SAAS0R,MAAc9J,GAC3D5H,KAAKqR,WAAWK,GAAU,OAAH,wBAAQ1R,KAAK,SAAS0R,MAAc9J,IACpD5H,KAAK,UAAU0R,OACtB1R,KAAK,UAAU0R,KAAY,OAAH,wBAAQ1R,KAAK,UAAU0R,MAAc9J,GAC7D5H,KAAKsR,YAAYI,GAAU,OAAH,wBAAQ1R,KAAK,UAAU0R,MAAc9J,KAKzE,MAAMyJ,EAAsB,CACxBkB,KAAM,CACF1K,KAAM,cACNwC,KAAM,aACNmI,IAAK,gBAETC,KAAM,CACF5K,KAAM,YACNwC,KAAM,aACNmI,IAAK,gBAETE,KAAM,CACF7K,KAAM,eACNwC,KAAM,aACNmI,IAAK,gBAETG,IAAK,CACD9K,KAAM,OACNwC,KAAM,MAEVuI,IAAK,CACD/K,KAAM,OACNwC,KAAM,MAEVwI,IAAK,CACDhL,KAAM,OACNwC,KAAM,MAEVyI,IAAK,CACDjL,KAAM,OACNwC,KAAM,MAEV0I,KAAM,CACFlL,KAAM,cACNwC,KAAM,UAEV2I,IAAK,CACDnL,KAAM,aACNwC,KAAM,UAEV4I,QAAS,CACLpL,KAAM,cACNwC,KAAM,SACNmI,IAAK,YAETU,QAAS,CACLrL,KAAM,eACNwC,KAAM,SACNmI,IAAK,YAETW,QAAS,CACLtL,KAAM,gBACNwC,KAAM,SACNmI,IAAK,YAETY,QAAS,CACLvL,KAAM,iBACNwC,KAAM,SACNmI,IAAK,YAETa,IAAK,CACDxL,KAAM,SACNwC,KAAM,KACNmI,IAAK,WAIPlB,EAAuB,CACzBgC,SAAU,CACNzL,KAAM,YACNwC,KAAM,UACNqH,OAAQ,MACRc,IAAK,aAETe,SAAU,CACN1L,KAAM,YACNwC,KAAM,UACNmI,IAAK,aAETgB,SAAU,CACN3L,KAAM,YACNwC,KAAM,UACNqH,OAAQ,MACRc,IAAK,aAETiB,SAAU,CACN5L,KAAM,YACNwC,KAAM,UACNmI,IAAK,aAETkB,SAAU,CACN7L,KAAM,YACNwC,KAAM,UACNmI,IAAK,YACLd,OAAQ,QAIVH,EAAqB,CACvB,CACIpS,GAAI,SACJ0I,KAAM,WACNwC,KAAM,SACNsJ,OAAQ,CAAC,MAAO,eAAgB,UAAW,QAC3CxB,MAAO,OAEX,CACIhT,GAAI,SACJ0I,KAAM,SACNwC,KAAM,SACNsJ,OAAQ,CAAC,MAAO,eAAgB,WAChCxB,MAAO,OAEX,CACIhT,GAAI,UACJ0I,KAAM,SACNwC,KAAM,SACNsJ,OAAQ,CAAC,KAAM,QACfxB,MAAO,SAIFyB,EAAqB,CAAChF,EAAgBiF,EAAqB,KACpE,IAAI5C,EAAW,OAAD,sCACPrC,GAAK,CACRyC,aACAC,cACAC,gBACGsC,I,oCC1UJ,MAAMC,GAAb,cAEI,KAAAC,UAAY,mBAEZ,KAAAC,kBAAmB,EAEnB,KAAAC,qBAAsB,EAEtB,KAAAC,SAAsB,GACtB,KAAAC,eAAiB,EACjB,KAAAC,eAAiB,EAEjB,KAAAC,WAAa,GAEb,KAAAC,YAAc,GAEd,KAAAC,qBAAuB,EAEvB,KAAA3I,OAAuD,QAGpD,SAAS4I,GACZ5F,EACAiF,EAAwC,IAExC,MAAMrB,EAAM,OAAH,sCACF,IAAIsB,IACJD,GAAS,CAEZY,eAAgB,SAAU7R,GACtB5C,KAAKuU,qBAAuB3R,GAGhC8R,aAAc,SAAU9R,KAExB+R,UAAW,SAAUC,EAAahS,EAAYiS,OAIlD,OAFAC,GAAelG,EAAO4D,GACtBuC,YAAY,IAAMD,GAAelG,EAAO4D,GAAM,KACvCA,EAGX,SAASsC,GAAelG,EAAgB4D,G,MACpC,MAAM0B,EACF7F,EAAYrM,OAAQQ,IAAS,MACzB,OAAe,QAAf,EAAAA,EAAMgM,iBAAS,eAAE7L,KAAMqS,GAAMA,EAAEhK,QAAU4D,EAAM5D,UAC9C,GAGT,GAFAkJ,EAASzF,KAAK,CAACC,EAAGC,IAAMD,EAAEpG,YAAcqG,EAAErG,aAC1CkK,EAAI0B,SAAWA,GACVtF,EAAMrC,SACP,OAAQiG,EAAI5G,OAAS,eAEzB,MAAMrM,EAAO,IAAI0V,KACXpK,EAAUqJ,EAASvR,KAAMuS,IAC3B,QACI3V,EAAKC,UACLD,EAAKC,UACL0V,EAAI5M,YACJ4M,EAAI3M,YAGNyF,EAAOkG,EAASvR,KAAMuS,IACxB,EAAA3T,EAAA,GAAShC,EAAKC,UAAW0V,EAAI5M,cAE3BrI,EAAQ,IAAIgV,KAAsB,QAAhB,EAAApK,GAAWmD,SAAK,eAAE1F,aACpC6M,GAAU,QACZ5V,EACAA,GACA,EAAA6V,GAAA,GAAWnV,EAAOuS,EAAI4B,iBACtB,EAAAiB,GAAA,GAAWpV,EAAOuS,EAAI2B,iBAE1B3B,EAAI5G,OAASf,EACPsK,EACI,UACA,OACJnH,GAAQmH,EACR,UACA,O,eC3DH,MAAMG,GAAb,cAEI,KAAAC,SAAkC,GAElC,aAAavK,EAAewK,KAGhC,SAASC,GAAQC,EAAYd,EAAc,GACvC,IAAIvJ,EAAM,GAAGqK,IACb,KAAOrK,EAAI3H,OAASkR,GAChBvJ,EAAM,IAAMA,EAEhB,OAAOA,EAGJ,SAASsK,GACZ/G,EACAiF,EAAqB,IAErB,MAAMrB,EAAM,IAAI8C,GAChB,IAAK,MAAM7I,KAAO1C,EACdyI,EAAI+C,SAAS9I,EAAItN,IAAM,CACnByW,WAAY,IACZC,WAAY,EACZC,gBAAiB,IACjBC,aAAc,EACdC,iBAAkB,EAClBC,eAAgB,EAChBC,eAAgB,KAEpB1D,EAAI,GAAG/F,EAAItN,eAAiB,IAAI4J,MAAMyJ,EAAI+C,SAAS9I,EAAItN,IAAIyW,YACtD5M,KAAK,GACL1G,IAAI,CAAC2G,EAAGC,IAAQ,SAASuD,EAAI0J,UAAUV,GAAQvM,MACpDsJ,EAAI,GAAG/F,EAAItN,MAAQ,CAAEuG,MAAO,IAIhC,OAFA0Q,GAAgB5D,EAAKzI,GACrBgL,YAAY,IAAMqB,GAAgB5D,EAAKzI,GAAc,KAC9CyI,EAGJ,SAAS4D,GACZ5D,EACA1I,GAEA,IAAK,MAAM2C,KAAO3C,EACd0I,EAAI/F,EAAItN,IAAM,CACVuG,MAAO,IAAIqD,OAAM,QAAqB,KACjCC,KAAK,GACL1G,IAAI,IAAMiO,GAAiB9D,EAAK+F,EAAI,GAAG/F,EAAItN,kBAKrD,SAASoR,GACZ9D,EACAH,EACA+J,EAAQvJ,GAGR,OADc,QAAqB,MAAQ,GAAM,EAE3C,CACI5G,SAAU,OACVoQ,aAAa,QAAqB,MAAQ,GAAM,EAChD5O,OAAQ4E,GAAM,QAAqBA,EAAM5I,SACzC6S,IAAK,aACDF,GAAM,QAAqBA,EAAM3S,SAASsH,OAE9C1D,MAAOmF,EAAItN,GACX8K,SAAUwC,EAAI9C,WAElB,CACIzD,SAAU,WACVsQ,iBAAkB,cAClBhT,GAAG,QAAqB,KAAQ,GAChCI,GAAG,QAAqB,KAAQ,GAChCoN,IAAK,kBACLD,IAAK,kBACL0F,WAAY,eACZF,IAAK,aACDF,GAAM,QAAqBA,EAAM3S,SAASsH,OAE9C0L,SAAU,iBACV9F,UAAW9P,KAAKC,OAAM,IAAIkU,MAAOzV,UAAY,KAC7CmX,UAAW,IACXC,WAAY,KC7F1B,MAAMC,GAWF,YAAY5N,GACRjJ,KAAK8W,QAAU,CAAC,aAAc,WAAY,gBAG9C,KAAKC,IAEL,MAAMC,IAEN,QAAQnP,IAER,aAAaA,KCjCjB,MAAMoP,GAYF,YAAYhO,GACRjJ,KAAKkR,QAAS,QAAU,KAT5B,MAAMiB,GAAiB,GACnBnS,KAAKoS,KAAOD,EAGhB,QAAQzM,GACJ1F,KAAKkR,OAASxL,GCTtB,MAAMwR,GAYF,YAAYjO,GACRjJ,KAAKkR,QAAS,QAAU,KAT5B,MAAMiB,GAAiB,GACnBnS,KAAKoS,KAAOD,EAGhB,QAAQzM,GACJ1F,KAAKkR,OAASxL,GCTtB,IAAInF,GAEG,MAAM4W,GAST,YAAYlO,GAPZ,KAAA2C,OAA2C,UAE3C,KAAAwL,MAAgB,EAMZpX,KAAKqX,WAAY,QAAU,OAG/B,SACIrX,KAAK4L,OAAS,UACdrL,GAAWwU,YAAY,KACf/U,KAAKqX,UAAY,GAAGC,cAAc/W,IACtCP,KAAKqX,UAAYrX,KAAKqX,UAAY,EAClCrX,KAAK6K,QAAU7K,KAAK6K,QAAU,GAC/B,KAGP,SACI7K,KAAK4L,OAAS,SACd0L,cAAc/W,IAGlB,UACIP,KAAKuX,SAGT,QACIvX,KAAK4L,OAAS,UACd5L,KAAK6K,QAAU,EACfyM,cAAc/W,KAKf,MAAMiX,GAAsB,CAAC5I,EAAgBiF,EAAqB,KACrE,IAAIsD,GAAc,OAAD,wBAAMvI,GAAUiF,ICvCxB4D,IAGT/J,EAAYqC,QAAQ,CAACnB,EAAYN,ICG9B,SAAsBM,IACzB,SAAeA,EAAMzP,GAAI,CACrBuY,OAAQ,CAAC9D,EAAmBhF,IAC5B+I,SAAU,CAACnD,GAAqB5F,IAChCgJ,eAAgB,CAACjC,MACjBkC,OAAQ,IAAI9O,MAAM,IAAIC,KAAK,GAAG1G,IAAI2G,GLsBR,EAAC2F,EAAgBiF,EAAqB,KACpE,IAAIgD,GAAa,OAAD,wBAAMjI,GAAUiF,IKvBWiE,CAAmBlJ,IAC1DmJ,QAAS,IAAIhP,MAAM,IAAIC,KAAK,GAAG1G,IAAI2G,GJER,EAAC2F,EAAgBiF,EAAqB,KACrE,IAAIoD,GAAc,OAAD,wBAAMrI,GAAUiF,IIHWmE,CAAoBpJ,IAC5DqJ,WAAY,IAAIlP,MAAM,IAAIC,KAAK,GAAG1G,IAAI2G,GHCR,EAClC2F,EACAiF,EAAqB,KACpB,IAAIqD,GAAiB,OAAD,wBAAMtI,GAAUiF,IGJUqE,CAAuBtJ,IAClEuJ,QAAS,CAACX,GAAoB5I,MDXSwJ,CAAaxJ,SAExD,SAAqB,CACjBtD,KAAM,yBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GACAgC,KEVN2K,KAGT,SAAqB,CACjB/M,KAAM,uBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWxC,IACP,IAAIlH,EAASsM,EAmBb,OAlBKpF,EAAE0C,aAAa2M,WAChBvW,EAASA,EAAOC,OACXQ,KACKA,EAAMgM,UAAU7L,KACbuN,GAASA,EAAKlF,QAAU6B,EAAY7B,SAIjD/B,EAAE0C,aAAa4M,eACfxW,EAASA,EAAOC,OAAQjD,IACpB,QACIkK,EAAE0C,aAAa4M,aACftP,EAAE0C,aAAa6M,WACfzZ,EAAEuJ,YACFvJ,EAAEwJ,aAIPxG,MAIf,SAAqB,CACjBuJ,KAAM,uBACNC,SAAU,GACVC,OAAQ,OACRC,SAAWC,IACP,MAAM+M,EAAY,OAAH,wBACR/M,EAAQU,MAAI,CACfjN,GAAI,eAAc,QAAqB,SAiB3C,OAfAsZ,EAAUjK,UAAY,CAClB1B,EAAWnK,KAAMsG,GAAMA,EAAE+B,QAAUyN,EAAU1J,SACzC0J,EAAUjK,WAAa,IAE/BiK,EAAUjK,UAAUuB,QAASG,IACrBA,EAAKvC,QAAOuC,EAAKrB,UAAW,KAGhC4J,EAAU/I,SACV+I,EAAUjK,UAAY,IACdiK,EAAUjK,WAAa,G,+BACtBiK,EAAU/I,QAAM,CAAEb,UAAU,MAGzCR,EAAY7M,KAAKiX,GACVA,MAIf,SAAqB,CACjBnN,KAAM,2BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,IACP,MAAMtE,EAAOiH,EAAY1L,KACpBH,GAAUA,EAAMrD,KAAOuM,EAAQQ,aAAa/M,IAEjD,GAAIiI,EACA,OAAOA,EAEX,KAAM,CAAEwE,OAAQ,IAAKC,QAAS,uBAItC,SAAqB,CACjBP,KAAM,2BACNC,SAAU,GACVC,OAAQ,SACRC,SAAWC,IACP,MAAM4C,EAAQD,EAAYqK,UACrBlW,GAAUA,EAAMrD,KAAOuM,EAAQQ,aAAa/M,IAEjD,KAAImP,EAAQ,GAWZ,KAAM,CAAE1C,OAAQ,IAAKC,QAAS,mBAVtBwC,EAAYC,GAAOS,OAASlC,EAAY7B,MACxCqD,EAAYsK,OAAOrK,EAAO,GAEbD,EAAYC,GAAOE,UAAU7L,KACrCsG,GAAMA,EAAE+B,QAAU6B,EAAY7B,OAE9BkE,gBAAkB,eAQvC,SAAqB,CACjB5D,KAAM,2BACNC,SAAU,GACVC,OAAQ,QACRC,SAAWC,IACP,MAAM4C,EAAQD,EAAYqK,UACrBlW,GAAUA,EAAMrD,KAAOuM,EAAQQ,aAAa/M,IAEjD,GAAImP,GAAS,EACT,OAAOD,EAAYsK,OAAOrK,EAAO,EAAG5C,EAAQU,MAEhD,KAAM,CAAER,OAAQ,IAAKC,QAAS,2BAItC,SAAqB,CACjBP,KAAM,iDACNC,SAAU,GACVC,OAAQ,OACRC,SAAWC,IACP,MAAMlJ,EAAQ6L,EAAY1L,KACrBH,GAAUA,EAAMrD,KAAOuM,EAAQQ,aAAa/M,IAEjD,GAAIqD,EAMA,OAHCA,EAAMmN,eAAuBgB,YADzBnO,EAAMmN,eAAuBgB,YAAc,IACMhG,OAAO,CACzDe,EAAQQ,aAAalB,QAElBxI,EAEX,KAAM,CAAEoJ,OAAQ,IAAKC,QAAS,uBC9H7B+M,GAEb,YACI,SAAqB,CACjBtN,KAAM,0BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GAAY,KAG3B,MAAMmN,EAA2BnN,IAC7B,MAAMzL,GAASyL,EAAQC,aAAa4M,aAC9BnY,GAAOsL,EAAQC,aAAa6M,WAC5B7K,GAASjC,EAAQC,aAAa2M,UAAY,IAC3CvV,MAAM,KACNf,OAAQC,KAAQA,GACf6W,GAAWpN,EAAQC,aAAaoN,YAAc,IAC/ChW,MAAM,KACNf,OAAQC,KAAQA,GA4BrB,OA1BeyL,EAAY1L,OAAQ4M,GAC/BjB,EAAMjK,OACAiK,EAAMnD,OACF,CAACwO,EAAKxM,IAASwM,GAAOpK,EAAMjB,MAAM0C,SAAS7D,IAC3C,IAEJsM,EAAQpV,QACRoV,EAAQzI,SAASzB,EAAMzP,KAE/B6C,OAAQ4M,IACN,MAAMsF,EAAW7F,EAAYrM,OAAQQ,GACjCA,EAAMgM,UAAU7L,KAAMuN,GAASA,EAAK/Q,KAAOyP,EAAMzP,KAErD,IAAK,MAAMqD,KAAS0R,EAChB,IACI,QACIjU,EACAG,EACAoC,EAAM8F,YACN9F,EAAM+F,WAGV,OAAO,EAEf,OAAO,MAKf,SAAqB,CACjB+C,KAAM,uCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GACPmN,EAAwBnN,GAASpJ,IAAK2G,IAAM,CACxC4F,SAAU5F,QAItB,SAAqB,CACjBqC,KAAM,oCACNC,SAAU,GACVC,OAAQ,MACRC,SAAWC,GACPmN,EAAwBnN,GAASpJ,IAAK2G,IAAM,CACxC4F,SAAU5F,OAjEI,G,mCCD9B,IAAI,IAAa,EAAAgQ,GAAA,IAAS,EAAAC,GAAA,GAAW,IAAIjE,MAAS,GAElD,MAAM,GAAgB,CAAClH,GAAO,KAC1B,MAAMC,GAAO,EAAAnF,EAAA,GAAW,GAA4C,KAA/B,QAAqB,GAAK,IAE/D,OADIkF,IAAM,GAAaC,IAChB,EAAAmL,GAAA,GAAYnL,IAGjBoL,GAAQ,CAAC,OAAQ,WAEVC,GAAgB,IAAItQ,MAAM,KAAKC,KAAK,GAAG1G,IAAI,CAAC2G,EAAGqF,KACxD,MAAM4B,EAAOpD,GAAW,QAAqBA,EAAWpJ,SAClD2G,EAAO+O,IAAM,QAAqBA,GAAM1V,SACxCsG,EAAMH,GAAe,QAAqBA,EAAenG,SACzD4V,EAAOvP,EAAY/H,OAAQiH,GAAMA,EAAEU,YAAcK,EAAI7K,IACrDsN,EAAM6M,GAAK,QAAqBA,EAAK5V,SACrC6V,GAAW,QAAqB,QAAU,EAC1CC,EAAW1M,GAAW,QAAqBA,EAAWpJ,SAC5D,MAAO,CACHvE,GAAI,WAAWmP,IACfmL,cAAe,IAAc,GAC7BC,YAAa,KACbC,QAASzJ,EAAK/Q,GACdya,UAAW1J,EAAKrI,KAChBgS,WAAY3J,EAAKlF,MACjB8O,SAAU,QAAQrN,aAAG,EAAHA,EAAKtN,MAAMmP,IAC7B/E,YAAa,QAAQ+E,IACrBa,MAAO,GAAG9E,aAAgBiE,IAC1BjE,OACAsG,YAAY,QAAqB,QAAU,GAAM,EACjDoJ,QAAQ,QAAqB,QAAU,GAAM,EAC7CR,SAAuB,IAAbA,EACVS,SAAuB,IAAbT,EACVU,YAA0B,IAAbV,EAAiBC,EAASra,GAAK,GAC5C+a,cAA4B,IAAbX,EAAiBC,EAAS3R,KAAO,GAChDsS,eAA6B,IAAbZ,EAAiBC,EAASxO,MAAQ,GAClD2C,MAAO,CAAC3D,EAAI7K,GAAIsN,aAAG,EAAHA,EAAKtN,IACrBwQ,eAAgB,MClCxB,IACIxE,WAAU,EACV6E,WAAU,EACVyH,aAAY,GACZY,YAAW,GACXO,eAAc,GACdwB,cCRJ,YACI,SAAqB,CACjB9O,KAAM,yBACNC,SAAU,GACVC,OAAQ,MACRC,SAAWxC,GACQoQ,GAAcrX,OACxBQ,IACG,QACIyG,EAAE0C,aAAa4M,aACftP,EAAE0C,aAAa6M,WACfhW,EAAMiX,cACNjX,EAAMkX,cACLlX,EAAM6H,OAASpB,EAAE0C,aAAatB,SAMnD,SAAqB,CACjBiB,KAAM,6BACNC,SAAU,GACVC,OAAQ,MACRC,SAAWxC,IACP,MAAMzG,EAAQ6W,GAAc1W,KAAM5D,GAAMA,EAAEI,KAAO8J,EAAEiD,aAAa/M,IAChE,IAAKqD,EACD,KAAM,CACFoJ,OAAQ,IACRC,QAAS,kCAAkC5C,EAAEiD,aAAa/M,MAElE,OAAOqD,MAIf,SAAqB,CACjB8I,KAAM,yBACNC,SAAU,GACVC,OAAQ,OACRC,SAAWC,IACP,MAAM+M,EAAY,OAAH,wBACR/M,EAAQU,MAAI,CACfjN,GAAI,aAAY,QAAqB,SAGzC,OADAka,GAAc7X,KAAKiX,GACZA,KAIf,MAAM4B,EAAgB,CAAClb,EAAIyI,KACvB,MAAM0G,EAAQ+K,GAAcX,UAAW3Z,GAAMA,EAAEI,KAAOA,GACtD,GAAImP,EAAQ,EACR,KAAM,CACF1C,OAAQ,IACRC,QAAS,kCAAkC1M,KAEnD,MAAMsZ,EAAY,OAAH,UAAQ7Q,GAEvB,OADAyR,GAAcV,OAAOrK,EAAO,EAAGmK,GACxBA,IAGX,SAAqB,CACjBnN,KAAM,6BACNC,SAAU,GACVC,OAAQ,MACRC,SAAW9M,GAAQ0b,EAAc1b,EAAIuN,aAAa/M,GAAI,OAAF,UAAOR,EAAIyN,UAGnE,SAAqB,CACjBd,KAAM,qCACNC,SAAU,GACVC,OAAQ,OACRC,SAAW9M,GACP0b,EAAc1b,EAAIuN,aAAa/M,GAAI,OAAF,wBAC1BR,EAAIyN,MAAI,CACXmN,UAAU,EACVS,UAAU,QAItB,SAAqB,CACjB1O,KAAM,oCACNC,SAAU,GACVC,OAAQ,OACRC,SAAW9M,GACP0b,EAAc1b,EAAIuN,aAAa/M,GAAI,OAAF,wBAC1BR,EAAIyN,MAAI,CACXmN,UAAU,EACVS,UAAU,QAItB,SAAqB,CACjB1O,KAAM,sCACNC,SAAU,GACVC,OAAQ,OACRC,SAAW9M,GACP0b,EAAc1b,EAAIuN,aAAa/M,GAAI,OAAF,wBAC1BR,EAAIyN,MAAI,CACXuE,WAAuC,SAA3BhS,EAAIgN,aAAawG,YAIzC,SAAqB,CACjB7G,KAAM,6BACNC,SAAU,GACVC,OAAQ,SACRC,SAAW9M,IACP,MAAM2P,EAAQ+K,GAAcX,UACvB3Z,GAAMA,EAAEI,KAAOR,EAAIuN,aAAa/M,IAErC,GAAImP,EAAQ,EACR,KAAM,CACF1C,OAAQ,IACRC,QAAS,kCAAkClN,EAAIuN,aAAa/M,MAEpEka,GAAcV,OAAOrK,EAAO,MArHX,KDa7B,QAAI,QAAS,oC,gDEyCN,a,MAAMgM,UAAqB,KAC9B,YACYC,EACAhV,EACAiV,EACAC,EACAC,EACAC,EACAC,EACAC,GAERrV,QATQ,KAAA+U,WACA,KAAAhV,YACA,KAAAiV,OACA,KAAAC,UACA,KAAAC,SACA,KAAAC,YACA,KAAAC,UACA,KAAAC,aAKC,W,uDACT,QAAI,MAAO,SAAU,GACrB7a,KAAK4a,QAAQE,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,KACrDC,aAAaC,QACT,OACA,GAAoC,SAAjCD,aAAaE,QAAQ,WAE5B/U,SAASgV,WAEblb,KAAK4a,QAAQE,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,KACrD9a,KAAK6a,WAAWM,KAAK,IAAG,eAAW,eACnC,QAAc,gCAElBnb,KAAK4a,QAAQE,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,K,MAClC,QAAnB,EAAAM,UAAUC,iBAAS,SAAEC,WAAWxc,KAAMyc,IAClC,MAAMzY,EAAQyY,EAAIxY,MAAM,KAClB5D,GAAK,WACX4b,aAAaC,QAAQ,GAAG7b,iBAAmB,GAAG2D,EAAM,MACpDiY,aAAaC,QAAQ,GAAG7b,kBAAoB,GAAG2D,EAAM,MACrDiY,aAAaC,QACT,GAAG7b,eACH,IAAG,EAAAqc,EAAA,GAAS,IAAIvG,KAAQ,GAAGzV,cAE/B,QAAc,8BACdic,WAAW,IAAMvV,SAASgV,SAAU,UAG5C,QAAgBlb,KAAK2a,iBAEf3a,KAAKuF,UAAUmW,YAAYC,MAAK,EAAAC,EAAA,GAAO3S,GAAMA,IAAI4S,aACvD,QAAW7b,KAAKuF,UAAUM,IAAI,mBAC9B,MAAMiW,EAAW9b,KAAKuF,UAAUM,IAAI,aAAe,GACnDiW,EAASC,OACH/b,KAAKuF,UAAUM,IAAI,SACrBK,SAAS8V,OAAO3L,SAAS,yBAEvB,QAAWyL,GAAUG,MAAM,IAAMjc,KAAKkc,gBAC5C,QAAWlc,KAAK0a,QAChB1a,KAAKY,QAAQ,gBAAiB,IAAMZ,KAAKkc,cAAe,YAClD,WAAkB,EAAAN,EAAA,GAAO3S,KAAQA,IAAI4S,YAC3C7b,KAAK4F,aAAa,kBAClB,QAAkB,YAClB,QACI5F,KAAKuF,UAAUM,IAAI,sCACK,QAApB,EAAa,QAAb,oBAAa,eAAEmF,aAAK,eAAEjI,MAAM,KAAK,KAhF1C,SAAoBoZ,EAAaC,EAAsB,IACrDD,GACL,EAAAE,EAAY,CACRF,MACAG,aAAc,CACV,IAAI,oBAA4B,CAC5BC,eAAgB,CAAC,YAAarW,SAAS8V,QACvCQ,uBAAwB,QAGhCC,iBAAkBL,IAwElBM,CAAW1c,KAAKuF,UAAUM,IAAI,qBAG1B,c,OACA,aAAyB,QAAb,oBAAa,eAAE8W,gBAC/B/K,QAAQgL,MAAM,6BACd,WACA1W,SAASgV,W,6CAnEJZ,GAAY,oG,wBAAZA,EAAY,sFALjB,yBACA,4B,wCAID,G,eCnDP,MAAMrI,GAAiB,CACnB,CAAE3G,KAAM,eAAgBuR,UAAW,OACnC,CAAEvR,KAAM,gBAAiBuR,UAAW,OACpC,CACIvR,KAAM,YACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,gFAAuCle,KAClCme,GAAMA,EAAEC,kBAGrB,CACI5R,KAAM,OACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,uEAA6Ble,KAAMme,GAAMA,EAAEE,aAEnD,CACI7R,KAAM,UACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,4EAAmCle,KAAMme,GAAMA,EAAEG,gBAEzD,CACI9R,KAAM,UACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,6EAAmCle,KAAMme,GAAMA,EAAEI,gBAEzD,CACI/R,KAAM,YACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,iFAAuCle,KAClCme,GAAMA,EAAEK,kBAGrB,CACIhS,KAAM,WACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,+EAAqCle,KAAMme,GAAMA,EAAEM,oBAE3D,CACIjS,KAAM,OACNwR,YAAa,CAAC,OACdC,QAAS,CAAC,OACVC,aAAc,IACV,sEAA6Ble,KAAMme,GAAMA,EAAEO,aAEnD,CAAElS,KAAM,KAAMmS,WAAY,YAAaC,UAAW,SAO/C,a,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAHA,CAAC,aAAqB1L,GAAQ,CAAE2L,SAAS,KACxC,Q,GAEP,G,qJCzCA,a,MAAMC,G,6CAAAA,I,wBAAAA,I,4BARA,CACL,MACA,KACA,KACA,S,GAID,G,eCwBA,a,MAAMC,G,6CAAAA,I,wBAAAA,EAAS,WAFNxD,M,6BAZD,CACP,CACIyD,QAAS,MACTC,SAAU,KAA0B,CAChCC,YAAY,KAGpB,CACIF,QAAS,KACTG,KAAM,CAAC,QAEd,SAzBQ,CACL,KACA,KACAP,GACA,cAA6B,iBAAkB,CAC3CQ,SC9BE,IDgCN,KACA,KACAN,GACA,KACA,KACA,S,GAgBD,IE/CL,WAGF,OACGO,gBAAgBN,IAChB7B,MAAOoC,GAAQzM,QAAQgL,MAAMyB,K,6OCUpB,oBACI,eAA0B,iBAAK,QACnC,S,wCAII,kBACI,iBAAO,gBAAI,QACX,kCACI,oEACH,QACL,Q,yBAFQ,kC,yBAKJ,eACI,S,gBACJ,S,sBADI,wD,wCAEJ,2BAEI,oEACH,Q,yBADG,yB,wCAGR,kBACI,iBAAO,kBAAM,QACb,6BACI,oBAEI,sEAFJ,QAKJ,QACJ,Q,yBAJY,oC,wCAvBpB,SACI,kBACI,uBAMA,iBACI,iBAAO,gBAAI,QACX,uBAGA,iCAIJ,QACA,wBAUA,aACI,UAGJ,QACJ,QACA,sBACI,sBAAmB,6DAAoB,oBAAO,QAClD,QACJ,Q,wBAnCyC,sCAQvB,uCAID,sCAI+B,sCAWpC,wK,yBAUR,mBACI,0BACA,aAAG,SAAa,QACpB,S,qBAFiB,8BACV,2BAaZ,Y,MAAMC,EA4BT,YACqCnX,EACzB5B,GADyB,KAAA4B,QACzB,KAAA5B,YA7BK,KAAA/C,MAAQ,IAAI,MAEb,KAAA8J,MAAQtM,KAAKmH,MAAMmF,OAAS,GAErC,KAAA/M,KAAOS,KAAKmH,MAAM5H,KAClB,KAAAwP,KAAO/O,KAAKmH,MAAM4H,KAET,KAAAwP,aAAeve,KAAKmH,MAAMoX,aAEnC,KAAAC,OAASxe,KAAKmH,MAAMqX,OAEX,KAAAlX,MAAQtH,KAAKmH,MAAMG,MAInC,gBACI,OAAOtH,KAAKsM,MAAMhK,IAAK2G,GAAMA,EAAEpB,MAAMkF,KAAK,MAG9C,kBACI,QAAS/M,KAAKuF,UAAUM,IAAI,yBAGhC,mBACI,QAAS7F,KAAKuF,UAAUM,IAAI,0BAQzB,UACH7F,KAAKiF,QAAU,6BACfjF,KAAKwC,MAAMa,KAAK,CAAEmb,OAAQ,U,6CAnCrBF,GAAyB,MA6BtB,MAAe,c,wBA7BlBA,EAAyB,u0B,GAAA,MA7D9B,kBACI,cAAI,2BAAe,QACnB,iBACA,0BAGJ,QACA,iCAsCA,2C,sBA1C8C,kCAI/B,kCAAgB,gB,mKAsDhC,G,sDCzEC,iBACI,gBAAwB,kCAAsB,QAC9C,kBACI,iBACI,iBACI,iEACK,gBAAM,aAAC,QAChB,QACA,6BAII,+BAAiC,gBAAG,QACpC,+BAAkC,eAAE,QACxC,QACJ,QACA,kBACI,kBACI,2EACS,iBAAM,cAAC,QACpB,QACA,8BACI,+BAAiC,gBAAG,QACpC,+BAAkC,eAAE,QACxC,QACJ,QACA,kBACI,kBACI,uEACS,iBAAM,cAAC,QACpB,QACA,+BAII,+BAAiC,gBAAG,QACpC,+BAAkC,eAAE,QACxC,QACJ,QACJ,QACA,sBACI,sBAAmB,4DAAmB,mBAAM,QAChD,QACA,sBACI,iBAA0B,kBAAK,QACnC,QACJ,Q,wBA5CsB,mCAUY,2BACA,2BASA,2BACA,2BAYA,2BACA,4B,sBAY9B,mBACI,gBACI,wPAIJ,QACA,qBACI,gBAA0B,iBAAK,QACnC,QACJ,SAkBL,Y,MAAMG,EA/Eb,cAgFqB,KAAAjc,MAAQ,IAAI,MAKtB,WACHxC,KAAK0e,KAAO,IAAI,KAAU,CACtBC,UAAW,IAAI,KAAY,GAAI,CAAC,gBAChCC,OAAQ,IAAI,KAAY,GAAI,CAAC,gBAC7BC,QAAS,IAAI,KAAY,GAAI,CAAC,kBAI/B,SACH7e,KAAK0e,KAAKI,mBACL9e,KAAK0e,KAAKK,MAIX1Z,OAAOnG,KAAKc,KAAK0e,KAAKhZ,OAAO/C,KACxBgP,IAC4B,IAAzB3R,KAAK0e,KAAKhZ,MAAMiM,IACS,SAAzB3R,KAAK0e,KAAKhZ,MAAMiM,IAGxB3R,KAAKgf,SAAU,EAGnBhf,KAAKwC,MAAMa,KAAK,CAAEmb,OAAQ,UAZtB,QAAY,uC,6CAjBXC,I,wBAAAA,EAA2B,4mB,GAAA,MA5EhC,wBA+CA,2C,sBA/CM,yBAAgB,gB,gNA4EvB,G,mNCtEA,MAAM,EA0DT,YAAY7W,EAAyB,I,QACjC5H,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAK8Z,SAAWlS,EAAKkS,UAAY,GACjC9Z,KAAK2N,MAAQ/F,EAAK+F,OAAS,GAC3B3N,KAAKyZ,cACD7R,EAAK6R,gBACL,EAAAN,EAAA,GACIvR,EAAKrI,OACD,EAAA0f,EAAA,IAAsB,EAAApW,EAAA,GAAW,IAAIoM,KAAQ,GAAI,CAC7CiK,UAAW,KAG3Blf,KAAK0Z,YACD9R,EAAK8R,cACL,EAAAP,EAAA,IAAY,EAAAtQ,EAAA,GAAgC,IAArB7I,KAAKyZ,cAAsB7R,EAAKnI,UAAY,KACvEO,KAAKmf,aAAevX,EAAKuX,cAAgB,GACzCnf,KAAKqK,KAAOzC,EAAKyC,MAAQ,UACzBrK,KAAKT,KAAOqI,EAAKrI,MAA6B,IAArBS,KAAKyZ,cAC9BzZ,KAAKP,SACDmI,EAAKnI,UACLqB,KAAKse,KAAI,EAAA/W,EAAA,GACgB,IAArBrI,KAAKyZ,cACc,IAAnBzZ,KAAK0Z,cAEb1Z,KAAKqP,SACDzH,EAAKyH,UAAYgQ,KAAKC,iBAAiBC,kBAAkBC,SAC7Dxf,KAAK6Z,WAAajS,EAAKiS,YAAc,GACrC7Z,KAAK2Z,QAAU/R,EAAK+R,SAAW,GAC/B3Z,KAAK4Z,UAAYhS,EAAKgS,WAAa,GACnC5Z,KAAKmP,MAAQvH,EAAKuH,OAAS,eAC3BnP,KAAKuJ,YAAc3B,EAAK2B,aAAe,GACvCvJ,KAAK2Q,aAAe/I,EAAK+I,WACzB3Q,KAAKga,WAAapS,EAAKoS,SACvBha,KAAKuZ,WAAa3R,EAAK2R,SACvBvZ,KAAKia,YAAcrS,EAAKqS,aAAe,GACvCja,KAAKma,eAAiBvS,EAAKuS,gBAAkB,GAC7Cna,KAAKka,cAAgBtS,EAAKsS,eAAiB,GAC3Cla,KAAK2P,eAAiB/H,EAAK+H,gBAAkB,GAC7C3P,KAAK+Z,UAA8B,QAAnB,EAAAnS,EAAK+H,sBAAc,eAAEoK,QACrC/Z,KAAKsP,QAAsB,QAAZ,EAAA1H,EAAK0H,eAAO,SAC3BtP,KAAK4L,OAAS5L,KAAKga,SACb,WACAha,KAAKuZ,SACL,WACA,YACN,IAAK,MAAM5H,KAAO/J,EACR+J,KAAO3R,OACTA,KAAK2P,eAAegC,GAChB/J,EAAK+J,IAAQ3R,KAAK2P,eAAegC,IAK1C,SACH,MAAM/J,EAAO,OAAH,UAAQ5H,MAIlB,OAHKA,KAAKb,WAAWyI,EAAKzI,UACnByI,EAAKrI,YACLqI,EAAKnI,SACLmI,EAGX,eACI,OAAO5H,KAAKuJ,YAIhB,eACI,OAAO,EAAAkW,EAAA,GAAUzf,KAAKT,KAAM,IAAI0V,MAIpC,cACI,MAAMhV,EAAQ,IAAIgV,KACZ7U,EAAMJ,KAAKsP,SACX,EAAAkM,EAAA,GAASxb,KAAKT,KAAM,KACpB,EAAAsJ,EAAA,GAAW7I,KAAKT,KAAMS,KAAKP,UACjC,OAAO,EAAA0C,EAAA,GAAQlC,EAAOG,I,cC7H9B,MAAMsf,EAAoB,yBAMnB,SAASC,EAAcxP,GAC1B,MAAMyP,GAAQ,OAAczP,GAC5B,OAAO,SAAI,GAAGuP,IAAoBE,EAAQ,IAAMA,EAAQ,MAAMjE,MAC1D,OAAKkE,GAASA,EAAKvd,IAAK8E,GAAS,IAAI,EAAQA,MAS9C,SAAS0Y,EAAY3gB,GACxB,OAAO,SAAI,GAAGugB,KAAqBK,mBAAmB5gB,MAAOwc,MACzD,OAAKvU,GAAS,IAAI,EAAQA,KAoC3B,MAAM4Y,EAAepY,GACxBA,EAAKzI,GAjBF,SACHA,EACAyI,EACA4D,EAA0B,SAE1B,OAAmB,UAAXA,EAAqB,MAAQ,OACjC,GAAGkU,KAAqBK,mBAAmB5gB,KAC3CyI,GACF+T,MAAK,OAAKvU,GAAS,IAAI,EAAQA,KASvBiT,CAAczS,EAAKzI,GAAIyI,GA7B9B,SAAuBA,GAC1B,OAAO,SAAK,GAAG8X,IAAqB9X,GAAM+T,MACtC,OAAKvU,GAAS,IAAI,EAAQA,KA2BW6Y,CAAcrY,GAOpD,SAASsY,EAAc/gB,GAC1B,OAAO,SAAI,GAAGugB,KAAqBK,mBAAmB5gB,KAAO,CACzDghB,cAAe,S,eCrDvB,MAAMC,GAAe,CAAC,cA+Bf,a,MAAMC,UAA2B,KAoJpC,YACYC,EACA9F,EACA+F,GAER/a,QAJQ,KAAA8a,UACA,KAAA9F,OACA,KAAA+F,UAtJJ,KAAAC,MAAQ,IAAIC,EAAA,EAAiC,QAC7C,KAAAC,SAAW,IAAID,EAAA,EAAoC,CACvDpW,KAAM,SAEF,KAAAsW,MAAQ,IAAIF,EAAA,EAA2B,MACvC,KAAAG,YAAc,IAAIH,EAAA,EAAkC,IACpD,KAAAI,SAAW,IAAIJ,EAAA,EAAyB,MACxC,KAAAK,SAAW,IAAIL,EAAA,EAAwB,IAExC,KAAAM,aAAwB,IAAI,EAC/BC,KAAKC,MACDC,eAAejG,QAAQ,gCAAkC,OAGjD,KAAAhW,QAAUjF,KAAK8gB,SAASK,eACxB,KAAAjZ,QAAUlI,KAAK0gB,SAAS/E,MAAK,EAAAyF,EAAA,GAAY,IAEzC,KAAAC,OAAqCrhB,KAAKkI,QAAQyT,MAC9D,EAAA2F,EAAA,GAAwB,YACxB,EAAAC,EAAA,GAAU,EAAGlX,WACT,IAAKrK,KAAKwa,KAAKvQ,SAAU,OAAO,EAAAuX,MAAG,IACnC,OAAQnX,GACJ,IAAK,OAED,OADArK,KAAK8gB,SAAS9S,KAAK,qBACZ,SAAkBhO,KAAKwa,KAAKvQ,SAAS9K,GAAI,CAC5C0I,KAAM,UACP8T,MACC,OAAK/T,IACD,QACIA,EAAKtF,IAAK2G,I,MACN,QACoB,QAAhB,EAAAA,EAAEsC,SAASe,aAAK,eAAEvB,UAAW,IAC/BzI,IAAKsL,GAAO,OAAD,wBAAMA,GAAC,CAAEpB,KAAMvD,EAAEuD,aAMtD,OAAO,EAAAgV,MAAG,OAEd,EAAAC,EAAA,GAAI,IAAMzhB,KAAK8gB,SAAS9S,KAAK,MAC7B,EAAAoT,EAAA,GAAY,IAGA,KAAAzZ,SAAiC3H,KAAKqhB,OAAO1F,MACzD,OAAK0F,I,MACD,MAAMxB,EAAiB,GACvB,IAAK,MAAM6B,KAASL,EACF,QAAd,EAAAK,EAAM/Z,gBAAQ,SAAEoI,QAAS9G,GAAM4W,EAAKre,KAAKyH,IAE7C,OAAO,QAAO4W,GAAMpR,KAAK,CAACC,EAAGC,IAAMD,EAAEiT,cAAchT,OAEvD,EAAAyS,EAAA,GAAY,IAGA,KAAAQ,kBAAmB,EAAAC,EAAA,IAAc,CAC7C7hB,KAAKkI,QACLlI,KAAKqhB,OACLrhB,KAAK4gB,cACNjF,MACC,EAAAmG,EAAA,GAAa,MACb,EAAAL,EAAA,GAAI,GAAIpX,WACJrK,KAAK8gB,SAAS9S,KAAK,YAAY3D,uBAEnC,EAAAkX,EAAA,GAAU,EAAErZ,EAASmZ,EAAQ3C,KACzBiB,EAAc,CACVpH,cAAc,EAAAY,EAAA,GAAYuF,EAAKnf,MAC/BiZ,YAAY,EAAAW,EAAA,IACR,EAAAtQ,EAAA,GAAW6V,EAAKnf,KAAMmf,EAAKjf,UAAY,OAE3C4K,KAAMnC,EAAQmC,KACdsD,MAAOzF,EAAQ6Z,UAChBpG,MACC,OAAKzH,GACDmN,EAAOrf,OACF0f,I,UACG,OAAmB,IAAnBA,EAAMnV,YACJrE,EAAQP,WACU,QAAhB,EAAAO,EAAQP,gBAAQ,eAAEqa,MAAO/Y,GACrByY,EAAM/Z,SAAS0I,SAASpH,SAE9Bf,EAAQ6Z,SACN7Z,EAAQ6Z,WAAsB,QAAV,EAAAL,EAAMlV,YAAI,eAAErN,KAChC+I,EAAQ6Z,WAAsB,QAAV,EAAAL,EAAMlV,YAAI,eAAE7C,cACnCuK,EAASvR,KAAMuS,GAAQA,EAAI4E,WAAa4H,EAAMviB,UAKnE,EAAAsiB,EAAA,GAAI,IAAMzhB,KAAK8gB,SAAS9S,KAAK,MAC7B,EAAAoT,EAAA,GAAY,IAGA,KAAAa,sBAAuB,EAAAJ,EAAA,IAAc,CACjD7hB,KAAKkI,QACLlI,KAAK4hB,mBACNjG,MACC,OAAI,EAAEzT,EAASmZ,M,MACX,MAAMngB,EAAS,GACTghB,EAAa,IAAIb,GAAQ5S,KAAK,CAACC,EAAGC,KAAK,UACzC,OAAU,QAAV,EAAM,QAAN,EAAAD,EAAElC,YAAI,eAAErN,UAAE,eAAEwiB,cAAoB,QAAN,EAAAhT,EAAEnC,YAAI,eAAErN,MAEhCgjB,GAAyB,QAAf,EAAAja,EAAQia,eAAO,eAAEze,QAC3BwE,EAAQia,QACR,EAAC,WACP,KAAOD,EAAWxe,QAAQ,CACtB,MAAMyE,EAAQ,GACd,IAAIuZ,EAAQQ,EAAWE,MACvB,KAAOja,EAAMzE,OAASye,EAAQze,UAEtByE,EAAMzE,QACLyE,EAAMxF,KAAMsG,IAAK,QAAC,OAAM,QAAN,EAAAA,EAAEuD,YAAI,eAAErN,OAAiB,QAAV,EAAAuiB,EAAMlV,YAAI,eAAErN,QAIlDgJ,EAAM3G,KAAKkgB,GACXA,EAAQQ,EAAWE,MAEnBja,EAAMzE,OAASye,EAAQze,QAC3BxC,EAAOM,KAAK2G,GAEhB,OAAOjH,KAgCXlB,KAAKqiB,aACD,kBACAriB,KAAKsgB,QAAQve,OAAOugB,UAAWC,IAEvBA,aAAmB,OAClBnC,GAAazd,KAAMsG,GAAMsZ,EAAQC,IAAInS,SAASpH,KAE/CjJ,KAAKyiB,eAIjBziB,KAAKwa,KAAKkB,YACLC,MAAK,EAAAC,EAAA,GAAO3S,GAAMA,IAClBqZ,UAAU,IAAMtiB,KAAK0iB,WAAW,KAzCzC,WACI,OAAO1iB,KAAKwgB,MAAMmC,WAGtB,WACI,OAAO3iB,KAAK2gB,MAAMgC,WAGtB,cACI,OAAO3iB,KAAK6gB,SAAS8B,WAGlB,QAAQJ,EAAmB,IAAI,GAClCviB,KAAK2gB,MAAM3S,KCzMZ,SAA6BuU,GAChC,MAAM7D,EAAO,IAAI,KAAU,CACvBvf,GAAI,IAAI,KAAYojB,EAAQpjB,IAAM,IAClCI,KAAM,IAAI,KAAYgjB,EAAQhjB,KAAM,IACpCE,SAAU,IAAI,KAAY8iB,EAAQ9iB,UAClC0f,aAAc,IAAI,KAAYoD,EAAQpD,cACtCxR,MAAO,IAAI,KAAY4U,EAAQ5U,OAC/BwB,MAAO,IAAI,KAAYoT,EAAQpT,OAC/B5F,YAAa,IAAI,KAAYgZ,EAAQhZ,aACrCuQ,SAAU,IAAI,KAAYyI,EAAQzI,UAClC5J,KAAM,IAAI,MAAY,WACtByJ,QAAS,IAAI,KAAY4I,EAAQ5I,SACjCE,WAAY,IAAI,KAAY0I,EAAQ1I,YACpC+I,UAAW,IAAI,MAAY,WAC3BC,aAAc,IAAI,KAAYN,EAAQM,cACtCC,gBAAiB,IAAI,KAAYP,EAAQO,mBAiB7C,OAfApE,EAAKqE,aAAaT,UAAWU,IACzB,MAAM9S,EAAO8S,EAAE9S,KACT+S,EAASD,EAAEJ,WACjBK,GAAU/S,IACJwO,EAAKwE,WACD,CACIvJ,QAASzJ,EAAK/Q,IAAM8jB,EAAO9jB,GAC3B0a,WAAY3J,EAAKlF,OAASiY,EAAO9jB,GACjC0jB,aAAcI,EAAO9jB,GACrB2jB,gBAAiBG,EAAOjY,OAE5B,CAAEmY,WAAW,MAIpBzE,EDyKa0E,CAAoBb,IACpCviB,KAAKqiB,aACD,cACAriB,KAAK2gB,MAAMgC,WAAWI,aAAaT,UAAU,IAAMtiB,KAAKqjB,cAE5DrjB,KAAK6gB,SAAS7S,KAAKuU,GACnBviB,KAAK0gB,SAAS1S,KAAK,CAAE3D,KAAMrK,KAAK0gB,SAASiC,WAAWtY,OAyBjD,QAAQ3E,GACX1F,KAAKwgB,MAAMxS,KAAKtI,GAGb,WAAWA,GACd1F,KAAK0gB,SAAS1S,KAAK,OAAD,wBAAMhO,KAAK0gB,SAASiC,YAAejd,IAGlD,YACE1F,KAAK2gB,MAAMgC,YAAY3iB,KAAKsjB,UACjC,MAAMf,EAAUviB,KAAK6gB,SAAS8B,WAC9B3iB,KAAK2gB,MAAMgC,WAAWO,WAAW,OAAD,wBACxBX,GAAW,KACXA,aAAO,EAAPA,EAAS5S,iBAAkB,KAEnC3P,KAAK0gB,SAAS1S,KAAK,CAAE3D,KAAMrK,KAAK0gB,SAASiC,WAAWtY,OAGjD,YACH6W,eAAeqC,WAAW,wBAC1BrC,eAAeqC,WAAW,gCAC1BvjB,KAAKsjB,UAGF,Y,QACHpC,eAAelG,QACX,uBACAgG,KAAKwC,WAA+B,QAArB,EAAAxjB,KAAK2gB,MAAMgC,kBAAU,eAAEjd,QAAS,KAEnDwb,eAAelG,QACX,+BACAgG,KAAKwC,UAAUxjB,KAAK0gB,SAASiC,YAAc,KAE/C3iB,KAAK4gB,YAAY5S,MAA0B,QAArB,EAAAhO,KAAK2gB,MAAMgC,kBAAU,eAAEjd,QAAS,IAGnD,WACE1F,KAAK2gB,MAAMgC,YAAY3iB,KAAKsjB,UACjCtjB,KAAK2gB,MAAMgC,WAAWO,WAAW,OAAD,UACzBlC,KAAKC,MACJC,eAAejG,QAAQ,yBAA2B,QAG1Djb,KAAK0iB,WAAW,OAAD,QACXX,QAAS/hB,KAAKwa,KAAKvQ,SAAS9K,IACzB6hB,KAAKC,MACJC,eAAejG,QAAQ,iCAAmC,QAKzD,c,oDACHjb,KAAKyjB,iBACX,MAAMvb,EAAUlI,KAAK0gB,SAASiC,WACxBjE,EAAO1e,KAAK2gB,MAAMgC,WAClB5X,QAAgB,QAClB,CACIoE,MAAO,QAAQjH,EAAQmC,OACvB/G,QAAS,8BAA8B4E,EAAQmC,QAC3CqU,EAAK7Y,IAAI,YAAYH,cACjB,EAAAjE,EAAA,GAAOid,EAAK7Y,IAAI,QAAQH,MAAO,iBACvCge,KAAM,CAAEpgB,QAAS,oBAErBtD,KAAKugB,SAEe,UAApBxV,aAAO,EAAPA,EAASyT,UACbzT,EAAQ9F,QAAQ,uCACVjF,KAAK2jB,WAAW1H,MAAOhT,IAGzB,MAFA,QAAYA,GACZ8B,EAAQ6Y,QACF3a,IAEV8B,EAAQ6Y,WAGC,W,8CACT,MAAMlF,EAAO1e,KAAK2gB,MAAMgC,WACxB,IAAKjE,EAAM,KAAM,sBACjB,IAAKA,EAAKK,MACN,KAAM,mCAAkC,QAAiBL,GAAM3R,KAC3D,SAER,MAAM+M,EAAW4E,EAAK7Y,IAAI,YAAYH,MAChCwO,QAAiByL,EAAc,CACjCpH,cAAc,EAAAY,EAAA,GAAYuF,EAAK7Y,IAAI,QAAQH,OAC3C8S,YAAY,EAAAW,EAAA,GACRuF,EAAK7Y,IAAI,QAAQH,MAAqC,GAA7BgZ,EAAK7Y,IAAI,YAAYH,MAAa,KAE/D2E,KAAMrK,KAAK0gB,SAASiC,WAAWtY,OAChCwR,YACH,GAAI3H,EAASvR,KAAMsG,GAAMA,EAAE6Q,WAAaA,GACpC,KAAM,GAAGA,0CACb,GACI5F,EAASvR,KACJsG,I,MACG,OAAAA,EAAE4Q,cACD6E,EAAKhZ,MAAMmU,aAA2B,QAAb,oBAAa,eAAE7O,UAGjD,KAAM,iCACV,MAAM6Y,QAAe7D,EAAY,IAAI,EAAQtB,EAAKhZ,QAAQmW,YAQ1D,OAPA7b,KAAKyiB,YACLziB,KAAK+gB,aAAe8C,EACpB3C,eAAelG,QACX,8BACAgG,KAAKwC,UAAUK,IAEnB7jB,KAAK8jB,QAAQ,WACND,IAGG,iB,8CACV,MAAME,EAAM/jB,KAAKugB,QAAQyD,KAAKvF,GACxBoF,QAAejlB,QAAQqlB,KAAK,CAC9BF,EAAIG,kBAAkB1hB,MACjBmZ,MAAK,EAAAC,EAAA,GAAO3S,GAAmB,SAAbA,EAAEuV,SACpB3C,YACLkI,EAAII,cAActI,cAEtB,GAAuB,UAAnBgI,aAAM,EAANA,EAAQrF,QAAmB,KAAM,iBACrC,MAAME,EAAOqF,EAAIG,kBAAkBxF,KAAKhZ,MACxC,IAAK,MAAMiM,KAAO+M,EACd,GAAIA,EAAK/M,GAAM,KAAM,2BAEzBoS,EAAIH,W,6CAtSCvD,GAAkB,uC,0BAAlBA,EAAkB,QAAlBA,EAAkB,qBAFf,S,GAET,G,yBE9CA,a,MAAM+D,EAIT,YACY5J,EACA+F,GADA,KAAA/F,OACA,KAAA+F,UALL,KAAAhC,cAAe,EACf,KAAA8F,eAAgB,EAOV,UAAS,MAClB/X,EAAK,KACLyC,EAAI,OACJyP,EAAM,UACNhQ,EAAS,KACTjP,I,oDAQA,GAAIS,KAAKqkB,gBAAkBtV,EACvB,OAAO,QAAY,6CAEnBA,EAAOA,IAAQ,UAEnByP,EAASA,GAAU,GACnB,MAAMlX,EAAQtH,KAAKwa,KAAK8J,YACpBhY,EAAM,GAAGE,gBAAgBzD,MAAQuD,EAAM,GAAGE,KAAO,CAAc,QAAb,EAAAF,EAAM,GAAGE,YAAI,eAAErN,KAErE,IAAI4kB,EAAyB/jB,KAAKugB,QAAQyD,KACtCvF,GAEA8F,QAAgB3lB,QAAQqlB,KAAK,CAC7BF,EAAIG,kBAAkB1hB,MACjBmZ,MAAK,EAAAC,EAAA,GAAO3S,GAAgC,SAAbA,EAAEuV,SACjC3C,YACLkI,EACKI,cACAxI,MAAK,OAAK1S,GAAM,OAChB4S,cAET,IAAK0I,EAAS,OAqBd,GApBAR,EAAIH,QACJG,EAAM/jB,KAAKugB,QAAQyD,KAAK1F,EAA2B,CAC/C1W,KAAM,CACFmH,OACAzC,QACA/M,KAAMA,EAAO,IAAI0V,KAAK1V,GAAQ,IAAI0V,KAClCuJ,SACAlX,QACAiX,aAAcve,KAAKue,gBAG3BgG,QAAgB3lB,QAAQqlB,KAAK,CACzBF,EAAIG,kBAAkB1hB,MACjBmZ,MAAK,EAAAC,EAAA,GAAO3S,GAAgC,SAAbA,EAAEuV,SACjC3C,YACLkI,EACKI,cACAxI,MAAK,OAAK1S,GAAM,OAChB4S,eAEJ0I,EAAS,OAId,GAFAhlB,EAAOwkB,EAAIG,kBAAkB3kB,MAAQA,EACrCif,EAASuF,EAAIG,kBAAkB1F,QAAUA,IAFzCzP,EAAOgV,EAAIG,kBAAkBnV,MAAQA,GAKjC,OADAgV,EAAIH,SACG,QAAY,8CAEvBG,EAAIG,kBAAkBjf,QAClB,yCACJ,MAKMuf,SALiB7E,EAAc,CACjCtV,KAAM,OACNkO,cAAc,EAAAY,EAAA,IAAY,EAAAD,GAAA,GAAW3Z,GAAQ,IAAI0V,OACjDuD,YAAY,EAAAW,EAAA,IAAY,EAAAsL,GAAA,GAASllB,GAAQ,IAAI0V,SAC9C4G,aACwB7Z,OACtB4L,GAAMA,EAAEiM,WAAW7M,gBAAkB+B,EAAK/D,MAAMgC,eAErD,GAAIwX,aAAS,EAATA,EAAW9gB,OAEX,OADAqgB,EAAIH,SACG,QACH,mEAGRG,EAAIG,kBAAkBjf,QAAU,kBAChC,MAAMoR,EAAQ,CAACtH,KAAUP,GAAa,IActC,aAbM5P,QAAQ8lB,IAAI,CACdpY,EAAMhK,IAAI,CAACqiB,EAAMzb,IACblJ,KAAK4kB,gBACDD,EACA5V,EACAxP,EAAKC,YAAa,IAAIyV,MAAOzV,UAC7Bgf,EACAnI,EAAMnN,QAIlB,QAAc,4BACd6a,EAAIH,SACG,IAGG,gBACVe,EACA5V,EACAxP,EACAif,EACAqG,EAAiB,M,0DAEjB,MAAM3e,EAAW,GAAY,QAAT,EAAAye,EAAKnY,YAAI,eAAE3E,QAAQ8c,EAAKxlB,KACtCmI,EAAQtH,KAAKwa,KAAK8J,YACpBK,EAAKnY,gBAAgBzD,MAAQ4b,EAAKnY,KAAO,CAAU,QAAT,EAAAmY,EAAKnY,YAAI,eAAErN,KAEnDwO,GAAiB,QAAT,EAAAgX,EAAKnY,YAAI,eAAErN,IACnB,CAAU,QAAT,EAAAwlB,EAAKnY,YAAI,eAAErN,GAAImI,aAAK,EAALA,EAAOqC,WACvB,CAACrC,aAAK,EAALA,EAAOqC,WACRmb,EAAe,CACjBrL,eAAe,EAAAN,EAAA,IAAY,EAAAD,GAAA,GAAW3Z,IACtCoa,SAASkL,aAAQ,EAARA,EAAU1lB,KAAM4P,EAAK5P,GAC9Bya,WAAWiL,aAAQ,EAARA,EAAUhd,OAAQkH,EAAKlH,KAClCgS,YAAYgL,aAAQ,EAARA,EAAU7Z,QAAS+D,EAAK/D,MACpC0O,YAAa5Y,KAAKC,OAAM,EAAA0jB,GAAA,GAASllB,GAAMC,UAAY,KACnDsa,SAAU6K,EAAKxlB,GACfgQ,MAAOqP,EACPjV,YAAarD,EACbyH,QACAwR,aAAc,OACdxP,eAAgB,CACZzO,OAAQyjB,EAAKzjB,OACb2jB,SAAUA,aAAQ,EAARA,EAAU7Z,QAG5B,OAAOgV,EAAY8E,GAAqBjJ,e,6CAxInCuI,GAAY,2B,0BAAZA,EAAY,QAAZA,EAAY,qBAFT,S,GAET,I,kLCAA,Y,MAAMW,UAAwB,KAejC,YAAoBvK,GAChBhV,QADgB,KAAAgV,OAdH,KAAAwK,WAAa,IAAIvE,EAAA,EAA4B,IAG9C,KAAAwE,cAAgBjlB,KAAKglB,WAAW7D,eAGhC,KAAAvB,MAAQ,KAAM,UAEd,KAAAsF,SAAY/U,IACxB,QAAmBA,EAAGnQ,KAAKwa,MAEf,KAAA2K,aAAgBhV,IAC5B,QAA0BA,GAI1BnQ,KAAKwa,KAAKkB,YACLC,MAAK,EAAAC,EAAA,GAAO3S,GAAMA,IAClBqZ,UAAU,IAAMtiB,KAAKolB,QAGjB,O,oDACHplB,KAAKqlB,OAAOpJ,MAAOoC,IACrB,QAAY,iCAEhBre,KAAKslB,aAAatX,MAAK,KAG3B,gBACI,OAAOhO,KAAKglB,WAAWrC,WAOpB,gBAAgBpjB,EAAcgmB,GACjC,OAAO,QACH,CACIhN,cAAc,EAAAY,EAAA,IAAY,EAAAD,EAAA,GAAW3Z,IACrCiZ,YAAY,EAAAW,EAAA,IAAY,EAAAsL,EAAA,GAASllB,IACjCgmB,aAEJvlB,KAAKwa,MAKA,wBACTzB,EACAR,EACAC,EACAgN,G,8CAEA,MAAM3B,QAAe,QAA0B,CAC3CtL,eACAC,aACAO,WAAYA,EAAWhM,KAAK,OAC7B8O,YACG5b,EAAQ,IAAIgV,KAAKuQ,aAAW,EAAXA,EAAajmB,MAAMC,UACpCY,GAAM,EAAAyI,EAAA,GAAW5I,EAAOulB,aAAW,EAAXA,EAAa/lB,UAAUD,UAgBrD,QAfkBqkB,EAAO7B,MAAO/f,I,MAC5B,MAAMkjB,EAAeljB,EAAEkjB,aACvB,GAAIK,GAAevjB,EAAE9C,MAAyB,QAAlB,EAAAqmB,EAAY9V,cAAM,eAAE1E,OAAO,CACnD,MAAMsD,EAAQ6W,EAAazM,UAAWtV,GAE9BA,EAAM7D,MAAQU,IACd,EAAA4I,EAAA,GAAWzF,EAAM7D,KAAM6D,EAAM3D,UAAUD,WAAaY,IAG7C,IAAXkO,GACA6W,EAAaxM,OAAOrK,EAAO,GAGnC,OAAQ6W,EAAazhB,WAKhB,O,8CACT1D,KAAKglB,WAAWhX,WAAW,UAAiB6N,gB,6CAjFvCkJ,GAAe,c,0BAAfA,EAAe,QAAfA,EAAe,qBAFZ,S,GAET,I,qECdA,MAAMU,EAkBT,YAAY7d,EAA0B,IAClC5H,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAK6H,KAAOD,EAAKC,MAAQ,GACzB7H,KAAK0lB,UAAY9d,EAAK8d,QACtB1lB,KAAK2lB,QAAU/d,EAAK+d,SAAW,GAC/B3lB,KAAK4lB,WAAahe,EAAKge,SACvB5lB,KAAK6O,SAAW,IAAI,IAAMjH,EAAKiH,UAAajH,EAAa8H,QACzD1P,KAAKmlB,cAAgBvd,EAAKud,cAAgB,IAAI7iB,IAC1C,EAAGujB,YAAWC,UAASvmB,OAAME,WAAUmM,aAC5B,CACHrM,KAAM,IAAI0V,KAAK1V,EAAMsmB,GAAWrmB,UAChCC,SACIA,IAAY,OAAoBqmB,EAASD,GAC7Cja,OAAQA,KAIpB5L,KAAK8F,SAAW8B,EAAK9B,U,+HC9B7B,MAAMigB,EAAoB,0BAGnB,SAASC,IACZ,OAAO,SAAID,GAAmBpK,MAC1B,OAAK1Z,GAAMA,EAAEK,IAAKoI,GAAM,IAAI,IAASA,MAKtC,SAASub,EACZ9V,GAEA,MAAMyP,GAAQ,QAAczP,GAC5B,OAAO,SACH,GAAG4V,iBAAiCnG,EAAQ,IAAMA,EAAQ,MAC5DjE,MAAK,OAAK1Z,GAAMA,EAAEK,IAAKoI,GAAM,IAAI,IAASA,MAGhD,MAAMwb,EAAqBC,IACvB,OAAKtG,GACDA,EACK7d,OAAQokB,KAAUA,EAAIvX,UACtBvM,IACI8jB,GACG,IAAI,IAAM,OAAD,wBACFA,EAAIvX,UAAQ,CACfvH,MAAO6e,aAAG,EAAHA,EAAK7B,YAAY8B,EAAIvX,SAASlB,OACrCwX,aAAciB,EAAIjB,iBAG7BnjB,OAAQ4M,GAAUA,EAAMrC,WAI9B,SAAS8Z,EACZlW,EACAgW,GAEA,OAAOF,EAA0B9V,GAAGwL,KAAKuK,EAAkBC,IAIxD,SAASG,EACZnW,EACAgW,GAEA,MAAMvG,GAAQ,QAAczP,GAC5B,OAAO,SACH,GAAG4V,cAA8BnG,EAAQ,IAAMA,EAAQ,MACzDjE,MACE,OAAK1Z,GAAMA,EAAEK,IAAKoI,GAAM,IAAI,IAASA,KACrCwb,EAAkBC,M,6CC7DnB,MAAMI,EA0BT,YAAY3e,EAA8B,I,MACtC5H,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAK6H,KAAOD,EAAKC,MAAQD,EAAKzI,IAAM,GACpCa,KAAKiI,SAAWL,EAAKK,UAAY,GACjCjI,KAAKgI,WAAaJ,EAAKI,YAAc,EACrChI,KAAKuJ,YAAc3B,EAAK2B,aAAe,GACvCvJ,KAAKmJ,SAAWvB,EAAKuB,UAAY,EACjCnJ,KAAKwmB,aAAe5e,EAAK4e,cAAgB,EACzCxmB,KAAKymB,gBAAkB7e,EAAK6e,cAC5BzmB,KAAKkI,QAAUN,EAAKM,SAAW,GAC/BlI,KAAKwJ,KAAO5B,EAAK4B,MAAQ,GACzBxJ,KAAK0mB,YACA1mB,KAAKgI,WACFhI,KAAKkI,QACA5F,IAAKL,GAAMA,EAAE+F,YAAc,GAC3BwC,OAAO,CAACE,EAAGgE,IAAMhE,EAAIgE,EAAG,IACjC1O,KAAKmJ,SAETnJ,KAAK2mB,gBACW,QAAZ,EAAA3mB,KAAKkI,eAAO,eACN5F,IAAK2G,GAAMA,EAAE9J,IAAM,IACpBsP,KAAK,CAACC,EAAGC,IAAMD,EAAEiT,cAAchT,IAC/B5B,KAAK,OAAQ,M,qEC5CvB,MAAM6Z,EAwBT,YAAYhf,EAA+B,I,QACvC5H,KAAKb,GAAKyI,EAAKzI,IAAM,UAAS,QAAU,QAAW,OACnDa,KAAK6mB,UAAYjf,EAAKif,WAAa,GACnC7mB,KAAKyI,SAAWb,EAAKa,WAAsB,QAAV,EAAAb,EAAKpF,aAAK,eAAErD,KAAM,GACnDa,KAAK8I,OAASlB,EAAKkB,OAAS,IAAIxG,IAAKL,GAAM,IAAI,IAAaA,IAC5DjC,KAAK8mB,WAAa9mB,KAAK8I,MAAM0B,OACzB,CAACuc,EAAQ3f,IAAS2f,EAAS3f,EAAK+B,SAChC,GAEJnJ,KAAK0mB,WAAa1mB,KAAK8I,MAAM0B,OACzB,CAACuc,EAAQ3f,IAAS2f,GAAU3f,EAAKsf,YAAc,GAC/C,GAEJ1mB,KAAK2I,YAAcf,EAAKe,aAAe,GACvC3I,KAAK4L,OAAShE,EAAKgE,QAAU,WAC7B5L,KAAK0I,eAAiBd,EAAKc,gBAAkB,GAC7C1I,KAAKwC,MAAQoF,EAAKpF,OAAS,KAC3BxC,KAAK4I,WACDhB,EAAKgB,YACJhB,EAAarI,OACJ,QAAV,EAAAS,KAAKwC,aAAK,eAAEjD,QACZ,IAAI0V,MAAO+R,a,+WC5CvB,MAAMC,EAAoC,CAAC,UAAW,QAAS,MAAO,OAAQ,MAKvE,Y,MAAMC,EAcT,cAZQ,KAAAC,eAAmD,GAEnD,KAAAC,kBAAiD,GAEjD,KAAAC,UAAsB,GAEtB,KAAAC,kBAAgC,GAEhC,KAAAC,QAAkB,EAKtBC,OAAOC,iBAAiB,UAAYjlB,IAChC,MAAMvD,EAAOe,KAAK0nB,QAAQllB,EAAMvD,MAAQ,IAAI+N,eACxChN,KAAK2nB,YAAc1oB,IACde,KAAKmnB,eAAeloB,KACrBe,KAAKmnB,eAAeloB,GAAQ,IAAIwhB,EAAA,EAAgB,MAChDzgB,KAAKonB,kBAAkBnoB,GAAQe,KAAKmnB,eAAeloB,GAAMkiB,gBAE7DnhB,KAAKmnB,eAAeloB,GAAM+O,OAAOhO,KAAKunB,SAClCvnB,KAAKqnB,UAAU5Z,QAAQxO,IAAS,GAChCuD,EAAMolB,iBAEV5nB,KAAK2nB,UAAY1oB,KAIzBuoB,OAAOC,iBAAiB,QAAUjlB,IAC9B,MAAMvD,EAAOe,KAAK0nB,QAAQllB,EAAMvD,MAAQ,IAAI+N,eAC5ChN,KAAKmnB,eAAeloB,GAAM+O,KAAK,MAC3BhO,KAAK2nB,YAAc1oB,IACnBe,KAAK2nB,UAAY,QAUtB,OAAOE,EAA0B7Z,GAEpC,MAAM8Z,GADND,EAASA,aAAiB9e,MAAQ8e,EAAQA,EAAM9kB,MAAM,MAClBT,IAAIL,GAAKjC,KAAK0nB,OAAOzlB,EAAE+K,gBAC3D,GAAI8a,EAAYpkB,OAAS,GAAK1D,KAAK+nB,iBAAiBD,GAAc,CAC9D9nB,KAAKsnB,kBAAkB9lB,KAAKsmB,GAC5B,MAAME,EAAWF,EAAYA,EAAYpkB,OAAS,GAMlD,OALK1D,KAAKmnB,eAAea,KACrBhoB,KAAKmnB,eAAea,GAAY,IAAIvH,EAAA,EAAgB,MACpDzgB,KAAKonB,kBAAkBY,GAAYhoB,KAAKmnB,eAAea,GAAU7G,gBAErEnhB,KAAKioB,2BACEjoB,KAAKonB,kBAAkBY,GAAU1F,UAAW7Y,IAC/C,GAAIA,EAAO,CACP,MAAMye,EAAoB,GAC1B,GAAIJ,EAAYpkB,OAAS,EAAG,CAExB,IAAK,MAAMiO,KAAOmW,EAAa,CAC3B,MAAM3V,EAAQnS,KAAKmnB,eAAexV,GAClCuW,EAAQ1mB,KAAK2Q,GAAQA,EAAMwQ,aAAoB,GAGnD,IAAK,IAAI1gB,EAAI,EAAGA,EAAI6lB,EAAYpkB,OAAS,EAAGzB,IACxC,GAAIimB,EAAQjmB,GAAKimB,EAAQjmB,EAAI,GAAM,OAG7BimB,EAAQ1d,OAAO,CAACkE,EAAGsU,IAAMtU,GAAKsU,EAAI,EAAI,GAAK,GAAI,IAChD8E,EAAYpkB,QACrBsK,OAKhB,OAAO,KAOH,OAAO/O,GACX,OAAIA,EAAKwO,QAAQ,QAAU,GAAKxO,EAAKwO,QAAQ,UAAY,GAAKxO,EAAKwO,QAAQ,YAAc,EAC9ExO,EAAKkpB,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAE9ClpB,EAMH,2BAEJ,IAAK,MAAM4oB,KAAS7nB,KAAKsnB,kBACrBtnB,KAAKqnB,UAAU7lB,KAAKqmB,EAAMA,EAAMnkB,OAAS,IAE7C1D,KAAKqnB,WAAY,QAJA,IAWb,iBAAiBQ,GACrB,IAAIO,EAAW,EACf,IAAK,MAAMzW,KAAOkW,EACVZ,EAAwBxZ,QAAQkE,GAAO,GACvCyW,IAGR,OAAOA,EAAW,G,6CAhHblB,I,0BAAAA,EAAc,QAAdA,EAAc,qBAFX,S,GAET,G,kCCTP,MAuQamB,EAAwB,CACjCC,OAAO,EACPC,SAAU,CACNC,OAAQ,GACRC,MAAO,SACPC,SAAU,GACVC,KAAM,GACNC,YAAY,EACZC,aAAa,GAEjBC,IAvCa,CACbjhB,KAAM,YACNsH,MAAO,wBACP5F,YAAa,sDACbwf,WAAY,QACZC,WAAY,CACR3e,KAAM,MACN4e,IAAK,yBAETC,UAAW,CACP7e,KAAM,MACN4e,IAAK,wBAETE,QAvPiB,CACjBC,WAAY,CACR,CACIvhB,KAAM,OACN4gB,MAAO,aACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,SAGjB,CACIuE,KAAM,OACN4gB,MAAO,eACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,gBAGjB,CACIuE,KAAM,OACN4gB,MAAO,aACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,YAGjB,CACIuE,KAAM,OACN4gB,MAAO,cACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,wBAGjB,CACIuE,KAAM,SACN4gB,MAAO,WACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,UAGjB,CACIuE,KAAM,SACN4gB,MAAO,aACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,kBAGjB,CACIuE,KAAM,OACN4gB,MAAO,QACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,SAGjB,CACIuE,KAAM,SACN4gB,MAAO,YACP/E,KAAM,CACF2F,MAAO,iBACP/lB,QAAS,gBAYrBgmB,UAAW,UACXC,SAAU,SA4KVC,KAvKc,CACdC,MAAO,CACH,CACI5hB,KAAM,eACN6hB,KAAM,qCACNhG,KAAM,CACFrZ,KAAM,OACNgf,MAAO,iBACP/lB,QAAS,OAEbqmB,WACI,qKAER,CACI9hB,KAAM,oBACN6hB,KAAM,8DACNhG,KAAM,CACFrZ,KAAM,OACNgf,MAAO,iBACP/lB,QAAS,QAEbqmB,WAAY,4BAEhB,CACI9hB,KAAM,kBACN6hB,KAAM,qCACNhG,KAAM,CACFrZ,KAAM,OACNgf,MAAO,iBACP/lB,QAAS,QAEbqmB,WACI,kWAER,CACI9hB,KAAM,WACN6hB,KAAM,4BACNhG,KAAM,CACFrZ,KAAM,OACNgf,MAAO,iBACP/lB,QAAS,YAEbqmB,WACI,mWAGZC,QAAS,GA0HTrH,QArHiB,CACjBsH,cAAe,CACX,CAAEnoB,QAAS,WAAYgE,MAAO,YAC9B,CAAEhE,QAAS,SAAUgE,MAAO,UAC5B,CAAEhE,QAAS,WAAYgE,MAAO,YAC9B,CAAEhE,QAAS,QAASgE,MAAO,SAC3B,CAAEhE,QAAS,WAAYgE,MAAO,YAC9B,CAAEhE,QAAS,YAAagE,MAAO,cAEnCokB,WAAY,CACRC,IAAK,yBACLC,MAAO,QACPC,UAAW,YACXC,IAAK,MACLC,WAAY,aACZC,OAAQ,SACRC,GAAI,MAERC,iBAAkB,CACd,CAAE5oB,QAAS,OAAQgE,MAAO,KAC1B,CAAEhE,QAAS,UAAWgE,MAAO,MAC7B,CAAEhE,QAAS,UAAWgE,MAAO,MAC7B,CAAEhE,QAAS,UAAWgE,MAAO,MAC7B,CAAEhE,QAAS,OAAQgE,MAAO,OAE9B6kB,YAAa,CACT,YACA,OACA,WACA,OACA,WACA,YACA,aACA,QACA,OACA,iBAEJC,WAAW,EACXC,iBAAiB,EACjBC,WAAY,EACZ7a,UAAW,IA8EX8a,cAzEuB,CACvBC,aAAa,GAyEbC,UApEmB,CACnBC,cAAc,EACdC,kBAAmB,GAmEnBC,QApDiB,CACjBC,OAAQ,CACJ,aAAc,UACd,gBAAiB,UACjB,aAAc,UACd,qBAAsB,OACtB,gBAAiB,OASjB,WAAY,UACZ,cAAe,UACf,YAAa,WAEjBC,qBAAqB,EACrBC,yBAAyB,EACzBC,OAAQ,CACJC,OAAQ,CACJ,CAAE1Z,IAAK,aAAc9J,KAAM,mBAC3B,CAAE8J,IAAK,gBAAiB9J,KAAM,iBAC9B,CAAE8J,IAAK,aAAc9J,KAAM,gBAC3B,CAAE8J,IAAK,qBAAsB9J,KAAM,sBACnC,CAAE8J,IAAK,gBAAiB9J,KAAM,cA0BtCyjB,UAAW,CACPnN,SAAS,EACToN,YAAa,IAEjBC,SAnEa,CACbJ,OAAQ,CACJ,CAAEvjB,KAAM,WAAY4jB,MAAO,WAC3B,CAAE5jB,KAAM,UAAW4jB,MAAO,WAC1B,CAAE5jB,KAAM,WAAY4jB,MAAO,eCnMtBC,EAAU,CACnB,OAAS,EACT,IAAO,UACP,KAAQ,UACR,SAAY,KACZ,IAAO,KACP,OAAU,KACV,OAAU,UACV,aAAgB,KAChB,QAAW,QACX,KAAQ,e,aCUL,Y,MAAMC,UAAwB,IAmDjC,YAAoBC,GAChBpmB,QADgB,KAAAomB,SAjDZ,KAAAC,UAAY,UAEZ,KAAAC,WAAa,IAAIrL,EAAA,EAA2B,IAE5C,KAAAsL,UAA2C,GAE3C,KAAAC,aAAyC,GA6C7C,MAAMxrB,EAAM,IAAIyU,KACV3T,EAAO,IAAI2T,KAAKyW,EAAQpqB,MACxB2qB,GAAQ,EAAAxM,EAAA,GAAUjf,EAAKc,GACvB,aAAY,EAAAG,EAAA,GAAOH,EAAM,YACzB,EAAAG,EAAA,GAAOH,EAAM,uBACnB,QAAI,OAAQ,GAAGoqB,EAAQQ,SAAU,KAAM,SAAS,IAChD,QAAI,MAAO,GAAGR,EAAQS,iBAAiBF,IAAS,KAAM,SAAS,GAC/DjsB,KAAKolB,OA/CT,cAAqB1f,GACjB1F,KAAK8rB,WAAW9d,KAAKtI,GAIlB,OAAgBmC,GAKnB,OAJK7H,KAAKgsB,aAAankB,KACnB7H,KAAK+rB,UAAUlkB,GAAQ,IAAI4Y,EAAA,EAAmB,MAC9CzgB,KAAKgsB,aAAankB,GAAQ7H,KAAK+rB,UAAUlkB,GAAMsZ,gBAE5CnhB,KAAKgsB,aAAankB,GAItB,KAAQA,EAAcnC,GACpB1F,KAAKgsB,aAAankB,KACnB7H,KAAK+rB,UAAUlkB,GAAQ,IAAI4Y,EAAA,EAAmB,MAC9CzgB,KAAKgsB,aAAankB,GAAQ7H,KAAK+rB,UAAUlkB,GAAMsZ,gBAEnDnhB,KAAK+rB,UAAUlkB,GAAMmG,KAAKtI,GAGvB,MAAemC,GAClB,OAAQ7H,KAAKgsB,aAAankB,GAEpB7H,KAAK+rB,UAAUlkB,GAAM8a,WADrB,KAKV,YACI,OAAO3iB,KAAK4rB,OAAOQ,WAEvB,UAAiB1mB,GACb1F,KAAK4rB,OAAOS,SACR,GAAG3mB,OAAW1F,KAAK6F,IAAI,aAAe7F,KAAK6rB,aAmBtC,O,oDACL7rB,KAAK6F,IAAI,WACT2hB,OAAOc,OAAQ,IAEA,QAAf,EAAAtoB,KAAK6F,IAAI,cAAM,eAAEgC,QACjB7H,KAAK6rB,UAAY7rB,KAAK6F,IAAI,OAAOgC,MAErC7H,KAAK6rB,UACD3lB,SAASomB,SAASC,MAAM,GAAGxpB,MAAM,KAAKgK,KAAK,MAAQ/M,KAAK6rB,WAC5D,QAAW7rB,KAAK6rB,UAAU9oB,MAAM,KAAKgK,KAAK,KAAKyf,gBAC/C,QAAI,WAAY,gCAChBxsB,KAAKslB,aAAatX,MAAK,GACnBwZ,OAAOc,QACFd,OAAOiF,cAAajF,OAAOiF,YAAc,IAC9CjF,OAAOiF,YAAY3Q,SAAW9b,QAKtC,eACI,OAAOA,KAAK6rB,UAOT,IAAala,GAChB,MAAMzS,EAAOyS,EAAI5O,MAAM,KACvB,GAAgB,QAAZ7D,EAAK,GACL,OAAO,QAAgBA,EAAMmpB,GAEjC,MAAMqE,EAAoB1sB,KAAK8rB,WAAWnJ,WAC1C,IAAK,MAAMgK,KAAYD,EAAmB,CACtC,MAAMhnB,GAAQ,QAAgBxG,EAAKqtB,MAAM,GAAII,GAC7C,GAAa,MAATjnB,EACA,OAAOA,EAGf,OAAO,QAAgBxG,EAAMmpB,I,6CAzGxBsD,GAAe,c,0BAAfA,EAAe,QAAfA,EAAe,qBAFZ,S,GAET,G,wBCpBmC,QAAQ,OAAQ,EACtD,QAAW,SAAU,EACjB,QAAM,CAAEiB,QAAS,EAAGtoB,OAAQ,KAC5B,QAAQ,KAAK,QAAM,CAAEsoB,QAAS,EAAGtoB,OAAQ,UAE7C,QAAW,SAAU,EACjB,QAAM,CAAEsoB,QAAS,EAAGtoB,OAAQ,OAC5B,QAAQ,KAAK,QAAM,CAAEsoB,QAAS,EAAGtoB,OAAQ,SAP1C,MAWMuoB,GAAiC,QAAQ,OAAQ,EAC1D,QAAM,QAAQ,QAAM,CAAED,QAAS,EAAGtoB,OAAQ,QAC1C,QAAM,QAAQ,QAAM,CAAEsoB,QAAS,EAAGtoB,OAAQ,EAAG,iBAAkB,WAC/D,QAAW,iBAAiB,QAAQ,oB,cCdxC,IAAIQ,ECIAgoB,EACAC,EACAC,EDJG,SAASC,EAAgBC,GAC5BpoB,EAAWooB,EAWR,SAASC,EACZ9iB,EACAwB,EACAuhB,EAAiB,KACjBC,EACAC,EAAqC,IAErC,IAAKxoB,EACD,MAAM,IAAI9F,MAAM,4CAEpB,MAAMuuB,EAAezoB,EAASkf,KAAKnY,EAASuhB,EAAQ,OAAF,QAC9CI,WAAY,CAACnjB,GACb5K,SAAU,KACP6tB,IAEHF,IACAC,EAAYA,GAAa,KAAOE,EAAaE,WAC7CF,EAAaG,WAAWpL,UAAU,IAAM+K,MAWzC,SAASM,EACZC,EACAR,EACAC,EACAC,EAAqC,IAErC1b,QAAQ0W,MAAMsF,GACdT,EAAO,UAAWS,EAAKR,EAAQC,EAAWC,GAUvC,SAASO,EACZD,EACAR,EACAC,EACAC,EAAqC,IAErC1b,QAAQgL,MAAMgR,GACdT,EAAO,QAASS,EAAKR,EAAQC,EAAWC,GA2BrC,SAASQ,EACZF,EACAR,EACAC,EACAC,EAAqC,IAErC1b,QAAQmc,KAAKH,GACbT,EAAO,OAAQS,EAAKR,EAAQC,EAAWC,GCpFpC,SAASU,EACZC,EACAd,EAAuB,KAAM,MAC7B5sB,EAAmB,KAEf0tB,EAAMC,YACFpB,GAAYA,EAAWqB,cACvBpB,GAAYA,EAAWoB,cACvBnB,GAAQ1V,cAAc0V,GAC1BF,EAAamB,EAAMG,UAAU9L,UAAW9f,KAGpC,QAAI,QAAS,wCAFyBA,EAAMqI,QAAQshB,6BACV3pB,EAAM4rB,UAAUjC,QAqBtE,SAAwB8B,GAChBA,EAAMC,aACN,QAAI,QAAS,sCACbD,EAAMI,iBAAiBvvB,KAAK,KACxBgvB,EAAW,gDAAiD,UAAW,IACnE5nB,SAASgV,QAAO,OAxBpBmT,CAAeJ,KAEnBlB,EAAakB,EAAMK,UAAUhM,UAAU,MACnC,QAAI,QAAS,mCACb6K,EAAO,gDAAiD,IACpDjnB,SAASgV,QAAO,MAGxB8R,EAAcjY,YAAY,MACtB,QAAI,QAAS,2BACbkZ,EAAMM,kBACPhuB,ICrCJ,SAASiuB,EAAiBzjB,GAC7B,IAAI0jB,EAAkB1jB,EAAQ0jB,SAAW,GAEzC,OADAA,EAAUA,EAAQC,OAAO,GAAGlC,cAAgBiC,EAAQlC,MAAM,GACnDkC,EAAU,GAAGA,YAAiB,EAAAhtB,EAAA,GAAO,IAAIwT,KAAKlK,EAAQ3K,KAAM,iBAAmB,kBCenF,SAAeuuB,EAAW7S,G,8CAC7B,MAAM4M,EAAW5M,EAAS4M,UAAYxiB,SAASwiB,SACzC3Z,EAAO+M,EAAS0M,QAAUtiB,SAAS0oB,SACnCjG,EAAO7M,EAAS6M,MAAQziB,SAASyiB,KACjCnG,EAAM1G,EAAS8M,WACf,GAAGF,MAAa3Z,KAAQ4Z,IACxBziB,SAAS8V,OACTyM,GAASviB,SAASomB,SAAW,KAAKnE,QAAQ,KAAM,KACtDvW,QAAQC,IACJ,QACAiK,EAASC,KACT7V,SAASC,KAAKkK,SAAS,aACU,SAAjC0K,aAAaE,QAAQ,SAEzB,MAAMc,EACFD,EAASC,MACT7V,SAASC,KAAKkK,SAAS,cACU,SAAjC0K,aAAaE,QAAQ,QAEnBqS,EAA2B,CAC7BuB,UAAW,YACXC,MAAO,SACP/f,KAAM,GAAGA,IAAO4Z,EAAO,IAAMA,EAAO,KACpCoG,SAAU,GAAGvM,yBACbwM,UAAW,GAAGxM,qBACdyM,aAAc,GAAG/oB,SAAS8V,SAASyM,mBACnCyG,cAAepT,EAAS+M,YACxBsG,YAAY,EACZpT,QAWJ,OATIhB,cACAA,aAAaC,QACT,OACA,KAAKe,IAAS7V,SAASC,KAAKkK,SAAS,iBAGzC0L,GACA+R,EAAW,8BAER,SAAMR,K,4CCxDjB,MAAM8B,EAAgB,IAAI3O,EAAA,EAA2B,MAExC4O,EAAeD,EAAcjO,eAkBnC,SAASmO,IACZ,OAAOF,EAAczM,WAfzBlH,WAAW,KACP,IACI,GAAI8T,KAAM,OACZ,WACF,SAAS,WACJ5T,MACG,EAAA6T,EAAA,GAAM,MACN,EAAAC,EAAA,GAAM,KACN,EAAAntB,EAAA,GAAKL,GAAM,IAAI,KAAUA,KAE5BqgB,UAAWpS,GAASkf,EAAcphB,KAAKkC,KAC7C,M,4BCjBI,SAASwf,EAAcptB,GAC1B,IAAI+I,EAAM,GACV,GAAI/I,EACA,IAAK,MAAMqP,KAAOrP,EACVA,EAAIqtB,eAAehe,IAAnBrP,MAA2BA,EAAIqP,KAC/BtG,GAAO,GAAIA,EAAM,IAAM,KAAMsG,KAAOrP,EAAIqP,MAIpD,OAAOtG,E,iGCTJ,Y,MAAMukB,EAHb,cAKc,KAAAC,QAAsC,GAEtC,KAAAC,WAAyC,GAEzC,KAAAC,eAEN,GAEe,KAAAzK,aAAe,IAAI,KAAyB,GAE/C,KAAA5J,YAAc1b,KAAKslB,aAAanE,eAGhD,qBACI,OAAOnhB,KAAKslB,aAAa3C,WAGtB,cACH3iB,KAAKgwB,UAGC,UACN,IAAK,MAAMre,KAAO3R,KAAK6vB,QACfle,KAAO3R,KAAK6vB,SACZ7vB,KAAK4F,aAAa+L,GAG1B,IAAK,MAAMA,KAAO3R,KAAK8vB,WACfne,KAAO3R,KAAK8vB,YACZ9vB,KAAKsX,cAAc3F,GAG3B,IAAK,MAAMA,KAAO3R,KAAK+vB,eACfpe,KAAO3R,KAAK+vB,gBACZ/vB,KAAKiwB,MAAMte,GAWb,QAAQ9J,EAAcqoB,EAAgBV,EAAgB,KAC5D,KAAI3nB,GAAQqoB,GAAMA,aAAcC,UAO5B,MAAM,IAAInxB,MACN6I,EACM,6CACA,8CATV7H,KAAK4F,aAAaiC,GAClB7H,KAAK6vB,QAAQhoB,GAAa4T,WAAW,KACjCyU,IACAlwB,KAAK6vB,QAAQhoB,GAAQ,MACtB2nB,GAcD,aAAa3nB,GACf7H,KAAK6vB,QAAQhoB,KACbjC,aAAa5F,KAAK6vB,QAAQhoB,IAC1B7H,KAAK6vB,QAAQhoB,GAAQ,MAUnB,SAASA,EAAcqoB,EAAgBV,EAAgB,KAC7D,KAAI3nB,GAAQqoB,GAAMA,aAAcC,UAI5B,MAAM,IAAInxB,MACN6I,EACM,8CACA,+CANV7H,KAAKsX,cAAczP,GACnB7H,KAAK8vB,WAAWjoB,GAAakN,YAAY,IAAMmb,IAAMV,GAcnD,cAAc3nB,GAChB7H,KAAK8vB,WAAWjoB,KAChByP,cAActX,KAAK8vB,WAAWjoB,IAC9B7H,KAAK8vB,WAAWjoB,GAAQ,MAStB,aAAaA,EAAcooB,GACjCjwB,KAAKiwB,MAAMpoB,GACX7H,KAAK+vB,eAAeloB,GAAQooB,EAOtB,MAAMpoB,GACR7H,KAAK+vB,gBAAkB/vB,KAAK+vB,eAAeloB,KAC3C7H,KAAK+vB,eAAeloB,aAAiB,IAC9B7H,KAAK+vB,eAAeloB,GAAuBsmB,cAC3CnuB,KAAK+vB,eAAeloB,KAC3B7H,KAAK+vB,eAAeloB,GAAQ,MAK1B,UAAUuoB,GAChB,MAAMC,EAAOhrB,OAAOnG,KAAKc,KAAK+vB,gBAAgB/tB,OAAQsuB,GAClDA,EAAEjgB,SAAS+f,IAEf,IAAK,MAAMze,KAAO0e,EACdrwB,KAAKiwB,MAAMte,I,6CArIVie,I,0BAAAA,EAAS,QAATA,EAAS,qBAFN,S,GAET,I,4LCaP,IAAI/D,EAAY,MAET,SAAS0E,EAAW1oB,GACvBgkB,EAAYhkB,EAWT,SAASgK,EACZxH,EACAujB,EACA4C,EACAC,EAAwB,QACxBC,GAAiB,EACjBC,EAAmB9E,GAEnB,GAAIrE,OAAOc,OAASoI,EAAO,CACvB,MAAMzF,EAAmB,CACrB,iBACA,iBACA,kBAEAuF,EACA5e,QAAQ6e,GACJ,MAAME,QAAetmB,QAAWujB,OAC7B3C,EACHuF,GAGJ5e,QAAQ6e,GAAQ,MAAME,QAAetmB,QAAWujB,OAAU3C,IAU/D,SAAS2F,EAAgB1xB,EAAgBoD,GAC5C,MAAMqP,EAAMzS,EAAK2xB,QACjB,OAAIvuB,GAAmB,MAAZA,EAAIqP,GACJzS,EAAKwE,OAAS,EAAIktB,EAAgB1xB,EAAMoD,EAAIqP,IAAQrP,EAAIqP,GAE5D,KAQJ,SAASmf,EAAgBC,EAAa,GAAIpf,EAAc,IAC3D,OAAOof,EAAM/uB,OACT,CAACuL,EAAIyjB,EAAKC,IACNA,EAAIxjB,QAEMwjB,EAAItuB,KADVgP,EACgB1P,GAAMA,EAAE0P,KAASpE,EAAGoE,GACpB1P,GAAMA,IAAMsL,MAC1ByjB,GASX,SAASE,EAAUxsB,EAAc3D,EAAgB,GACpD,OAAOD,KAAKC,MAAMD,KAAKqwB,UAAYzsB,EAAO3D,IAAUA,EAGjD,SAAeqwB,EAClBxpB,EACAypB,G,8CAEA,MAAMtN,EAAMsN,EAAOrN,KACf,IAAqB,+BAEd,KAAgB,CACnBpc,UAGR,OAAO,OAAP,8BACchJ,QAAQqlB,KAAK,CACnBF,EAAIG,kBAAkB1hB,MACjBmZ,MAAK,OAAO1S,GAAmB,SAAbA,EAAEuV,SACpB3C,YACLkI,EAAII,cAActI,eACnB,CACH5W,QAAUG,GAAO2e,EAAIG,kBAAkBjf,QAAUG,EACjDwe,MAAO,IAAMG,EAAIH,YAQlB,SAAS0N,EAAUC,EAAaC,EAAoB,KACvD,MAAMC,EAAa,IAAIC,OACnB,+DACA,MAEJ,IAAIC,EAAa,KACjB,MAAMC,EAAU,CAAC,IACjB,KAAQD,EAAaF,EAAWI,KAAKN,IAC7BI,EAAW,GAAGjuB,QAA4B,MAAlBiuB,EAAW,IAAYC,EAAQpwB,KAAK,IAChEowB,EAAQA,EAAQluB,OAAS,GAAGlC,KACxBmwB,EAAW,GACLA,EAAW,GAAGxJ,QAAQ,IAAIuJ,OAAO,KAAM,KAAM,KAC7CC,EAAW,IAGzB,MAAMG,EAAoBF,EAAQjZ,OAAO,EAAG,GAAG,GAa/C,OAZiBiZ,EAAQtvB,IAAKyvB,IAC1B,MAAMC,EAAU,GAChB,IAAK,IAAI/vB,EAAI,EAAGA,EAAI8vB,EAAIruB,OAAQzB,IAAK,CACjC,MAAM0P,EAAMmgB,EAAQ7vB,GAAGc,MAAM,KAAKgK,KAAK,KAAKC,cAC5C,IACIglB,EAAQrgB,GAAOqP,KAAKC,MAAM8Q,EAAI9vB,IAChC,MAAOlD,GACLizB,EAAQrgB,GAAOogB,EAAI9vB,IAAM,IAGjC,OAAO+vB,IA2BR,SAASC,EAAaC,EAAkBC,GAC3C,MAAMH,EAAUI,SAASC,cAAc,KACvCL,EAAQM,aACJ,OACA,iCAAmCvS,mBAAmBoS,IAE1DH,EAAQM,aAAa,WAAYJ,GAEjCF,EAAQO,MAAM7wB,QAAU,OACxB0wB,SAAShmB,KAAKomB,YAAYR,GAE1BA,EAAQS,QAERL,SAAShmB,KAAKsmB,YAAYV,GAsBvB,SAASW,EAAiBC,GAC7B,MAAMC,EAAQ,IAAID,GACZtlB,EAAM,GACZ,KAAOulB,EAAMnvB,QAAQ,CAEjB,MAAMsK,EAAO6kB,EAAMzQ,MACfrZ,MAAM+pB,QAAQ9kB,GAEd6kB,EAAMrxB,QAAQwM,GAEdV,EAAI9L,KAAKwM,GAIjB,OAAOV,EAAIylB,UAUR,SAASC,EAAqBC,EAAQC,EAAMC,EAAQC,GACvD,OACKH,GAAUE,GAAUF,EAASG,GAC7BF,EAAOC,GAAUD,EAAOE,GACxBD,GAAUF,GAAUE,EAASD,GAC7BE,EAAOH,GAAUG,GAAQF,EAIlC,MAAMG,EAQN,SAAehoB,GACX,IAAIioB,EAAI,WAAajoB,EAAI3H,OACzB,IAAK,IAAIzB,EAAI,EAAGA,EAAIoJ,EAAI3H,OAAQzB,IAC3BqxB,EAAIxyB,KAAKyyB,KAAKD,EAAIjoB,EAAImoB,WAAWvxB,GAAI,YACjCqxB,EAAKA,GAAK,GAAOA,IAAM,GAChC,OAAO,WAGH,OAFAA,EAAIxyB,KAAKyyB,KAAKD,EAAKA,IAAM,GAAK,YAC9BA,EAAIxyB,KAAKyyB,KAAKD,EAAKA,IAAM,GAAK,aACtBA,GAAKA,IAAM,MAAQ,GAhBtBG,CAAM,WACbC,GAmBShlB,EAnBI,WAmBDC,EAnBa,UAmBVjE,EAnBsB,WAmBnBkD,EAnB+BylB,IAoB5C,WAKH,IAAIzwB,GAJJ8L,KAAO,IACPC,KAAO,GAGW,EAOlB,OANAD,EAAIC,EAAKA,IAAM,EACfA,GAJAjE,KAAO,IAIGA,GAAK,GAAM,EAGrB9H,EAAKA,GADLgL,EAAS,GALTA,KAAO,GAKO,GACA,EACdlD,GAHAA,EAAKA,GAAK,GAAOA,IAAM,IAGd9H,EAAK,GACNA,IAAM,GAAK,aAb3B,IAAe8L,EAAGC,EAAGjE,EAAGkD,EAjBjB,SAAS+lB,EAAqBjvB,EAAe,IAAK3D,EAAgB,GACrE,OAAOD,KAAKC,MAAM2yB,KAAUhvB,EAAO3D,IAAUA,EAkC1C,SAAS6yB,IACZ,OAIG,WACH,MACMC,GADO,IAAI5e,MAEZ6e,mBACG1B,SAAS2B,cAAc,QAAQC,aAAa,SACxC5Y,UAAU6Y,UAEjBjnB,cACL,OAAO6mB,EAAapmB,QAAQ,MAAQ,GAAKomB,EAAapmB,QAAQ,MAAQ,EAZ/DymB,GAAiB,QAAU,SAe/B,SAASC,EAAiBzV,GAC7B,MAAM0V,EAAU,GAChB,IAAK,MAAMziB,KAAO+M,EAAK2V,SACd3V,EAAK2V,SAAS1iB,GAAKoN,OACpBqV,EAAQ5yB,KAAKmQ,GAGrB,OAAOyiB,I,kVClSC,eACI,oBACI,SACJ,QACJ,S,qBAJK,+BAEG,4D,sBAGR,iBACI,yBACJ,S,MADiB,+B,cAmCtB,Y,MAAME,EAtDb,cA0DoB,KAAAC,UAAoB,iBAQpB,KAAApiB,MAAkC,I,6CAZzCmiB,I,wBAAAA,EAAmB,yb,QAnDxB,oBAMI,sBACI,SACA,SACJ,QACA,uBAKA,uBAGJ,S,MAfI,qCACA,wCAEe,wCAAuB,eAClC,kCAGoC,2CAKZ,mC,uZAoCjC,G,sDC9CC,oBAKI,8DAA+B,OAAtB,EAAAlH,OAAA,WAAoB,QAAS,IAEtC,sBACJ,Q,gDAJI,qCAGU,0BAwCf,Y,MAAMoH,UAA4B,KAlDzC,c,oBAoDoB,KAAAC,QAA0B,GAEzB,KAAArH,OAAS,IAAI,MAIvB,QACHptB,KAAKY,QAAQ,QAAS,IAAOZ,KAAK0G,MAAO,I,0EATpC8tB,KAAmB,GAAnBA,I,2BAAAA,EAAmB,mZA/CxB,0BASA,oBAII,iDAAsB,iCACC,EAAA5Q,QAAU,KAAE,SAEnC,oBAAU,SAAgC,QAC9C,S,MAdqB,2BASjB,8BAIU,2C,0WA+Bf,G,gFC7CC,iBAKI,SACJ,S,qBADI,mC,wCAEJ,yBAKI,4DAEA,aACI,kBAQJ,QACJ,Q,wBAbI,yBAKQ,8BAAmB,oBAkDhC,Y,MAAM8Q,EAaT,YAA8CC,GAAA,KAAAA,WAX9B,KAAA9oB,QAAU7L,KAAK20B,SAAS9oB,QAExB,KAAA7C,KAAOhJ,KAAK20B,SAAS3rB,MAAQ,UAE7B,KAAA4rB,OAAS50B,KAAK20B,SAASC,QAAU,OAEjC,KAAAxH,OAASptB,KAAK20B,SAASvH,QAAU,KAO1C,WACH3R,WAAW,IAAOzb,KAAK0G,MAAO,EAAO,KACrC+U,WAAW,IAAOzb,KAAK60B,cAAe,EAAO,M,6CAjBxCH,GAAe,MAaJ,O,wBAbXA,EAAe,gtBAlEpB,uBAOA,wB,MALK,wCAMA,gC,gcA0DN,G,iEC/CS,kBACI,SACJ,S,sBADI,sD,yBARR,iBAMI,SACA,wBAGJ,S,sBAPI,wCAGA,kCACO,oC,wCAff,WAAqC,4EACjC,iBAOA,uBAWJ,Q,wBAhBQ,wCAA6B,+BAA7B,CAA6B,6BAA7B,CAA6B,+BAM5B,kDAyCV,Y,MAAMI,EAoBT,YACsCH,EAC1BI,GAD0B,KAAAJ,WAC1B,KAAAI,MArBL,KAAAjtB,KAAO,EAEP,KAAAktB,OAASh1B,KAAK20B,SAASK,QAAU,GAExB,KAAAnpB,QAAU7L,KAAK20B,SAAS9oB,QAExB,KAAA7C,KAAOhJ,KAAK20B,SAAS3rB,MAAQ,UAE7B,KAAA4rB,OAAS50B,KAAK20B,SAASC,QAAU,UAEjC,KAAAhkB,UAAoB5Q,KAAK20B,SAAS/jB,WAAa,EAa3D5Q,KAAK20B,SAAS7sB,KAAKwa,UAAWU,GAC1BliB,KAAK6D,IAAI,GAAM3E,KAAK8H,KAAOkb,GAAK,IAZxC,mBACI,OAAO,EAAAiS,EAAA,GAAqC,IAAjBj1B,KAAK4Q,WAAoB,OAejD,WACH6K,WAAW,IAAOzb,KAAK0G,MAAO,EAAO,KACrC+U,WAAW,IAAOzb,KAAK60B,cAAe,EAAO,KAG1C,kBACH70B,KAAKk1B,eAGF,eACH,MAAMC,EAAMn1B,KAAK+0B,IAAIhxB,cAAcC,wBACnC,IAAKmxB,EAAIhxB,MAAO,OAAOsX,WAAW,IAAMzb,KAAKk1B,eAAgB,KAC7Dl1B,KAAKg1B,OAASl0B,KAAK6D,IACf,IACC3E,KAAK20B,SAASK,QAAU,KAAOG,EAAIhxB,OAAS,M,6CA3C5C2wB,GAAkB,MAqBf,KAAgB,e,wBArBnBA,EAAkB,ufAlDvB,gC,KAAe,gC,iUAkDhB,G,sBChDa,SACI,SACJ,S,wDAGA,eAOI,SACJ,S,yBAHI,uCAEA,gC,yBArBZ,SACI,iBAKI,oBAAU,SAA8B,QAC5C,QACA,iBACI,gCAGJ,QACA,iBACI,qBASJ,QACJ,S,gCArBQ,wCAA6B,sBAGnB,uCAGK,gCAAc,cASR,mC,yBAS5B,eAAS,SAAW,S,qBAAX,yB,yBAGV,0BACA,gBAAuC,SAAa,S,qBADvC,qBAC0B,2B,cAK5C,Y,MAAMM,EA3Cb,cA6CoB,KAAAnwB,QAAkB,GAElB,KAAA2X,MAAgB,GAEhB,KAAAyY,MAA2B,I,6CANlCD,I,wBAAAA,EAAsB,+pB,GAAA,M,QAxC3B,iBAII,gCAyBJ,QACA,0CAGA,2C,sBA7BmB,kCAAgB,gB,iBAoCpC,G,8ECkDA,ICtDA,Q,MAAME,G,6CAAAA,I,wBAAAA,EAAqB,wE,aAjCuB,4G,EAEzC,4L,EAIA,mK,kMAVR,iBAGI,gBAAqB,eAAG,QACxB,2BAA8D,QAC9D,0BAGA,QACA,wBAGA,QACJ,U,2QAwBD,GCCA,Q,MAAMC,G,6CAAAA,I,wBAAAA,EAAsB,yE,aAjCnB,uH,EAGA,iL,EAIA,yJ,iLAZR,iBAII,2BAEA,QACA,0BAGA,QACA,wBAEA,QACJ,U,mQAwBD,G,0BC1BA,MAAeC,IAOf,a,MAAMC,EACT,YACYnV,EACYoV,GADZ,KAAApV,UACY,KAAAoV,UAGX,YACT1nB,EACAmE,G,+CAEA,OAAOnS,KAAK21B,cAGH,QACTlN,EACAmN,G,+CAEA,OAAO51B,KAAK21B,cAGF,Y,2DACJ,WACDha,MAAK,OAAO1S,GAAMA,IAClB4S,YACL,MAAM3L,QAAwB,WACpB,OAAOjH,KAAQA,IACpB4S,YACCga,KACF3lB,IACc,QAAZ,EAAAlQ,KAAK01B,eAAO,eAAEvtB,SAAS+H,EAAKhP,OAAOmP,SAASrQ,KAAK01B,QAAQvtB,QAK/D,OAHK0tB,GACD71B,KAAKsgB,QAAQwV,SAAS,CAAC,oBAElBD,K,6CAlCJJ,GAAmB,mBAGKD,GAAkB,K,0BAH1CC,EAAmB,QAAnBA,EAAmB,qBAFhB,S,GAET,GC2CP,MAAMM,GAAqB,CACvB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,MAoCG,a,MAAMC,G,6CAAAA,I,wBAAAA,I,6BANE,CACP,CAAEjY,QAAS,KAAiBC,SAAU,SACtC,CAAED,QAAS,IAAkBC,SAAU,KAC1C,SAJQ,CAAC,KAAc,KAAa,QAAwB+X,IA7C7D,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,Q,GAoCG,G,MAhCHzB,EAAmB,MACnB,IAAa,e,MACbE,EAAmB,WADnB,KAAa,I,MAIb,IAAqB,WAJrB,IAAa,oB,MASbY,EAAsB,MATtB,IAAa,qB,sGC1DT,kBAII,sBACA,eAKJ,S,qBANc,8BAIN,6C,wCAGR,oBAII,oBACI,SACJ,QACA,oBAA8C,+DAC1C,SACJ,QACJ,Q,wBALQ,sCAGA,wC,yBAIJ,mBACI,kBAGI,0BACA,aAAG,SAAa,QACpB,QACJ,S,qBAFW,2BAzChB,MAAMa,EAAmB,CAC5B3xB,OAAQ,OACRH,MAAO,OACP+xB,UAAW,oBACXC,SAAU,qBA4CP,Y,MAAMC,EAuBT,YACYC,EACyBlvB,GADzB,KAAAkvB,cACyB,KAAAlvB,QArBpB,KAAA3E,MAAQ,IAAI,MAEb,KAAA2M,MAAgBnP,KAAKmH,MAAMgI,OAAS,UAEpC,KAAA7L,QAAkBtD,KAAKmH,MAAM7D,SAAW,gBAExC,KAAAgzB,aAAuBt2B,KAAKmH,MAAMmvB,cAAgB,SAElD,KAAAC,YAAsBv2B,KAAKmH,MAAMovB,aAAe,SAEhD,KAAA7S,KAAwB1jB,KAAKmH,MAAMuc,MAAQ,CACvD2F,MAAO,iBACP/lB,QAAS,QAGG,KAAAkzB,aAAe,IAAOx2B,KAAKq2B,YAAYG,cAAe,EAEtD,KAAAC,YAAc,IAAOz2B,KAAKq2B,YAAYG,cAAe,EAQ9D,YACHx2B,KAAKwC,MAAMa,KAAK,CAAEmb,OAAQ,U,6CA9BrB4X,GAAqB,kBAyBlB,Q,wBAzBHA,EAAqB,8sB,GAAA,MAtC1B,kBACI,gBAAqB,SAAW,QACpC,QACA,wBAWA,0BAWA,2C,sBAxByB,wBAGpB,kCAAgB,cAYhB,oC,iBAsBN,I,+JC9Ba,S,yBADJ,SACI,gCAGJ,S,sBAFS,8CAA4B,8BAAAM,W,yBAGrC,SACI,iB,oBACJ,S,sBADS,wD,qBAGL,S,yBADJ,SACI,gCAGJ,S,sBAFS,6CAA2B,mC,yBAXxC,iBACI,gCAKA,gCAGA,gCAKJ,S,qBAdqC,yBAClB,2CAKA,uC,cArBxB,Y,MAAMC,EAGT,YAAY/oB,GACR5N,KAAK4H,KAAOgG,EAAEhG,KACd5H,KAAK4jB,MAAQhW,EAAEgW,OAAS,KAAO,O,iEAL1B+S,EAAiB,QAAjBA,EAAiB,Y,GAAvB,GAiCA,Q,MAAMC,UACD,KA6BR,YACYC,EACAC,EACAC,GAERvxB,QAJQ,KAAAqxB,WACA,KAAAC,WACA,KAAAC,YArBI,KAAAC,UAAW,EAEX,KAAAC,OAAQ,EAEjB,KAAA5sB,KAA0C,WAIzC,KAAA6sB,aAA2B,KAII,KAAAC,QAAU,IAAMn3B,KAAKgkB,OAChB,KAAAoT,QAAU,IAClDp3B,KAAKi3B,MAAQj3B,KAAKgkB,OAAS,GACa,KAAAqT,QAAU,IAClDr3B,KAAKi3B,MAAQj3B,KAAK4jB,QAAU,GAUzB,YAAY3iB,GACfjB,KAAKs3B,kBAEDt3B,KAAKk3B,eACJj2B,EAAQs2B,OAASt2B,EAAQu2B,OAASv2B,EAAQqC,UAE3CtD,KAAKgkB,OAIN,cACHxe,MAAMiyB,cACNz3B,KAAK4jB,QAGF,OACH5jB,KAAK03B,cACD13B,KAAKk3B,cAAcl3B,KAAK4jB,QACvB5jB,KAAK23B,UACV33B,KAAKk3B,aAAel3B,KAAK82B,SAASc,OAAO,CACrCC,cAAe73B,KAAKg3B,SACpBc,iBAAkB93B,KAAK82B,SAClBvN,WACAwO,oBAAoB/3B,KAAK62B,UACzBmB,cAAc,CACX,CACIC,QAASj4B,KAAKu3B,OAAS,MACvBW,SACoB,QAAfl4B,KAAKw3B,MACA,SACc,UAAdx3B,KAAKw3B,MACL,MACAx3B,KAAKw3B,QAAU,SACzBW,SAAUn4B,KAAKu3B,OAAS,MACxBa,SAAUp4B,KAAKw3B,OAAS,WAIxCx3B,KAAKk3B,aAAamB,OAAOr4B,KAAK23B,SAC1B33B,KAAKg3B,UACLh3B,KAAKqiB,aACD,WACAriB,KAAKk3B,aAAaoB,gBAAgBhW,UAAU,IAAMtiB,KAAK4jB,WAK5D,QACC5jB,KAAKk3B,eACLl3B,KAAKk3B,aAAaqB,UAClBv4B,KAAKk3B,aAAe,MAIpB,cACJl3B,KAAKqK,KACuB,iBAAjBrK,KAAKsD,QACN,OACAtD,KAAKsD,mBAAmB,MACxB,WACA,YAGN,kBACJtD,KAAK02B,SAAW,aAAgB,CAC5B8B,UAAW,CACP,CACIza,QAAS4Y,EACT3Y,SAAU,CAAEpW,KAAM5H,KAAK4H,KAAMgc,MAAO,IAAM5jB,KAAK4jB,WAGvD6U,OAAQz4B,KAAK+2B,a,6CA7GZH,GAAsB,wC,wBAAtBA,EAAsB,4D,GAAA,K,KAsBpB,KAAS,G,mHAtBX,a,CAAS,+BAAT,a,CAAS,+BAAT,e,kdArBL,SAEA,iC,4EAmBD,I,6IC3CC,iBAII,yBACJ,S,MADiB,+BAgBlB,Y,MAAM8B,EAGT,YACYle,EACAC,GADA,KAAAD,OACA,KAAAC,UAGC,W,8CACTza,KAAKiF,SAAU,QACTjF,KAAKwa,KAAKkB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,kBAC5C7b,KAAKya,QAAQiB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,YACrDJ,WAAW,IAAOzb,KAAKiF,SAAU,EAAQ,Q,6CAZpCyzB,GAAsB,wB,wBAAtBA,EAAsB,iSApB3B,uB,KACK,yB,s+BAmBN,I,wGCtBK,aACI,SACA,SACJ,S,qBAHwC,qDACpC,0D,yBAGJ,iB,sCAAyC,qD,cAwB9C,Y,MAAMC,EAhCb,cAiCoB,KAAApE,UAAoB,kB,6CAD3BoE,I,wBAAAA,EAAa,+M,QA7BlB,iBACI,qBAIA,uBACJ,S,MALQ,oDAIE,qD,6OAwBX,I,yMCQC,yB,KAGI,qB,qBAmBgB,S,yBADJ,SACI,iCAMJ,S,yDALS,8CAGnB,6C,yBAGU,SACI,kB,oBACJ,S,gCADS,wD,qBAGL,S,yBADJ,SACI,iCAMJ,S,gCALS,6CAGlB,mC,yBAxBC,eACI,mBAOI,iCAQA,iCAGA,iCAQJ,QACJ,S,0CAtBQ,6CAFA,0BAA+B,oBAIhB,2CAQA,uC,yBAvB3B,SAOI,uBA6BJ,S,yBA7BU,0B,yBARd,iBACI,gCAqCJ,S,qBAlCA,qCACF,yDAhBC,MAAMC,EAAmB,IAAI,MAAe,yBAkE5C,Y,MAAMC,UACD,KA4DR,YAAoB9B,GAChBvxB,QADgB,KAAAuxB,YArDJ,KAAAjvB,KAAO,EAEP,KAAAvE,OAAgB,CAAEC,EAAG,GAAKI,EAAG,IActC,KAAAk1B,UAAwB,GAKvB,KAAAC,YAAuC,IAAI,IAAgB,MAO7B,WAClC/4B,KAAK8H,KAAO,EACZ9H,KAAKuD,OAAS,CAAEC,EAAG,GAAKI,EAAG,IAC3B5D,KAAKg5B,gBAGF,KACH11B,GAEA,MAA0B,iBAAZA,EACR,OACAA,aAAmB,MACnB,WACA,YAGV,mBACI,OAAQtD,KAAK2H,UAAY,IACpBrF,IAAI,CAAC8K,EAAGlE,K,MAAQ,OAAC,OAAD,wBACVkE,GAAC,CACJ9J,QAA0C,QAAjC,EAAAtD,KAAKi5B,cAAcC,UAAUhwB,UAAI,eAAEnF,kBAE/C/B,OAAQoL,GAAMA,EAAE9J,SAOlB,YACH,UAGG,cACCtD,KAAKm5B,SACL,QAAan5B,KAAKm5B,QAInB,YAAYl4B,GACXA,EAAQgoB,KAAOjpB,KAAKipB,KACpBjpB,KAAKo5B,aAELn4B,EAAQ0G,WACR3H,KAAK84B,WAAa94B,KAAK2H,UAAY,IAAIrF,IAAK8K,GACxC,aAAgB,CACZorB,UAAW,CACP,CACIza,QAAS6a,EACT5a,SAAU,OAAF,wBACD5Q,EAAExF,MAAI,CACTE,KAAM9H,KAAK+4B,YAAYpd,MAAK,OAAK1S,GAAMA,EAAEnB,OACzCyhB,SAAUvpB,KAAK+4B,YAAYpd,MACvB,OAAK1S,GAAMA,EAAE1F,aAK7Bk1B,OAAQz4B,KAAK+2B,cAIrB/2B,KAAKm5B,SACDl4B,EAAQo4B,OAASr5B,KAAKq5B,MACtBr5B,KAAKs5B,QAAQt5B,KAAKq5B,QACXp4B,EAAQ6G,MAAQ7G,EAAQsC,SAC/BvD,KAAKg5B,iBAGL/3B,EAAQwG,QACRxG,EAAQ0G,UACR1G,EAAQs4B,QACRt4B,EAAQwzB,UAERz0B,KAAKY,QAAQ,cAAe,IAAMZ,KAAKw5B,aAAc,MAK1D,kBACHx5B,KAAKo5B,aAID,aACJ,IACI,KAAK,QAAUp5B,KAAKm5B,SAAWn5B,KAAKiF,QAChC,OAAOjF,KAAKY,QAAQ,cAAe,IAAMZ,KAAKw5B,eAElD,QAAax5B,KAAKm5B,OAAQ,CACtB1xB,OAAQzH,KAAKyH,OACbE,SAAU3H,KAAKy5B,aACfF,OAAQv5B,KAAKu5B,OACb9E,QAASz0B,KAAKy0B,QACdvsB,QAASlI,KAAKkI,UAEpB,MAAOnJ,KAIL,gBACJ,KACI,QAAaiB,KAAKm5B,OAAQ,CACtBrxB,KAAM9H,KAAK8H,KACX4xB,aAAc15B,KAAK8H,KACnBvE,OAAQvD,KAAKuD,OACbo2B,eAAgB35B,KAAKuD,OACrB2E,QAASlI,KAAKkI,UAEpB,MAAOnJ,KAGC,a,0DACNiB,KAAKipB,MAAsB,QAAf,EAAAjpB,KAAK45B,kBAAU,eAAE71B,iBAAkB/D,KAAKiF,SACpDjF,KAAKiF,SAAU,EACXjF,KAAKm5B,UACL,QAAan5B,KAAKm5B,OAAQ,CACtB1xB,OAAQzH,KAAKyH,OACbE,SAAU,GACV4xB,OAAQv5B,KAAKu5B,OACb9E,QAASz0B,KAAKy0B,QACdvsB,QAASlI,KAAKkI,WAElB,QAAalI,KAAKm5B,SAEtBn5B,KAAKm5B,aAAe,QAAa,CAC7BnH,QAAwB,QAAf,EAAAhyB,KAAK45B,kBAAU,eAAE71B,cAC1Bye,IAAKxiB,KAAKipB,IACVxhB,OAAQzH,KAAKyH,OACbK,KAAM9H,KAAK8H,KACX4xB,aAAc15B,KAAK8H,KACnBvE,OAAQvD,KAAKuD,OACboE,SAAU3H,KAAKy5B,aACfF,OAAQv5B,KAAKu5B,OACb9E,QAASz0B,KAAKy0B,QACdvsB,QAASlI,KAAKkI,UAElBlI,KAAKiF,SAAU,EACfjF,KAAKqiB,aACD,eACkC,QAAlC,WAAsBriB,KAAKm5B,eAAO,eAAE7W,UAAWU,GAC3ChjB,KAAK+4B,YAAY/qB,KAAKgV,OAI7BhjB,KAAKipB,OAAuB,QAAf,EAAAjpB,KAAK45B,kBAAU,eAAE71B,gBAC/B/D,KAAKiF,UAELjF,KAAKY,QAAQ,cAAe,IAAMZ,KAAKo5B,gBAIvC,QAAQj6B,GACZ,IAAKA,IAAOa,KAAKm5B,OAAQ,OACzB,MAAMA,GAAiB,QAAUn5B,KAAKm5B,QACtC,IAAKA,EAAQ,OACb,MAAMU,EAAOV,EAAOW,SAAS36B,GACxB06B,IACL75B,KAAKuD,OAAS,CACVC,EAAG,GAAKq2B,EAAKr2B,EAAIq2B,EAAKE,EAAI,GAC1Bn2B,EAAG,GAAKi2B,EAAKj2B,EAAIi2B,EAAKvG,EAAI,IAE9BtzB,KAAKg5B,kB,6CAtMAH,GAAuB,e,wBAAvBA,EAAuB,kE,GAAA,M,kLAAvB,eAAU,U,opBA7Df,mBACA,+BAKA,wB,MAJK,4CAIQ,mE,yMAuDd,I,qJCpES,mB,yBAKI,uBAAuB,gBAHvB,oBAAyB,aAAzB,CAAyB,QAyCtC,Y,MAAMmB,UAA4B,KAsBrC,YACsCrF,EAC1BsF,GAERz0B,QAHkC,KAAAmvB,WAC1B,KAAAsF,OAtBL,KAAApyB,KAAO7H,KAAK20B,SAAS9sB,KAErB,KAAAmB,KAAO,GAAGhJ,KAAK20B,SAASlJ,OAAS,cAEjC,KAAAmJ,OAAS50B,KAAK20B,SAASlJ,OAAS,UAEhC,KAAAyO,QAAU,GAEV,KAAAC,MAAQ,EAER,KAAAC,SAAW,EACX,KAAAC,SAAW,EACX,KAAAl2B,MAAQ,EACR,KAAAG,OAAS,EAGT,KAAAg2B,OAAS,SAASt6B,KAAKsE,UAAUtE,KAAKmE,SAASnE,KAAKsE,UAAUtE,KAAKmE,UAEnE,KAAAo2B,WAAiC,GASjC,WACCv6B,KAAK20B,SAAS6F,OACdx6B,KAAKqiB,aACD,OACAriB,KAAK20B,SAAS6F,MAAMlY,UAAWrZ,IAC3BjJ,KAAK6H,KAAOoB,EAAEpB,KACd7H,KAAKgJ,KAAO,GAAGC,EAAEwiB,OAAS,cAC1BzrB,KAAK40B,OAAS3rB,EAAEwiB,OAAS,UACzBzrB,KAAKy6B,cAAcxxB,EAAEqxB,WAIjCt6B,KAAKy6B,cAAcz6B,KAAK20B,SAAS2F,QAG9B,cAAcA,G,MACjB,MAAMt5B,EAAwBs5B,EAAO9vB,OACjC,CAACyS,GAAIzZ,EAAGI,MAAO,CACX82B,MAAOl3B,EAAIyZ,EAAEyd,MAAQl3B,EAAIyZ,EAAEyd,MAC3BC,MAAOn3B,EAAIyZ,EAAE0d,MAAQn3B,EAAIyZ,EAAE0d,MAC3BC,MAAOh3B,EAAIqZ,EAAE2d,MAAQh3B,EAAIqZ,EAAE2d,MAC3BC,MAAOj3B,EAAIqZ,EAAE4d,MAAQj3B,EAAIqZ,EAAE4d,QAE/B,CACIH,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,OAAQ,MAGhB76B,KAAKo6B,SAAwB,IAAbp5B,EAAK05B,MACrB16B,KAAKq6B,SAAwB,IAAbr5B,EAAK45B,MACrB,MAAME,EACC95B,EAAK25B,MAAQ35B,EAAK05B,MADnBI,EAEC95B,EAAK65B,MAAQ75B,EAAK45B,MAEzB56B,KAAKmE,MAAkB,IAAV22B,EAAgB96B,KAAKm6B,MAClCn6B,KAAKsE,OAAmB,IAAVw2B,IAA8B,QAAb,EAAA96B,KAAK20B,gBAAQ,eAAEoG,QAAS,GAAK/6B,KAAKm6B,MACjE,MAAMa,EAAeh7B,KAAKk6B,QAAU,EAAI,EACxCl6B,KAAKmE,MAAQrD,KAAKC,MAAmB,IAAbf,KAAKmE,OAAe,IAC5CnE,KAAKsE,OAASxD,KAAKC,MAAoB,IAAdf,KAAKsE,QAAgB,IAC9CtE,KAAKs6B,OAASA,EACT9vB,OACG,CAACpF,GAAI5B,EAAGI,KACJ,GAAGwB,IAAIA,EAAI,IAAM,MACX5B,EAAIxC,EAAK05B,OAASI,EAAW96B,KAAKmE,MAAQ62B,MAE1Cp3B,EAAI5C,EAAK45B,OAASE,EAAW96B,KAAKsE,OACpC02B,IAER,IAEH7S,QAAQ,OAAQ,KACrBnoB,KAAKu6B,WAAaD,EAAOh4B,IAAI,EAAEkB,EAAGI,KAAO,EACnCJ,EAAIxC,EAAK05B,OAASI,EAAW96B,KAAKmE,MAAQ62B,GAC1Cp3B,EAAI5C,EAAK45B,OAASE,EAAW96B,KAAKsE,OAAS02B,IAEjDh7B,KAAKmE,MAAQnE,KAAKmE,MAAQnE,KAAKk6B,QAAU,EACzCl6B,KAAKsE,OAAStE,KAAKsE,OAAStE,KAAKk6B,QAAU,EAC3Cl6B,KAAKi6B,KAAKgB,iB,6CAxFLjB,GAAmB,MAuBhB,KAAgB,e,wBAvBnBA,EAAmB,uWAzDxB,iBACI,yBAQI,mBAKA,0BAQJ,QACA,yBAII,SACJ,QACJ,S,MAxBQ,kDAA2C,qCAH3C,iEASI,8BAAmB,mBADnB,yBAKkB,uCAYtB,iC,qSA8BT,I,oECxEA,Y,MAAMkB,EACT,YAAoBC,GAAA,KAAAA,YAOb,UACHz1B,EACA2E,EAAyD,QAEzD,OAAQA,GACJ,IAAK,WACD,OAAOrK,KAAKm7B,UAAUC,+BAA+B11B,GACzD,IAAK,MACD,OAAO1F,KAAKm7B,UAAUE,uBAAuB31B,GACjD,IAAK,SACD,OAAO1F,KAAKm7B,UAAUG,0BAA0B51B,GACpD,IAAK,QACD,OAAO1F,KAAKm7B,UAAUI,yBAAyB71B,GACnD,QACI,OAAO1F,KAAKm7B,UAAUK,wBAAwB91B,K,6CAtBjDw1B,GAAQ,iB,qCAARA,EAAQ,U,GAAd,I,oECHFO,EAAL,SAAKA,G,OACD,mBACA,mBACA,qBACA,uBACA,iBACA,mCANCA,EAAL,CAOC,IAKM,Y,MAAMC,EACT,YAAoBP,GAAA,KAAAA,YAEpB,UACIz1B,EACA2E,EAAyD,QAEzD,OAAQA,GACJ,IAAK,WACD,OAAOrK,KAAKm7B,UAAUQ,SAASF,EAAgBG,aAAcl2B,GACjE,IAAK,MACD,OAAO1F,KAAKm7B,UAAUQ,SAASF,EAAgBI,IAAKn2B,GACxD,IAAK,SACD,OAAO1F,KAAKm7B,UAAUQ,SAASF,EAAgBK,OAAQp2B,GAC3D,IAAK,QACD,OAAO1F,KAAKm7B,UAAUQ,SAASF,EAAgBM,MAAOr2B,GAC1D,QACI,OAAO1F,KAAKm7B,UAAUQ,SAASF,EAAgBO,KAAMt2B,K,6CAjBxDg2B,GAAY,iB,yCAAZA,EAAY,U,GAAlB,I,wGCJK,iBAKI,SACJ,S,sBADI,oC,yBAVR,iBAKI,uBAOJ,S,gCATI,2BAKK,qCAAmB,e,yBAMxB,iB,sCAA2B,uDAmBhC,Y,MAAMO,EAIT,eACI,IAAKj8B,KAAKkQ,KAAM,MAAO,KACvB,MAAMpN,EAAQ9C,KAAKkQ,KAAKrI,KACnBsgB,QAAQ,oBAAqB,IAC7BplB,MAAM,KACX,OAAOD,EAAMY,OAAS,EAChB,GAAGZ,EAAM,GAAG,KAAKA,EAAMA,EAAMY,OAAS,GAAG,KACzC1D,KAAKkQ,KAAKrI,KAAK0kB,MAAM,EAAG,I,6CAXzB0P,I,wBAAAA,EAAmB,wfAjCxB,uBAaA,2C,KAXK,sB,yNA+BN,I,mJCcqB,iB,sBAII,uC,wCAvBZ,SACI,iBAMI,iEAAsB,kFAGtB,SASA,uBAMJ,QACJ,Q,4BArBQ,iDAAkD,uBAHlD,eAQA,uGAUK,qC,yBAzBjB,iBAKI,gCA2BJ,S,yBA3BkC,6B,yBATtC,iBAII,uBAiCJ,S,qBA9BwB,oC,cApB9BC,EAAe,CACjB,aAAan5B,MAAM,IACnB,aAAaA,MAAM,IACnB,YAAYA,MAAM,IAClB,UAAUA,MAAM,IAChB,CAAC,SAAU,UAAW,gBA+EnB,Y,MAAMo5B,UAAiC,KAoB1C,YACYtF,EACAC,GAERtxB,QAHQ,KAAAqxB,WACA,KAAAC,WAlBI,KAAAsF,OAASF,EAElB,KAAA/pB,MAAqC,SAEpC,KAAA+kB,aAA2B,KAIL,KAAAmF,QAAU,KAC/BF,EAAyBhe,UAC9Bne,KAAKgkB,OACLhkB,KAAK4F,aAAa,UAEO,KAAA02B,OAAS,IAClCt8B,KAAKY,QAAQ,OAAQ,IAAMZ,KAAK4jB,SAS7B,cACHpe,MAAMiyB,cACNz3B,KAAK4jB,QAGF,a,YACyB,QAA5B,EAAa,QAAb,EAAA5jB,KAAK62B,gBAAQ,eAAE9yB,qBAAa,SAAEw4B,OACF,QAA5B,EAAa,QAAb,EAAAv8B,KAAK62B,gBAAQ,eAAE9yB,qBAAa,SAAEs1B,QAG3B,OACCr5B,KAAKk3B,cACJl3B,KAAK23B,UACV33B,KAAKk3B,aAAel3B,KAAK82B,SAASc,OAAO,CACrCE,iBAAkB93B,KAAK82B,SAClBvN,WACAiT,SACAC,SACAC,uBAET18B,KAAKk3B,aAAamB,OAAOr4B,KAAK23B,UAG3B,QACC33B,KAAKk3B,eACLl3B,KAAKk3B,aAAaqB,UAClBv4B,KAAKk3B,aAAe,MAIrB,eAAevlB,GAClB,IAAIgrB,EAAa38B,KAAK62B,SAAS9yB,cAAc64B,eAC7C,MAAMvxB,EAAMrL,KAAK62B,SAAS9yB,cAAc2B,OAAS,GACjD,OAAQiM,EAAI3E,eACR,IAAK,SACL,IAAK,UACDhN,KAAKmS,MAAQ,QACb,MACJ,IAAK,cACDnS,KAAK62B,SAAS9yB,cAAc2B,MAAQ,GAAG2F,EAAIlB,OACvC,EACAwyB,EAAa,KACbtxB,EAAIlB,OAAOwyB,EAAYtxB,EAAI3H,UAC/Bi5B,EAAa77B,KAAK6D,IAAI,EAAGg4B,EAAa,GACtC,MACJ,IAAK,UACD38B,KAAK62B,SAAS9yB,cAAc2B,MAAQ,GAAG2F,EAAIlB,OACvC,EACAwyB,MACMtxB,EAAIlB,OAAOwyB,EAAYtxB,EAAI3H,UACrCi5B,GAAc,EACd,MACJ,QACuB,UAAf38B,KAAKmS,QAAmBnS,KAAKmS,MAAQ,UACzCnS,KAAK62B,SAAS9yB,cAAc2B,MAAQ,GAAG2F,EAAIlB,OACvC,EACAwyB,KACAhrB,IAAMtG,EAAIlB,OAAOwyB,EAAYtxB,EAAI3H,UACrCi5B,GAAc,EAEtB38B,KAAK62B,SAAS9yB,cAAc84B,cAAc,IAAIC,WAAW,UACzD98B,KAAK+8B,iBACL/8B,KAAKY,QACD,QACA,KACIZ,KAAKg9B,aACLh9B,KAAK62B,SAAS9yB,cAAc64B,eAAiBD,EAC7C38B,KAAK62B,SAAS9yB,cAAck5B,aAAeN,GAE/C,IAID,iBACH38B,KAAKo8B,OAASp8B,KAAKo8B,OAAO95B,IAAK2G,GAC3BA,EAAE3G,IAAKguB,GACHA,EAAE5sB,OAAS,EACL4sB,EACAA,EACmB,WAAftwB,KAAKmS,MACC,cACA,oB,6CA5GnBgqB,GAAwB,2B,wBAAxBA,EAAwB,uF,GAAA,K,KAUtB,KAAS,G,mHAVX,a,CAAS,yBAAT,c,8tBAzEL,SACA,iC,ybAwED,I,iTC7FA,MAAMe,EAAeC,I,MACxB,OACkB,QAAd,EAAAA,EAAQ1E,cAAM,eAAE5yB,IAAI,WACpB,EAAA1D,EAAA,GACI,IAAI8S,MACJ,OAAWkoB,EAAQ1E,OAAO5yB,IAAI,QAAQH,MAAOy3B,EAAQz3B,QAGlD,CAAEjG,UAAU,GAEhB,MCQJ,SAAS29B,EAAkB56B,GAC9B,MAAMkc,EAAO,IAAI,KAAU,CACvBvf,GAAI,IAAI,KAAYqD,EAAMrD,IAC1B4P,KAAM,IAAI,KAAYvM,EAAMuM,MAAQ,GAAI,CAAC,gBACzCsuB,UAAW,IAAI,KAAY76B,EAAM66B,WAAa,GAAI,CAC9C,gBAEJpuB,QAAS,IAAI,KAAYzM,EAAMyM,QAAS,CAAC,gBACzCD,SAAU,IAAI,KAAYxM,EAAMwM,UAChCR,UAAW,IAAI,KAAYhM,EAAMgM,WAAa,IAC9C8uB,UAAW,IAAI,KAAY96B,EAAM86B,WAAa,IAC9CnuB,MAAO,IAAI,KAAY3M,EAAM2M,MAAO,CAAC,gBACrC/C,KAAM,IAAI,KAAY5J,EAAM4J,MAC5BgD,QAAS,IAAI,KAAY5M,EAAM4M,SAC/B7P,KAAM,IAAI,KAAYiD,EAAMjD,KAAM,CAAC,gBACnCE,SAAU,IAAI,KAAY+C,EAAM/C,SAAU,CAACy9B,IAC3C5tB,QAAS,IAAI,KAAY9M,EAAM8M,SAC/BC,UAAW,IAAI,KAAY/M,EAAM+M,WACjCC,WAAY,IAAI,KAAYhN,EAAMgN,YAClC+tB,oBAAqB,IAAI,KAAY/6B,EAAM+6B,qBAC3CC,OAAQ,IAAI,KAAYh7B,EAAMg7B,QAC9B/tB,YAAa,IAAI,KAAYjN,EAAMiN,aACnCxD,SAAU,IAAI,KAAYzJ,EAAMmN,eAAe1D,UAAY,IAE3DwxB,aAAc,IAAI,KAAYj7B,EAAMk7B,IAAI,iBACxCx3B,SAAU,IAAI,KAAY1D,EAAM0D,UAChCy3B,YAAa,IAAI,MAAY,GAC7BC,cAAe,IAAI,KAAYp7B,EAAMk7B,IAAI,mBAAoB,GAC7DhuB,OAAQ,IAAI,KAAYlN,EAAMkN,UAalC,OAXAgP,EAAK7Y,IAAI,aAAakd,aAAaT,UAAWzN,GAC1C6J,EAAK2V,SAAStlB,KAAK8uB,SAAShpB,aAAC,EAADA,EAAG7J,QAEnC0T,EAAK7Y,IAAI,aAAakd,aAAaT,UAAWwb,GAC1Cpf,EAAK2V,SAAS3kB,OAAOmuB,SAASC,EAAEp6B,OAASo6B,EAAE,GAAK,OAEhDt7B,EAAMrD,KACNuf,EAAK7Y,IAAI,QAAQk4B,UACjBrf,EAAK7Y,IAAI,aAAak4B,WAEN,YAAhBv7B,EAAM2P,OAAqBuM,EAAK7Y,IAAI,QAAQk4B,UACzCrf,E,QA3CQ,EAAAhe,EAAA,IAAI,EAAAs9B,EAAA,IAAW,EAAA/kB,EAAA,GAAS,IAAIhE,KAAQ,GAAI,GAAI,CAAEgpB,MAAO,I,wBCNxE,MAAM7d,EAAe,CAAC,cAAe,iBAuB9B,Y,MAAM8d,UAAyB,KAoDlC,YAAoB1jB,EAAmC8F,GACnD9a,QADgB,KAAAgV,OAAmC,KAAA8F,UAnD/C,KAAAE,MAAQ,IAAIC,EAAA,EAA+B,QAC3C,KAAAC,SAAW,IAAID,EAAA,EAAkC,CAAEnI,SAAU,KAC7D,KAAAqI,MAAQ,IAAIF,EAAA,EAA2B,MACvC,KAAA0d,OAAS,IAAI1d,EAAA,EAA+B,MAC5C,KAAAK,SAAW,IAAIL,EAAA,EAAwB,IAExC,KAAAM,aAA8B,IAAI,IACrCC,KAAKC,MAAMC,eAAejG,QAAQ,8BAAgC,OAEtD,KAAAhW,QAAUjF,KAAK8gB,SAASK,eACxB,KAAAjZ,QAAUlI,KAAK0gB,SAAS/E,MAAK,EAAAyF,EAAA,GAAY,IACzC,KAAAgd,kBAAmB,EAAAvc,EAAA,IAAc,CAC7C7hB,KAAKwgB,MACLxgB,KAAK0gB,SACL1gB,KAAK2gB,MACL3gB,KAAKwa,KAAKkB,YAAYC,MAAK,EAAA3Z,EAAA,GAAQiH,GAAMA,MAC1C0S,MACC,EAAA3Z,EAAA,GAAO,EAAEq8B,EAAMp1B,EAAGyV,KAAmB,SAAT2f,KAAqB3f,IACjD,EAAA6C,EAAA,GAAU,EAAEtY,EAAGf,EAASwW,M,QACpB1e,KAAK8gB,SAAS9S,KAAK,kCACnB,MAAM/N,EAAQye,EAAK7Y,IAAI,QAAQH,MACzBtF,EACFse,EAAK7Y,IAAI,QAAQH,MAAqC,GAA7BgZ,EAAK7Y,IAAI,YAAYH,MAAa,IAC/D,OAAO,QACH,CACI6S,cAAc,EAAAY,EAAA,GAAYlZ,GAC1BuY,YAAY,EAAAW,EAAA,GAAY/Y,GACxBkY,UACoB,QAAhB,EAAApQ,EAAQoQ,gBAAQ,eAAEvL,KAAK,OAAQ/M,KAAKwa,KAAKvQ,SAAS9K,GACtDwI,SAA0B,QAAhB,EAAAO,EAAQP,gBAAQ,eAAEoF,KAAK,KACjCrD,SAAUxB,EAAQwB,UAEtB1J,KAAKwa,SAGb,EAAAiH,EAAA,GAAKxY,IACDjJ,KAAK8gB,SAAS9S,KAAK,OAEvB,EAAAoT,EAAA,GAAY,IAeZphB,KAAKo+B,iBAAiB9b,YACtBtiB,KAAKqiB,aACD,gBACAriB,KAAKsgB,QAAQve,OAAOugB,UAAW9f,IAEvBA,aAAiB,OAChB4d,EAAake,KAAMr1B,GAAMzG,EAAMggB,IAAInS,SAASpH,KAE7CjJ,KAAKyiB,eApBrB,WACI,OAAOziB,KAAKwgB,MAAMmC,WAEtB,WACI,OAAO3iB,KAAK2gB,MAAMgC,WAEtB,YACI,OAAO3iB,KAAKm+B,OAAOxb,WAmBhB,QAAQjd,GACX1F,KAAKwgB,MAAMxS,KAAKtI,GAGb,WAAWA,GACd1F,KAAK0gB,SAAS1S,KAAK,OAAD,wBAAMhO,KAAK0gB,SAASiC,YAAejd,IAGlD,QAAQlD,EAAuB,IAAI,KACtCxC,KAAK2gB,MAAM3S,KAAKovB,EAAkB56B,IAClCxC,KAAKqiB,aACD,cACAriB,KAAK2gB,MAAMgC,WAAWI,aAAaT,UAAU,IAAMtiB,KAAKqjB,cAE5DrjB,KAAKm+B,OAAOnwB,KAAKxL,GACjBxC,KAAK0gB,SAAS1S,KAAK,IAGhB,YACEhO,KAAK2gB,MAAMgC,YAAY3iB,KAAKsjB,UACjC,MAAM9gB,EAAQxC,KAAKm+B,OAAOxb,WAC1B3iB,KAAK2gB,MACAgC,WACAO,WAAW,OAAD,wBAAO1gB,GAAS,KAASA,aAAK,EAALA,EAAOmN,iBAAkB,KACjE3P,KAAK0gB,SAAS1S,KAAK,IAGhB,YACHkT,eAAeqC,WAAW,sBAC1BvjB,KAAKsjB,UAGF,Y,MACHpC,eAAelG,QACX,qBACAgG,KAAKwC,WAA+B,QAArB,EAAAxjB,KAAK2gB,MAAMgC,kBAAU,eAAEjd,QAAS,KAIhD,WACE1F,KAAK2gB,MAAMgC,YAAY3iB,KAAKsjB,UACjCtjB,KAAK2gB,MAAMgC,WAAWO,WAAW,OAAD,UACzBlC,KAAKC,MAAMC,eAAejG,QAAQ,uBAAyB,QAIzD,W,oDACT,MAAMyD,EAAO1e,KAAK2gB,MAAMgC,WACxB,IAAKjE,EAAM,KAAM,oBACjB,IAAKA,EAAKK,MACN,KAAM,mCAAkC,QAAiBL,GAAM3R,KAC3D,SAER,MAAMwxB,GAA8B,QAArB,EAAA7f,EAAK7Y,IAAI,oBAAY,eAAEH,QAAS,GACzC84B,EAAaD,EAAO76B,aACd,QAAmB,CACrB6U,cAAc,EAAAY,EAAA,GAAYuF,EAAK7Y,IAAI,QAAQH,OAC3C8S,YAAY,EAAAW,EAAA,GACRuF,EAAK7Y,IAAI,QAAQH,MACgB,GAA7BgZ,EAAK7Y,IAAI,YAAYH,MAAa,KAE1CqT,WAAYwlB,EAAOj8B,IAAK2G,GAAMA,EAAE9J,IAAI4N,KAAK,OAC1C8O,YACH,GACN,GAAI2iB,EAAW96B,SAAW66B,EAAO76B,OAC7B,MACI66B,EAAO76B,OAAS86B,EAAW96B,OADzB,mDAGV,MAAMmgB,QAAe,QACjB,IAAI,IAAc7jB,KAAK2gB,MAAMgC,WAAWjd,QAC1CmW,YAQF,OAPA7b,KAAKyiB,YACLziB,KAAK+gB,aAAe8C,EACpB3C,eAAelG,QACX,4BACAgG,KAAKwC,UAAUK,IAEnB7jB,KAAK8jB,QAAQ,WACND,K,6CAlJFqa,GAAgB,0B,0BAAhBA,EAAgB,QAAhBA,EAAgB,qBAFb,S,GAET,I,kMCbP,IAAIO,EAA0B,CAAEt/B,GAAI,UAAW0I,KAAM,gBAE9C,SAAS62B,EAAkBxuB,GAC1BA,IAAMuuB,EAAgBvuB,GAMvB,MAAMyuB,EA6DT,YAAY/2B,EAAuC,I,MAC/C5H,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAKsI,YACDV,EAAKU,cACL,OACIV,EAAKrI,OACD,QAAsB,OAAW,IAAI0V,KAAQ,GAAI,CAC7CiK,UAAW,KAG3Blf,KAAKuI,UACDX,EAAKW,YACL,QACI,OAA8B,IAAnBvI,KAAKsI,YAAoBV,EAAKnI,UAAY,KAE7DO,KAAKgP,SAAWpH,EAAKoH,UAAY,GACjChP,KAAKiP,SACoC,QAApC,EAAArH,EAAKqH,SAAWwvB,EAAczzB,aAAM,eAAEgC,gBAAiB,GAC5DhN,KAAK+O,MACDnH,EAAKmH,MACL/O,KAAKiP,SACLwvB,EAAczzB,OACd,IACFgC,cACF,MAAMwB,EAAqB5G,EAAK4G,WAAa,GAC7CxO,KAAKwO,UAAYA,EACZxM,OAAQkO,IAAeA,EAAKrB,UAC5BvM,IAAK0S,GAAM,IAAI,KAAKA,IACzBhV,KAAKs9B,WACD,QACI11B,EAAK01B,WACD9uB,EACKxM,OAAQkO,GAASA,EAAKrB,UACtBvM,IAAK8C,GAAM,IAAI,IAAMA,IAC9B,UACC,GACTpF,KAAKmP,MAAQvH,EAAKuH,OAAS,GAC3BnP,KAAKoM,KAAOxE,EAAKwE,MAAQ,GACzBpM,KAAKoP,UAAYxH,EAAKwH,QACtBpP,KAAKsP,UAAY1H,EAAK0H,QACtBtP,KAAKT,KAA0B,IAAnBS,KAAKsI,YACjBtI,KAAKP,SAAWO,KAAKsP,QACf,KACA1H,EAAKnI,WACL,OAAqC,IAAjBmI,EAAKW,UAAkBvI,KAAKT,OAChD,GACNS,KAAKqP,SAAWzH,EAAKyH,UAAY,GACjCrP,KAAKkG,SAAW0B,EAAK1B,UAAY,GACjClG,KAAKuP,YAAc3H,EAAK2H,UACxBvP,KAAKu9B,oBAAsB31B,EAAK21B,qBAAuB,GACvDv9B,KAAKq9B,UAAYr9B,KAAKwO,UAAU7L,KAC3BuN,GAASA,EAAKlF,QAAUhL,KAAK+O,MAElC/O,KAAKw9B,OAAS51B,EAAK41B,OAAS,IAAImB,EAAc/2B,EAAK41B,QAAU,KAEzDx9B,KAAKwP,WADL5H,EAAK2H,UACa,CACdtP,MACuB,IAAnBD,KAAKsI,aACL,IAAI2M,KACuC,IAAtCrN,EAAK4H,WAAmBovB,aAC3Bp/B,UACNY,IACIwH,EAAK4H,WAAWpP,KAChB,IAAI6U,KACqC,IAApCrN,EAAK4H,WAAmBqvB,WAC3Br/B,UACNe,SAAUqH,EAAK4H,WAAWjP,SAC1BkuB,QAAS7mB,EAAK4H,WAAWif,QACzBqQ,aAAcl3B,EAAK4H,WAAWsvB,cAGhB,GAEtB,MAAMpvB,EAAS9H,EAAK8H,QAEhBA,aAAM,EAANA,EAAQ1E,SACPhL,KAAKs9B,UAAU36B,KAAMsG,GAAMA,EAAE+B,QAAU0E,EAAO1E,QAE/ChL,KAAKs9B,UAAU97B,KAAK,IAAI,IAAMkO,IAElC1P,KAAK0P,OAASA,GAAW1P,KAAKs9B,UAAU,IAAc,KACtDt9B,KAAK++B,WAAan3B,EAAKm3B,YAAcn3B,EAAK8H,OAC1C1P,KAAKyP,YAAc7H,EAAK6H,aAAe,GACvCzP,KAAK2P,eAAiB/H,EAAK+H,gBAAkB,GAC7C3P,KAAK4L,QAAS,QAAY5L,OAAS,OACnCA,KAAKqK,KACe,aAAhBrK,KAAK4L,OACC,YACA5L,KAAKwO,UAAU7L,KAAMsG,GAAMA,EAAE+1B,aAC7B,WACA,WACV,IAAK,MAAMrtB,KAAO/J,EACR+J,KAAO3R,OACTA,KAAK2P,eAAegC,GAChB/J,EAAK+J,IAAQ3R,KAAK2P,eAAegC,IAG7C3R,KAAK2P,eAAe1D,UAAYjM,KAAK2P,eAAe1D,UAAY,IAAI3J,IAC/DL,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAEO,MAAOxC,SAtGzC,IAAwC2R,GAC3C,OAAO3R,KAAK2P,eAAegC,GA0G/B,aACI,OAAO3R,KAAKwO,UAAUxM,OAAQoL,KAAQA,EAAE4xB,aAG5C,YACI,OAAOh/B,KAAKs9B,UAAU,IAAM,KAEhC,eACI,OAAO,OAAU,IAAIroB,KAAKjV,KAAKT,MAAO,IAAI0V,MAMvC,S,MACH,MAAMgqB,EAAG,iBAAiBj/B,MACpBI,GAAM,QAAY,OAAWJ,KAAKT,KAAMS,KAAKP,WAC7CF,EAAOS,KAAKsP,SAAU,OAAItP,KAAKT,KAAM,CAAE2/B,MAAO,KAAQl/B,KAAKT,KACjE0/B,EAAI32B,aAAc,OAAY/I,GAC9B0/B,EAAI12B,UAAYnI,EAChB,MAAMoO,EAAYxO,KAAKwO,UAyBvB,OAxBIxO,KAAKuP,YACL0vB,EAAIzvB,WAAa,OAAH,wBACPxP,KAAKwP,YAAU,CAClBovB,YAAaK,EAAI32B,YACjBu2B,WAAW,OAAY7+B,KAAKwP,WAAWpP,QAG/C6+B,EAAIzvB,WAAayvB,EAAIzvB,YACfnK,OAAOnG,KAAK+/B,EAAIzvB,YAAY9L,OACxBu7B,EAAIzvB,WAER,KACNyvB,EAAIzwB,WAAY,QAAOA,EAAW,SAC7BxO,KAAKsP,UACN2vB,EAAItvB,eAAeE,UAAY,IAEnCovB,EAAItvB,eAAe1D,SAAWgzB,EAAItvB,eAAe1D,SAAS3J,IACrDL,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAEO,MAAO,SAE5Cy8B,EAAIpY,UAAuB,QAAX,EAAA7mB,KAAK0P,cAAM,eAAEvQ,UACtB8/B,EAAIhzB,gBACJgzB,EAAI1/B,YACJ0/B,EAAIx/B,gBACJw/B,EAAIrzB,OACJqzB,EAIX,YAMI,MAAMz+B,EAAM,IAAIyU,KACV1V,EAAOS,KAAKT,KAClB,OAAI,OAASiB,GAAK,OAAIjB,EAAM,CAAEqH,SAAU,MAAe,UACnD,OAASpG,EAAKjB,GAAc,YAC5B,OAASiB,GAAK,OAAIjB,EAAM,CAAEqH,QAAS,MAAe,WAClD,OAASpG,GAAK,OAAIjB,EAAM,CAAEqH,QAAS5G,KAAKP,YACjC,cACJ,OAGX,mBACI,MAAMe,EAAM,IAAIyU,KAChB,OACIjV,KAAKm/B,WACJ,OAAQ3+B,EAAKR,KAAKT,QACf,OAASiB,GAAK,OAAWR,KAAKT,KAAMS,KAAKP,c,+HC3OzD,MAAM2/B,EAAkB,uBAMjB,SAASC,EACZlvB,GAEA,MAAMyP,GAAQ,OAAczP,GAC5B,OAAO,SAAI,GAAGivB,IAAkBxf,EAAQ,IAAMA,EAAQ,MAAMjE,MACxD,OAAKkE,GAASA,EAAKvd,IAAKvD,GAAM,IAAI,IAAcA,MASjD,SAASugC,EAAUngC,EAAYgR,EAA6B,IAC/D,MAAMyP,GAAQ,OAAczP,GAC5B,OAAO,SACH,GAAGivB,KAAmBrf,mBAAmB5gB,KACrCygB,EAAQ,IAAMA,EAAQ,MAE5BjE,MAAK,OAAKvU,GAAS,IAAI,IAAcA,KAwCpC,MAAMm4B,EAAY,CACrB33B,EACAuI,K,MAGA,OADoB,QAAZ,EAAAvI,SAAY,gBAAEgE,OACfhE,EAAKzI,GAzBT,SACHA,EACAyI,EACAuI,EAA6B,GAC7B3E,EAA0B,SAE1B,MAAMoU,GAAQ,OAAczP,GAC5B,OAAmB,UAAX3E,EAAqB,MAAQ,OACjC,GAAG4zB,KAAmBrf,mBAAmB5gB,KACrCygB,EAAQ,IAAMA,EAAQ,KAEf,UAAXpU,EAAqB5D,EAAO,IAAI,IAAcA,GAAM43B,UACtD7jB,MAAK,OAAKvU,GAAS,IAAI,IAAcA,KAatBq4B,CAAY73B,EAAKzI,GAAIyI,EAAMuI,GAtCzC,SAAqBvI,GACxB,OAAO,SAAK,GAAGw3B,IAAmB,IAAI,IAAcx3B,GAAM43B,UAAU7jB,MAChE,OAAKvU,GAAS,IAAI,IAAcA,KAoCas4B,CAAY93B,IAQ1D,SAAS+3B,EAAYxgC,EAAYgR,EAA6B,IACjE,MAAMyP,GAAQ,OAAczP,GAC5B,OAAO,SACH,GAAGivB,KAAmBrf,mBAAmB5gB,KACrCygB,EAAQ,IAAMA,EAAQ,KAE1B,CACIO,cAAe,W,gGC/FpB,SAASyf,EACZ70B,G,MAEA,OAAqB,QAAjB,EAAAA,EAAQuyB,iBAAS,eAAE55B,QACfqH,EAAQuyB,UAAUtb,MAAO/f,GAA4B,aAAtBA,EAAEiN,iBAC1B,WAEPnE,EAAQuyB,UAAUgB,KACbr8B,GACyB,cAAtBA,EAAEiN,iBACoB,gBAAtBjN,EAAEiN,iBAGH,YAEJ,WAEJ,WA2FX,MAMM2wB,EAA+C,CACjDC,MAHU,MAIVC,OAJU,MAKVC,KANS,MAOTC,MAPS,MAQTC,IATQ,KAURjC,KAVQ,KAWR/9B,KAZS,GAaTg/B,MAbS,GAcT/+B,OAfW,EAgBXyG,QAhBW,GAmBTu5B,EAA8B,CAChCC,cAAc,EACdt6B,QAAQ,GAOL,SAASu6B,EAAgBh1B,GAC5B,MAAMvI,GAASuI,GAAO,IAAItI,MAAM,KAChC,OAAOD,EAAMY,OAAS,GAAKZ,EAAM,GAAK+8B,EAAa/8B,EAAM,IAAM,EAG5D,SAASw9B,EAAU5/B,EAAanB,EAAsB,IAAI0V,MAC7D,OAAO,OAAW1V,EAAM8gC,EAAgB3/B,IAGrC,SAAS6/B,EACZhC,EACAxzB,EACAy1B,GAEA,OAAOjC,EAAOv8B,OACTiH,IAAK,MAAC,QAAiD,QAAhD,EAIT,SACH8B,EACAy1B,G,MAEA,MAAM,MAAE5xB,GAAU7D,EAClB,IAAK,MAAMyB,KAAQoC,EAAMjB,MACrB,GAAiB,QAAb,EAAA6yB,EAAQh0B,UAAK,eAAE9I,OACf,IAAK,MAAM+8B,KAAWD,EAAQh0B,GAC1B,GAAIi0B,GAAWC,EAAgB31B,EAAS01B,GACpC,OAAO,OAAP,wBAAYN,GAAkBM,EAAQE,OAItD,OAAOR,EAjBKS,CAAc,OAAD,wBAAM71B,GAAO,CAAE6D,MAAO3F,IAAKu3B,UAAQ,eAAE16B,UAoB3D,SAAS46B,GACZ,KAAEnhC,EAAI,SAAEE,EAAQ,KAAEsP,GAClB0xB,GAEA,IAAII,EAAU,EACd,MAAM,WAAEC,GAAeL,EACvB,OAAKK,IAEDA,EAAW5/B,kBAAkB6H,OAC7B+3B,EAAW5/B,OAAO8gB,MAAO/Y,IAAK,MAAC,OAAY,QAAZ,EAAA8F,aAAI,EAAJA,EAAM7N,cAAM,eAAEmP,SAASpH,OAEtD43B,GAAW,GAEXC,EAAWC,YACX,QAAS,OAAWxhC,EAAME,GAAW6gC,EAAUQ,EAAWC,cAE1DF,GAAW,GACXC,EAAWE,WAAY,OAAQzhC,EAAM+gC,EAAUQ,EAAWE,aAC1DH,GAAW,GAEXC,EAAWG,YACXZ,EAAgBS,EAAWG,aAAexhC,IAE1CohC,GAAW,GAEXC,EAAWI,YACXb,EAAgBS,EAAWI,aAAezhC,IAE1CohC,GAAW,GACRA,GAAWx7B,OAAOnG,KAAK4hC,GAAYp9B,U,sUC9LvC,Y,MAAMy9B,EA0ET,YACY1mB,EACAD,GADA,KAAAC,UACA,KAAAD,OA1EJ,KAAA4mB,oBAAsB,IAAI3gB,EAAA,EAAwB,IAElD,KAAA4gB,QAAU,IAAI5gB,EAAA,EAAwB,IAEtC,KAAAK,SAAW,IAAIL,EAAA,GAAyB,GAEhC,KAAA6gB,mBAAqBthC,KAAKohC,oBAAoBjgB,eAEtD,KAAAogB,aAAwCvhC,KAAKqhC,QAAQ1lB,MACzD,EAAAmG,EAAA,GAAa,MACb,EAAAL,EAAA,GAAI,IAAMzhB,KAAK8gB,SAAS9S,MAAK,KAC7B,EAAAuT,EAAA,GAAWpR,IAAOA,aAAC,EAADA,EAAGzM,QAAS,EAAI1D,KAAKwhC,UAAUrxB,IAAK,EAAAqR,MAAG,MACzD,EAAAigB,EAAA,GAAW,IAAM,KAGL,KAAAz8B,gBAA6C,EAAA6c,EAAA,IAAc,CACvE7hB,KAAKya,QAAQoF,KACb7f,KAAKuhC,aACLvhC,KAAKohC,sBACNzlB,MACC,EAAAmG,EAAA,GAAa,MACb,EAAAxf,EAAA,GAAI,EAAEi8B,EAAQloB,EAAOvL,MACjB,MACMsF,GADSpQ,KAAKqhC,QAAQ1e,YAAc,IACpB3V,cAChBjI,GAAU,QACZ,IACOw5B,EACEv8B,OACIiH,GACGA,EAAE+B,MAAMgC,cAAcqD,SAASD,IAC/BnH,EAAEpB,KAAKmF,cAAcqD,SAASD,IAC9BnH,EAAEqB,aAAa0C,cAAcqD,SAASD,IAE7C9N,IAAK8C,IAAM,CACRjG,GAAIiG,EAAEjG,GACNkL,KAAM,QACNxC,KAAMzC,EAAEkF,cAAgBlF,EAAEyC,KAC1B0B,YAAa,aAAanE,EAAEsE,kBAEjCoB,EACExI,IAAK0S,IAAM,CACR7V,GAAI6V,EAAEhK,MACNX,KAAO2K,EAAU3K,MAAQ,UACzBxC,KAAMmN,EAAEnN,KACR0B,YAAayL,EAAEhK,SAElBhJ,OACIiH,GACGA,EAAEpB,KAAKmF,cAAcqD,SAASD,IAC9BnH,EAAEM,YAAYyD,cAAcqD,SAASD,IACrCnH,EAAEoB,KAAK2C,cAAcqD,SAASD,OAEvCiG,EAAM/T,IAAK0S,IAAM,CAChB7V,GAAI6V,EAAEhK,MACNX,KAAM,OACNxC,KAAMmN,EAAEnN,KACR0B,YAAayL,EAAEhK,UAGvB,MAGJ,OADAjG,EAAQ0J,KAAK,CAACC,EAAGC,IAAMD,EAAE7G,KAAK8Z,cAAchT,EAAE9G,OACvC9C,KAEX,EAAA0c,EAAA,GAAI,IAAMzhB,KAAK8gB,SAAS9S,MAAK,KAC7B,EAAAoT,EAAA,GAAY,IAGA,KAAAnc,QAAUjF,KAAK8gB,SAASK,eAEjC,KAAAqgB,UAAarxB,IAAc,QAAYA,GAM1CnQ,KAAKya,QAAQoF,KAAKyC,YAClBtiB,KAAKgF,eAAesd,YACpBtiB,KAAKolB,OAGI,O,0DACHplB,KAAKwa,KAAKkB,YAAYC,MAAK,EAAAC,EAAA,GAAO3S,GAAMA,IAAI4S,YAClD,MAAMrJ,GAAM,SACuB,QAA/B,EAAAxS,KAAKwa,KAAKknB,aAAa51B,gBAAQ,eAAEE,kBACjC,oBAEJ,GAAIwG,EAAK,CACL,MAAMmvB,EAAUnvB,EAAImvB,QAAQ,sBAC5BA,EAAQ7mB,SAASwH,UAAWsf,IACxB,MAAM/hB,EAAO,GACb,IAAK,MAAMxV,KAAQu3B,EACf,IAAK,MAAM1xB,KAAQ0xB,EAAav3B,GAC5BwV,EAAKre,KAAK,OAAD,wBAAM0O,GAAI,CAAE7F,UAG7BrK,KAAKohC,oBAAoBpzB,KAAK6R,KAElC8hB,EAAQE,UAIT,UAAUx2B,GACbrL,KAAKqhC,QAAQrzB,KAAK3C,I,6CAzGb81B,GAAoB,0B,0BAApBA,EAAoB,QAApBA,EAAoB,qBAFjB,S,GAET,G,sFCaA,Y,MAAMW,G,6CAAAA,I,wBAAAA,I,4BAZA,CACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,S,GAID,G,0PC3BK,oBACI,oBAAU,iBAAK,QACnB,S,yBA0BQ,iBACI,iBAAO,iBAAK,QACZ,kBACI,S,gBACJ,QACJ,S,sBAFQ,wG,sBAGR,iBACI,iBAAO,qBAAS,QAChB,+BAGJ,S,yBAlCR,kBACI,iBACI,oBAAmB,iBAAK,gBAAM,aAAC,QAAO,aAAC,QACvC,6BACI,oBAMA,qBAAW,sCAAyB,QACxC,QACJ,QACA,kBACI,kBAAO,mBAAM,QACb,mBACI,UAIJ,QACJ,QACA,mBACI,yBAMA,yBAMJ,QACJ,S,sBApCmB,0BAgBP,oRAOwB,4CAMA,iD,wCA9BxC,SACI,yBAqCA,oBACI,oBAAmB,0DAAiB,gBAAI,QAC5C,QACJ,Q,wBAxCW,+B,yBA0CP,kBACI,0BACA,aAAG,SAAa,QACpB,S,qBAF6B,8BACtB,2BAiBZ,Y,MAAMC,EAKT,YACqC56B,EACzBkvB,GADyB,KAAAlvB,QACzB,KAAAkvB,cAJL,KAAApxB,QAAU,GAOV,WACHjF,KAAKuiB,QAAU,IAAI,KAAc,CAC7B/T,UAAW,CAAC,+BAAMxO,KAAKmH,MAAMyH,OAAS,IAAG,CAAEC,UAAU,OAEzD7O,KAAK0e,MAAO,QAAkB1e,KAAKuiB,SAG1B,O,oDACTviB,KAAK0e,KAAKI,mBACV,MAAMkjB,EAAYpU,IACd5tB,KAAKiF,QAAU,IACf,QAAY2oB,GACZ5tB,KAAKq2B,YAAYG,cAAe,GAEpC,IAAKx2B,KAAK0e,KAAKK,MAAO,CAClB,MAAMc,EAAO,GACb,IAAK,MAAMlO,KAAO3R,KAAK0e,KAAK2V,SACpBr0B,KAAK0e,KAAK2V,SAAS1iB,GAAKyiB,SACxBvU,EAAKre,KAAKmQ,GAGlB,MAAMqwB,EACF,oCAAoCniB,EAAK9S,KAAK,UAqBtD,GAlBA/M,KAAKq2B,YAAYG,cAAe,EAChCx2B,KAAKiF,QAAU,wCACM,QAAuB,CACxC8T,WAA8C,QAAlC,EAAA/Y,KAAK0e,KAAK2V,SAASiJ,UAAU53B,aAAK,eACxCpD,IAAK8C,GAAMA,EAAEjG,IACd4N,KAAK,KACVwL,aAAczX,KAAKC,MAAMf,KAAK0e,KAAKhZ,MAAMnG,KAAO,KAChDiZ,WACI1X,KAAKC,MAAMf,KAAK0e,KAAKhZ,MAAMnG,KAAO,KACP,GAA3BS,KAAK0e,KAAKhZ,MAAMjG,WAEnBoc,YACAI,MAAOld,IAIJ,MAHAijC,EACI,0DAEEjjC,KAEH2E,QAAU,EACjB,OAAOs+B,EACH,0DAGRhiC,KAAKiF,QAAU,4BACT,QAAU,IAAI,KAAcjF,KAAK0e,KAAKhZ,QACvCmW,YACAI,MAAOld,IAEJ,MADAijC,EAAS,2BACHjjC,KAEd,QACI,mCACIiB,KAAKmH,MAAMyH,MAAMtE,cAAgBtK,KAAKmH,MAAMyH,MAAM/G,QAG1D7H,KAAKq2B,YAAYzS,W,6CAtEZme,GAA4B,MAMzB,MAAe,c,wBANlBA,EAA4B,4xB,GAAA,MArEjC,kBACI,cAAI,uBAAW,QACf,iBACA,0BAGJ,QACA,gCA0CA,2C,sBA9Ca,kCAIE,kCAAgB,gB,wOA8DhC,I,wGCxDS,eAA0C,SAAU,S,qBAAV,wB,yBAC1C,eACI,S,gCAEJ,S,qBAFI,gGAwCb,Y,MAAME,EAWT,YACsCtN,EAC1BkC,GAD0B,KAAAlC,WAC1B,KAAAkC,WAXI,KAAAnvB,OAAS1H,KAAK20B,SAASjtB,OACvB,KAAAwI,KAAOlQ,KAAK20B,SAASzkB,KACrB,KAAAjQ,MAAQD,KAAK20B,SAAS10B,MACtB,KAAAG,IAAMJ,KAAK20B,SAASv0B,IAW7B,SAAS8hC,EAAgB,GACxBA,EAAQ,IACZzmB,WAAW,K,MACP,MAAMgd,EAAkD,QAAzC,EAAAz4B,KAAK62B,SAAS9yB,cAAco+B,qBAAa,eAClDA,cACN,IAAK1J,EAAQ,OAAOz4B,KAAKoiC,WAAWF,GACpC,MAAM3Y,EACC8Y,SAAS5J,EAAOlG,MAAMluB,IAAK,IAAM,IADlCklB,EAEC8Y,SAAS5J,EAAOlG,MAAMruB,KAAM,IAAM,IAEzClE,KAAKw3B,MAAQjO,GAAc,GAAM,SAAW,MAC5CvpB,KAAKu3B,MAAQhO,GAAc,GAAM,QAAU,QAC5C,KAGP,sBACI,MAAO,I,6CAhCF0Y,GAAwB,MAYrB,MAAgB,e,wBAZnBA,EAAwB,0UAvD7B,iBAUI,iBACA,iBACI,gBAAmC,SAAY,QAC/C,qBACA,qBAIJ,QACJ,S,MAhBI,gFADA,qBAUuC,yBACL,8BACC,iC,oeAyCxC,I,8OC/BA,Y,MAAMK,UAA4B,KA+FrC,YACYC,EACA/nB,EACAjV,EACAi9B,GAERh9B,QALQ,KAAA+8B,SACA,KAAA/nB,OACA,KAAAjV,YACA,KAAAi9B,YAlGJ,KAAAC,QAAU,IAAI,IAA0B,IACxC,KAAA/hB,SAAW,IAAI,IAA6B,IAC5C,KAAAgiB,OAAS,IAAI,IAA0B,IACvC,KAAAC,UAAY,IAAI,IAA0B,IAC1C,KAAAC,UAA6B,GAC7B,KAAAC,MAAQ,IAAI,IAAwB,GAEpC,KAAAC,gBAAiB,QAAc,CACnC9iC,KAAKuiC,OAAOj7B,MACZtH,KAAK6iC,QACNlnB,MACC,OAAU,EAAElP,MACR,QAAc,CACV8L,cAAc,QAAY,OAAW,IAAItD,OACzCuD,YAAY,QAAY,OAAS,IAAIvD,OACrC5K,KAAM,OACNsD,MAAOlB,EAAItN,OAKP,KAAAqlB,UAAYxkB,KAAKuiC,OAAOj7B,MAAMqU,MAC1C,OAAWlP,IACP,SAAaA,EAAItN,GAAI,CAAE0I,KAAM,UAAW8T,MACpC,OAAK1Z,IACAA,EAAE8I,mBAAmBhC,MAAQ9G,EAAE8I,QAAU,IAAIzI,IACzCygC,GAAe,IAAI,KAAK,OAAD,wBAAMA,GAAC,CAAEv2B,KAAMC,UAKvD,OAAY1N,GAAM,KAGd,KAAAikC,MAAQhjC,KAAKuiC,OAAOj7B,MAAMqU,MAC9B,OAAKlP,I,QAGD,GAFAzM,KAAK4iC,UAAY,GACjB5iC,KAAKijC,UAAU,QACVx2B,EAAK,OACV,MAAMxC,EAAWjK,KAAKwa,KAAK0oB,UAAUvgC,KAChCqH,GAAQA,EAAI7K,KAAOsN,EAAI9C,WAE5B,IAAKM,EAAU,OACf,MAAM4c,GACe,QAAjB,EAAA5c,EAAS6B,gBAAQ,eAAEC,mBACY,QAA/B,EAAA/L,KAAKwa,KAAKknB,aAAa51B,gBAAQ,eAAEC,iBACrC,IAAK8a,EAAW,OAChB,IAAI8a,GAAU,SAAU9a,EAAW,kBAAkB8a,QACjDl1B,EAAItN,IAERa,KAAKqiB,aACD,aACAsf,EACK7mB,SACAwH,UAAW1U,GACR5N,KAAKmjC,qBAAqBv1B,GAAK,GAAIiZ,KAG/C7mB,KAAKqiB,aAAa,kBAAmBsf,EAAQE,QAC7CF,GAAU,SAAU9a,EAAW,kBAAkB8a,QAC7C,GAAGl1B,EAAItN,eAEXa,KAAKqiB,aACD,iBACAsf,EAAQ7mB,SAASwH,UAAW1U,GAAM5N,KAAK0iC,OAAO10B,KAAKJ,GAAK,MAE5D5N,KAAKqiB,aAAa,qBAAsBsf,EAAQE,WAIhD,KAAAuB,eAAgB,QAAc,CAClCpjC,KAAKwkB,UACLxkB,KAAKyiC,QACLziC,KAAK2iC,UACL3iC,KAAK0gB,WACN/E,MAEC,OAAI,EAAErP,EAAO+2B,EAAQC,MACjBtjC,KAAK4iC,UAAY,GACjB,IAAK,MAAM,GAAEzjC,EAAE,SAAEoN,KAAcD,EAAO,CAClC,MAAMi3B,EAAUF,EAAO/E,KAAMr8B,GAAM9C,IAAO8C,GACpCuhC,EAAcF,EAAShF,KAAMr8B,GAAM9C,IAAO8C,GAChDjC,KAAK4iC,UAAUzjC,GAAMoN,EACdg3B,EAEGC,EACA,WACA,OAHA,OAIJ,eAEVxjC,KAAKyjC,aAAan3B,MAWtBtM,KAAKolB,OAGI,O,oDACHplB,KAAKwa,KAAKkB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,YAClD7b,KAAK0iB,WAAW,CACZghB,gBAA4D,IAA5C1jC,KAAKuF,UAAUM,IAAI,uBAEvC7F,KAAKqiB,aAAa,OAAQriB,KAAKgjC,MAAM1gB,aACrCtiB,KAAKqiB,aAAa,UAAWriB,KAAKojC,cAAc9gB,aAChDtiB,KAAKqiB,aACD,QACAriB,KAAKwkB,UAAUlC,UAAWhW,GAAUtM,KAAKyjC,aAAan3B,OAIvD,aAAakjB,EAAgB,KAChCxvB,KAAKqiB,aACD,wBACAriB,KAAK8iC,eAAexgB,UAAWrZ,GAC3BjJ,KAAKyiC,QAAQz0B,KAAK/E,EAAE3G,IAAKL,GAAMA,EAAE6X,aAGzC9Z,KAAKO,SACD,OACA,IAAMP,KAAK6iC,MAAM70B,MAAK,IAAIiH,MAAOzV,WACjCgwB,GAID,cACHxvB,KAAKsX,cAAc,QAGhB,WAAWpP,GACdlI,KAAK0gB,SAAS1S,KAAK,OAAD,wBAAMhO,KAAK0gB,SAASiC,YAAeza,IAGlD,sBACH,MAAExC,GACFmhB,GAEA,MAAM8c,GAAWj+B,GAAS,IAAI1D,OACzBghB,IAAO,CAAC,OAAQ,WAAW3S,SAAS2S,EAAE9c,WAErCoG,GAAS5G,GAAS,IAAI1D,OACvBghB,GACkB,SAAfA,EAAE9c,UACc,YAAf8c,EAAE9c,UAAqC,SAAX8c,EAAE3Y,MAEvCrK,KAAKyiC,QAAQz0B,KAAK1B,EAAMhK,IAAK0gB,GAAMA,EAAEtb,QAAUsb,EAAElJ,WACjD9Z,KAAK2iC,UAAU30B,KACX1B,EACKtK,OAAQghB,IAAOA,EAAE1M,aACjBhU,IAAK0gB,GAAMA,EAAEtb,QAAUsb,EAAElJ,WAElC9Z,KAAK4jC,eAAeD,EAAS9c,GAC7B7mB,KAAKY,QAAQ,SAAU,IAAMZ,KAAK6jC,eAAgB,KAG9C,eACJ,MAAMx8B,EAAY,GACZy8B,EAAU9jC,KAAKuF,UAAUM,IAAI,uBAAyB,GAC5D,IAAK,MAAMk+B,KAAW/jC,KAAK4iC,UAClB5iC,KAAK4iC,UAAUmB,KACpB18B,EAAU,IAAI08B,KAAa,CACvB/6B,KACI86B,EAAQ,QAAQ9jC,KAAK4iC,UAAUmB,OAC/BD,EAAQ,GAAG9jC,KAAK4iC,UAAUmB,OAC1B,IAAgB,GAAG/jC,KAAK4iC,UAAUmB,MACtCnX,QAAS,KAGjB5sB,KAAKuiC,OAAOyB,UAAU,QAAS38B,GAG3B,eAAes8B,EAAoB9c,G,QACvC,MAAMhH,EAAO,GACb,IAAK,MAAMokB,KAAUN,EAAS,CAC1B,MAAMngC,EAAIygC,EAAOzgC,EAAIygC,EAAOttB,UACtB/S,EAAIqgC,EAAOrgC,EAAIqgC,EAAOrtB,WAC5BiJ,EAAKre,KAAK,CACN0E,SAAU,CACN1C,GAA0B,QAAvB,EAAAygC,EAAOztB,wBAAgB,eAAEnG,SAAS,UAAW,EAAI7M,EAAIA,EACxDI,GAA0B,QAAvB,EAAAqgC,EAAOztB,wBAAgB,eAAEnG,SAAS,WAAY,EAAIzM,EAAIA,GAE7DN,QAAS,IACTsE,KAAM,OAAF,wBAAOq8B,GAAM,CAAEv0B,OAAQmX,MAGnC7mB,KAAKuiC,OAAO2B,YAAY,UAAWrkB,GAG/B,aAAavT,GACjB,MAAMuT,EAAO,GACP4U,EAAU,GACVvsB,EAAUlI,KAAK0gB,SAASiC,WAC9B,IAAK,MAAMgC,KAAQrY,EAAO,CACtBuT,EAAKre,KAAK,CACN0E,SAAUye,EAAKxlB,GACfmE,QAAS,IACT2zB,OAAO,EACPrvB,KAAM,CACFF,OAAQid,EAAK9c,KACb+D,OAAQ5L,KAAK4iC,UAAUje,EAAKjd,WAGpC,MAAMy8B,EAAU,KAAY,QAAD,+BACvBnkC,KAAKwiC,UAAUlf,UACftjB,KAAKwiC,UAAU9jB,KAAKwE,WAAW,CAC3BpJ,SAAU6K,EAAKxlB,GACf+Q,KAAMhI,EAAQ6G,OAAQ,UACtBoQ,aAAc,eAEZnf,KAAKwiC,UAAU4B,eACrB,QACI,2BAA2Bzf,EAAK9c,MAAQ8c,EAAKxlB,QAGrDs1B,EAAQjzB,KAAK,CACTrC,GAAIwlB,EAAKxlB,GACTiuB,OAAQ,QACR3hB,SAAU04B,IAEd1P,EAAQjzB,KAAK,CACTrC,GAAIwlB,EAAKxlB,GACTiuB,OAAQ,WACR3hB,SAAU04B,IAGlBnkC,KAAKuiC,OAAO8B,WACR,QACArkC,KAAK0gB,SAASiC,WAAW+gB,eAAiBjP,EAAU,IAExDz0B,KAAKuiC,OAAO2B,YAAY,QAASrkB,GACjC7f,KAAKY,QAAQ,SAAU,IAAMZ,KAAK6jC,eAAgB,M,6CA7O7CvB,GAAmB,iD,0BAAnBA,EAAmB,QAAnBA,EAAmB,Y,GAAzB,I,iNCaa,gBACI,iBAAO,yBAAa,QAAS,SACjC,S,sBADiC,wC,yBAEjC,gBAAiB,iBAAO,eAAG,QAAS,SAAQ,S,sBAAR,6B,yBACpC,gBAAqB,iBAAO,iBAAK,QAAS,SAAU,S,sBAAV,+B,yBAC1C,gBACI,iBAAO,qBAAS,QAChB,SACJ,S,sBADI,0G,yBAEJ,gBACI,iBAAO,iBAAK,QAAS,SACzB,S,sBADyB,qC,wCApBjC,iBAGI,gEAEA,iBACA,iBACI,aAAG,iBAAO,gBAAI,QAAS,SAAS,QAChC,aAAG,iBAAO,qBAAS,QAAS,UAAe,QAC3C,cAAG,kBAAO,uBAAU,QAAS,UAAe,QAC5C,sBAGA,sBACA,sBACA,uBAIA,uBAGJ,QACJ,Q,wBAhB+B,6BACK,mCACC,mCACpB,sCAGF,4BACE,8BACI,kCAIJ,+BA6BtB,Y,MAAMgC,EAwDT,YACsC3P,EAC1BkC,EACAC,G,MAF0B,KAAAnC,WAC1B,KAAAkC,WACA,KAAAC,WAzDL,KAAAthB,SAAW,GAEF,KAAAtF,KAAOlQ,KAAK20B,SAASzkB,KAErB,KAAAqG,IAAMvW,KAAK20B,SAASpe,IAEpB,KAAAguB,aAAevkC,KAAK20B,SAAS4P,aAE7B,KAAAC,GAAKxkC,KAAK20B,SAAS6P,GAEnB,KAAAC,KAAOzkC,KAAK20B,SAAS8P,KAErB,KAAA/tB,SAAiC,QAAtB,EAAA1W,KAAK20B,SAASje,gBAAQ,eAAEguB,QAAQ,GAE3C,KAAAC,SAAoC,IAAzB3kC,KAAK20B,SAASje,SAEzB,KAAAkuB,SAAW5kC,KAAK20B,SAASiQ,UAAY5kC,KAAK6kC,eAEnD,KAAAC,YAA0B,KA+BE,KAAA1N,QAAU,IAAMp3B,KAAK+kC,WACrB,KAAA1N,QAAU,IAAMr3B,KAAK4jB,QAC1B,KAAAuT,QAAU,IAAMn3B,KAAK+kC,WAClB,KAAAC,QAAU,IAAMhlC,KAAK+kC,WAhCtD,gBACI,OAAO,OAAqD,KAAhC/kC,KAAK20B,SAAS/jB,WAAa,GAAW,CAC9Dq0B,WAAW,IAOnB,eACI,OAAOnkC,KAAKse,KACR,OACqC,KAAhCpf,KAAK20B,SAAS/jB,WAAa,GAC5B,IAAIqE,OAKhB,qBACI,OAAOjV,KAAKklC,SAAW,GACjB,UACAllC,KAAKklC,SAAW,GAChB,UACA,UAiBH,SAAShD,EAAgB,GACxBA,EAAQ,IACZzmB,WAAW,K,MACP,MAAMgd,EAAkD,QAAzC,EAAAz4B,KAAK62B,SAAS9yB,cAAco+B,qBAAa,eAClDA,cACN,IAAK1J,EAAQ,OAAOz4B,KAAKoiC,WAAWF,GACpC,MAAM3Y,EACC8Y,SAAS5J,EAAOlG,MAAMluB,IAAK,IAAM,IADlCklB,EAEC8Y,SAAS5J,EAAOlG,MAAMruB,KAAM,IAAM,IAEzClE,KAAKw3B,MAAQjO,GAAc,GAAM,SAAW,MAC5CvpB,KAAKu3B,MAAQhO,GAAc,GAAM,MAAQ,SAC1C,KAGM,W,8CAET,GADAvpB,KAAKgkB,OACDhkB,KAAKwV,SAAU,OACnB,MAAMhD,GAAM,SAAUxS,KAAK20B,SAASjlB,OAAQ,oBAC5C,GAAI8C,EAAK,CACLxS,KAAKwV,SAAW,aAChB,MAAMzK,QAAgByH,EACjB2yB,QAAQ,qBAAsB,CAACnlC,KAAKuW,MACpC0F,MAAOhT,GAAM,MAClBjJ,KAAKwV,SACDzK,GAAWA,EAAQq6B,YAAcr6B,EAAQq6B,YAAc,MAI5D,OACCplC,KAAK8kC,aAAa9kC,KAAK4jB,QACtB5jB,KAAK23B,UACV33B,KAAK8kC,YAAc9kC,KAAK82B,SAASc,OAAO,CACpCE,iBAAkB93B,KAAK82B,SAClBvN,WACAwO,oBAAoB/3B,KAAKqlC,MACzBrN,cAAc,CACX,CACIC,QAAwB,UAAfj4B,KAAKu3B,MAAoB,MAAQ,QAC1CW,QAAwB,QAAfl4B,KAAKw3B,MAAkB,SAAW,MAC3CW,SAAUn4B,KAAKu3B,OAAS,MACxBa,SAAUp4B,KAAKw3B,OAAS,cAIxCx3B,KAAK8kC,YAAYzM,OAAOr4B,KAAK23B,UAG1B,QACC33B,KAAK8kC,cACL9kC,KAAK8kC,YAAYvM,UACjBv4B,KAAK8kC,YAAc,O,6CAjHlBR,GAA0B,MAyDvB,MAAgB,2B,wBAzDnBA,EAA0B,kE,GAAA,M,KAgDxB,KAAS,G,sKAhDX,a,CAAS,+BAAT,a,CAAS,0BAAT,a,CAAS,6BAAT,e,gpBA9DL,iBAEI,qCAAc,EAAAS,aAGjB,QACD,mBAOA,iC,MATI,0DAMA,gD,iTAoDL,I,kMCjEa,wBAII,SACJ,S,yBAHI,iBAEA,gD,wCAjBZ,4BAQI,wBAGI,2E,iBAEA,8B,iBAMJ,QACJ,Q,wBAVQ,gDAIoB,kD,yBAoBpB,wBAII,SACJ,S,yBAHI,iBAEA,gD,wCAjBZ,4B,iBAQI,wBAGI,wE,iBAEA,8B,iBAMJ,QACJ,Q,8BAhBI,oEAMI,6CAIoB,+CA6BjC,Y,MAAMO,UAAmC,KAyB5C,YACY9qB,EACA+nB,EACAjiB,EACAilB,GAER//B,QALQ,KAAAgV,OACA,KAAA+nB,SACA,KAAAjiB,UACA,KAAAilB,SA3BI,KAAArC,UAAYljC,KAAKwa,KAAKgrB,cAEtB,KAAAv7B,SAAWjK,KAAKwa,KAAKirB,gBAErB,KAAA37B,OAAS9J,KAAKwa,KAAKkrB,cAEnB,KAAAp+B,MAAQtH,KAAKuiC,OAAOj7B,MAEpB,KAAAq+B,SAAYl5B,IACxBzM,KAAKuiC,OAAO2B,YAAY,WAAY,IACpClkC,KAAKY,QACD,YACA,IACIZ,KAAKsgB,QAAQwV,SAAS,GAAI,CACtB8P,WAAY5lC,KAAKulC,OACjBM,YAAa,CAAEr5B,KAAMC,EAAItN,MAEjC,MAIQ,KAAA2mC,YAAe97B,GAAShK,KAAKwa,KAAKvQ,SAAWD,EAWhD,W,oDACHhK,KAAKwa,KAAKkB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,YAClD7b,KAAKqiB,aACD,cACAriB,KAAKulC,OAAOQ,cAAczjB,UAAW0jB,GACjCA,EAAOhtB,IAAI,QACLhZ,KAAKuiC,OAAOoD,SAASK,EAAOngC,IAAI,SAChC,Q,6CAzCTy/B,GAA0B,iD,wBAA1BA,EAA0B,imB,GAAA,MAjE/B,iBACI,kC,iBAqBA,kC,iBAqBJ,S,aArCS,0EAqBA,qE,qUAsCV,I,kQCTA,Y,MAAMW,UAAgC,KA6BzC,YACY1D,EACA2D,EACAxD,EACAyD,EACAZ,EACAjlB,EACA7F,EACAD,EACAjV,GAERC,QAVQ,KAAA+8B,SACA,KAAA2D,KACA,KAAAxD,SACA,KAAAyD,SACA,KAAAZ,SACA,KAAAjlB,UACA,KAAA7F,UACA,KAAAD,OACA,KAAAjV,YApCI,KAAAid,IAAMxiB,KAAKuiC,OAAO6D,QAElB,KAAA3+B,OAASzH,KAAKuiC,OAAO8D,WAErB,KAAAC,UAAYtmC,KAAKuiC,OAAOgE,cAExB,KAAA5+B,SAAW3H,KAAKuiC,OAAOiE,aAEvB,KAAA/R,QAAUz0B,KAAKuiC,OAAOkE,YAEtB,KAAAlN,OAASv5B,KAAKuiC,OAAOmE,WAErB,KAAAx+B,QAAUlI,KAAKuiC,OAAOr6B,QAEtB,KAAA2D,QAAU7L,KAAKuiC,OAAO12B,QAEtB,KAAA6W,WAAc7N,GAAM7U,KAAKuiC,OAAO7f,WAAW7N,GAE9C,YAAYsJ,G,8CACrB,MAAMjW,QAAgBlI,KAAKkI,QAAQyT,MAAK,OAAK,IAAIE,YAC3CkiB,EAAW5f,EAEXjW,EAAQ61B,QAAQ/7B,OAAQiH,GAAY,UAANA,GAAuB,YAANA,IAC/C,IAFA,QAAO,IAAKf,EAAQ61B,SAAW,GAAK,QAAS,YAGnD/9B,KAAK0iB,WAAW,CAAEqb,cAiBT,W,oDACH/9B,KAAKya,QAAQiB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,YACrD7b,KAAK2mC,aAAY,GACjB3mC,KAAKqiB,aACD,cACAriB,KAAKulC,OAAOQ,cAAczjB,UAAiB0jB,IAAW,QAAD,+BAKjD,GAJIA,EAAOhtB,IAAI,UACXhZ,KAAKuiC,OAAOoD,SAASK,EAAOngC,IAAI,UAEpC7F,KAAKuiC,OAAO2B,YAAY,WAAY,IAChC8B,EAAOhtB,IAAI,SAAU,CACrB,MAAMpK,EAAQ5O,KAAKya,QAAQ9X,KAAKqjC,EAAOngC,IAAI,UAC3C,IAAK+I,EAAO,OACZ5O,KAAK4mC,YAAYh4B,QACd,GAAIo3B,EAAOhtB,IAAI,QAAS,CAC3B,IAAI9I,EAAOlQ,KAAKuF,UAAUG,MAAM,eAKhC,GAJKwK,GAAQ81B,EAAOngC,IAAI,UAAYqK,EAAKlF,QACrCkF,EAAO,KACPA,QAAa,QAAU81B,EAAOngC,IAAI,SAASgW,cAE1C3L,EACD,OAAO,QACH,8BAA8B81B,EAAOngC,IAAI,WAEjD7F,KAAK6mC,WACD32B,aAAgBnH,MAAQmH,EAAK,GAAKA,GACpC+L,MAAOhT,KACL,QAAY,oBAAoB+8B,EAAOngC,IAAI,WAC3C7F,KAAKsgB,QAAQwV,SAAS,GAAI,CACtB8P,WAAY5lC,KAAKulC,OACjBM,YAAa,YAIrB7lC,KAAKY,QAAQ,kBAAmB,KAC5BZ,KAAKuiC,OAAO2B,YAAY,WAAY,YAOhD,YAAYt1B,G,MAChB5O,KAAKuiC,OAAOoD,SAA2C,QAAlC,EAAA3lC,KAAKwa,KAAK8J,YAAY1V,EAAMjB,cAAM,eAAExO,IACzD,MAAM2nC,EAAe,CACjB5gC,SAAU0I,EAAMlH,OAChBpE,QAAS,KACTsE,KAAM,CACFiE,QAAS,GAAG+C,EAAMtE,cAAgBsE,EAAM/G,iBAGhD7H,KAAKY,QAAQ,kBAAmB,IAC5BZ,KAAKuiC,OAAO2B,YAAY,WAAY,CAAC4C,KAI/B,WAAW52B,G,sDACrB,IAAI62B,EAAsB/mC,KAAKwa,KAAKknB,aAAa51B,SAC5CE,kBACL,IAAK+6B,EAAgB,OACS,iBAAnBA,IACPA,EAAiB,CACblgB,UAAWkgB,EACX3nC,OAAQ,qBAGhB,MAAMoT,GAAM,SAAUu0B,EAAelgB,UAAWkgB,EAAe3nC,QACzD4nC,SACIx0B,EAAI2yB,QAAQ,cAAe,CAACj1B,EAAKlF,MAAOkF,EAAK/Q,MACrDmD,IAAKL,GAAM,IAAI,IAAYA,IAM7B,GALA+kC,EAAUv4B,KACN,CAACC,EAAGC,IACAo4B,EAAeE,SAASx5B,QAAQiB,EAAErE,MAClC08B,EAAeE,SAASx5B,QAAQkB,EAAEtE,SAErC28B,aAAS,EAATA,EAAWtjC,QACZ,KAAM,kCAEV1D,KAAKuiC,OAAOoD,SAAqD,QAA5C,EAAA3lC,KAAKwa,KAAK8J,YAAY,CAAa,QAAZ,EAAA0iB,EAAU,UAAE,eAAE1/B,eAAO,eAAEnI,IACnE,MAAM6xB,EAAMgW,EAAU,GAAGzd,UACnB,iBAAE/S,GAAqBwwB,EAAU,GACjCF,EAAe,CACjB5gC,SAC0B,aAAtB8gC,EAAU,GAAG38B,KACP,CACI7G,GAAGgT,aAAgB,EAAhBA,EAAkBnG,SAAS,UACxB,EAAI2gB,EAAIxtB,EACRwtB,EAAIxtB,EACVI,GAAG4S,aAAgB,EAAhBA,EAAkBnG,SAAS,WACxB,EAAI2gB,EAAIptB,EACRotB,EAAIptB,GAEdotB,EACV1tB,QAC0B,aAAtB0jC,EAAU,GAAG38B,KACP,KACA,KACVzC,KAAM,CACFiE,QAAS,GAAGqE,EAAKrI,eACjBmtB,OAAQgS,EAAU,GAAGtwB,SACrB9F,UAAWo2B,EAAU,GAAGp2B,YAGhC5Q,KAAKY,QAAQ,kBAAmB,KAC5BZ,KAAKuiC,OAAO2B,YAAY,WAAY,CAAC4C,S,6CAnJpCb,GAAuB,0G,wBAAvBA,EAAuB,iDAFrB,CAAC,IAAsB,IAAqB,MAAoB,6V,GAAA,MAzCvE,mB,uHASA,mCAGA,kCAIA,kBAII,oBACA,+BAGI,yCAAiB,EAAAU,YAAA,K,kBACpB,QACL,S,eAzBI,8BAAmB,qDAAnB,CAAmB,yDAAnB,CAAmB,8BAAnB,CAAmB,kCAAnB,CAAmB,gCAAnB,CAAmB,+BAsBf,+G,8KAoBT,I,kHCtBa,kBACI,gBAAM,sBAAU,QAAO,SAE3B,S,sBAF2B,oF,yBAavB,kBACI,SACJ,S,sBADI,2C,yBAMA,iBAII,SACJ,S,yBADI,2B,yBAPZ,kBACI,gBAAqB,yBAAa,QAClC,iBACI,uBAMJ,QACJ,S,sBALgC,4C,yBArCxC,iBASI,iBACA,iBACI,gBACI,SACJ,QACA,uBAIA,iBACI,iBAOI,SACJ,QACA,uBAGJ,QACA,yBAWJ,QACJ,S,qBAtCI,2CAA2C,wCAJ3C,uBAUQ,2DAE2B,2CAOvB,mEAKA,iCAEkB,iDAIX,gFAwC5B,Y,MAAMO,EAYT,YACsCvS,EAC1BkC,GAD0B,KAAAlC,WAC1B,KAAAkC,WAZI,KAAAjoB,MAAQ5O,KAAK20B,SAAS/lB,MAEtB,KAAA7M,OAAS/B,KAAK20B,SAAS5yB,OAEvB,KAAA6J,OAAS5L,KAAK20B,SAAS/oB,OAWhC,SAASs2B,EAAgB,GACxBA,EAAQ,IACZzmB,WAAW,K,MACP,MAAMgd,EAAkD,QAAzC,EAAAz4B,KAAK62B,SAAS9yB,cAAco+B,qBAAa,eAClDA,cACN,IAAK1J,EAAQ,OAAOz4B,KAAKoiC,WAAWF,GACpC,MAAM3Y,EACC8Y,SAAS5J,EAAOlG,MAAMluB,IAAK,IAAM,IADlCklB,EAEC8Y,SAAS5J,EAAOlG,MAAMruB,KAAM,IAAM,IAEzClE,KAAKw3B,MAAQjO,GAAc,GAAM,SAAW,MAC5CvpB,KAAKu3B,MAAQhO,GAAc,GAAM,MAAQ,SAC1C,KAGP,sBACI,MAAO,I,6CAjCF2d,GAAyB,MAatB,MAAgB,e,wBAbnBA,EAAyB,krB,GAAA,MAlF9B,iBASA,6C,sBAPI,mBAAyB,cAAzB,CAAyB,qBAAzB,CAAyB,qBAAzB,CAAyB,c,2VAgF9B,I,mJCpFA,MAAMC,EAAkB,CAC3BC,KAAM,UACNjyB,QAAS,UACTmuB,SAAU,UACV+D,KAAM,UACN,eAAgB,UAChBC,QAAS,WAIN,Y,MAAMC,UAA6B,KAsCtC,YACYhF,EACAh9B,EACAgb,GAER/a,QAJQ,KAAA+8B,SACA,KAAAh9B,YACA,KAAAgb,UAxCJ,KAAAiiB,UAAsC,GACtC,KAAAI,UAA6B,GAE7B,KAAAI,MAAQhjC,KAAKuiC,OAAOhE,OAAO5iB,MAC/B,OAAKkE,IAID,GAHA7f,KAAKijC,UAAU,MACfjjC,KAAKijC,UAAU,MACfjjC,KAAK4iC,UAAY,GACZ/iB,aAAI,EAAJA,EAAMnc,OAAX,CACA,IAAK,MAAMkL,KAASiR,EAAM,CACtB,MAAMrN,GAAM,SAAU5D,EAAMzP,GAAI,YAChC,IAAIwiC,EAAUnvB,EAAImvB,QAAQ,YAC1B3hC,KAAKqiB,aACD,KAAKzT,EAAMzP,KACXwiC,EACK7mB,SACAwH,UAAW1U,GACR5N,KAAKwnC,qBAAqB3nB,EAAMjR,EAAOhB,KAGnD5N,KAAKqiB,aAAa,UAAUzT,EAAMzP,KAAMwiC,EAAQE,QAChDF,EAAUnvB,EAAImvB,QAAQ,UACtB3hC,KAAKqiB,aACD,KAAKzT,EAAMzP,KACXwiC,EACK7mB,SACAwH,UAAW1U,GACR5N,KAAKynC,mBAAmB5nB,EAAMjR,EAAOhB,KAGjD5N,KAAKqiB,aAAa,UAAUzT,EAAMzP,KAAMwiC,EAAQE,QAEpD7hC,KAAK0nC,cAAc7nB,GACnB7f,KAAK2nC,oBAAoB9nB,OAU7B7f,KAAKqiB,aAAa,SAAUriB,KAAKgjC,MAAM1gB,aAGpC,UAAU1T,GACb,GAAiC,SAA7B5O,KAAK4iC,UAAUh0B,EAAMzP,MAAmByP,EAAMrC,SAC9C,OAAO,QACH,GACIqC,EAAMtE,cAAgBsE,EAAM/G,2CAIxC7H,KAAKugB,QAAQyD,KAAK,IAA8B,CAC5Cpc,KAAM,CAAEgH,WAIT,qBACH2vB,EACA3vB,EACAsF,GAEKA,IACLlU,KAAKwiC,UAAU5zB,EAAMzP,IAAM+U,EAAS5R,IAAKL,GAAM,IAAI,KAAcA,IACjEjC,KAAKY,QACD,mBACA,IAAMZ,KAAK2nC,oBAAoBpJ,GAC/B,MAID,mBAAmBA,EAAiB3vB,EAAchD,GACrD5L,KAAK4iC,UAAUh0B,EAAMzP,IAAMyP,EAAMrC,SAC3BX,GAAU,OACV,eACN5L,KAAKY,QACD,kBACA,KACIZ,KAAK4F,aAAa,oBAClB5F,KAAK6jC,aAAatF,GAClBv+B,KAAK2nC,oBAAoBpJ,IAE7B,KAIA,aAAaA,GACjB,MAAMl3B,EAAY,GACZy8B,EAAU9jC,KAAKuF,UAAUM,IAAI,uBAAyB,GAC5D,IAAK,MAAM+I,KAAS2vB,EAAQ,CACxB,MAAM3yB,EAAS5L,KAAK4iC,UAAUh0B,EAAMzP,KAAO,eAC3CkI,EAAU,IAAIuH,EAAMlH,UAAY,CAC5BsB,KACI86B,EAAQ,SAASl4B,MACjBk4B,EAAQ,GAAGl4B,MACXu7B,EAAgB,GAAGv7B,KACvBghB,QAAS,IAGjB5sB,KAAKuiC,OAAOyB,UAAU,SAAU38B,GAG5B,oBAAoBk3B,GACxB,MAAM52B,EAA4B,GAClC,IAAK,MAAMiH,KAAS2vB,EAChB52B,EAASnG,KAAK,CACV0E,SAAU0I,EAAMlH,OAChBkgC,WAAW,EACXtkC,QAAS,IACTsE,KAAM,CACFgH,QACA7M,OAAQ/B,KAAKwiC,UAAU5zB,EAAMzP,IAC7ByM,OAAQ5L,KAAK4iC,UAAUh0B,EAAMzP,OAIzCa,KAAKuiC,OAAO2B,YAAY,SAAUv8B,GAG9B,cAAc42B,GAClB,MAAM9J,EAAwB,GAC9B,IAAK,MAAM7lB,KAAS2vB,EAChB9J,EAAQjzB,KAAK,CACTrC,GAAIyP,EAAMlH,OACV0lB,OAAQ,QACR3hB,SAAU,IAAMzL,KAAK6nC,UAAUj5B,KAEnC6lB,EAAQjzB,KAAK,CACTrC,GAAIyP,EAAMlH,OACV0lB,OAAQ,WACR3hB,SAAU,IAAMzL,KAAK6nC,UAAUj5B,KAGvC5O,KAAKuiC,OAAO8B,WAAW,SAAU5P,I,6CAxI5B8S,GAAoB,qC,0BAApBA,EAAoB,QAApBA,EAAoB,Y,GAA1B,I,+JCEA,Y,MAAMO,UAA4B,KAqIrC,YACYttB,EACAC,EACAlV,GAERC,QAJQ,KAAAgV,OACA,KAAAC,UACA,KAAAlV,YAtIJ,KAAAwiC,OAAS,IAAI,IAA+B,MAE5C,KAAAC,WAAa,IAAI,IAAiD,CACtElgC,KAAM,EACNvE,OAAQ,CAAEC,EAAG,GAAKI,EAAG,MAGjB,KAAAqkC,QAAU,IAAI,IAAuC,IAErD,KAAAC,UAAY,IAAI,IAA0C,IAE1D,KAAAC,SAAW,IAAI,IAAuC,IAEtD,KAAAC,QAAU,IAAI,IAAwC,IAEtD,KAAA1nB,SAAW,IAAI,IAA4B,CAC/Cqd,QAAS,CAAC,QAAS,aAGf,KAAAsK,SAAW,IAAI,IAAwB,IAG/B,KAAA/gC,MAAQtH,KAAK+nC,OAAO5mB,eAEpB,KAAAtV,QAAU7L,KAAKqoC,SAASlnB,eAExB,KAAAod,QAAS,QAAc,CACnCv+B,KAAK+nC,OACL/nC,KAAKya,QAAQoF,OACdlE,MACC,OAAI,EAAErU,EAAOi3B,KACTA,EAAOv8B,OAAQ4M,GAAUA,EAAMjB,MAAM0C,SAAS/I,aAAK,EAALA,EAAOnI,OAI7C,KAAAinC,QAAUpmC,KAAK+nC,OAAOpsB,MAClC,OAAKlP,IAASA,EAAMA,EAAI/E,OAAS,KAAO,KAG5B,KAAA6+B,cAAgBvmC,KAAKgoC,WAAW7mB,eAEhC,KAAAqlB,cAAe,QAAc,CACzCxmC,KAAKkoC,UACLloC,KAAK0gB,WACN/E,MACC,OAAa,MACb,OAAI,EAAEhU,EAAUO,M,QACZ,IAAI2X,EAAO,GACX,IAAK,MAAMlO,KAAOhK,GAEK,QAAf,EAAAO,EAAQ61B,eAAO,eAAE1tB,SAASsB,MACF,QAAxB,EAAAzJ,EAAQogC,wBAAgB,eAAEj4B,SAASsB,MAGvCkO,EAAOA,EAAKlV,OAAOhD,EAASgK,KAEhC,OAAOkO,KAIC,KAAA4mB,aAAc,QAAc,CACxCzmC,KAAKmoC,SACLnoC,KAAK0gB,WACN/E,MACC,OAAa,MACb,OAAI,EAAE8Y,EAASvsB,M,QACX,IAAI2X,EAAO,GACX,IAAK,MAAMlO,KAAO8iB,GAEK,QAAf,EAAAvsB,EAAQ61B,eAAO,eAAE1tB,SAASsB,MACH,QAAvB,EAAAzJ,EAAQqgC,uBAAe,eAAEl4B,SAASsB,MAGtCkO,EAAOA,EAAKlV,OAAO8pB,EAAQ9iB,KAE/B,OAAOkO,KAIC,KAAA6mB,YAAa,QAAc,CACvC1mC,KAAKooC,QACLpoC,KAAK0gB,WACN/E,MACC,OAAa,MACb,OAAI,EAAE4d,EAAQrxB,M,QACV,IAAI2X,EAAO,GACX,IAAK,MAAMlO,KAAO4nB,GAEK,QAAf,EAAArxB,EAAQ61B,eAAO,eAAE1tB,SAASsB,MACJ,QAAtB,EAAAzJ,EAAQsgC,sBAAc,eAAEn4B,SAASsB,MAGrCkO,EAAOA,EAAKlV,OAAO4uB,EAAO5nB,KAE9B,OAAOkO,KAIC,KAAAwmB,YAAa,QAAc,CACvCrmC,KAAKioC,QACLjoC,KAAK0gB,WACN/E,MACC,OAAa,MACb,OAAI,EAAElU,EAAQS,M,UACV,IAAIugC,EAAiB,CAAEC,KAAM,CAAEhnC,QAAS,SACxC,IAAK,MAAMiQ,KAAOlK,GAEK,QAAf,EAAAS,EAAQ61B,eAAO,eAAE1tB,SAASsB,MACJ,QAAtB,EAAAzJ,EAAQygC,sBAAc,eAAEt4B,SAASsB,MAGrC82B,EAAiB,OAAH,wBAAQA,GAAmBhhC,EAAOkK,KAMpD,OAJmB,QAAf,EAAAzJ,EAAQ61B,eAAO,eAAE1tB,SAAS,YAC1Bo4B,EAAe,UAAY,CAAE/mC,QAAS,QACtC+mC,EAAe,UAAY,CAAE/mC,QAAS,SAEnC+mC,KAIC,KAAAvgC,QAAUlI,KAAK0gB,SAASS,eAgBpCnhB,KAAKolB,OAdT,gBACI,OAAOplB,KAAKgoC,WAAWrlB,WAG3B,mBACI,OAAO3iB,KAAK+nC,OAAOplB,WAYV,O,oDACH3iB,KAAKwa,KAAKkB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,YAClD7b,KAAKwa,KAAKirB,gBAAgB9pB,MAAK,OAAQ1S,KAAQA,IAAIqZ,UAAWtY,IAC1D,MAAM1C,EAAQtH,KAAK+nC,OAAOplB,WACpBimB,EAAa5oC,KAAKwa,KAAKquB,kBAAkB7+B,IAC7B4+B,EAAWjmC,KAAM8J,IAAQnF,aAAK,EAALA,EAAOnI,MAAOsN,EAAItN,KAC3CypC,EAAWllC,QACzB1D,KAAK2lC,SAASiD,EAAW,GAAGzpC,IAE5Ba,KAAKuF,UAAUM,IAAI,gCACnB7F,KAAK0iB,WAAW,CACZ6lB,gBAAiBvoC,KAAKuF,UAAUM,IAC5B,iCAIR7F,KAAKuF,UAAUM,IAAI,+BACnB7F,KAAK0iB,WAAW,CACZ8lB,eAAgBxoC,KAAKuF,UAAUM,IAC3B,gCAIR7F,KAAKuF,UAAUM,IAAI,iCACnB7F,KAAK0iB,WAAW,CACZ4lB,iBAAkBtoC,KAAKuF,UAAUM,IAC7B,kCAIR7F,KAAKuF,UAAUM,IAAI,+BACnB7F,KAAK0iB,WAAW,CACZimB,eAAgB3oC,KAAKuF,UAAUM,IAC3B,oCAOb,WAAWqC,GACd,MAAM4gC,EAAc9oC,KAAK0gB,SAASiC,WAC5Bob,GAAU,QAAO,IACf71B,EAAQ61B,SAAW+K,EAAY/K,WAChC/9B,KAAKuF,UAAUM,IAAI,yBAE1B7F,KAAK0gB,SAAS1S,KAAK,OAAD,sCACXhO,KAAK0gB,SAASiC,YACdza,GAAO,CACV61B,aAID,SAAShc,GACZ,MAAMtV,EAAMzM,KAAKwa,KAAK8J,YAAY,CAACvC,IAC/BtV,GACAzM,KAAK+nC,OAAO/5B,KAAKvB,GAIlB,UAAU5E,EAAcJ,GAC3B,MAAMJ,EAAYrH,KAAKioC,QAAQtlB,WAC/Btb,EAAUQ,GAAQJ,EAClBzH,KAAKioC,QAAQj6B,KAAK3G,GAGf,YAAYQ,EAAcF,GAC7B,MAAMohC,EAAc/oC,KAAKkoC,UAAUvlB,WACnComB,EAAYlhC,GAAQF,EACpB3H,KAAKkoC,UAAUl6B,KAAK+6B,GAGjB,WAAWlhC,EAAc4sB,GAC5B,MAAMuU,EAAchpC,KAAKmoC,SAASxlB,WAClCqmB,EAAYnhC,GAAQ4sB,EACpBz0B,KAAKmoC,SAASn6B,KAAKg7B,GAGhB,UAAUnhC,EAAc0xB,GAC3B,MAAM0P,EAAajpC,KAAKooC,QAAQzlB,WAChCsmB,EAAWphC,GAAQ0xB,EACnBv5B,KAAKooC,QAAQp6B,KAAKi7B,GAGf,aAAanhC,EAAcvE,GAC9BvD,KAAKgoC,WAAWh6B,KAAK,CAAElG,OAAMvE,Y,6CAnOxBukC,GAAmB,sC,0BAAnBA,EAAmB,QAAnBA,EAAmB,qBAFhB,S,GAET,I,qJCHA,Y,MAAMoB,UAA4B,KA+BrC,YACY3G,EACA/nB,EACAjV,GAERC,QAJQ,KAAA+8B,SACA,KAAA/nB,OACA,KAAAjV,YAjCJ,KAAAq9B,UAA6B,GAC7B,KAAAwF,QAAgC,GAChC,KAAAe,UAA4B,GAC5B,KAAAC,UAA6B,GAC7B,KAAAC,MAA0B,GAC1B,KAAAC,QAAuC,GAEvC,KAAAtG,MAAQhjC,KAAKuiC,OAAOj7B,MAAMqU,MAC9B,OAAKlP,IACD,IAAKA,EAAK,OACVzM,KAAK4iC,UAAY,GACjB,MAAM34B,EAAWjK,KAAKwa,KAAK0oB,UAAUvgC,KAChCqH,GAAQA,EAAI7K,KAAOsN,EAAI9C,WAE5B,IAAKM,EAAU,OACf,MAAM4c,EACF5c,EAAS6B,SAASC,iBAClB/L,KAAKwa,KAAKknB,aAAa51B,SAASC,gBACpC,IAAK8a,EAAW,OAChB,MAAM8a,GAAU,SAAU9a,EAAW,kBAAkB8a,QACnD,GAAGl1B,EAAItN,YAEXa,KAAKqiB,aACD,QACAsf,EAAQ7mB,SAASwH,UAAW1U,GAAM5N,KAAKupC,UAAU37B,KAErD5N,KAAKqiB,aAAa,UAAWsf,EAAQE,WAUzC7hC,KAAKolB,OAGI,O,kEACHplB,KAAKwa,KAAKkB,YAAYC,MAAK,OAAO1S,GAAMA,IAAI4S,YAClD,MAAM2tB,QAAsB5qC,QAAQ8lB,IAChC1kB,KAAKwa,KAAK1Q,OAAOxH,IAAK0H,IAClB,SAAaA,EAAI7K,GAAI,CAAE0I,KAAM,gBAAiBgU,cAGtD,IAAK,MAAMrP,KAAQg9B,EAAe,CAC9B,MAAMC,EAA8B,QAArB,EAAAj9B,aAAI,EAAJA,EAAMzB,eAAe,eAAE0+B,MACtC,GAAIA,EACA,IAAK,MAAMC,KAAQD,EACfzpC,KAAKopC,UAAUM,EAAKvqC,KAAqB,QAAf,EAAAuqC,EAAKC,kBAAU,eAAEjgC,WAAY,IACvD1J,KAAKmpC,UAAUO,EAAKvqC,IAAqB,QAAf,EAAAuqC,EAAKC,kBAAU,eAAEC,eAC3C5pC,KAAKqpC,MAAMK,EAAKvqC,OAAuB,QAAf,EAAAuqC,EAAKC,kBAAU,eAAEE,cACzC7pC,KAAKspC,QAAQI,EAAKvqC,KAAmB,QAAb,EAAAuqC,EAAKI,gBAAQ,eAAEC,cAAe,GAIlE/pC,KAAKqiB,aAAa,OAAQriB,KAAKgjC,MAAM1gB,eAGlC,UAAU1a,GACb,MAAMlC,GAAQkC,aAAI,EAAJA,EAAMlC,QAAS,GACvB6zB,EAAS,GACf,IAAK,MAAM/sB,KAAQ9G,EAAO,CACtB,MAAMskC,EAASx9B,EAAK/C,OAASzJ,KAAKopC,UAAU58B,EAAKy9B,UAAY,KAG7D,GAFAjqC,KAAK4iC,UAAUp2B,EAAKy9B,SAChBD,EAAS,GAAM,OAASA,EAAS,IAAO,UAAY,QACnDhqC,KAAKmpC,UAAU38B,EAAKy9B,SAAU,SACnC,IAAI3mC,EAAU,GACVkJ,EAAK/C,QACLnG,GAAW,GAAGkJ,EAAK/C,OAAS,KACT,IAAf+C,EAAK/C,MAAc,SAAW,eAGlC+C,EAAK09B,eACL5mC,GAAW,iBAAiBkJ,EAAK09B,0BACjC19B,EAAK29B,aAAe,IACpB7mC,GAAW,GAAGkJ,EAAK29B,gBACO,IAAtB39B,EAAK29B,aAAqB,SAAW,cAEzC39B,EAAK49B,WAAU9mC,GAAW,aAAakJ,EAAK49B,eAC5C59B,EAAK69B,aAAY/mC,GAAW,eAAekJ,EAAK69B,iBAChD79B,EAAK+a,UAASjkB,GAAW,UAAUkJ,EAAK69B,gBAC5CrqC,KAAKooC,QAAQ57B,EAAKy9B,SAAW,CACzB/jC,SAAUlG,KAAKmpC,UAAU38B,EAAKy9B,SAC9B3mC,UACAgnC,QAAS,KAEb/Q,EAAO/3B,KAAKxB,KAAKooC,QAAQ57B,EAAKy9B,UAElCjqC,KAAKuiC,OAAOgI,UAAU,QAAShR,GAC/Bv5B,KAAKY,QAAQ,SAAU,IAAMZ,KAAK6jC,eAAgB,KAG9C,eACJ,MAAMx8B,EAAY,GACZM,EAAW,GACXm8B,EAAU9jC,KAAKuF,UAAUM,IAAI,uBAAyB,GAC5D,IAAK,MAAMkc,KAAW/hB,KAAK4iC,UAAW,CAClC,MAAM4H,EACF1G,EAAQ,QAAQ9jC,KAAK4iC,UAAU7gB,OAC/B+hB,EAAQ,GAAG9jC,KAAK4iC,UAAU7gB,OAC1B,IAAgB,GAAG/hB,KAAK4iC,UAAU7gB,MAClC/hB,KAAKqpC,MAAMtnB,GACXpa,EAASnG,KAAK,CACV0E,SAAUukC,EAAezqC,KAAKspC,QAAQvnB,IACtCze,QAAS,IACTsE,KAAM,CACF6jB,MAAO+e,EACPlQ,OAAQt6B,KAAKspC,QAAQvnB,IAEzBuoB,QAAS,KAGbjjC,EAAU,IAAI0a,KAAa,CACvB/Y,KAAMwhC,EACN5d,QAAS,IAIrB5sB,KAAKuiC,OAAO2B,YAAY,QAASv8B,GACjC3H,KAAKuiC,OAAOyB,UAAU,QAAS38B,I,6CA1H1B6hC,GAAmB,qC,0BAAnBA,EAAmB,QAAnBA,EAAmB,Y,GAAzB,GA8HP,SAASuB,EAAenQ,GACpB,MAAMt5B,EAAwBs5B,EAAO9vB,OACjC,CAACyS,GAAIzZ,EAAGI,MAAO,CACX82B,MAAOl3B,EAAIyZ,EAAEyd,MAAQl3B,EAAIyZ,EAAEyd,MAC3BC,MAAOn3B,EAAIyZ,EAAE0d,MAAQn3B,EAAIyZ,EAAE0d,MAC3BC,MAAOh3B,EAAIqZ,EAAE2d,MAAQh3B,EAAIqZ,EAAE2d,MAC3BC,MAAOj3B,EAAIqZ,EAAE4d,MAAQj3B,EAAIqZ,EAAE4d,QAE/B,CACIH,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,OAAQ,MAGhB,MAAO,CACHr3B,EAAGxC,EAAK05B,OAAS15B,EAAK25B,MAAQ35B,EAAK05B,OAAS,EAC5C92B,EAAG5C,EAAK45B,OAAS55B,EAAK65B,MAAQ75B,EAAK45B,OAAS,K,yFClI7C,Y,MAAM8P,EAcT,YAAoBnI,GAAA,KAAAA,SAbJ,KAAAoI,OAAS,IACrB3qC,KAAKuiC,OAAOqI,aACR9pC,KAAK+pC,IAAI,GAAiC,IAA7B7qC,KAAKuiC,OAAO+D,UAAUx+B,MACnC9H,KAAKuiC,OAAO+D,UAAU/iC,QAEd,KAAAunC,QAAU,IACtB9qC,KAAKuiC,OAAOqI,aACR9pC,KAAK6D,IAAI,EAAG3E,KAAKuiC,OAAO+D,UAAUx+B,MAAQ,EAAI,MAC9C9H,KAAKuiC,OAAO+D,UAAU/iC,QAEd,KAAAwnC,MAAQ,IACpB/qC,KAAKuiC,OAAOqI,aAAa,EAAG,CAAEpnC,EAAG,GAAKI,EAAG,M,6CAZpC8mC,GAA2B,a,wBAA3BA,EAA2B,qQAnChC,oBAA8C,gCAAS,EAAAC,WACnD,oBAAU,eAAG,QACjB,QACA,oBAA+C,gCAAS,EAAAG,YACpD,oBAAU,kBAAM,QACpB,QACA,oBAA+C,gCAAS,EAAAC,UACpD,oBAAU,qBAAS,QACvB,U,uVA2BD,I,wOCeA,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAdA,CACL,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,S,GAID,I,mFCvBA,Y,MAAMC,EA/Bb,cAqC+B,KAAA5d,UAAY,IAAI,MAEpC,KAAA6d,cAAe,EAKf,gBACHlrC,KAAKkrC,cAAgBlrC,KAAKkrC,aAC1BlrC,KAAKqtB,UAAUhqB,Q,6CAfV4nC,I,wBAAAA,EAAoB,8Z,QA5BzB,iBAMI,wCAAiB,EAAAE,kBAEjB,iBAGI,gCAAS,EAAAA,kBAET,SACJ,QACA,sBAA0B,gCAAS,EAAAA,kBAC/B,SACJ,QACJ,S,MAfI,6BAaI,gE,kHAYT,I,yFCoBA,Y,MAAMC,EAlDb,cAoDoB,KAAAC,KAAO,EAEP,KAAA1mC,IAAM,GAEN,KAAAkmC,IAAM,EAkBf,MACE7qC,KAAK0F,QACN1F,KAAK0F,MAAQ1F,KAAK6qC,KAAO,GAG7B7qC,KAAK0F,OADQ1F,KAAKsrC,SAAW,IAAMtrC,KAAKqrC,KAAOrrC,KAAKurC,UAAY,GAAKvrC,KAAKqrC,KAAOrrC,KAAKqrC,MAAQ,EAE1FrrC,KAAK0F,MAAQ1F,KAAK2E,MAClB3E,KAAK0F,MAAQ1F,KAAK2E,KAAO,IAE7B3E,KAAK69B,SAAS79B,KAAK0F,OAIhB,SACE1F,KAAK0F,QACN1F,KAAK0F,MAAQ1F,KAAK6qC,KAAO,GAG7B7qC,KAAK0F,OADQ1F,KAAKsrC,SAAW,IAAMtrC,KAAKqrC,KAAOrrC,KAAKurC,UAAY,GAAKvrC,KAAKqrC,KAAOrrC,KAAKqrC,MAAQ,EAE1FrrC,KAAK0F,MAAQ1F,KAAK6qC,MAClB7qC,KAAK0F,MAAQ1F,KAAK6qC,KAAO,GAE7B7qC,KAAK69B,SAAS79B,KAAK0F,OAOhB,SAAS8lC,GACZxrC,KAAK0F,MAAQ8lC,EAETxrC,KAAKyrC,WACLzrC,KAAKyrC,UAAUD,GAQhB,WAAW9lC,GACd1F,KAAK0F,MAAQA,EAQV,iBAAiBwqB,GACpBlwB,KAAKyrC,UAAYvb,EAQd,kBAAkBA,GACrBlwB,KAAK0rC,SAAWxb,G,6CApFXkb,I,wBAAAA,EAAgB,yGATd,CACP,CACIrtB,QAAS,KAET4tB,aAAa,SAAW,IAAMP,GAC9BQ,OAAO,MAEd,8XA7CG,iBAGI,qDAAoC,IAAI,QAAxC,CAAyC,gDACJ,IAAI,QADzC,CAAyC,6CAEP,IAAI,QAFtC,CAAyC,6CAGP,IAAK,QAHvC,CAAyC,8CAIN,IAAK,QAJxC,CAAyC,2CAKT,IAAK,SAErC,oBAKI,gCAAS,EAAAC,WAET,oBAAU,kBAAM,QACpB,QACA,iBAAmC,SAAmD,QACtF,oBAKI,gCAAS,EAAAnrC,QAET,oBAAU,eAAG,QACjB,QACJ,S,MAfQ,qDAK+B,gEAK/B,6C,gFAuBT,I,kNC3BDorC,UAAyB,KAC3B,OAAOvsC,EAAYwsC,GACf,OACW,OAAOxsC,EADI,UAAlBwsC,EACoB,eAEJ,a,0EALtBD,KAAgB,GAAhBA,I,6BAAAA,EAAgB,QAAhBA,EAAgB,Y,MAQtB,MAAME,EAAqC,CACvC/qB,MAAO,CACHgrB,UAAW,MAEfvqC,QAAS,CACLuqC,UAAW,QACXC,eAAgB,WAChBC,cAAe,KACfC,mBAAoB,cA0CrB,Y,MAAMC,UACD,IAvCZ,c,oBA0C0B,KAAAC,OAAgB,IAAIr3B,MAAOzV,UAIjC,KAAA+pB,SAA6B,QAE7B,KAAAjjB,OAA2B,SAc3C,WACI,OAAO,IAAI2O,KAAKjV,KAAKssC,SAAU,OAAW,IAAIr3B,MAGlD,YACI,OAAO,IAAIA,KAAKjV,KAAKusC,OAAQ,QAAS,OAAS,IAAIt3B,MAAS,GAGhE,kBACI,OAAO,OAAO,IAAIA,KAAKjV,KAAKT,MAAO,eAGhC,WACHS,KAAKT,MAAO,IAAI0V,MAAOu3B,cAOpB,SAAShB,GAEZ,MAAMiB,EAAW,IAAIx3B,KAAKjV,KAAKT,MAC/B,IAAImtC,GAAW,OAAIlB,EAAW,CAC1BtM,MAAOuN,EAASE,WAChB/lC,QAAS6lC,EAASG,eACnBptC,UAECktC,EAAW1sC,KAAK6sC,KAAKrtC,YACrBktC,EAAW1sC,KAAK6sC,KAAKrtC,WAEzBQ,KAAKT,MAAO,OAAUmtC,GAAY,IAAIz3B,MAClCjV,KAAKyrC,WACLzrC,KAAKyrC,UAAUiB,GAEnB1sC,KAAKkrC,cAAe,EAQjB,WAAWxlC,GACd1F,KAAKT,MAAO,OAAUmG,GAAS,IAAIuP,MACnCjV,KAAKkrC,cAAe,EAQjB,iBAAiBhb,GACpBlwB,KAAKyrC,UAAYvb,EAQd,kBAAkBA,GACrBlwB,KAAK0rC,SAAWxb,EAGb,iBAAiBvpB,GACpB3G,KAAK2G,SAAWA,G,0EA3FX0lC,KAAkB,GAAlBA,I,2BAAAA,EAAkB,sJAVhB,CACP,CAAEtuB,QAAS,KAAa+uB,SAAUhB,GAClC,CAAE/tB,QAAS,KAAkBC,SAAUguB,GACvC,CACIjuB,QAAS,KACT4tB,aAAa,SAAW,IAAMU,GAC9BT,OAAO,KAEd,6P,wBAjCG,4BAA6C,kDAAS,SAClD,mBAMI,yCAAiB,EAAA/N,SAAA,KANrB,QASA,mCAIA,iCACA,qBAAW,SAAyB,QACxC,Q,yBAbQ,iCAAgB,sBAAhB,CAAgB,aAAhB,CAAgB,cAAhB,CAAgB,mBAShB,0B,6HAuBT,I,0JChEa,wBACI,SACJ,S,yBAFoD,oBAChD,gC,cA0BjB,Y,MAAMkP,EAvCb,cAyCoB,KAAApoC,IAAM,IAEN,KAAAkmC,IAAM,GAEN,KAAAQ,KAAO,GAMP,KAAA2B,gBAAiC,GAE1C,KAAAvtC,SAAW,GASX,WACHO,KAAKitC,iBAAmBjtC,KAAKktC,wBAAwBltC,KAAK2E,IAAK3E,KAAK6qC,IAAK7qC,KAAKqrC,MAG3E,YAAYpqC,IAEXA,EAAQ0D,KAAO1D,EAAQ4pC,KAAO5pC,EAAQoqC,MAAQpqC,EAAQK,QACtDtB,KAAKitC,iBAAmBjtC,KAAKktC,wBAAwBltC,KAAK2E,IAAK3E,KAAK6qC,IAAK7qC,KAAKqrC,OAQ/E,SAASG,GACZxrC,KAAKP,SAAW+rC,EAEZxrC,KAAKyrC,WACLzrC,KAAKyrC,WAAWD,GASjB,WAAW9lC,GACd1F,KAAKP,SAAWiG,EAGb,iBAAiBiB,GACpB3G,KAAK2G,SAAWA,EAQb,iBAAiBupB,GACpBlwB,KAAKyrC,UAAYvb,EAQd,kBAAkBA,GACrBlwB,KAAK0rC,SAAWxb,EAGZ,wBAAwBvrB,EAAakmC,EAAaQ,GACtD,MAAMhqC,EAAqB,GAC3B,IAAIC,EAAOupC,EACX,MAAMtrC,EAAOS,KAAKsB,KAAO,EAAMtB,KAAKsB,MAAQ,KAG5C,IAAK,MAAM6rC,KAAUntC,KAAKgtC,gBACtB3rC,EAAOG,KAAK,CACRrC,GAAIguC,EACJtlC,KAAMtI,EACA,GAAGA,EAAKmB,IAAIysC,EAAQ,KAAK1rC,OAAO,eAAc,OAAe,CACzDy9B,MAAOp+B,KAAKC,MAAMosC,EAAS,IAC3BvmC,QAASumC,EAAS,QAEtB,IAAG,OAAe,CAAEjO,MAAOp+B,KAAKC,MAAMosC,EAAS,IAAKvmC,QAASumC,EAAS,SAIpF,KAAO7rC,GAAQqD,GACXtD,EAAOG,KAAK,CACRrC,GAAImC,EACJuG,KAAMtI,EACA,GAAGA,EAAKmB,IAAIY,EAAM,KAAKG,OAAO,eAAc,OAAe,CACvDy9B,MAAOp+B,KAAKC,MAAMO,EAAO,IACzBsF,QAAStF,EAAO,QAEpB,IAAG,OAAe,CAAE49B,MAAOp+B,KAAKC,MAAMO,EAAO,IAAKsF,QAAStF,EAAO,SAE5EA,GAAQ+pC,EAEZ,OAAOhqC,G,6CA3GF0rC,I,wBAAAA,EAAsB,4JARpB,CACP,CACIhvB,QAAS,KACT4tB,aAAa,SAAW,IAAMoB,GAC9BnB,OAAO,KAEd,4O,QAlCG,iBACI,4BACI,0BAKI,uCAAe,EAAA/N,SAAA,KAEf,8BAGJ,QACA,qBAAW,SAAyB,QACxC,QACJ,S,MAf4B,6BAIhB,mCAAkB,sBAAlB,CAAkB,qCAKa,+C,sHA2B5C,I,uRCMS,wBAII,SACJ,S,yBAHI,oBAEA,gC,wCAXZ,4BACI,0BAII,sEAEA,8BAMJ,QACJ,Q,wBAXQ,+BAAc,uBAKS,0C,cAuBhC,Y,MAAMuP,UACD,KAtDZ,c,oBAyDoB,KAAA/B,KAAO,GAIP,KAAAgC,eAAgB,EAEzB,KAAA9tC,MAAe,IAAI0V,MAAOzV,UAE1B,KAAA8B,MAAe,OAAO,IAAI2T,KAAQ,SAalC,WACHjV,KAAKstC,aAAc,EACnBttC,KAAKutC,cAAgBvtC,KAAKwtC,uBACtBxtC,KAAKT,MACJS,KAAKqtC,cACNrtC,KAAKqrC,MAETrrC,KAAKY,QAAQ,OAAQ,IAAOZ,KAAKstC,aAAc,GAG5C,YAAYrsC,IACXA,EAAQosC,eAAiBpsC,EAAQoqC,QACjCrrC,KAAKutC,cAAgBvtC,KAAKwtC,uBACtBxtC,KAAKT,MACJS,KAAKqtC,cACNrtC,KAAKqrC,OAMjB,mBACI,MAAM/pC,GAAQtB,KAAKsB,MAAQ,SAASyB,MAAM,KACpCxD,GAAO,OAAIS,KAAKT,KAAM,CAAE2/B,OAAQ59B,EAAK,GAAIsF,SAAUtF,EAAK,KAe9D,OAbI/B,EAAKqtC,aAAe,IAAO,GAC1B5sC,KAAKutC,cAAc5qC,KACfrB,GAASA,EAAKnC,MAAO,OAAOI,EAAM,YAGvCS,KAAKutC,cAAc/rC,KAAK,CACpBqG,KAAM,IAAG,OAAOtI,GAAM,aACtBJ,IAAI,OAAOI,EAAM,WAErBS,KAAKutC,cAAc9+B,KAAK,CAACC,EAAGC,IACxB,GAAGD,EAAEvP,KAAKwiB,cAAc,GAAGhT,EAAExP,QAG9Ba,KAAKutC,cAOT,SAAS/B,GAEZ,GADAxrC,KAAKsB,KAAOkqC,EACRxrC,KAAKyrC,UAAW,CAChB,MAAMnqC,GAAQtB,KAAKsB,MAAQ,SAASyB,MAAM,KACpCxD,GAAO,QACT,OAAIS,KAAKT,KAAM,CAAE2/B,OAAQ59B,EAAK,GAAIsF,SAAUtF,EAAK,MAErDtB,KAAKyrC,UAAUlsC,EAAKC,YAQrB,WAAWkG,GACd1F,KAAKT,KAAOmG,GAAS1F,KAAKT,KAC1B,IAAIA,GAAO,OAAcS,KAAKT,MAC9BA,GAAO,OAAsBA,EAAM,CAAE2f,UAAW,IAChDlf,KAAKsB,MAAO,OAAO/B,EAAM,SACzBS,KAAKutC,cAAgBvtC,KAAKwtC,uBACtBxtC,KAAKT,MACJS,KAAKqtC,cACNrtC,KAAKqrC,MAIN,iBAAiB1kC,GACpB3G,KAAK2G,SAAWA,EAOb,iBAAiBupB,GACpBlwB,KAAKyrC,UAAYvb,EAOd,kBAAkBA,GACrBlwB,KAAK0rC,SAAWxb,EAMb,aACHlwB,KAAKstC,aAAc,EACnBttC,KAAKY,QAAQ,WAAY,KACjBZ,KAAKytC,eACLztC,KAAKytC,aAAapU,QAClBr5B,KAAKytC,aAAazpB,OAClBhkB,KAAKqiB,aACD,eACAriB,KAAKytC,aAAaC,aAAaprB,UAAWnQ,IACjCA,IACDnS,KAAKstC,aAAc,SAanC,uBACJK,EACAC,EACAvC,EAAe,IAEf,MAAM7qC,EAAM,IAAIyU,KAChB,IAAI1V,EAAO,IAAI0V,KAAK04B,GACpB,MAAMtsC,EAAS,GACXusC,KAAe,OAAUruC,EAAMiB,KAAQ,OAAQjB,EAAMiB,GACrDjB,GAAO,OAAWA,IACX,OAAQA,EAAMiB,KACrBjB,EAAOiB,GAEXjB,GAAO,OAAsBA,EAAM,CAAE2f,UAAWmsB,IAChD,MAAMjrC,GAAM,OAASb,GAErB,MAAO,OAAQa,EAAKb,IAChB8B,EAAOG,KAAK,CACRqG,KAAM,IAAG,OAAOtI,GAAM,aACtBJ,IAAI,OAAOI,EAAM,WAErBA,GAAO,OAAWA,EAAM8rC,GAE5B,OAAOhqC,G,0EAtKF+rC,KAAkB,GAAlBA,I,2BAAAA,EAAkB,qD,GAAA,K,yJARhB,CACP,CACIrvB,QAAS,KACT4tB,aAAa,SAAW,IAAMyB,GAC9BxB,OAAO,KAEd,+d,QAhDG,4BAGI,wCAAiB,EAAAiC,eAEjB,mBAKI,yCAAiB,EAAAhQ,SAAA,KALrB,QAOA,oBAAkE,gCAAS,EAAAgQ,eACvE,sBACI,6BACJ,QACJ,QACA,qBAAW,SAAyB,QACxC,QACA,mC,MAjBI,yCAMI,sCAAqB,kBAWS,uC,2IA+BvC,I,iNChCK,iBACI,oBAKI,sEALJ,WASA,QACA,gCAQI,oBAGI,yEAHJ,QAKJ,gBACA,qBAKI,yEALJ,YASA,QACJ,S,sBAgFY,oBACK,2BAAe,S,wCA5E5B,kBAII,0GAAqD,KAErD,4BAUI,kBACI,oBAAU,gBAAI,QAClB,QACJ,QACA,kBACI,kBAAsB,SAAe,QACrC,kBAA8B,SAAgB,QAClD,QACA,sBAGI,gEAGG,OAHH,uBAGrB,oBAAwB,4BAOH,qBAAU,UAER,QACN,QACA,sBAII,gEAGG,OAHH,mCAGrB,oBAAwB,4BAWH,qBAAU,yBAAY,QAC1B,QACA,sBAII,gEAGG,OAHH,6CAGrB,oBAAwB,4BAOH,8BAGJ,QACA,sBAGI,mFAA2BC,EAAOC,oBAElC,qBAAU,kBAAK,QACnB,QACJ,Q,4BA/EQ,yBAAa,sBAAb,CAAa,iEAcS,uBACQ,wBAU9B,wCAAkC,yBAKxB,qDAaV,6DAEC,8CARD,iCA0BA,mDAA6C,oCAN7C,iCAWW,sC,yBA/EvB,kBAII,0BAuFJ,S,qBArFyB,yC,sBAwFzB,8BAEA,SAyBL,Y,MAAMC,UACD,KAgCR,YACYztB,EACAhb,GAERC,QAHQ,KAAA+a,UACA,KAAAhb,YA7BI,KAAA0oC,MAAQ,EAER,KAAAC,QAAS,EAEI,KAAAC,cAAe,EAI3B,KAAAC,SAAW,IAAI,MAKzB,KAAAC,UAAoB,GAEpB,KAAAC,YAAsB,GASb,KAAAC,QAAWnpC,GAlNhB,4JACDopC,KAiNqCppC,GAC/B,KAAAqpC,WAAa,IAAMzuC,KAAK0uC,iBAAiB,IAAI,MAatD,QAAQx+B,G,MACX,MAAM2P,EAAO7f,KAAKsuC,YAAYtsC,OAAQiH,GAAMA,EAAE+B,QAAUkF,EAAKlF,OAC7DhL,KAAK69B,SAAS,IACPhe,EACH,IAAI,KAAK,OAAD,wBACD3P,GAAI,CACP/Q,GAAI+Q,EAAK/Q,IAAM+Q,EAAKlF,MACpBkC,eAGe,QAFV,EAACgD,EAAK/Q,KAA2B,IAArB+Q,EAAK8uB,YAEZ,KADA9uB,EAAKhD,sBACA,cAGvBlN,KAAKY,QAAQ,aAAc,IAAOZ,KAAK2uC,YAAc,KAAO,IAOzD,WAAWz+B,GACd,MAAM2P,EAAO7f,KAAKsuC,YAAYtsC,OACzB4sC,GAAWA,EAAO5jC,QAAUkF,EAAKlF,OAEtChL,KAAK69B,SAAShe,GAOX,iBAAiBrd,GAEpB,GAAIA,EAAMqsC,OAAQ,CACd,MAAMC,EAAOtsC,EAAMqsC,OAAOE,MAAM,GAEhC,GAAID,EAAM,CACN,MAAME,EAAS,IAAIC,WACnBD,EAAOE,WAAWJ,EAAM,SACxBE,EAAOvnB,iBAAiB,OAAS0nB,IAC7BnvC,KAAKovC,eAAgBD,EAAIE,WAAmBxrB,QAC5CrhB,EAAMqsC,OAAOnpC,MAAQ,KAEzBspC,EAAOvnB,iBAAiB,QAAUxe,IAC9B,QAAY,0BAUpB,eAAerB,G,QACnB,MAAMiY,GAAO,QAAUjY,IAAS,GAC1BzI,GAAkB,QAAb,oBAAa,eAAEmwC,WAAY,UACtC,IAAK,MAAM/hC,KAAMsS,EAAM,CACnBtS,EAAG1F,KAAO0F,EAAG1F,MAAQ,GAAG0F,EAAGtC,cAAcsC,EAAGrC,YAC5C,MAAMxJ,GACF6L,EAAG1F,MAAQ,GAAG/G,KAAKC,MAAsB,SAAhBD,KAAKqwB,aAE7BpuB,MAAM,KACNgK,KAAK,KACLC,cAEAO,EAAGvC,QACJuC,EAAGvC,MAAQ,GAAGtJ,KAAWvC,WAAY,QAEzC,MAAMowC,EAAkBvvC,KAAKuF,UAAUM,IACnC,gCACC,CAAC,cACN0H,EAAGL,eACkB,QAAjB,EAAAK,EAAGL,sBAAc,SAChBqiC,EAAgB5sC,KAAMsG,GAAMsE,EAAGvC,MAAMZ,SAASnB,IAGnDsE,EAAGiiC,MAAQ,GAAKjiC,EAAGiiC,MAEnBxvC,KAAKyvC,QAAQ,IAAI,KAAKliC,KAMvB,uBAEH,QAAa,eADI,uJAQd,SAASi+B,GACZxrC,KAAKsuC,YAAc9C,EACfxrC,KAAKyrC,WACLzrC,KAAKyrC,UAAUD,GAShB,WAAW9lC,GACd1F,KAAKsuC,YAAc5oC,EAGhB,iBAAiBiB,GACpB3G,KAAK2G,SAAWA,EAQb,iBAAiBupB,GACpBlwB,KAAKyrC,UAAYvb,EAQd,kBAAkBA,GACrBlwB,KAAK0rC,SAAWxb,EAGb,UAAU9oB,GACb,OAAOA,aAAI,EAAJA,EAAMS,OAAQ,GAMlB,iBAAiBqI,EAAa,IAAI,M,MACrC,MAAM6T,EAAM/jB,KAAKugB,QAAQyD,KACrB,KACA,CACI7f,MAAO,OACPG,OAAQ,OACRsD,KAAM,CAAEsI,UAGK,QAArB,EAAA6T,EAAIG,yBAAiB,SAAE1hB,MAClBmZ,MAAK,OAAO1S,GAAmB,SAAbA,EAAEuV,SACpB8D,UAAW9f,IACRxC,KAAKyvC,QAAQjtC,EAAM+I,UACnBwY,EAAIH,W,6CApMPoqB,GAAsB,0B,wBAAtBA,EAAsB,uMARpB,CACP,CACIjwB,QAAS,KACT4tB,aAAa,SAAW,IAAMqC,GAC9BpC,OAAO,KAEd,8C,eAlJe,kH,EASA,yHACA,6C,EAcA,mH,EAkGJ,oG,kkDAnJR,iBAKI,iBACI,iCACI,2DAAyB,mCAMR,EAAA6D,QAAA,KACpB,QACL,QACA,uBAoCA,uBA4FJ,QACA,2C,sBA9II,6BAIQ,wCAAyB,kBAAzB,CAAyB,kBAAzB,CAAyB,wBAAzB,CAAyB,sBASD,uCAsC3B,qEAA2B,gB,6OAuHrC,I,6RC5JS,0B,wCAUA,yBAEI,mGAEA,kBAA2B,SAAiB,QAC5C,kBACI,SACJ,QACJ,Q,4BAJ+B,uBAEvB,iC,wCAGR,yBAII,kBAEI,8BAErB,OADsD,oBACpD,oBAFmB,CAEC,yBAGtB,OADsD,oBACpD,oBALmB,CAEC,6CAOE,OAPF,yBAOtB,oBACE,qBAEmB,kBACI,SACJ,QACJ,QACJ,Q,wBAHY,8D,wCAIZ,yBAGI,8DAEA,SACJ,Q,wBAJI,8BAGA,uEA0Bb,Y,MAAMC,UACD,KAlGZ,c,oBA6GoB,KAAA9yB,MAAQ,GAQR,KAAA+yB,SAA+Cx/B,IAC3D,QAAYA,GAUT,KAAAy/B,QAAU,IAAI,KAEd,KAAAC,gBAAsC7vC,KAAK4vC,QAAQj0B,MACtD,OAAa,MACb,UACA,OAAWiE,IACP5f,KAAKiF,SAAU,EACRjF,KAAKkI,SAAWlI,KAAKkI,QAAQxE,OAAS,GACvC,IAAA8d,IAAGxhB,KAAKkI,SACR0X,EAAMlc,QAAU,EACf1D,KAAKkuC,QAEF,OAAS,EAAC,QAAYtuB,IAAQ,QAAaA,KAD3C5f,KAAK2vC,SAAS/vB,IAElB,IAAA4B,IAAG,OAEb,OAAYvY,IAAM,IAAAuY,IAAG,MACrB,OAAK3B,IACD7f,KAAKiF,SAAU,EACf4a,GAAO,QAAQA,GACf,MAAMzP,GAAUpQ,KAAK8vC,YAAc,IAAI9iC,cACvC,OAAO6S,EAAK7d,OACPoF,IAAUpH,KAAKgC,QAAUhC,KAAKgC,OAAOoF,EAAMgJ,OAajD,KAAA2/B,YAAc,IAAM/vC,KAAK4F,aAAa,SAEtC,KAAAoqC,UAAY,KACfhwC,KAAKY,QAAQ,OAAQ,KAAK,QAAC,OAA6B,QAA7B,EAAc,QAAd,EAAAZ,KAAKiwC,iBAAS,eAAElsC,qBAAa,eAAEw4B,UAGvD,WAEHv8B,KAAKqiB,aACD,iBACAriB,KAAK6vC,gBAAgBvtB,UAAWzC,GAAU7f,KAAKquC,UAAYxuB,IAO5D,oBACH7f,KAAKY,QACD,QACA,KAAK,MAAC,OAACZ,KAAK8vC,YAA6B,QAAhB,EAAA9vC,KAAKkwC,mBAAW,eAAEroC,OAAQ,IACnD,KAQD,SAAS2jC,EAA0BxgC,GAEb,iBAAdwgC,GACNA,IAAsBxrC,KAAK8vC,aAE5BtE,EAAY,IAAI,KAAK,CACjB3jC,MAAO7H,KAAK8vC,YAAc9kC,GAAS,IAAIjI,MAAM,KAAK,GAClDiI,MAAOhL,KAAK8vC,YAAc9kC,GAAS,MAGrCwgC,aAAqB,OAC3BxrC,KAAKkwC,YAAc1E,EACfxrC,KAAKyrC,WACLzrC,KAAKyrC,UAAUD,GAEnBxrC,KAAKmwC,qBAOF,WAAWzqC,GACd1F,KAAKkwC,YAAcxqC,EACnB1F,KAAKmwC,oBAGF,iBAAiBxpC,GACpB3G,KAAK2G,SAAWA,EAOb,iBAAiBupB,GACpBlwB,KAAKyrC,UAAYvb,EAOd,kBAAkBA,GACrBlwB,KAAK0rC,SAAWxb,G,0EA1IXwf,KAAwB,GAAxBA,I,2BAAAA,EAAwB,4D,GAAA,K,SA8DL,O,wPAtEjB,CACP,CACI3xB,QAAS,KACT4tB,aAAa,SAAW,IAAM+D,GAC9B9D,OAAO,KAEd,m0B,GAAA,MA5FG,iBACI,4BACI,qBAKI,0DAAwB,mCACP,EAAAgE,QAAA,QAAuB,KADxC,CAAwB,4CAOxC,yBACA,yBAEJ,IAVoB,CAAwB,yBAUhB,EAAAO,qBAVR,CAAwB,0BAWf,EAAAJ,gBAhBb,QAkBA,sBAA8C,kBAAM,QACpD,+BAKJ,QACA,gCAEI,0CAAkB,EAAAlS,SAAA,kBAElB,8BASA,+BAuBA,gCAOJ,QACJ,S,sBAhEY,uCAAwB,sBAAxB,CAAwB,kDAAxB,CAAwB,qBAevB,iCAUkB,sCASlB,0EAuBA,2F,wNA8Bd,I,gHCrHA,MAAMuS,EAgBT,YAAYxoC,EAAsB,I,MAoBlB,KAAA43B,OAAS,IAAMx/B,KAAKyB,SAnBhCzB,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAK0H,OAASE,EAAKF,QAAUE,EAAKzI,IAAM,GACxCa,KAAK6H,KAAOD,EAAKC,MAAQ,GACzB7H,KAAKuM,SAAwB,QAAb,EAAA3E,EAAK2E,gBAAQ,SAC7BvM,KAAKwM,KAAO5E,EAAK4E,MAAQ,IAAI,MAC7BxM,KAAKkB,OAAS0G,EAAK1G,QAAU,GAC7BlB,KAAKqwC,QAAUzoC,EAAKyoC,SAAW,GAG5B,SACH,MAAM,GAAElxC,EAAE,KAAE0I,EAAI,SAAE0E,EAAQ,OAAErL,GAAWlB,KACvC,MAAO,CACHb,KACA0I,OACA0E,WACArL,a,6CC/BL,MAAMovC,EAoBT,YAAYnpC,EAAgC,I,MAJ5B,KAAA2U,SAAoB,GAKhC9b,KAAKb,GAAKgI,EAAMhI,IAAM,GACtBa,KAAK2J,UAAYxC,EAAMwC,WAAa,GACpC3J,KAAK6H,KAAOV,EAAMU,MAAQ,GAC1B7H,KAAKsK,aAAenD,EAAMmD,cAAgB,GAC1CtK,KAAK0H,OAASP,EAAMO,QAAU,GAC9B1H,KAAK0J,SAAWvC,EAAMuC,UAAY,EAClC1J,KAAKgnC,UAAY7/B,EAAM6/B,WAAa,GACpC,MAAMlkC,EAAQ9C,KAAKsK,aAAavH,MAAM,KACtC/C,KAAKmW,QAIA,QAHA,EAAArT,EAAMY,QAAU,EACXZ,EAAMA,EAAMY,OAAS,GACrB1D,KAAKsK,aAAa,UACvB,eAAEkiB,gBAAiB,M,2DC9BzB,MAAM+jB,EAkBT,YAAYC,EAA0C,IAClDxwC,KAAKb,GAAKqxC,EAASrxC,IAAM,GACzBa,KAAK6H,KAAO2oC,EAAS3oC,MAAQ,GAC7B7H,KAAKuJ,YAAcinC,EAASjnC,aAAe,GAC3CvJ,KAAKwJ,KAAOgnC,EAAShnC,MAAQ,GAC7BxJ,KAAKyJ,MAAQ+mC,EAAS/mC,OAAS,EAC/BzJ,KAAK0J,SAAW8mC,EAAS9mC,UAAY,EACrC1J,KAAK8L,SAAW0kC,EAAS1kC,UAAY,GACrC9L,KAAKuF,UAAYirC,EAAS10B,UAAY,GAOnC,QAAQnK,GACX,MAAMzS,EAAOyS,EAAI5O,MAAM,KAEvB,OADc,QAAgB7D,EAAMc,KAAKuF,c,iICS1C,MAAMkrC,EAyDT,YAAYD,EAAsC,IAC9CxwC,KAAKb,GAAKqxC,EAASrxC,IAAM,GACzBa,KAAK6H,KAAO2oC,EAAS3oC,MAAQ,GAC7B,MAAMiU,EAAW00B,EAAS10B,UAAY,GACtC9b,KAAKsK,aAAekmC,EAASlmC,aAC7B,MAAMomC,EAAY50B,EAAS60B,gBAAkB70B,EAC7C9b,KAAK+hB,QAAUyuB,EAASzuB,SAAWyuB,EAAShkC,KAC5CxM,KAAK4wC,QAAUJ,EAASI,QAAUF,EAAUE,QAAU,IAAItuC,IAAKL,IAAM,CACjE9C,GAAI8C,EAAE4uC,UAAY5uC,EAAE9C,GACpB0I,KAAM5F,EAAE6uC,YAAc7uC,EAAE4F,QAE5B7H,KAAK+wC,YACDP,EAASO,YACTL,EAAUK,YACV,IACFzuC,IAAKL,IAAM,CACT9C,GAAI8C,EAAE4uC,UAAY5uC,EAAE9C,GACpB0I,KAAM5F,EAAE6uC,YAAc7uC,EAAE4F,QAE5B7H,KAAK8J,QAAU0mC,EAAS1mC,QAAU4mC,EAAU5mC,QAAU,IAAIxH,IACrDL,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAE+uC,YAAahxC,KAAKb,OAEvDa,KAAKixC,OAAST,EAASU,OAASR,EAAUQ,OAAS,GACnDlxC,KAAKmxC,SACDX,EAASY,SACTZ,EAASa,kBACTX,EAAUW,kBACV,GACJrxC,KAAKsxC,SAAWd,EAAS13B,SAAW43B,EAAU53B,SAAW,GACzD9Y,KAAKuxC,eACDf,EAASgB,eAAiBd,EAAUc,eAAiB,GACzDxxC,KAAKmpC,UAAYqH,EAAStqC,UACtBwqC,EAAUxqC,UAAY,CAAEurC,UAAW,KAAMC,SAAU,MACvD1xC,KAAK2xC,oBACDnB,EAASmB,qBAAuBjB,EAAUiB,qBAAuB,GACrE3xC,KAAK4xC,WAAapB,EAASoB,YAAclB,EAAUkB,YAAc,GACjE,MAAMC,EAAc,GACpB,GAAIrB,EAASsB,eACT,IAAK,MAAMrlC,KAAO+jC,EAASsB,eACvB,GAAIrlC,KAAO+jC,EAASsB,eAAgB,CAChC,MAAMC,EAAevB,EAASsB,eAAerlC,IAAQ,GACrD,IAAK,MAAMq6B,KAAWiL,EACdjL,KAAWiL,GACXF,EAAYrwC,KAAK,CACbrC,GAAI4yC,EAAajL,GACjBj/B,KAAMi/B,EACNkL,SAAUvlC,IAOlCzM,KAAK8L,SAAW0kC,EAAS1kC,UAAY,GACrC9L,KAAK6xC,YAAcA,EACnB7xC,KAAKqP,SACDmhC,EAASnhC,UAAYqhC,EAAUrhC,UAAYyM,EAASzM,UAAY,GACpErP,KAAKiyC,eAAiBzB,EAASyB,gBAC3BvB,EAAUuB,gBACVn2B,EAASm2B,gBAAkB,CAAEhyC,MAAO,EAAGG,IAAK,IAChDJ,KAAKkyC,cACD1B,EAAS0B,eACTxB,EAAUwB,eACVp2B,EAASo2B,eACT,GACJlyC,KAAKmyC,YACD3B,EAAS2B,aACTzB,EAAUyB,aACVr2B,EAASq2B,aACT,GACJnyC,KAAKf,KAAOuxC,EAASvxC,MAAQyxC,EAAUzxC,MAAQ6c,EAAS7c,MAAQ,GAChEe,KAAKoyC,QACD5B,EAAS4B,SAAW1B,EAAU0B,SAAWt2B,EAASs2B,SAAW,GACjEpyC,KAAKqyC,aACD7B,EAAS6B,cACT3B,EAAU2B,cACVv2B,EAASu2B,cACT,GACJryC,KAAKsyC,gBACD9B,EAAS8B,iBACT5B,EAAU4B,iBACVx2B,EAASw2B,iBACT,KACJtyC,KAAKuyC,cACD/B,EAAS+B,eACT7B,EAAU6B,eACVz2B,EAASy2B,eACT,GACJvyC,KAAKwyC,yBACDhC,EAASgC,0BACT9B,EAAU8B,0BACV12B,EAAS02B,2BACR,KACLxyC,KAAKyyC,SACDjC,EAASiC,UACT/B,EAAU+B,UACV32B,EAAS22B,UACT,MAOD,KAAK5qC,GACR,MAAO,IAAK7H,KAAKixC,OAAOppC,IAAS,IAKrC,iBACI,OAAOxC,OAAOnG,KAAKc,KAAKixC,QAAQjvC,OAAQC,GAAMA,KAAKjC,KAAKixC,QAG5D,cACI,OAAO,OAAP,UAAajxC,KAAKmxC,UAAY,IAGlC,cACI,OAAO,OAAP,UAAanxC,KAAKsxC,UAAY,IAGlC,oBACI,OAAO,OAAP,UAAatxC,KAAKuxC,gBAAkB,IAOjC,iBAAiBS,GACpB,OAAQhyC,KAAK6xC,aAAe,IAAI7vC,OAAQC,GAAMA,EAAE+vC,WAAaA,I,kCCtN9D,Y,MAAMU,EA+ET,YAAoB5tC,EAAmCwb,GAAnC,KAAAxb,WAAmC,KAAAwb,UA7EpC,KAAAgF,aAAe,IAAI7E,EAAA,GAAyB,GAE/C,KAAA/E,YAAc1b,KAAKslB,aAAanE,eAC/B,KAAAwxB,WAAa,IAAIlyB,EAAA,EAA4B,IAC7C,KAAAmyB,iBAAmB,IAAInyB,EAAA,EAA0B,MACjD,KAAAoyB,QAAU,IAAIpyB,EAAA,EAAiC,IAGhD,KAAA+kB,cAAgBxlC,KAAK2yC,WAAWxxB,eAEhC,KAAAynB,WAAa5oC,KAAK6yC,QAAQ1xB,eAE1B,KAAAskB,gBAAkBzlC,KAAK4yC,iBAAiBzxB,eAExC,KAAAukB,eAAgB,EAAA7jB,EAAA,IAAc,CAC1C7hB,KAAK6yC,QACL7yC,KAAK4yC,mBACNj3B,MAAK,EAAArZ,EAAA,GAAI,EAAE2G,EAAGe,KAAUA,EAAMhK,KAAK6oC,kBAAkB7+B,GAAO,KAIvD,KAAAzE,UAAqB,GAErB,KAAAutC,mBAAuC,IAuD3C,WACKn3B,MAAK,EAAAC,EAAA,GAAO3S,GAAMA,IAClBqZ,UAAU,IAAM7G,WAAW,IAAMzb,KAAKolB,OAAQ,MACnDplB,KAAKylC,gBAAgBnjB,UAAWtY,IACxBA,IACAhK,KAAK8E,SAAS+O,UAAY,CACtB7T,KAAKuF,UACLvF,KAAK+yC,iBAAiB/oC,EAAI7K,QA3D1C,eACI,OAAOa,KAAKuF,UAIhB,wBACI,OAAOvF,KAAK8yC,mBAIT,iBAAiBE,EAAiB,IAIrC,OAHKA,GAAUhzC,KAAKiK,WAChB+oC,EAAShzC,KAAKiK,SAAS9K,IAEpBa,KAAK8yC,oBACN9yC,KAAK8yC,mBAAmBE,IACxB,GAIV,mBACI,OAAOhzC,KAAKizC,cAIhB,gBACI,OAAOjzC,KAAK2yC,WAAWhwB,WAI3B,eACI,OAAO3iB,KAAK4yC,iBAAiBjwB,WAEjC,aAAoB3Y,GAChBhK,KAAK4yC,iBAAiB5kC,KAAKhE,GAC3BhK,KAAK8E,SAAS+O,UAAY,CACtB7T,KAAKuF,UAAUwF,QACf/K,KAAK+yC,iBAAiB/oC,EAAI7K,IAAI4L,SAK/B,KAAK5L,GACR,OAAOa,KAAKkjC,UAAUvgC,KAAMV,GAAMA,EAAE9C,KAAOA,GAI/C,aACI,OAAOa,KAAK6yC,QAAQlwB,WAqBjB,YAAYuwB,GACf,OAAOlzC,KAAK8J,OAAOnH,KAAM8J,GAAQymC,aAAO,EAAPA,EAAS7iC,SAAS5D,EAAItN,KAOpD,kBAAkB6K,GACrB,OAAOhK,KAAK8J,OAAO9H,OAAQyK,GAAQA,EAAI9C,YAAcK,EAAI7K,IAG/C,KAAK+iC,EAAgB,G,8CAC/BliC,KAAKslB,aAAatX,MAAK,SACjBhO,KAAKqlB,OAAOpJ,MAAOoC,IAGrB,MAFA,QAAY,gDACZ5C,WAAW,IAAMzb,KAAKolB,KAAK8c,GAAQphC,KAAK+pC,IAAI,IAAQ,MAAQ3I,IACtD7jB,IAEVre,KAAKslB,aAAatX,MAAK,GACnBwZ,OAAOc,QACFd,OAAOiF,cAAajF,OAAOiF,YAAc,IAC9CjF,OAAOiF,YAAY0mB,KAAOnzC,QAOpB,O,oDACJA,KAAKozC,yBACLpzC,KAAKqzC,sBACLrzC,KAAKszC,mBACLtzC,KAAKuzC,iBAMF,mB,sDACT,MAAMC,QAAiB,SAAW,CAAEhqC,KAAM,QACrCmS,MAAK,EAAArZ,EAAA,GAAKL,GAAMA,EAAE2F,OAClBiU,YACL,GAAI23B,EAAS9vC,OAAQ,CACjB,MAAM+vC,GAAO,WACPttB,EACFqtB,EAAS7wC,KACJkd,IAAQ,MAAC,mBAAYA,EAAK1gB,MAAmB,QAAZ,EAAAs0C,aAAI,EAAJA,EAAMnmB,cAAM,eAAEomB,aAC/CF,EAAS,GACZ1nC,EAEL,QAF0B,QACjB,SAAaqa,EAAIhnB,GAAI,CAAE0I,KAAM,aAAcgU,mBACpD,eAAE9Q,QACG+Q,EAEL,QAF0B,QACjB,SAAaqK,EAAIhnB,GAAI,CAAE0I,KAAM,aAAcgU,mBACpD,eAAE9Q,QACH/K,KAAKuF,UAAY,OAAH,wBAAQvF,KAAKuF,WAAcuW,GACzC9b,KAAKizC,cAAgB,IAAI,IAAa,OAAD,wBAAM9sB,GAAG,CAAEra,mBAEhD9L,KAAKsgB,QAAQwV,SAAS,CAAC,qBAOlB,gB,sDACT,MAAM0P,QAAsB,SAAW,CACnCh8B,KAAM,WACNykC,MAAO,MAENtyB,MACG,EAAArZ,EAAA,GAAKL,GACDA,EAAE2F,KAAK5F,OAAQiH,GAAMA,EAAEU,YAAc3J,KAAKizC,cAAc9zC,MAG/D0c,aACA2pB,aAAa,EAAbA,EAAe9hC,SAChB1D,KAAKsgB,QAAQwV,SAAS,CAAC,mBAE3B,MAAMoN,EAAY,GAClB,IAAK,MAAMl5B,KAAOw7B,EAAe,CAC7B,MAAM15B,EAEL,QAF0B,QACjB,SAAa9B,EAAI7K,GAAI,CAAE0I,KAAM,aAAcgU,mBACpD,eAAE9Q,QACHm4B,EAAU1hC,KAAK,IAAIivC,EAAS,OAAD,wBAAMzmC,GAAG,CAAE8B,eAE1C9L,KAAK2yC,WAAW3kC,KAAKk1B,GACrB,MAAM/jC,EAAK4b,aAAaE,QAAQ,oBAC5B9b,GAAMa,KAAKkjC,UAAUvgC,KAAMqH,GAAQA,EAAI7K,KAAOA,IAC9Ca,KAAK4yC,iBAAiB5kC,KAClBhO,KAAKkjC,UAAUvgC,KAAMqH,GAAQA,EAAI7K,KAAOA,MAG9B,QAAb,EAAAa,KAAKiK,gBAAQ,eAAE9K,MAAM+jC,aAAS,EAATA,EAAWx/B,QAAS,IAC1C1D,KAAKiK,SAAWi5B,EAAU,MAOrB,a,8CACT,MAAM0F,QAAmB,SAAW,CAChCp/B,KAAM,QACNykC,MAAO,OAENtyB,MAAK,EAAArZ,EAAA,GAAKL,GAAMA,EAAE2F,OAClBiU,aACA+sB,aAAU,EAAVA,EAAYllC,SACb1D,KAAKsgB,QAAQwV,SAAS,CAAC,mBAE3B,MAAMhsB,EAAS8+B,EAAWtmC,IAAKmK,GAAQ,IAAI,IAAcA,IACzD3C,EAAO2E,KAAK,CAACC,EAAGC,KAAOD,EAAE7G,MAAQ,IAAI8Z,cAAchT,EAAE9G,MAAQ,KAC7D7H,KAAK6yC,QAAQ7kC,KAAKlE,KAGtB,6BACI,OAAO9J,KAAKkjC,UACP5gC,IAAK2a,GAAM,IAAIA,EAAE00B,sBACjBnnC,OAAO,CAACmpC,EAAMC,IAASD,EAAKhpC,OAAOipC,GAAO,IAC1CnlC,KAAK,CAACC,EAAGC,IAAMD,EAAE7G,KAAK8Z,cAAchT,EAAE9G,OAGlC,e,8CACT,IAAK7H,KAAKizC,cAAe,OACzB,MAAMtiB,EAAW,IACb3wB,KAAK8E,SAASe,IAAI,aAAe,aACnCmH,oBACFhN,KAAKuF,gBAAkB,SAAavF,KAAKizC,cAAc9zC,GAAI,CACvD0I,KAAM8oB,IACP9U,YACH,MAAMqnB,EAAYljC,KAAKkjC,UACvB,IAAK,MAAMl5B,KAAOk5B,EACdljC,KAAK8yC,mBAAmB9oC,EAAI7K,UAAY,SAAa6K,EAAI7K,GAAI,CACzD0I,KAAM8oB,IACP9U,YAEP7b,KAAK8E,SAAS+O,UAAY,CACtB7T,KAAKuF,UAAUwF,QACf/K,KAAK+yC,iBAAiB/yC,KAAKiK,SAAS9K,IAAI4L,WAKzC,aAAa5L,GAChB4b,aAAaC,QAAQ,mBAAoB7b,I,6CAlPpCuzC,GAAmB,0B,0BAAnBA,EAAmB,QAAnBA,EAAmB,qBAFhB,S,GAET,I,wGCPK,iBACI,oBAAU,0BAAc,QACxB,eAAK,SAAoB,QAC7B,S,sBADS,kC,wCAET,oBAGI,kDAAStlB,OAAA,SAET,oBAAU,SAER,QACN,Q,yBAHc,oD,yBApBlB,iBAKI,iBACI,iBAAgC,SAAgB,QAChD,iBACI,SACJ,QACJ,QACA,uBAIA,0BASJ,S,gCAlBwC,6BAE5B,6HAGwB,6CAM3B,kCAAgB,e,yBASrB,qBACI,SACJ,S,qBAFgC,oCAC5B,6DAMT,Y,MAAMymB,EApCb,cA4CqB,KAAAzmB,OAAS,IAAI,O,6CARrBymB,I,wBAAAA,EAAwB,4mBAjC7B,uBAyBA,2C,KAtBK,uB,iBA8BN,G,6JCea,yBACI,SACJ,S,yBAF0C,iBACtC,gD,wCAXZ,6BAII,yBAGI,0DAAiB5pC,SAAA,UAGjB,+BAGJ,QACJ,Q,wBARQ,gDAI4B,uC,yBAc5B,yBAII,SACJ,S,yBAHI,oBAEA,gC,wCAbZ,6BAII,yBAEI,mEAGA,+BAMJ,QACJ,Q,wBAVQ,iCAIqB,yC,wCAkBb,kCAKI,+FACH,Q,6CAJG,iBAAe,wB,yBALvB,SAGI,wCAOJ,S,oCANS,2C,yBAVb,SAMI,iC,iBAWJ,S,sBAV0B,wD,yBAR9B,SACI,gC,iBAkBJ,S,uCAjBS,4EAGb,e,wBAuBY,kC,oCAEI,iBAAe,wB,yBALvB,SAGI,wCAMJ,S,sBAL0B,oC,yBAT9B,kBAKI,gCAUJ,S,iCAZI,8BAGK,iDAA+B,e,wCAW5C,kBACI,qBAAmB,0DACf,SACJ,QACJ,Q,wBAFQ,oE,sBAIJ,kBACI,sBAA2B,iBAAK,QAChC,aAAG,qBAAS,QAChB,S,sBAGA,kBACI,0BACA,aAAG,uCAA2B,QAClC,SAqBT,Y,MAAM6pC,UAAkC,KAyD3C,YACYt5B,EACAjV,EACyB4B,GAEjC3B,QAJQ,KAAAgV,OACA,KAAAjV,YACyB,KAAA4B,QA1DpB,KAAA3E,MAAQ,IAAI,MAEtB,KAAA+7B,OAAkB,IAAKv+B,KAAKmH,MAAMo3B,QAAU,IAE5C,KAAAt0B,SAAW,IAAIwW,EAAA,EAA0B,MAIzC,KAAAszB,YAA0B,GAMjB,KAAA3V,kBAAmB,EAAAvc,EAAA,IAAc,CAAC7hB,KAAKiK,WAAW0R,MAC9D,EAAA4F,EAAA,GAAU,EAAEvX,MACRhK,KAAKiF,SAAU,GACR,QAAmB,CACtBqT,SAAUtO,aAAG,EAAHA,EAAK7K,GACfoZ,cAAc,EAAAY,EAAA,GAAYnZ,KAAKmH,MAAM5H,MACrCiZ,YAAY,EAAAW,EAAA,IACR,EAAAtQ,EAAA,GAAW7I,KAAKmH,MAAM5H,KAAMS,KAAKmH,MAAM1H,gBAInD,EAAA2hB,EAAA,GAAY,IAGA,KAAA4yB,gBAAkBh0C,KAAKo+B,iBAAiBziB,MACpD,EAAArZ,EAAA,GAAKud,IACD,QACIA,EACA,+BAAK7f,KAAKmH,OAAK,CAAE4H,MAAM,YACvB/O,KAAKwa,KAAKvQ,SAASsoC,iBAG3B,EAAA9wB,EAAA,GAAI,IAAOzhB,KAAKiF,SAAU,IAyB1BjF,KAAKiK,SAAS+D,KAAKhO,KAAKwa,KAAKvQ,UAAYjK,KAAKkjC,UAAU,IACxDljC,KAAKqiB,aACD,SACAriB,KAAKg0C,gBAAgB1xB,UAAWrZ,GAAMA,IAzB9C,gBACI,OAAOjJ,KAAKwa,KAAK0oB,UAIrB,eACI,QAASljC,KAAKuF,UAAUM,IAAI,+BAIhC,gBACI,MAAM04B,EAAS,GAEf,OADAv+B,KAAKu+B,OAAOxuB,QAASnB,GAAW2vB,EAAO3vB,EAAMzP,KAAM,GAC5Co/B,EAgBJ,cAAc3vB,GACb5O,KAAKi0C,SACAj0C,KAAKk0C,UAAUtlC,EAAMzP,KACtBa,KAAKu+B,OAAO/8B,KAAKoN,IAGrB5O,KAAKu+B,OAAS,CAAC3vB,GACf5O,KAAK+N,QAIN,OACH/N,KAAKwC,MAAMa,KAAK,CAAEmb,OAAQ,OAAQjT,SAAUvL,KAAKu+B,U,6CAlF5CuV,GAAyB,8BA4DtB,Q,wBA5DHA,EAAyB,wiC,GAAA,MApH9B,kBACI,sBAA2B,iBAAK,QAChC,iBACI,SACJ,QACA,oBACI,sBAA2B,iBAAK,QACpC,QACJ,QACA,gBACI,kCAeA,mCAiBA,kBACI,iCAoBA,wBAgBJ,QACA,2BAKA,2CAMA,2CAMJ,S,uBA9FQ,sDASC,yDAeA,6DAgBc,kCAAgB,cAsB1B,kCAeA,oC,+LAoCd,G,gFC5IHA,EAAyB,wCACzBD,EAAwB,c,MAAxBA,EAAwB,oB,sBCR5B,IAAIM,EAAsB,EAEnB,SAASC,EAAkBvgC,EAAqB,IACnD,MAAM1U,EAAK,SAASg1C,IACdtsC,EAAO,cAAcssC,IACrBE,GAAS,QAAqB,OAAS,GAAM,GAAKF,EAAc,EAChEvlC,EAAQ,OAAH,QACPzP,KACA0I,OACAysC,UAAW,GAAGzsC,sBACdH,OAAQ,GAAGysC,IACXzqC,SAAwC,GAA9B,QAAqB,GAAI,GACnCsB,MAAO,GAAGnD,EAAKmF,cAAcjK,MAAM,KAAKgK,KAAK,QAAQ,OACrD1C,KAAM,GACNkqC,YAAY,QAAqB,OAAS,GAAM,EAChDC,aAAa,QAAqB,OAAS,GAAM,EACjDjoC,UAAU,QAAqB,OAAS,GAAM,EAC9CkoC,UAAuC,KAA5B,QAAqB,KAChC7kC,MAAiC,GAA1B,QAAqB,GAC5BC,UAAqC,GAA1B,QAAqB,GAChClC,MAAO,CAAC,cACR+mC,YAAa,oBAAoBv1C,IACjC+U,SAAU,GACVygC,aAAcN,EACR,CAAC,UAAS,QAAqBF,EAAc,MAC7C,GACNS,MAAO,IACJ/gC,GASP,OAPIjF,EAAsB,gBAAKA,EAAsB,eAAElL,OAAS,IAC5DkL,EAAsB,eAAEmB,QACnBud,GACIA,EAAO5jB,UAAW,QAAqBkF,EAAMlF,UAAY,GAElEkF,EAAsB,eAAE,GAAGlF,SAAWkF,EAAMlF,UAEzCkF,E,0EC5BJ,MAAMimC,EAkCT,YAAYjtC,EAAuB,IAC/B5H,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAK6H,KAAOD,EAAKC,MAAQ,GACzB7H,KAAKsK,aAAe1C,EAAK0C,cAAgB,GACzCtK,KAAKgL,OAASpD,EAAKoD,OAAS,IAAIgC,cAChChN,KAAK0J,SAAW9B,EAAK8B,WAAa,EAClC1J,KAAKy5B,aAAe7xB,EAAK6xB,cAAiB7xB,EAAKD,UAAoB,GACnE3H,KAAKuM,WAAa3E,EAAK2E,SACvBvM,KAAK2N,MAAQ/F,EAAK+F,OAAS,GAC3B3N,KAAK00C,YAAc9sC,EAAK8sC,aAAe,GACvC10C,KAAK0H,OAASE,EAAKF,QAAU,GAC7B1H,KAAK40C,MAAQhtC,EAAKgtC,OAAS,GAC3B50C,KAAK80C,eAAiBltC,EAAKktC,gBAAkB,GAC7C90C,KAAK2H,SAAWC,EAAKD,UAAY,GACjC3H,KAAKkP,gBAAkBtH,EAAKsH,gBAC5BlP,KAAKsH,MAAQM,EAAKN,OAAS,IAAI,KAC/BtH,KAAKmlB,aAAevd,EAAKud,cAAgB,M,iICjD1C,Y,MAAM4vB,EAkBT,YAAoBv6B,GAAA,KAAAA,OAhBZ,KAAAw6B,MAAQ,IAAI,IAAyB,IAE1B,KAAA1vB,aAAe,IAAI,KAAyB,GAE/C,KAAA5J,YAAc1b,KAAKslB,aAAanE,eAEhC,KAAAtB,KAAO7f,KAAKg1C,MAAM7zB,eAExB,KAAA8zB,SAAYrmC,GAClBA,EAAMjB,MAAM0C,SAASrQ,KAAKwa,KAAKvQ,SAAS9K,IAQxCa,KAAKwa,KAAKkB,YACLC,MAAK,OAAO1S,GAAMA,IAClBqZ,UAAU,IAAMtiB,KAAKk1C,cAP9B,iBACI,OAAOl1C,KAAKg1C,MAAMryB,WAaf,OAAOwyB,EAAmCn1C,KAAKi1C,UAClD,OAAOj1C,KAAKg1C,MAAMryB,WAAW3gB,OAAQiH,GAAMksC,EAAUlsC,IAOlD,KAAK9J,GACR,OAAOa,KAAKg1C,MACPryB,WACAhgB,KAAMiM,GAAUA,EAAMzP,KAAOA,GAAMyP,EAAM5D,QAAU7L,GAG9C,a,8CACV,MAcMi2C,SAdgB,SAAa,CAC/BrzB,QAAS/hB,KAAKwa,KAAKknB,aAAaviC,GAChC8uC,MAAO,MAENtyB,MAAK,OAAK1Z,GAAMA,EAAE2F,OAClBiU,aACsBvZ,IACtB+yC,GACG,IAAI,IAAM,OAAD,wBACDA,GAAW,CACf/tC,MAAOtH,KAAKwa,KAAK8J,YAAY,IAAI+wB,EAAI1nC,YAIjB3L,OAAQ4M,GAAUA,EAAMlH,QACxD1H,KAAKg1C,MAAMhnC,KAAKonC,GAChBp1C,KAAKslB,aAAatX,MAAK,M,6CA3DlB+mC,GAAa,c,0BAAbA,EAAa,QAAbA,EAAa,qBAFV,S,GAET,I,gMCQC,kBAII,uBACJ,S,qBADe,+B,wCAEf,oBAII,oBAAoD,kBAAM,QAC1D,qBAAmB,iEAAwB,gBAAI,QACnD,S,sBAEI,mBACI,0BACA,aAAG,8BAAkB,QACzB,SAgBL,Y,MAAMO,UAA8B,KAUvC,YAA6CnuC,GACzC3B,QADyC,KAAA2B,QAR5B,KAAA3E,MAAQ,IAAI,MAYtB,WACHxC,KAAKkQ,KAAOlQ,KAAKmH,MAAM+I,MAAQ,GAC/BlQ,KAAK0e,MAAO,QAAiB1e,KAAKkQ,MAG/B,cAEH,GADAlQ,KAAK0e,KAAKI,mBACN9e,KAAK0e,KAAKK,MAAO,CACjB,MAAMqvB,EAAW,IAAI,KAAK,OAAD,wBAClBpuC,KAAK0e,KAAKhZ,OAAK,CAClB2E,KAAM,cAEVrK,KAAKwC,MAAMa,KAAK,CAAEmb,OAAQ,OAAQjT,SAAU6iC,M,6CA1B3CkH,GAAqB,MAUV,Q,wBAVXA,EAAqB,stB,GAAA,MA1C1B,kBACI,iBACI,SACJ,QACA,iBACA,oBACI,oBAAU,iBAAK,QACnB,QACJ,QACA,wBAMA,0BAOA,2C,uBApBQ,+EASH,kCAAgB,cAMhB,oC,kJAyBN,G,+EC9CK,iBACI,mBACI,iBAAI,gBAAM,aAAC,QAAO,cACtB,QACA,4BACI,mBAMA,qBAAW,4BAAgB,QAC/B,QACJ,S,sBAZsB,4C,yBAatB,iBACI,mBACI,kBAAK,gBAAM,aAAC,QAAO,cACvB,QACA,4BACI,mBAMA,qBAAW,qCAAyB,QACxC,QACJ,S,sBAZuB,6C,yBAavB,iBACI,mBACI,yBAAY,gBAAM,aAAC,QAAO,cAC9B,QACA,4BACI,oBAMA,qBAAW,oCAAwB,QACvC,QACJ,S,sBAZqB,oD,yBAarB,iBACI,oBACI,oBACJ,QACA,4BACI,oBAOA,qBAAW,mCAAuB,QACtC,QACJ,S,sBAbuB,6C,sBAcvB,iBACI,2BAKI,iCACJ,QACJ,S,sBACA,iBACI,2BAKI,4BACJ,QACJ,S,yBA3EJ,kBACI,wBAcA,wBAcA,wBAcA,uBAeA,uBASA,uBASJ,S,qBA5E6B,0BACL,4CAcA,6CAcA,oDAcA,6CAeA,2DASA,uDAwBzB,Y,MAAMC,EAIF,SAAS1tC,GACZ,OACI7H,KAAK0e,KAAK2V,SAASxsB,GAAMusB,SAAWp0B,KAAK0e,KAAK2V,SAASxsB,GAAM2tC,S,6CAN5DD,I,wBAAAA,EAAiB,yyBA3FtB,wB,KAAiB,sB,uLA2FlB,G,wCCtFYD,EAAuB,CAAF,KAAE,mBAAAC,EAAiB,U,cCRpD,MAAME,EAsBT,YAAYtuC,EAAiB,IACzBnH,KAAKqK,KAAOlD,EAAMkD,MAAQlD,EAAMjB,UAAY,QAC5ClG,KAAKupB,SAAWpiB,EAAMoiB,UAClBpiB,EAAMO,QAAU,CACZlE,EAAG2D,EAAM3D,EAAI2D,EAAMwP,WAAa,EAChC/S,EAAGuD,EAAMvD,EAAIuD,EAAMyP,YAAc,GAEzC5W,KAAK0W,SAAWvP,EAAMuP,UAAY,EAClC1W,KAAK4Q,UAAYzJ,EAAMyJ,YAAa,EAAAuI,EAAA,GAAY,IAAIlE,MACpDjV,KAAKsH,MAAQH,EAAMG,MACnBtH,KAAKiK,SAAW9C,EAAM8C,SACtBjK,KAAKsW,cAAgBnP,EAAMmP,YAC3BtW,KAAKwW,iBAAmBrP,EAAMqP,kBAAoB,Y,4CCZnD,SAASk/B,EAAavlC,GACzB,MAAMyP,GAAQ,OAAc,CAAEzP,MAC9B,OAAO,SAAI,wBAAoBA,EAAI,IAAMyP,EAAQ,KAAMjE,MACnD,OAAKkE,GAASA,EAAKvd,IAAK8E,GAAS,IAAI,KAAUA,MCtBvD,MAAMuuC,EAAiB,uBAMhB,SAASC,EAAYzlC,GACxB,MAAMyP,GAAQ,OAAc,CAAEzP,MAC9B,OAAO,SAAI,GAAGwlC,IAAiBxlC,EAAI,IAAMyP,EAAQ,MAAMjE,MACnD,OAAKkE,GAASA,EAAKvd,IAAK8E,GAAS,IAAI,KAAUA,MAQhD,SAASyuC,EAAU12C,GACtB,OAAO,SAAI,GAAGw2C,KAAkB51B,mBAAmB5gB,MAAOwc,MACtD,OAAKvU,GAAS,IAAI,KAAUA,O,8ECV7B,MAAM0uC,EAwCT,YAAYluC,EAA8B,I,YACtC5H,KAAKb,GAAKyI,EAAKzI,IAAM,GACrBa,KAAK6H,KAAOD,EAAKC,MAAQ,GACzB7H,KAAKgL,MAAQpD,EAAKoD,OAAS,GAC3BhL,KAAKiL,WAAarD,EAAKqD,YAAcrD,EAAKC,MAAQ,GAClD7H,KAAKkL,UAAYtD,EAAKsD,WAAa,GACnClL,KAAKwvC,MAAQ5nC,EAAK4nC,OAAS,GAC3BxvC,KAAK0hC,aAAe95B,EAAK85B,cAAgB,GACzC1hC,KAAK+1C,MAAQnuC,EAAKmuC,OAAS,GAC3B/1C,KAAKg2C,MAAQpuC,EAAKouC,OAAS,GAC3Bh2C,KAAKwV,SAAW5N,EAAK4N,UAAY,GACjCxV,KAAKi2C,YAAcruC,EAAKquC,UACxBj2C,KAAKkB,OAAS0G,EAAK1G,QAAU,GAC7BlB,KAAK2Q,aAAe/I,EAAK+I,WACzB3Q,KAAKk2C,SAAwB,QAAb,EAAAtuC,EAAKsuC,gBAAQ,SAC7Bl2C,KAAKkP,gBAAkBtH,EAAKsH,iBAAmB,GAC/C,MAAMhO,EAAS0G,EAAK1G,QAAU,GAC1B0G,EAAKuuC,WAAWj1C,EAAOM,KAAK,iBAC5BoG,EAAKwuC,SAASl1C,EAAOM,KAAK,mBAC9BxB,KAAKkB,OAASA,EACdlB,KAAK2P,eAAiB/H,EAAK+H,gBAAkB,GAC7C3P,KAAK2P,eAAe0mC,oBAChBzuC,EAAKyuC,qBAAuBr2C,KAAK2P,eAAe0mC,oBACpDr2C,KAAKg/B,cAAyB,QAAV,EAAAh/B,KAAKgL,aAAK,eAAEZ,SAAS,GAAG,SAC5CpK,KAAKkN,eAAoC,QAAnB,EAAAtF,EAAKsF,sBAAc,SACzClN,KAAKq2C,uBAA2C,QAAnB,EAAAr2C,KAAK2P,sBAAc,eAAE0mC,sBAInD,MAAMC,UAAkBR,EAM3B,YAAYluC,EAA2B,IACnCpC,MAAMoC,GACN5H,KAAKu2C,mBAAqB3uC,EAAK2uC,oBAAsB,GACrDv2C,KAAKw2C,0BACD5uC,EAAK4uC,4BAA6B,GAIvC,MAAMC,UAAkBX,EAU3B,YAAYluC,EAA2B,IACnCpC,MAAMoC,GACN5H,KAAK02C,YAAc9uC,EAAK8uC,aAAe,GACvC12C,KAAKsvC,SAAW1nC,EAAK0nC,UAAY,GACjCtvC,KAAKkG,SAAW0B,EAAK1B,UAAY,GACjClG,KAAK2c,eAAiB/U,EAAK+U,gB,sFC5GnC,IAIWg6B,EAAc,aAElB,SAASC,EAAsBpuB,GAClCmuB,EAAcnuB,EA8DX,SAASquB,EAAiB3mC,G,MAC7B,IAAKA,EACD,MAAMlR,MAAM,kBAGhB,MAAM83C,EAA+B,CACjCjvC,KAAM,IAAI,KAAYqI,EAAKrI,MAAQ,IACnCmD,MAAO,IAAI,KAAYkF,EAAKlF,OAAS,GAAI,CACrC,WACA,gBAEJ02B,aAAc,IAAI,KACdxxB,EAAKwxB,cAAgB,GACrB,eAEJ8N,MAAO,IAAI,KAAYt/B,EAAKs/B,OAAS,IACrC6G,oBAAqB,IAAI,KAAYnmC,EAAKmmC,sBAAuB,GACjEnpC,eAAgB,IAAI,KAA+B,QAAnB,EAAAgD,EAAKhD,sBAAc,WAKvD,OADa,IAAI,KAAU4pC,M","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 2726;\nmodule.exports = webpackEmptyAsyncContext;","<div [class]=\"'event-timeline' + (klass ? ' ' + klass : '')\">\n    <div class=\"times\" (window:mouseup)=\"resetMove()\" (window:touchend)=\"resetMove()\">\n        <div class=\"row divider\">\n            <div class=\"header\"></div>\n            <div class=\"line\">\n                <div class=\"mini-block\" *ngFor=\"let blk of model.blocks || []\">\n                    <div class=\"time\" *ngIf=\"blk.hour\">\n                        <span>{{ blk.short }}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"content\">\n        <div class=\"overlay row\">\n            <div class=\"header\"></div>\n            <div class=\"line\" #overlay (mousemove)=\"move($event)\" (touchmove)=\"move($event)\">\n                <div\n                    class=\"mini-block\"\n                    *ngFor=\"let blk of model.blocks || []\"\n                    [class.unavailable]=\"blk.unavailable\"\n                    (click)=\"setTime(blk)\"\n                >\n                    <div class=\"bar\" [class.hour]=\"blk.hour\" [class.divider]=\"blk.divider\"></div>\n                </div>\n                <div\n                    class=\"current-time\"\n                    *ngIf=\"model.today > 0\"\n                    [style.left]=\"vertical ? '' : model.today * 100 + '%'\"\n                    [style.top]=\"vertical ? model.today * 100 + '%' : ''\"\n                ></div>\n                <div\n                    class=\"selected-time\"\n                    *ngIf=\"can_select\"\n                    [style.left]=\"vertical ? '' : model.start_time * 100 + '%'\"\n                    [style.top]=\"vertical ? model.start_time * 100 + '%' : ''\"\n                    [style.width]=\"vertical ? '' : model.duration * 100 + '%'\"\n                    [style.height]=\"vertical ? model.duration * 100 + '%' : ''\"\n                >\n                    <div\n                        class=\"inner\"\n                        (mousedown)=\"setMove('start')\"\n                        (touchstart)=\"setMove('start')\"\n                    ></div>\n                    <div\n                        class=\"knob start\"\n                        (mousedown)=\"setMove('start')\"\n                        (touchstart)=\"setMove('start')\"\n                    ></div>\n                    <div\n                        class=\"knob end\"\n                        (mousedown)=\"setMove('end')\"\n                        (touchstart)=\"setMove('end')\"\n                    ></div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\" *ngFor=\"let grp of this.model.groups || []\" [class.divider]=\"grp.divider\">\n            <div class=\"header\">\n                <div class=\"text\">{{ grp.name }}</div>\n                <div class=\"icon\" *ngIf=\"grp.remove\" (click)=\"grp.remove()\">\n                    <i class=\"material-icons\">close</i>\n                </div>\n            </div>\n            <div class=\"line\">\n                <div class=\"mini-block\" *ngFor=\"let blk of grp.blocks\">\n                    <div\n                        class=\"item\"\n                        *ngFor=\"let event of blk.events\"\n                        [style.width]=\"vertical ? '' : (event.duration / 5) * 100 + '%'\"\n                        [style.height]=\"vertical ? (event.duration / 5) * 100 + '%' : ''\"\n                    >\n                        <div class=\"text\">{{ event.text }}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import {\n    Component,\n    OnInit,\n    Input,\n    SimpleChanges,\n    OnChanges,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport * as dayjs from 'dayjs';\n\nexport interface ITimelineEventGroup {\n    name?: string;\n    divider?: boolean;\n    can_toggle?: boolean;\n    disabled?: boolean;\n    required?: boolean;\n    events?: ITimelineEvent[];\n    blocks?: ITimelineBlock[];\n    remove?: () => void;\n}\n\nexport interface ITimelineEvent {\n    start: number;\n    duration: number;\n    text?: string;\n}\n\ninterface ITimelineBlock {\n    id: string;\n    display?: string;\n    short?: string;\n    hour?: boolean;\n    divider?: boolean;\n    unavailable?: boolean;\n    events?: ITimelineEvent[];\n}\n\n@Component({\n    selector: 'event-timeline',\n    templateUrl: './event-timeline.component.html',\n    styleUrls: ['./event-timeline.component.scss'],\n})\nexport class EventTimelineComponent extends BaseClass implements OnInit, OnChanges {\n    /** Groups and events */\n    @Input() public groups: ITimelineEventGroup[];\n    /** Selected date */\n    @Input() public date = dayjs().valueOf();\n    /** Selected duration in min */\n    @Input() public duration = 30;\n    /** Whether time can be changed */\n    @Input() public can_select = true;\n    @Input() public klass: string;\n\n    /** Output emitter */\n    @Output() public dateChange = new EventEmitter<number>();\n    @Output() public durationChange = new EventEmitter<number>();\n    @Output() public groupsChange = new EventEmitter<ITimelineEventGroup[]>();\n\n    public vertical = false;\n    public model: { [name: string]: any } = {};\n\n    @ViewChild('overlay', { static: false }) public content: ElementRef<HTMLDivElement>;\n\n    public ngOnInit(): void {\n        this.model.start = dayjs(this.date).hour(6).minute(30);\n        this.model.end = dayjs(this.date).hour(21).minute(30);\n        this.generateBlocks();\n        this.updateTime();\n        this.interval('timer', () => this.updateTime(), 60 * 1000);\n        const now = dayjs();\n        const tomorrow = dayjs().add(1, 'd').startOf('d');\n        this.timeout(\n            'update_date',\n            () => {\n                this.updateStartEnd();\n                this.interval('update_date', () => this.updateStartEnd(), 24 * 60 * 60 * 1000);\n            },\n            Math.floor(tomorrow.diff(now, 's'))\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.groups) {\n            this.processGroups();\n        }\n        if (changes.date || changes.duration) {\n            this.updateStartEnd();\n        }\n    }\n\n    public updateStartEnd() {\n        this.model.start = dayjs(this.date).hour(6).minute(30);\n        this.model.end = dayjs(this.date).hour(21).minute(30);\n        this.updatePeriod();\n        this.updateTime();\n    }\n\n    public generateBlocks() {\n        const start = this.model.start;\n        const end = this.model.end;\n        const blocks: ITimelineBlock[] = [];\n        for (let time = dayjs(start); time.isBefore(end); time = time.add(5, 'm')) {\n            blocks.push({\n                id: time.format('HH:mm'),\n                display: time.format('hh:00 a'),\n                short: time.format('hh a'),\n                hour: time.minute() === 0,\n                divider: time.minute() % 30 === 0,\n            });\n        }\n        this.model.blocks = blocks;\n    }\n\n    public processGroups() {\n        this.timeout(\n            'process',\n            () => {\n                this.model.groups = [];\n                const date = dayjs(this.model.start);\n                const end = this.model.end;\n                for (const grp of this.groups || []) {\n                    const blocks: ITimelineBlock[] = [];\n                    for (let time = dayjs(date); time.isBefore(end); time = time.add(5, 'm')) {\n                        const blk_end = dayjs(time).add(5, 'm');\n                        let events = [];\n                        if (grp.events) {\n                            events = grp.events.filter((i) => {\n                                const event_time = dayjs(this.date)\n                                    .hour(Math.floor(i.start))\n                                    .minute(Math.floor((i.start * 60) % 60));\n                                return (\n                                    (event_time.isAfter(time, 'm') ||\n                                        event_time.isSame(time, 'm')) &&\n                                    event_time.isBefore(blk_end, 'm')\n                                );\n                            });\n                        }\n                        blocks.push({\n                            id: time.format('HH:mm'),\n                            events,\n                        });\n                    }\n                    this.model.groups.push({ ...grp, blocks });\n                }\n                this.checkInUseBlocks();\n            },\n            20\n        );\n    }\n\n    public checkInUseBlocks() {\n        if (!this.model.blocks) {\n            return;\n        }\n        const blocks: ITimelineBlock[] = this.model.blocks.map((i) => ({\n            ...i,\n            unavailable: false,\n        }));\n        for (const grp of this.model.groups) {\n            for (const event of grp.events || []) {\n                const start = this.hoursToDate(event.start);\n                const end = dayjs(start).add(event.duration, 'm');\n                for (let time = dayjs(start); time.isBefore(end); time = time.add(5, 'm')) {\n                    const display = time.format('HH:mm');\n                    const blk = blocks.find((i) => i.id === display);\n                    if (blk) {\n                        blk.unavailable = true;\n                    }\n                }\n            }\n        }\n        this.model.blocks = blocks;\n    }\n\n    public hoursToDate(time: number) {\n        let t = dayjs()\n            .startOf('d')\n            .hour(Math.floor(time))\n            .minute(Math.floor((time * 60) % 60));\n        t = t.minute(Math.floor(t.minute() / 5) * 5);\n        return t;\n    }\n\n    public timeToDate(timestamp: string) {\n        const parts = timestamp.split(':');\n        let t = dayjs()\n            .startOf('d')\n            .hour(+parts[0])\n            .minute(+parts[1]);\n        t = t.minute(Math.floor(t.minute() / 5) * 5);\n        return t;\n    }\n\n    public updatePeriod() {\n        const start = dayjs(this.date).startOf('m');\n        const period = this.model.end.diff(this.model.start, 'm') / 60;\n        this.model.start_time = start.diff(this.model.start, 'm') / 60 / period;\n        this.model.duration = this.duration / 60 / period;\n    }\n\n    public updateTime() {\n        const start = dayjs().startOf('m');\n        const period = this.model.end.diff(this.model.start, 'm') / 60;\n        this.model.today = start.diff(this.model.start, 'm') / 60 / period;\n    }\n\n    public resetMove() {\n        this.model.move = '';\n    }\n\n    public setMove(move: string) {\n        this.model.move = move;\n    }\n\n    public setTime(block: ITimelineBlock) {\n        if (!block) {\n            return;\n        }\n        const parts = block.id.split(':');\n        const time = dayjs(this.date)\n            .hour(+parts[0])\n            .minute(+parts[1]);\n        this.date = time.valueOf();\n        this.dateChange.emit(this.date);\n        this.updatePeriod();\n    }\n\n    public move(e) {\n        this.timeout(\n            'move',\n            () => {\n                if (this.model.move && this.content) {\n                    const center = {\n                        x:\n                            e.touches && e.touches.length > 0\n                                ? e.touches[0].clientX || e.clientX\n                                : e.clientX,\n                        y:\n                            e.touches && e.touches.length > 0\n                                ? e.touches[0].clientY || e.clientY\n                                : e.clientY,\n                    };\n                    const content_box = this.content.nativeElement.getBoundingClientRect();\n                    const percent_w = (center.x - content_box.left) / content_box.width;\n                    const percent_h = (center.y - content_box.top) / content_box.height;\n                    const percent = !this.vertical ? percent_w : percent_h;\n\n                    const start_time = this.model.start.hour() + this.model.start.minute() / 60;\n                    const end_time = this.model.end.hour() + this.model.end.minute() / 60;\n                    const diff_time = end_time - start_time;\n                    const block_size = 15;\n                    const hour =\n                        Math.ceil((diff_time * percent + start_time) * (60 / block_size)) /\n                        (60 / block_size);\n                    if (this.model.move === 'end') {\n                        let date = dayjs(this.date);\n                        const end = dayjs(this.date)\n                            .hour(Math.floor(hour))\n                            .minute(Math.floor((hour * 60) % 60));\n                        if (end.isSame(date, 'm') || end.isBefore(date, 'm')) {\n                            date = dayjs(end).add(-this.duration, 'm');\n                            this.date = date.valueOf();\n                        } else {\n                            const duration = Math.floor(end.diff(date, 'm'));\n                            this.duration = Math.max(60, duration || block_size);\n                            this.durationChange.emit(this.duration);\n                        }\n                    } else if (this.model.move === 'start') {\n                        const date = dayjs(this.date)\n                            .hour(Math.floor(hour))\n                            .minute(Math.floor((hour * 60) % 60));\n                        this.date = date.valueOf();\n                    }\n                    this.dateChange.emit(this.date);\n                    this.updatePeriod();\n                }\n            },\n            10\n        );\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { ExploreSearchService } from '@placeos/explore';\n\n@Component({\n    selector: 'global-search',\n    template: `\n        <div\n            container\n            class=\"flex items-center rounded focus-within:shadow focus:shadow w-full px-2 relative\"\n        >\n            <app-icon class=\"text-2xl\">search</app-icon>\n            <input\n                #input\n                placeholder=\"Search for people or spaces...\"\n                class=\"flex-1 w-1/2 py-2 outline-none\"\n                [(ngModel)]=\"filter_str\"\n                (ngModelChange)=\"setFilter($event)\"\n                [matAutocomplete]=\"auto\"\n                [matAutocompleteConnectedTo]=\"origin\"\n            />\n            <mat-spinner *ngIf=\"loading | async\" [diameter]=\"32\"></mat-spinner>\n            <div\n                class=\"absolute bottom-0 left-2 right-2 min-w-[20rem]\"\n                matAutocompleteOrigin\n                #origin=\"matAutocompleteOrigin\"\n            ></div>\n        </div>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <ng-container *ngIf=\"(loading | async) !== true && filter_str\">\n                <mat-option\n                    *ngIf=\"!(results | async)?.length\"\n                    class=\"pointer-events-none\"\n                >\n                    No matches found\n                </mat-option>\n                <mat-option\n                    *ngFor=\"let option of results | async | slice: 0:5\"\n                    [value]=\"option\"\n                >\n                    <a\n                        [routerLink]=\"['/explore']\"\n                        [queryParams]=\"\n                            option.type === 'space'\n                                ? { space: option.id }\n                                : { email: option.id }\n                        \"\n                        class=\"w-full h-full flex items-center leading-tight\"\n                    >\n                        <div class=\"flex-1 overflow-hidden\">\n                            <div class=\"truncate w-full\">\n                                {{ option.name }}\n                            </div>\n                            <div class=\"text-xs\">\n                                {{ option.description }}\n                            </div>\n                        </div>\n                        <div\n                            class=\"text-xs font-bold p-2 capitalize text-white bg-gray-500 rounded\"\n                        >\n                            {{ option.type }}\n                        </div>\n                    </a>\n                </mat-option>\n            </ng-container>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            [container] {\n                transition: color 200ms, background-color 200ms;\n                background-color: #fff4;\n                color: #fff8;\n            }\n\n            [container]:focus,\n            [container]:focus-within {\n                background-color: #fff;\n                color: #000;\n                outline: var(--primary);\n            }\n\n            input::placeholder {\n                color: #fff8;\n            }\n\n            input:focus ::placeholder {\n                color: #0008;\n            }\n        `,\n    ],\n})\nexport class GlobalSearchComponent {\n    public readonly results = this._service.search_results;\n    public readonly loading = this._service.loading;\n\n    public filter_str = '';\n\n    public readonly setFilter = (s) =>\n        s instanceof Object\n            ? (this.filter_str = '')\n            : this._service.setFilter(s);\n\n    constructor(private _service: ExploreSearchService) {}\n}\n","import { Component } from '@angular/core';\nimport { ApplicationLink, BaseClass, SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'nav-menu',\n    template: `\n        <div class=\"absolute hidden sm:w-[10rem]\"></div>\n        <div\n            class=\"flex sm:flex-col bg-white overflow-auto text-black shadow divide-y divide-gray-100 w-full sm:w-auto h-auto sm:h-full border-t sm:border-t border-gray-300 relative p-2\"\n            (mouseenter)=\"hidden ? entered() : ''\"\n        >\n            <a\n                mat-icon-button\n                class=\"h-16 w-16 sm:h-12 rounded sm:mb-2 sm:hover:bg-gray-200\"\n                *ngFor=\"let item of menu_items\"\n                [routerLink]=\"[item.route]\"\n                [class.sm:w-[10rem]]=\"!hidden\"\n                [class.sm:w-12]=\"hidden\"\n                routerLinkActive=\"active\"\n            >\n                <div\n                    class=\"flex flex-col sm:flex-row items-center justify-start w-16 px-2\"\n                    [class.sm:w-[10rem]]=\"!hidden\"\n                >\n                    <app-icon [icon]=\"item.icon\"></app-icon>\n                    <div\n                        text\n                        class=\"text-sm font-normal h-0 sm:h-auto overflow-hidden opacity-0 text-left\"\n                        [class.sm:w-0]=\"hidden\"\n                        [class.sm:w-32]=\"!hidden\"\n                        [class.sm:opacity-100]=\"!hidden\"\n                        [class.sm:ml-2]=\"!hidden\"\n                    >\n                        {{ item.name }}\n                    </div>\n                </div>\n            </a>\n        </div>\n        <button\n            mat-icon-button\n            class=\"hidden sm:block absolute bottom-2 right-0 transform translate-x-1/2 bg-white shadow w-8 h-8 text-xs\"\n            (click)=\"hidden = !hidden\"\n        >\n            <app-icon>\n                {{ hidden ? 'chevron_right' : 'chevron_left' }}\n            </app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n            [text] {\n                transition: opacity 200ms, height 200ms, width 300ms;\n            }\n\n            :host > div,\n            a {\n                transition: width 200ms, height 200ms;\n            }\n\n            .active {\n                background-color: var(--primary) !important;\n                color: #fff;\n            }\n\n            .active [text],\n            a:hover [text] {\n                opacity: 1 !important;\n            }\n        `,\n    ],\n})\nexport class NavMenuComponent extends BaseClass {\n    public get hidden(): boolean {\n        return this._settings.value('nav.small');\n    }\n\n    public set hidden(value: boolean) {\n        this._settings.post('nav.small', value);\n        this.clearTimeout('entered');\n    }\n\n    public get menu_items(): ApplicationLink[] {\n        return this._settings.get('app.general.menu_items') || [];\n    }\n\n    constructor(private _settings: SettingsService) {\n        super();\n        this.entered();\n    }\n\n    public entered() {\n        this.hidden = false;\n        this.timeout('entered', () => (this.hidden = true), 5 * 1000);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { RouterModule } from '@angular/router';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatBadgeModule } from '@angular/material/badge';\n\nimport { GlobalSearchComponent } from './global-search.component';\nimport { NavMenuComponent } from './nav-menu.component';\nimport { TopbarComponent } from './topbar.component';\nimport { BookingFormModalComponent } from './booking-form-modal.component';\nimport { EventTimelineComponent } from './event-timeline/event-timeline.component';\nimport { VerticalTimelineComponent } from './vertical-timeline/vertical-timeline.component';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nconst COMPONENTS: Type<any>[] = [\n    TopbarComponent,\n    NavMenuComponent,\n    GlobalSearchComponent,\n    BookingFormModalComponent,\n    VerticalTimelineComponent,\n    EventTimelineComponent,\n];\n\nconst MATERIAL_MODULES: any[] = [\n    MatButtonModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatChipsModule,\n    MatRippleModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    MatTabsModule,\n    MatBadgeModule,\n    MatTooltipModule,\n    MatRadioModule,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        RouterModule.forChild([]),\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        FormFieldsModule,\n        ...MATERIAL_MODULES,\n    ],\n    exports: [\n        ...COMPONENTS,\n        ComponentsModule,\n        FormFieldsModule,\n        ...MATERIAL_MODULES,\n    ],\n})\nexport class SharedComponentModule {}\n","import { Component } from '@angular/core';\nimport {\n    ApplicationIcon,\n    currentUser,\n    SettingsService,\n    VERSION,\n} from '@placeos/common';\nimport { logout } from '@placeos/ts-client';\n\n@Component({\n    selector: 'topbar',\n    template: `\n        <div\n            topbar\n            class=\"flex items-center justify-between h-16 bg-secondary border-b border-gray-200 text-white\"\n        >\n            <a\n                logo\n                class=\"p-2 h-full flex items-center\"\n                [routerLink]=\"['/']\"\n                *ngIf=\"logo\"\n            >\n                <img class=\"h-10 sm:h-12\" [src]=\"logo?.src\" />\n            </a>\n            <h2 *ngIf=\"title; else search\">{{ title }}</h2>\n            <a-user-avatar\n                class=\"m-3 text-lg\"\n                [user]=\"user\"\n                [matMenuTriggerFor]=\"menu\"\n            ></a-user-avatar>\n        </div>\n        <mat-menu #menu=\"matMenu\">\n            <div\n                mat-menu-item\n                class=\"flex items-center pointer-events-none leading-tight pl-0\"\n                *ngIf=\"user\"\n            >\n                <a-user-avatar\n                    class=\"m-3 text-lg\"\n                    [user]=\"user\"\n                ></a-user-avatar>\n                <div class=\"flex flex-col\">\n                    <div class=\"text-lg\">{{ user.name }}</div>\n                    <div class=\"text-xs opacity-60\">{{ user.email }}</div>\n                </div>\n            </div>\n            <div\n                mat-menu-item\n                class=\"px-2 h-auto leading-loose pointer-events-none\"\n                *ngIf=\"user\"\n            >\n                <ng-container *ngFor=\"let group of user.groups || []\">\n                    <span\n                        class=\"py-1 px-2 m-1 rounded-2xl text-xs bg-gray-500 text-white\"\n                        *ngIf=\"group\"\n                    >\n                        {{ group }}\n                    </span>\n                </ng-container>\n            </div>\n            <button mat-menu-item (click)=\"logout()\">\n                <div class=\"flex items-center space-x-2\">\n                    <app-icon class=\"text-xl\">logout</app-icon>\n                    <div>Logout</div>\n                </div>\n            </button>\n            <div\n                mat-menu-item\n                class=\"flex flex-col justify-center pointer-events-none leading-tight\"\n            >\n                <div>\n                    Version: <i>{{ version.hash }}</i>\n                </div>\n                <div class=\"text-xs opacity-60\">\n                    {{ version.time | date: 'longDate' }} ~\n                    {{ version.time | date: 'shortTime' }}\n                </div>\n            </div>\n        </mat-menu>\n        <ng-template #search>\n            <global-search class=\"flex-1 mx-2 max-w-[640px]\"></global-search>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class TopbarComponent {\n    public show_menu: boolean;\n\n    /** Application logo to display */\n    public get logo(): ApplicationIcon {\n        return this._settings.get('app.logo_dark');\n    }\n    /** Text to display for page title */\n    public get title(): string {\n        return this._settings.value('page_title');\n    }\n\n    public get user() {\n        return currentUser();\n    }\n\n    public get version() {\n        return VERSION;\n    }\n\n    constructor(private _settings: SettingsService) {}\n\n    public logout() {\n        logout();\n        location.href = '/logout';\n    }\n}\n","<div class=\"timeline\" (window:mouseup)=\"resetMove()\" (window:touchend)=\"resetMove()\">\n    <div class=\"content\" (mousemove)=\"move($event)\" (touchmove)=\"move($event)\">\n        <div class=\"timeblocks\">\n            <div class=\"blk\" *ngFor=\"let item of blocks\">\n                <div class=\"text\" *ngIf=\"item.hour\">{{ item.display }}</div>\n            </div>\n        </div>\n        <div class=\"eventblocks\" #block>\n            <div\n                class=\"blk\"\n                *ngFor=\"let item of blocks\"\n                [class.shown-block]=\"item.show\"\n                [class.hour]=\"item.hour\"\n                [class.disabled]=\"item.disabled\"\n                [class.unavailable]=\"item.unavailable\"\n            ></div>\n            <div\n                class=\"selected-time\"\n                #time\n                [style.top]=\"active_start * 100 + '%'\"\n                [style.height]=\"active_length * 100 + '%'\"\n            >\n                <div class=\"inner\" (mousedown)=\"setMove('top')\" (touchstart)=\"setMove('top')\">\n                    {{ display }}\n                </div>\n                <div\n                    class=\"handle top\"\n                    (mousedown)=\"setMove('top')\"\n                    (touchstart)=\"setMove('top')\"\n                ></div>\n                <div\n                    class=\"handle bottom\"\n                    (mousedown)=\"setMove('bottom')\"\n                    (touchstart)=\"setMove('bottom')\"\n                ></div>\n            </div>\n        </div>\n    </div>\n</div>\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    OnChanges,\n    SimpleChanges,\n} from '@angular/core';\nimport { formatDuration } from 'date-fns';\n\nimport { BaseClass } from '@placeos/common';\n\nimport { ITimelineEventGroup } from '../event-timeline/event-timeline.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'vertical-timeline',\n    templateUrl: './vertical-timeline.component.html',\n    styleUrls: ['./vertical-timeline.component.scss'],\n})\nexport class VerticalTimelineComponent extends BaseClass implements OnInit, OnChanges {\n    /** Active date */\n    @Input() public date: number;\n    /** Active duration */\n    @Input() public duration: number;\n    /** Groups and events */\n    @Input() public groups: ITimelineEventGroup[];\n    /** Blocks */\n    public blocks: any[];\n    /** Element to move */\n    public active_move: string;\n    /** Active start date */\n    public active_start: number;\n    /** Active duration */\n    public active_length: number;\n    /** Offset of time box */\n    public offset = { x: 0, y: 0 };\n\n    /** Output emitter */\n    @Output() public dateChange = new EventEmitter<number>();\n    @Output() public durationChange = new EventEmitter<number>();\n    @Output() public groupsChange = new EventEmitter<ITimelineEventGroup[]>();\n\n    @ViewChild('block') private block: ElementRef;\n    @ViewChild('time') private time: ElementRef;\n\n    public ngOnInit(): void {\n        this.generateBlocks();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.groups) {\n            this.checkInUseBlocks();\n        }\n        if (changes.date || changes.duration) {\n            this.updateStartEnd();\n        }\n    }\n\n    /** Timeline start */\n    public get timeline_start() {\n        return dayjs(this.date).startOf('d');\n    }\n\n    /** Timeline end */\n    public get timeline_end() {\n        return dayjs(this.date).endOf('d');\n    }\n\n    public generateBlocks() {\n        this.blocks = [];\n        const start = this.timeline_start;\n        const end = this.timeline_end;\n        const now = dayjs();\n        for (let time = start; time.isBefore(end, 'm'); time = time.add(5, 'm')) {\n            this.blocks.push({\n                id: time.format('HH:mm'),\n                display: time.format('HH:mm'),\n                hour: time.minute() === 0,\n                show: time.minute() % 30 === 0,\n                disabled: time.isBefore(now, 'm'),\n            });\n        }\n        this.checkInUseBlocks();\n    }\n\n    public get display(): string {\n        const date = dayjs(this.date);\n        const end = dayjs(this.date).add(this.duration, 'm');\n        const duration = formatDuration({ minutes: this.duration });\n        return `${date.format('hh:mm A')} - ${end.format('hh:mm A')} (${duration})`;\n    }\n\n    public move(e) {\n        this.timeout(\n            'move',\n            () => {\n                if (this.active_move && this.block) {\n                    const center = {\n                        x:\n                            e.touches && e.touches.length > 0\n                                ? e.touches[0].clientX || e.clientX\n                                : e.clientX,\n                        y:\n                            e.touches && e.touches.length > 0\n                                ? e.touches[0].clientY || e.clientY\n                                : e.clientY,\n                    };\n                    const off = this.active_move === 'bottom' ? { x: 0, y: 0 } : this.offset;\n                    const content_box = this.block.nativeElement.getBoundingClientRect();\n                    const percent_w = (center.x - off.x - content_box.left) / content_box.width;\n                    const percent_h = (center.y - off.y - content_box.top) / content_box.height;\n                    const percent = percent_h;\n\n                    const start_time =\n                        this.timeline_start.hour() + this.timeline_start.minute() / 60;\n                    const end_time = this.timeline_end.hour() + this.timeline_end.minute() / 60;\n                    const diff_time = end_time - start_time;\n                    const block_size = 15;\n                    const hour =\n                        Math.ceil((diff_time * percent + start_time) * (60 / block_size)) /\n                        (60 / block_size);\n                    if (this.active_move === 'bottom') {\n                        let date = dayjs(this.date);\n                        const end = dayjs(this.date)\n                            .hour(Math.floor(hour))\n                            .minute(Math.floor((hour * 60) % 60));\n                        if (end.isSame(date, 'm') || end.isBefore(date, 'm')) {\n                            date = dayjs(end).add(-this.duration, 'm');\n                            this.date = date.valueOf();\n                        } else {\n                            const duration = Math.floor(end.diff(date, 'm'));\n                            this.duration = Math.max(60, duration || block_size);\n                            this.durationChange.emit(this.duration);\n                        }\n                    } else if (this.active_move === 'top') {\n                        const date = dayjs(this.date)\n                            .hour(Math.floor(hour))\n                            .minute(Math.floor((hour * 60) % 60));\n                        this.date = date.valueOf();\n                    }\n                    this.dateChange.emit(this.date);\n                    this.updateStartEnd();\n                }\n            },\n            10\n        );\n    }\n\n    // public setOffset(e) {\n    // if (this.time) {\n    //     const box = this.time.nativeElement.getBoundingClientRect();\n    //     this.offset = { x: e.center.x - box.left, y: e.center.y - box.top };\n    // }\n    // }\n\n    public setMove(move: string) {\n        this.active_move = move;\n    }\n\n    public checkInUseBlocks() {\n        if (!this.blocks || !this.groups) {\n            return;\n        }\n        const blocks = this.blocks.map((i) => ({\n            ...i,\n            unavailable: false,\n        }));\n        for (const grp of this.groups) {\n            for (const event of grp.events || []) {\n                const start = this.hoursToDate(event.start);\n                const end = dayjs(start).add(event.duration, 'm');\n                for (let time = dayjs(start); time.isBefore(end); time = time.add(5, 'm')) {\n                    const display = time.format('HH:mm');\n                    const blk = blocks.find((i) => i.id === display);\n                    if (blk) {\n                        blk.unavailable = true;\n                    }\n                }\n            }\n        }\n        this.blocks = blocks;\n    }\n\n    public hoursToDate(time: number) {\n        let t = dayjs()\n            .startOf('d')\n            .hour(Math.floor(time))\n            .minute(Math.floor((time * 60) % 60));\n        t = t.minute(Math.floor(t.minute() / 5) * 5);\n        return t;\n    }\n\n    public updateStartEnd() {\n        this.updatePeriod();\n    }\n\n    public resetMove() {\n        this.active_move = '';\n    }\n\n    public updatePeriod() {\n        const start = dayjs(this.date).startOf('m');\n        const period = this.timeline_end.diff(this.timeline_start, 'm') / 60;\n        this.active_start = start.diff(this.timeline_start, 'm') / 60 / period;\n        this.active_length = this.duration / 60 / period;\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ViewerFeature, ViewerStyles } from '@placeos/svg-viewer';\n\nimport { BaseClass } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { Space } from '@placeos/spaces';\nimport { MapPinComponent } from '@placeos/components';\n\nexport interface Locatable {\n    id: string;\n    name: string;\n    map_id: string;\n    level: BuildingLevel;\n}\n\n@Component({\n    selector: 'map-locate-modal',\n    template: `\n        <header class=\"h-12 px-2\">\n            <app-icon>place</app-icon>\n            <h1 class=\"ml-2\">{{ item.name }}</h1>\n        </header>\n        <div\n            body\n            class=\"relative overflow-hidden pointer-events-none\"\n            *ngIf=\"level\"\n        >\n            <i-map\n                [src]=\"level.map_id\"\n                [styles]=\"style_map\"\n                [features]=\"features\"\n            >\n                <mat-spinner diameter=\"64\"></mat-spinner>\n            </i-map>\n            <div\n                class=\"absolute top-2 right-2 py-2 px-4 bg-white rounded-3xl shadow\"\n            >\n                {{ level?.name }}\n            </div>\n        </div>\n        <footer\n            class=\"w-full border-t border-gray-200 flex items-center justify-center p-2\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                Close\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            [body] {\n                width: 80vw;\n                height: 65vh;\n            }\n        `,\n    ],\n})\nexport class MapLocateModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter();\n    /** Space to show the location of on the map */\n    public item: Locatable = this._data.item;\n    /** Features of the map */\n    public features: ViewerFeature[];\n    /** Mapping of elements to CSS styles */\n    public style_map: ViewerStyles = {};\n\n    public get level(): BuildingLevel {\n        return this.item.level;\n    }\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: { item: Locatable }) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.processFeature();\n        this.processStyles();\n    }\n\n    public processStyles(): void {\n        const styles: ViewerStyles = {};\n        if (this.item?.map_id) {\n            styles[`#zones`] = { display: 'none' };\n            styles[`#Zones`] = { display: 'none' };\n        }\n        this.style_map = styles;\n    }\n\n    /** Point on map to focus on */\n    public processFeature(): void {\n        if (!this.item) return null;\n        const focus = {\n            location: this.item.map_id,\n            content: MapPinComponent,\n            data: {\n                name: this.item.name,\n            },\n            zoom: 100,\n        };\n        this.features = [focus];\n    }\n}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), []);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nexport const ZONE_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/zones',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.tags === 'org') {\n                return MOCK_ORGS;\n            } else if (request.query_params.tags === 'building') {\n                return MOCK_BUILDINGS;\n            } else if (request.query_params.tags === 'level') {\n                return MOCK_LEVELS;\n            }\n            throw { status: 404, message: 'Zones not found' };\n        },\n    });\n\n    function padString(str: string | number, length: number = 5) {\n        str = `${str}`;\n        while (str.length < length) str = `0${str}`;\n        return str;\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.name === 'bindings') {\n                return {\n                    bindings: {\n                        details: {\n                            area_management: 'space-0',\n                            location_services: 'space-0',\n                        },\n                    },\n                };\n            }\n            if (request.query_params.name === 'catering') {\n                return {\n                    catering: {\n                        details: MOCK_MENU,\n                    },\n                };\n            }\n            if (request.query_params.name === 'desks') {\n                const parts = request.route_params.id.split('-');\n                const id = parts[parts.length - 1];\n                return generateMockDeskMetadata(id);\n            }\n            if (\n                MOCK_METADATA[request.route_params.id] &&\n                MOCK_METADATA[request.route_params.id][\n                    request.query_params.name\n                ]\n            ) {\n                return MOCK_METADATA[request.route_params.id];\n            } else if (\n                MOCK_METADATA[request.route_params.id] &&\n                !request.query_params.name\n            ) {\n                return MOCK_METADATA[request.route_params.id] || {};\n            }\n            return {};\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            if (!MOCK_METADATA[request.route_params.id])\n                MOCK_METADATA[request.route_params.id] = {};\n            MOCK_METADATA[request.route_params.id][request.body.name] =\n                request.body;\n        },\n    });\n\n    const DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\n    function generateMockDeskMetadata(id: string) {\n        return {\n            desks: {\n                details: new Array(30).fill(0).map((_, idx) => ({\n                    id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                    name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                    bookable: predictableRandomInt(9999) % 4 !== 0,\n                    group: '',\n                    features: DESK_FEATURES.filter(\n                        (_) => predictableRandomInt(99999) % 3 === 0\n                    ),\n                })),\n            },\n        };\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id/children',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const zone = MOCK_BUILDINGS.find(\n                (_) => _.id === request.route_params.id\n            );\n            if (!zone)\n                throw {\n                    status: 404,\n                    message: `Unable to find zone with id \"${request.route_params.id}\"`,\n                };\n            return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map(\n                (lvl) => {\n                    const parts = lvl.id.split('-');\n                    const id = parts[parts.length - 1];\n                    return {\n                        zone: lvl,\n                        metadata: generateMockDeskMetadata(id),\n                    };\n                }\n            );\n        },\n    });\n}\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nexport const USER_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/users/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.id === 'current') {\n                return ACTIVE_USER;\n            }\n            const person = MOCK_STAFF.find(\n                (user) => user.email === request.route_params.id\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_STAFF.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const id = decodeURIComponent(request.route_params.id);\n            const person = MOCK_STAFF.find((user) => user.email === id);\n            if (person) {\n                return {\n                    ...person,\n                    location: generateLocation(),\n                };\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_GUESTS.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const person = MOCK_GUESTS.find(\n                (user) => user.email === request.route_params.email\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email/meetings',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.email) {\n                const email = request.route_params.email.toLowerCase();\n                const events = MOCK_EVENTS.filter((event) =>\n                    event.attendees.find(\n                        (user) => user.email.toLowerCase() === email\n                    )\n                );\n                return events;\n            }\n            throw {\n                status: 404,\n                message: `Unable to find meetings with guest with email ${request.route_params.email}`,\n            };\n        },\n    });\n\n    const LOCATION_TYPES = [\n        'meeting',\n        'desk_id',\n        'laptop',\n        'mobile',\n        'geo',\n        'none',\n    ];\n\n    function generateLocation() {\n        const type =\n            LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n        const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n        const level_spaces = MOCK_SPACES.filter((s) =>\n            s.zones.includes(level.id)\n        );\n        const space =\n            level_spaces[predictableRandomInt(level_spaces.length)] || {};\n        const location: HashMap = {};\n        switch (type) {\n            case 'meeting':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    system: space.id,\n                    map_id: space.map_id,\n                    event_id: '',\n                };\n                break;\n            case 'desk_id':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    map_id: space.map_id,\n                    checked_in: dayjs().unix(),\n                };\n                break;\n            case 'laptop':\n            case 'mobile':\n                location[type] = {\n                    building: level.parent_id,\n                    level: level.id,\n                    x: +predictableRandomInt(10000),\n                    y: +predictableRandomInt(5000),\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n            case 'geo':\n                location.geo = {\n                    lat: predictableRandomInt(180) - 90,\n                    lon: predictableRandomInt(360) - 180,\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n        }\n        return location;\n    }\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $powerup() {\n        console.log('Power On');\n        this.active = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.active = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nexport const SYSTEM_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    MOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/systems',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            return MOCK_SPACES;\n        },\n    });\n}\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const EVENT_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            let events = MOCK_EVENTS;\n            if (!_.query_params.zone_ids) {\n                events = events.filter(\n                    (event) =>\n                        !!event.attendees.find(\n                            (user) => user.email === ACTIVE_USER.email\n                        )\n                );\n            }\n            if (_.query_params.period_start) {\n                events = events.filter((e) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        e.event_start,\n                        e.event_end\n                    )\n                );\n            }\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-cal-event-${predictableRandomInt(999)}`,\n            };\n            new_event.attendees = [\n                MOCK_STAFF.find((_) => _.email === new_event.host),\n                ...(new_event.attendees || []),\n            ];\n            new_event.attendees.forEach((user) => {\n                if (user.zones) user.resource = true;\n            });\n\n            if (new_event.system) {\n                new_event.attendees = [\n                    ...(new_event.attendees || []),\n                    { ...new_event.system, resource: true },\n                ];\n            }\n            MOCK_EVENTS.push(new_event);\n            return new_event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const item = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (item) {\n                return item;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index > 0) {\n                if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                    MOCK_EVENTS.splice(index, 1);\n                } else {\n                    const user = MOCK_EVENTS[index].attendees.find(\n                        (_) => _.email === ACTIVE_USER.email\n                    );\n                    user.response_status = 'declined';\n                }\n                return;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index >= 0) {\n                return MOCK_EVENTS.splice(index, 1, request.body);\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id/guests/:email/checkin',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const event = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (event) {\n                const checked_in =\n                    (event.extension_data as any).checked_in || [];\n                (event.extension_data as any).checked_in = checked_in.concat([\n                    request.route_params.email,\n                ]);\n                return event;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n}\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport { timePeriodsIntersect } from '@placeos/common';\n\nexport const CALENDAR_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => [],\n    });\n\n    const handleSpaceAvailability = (request) => {\n        const start = +request.query_params.period_start;\n        const end = +request.query_params.period_end;\n        const zones = (request.query_params.zone_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n        const systems = (request.query_params.system_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n\n        const spaces = MOCK_SPACES.filter((space) =>\n            zones.length\n                ? zones.reduce(\n                      (has, zone) => has && space.zones.includes(zone),\n                      true\n                  )\n                : systems.length\n                ? systems.includes(space.id)\n                : true\n        ).filter((space) => {\n            const bookings = MOCK_EVENTS.filter((event) =>\n                event.attendees.find((user) => user.id === space.id)\n            );\n            for (const event of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        start,\n                        end,\n                        event.event_start,\n                        event.event_end\n                    )\n                )\n                    return false;\n            }\n            return true;\n        });\n        return spaces;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/availability',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/free_busy',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n}\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { log } from '@placeos/common';\n\nimport { ZONE_MOCKS } from './lib/api/zones.mock';\nimport { USER_MOCKS } from './lib/api/users.mock';\nimport { SYSTEM_MOCKS } from './lib/api/systems.mock';\nimport { EVENT_MOCKS } from './lib/api/events.mock';\nimport { CALENDAR_MOCKS } from './lib/api/calendars.mock';\nimport { BOOKING_MOCKS } from './lib/api/bookings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nexport const BOOKING_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const events = MOCK_BOOKINGS.filter(\n                (event) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        event.booking_start,\n                        event.booking_end\n                    ) && event.type === _.query_params.type\n            );\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n            if (!event)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${_.route_params.id}`,\n                };\n            return event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-booking-${predictableRandomInt(999)}`,\n            };\n            MOCK_BOOKINGS.push(new_event);\n            return new_event;\n        },\n    });\n\n    const updateBooking = (id, data) => {\n        const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${id}`,\n            };\n        const new_event = { ...data };\n        MOCK_BOOKINGS.splice(index, 1, new_event);\n        return new_event;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'PUT',\n        callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/approve',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: true,\n                rejected: false,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/reject',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: false,\n                rejected: true,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/check_in',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                checked_in: req.query_params.state === 'true',\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (req) => {\n            const index = MOCK_BOOKINGS.findIndex(\n                (e) => e.id === req.route_params.id\n            );\n            if (index < 0)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${req.route_params.id}`,\n                };\n            MOCK_BOOKINGS.splice(index, 1);\n            return;\n        },\n    });\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n    log,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        log('APP', 'MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 15 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                currentUser()?.email?.split('@')[1]\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n    AuthorisedUserGuard,\n    MisconfiguredComponent, UnauthorisedComponent\n} from '@placeos/components';\n\n\nconst routes: Routes = [\n    { path: 'unauthorised', component: UnauthorisedComponent },\n    { path: 'misconfigured', component: MisconfiguredComponent },\n    {\n        path: 'dashboard',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./dashboard/dashboard.module').then(\n                (m) => m.DashboardModule\n            ),\n    },\n    {\n        path: 'book',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./book/book.module').then((m) => m.BookModule),\n    },\n    {\n        path: 'explore',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./explore/explore.module').then((m) => m.ExploreModule),\n    },\n    {\n        path: 'control',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./control/control.module').then((m) => m.ControlModule),\n    },\n    {\n        path: 'directory',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./directory/directory.module').then(\n                (m) => m.DirectoryModule\n            ),\n    },\n    {\n        path: 'schedule',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./schedule/schedule.module').then((m) => m.AppScheduleModule),\n    },\n    {\n        path: 'help',\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n        loadChildren: () =>\n            import('./help/help.module').then((m) => m.HelpModule),\n    },\n    { path: '**', redirectTo: 'dashboard', pathMatch: 'full' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MapLocateModalComponent } from './map-locate-modal.component';\n\nimport { ViewAttendeesModalComponent } from './view-attendees-modal/view-attendees-modal.component';\nimport { ViewCateringModalComponent } from './view-catering-modal/view-catering-modal.component';\nimport { RecurrenceModalComponent } from './recurrence-modal.component';\nimport { UserAvailabilityModalComponent } from './user-availability-modal/user-availability.modal.component';\nimport { SharedComponentModule } from '../components/shared.module';\n\nconst OVERLAYS: Type<any>[] = [\n    MapLocateModalComponent,\n    ViewAttendeesModalComponent,\n    ViewCateringModalComponent,\n    RecurrenceModalComponent,\n    UserAvailabilityModalComponent,\n];\n\n@NgModule({\n    declarations: [...OVERLAYS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SharedComponentModule,\n    ],\n    exports: [...OVERLAYS],\n})\nexport class SharedOverlaysModule {}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatNativeDateModule } from '@angular/material/core';\n\nimport {\n    MisconfiguredComponent,\n    UnauthorisedComponent,\n} from '@placeos/components';\nimport { AppComponent } from 'libs/components/src/lib/app.component';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { environment } from '../environments/environment';\nimport { SharedOverlaysModule } from './overlays/overlays.module';\n\nimport * as Sentry from '@sentry/angular';\n\nimport { SharedComponentModule } from './components/shared.module';\n\n@NgModule({\n    declarations: [AppComponent, UnauthorisedComponent, MisconfiguredComponent],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n        HttpClientModule,\n        FormsModule,\n        SharedOverlaysModule,\n        SharedComponentModule,\n        MatNativeDateModule,\n        MatSnackBarModule,\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export const environment = {\n  production: true,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, SettingsService } from '@placeos/common';\nimport { BuildingLevel, Desk } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\nexport interface DeskConfirmModalData {\n    host: User;\n    desks: Desk[];\n    date: number;\n    reason: string;\n    level: BuildingLevel;\n    can_set_date: boolean;\n}\n\n@Component({\n    selector: 'desk-flow-confirm-modal-component',\n    template: `\n        <header>\n            <h2>Confirm Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <i class=\"material-icons\">close</i>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"p-4\">\n                <div host class=\"flex flex-col\" *ngIf=\"can_set_host\">\n                    <label>Host</label>\n                    <a-user-search-field\n                        [(ngModel)]=\"host\"\n                    ></a-user-search-field>\n                </div>\n                <div date class=\"mb-4\">\n                    <label>Date</label>\n                    <div *ngIf=\"!can_set_date\">\n                        {{ date | date: 'mediumDate' }}\n                    </div>\n                    <a-date-field\n                        *ngIf=\"can_set_date\"\n                        [(ngModel)]=\"date\"\n                    ></a-date-field>\n                </div>\n                <div reason class=\"flex flex-col mb-4\" *ngIf=\"!hide_reason\">\n                    <label>Reason</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"reason\"\n                            placeholder=\"Reason\"\n                        />\n                    </mat-form-field>\n                </div>\n                <p>\n                    Your desk{{ desks.length === 1 ? '' : 's' }} will be\n                    {{ desk_list }} on\n                    {{ level?.display_name || level?.name }}\n                </p>\n            </main>\n            <footer class=\"flex items-center justify-center p-2\">\n                <button mat-button (click)=\"confirm()\">Confirm</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main load class=\"flex flex-col p-12 items-center justify-center\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n        `,\n    ],\n})\nexport class DeskConfirmModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly desks = this._data.desks || [];\n\n    public date = this._data.date;\n    public host = this._data.host;\n\n    public readonly can_set_date = this._data.can_set_date;\n\n    public reason = this._data.reason;\n\n    public readonly level = this._data.level;\n\n    public loading: string;\n\n    public get desk_list() {\n        return this.desks.map((_) => _.name).join(', ');\n    }\n\n    public get hide_reason() {\n        return !!this._settings.get('app.desks.hide_reason');\n    }\n\n    public get can_set_host() {\n        return !!this._settings.get('app.desks.can_set_host');\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskConfirmModalData,\n        private _settings: SettingsService\n    ) {}\n\n    public confirm() {\n        this.loading = 'Requesting desk booking...';\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.booking_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 2), {\n                        nearestTo: 5,\n                    })\n            );\n        this.booking_end =\n            data.booking_end ||\n            getUnixTime(addMinutes(this.booking_start * 1000, data.duration || 60));\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(differenceInMinutes(\n                this.booking_start * 1000,\n                this.booking_end * 1000\n            ));\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? true;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (\n                                        _.metadata.desks?.details || []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const asset of assets) {\n                asset.features?.forEach((_) => list.push(_));\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find((bkn) => bkn.asset_id === asset.id)\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content: `Would you like to book the ${options.type} ${\n                    form.get('asset_id').value\n                } for ${format(form.get('date').value, 'dd MMM yyyy')}`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Performing booking request...');\n        await this.postForm().catch((_) => {\n            notifyError(_);\n            details.close();\n            throw _;\n        });\n        details.close();\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const asset_id = form.get('asset_id').value;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(form.get('date').value),\n            period_end: getUnixTime(\n                form.get('date').value + form.get('duration').value * 60 * 1000\n            ),\n            type: this._options.getValue().type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id))\n            throw `${asset_id} is not available at the selected time`;\n        if (\n            bookings.find(\n                (_) =>\n                    _.user_email ===\n                    (form.value.user_email || currentUser()?.email)\n            )\n        )\n            throw `You already have a desk booked`;\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        this.clearForm();\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    private async checkQuestions() {\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n}\n","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { StaffUser, User } from '@placeos/users';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { BaseClass, notifyError } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends BaseClass {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = this._calendars.asObservable();\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(private _org: OrganisationService) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        await this.load().catch((err) =>\n            notifyError('Error loading calendars data')\n        );\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n\n    public async load(): Promise<void> {\n        this._calendars.next(await queryCalendars().toPromise());\n    }\n}\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","/**\n * GENERAL APPLICATION SETTINGS\n */\nconst general: any = {\n    menu_items: [\n        {\n            name: 'Home',\n            route: '/dashboard',\n            icon: {\n                class: 'material-icons',\n                content: 'home',\n            },\n        },\n        {\n            name: 'Book',\n            route: '/book/spaces',\n            icon: {\n                class: 'material-icons',\n                content: 'book_online',\n            },\n        },\n        {\n            name: 'Scan',\n            route: '/book/code',\n            icon: {\n                class: 'material-icons',\n                content: 'qr_code',\n            },\n        },\n        {\n            name: 'Desk',\n            route: '/book/desks',\n            icon: {\n                class: 'material-icons',\n                content: 'dashboard_customize',\n            },\n        },\n        {\n            name: 'Spaces',\n            route: '/explore',\n            icon: {\n                class: 'material-icons',\n                content: 'place',\n            },\n        },\n        {\n            name: 'People',\n            route: '/directory',\n            icon: {\n                class: 'material-icons',\n                content: 'person_search',\n            },\n        },\n        {\n            name: 'Help',\n            route: '/help',\n            icon: {\n                class: 'material-icons',\n                content: 'help',\n            },\n        },\n        {\n            name: 'My Day',\n            route: '/schedule',\n            icon: {\n                class: 'material-icons',\n                content: 'date_range',\n            },\n        },\n        // {\n        //     name: 'Wellness',\n        //     route: '/schedule',\n        //     icon: {\n        //         class: 'material-icons',\n        //         content: 'mood',\n        //     },\n        // },\n    ],\n    copyright: 'PlaceOS',\n    position: 'right',\n};\n/**\n * HELP/SUPPORT SETTINGS\n */\nconst help: any = {\n    tiles: [\n        {\n            name: 'About Engine',\n            link: 'https://place.technology/resources',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'dns',\n            },\n            background:\n                'https://static1.squarespace.com/static/52142586e4b0c09536a144ad/5c8ed203a4222fa1927bbab3/5cb7cba66e9a7f63584b4d39/1555549341622/too-many-buttons.jpg?format=2500w',\n        },\n        {\n            name: 'General Enquiries',\n            link: 'mailto:equiries@place.technology?subject=Staff%20App%20Demo',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'mail',\n            },\n            background: 'assets/img/it-banner.jpg',\n        },\n        {\n            name: 'Contact PlaceOS',\n            link: 'https://place.technology/contact-1',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'call',\n            },\n            background:\n                'https://images.squarespace-cdn.com/content/v1/52142586e4b0c09536a144ad/1569984759306-M6ZOKD64OG009U68MYUL/ke17ZwdGBToddI8pDm48kCX-V5vw-8h9IBXN10-_8XN7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0p4Wyba38KfG317vYluk45_zZdtnDCZTLKcP2mivxmYi50xvY5saIGKMgOza9mH4XA/image-asset.jpeg?format=2500w',\n        },\n        {\n            name: 'About Us',\n            link: 'https://place.technology/',\n            icon: {\n                type: 'icon',\n                class: 'material-icons',\n                content: 'business',\n            },\n            background:\n                'https://images.squarespace-cdn.com/content/v1/52142586e4b0c09536a144ad/1569985184499-QF839PTJ2EV30KIZF59X/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/image-asset.jpeg?format=2500w',\n        },\n    ],\n    columns: 2,\n};\n/**\n * BOOKING FLOW SETTINGS\n */\nconst booking: any = {\n    booking_types: [\n        { display: 'Internal', value: 'internal' },\n        { display: 'Client', value: 'client' },\n        { display: 'External', value: 'external' },\n        { display: 'Setup', value: 'setup' },\n        { display: 'Training', value: 'training' },\n        { display: 'Interview', value: 'interview' },\n    ],\n    los_groups: {\n        ifs: 'Internal Firm Services',\n        deals: 'Deals',\n        assurance: 'Assurance',\n        tax: 'Tax',\n        consulting: 'Consulting',\n        ladies: 'Ladies',\n        it: 'IT',\n    },\n    capacity_filters: [\n        { display: '< 10', value: '0' },\n        { display: '10 - 15', value: '10' },\n        { display: '16 - 20', value: '16' },\n        { display: '21 - 25', value: '21' },\n        { display: '> 25', value: '26' },\n    ],\n    show_fields: [\n        'attendees',\n        'body',\n        'catering',\n        'date',\n        'duration',\n        'organiser',\n        'recurrence',\n        'title',\n        'type',\n        'configuration',\n    ],\n    html_body: true,\n    multiple_spaces: false,\n    desk_start: 9,\n    breakdown: 15,\n};\n/*===========================*\\\n||  SPACE LISTING SETTINGS   ||\n\\*===========================*/\nconst space_display: any = {\n    show_images: false,\n};\n/*===========================*\\\n||  USER DIRECTORY SETTINGS  ||\n\\*===========================*/\nconst directory: any = {\n    show_avatars: true,\n    min_search_length: 3,\n};\n/*===========================*\\\n||    SCHEULDE SETTINGS   ||\n\\*===========================*/\nconst schedule = {\n    legend: [\n        { name: 'Accepted', color: '#21A453' },\n        { name: 'Pending', color: '#ffbf1f' },\n        { name: 'Rejected', color: '#f44336' },\n    ],\n};\n/*===========================*\\\n||    EXPLORE MAP SETTINGS   ||\n\\*===========================*/\nconst explore: any = {\n    colors: {\n        'space-free': '#43a047',\n        'space-pending': '#ffb300',\n        'space-busy': '#e53935',\n        'space-not-bookable': '#ccc',\n        'space-unknown': '#000',\n        // 'desk-available': '#43a047',\n        // 'desk-available-stroke': '#1b5e20',\n        // 'desk-unavailable': '#e53935',\n        // 'desk-unavailable-stroke': '#b71c1c',\n        // 'desk-reserved': '#ffb300',\n        // 'desk-reserved-stroke': '#ff6f00',\n        // 'desk-not-bookable': '#fff',\n        // 'desk-not-bookable-stroke': '#ccc',\n        'zone-low': '#43a047',\n        'zone-medium': '#ffb300',\n        'zone-high': '#e53935',\n    },\n    can_select_building: true,\n    show_legend_group_names: true,\n    legend: {\n        Spaces: [\n            { key: 'space-free', name: 'Space Available' },\n            { key: 'space-pending', name: 'Space Pending' },\n            { key: 'space-busy', name: 'Space in Use' },\n            { key: 'space-not-bookable', name: 'Space not Bookable' },\n            { key: 'space-unknown', name: 'Unknown' },\n        ],\n    },\n};\n/**\n * ROOT APPLICATION SETTINGS\n */\nconst app: any = {\n    name: 'Workplace',\n    title: 'Workplace Application',\n    description: 'PlaceOS Workplace UI written with Angular Framework',\n    short_name: 'STAFF',\n    logo_light: {\n        type: 'img',\n        src: 'assets/logo-light.svg',\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg',\n    },\n    general,\n    help,\n    booking,\n    space_display,\n    directory,\n    explore,\n    analytics: {\n        enabled: true,\n        tracking_id: '',\n    },\n    schedule,\n};\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS: any = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/staff',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app,\n};\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"a47e9b0\",\n    \"hash\": \"a47e9b0\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"a47e9b0\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1628044934906\n};\n/* tslint:enable */\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","\nimport { format } from 'date-fns';\n\nimport { RecurrenceDetails } from '@placeos/events';\n\nexport function formatRecurrence(details: RecurrenceDetails): string {\n    let pattern: string = details.pattern || '';\n    pattern = pattern.charAt(0).toUpperCase() + pattern.slice(1);\n    return pattern ? `${pattern} until ${format(new Date(details.end), 'do MMM yyyy')}` : '<No Recurrence>';\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPinData {\n    message: string;\n    fill: string;\n    stroke: string;\n    action?: () => void;\n}\n\n@Component({\n    selector: '[map-pin]',\n    template: `\n        <div\n            name=\"message\"\n            *ngIf=\"message && show_message\"\n            class=\"p-2 m-2 rounded bg-white text-gray-700 shadow\"\n        >\n            {{ message }}\n        </div>\n        <svg\n            *ngIf=\"show\"\n            name=\"pin\"\n            viewBox=\"0 0 380 560\"\n            [class.action]=\"action\"\n            (click)=\"action()\"\n        >\n            <g>\n                <path\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                    stroke-width=\"25\"\n                    d=\"M182.9,551.7c0,0.1,0.2,0.3,0.2,0.3S358.3,283,358.3,194.6c0-130.1-88.8-186.7-175.4-186.9\n            C96.3,7.9,7.5,64.5,7.5,194.6c0,88.4,175.3,357.4,175.3,357.4S182.9,551.7,182.9,551.7z M122.2,187.2c0-33.6,27.2-60.8,60.8-60.8\n            c33.6,0,60.8,27.2,60.8,60.8S216.5,248,182.9,248C149.4,248,122.2,220.8,122.2,187.2z\"\n                />\n            </g>\n        </svg>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                bottom: 0;\n                left: 50%;\n                width: 24rem;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                transform: translateX(-50%);\n                z-index: -1;\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            .action {\n                pointer-events: auto;\n            }\n\n            svg {\n                width: 2rem;\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translateY(-100%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translateY(0%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapPinComponent implements OnInit {\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#fff';\n    /** Action to perform when clicking pin */\n    public readonly action = this._details.action || null;\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(@Inject(MAP_FEATURE_DATA) private _details: MapPinData) {}\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapRadiusData {\n    message: string;\n    radius: number;\n    fill: string;\n    stroke: string;\n    last_seen?: number;\n    zoom: Observable<number>;\n}\n\n@Component({\n    selector: '[map-radius]',\n    template: `\n        <ng-container *ngIf=\"show && radius\" (window:resize)=\"updateRadius()\">\n            <div\n                class=\"center border-4 rounded-full border-dashed\"\n                [style.border-color]=\"stroke\"\n                [style.background-color]=\"fill + '40'\"\n                [style.width]=\"radius * zoom + 'px'\"\n                [style.height]=\"radius * zoom + 'px'\"\n            ></div>\n            <div\n                *ngIf=\"message && show_message\"\n                name=\"message\"\n                [style.top]=\"'-' + (radius / 2) * zoom + 'px'\"\n                class=\"p-2 m-2 rounded bg-white text-gray-700 shadow absolute top-0 whitespace-no-wrap flex flex-col\"\n            >\n                {{ message }}\n                <span *ngIf=\"last_seen\" class=\"text-xs\">\n                    Last updated: {{ last_seen_at }}\n                </span>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                height: 100%;\n                width: 100%;\n            }\n\n            [name='message'] {\n                transform: translate(-50%, -120%);\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translate(-50%, -220%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translate(-50%, -120%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapRadiusComponent implements OnInit {\n    public zoom = 1;\n    /** Size of the area marked by this component */\n    public radius = this._details.radius || 10;\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#e53935';\n\n    public readonly last_seen: number = this._details.last_seen || 0;\n\n    public get last_seen_at() {\n        return formatDistanceToNow(this.last_seen * 1000) + ' ago';\n    }\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapRadiusData,\n        private _el: ElementRef<HTMLElement>\n    ) {\n        this._details.zoom.subscribe((v) =>\n            Math.max(0.5, (this.zoom = v || 1))\n        );\n    }\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n\n    public ngAfterViewInit() {\n        this.updateRadius();\n    }\n\n    public updateRadius() {\n        const box = this._el.nativeElement.getBoundingClientRect();\n        if (!box.width) return setTimeout(() => this.updateRadius(), 300);\n        this.radius = Math.max(\n            64,\n            (this._details.radius || 10) * (box.width || 10)\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    ApplicationIcon,\n    BaseClass,\n    SettingsService,\n} from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-login',\n    template: `\n        <div class=\"fixed inset-0 overflow-auto\">\n            <form\n                class=\"flex flex-col items-center overflow-hidden mx-auto my-4 bg-white rounded shadow p-4\"\n            >\n                <div\n                    class=\"flex items-center justify-center\"\n                    [style.background-color]=\"logo?.background\"\n                >\n                    <i *ngIf=\"logo?.type === 'icon'\" [class]=\"logo.class\">\n                        {{ logo.content }}\n                    </i>\n                    <img\n                        *ngIf=\"logo?.type === 'img'\"\n                        [src]=\"logo.src | safe: 'resource'\"\n                    />\n                </div>\n                <div class=\"w-full relative h-1/3 flex-1\">\n                    <ng-container *ngIf=\"!loading; else loading_state\">\n                        <div class=\"flex flex-col\">\n                            <label\n                                for=\"username\"\n                                [class.focused]=\"\n                                    username || focus === 'username'\n                                \"\n                                [class.in-focus]=\"focus === 'username'\"\n                            >\n                                Username\n                            </label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    #username\n                                    formControlName=\"username\"\n                                    (keyup.enter)=\"toPassword()\"\n                                />\n                            </mat-form-field>\n                        </div>\n                        <div class=\"flex flex-col\">\n                            <label for=\"password\">Password</label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    #pass_field\n                                    formControlName=\"password\"\n                                    (keyup.enter)=\"login()\"\n                                />\n                                <mat-error>Invalid username or password</mat-error>\n                            </mat-form-field>\n                        </div>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center justify-center w-full\" *ngIf=\"!loading\">\n                    <button mat-button color=\"primary\" (click)=\"login()\">\n                        Login\n                    </button>\n                </div>\n            </form>\n        </div>\n        <ng-template #loading_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"64\"></mat-spinner>\n                <p>Checking user credentials...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                background-color: #f0f0f0;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='64' height='64' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M8 16c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm0-2c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6zm33.414-6l5.95-5.95L45.95.636 40 6.586 34.05.636 32.636 2.05 38.586 8l-5.95 5.95 1.414 1.414L40 9.414l5.95 5.95 1.414-1.414L41.414 8zM40 48c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm0-2c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6zM9.414 40l5.95-5.95-1.414-1.414L8 38.586l-5.95-5.95L.636 34.05 6.586 40l-5.95 5.95 1.414 1.414L8 41.414l5.95 5.95 1.414-1.414L9.414 40z' fill='%23ad1457' fill-opacity='0.2' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n\n            form {\n                width: 20rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            img {\n                max-height: 3.75rem;\n                max-width: 15rem;\n            }\n        `,\n    ],\n})\nexport class LoginComponent implements OnInit {\n    /** Whether the user credentials are being checked */\n    public loading: boolean;\n\n    public readonly form = new FormGroup({\n        username: new FormControl('', [Validators.required]),\n        password: new FormControl('', [Validators.required]),\n    });\n\n    /** Password field element */\n    @ViewChild('pass_field', { static: true })\n    private pwd_field: ElementRef<HTMLInputElement>;\n\n    /** Logo of the application organisation */\n    public get logo(): ApplicationIcon {\n        return this._settings.get('app.logo_dark') || { type: 'icon' };\n    }\n\n    constructor(private _settings: SettingsService) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        this.loading = false;\n    }\n\n    /** Focus on the password field */\n    public toPassword() {\n        if (this.pwd_field && this.pwd_field.nativeElement) {\n            this.pwd_field.nativeElement.focus();\n        }\n    }\n\n    /** Perform user login */\n    public login() {\n        this.loading = true;\n        // this._users.login({\n        //     username: this.username,\n        //     password: this.password\n        // }, { form: true }).then(() => {\n        //     this.loading = false;\n        // }, () => {\n        //     this.loading = false;\n        //     this.error = true;\n        // });\n        this.form.setErrors({ password: 'Invalid username or password' });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-unauthorised',\n    template: `\n        <div\n            class=\"unauthorised rounded m-4 text-center bg-white text-black border border-gray-400 p-4 shadow\"\n        >\n            <h1 class=\"text-4xl\">403</h1>\n            <h3 class=\"text-2xl\" i18n=\"@@forbiddenLabel\">Access forbidden.</h3>\n            <p class=\"py-4\" i18n=\"@@invalidPermissionLabel\">\n                You do not have permission to view this page and your access\n                attempt has been recorded.\n            </p>\n            <p i18n=\"@@contactAdminLabel\">\n                Contact your Administrator if you feel that you should have\n                access.\n            </p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            .unauthorised {\n                width: 28em;\n                max-width: calc(100vw - 1rem);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .unauthorised {\n                    background-color: #262626;\n                    color: #fff;\n                }\n            }\n        `,\n    ],\n})\nexport class UnauthorisedComponent {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-misconfigured',\n    template: `\n        <div\n            content\n            class=\"rounded m-4 text-center bg-white text-black border border-gray-400 p-4 shadow\"\n        >\n            <h3 class=\"text-2xl\" i18n=\"@@forbiddenLabel\">\n                Application Misconfigured.\n            </h3>\n            <p class=\"py-4\" i18n=\"@@invalidPermissionLabel\">\n                This application requires a zone of type org, building and level\n                to operate.\n            </p>\n            <p i18n=\"@@contactAdminLabel\">\n                If this issue persists please contact your administrator.\n            </p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            [content] {\n                width: 28em;\n                max-width: calc(100vw - 1rem);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                [content] {\n                    background-color: #262626;\n                    color: #fff;\n                }\n            }\n        `,\n    ],\n})\nexport class MisconfiguredComponent {}\n","import { Injectable, Optional } from '@angular/core';\nimport {\n    CanActivate,\n    CanLoad,\n    Route,\n    UrlSegment,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n    Router,\n} from '@angular/router';\nimport { onlineState } from '@placeos/ts-client';\nimport { current_user } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nexport abstract class PLACEOS_APP_ACCESS {\n    public readonly group: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorisedUserGuard implements CanActivate, CanLoad {\n    constructor(\n        private _router: Router,\n        @Optional() private _access: PLACEOS_APP_ACCESS\n    ) {}\n\n    public async canActivate(\n        next?: ActivatedRouteSnapshot,\n        state?: RouterStateSnapshot\n    ): Promise<boolean | UrlTree> {\n        return this.checkUser();\n    }\n\n    public async canLoad(\n        route?: Route,\n        segments?: UrlSegment[]\n    ): Promise<boolean> {\n        return this.checkUser();\n    }\n\n    private async checkUser() {\n        await onlineState()\n            .pipe(first((_) => _))\n            .toPromise();\n        const user: StaffUser = await current_user\n            .pipe(first((_) => !!_))\n            .toPromise();\n        const can_activate = !!(\n            user &&\n            (!this._access?.group || user.groups.includes(this._access.group))\n        );\n        if (!can_activate) {\n            this._router.navigate(['/unauthorised']);\n        }\n        return !!can_activate;\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MapPolygonComponent } from './map-polygon.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    MapPolygonComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Injectable,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\n@Injectable()\nexport class CustomTooltipData<T = any> {\n    data: T;\n    close: () => void;\n    constructor(d) {\n        this.data = d.data;\n        this.close = d.close || (() => null);\n    }\n}\n\n@Component({\n    selector: '[customTooltip]',\n    template: `\n        <ng-content></ng-content>\n\n        <ng-template cdk-portal>\n            <div custom-tooltip class=\"relative\" [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'component'\">\n                    <ng-container\n                        *ngComponentOutlet=\"content; injector: injector\"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'html'\">\n                    <div [innerHTML]=\"content | sanitize\"></div>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <ng-container\n                        *ngTemplateOutlet=\"content; context: data\"\n                    ></ng-container>\n                </ng-container>\n            </div>\n        </ng-template>\n    `,\n})\nexport class CustomTooltipComponent<T = any>\n    extends BaseClass\n    implements OnChanges, OnDestroy {\n    /** Horizontal position of the rendered overlay */\n    @Input('xPosition') public x_pos: 'start' | 'center' | 'end';\n    /** Vertical position of the rendered overlay */\n    @Input('yPosition') public y_pos: 'top' | 'center' | 'bottom';\n    /** Content to render in the tooltip */\n    @Input() public content: TemplateRef<any> | Type<any> | string;\n    /** Data associated with the tooltip content */\n    @Input() public data: T;\n    /** Whether tooltip has a backdrop */\n    @Input() public backdrop = true;\n    /** Whether tooltip has a backdrop */\n    @Input() public hover = false;\n    /** Type of content to render */\n    public type: 'template' | 'component' | 'html' = 'template';\n\n    public injector: Injector;\n\n    private _overlay_ref: OverlayRef = null;\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('click') public readonly onClick = () => this.open();\n    @HostListener('mouseenter') public readonly onEnter = () =>\n        this.hover ? this.open() : '';\n    @HostListener('mouseleave') public readonly onLeave = () =>\n        this.hover ? this.close() : '';\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay,\n        private _injector: Injector\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        this._updateInjector();\n        if (\n            this._overlay_ref &&\n            (changes.x_pos || changes.y_pos || changes.content)\n        ) {\n            this.open();\n        }\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public open() {\n        this._updateType();\n        if (this._overlay_ref) this.close();\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            hasBackdrop: !!this.backdrop,\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withPositions([\n                    {\n                        originX: this.x_pos || 'end',\n                        originY:\n                            (this.y_pos === 'top'\n                                ? 'bottom'\n                                : this.y_pos == 'bottom'\n                                ? 'top'\n                                : this.y_pos) || 'bottom',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'top',\n                    },\n                ]),\n        });\n        this._overlay_ref.attach(this._portal);\n        if (this.backdrop) {\n            this.subscription(\n                'backdrop',\n                this._overlay_ref.backdropClick().subscribe(() => this.close())\n            );\n        }\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    private _updateType() {\n        this.type =\n            typeof this.content === 'string'\n                ? 'html'\n                : this.content instanceof TemplateRef\n                ? 'template'\n                : 'component';\n    }\n\n    private _updateInjector() {\n        this.injector = Injector.create({\n            providers: [\n                {\n                    provide: CustomTooltipData,\n                    useValue: { data: this.data, close: () => this.close() },\n                },\n            ],\n            parent: this._injector,\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        try {\n            if (!getViewer(this.viewer) || this.loading) {\n                return this.timeout('update_view', () => this.updateView());\n            }\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        try {\n            updateViewer(this.viewer, {\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                desired_center: this.center,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                updateViewer(this.viewer, {\n                    styles: this.styles,\n                    features: [],\n                    labels: this.labels,\n                    actions: this.actions,\n                    options: this.options,\n                });\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        if (!id || !this.viewer) return;\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPolygonData {\n    /** Name of the region */\n    name: string;\n    /** Color to display region in on overlay */\n    color: string;\n    /** Array of points that define the shape of the region */\n    points: [number, number][];\n    /**  */\n    ratio?: number;\n\n    data$?: Observable<MapPolygonData>;\n}\n\n@Component({\n    selector: '[map-polygon]',\n    template: `\n        <div polygon class=\"absolute w-full h-full center\">\n            <svg\n                [attr.viewBox]=\"\n                    '0 0 ' + width + padding + ' ' + height + padding\n                \"\n                [style.width]=\"width * (100 / scale) + '%'\"\n                [style.height]=\"height * (100 / scale) + '%'\"\n                class=\"center top-1/2 left-1/2\"\n            >\n                <polygon\n                    [attr.points]=\"points\"\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                />\n                <circle\n                    *ngFor=\"let point of point_list\"\n                    [attr.cx]=\"point[0] || 0\"\n                    [attr.cy]=\"point[1] || 0\"\n                    [attr.r]=\"4\"\n                    [style.stroke]=\"'#000'\"\n                    [style.fill]=\"'#fffd'\"\n                />\n            </svg>\n            <div\n                text\n                class=\"center top-1/2 left-1/2 text-shadow text-white text-xl text-center whitespace-pre-line\"\n            >\n                {{ name }}\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            polygon {\n                stroke-width: 4;\n            }\n            circle {\n                stroke-width: 2;\n            }\n\n            svg {\n                width: 100%;\n                height: 100%;\n            }\n\n            .center {\n                position: absolute;\n                transform: translate(-50%, -50%);\n            }\n\n            [text] {\n                width: 32rem;\n                max-width: 65vw;\n            }\n        `,\n    ],\n})\nexport class MapPolygonComponent extends BaseClass implements OnInit {\n    /** Message to display above the pin */\n    public name = this._details.name;\n    /** Fill colour for the pin SVG */\n    public fill = `${this._details.color || '#e53935'}88`;\n    /** Stroke colour for the pin SVG */\n    public stroke = this._details.color || '#e53935';\n\n    public padding = 32;\n\n    public scale = 8;\n\n    public offset_x = 0;\n    public offset_y = 0;\n    public width = 1;\n    public height = 1;\n\n    /** List of points for drawing the polygon */\n    public points = `0,0 0,${this.height} ${this.width},${this.height} ${this.width},0`;\n\n    public point_list: [number, number][] = [];\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapPolygonData,\n        private _cdr: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        if (this._details.data$) {\n            this.subscription(\n                'data',\n                this._details.data$.subscribe((_) => {\n                    this.name = _.name;\n                    this.fill = `${_.color || '#e53935'}88`;\n                    this.stroke = _.color || '#e53935';\n                    this.processPoints(_.points);\n                })\n            );\n        }\n        this.processPoints(this._details.points);\n    }\n\n    public processPoints(points: [number, number][]) {\n        const diff: HashMap<number> = points.reduce(\n            (m, [x, y]) => ({\n                x_min: x < m.x_min ? x : m.x_min,\n                x_max: x > m.x_max ? x : m.x_max,\n                y_min: y < m.y_min ? y : m.y_min,\n                y_max: y > m.y_max ? y : m.y_max,\n            }),\n            {\n                x_min: 100,\n                x_max: -100,\n                y_min: 100,\n                y_max: -100,\n            }\n        );\n        this.offset_x = diff.x_min * 100;\n        this.offset_y = diff.y_min * 100;\n        const range = {\n            x: diff.x_max - diff.x_min,\n            y: diff.y_max - diff.y_min,\n        };\n        this.width = range.x * 100 * this.scale;\n        this.height = range.y * 100 * (this._details?.ratio || 1) * this.scale;\n        const edge_padding = this.padding / 2 + 8;\n        this.width = Math.floor(this.width * 100) / 100;\n        this.height = Math.floor(this.height * 100) / 100;\n        this.points = points\n            .reduce(\n                (s, [x, y]) =>\n                    `${s}${s ? ' ' : ''}${\n                        ((x - diff.x_min) / range.x) * this.width + edge_padding\n                    },${\n                        ((y - diff.y_min) / range.y) * this.height +\n                        edge_padding\n                    }`,\n                ''\n            )\n            .replace(/NaN/g, '0');\n        this.point_list = points.map(([x, y]) => [\n            ((x - diff.x_min) / range.x) * this.width + edge_padding,\n            ((y - diff.y_min) / range.y) * this.height + edge_padding,\n        ]);\n        this.width = this.width + this.padding + 8;\n        this.height = this.height + this.padding + 8;\n        this._cdr.detectChanges();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { User } from '../../../users/src/lib/user.class';\n\n@Component({\n    selector: 'a-user-avatar',\n    template: `\n        <div\n            class=\"flex items-center justify-center rounded-full overflow-hidden border-2 border-white\"\n            *ngIf=\"user\"\n            [attr.user-id]=\"user.id\"\n        >\n            <div\n                initials\n                class=\"text-black text-opacity-50 uppercase\"\n                *ngIf=\"!user.photo; else image_state\"\n            >\n                {{ initials }}\n            </div>\n        </div>\n        <ng-template #image_state>\n            <img class=\"h-full w-full\" [src]=\"user.photo | safe: 'resource'\" />\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                height: 2.5em;\n                width: 2.5em;\n                background-color: #ccc;\n                overflow: hidden;\n                border: 2px solid white;\n            }\n\n            .initials {\n                font-size: 1em;\n            }\n        `,\n    ],\n})\nexport class UserAvatarComponent {\n    /** User to display avatar for */\n    @Input() public user: User;\n\n    public get initials(): string {\n        if (!this.user) return 'NA';\n        const parts = this.user.name\n            .replace(/[()[\\]\\-+=\\\\/]+/gi, '')\n            .split(' ');\n        return parts.length > 1\n            ? `${parts[0][0]}${parts[parts.length - 1][0]}`\n            : this.user.name.slice(0, 2);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { addMinutes, isAfter, isBefore } from 'date-fns';\n\nexport const endInFuture = (control: AbstractControl) => {\n    if (\n        control.parent?.get('date') &&\n        isAfter(\n            new Date(),\n            addMinutes(control.parent.get('date').value, control.value)\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(\n    control: AbstractControl\n): { [key: string]: boolean } | null {\n    return control.value && isBefore(control.value, new Date())\n        ? { is_future: true }\n        : null;\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration, [endInFuture]),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.ext('visitor_type')),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(event.ext('needs_parking') || false),\n        system: new FormControl(event.system),\n    });\n    form.get('organiser').valueChanges.subscribe((o) =>\n        form.controls.host.setValue(o?.email)\n    );\n    form.get('resources').valueChanges.subscribe((l) =>\n        form.controls.system.setValue(l.length ? l[0] : null)\n    );\n    if (event.id) {\n        form.get('host').disable();\n        form.get('organiser').disable();\n    }\n    if (event.state === 'started') form.get('date').disable();\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport { BaseClass, getInvalidFields } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { getUnixTime } from 'date-fns';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { CalendarEvent } from './event.class';\nimport { saveEvent } from './events.fn';\nimport { generateEventForm } from './utilities';\n\nconst BOOKING_URLS = ['book/spaces', 'schedule/view'];\n\nexport type EventFlowView =\n    | 'form'\n    | 'find'\n    | 'catering'\n    | 'confirm'\n    | 'success';\n\nexport interface EventFlowOptions {\n    /** Calendar to associate event with */\n    calendar_id?: string;\n    /** List of features to filter spaces on */\n    features?: string[];\n    /** List of zones to filter spaces on */\n    zone_ids?: string[];\n    /** Minimum number of attendees to filter space on */\n    capacity?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventFormService extends BaseClass {\n    private _view = new BehaviorSubject<EventFlowView>('form');\n    private _options = new BehaviorSubject<EventFlowOptions>({ zone_ids: [] });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: CalendarEvent = new CalendarEvent(\n        JSON.parse(sessionStorage.getItem('PLACEOS.last_booked_event') || '{}')\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n    public readonly available_spaces = combineLatest([\n        this._view,\n        this._options,\n        this._form,\n        this._org.initialised.pipe(filter((_) => _)),\n    ]).pipe(\n        filter(([view, _, form]) => view === 'find' && !!form),\n        switchMap(([_, options, form]) => {\n            this._loading.next('Retrieving available spaces...');\n            const start = form.get('date').value;\n            const end =\n                form.get('date').value + form.get('duration').value * 60 * 1000;\n            return querySpaceFreeBusy(\n                {\n                    period_start: getUnixTime(start),\n                    period_end: getUnixTime(end),\n                    zone_ids:\n                        options.zone_ids?.join(',') || this._org.building.id,\n                    features: options.features?.join(','),\n                    capacity: options.capacity,\n                },\n                this._org\n            );\n        }),\n        tap((_) => {\n            this._loading.next('');\n        }),\n        shareReplay(1)\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n    public get form() {\n        return this._form.getValue();\n    }\n    public get event() {\n        return this._event.getValue();\n    }\n\n    constructor(private _org: OrganisationService, private _router: Router) {\n        super();\n        this.available_spaces.subscribe();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((event: Event) => {\n                if (\n                    event instanceof NavigationEnd &&\n                    !BOOKING_URLS.some((_) => event.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n    }\n\n    public setView(value: EventFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<EventFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public newForm(event: CalendarEvent = new CalendarEvent()) {\n        this._form.next(generateEventForm(event));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._event.next(event);\n        this._options.next({});\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const event = this._event.getValue();\n        this._form\n            .getValue()\n            .patchValue({ ...(event || {}), ...(event?.extension_data || {}) });\n        this._options.next({});\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.event_form');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.event_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(sessionStorage.getItem('PLACEOS.event_form') || '{}'),\n        });\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for event';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const spaces = form.get('resources')?.value || [];\n        const space_list = spaces.length\n            ? await querySpaceFreeBusy({\n                  period_start: getUnixTime(form.get('date').value),\n                  period_end: getUnixTime(\n                      form.get('date').value +\n                          form.get('duration').value * 60 * 1000\n                  ),\n                  system_ids: spaces.map((_) => _.id).join(','),\n              }).toPromise()\n            : [];\n        if (space_list.length !== spaces.length)\n            throw `${\n                spaces.length - space_list.length\n            } space(s) are not available at the selected time`;\n        const result = await saveEvent(\n            new CalendarEvent(this._form.getValue().value)\n        ).toPromise();\n        this.clearForm();\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_event',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.is_external) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from 'libs/users/src/lib/user.class';\n\nimport { CalendarEvent } from './event.class';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, new CalendarEvent(data).toJSON()).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        method === 'patch' ? data : new CalendarEvent(data).toJSON()\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => {\n    delete (data as any)?.status;\n    return data.id ? updateEvent(data.id, data, q) : createEvent(data);\n};\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        {\n            response_type: 'void',\n        }\n    );\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/approve?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/reject?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/guests/${guest_id}/checkin${query ? '?' + query : ''}`,\n        ''\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { SpacesService } from '@placeos/spaces';\nimport { searchStaff, StaffUser, User } from '@placeos/users';\nimport { getModule } from '@placeos/ts-client';\nimport { unique } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface SearchResult {\n    /** Unique ID of the result item */\n    id: string;\n    /** Type of the item being displayed */\n    type: 'space' | 'user' | 'contact' | 'feature';\n    /** Main display string for the item */\n    name: string;\n    /** Secondary display string for the item. e.g. email, location, coordinates */\n    description: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreSearchService {\n    /** Current search results for staff users */\n    private _emergency_contacts = new BehaviorSubject<User[]>([]);\n    /** Filter string for results */\n    private _filter = new BehaviorSubject<string>('');\n    /** Whether results are being loaded */\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly emergency_contacts = this._emergency_contacts.asObservable();\n\n    private _user_search: Observable<StaffUser[]> = this._filter.pipe(\n        debounceTime(400),\n        tap(() => this._loading.next(true)),\n        switchMap((q) => (q?.length > 2 ? this.search_fn(q) : of([]))),\n        catchError(() => [])\n    );\n\n    public readonly search_results: Observable<SearchResult[]> = combineLatest([\n        this._spaces.list,\n        this._user_search,\n        this._emergency_contacts,\n    ]).pipe(\n        debounceTime(1000),\n        map(([spaces, users, contacts]) => {\n            const filter = this._filter.getValue() || '';\n            const search = filter.toLowerCase();\n            const results = unique(\n                [\n                    ...spaces\n                        .filter(\n                            (_) =>\n                                _.email.toLowerCase().includes(search) ||\n                                _.name.toLowerCase().includes(search) ||\n                                _.display_name.toLowerCase().includes(search)\n                        )\n                        .map((s) => ({\n                            id: s.id,\n                            type: 'space',\n                            name: s.display_name || s.name,\n                            description: `Capacity: ${s.capacity} `,\n                        })),\n                    ...contacts\n                        .map((u) => ({\n                            id: u.email,\n                            type: (u as any).type || 'contact',\n                            name: u.name,\n                            description: u.email,\n                        }))\n                        .filter(\n                            (_) =>\n                                _.name.toLowerCase().includes(search) ||\n                                _.description.toLowerCase().includes(search) ||\n                                _.type.toLowerCase().includes(search)\n                        ),\n                    ...users.map((u) => ({\n                        id: u.email,\n                        type: 'user',\n                        name: u.name,\n                        description: u.email,\n                    })),\n                ],\n                'id'\n            );\n            results.sort((a, b) => a.name.localeCompare(b.name));\n            return results;\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Obverable for whether results are being loaded */\n    public readonly loading = this._loading.asObservable();\n    /** Function used to query for users */\n    public search_fn = (q: string) => searchStaff(q);\n\n    constructor(\n        private _spaces: SpacesService,\n        private _org: OrganisationService\n    ) {\n        this._spaces.list.subscribe();\n        this.search_results.subscribe();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        const mod = getModule(\n            this._org.organisation.bindings?.location_services,\n            'LocationServices'\n        );\n        if (mod) {\n            const binding = mod.binding('emergency_contacts');\n            binding.listen().subscribe((contacts_map) => {\n                const list = [];\n                for (const type in contacts_map) {\n                    for (const user of contacts_map[type]) {\n                        list.push({ ...user, type });\n                    }\n                }\n                this._emergency_contacts.next(list);\n            });\n            binding.bind();\n        }\n    }\n\n    public setFilter(str: string) {\n        this._filter.next(str);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        OverlayModule,\n        PortalModule,\n        FormFieldsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport { CalendarEvent, generateEventForm, saveEvent } from '@placeos/events';\nimport { Space } from '@placeos/spaces';\nimport { querySpaceAvailability } from '@placeos/calendar';\n\nexport interface ExploreBookingModalData {\n    space: Space;\n}\n\n@Component({\n    selector: 'explore-booking-modal',\n    template: `\n        <header>\n            <h2>New Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main *ngIf=\"form\" [formGroup]=\"form\" class=\"p-4\">\n                <div class=\"flex flex-col\">\n                    <label for=\"title\">Title<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"title\"\n                            formControlName=\"title\"\n                            placeholder=\"Booking Title\"\n                        />\n                        <mat-error>Booking title is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>Space:</label>\n                    <div name=\"space\" class=\"sm:mt-4 mb-4\">\n                        {{\n                            form.controls.resources?.value[0]?.display_name ||\n                                form.controls.resources?.value[0]?.name\n                        }}\n                    </div>\n                </div>\n                <div class=\"flex sm:space-x-4 flex-wrap\">\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.date\">\n                        <label>Date:</label>\n                        <div class=\"sm:mt-4 mb-4\">\n                            {{ form.controls.date?.value | date: 'medium' }}\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.duration\">\n                        <label>Duration:</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                        ></a-duration-field>\n                    </div>\n                </div>\n            </main>\n            <footer class=\"flex justify-center p-2 border-t border-gray-200\">\n                <button mat-button (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div load class=\"h-64 flex flex-col items-center justify-center\">\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            header {\n                max-width: calc(100vw + 100%);\n            }\n\n            [load] {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class ExploreBookingModalComponent implements OnInit {\n    public booking: CalendarEvent;\n    public form: FormGroup;\n    public loading = '';\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ExploreBookingModalData,\n        private _dialog_ref: MatDialogRef<ExploreBookingModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.booking = new CalendarEvent({\n            attendees: [{ ...(this._data.space || {}), resource: true } as any],\n        });\n        this.form = generateEventForm(this.booking);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        const on_error = (msg) => {\n            this.loading = '';\n            notifyError(msg);\n            this._dialog_ref.disableClose = false;\n        };\n        if (!this.form.valid) {\n            const list = [];\n            for (const key in this.form.controls) {\n                if (this.form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            throw on_error(\n                `Some form fields are not valid: [${list.join(', ')}]`\n            );\n        }\n        this._dialog_ref.disableClose = true;\n        this.loading = 'Checking space availability...';\n        const spaces = await querySpaceAvailability({\n            system_ids: this.form.controls.resources.value\n                ?.map((s) => s.id)\n                .join(','),\n            period_start: Math.floor(this.form.value.date / 1000),\n            period_end:\n                Math.floor(this.form.value.date / 1000) +\n                this.form.value.duration * 60,\n        })\n            .toPromise()\n            .catch((e) => {\n                on_error(\n                    'Space is unavailble for the selected time and duration'\n                );\n                throw e;\n            });\n        if (spaces.length <= 0) {\n            return on_error(\n                'Space is unavailble for the selected time and duration'\n            );\n        }\n        this.loading = 'Creating booking...';\n        await saveEvent(new CalendarEvent(this.form.value))\n            .toPromise()\n            .catch((e) => {\n                on_error('Error creating booking.');\n                throw e;\n            });\n        notifySuccess(\n            `Successfully created booking in ${\n                this._data.space.display_name || this._data.space.name\n            }`\n        );\n        this._dialog_ref.close();\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@placeos/components';\n\nexport interface DeskInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 map-id class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p user class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p start class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeskInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    HashMap,\n    notifySuccess,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    BookingFormService,\n    DesksService,\n    queryBookings,\n} from '@placeos/bookings';\nimport { StaffUser } from '@placeos/users';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nexport interface DeskOptions {\n    enable_booking?: boolean;\n    date?: number | Date;\n    zones?: string[];\n    host?: StaffUser;\n}\nexport interface DesksStats {\n    free: number;\n    occupied: number;\n    total: number;\n}\n\n@Injectable()\nexport class ExploreDesksService extends BaseClass implements OnDestroy {\n    private _in_use = new BehaviorSubject<string[]>([]);\n    private _options = new BehaviorSubject<DeskOptions>({});\n    private _desks = new BehaviorSubject<string[]>([]);\n    private _reserved = new BehaviorSubject<string[]>([]);\n    private _statuses: HashMap<string> = {};\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _desk_bookings = combineLatest([\n        this._state.level,\n        this._poll,\n    ]).pipe(\n        switchMap(([lvl]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(new Date())),\n                period_end: getUnixTime(endOfDay(new Date())),\n                type: 'desk',\n                zones: lvl.id,\n            })\n        )\n    );\n\n    public readonly desk_list = this._state.level.pipe(\n        switchMap((lvl) =>\n            showMetadata(lvl.id, { name: 'desks' }).pipe(\n                map((i) =>\n                    (i.details instanceof Array ? i.details : []).map(\n                        (j: HashMap) => new Desk({ ...j, zone: lvl as any })\n                    )\n                )\n            )\n        ),\n        catchError((e) => [])\n    );\n\n    private _bind = this._state.level.pipe(\n        map((lvl) => {\n            this._statuses = {};\n            this.unsubWith('lvl');\n            if (!lvl) return;\n            const building = this._org.buildings.find(\n                (bld) => bld.id === lvl.parent_id\n            );\n            if (!building) return;\n            const system_id =\n                building.bindings?.area_management ||\n                this._org.organisation.bindings?.area_management;\n            if (!system_id) return;\n            let binding = getModule(system_id, 'AreaManagement').binding(\n                lvl.id\n            );\n            this.subscription(\n                `lvl-in_use`,\n                binding\n                    .listen()\n                    .subscribe((d) =>\n                        this.processBindingChange(d || {}, system_id)\n                    )\n            );\n            this.subscription('lvl-in_use_bind', binding.bind());\n            binding = getModule(system_id, 'AreaManagement').binding(\n                `${lvl.id}:desk_ids`\n            );\n            this.subscription(\n                `lvl-desks_list`,\n                binding.listen().subscribe((d) => this._desks.next(d || []))\n            );\n            this.subscription('lvl-desk_list_bind', binding.bind());\n        })\n    );\n\n    private _state_change = combineLatest([\n        this.desk_list,\n        this._in_use,\n        this._reserved,\n        this._options,\n    ]).pipe(\n        // debounceTime(50),\n        map(([desks, in_use, reserved]) => {\n            this._statuses = {};\n            for (const { id, bookable } of desks) {\n                const is_used = in_use.some((i) => id === i);\n                const is_reserved = reserved.some((i) => id === i);\n                this._statuses[id] = bookable\n                    ? !is_used\n                        ? 'free'\n                        : is_reserved\n                        ? 'reserved'\n                        : 'busy'\n                    : 'not-bookable';\n            }\n            this.processDesks(desks);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _bookings: BookingFormService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.setOptions({\n            enable_booking: this._settings.get('app.desks.enabled') !== false,\n        });\n        this.subscription('bind', this._bind.subscribe());\n        this.subscription('changes', this._state_change.subscribe());\n        this.subscription(\n            'desks',\n            this.desk_list.subscribe((desks) => this.processDesks(desks))\n        );\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.subscription(\n            'desks_in_use_bookings',\n            this._desk_bookings.subscribe((_) =>\n                this._in_use.next(_.map((i) => i.asset_id))\n            )\n        );\n        this.interval(\n            'poll',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: DeskOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public processBindingChange(\n        { value }: { value: any[] },\n        system_id: string\n    ) {\n        const devices = (value || []).filter(\n            (v) => !['desk', 'booking'].includes(v.location)\n        );\n        const desks = (value || []).filter(\n            (v) =>\n                v.location === 'desk' ||\n                (v.location === 'booking' && v.type === 'desk')\n        );\n        this._in_use.next(desks.map((v) => v.map_id || v.asset_id));\n        this._reserved.next(\n            desks\n                .filter((v) => !v.at_location)\n                .map((v) => v.map_id || v.asset_id)\n        );\n        this.processDevices(devices, system_id);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk_id in this._statuses) {\n            if (!this._statuses[desk_id]) continue;\n            style_map[`#${desk_id}`] = {\n                fill:\n                    colours[`desk-${this._statuses[desk_id]}`] ||\n                    colours[`${this._statuses[desk_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[desk_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('desks', style_map);\n    }\n\n    private processDevices(devices: HashMap[], system_id: string) {\n        const list = [];\n        for (const device of devices) {\n            const x = device.x / device.map_width;\n            const y = device.y / device.map_height;\n            list.push({\n                location: {\n                    x: device.coordinates_from?.includes('right') ? 1 - x : x,\n                    y: device.coordinates_from?.includes('bottom') ? 1 - y : y,\n                },\n                content: ExploreDeviceInfoComponent,\n                data: { ...device, system: system_id },\n            });\n        }\n        this._state.setFeatures('devices', list);\n    }\n\n    private processDesks(desks: HashMap[]) {\n        const list = [];\n        const actions = [];\n        const options = this._options.getValue();\n        for (const desk of desks) {\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    status: this._statuses[desk.map_id],\n                },\n            });\n            const book_fn = async () => {\n                this._bookings.newForm();\n                this._bookings.form.patchValue({\n                    asset_id: desk.id,\n                    user: options.host || currentUser(),\n                    booking_type: 'desk',\n                });\n                await this._bookings.confirmPost();\n                notifySuccess(\n                    `Successfull booked desk ${desk.name || desk.id}`\n                );\n            };\n            actions.push({\n                id: desk.id,\n                action: 'click',\n                callback: book_fn,\n            });\n            actions.push({\n                id: desk.id,\n                action: 'touchend',\n                callback: book_fn,\n            });\n        }\n        this._state.setActions(\n            'desks',\n            this._options.getValue().enable_booking ? actions : []\n        );\n        this._state.setFeatures('desks', list);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\nexport interface DeviceInfoData {\n    mac: string;\n    variance: number;\n    last_seen: number;\n    system: string;\n    manufacturer?: string;\n    os?: string;\n    ssid?: string;\n    user?: any;\n    bg_color?: string;\n}\n\n@Component({\n    selector: '[explore-device-info]',\n    template: `\n        <div\n            name=\"radius\"\n            (mouseenter)=\"loadUser()\"\n            class=\"radius absolute center bg-blue-600 bg-opacity-25 border-4 border-dashed border-blue-600 rounded-full\"\n            [style]=\"'height: ' + diameter + '%; width: ' + diameter + '%;'\"\n        ></div>\n        <div\n            name=\"dot\"\n            #dot\n            class=\"h-2 w-2 absolute center rounded-full pointer-events-auto shadow\"\n            [style.background-color]=\"bg_color\"\n        ></div>\n\n        <ng-template cdk-portal>\n            <div\n                name=\"device-info\"\n                class=\"w-64 rounded bg-white p-4 top-0 left-0 shadow pointer-events-none\"\n                (mouseleave)=\"close()\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <p><label>MAC:</label> {{ mac }}</p>\n                    <p><label>Accuracy:</label> {{ variance }}m</p>\n                    <p><label>Last Seen:</label> {{ last_seen }}</p>\n                    <p type *ngIf=\"manufacturer\">\n                        <label>Manufacturer:</label> {{ manufacturer }}\n                    </p>\n                    <p os *ngIf=\"os\"><label>OS:</label> {{ os }}</p>\n                    <p ssid *ngIf=\"ssid\"><label>SSID:</label> {{ ssid }}</p>\n                    <p username *ngIf=\"username\">\n                        <label>Username:</label>\n                        {{ user?.name || user?.username || username }}\n                    </p>\n                    <p user *ngIf=\"user\">\n                        <label>Type:</label> {{ user.type }}\n                    </p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: auto;\n            }\n\n            :host > [name='dot'] {\n                background-color: #616161;\n            }\n\n            :host:hover > [name='radius'] {\n                opacity: 1;\n            }\n\n            [name='radius'] {\n                opacity: 0;\n                transition: opacity 200ms;\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ExploreDeviceInfoComponent implements OnInit {\n    /** Name of the user associated with the mac address */\n    public username = '';\n    /** User details associated with device */\n    public readonly user = this._details.user;\n    /** Mac Address of the device */\n    public readonly mac = this._details.mac;\n    /** Mac Address of the device */\n    public readonly manufacturer = this._details.manufacturer;\n    /** Mac Address of the device */\n    public readonly os = this._details.os;\n    /** Mac Address of the device */\n    public readonly ssid = this._details.ssid;\n    /** Accuracy of the location data */\n    public readonly variance = this._details.variance?.toFixed(2);\n    /** Diameter of the radius circle */\n    public readonly diameter = this._details.variance * 100;\n    /** Background color for the dot */\n    public readonly bg_color = this._details.bg_color || this.distance_color;\n\n    public overlay_ref: OverlayRef = null;\n    /** Time of the last update */\n    public get last_seen() {\n        return formatDistanceToNow((this._details.last_seen || 0) * 1000, {\n            addSuffix: true,\n        });\n    }\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'end' | 'start';\n    public get distance() {\n        return Math.abs(\n            differenceInMinutes(\n                (this._details.last_seen || 0) * 1000,\n                new Date()\n            )\n        );\n    }\n\n    public get distance_color() {\n        return this.distance < 10\n            ? '#43a047'\n            : this.distance < 20\n            ? '#ffb300'\n            : '#e53935';\n    }\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n    @ViewChild('dot') private _dot: ElementRef<HTMLDivElement>;\n\n    @HostListener('mouseenter') public onEnter = () => this.loadUser();\n    @HostListener('mouseleave') public onLeave = () => this.close();\n    @HostListener('click') public onClick = () => this.loadUser();\n    @HostListener('touchend') public onTouch = () => this.loadUser();\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeviceInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public async loadUser() {\n        this.open();\n        if (this.username) return;\n        const mod = getModule(this._details.system, 'LocationServices');\n        if (mod) {\n            this.username = 'Loading...';\n            const details = await mod\n                .execute('check_ownership_of', [this.mac])\n                .catch((_) => null);\n            this.username =\n                details && details.assigned_to ? details.assigned_to : '';\n        }\n    }\n\n    public open() {\n        if (this.overlay_ref) this.close();\n        if (!this._portal) return;\n        this.overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._dot)\n                .withPositions([\n                    {\n                        originX: this.x_pos === 'start' ? 'end' : 'start',\n                        originY: this.y_pos === 'top' ? 'bottom' : 'top',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'bottom',\n                    },\n                ]),\n        });\n        this.overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this.overlay_ref) {\n            this.overlay_ref.dispose();\n            this.overlay_ref = null;\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: 'explore-map-controls',\n    template: `\n        <div class=\"flex space-x-2\">\n            <mat-form-field\n                overlay\n                buildings\n                class=\"flex-1\"\n                has-bld=\"true\"\n                *ngIf=\"(buildings | async)?.length > 1\"\n                appearance=\"outline\"\n            >\n                <mat-select\n                    placeholder=\"Select Building...\"\n                    [ngModel]=\"building | async\"\n                    (ngModelChange)=\"setBuilding($event)\"\n                >\n                    <mat-option\n                        *ngFor=\"let bld of buildings | async\"\n                        [value]=\"bld\"\n                    >\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                overlay\n                levels\n                class=\"flex-1\"\n                [attr.has-bld]=\"(buildings | async)?.length > 1\"\n                *ngIf=\"(levels | async)?.length\"\n                appearance=\"outline\"\n            >\n                <mat-select\n                    placeholder=\"Select Level...\"\n                    [ngModel]=\"level | async\"\n                    (ngModelChange)=\"setLevel($event)\"\n                >\n                    <mat-option\n                        *ngFor=\"let lvl of levels | async\"\n                        [value]=\"lvl\"\n                    >\n                        {{ lvl.display_name || lvl.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 0.5rem;\n            }\n\n            mat-form-field {\n                min-width: 10rem;\n            }\n\n            mat-form-field[has-bld='true'] {\n                max-width: calc(50vw - 2.5rem);\n            }\n\n            :host[full] mat-form-field {\n                max-width: calc(50% - 2.5rem);\n            }\n        `,\n    ],\n})\nexport class ExploreMapControlComponent extends BaseClass implements OnInit {\n    /** List of available buildings */\n    public readonly buildings = this._org.building_list;\n    /** Currently active building */\n    public readonly building = this._org.active_building;\n    /** List of availabel levels */\n    public readonly levels = this._org.active_levels;\n    /** Currently active level */\n    public readonly level = this._state.level;\n    /** Set the currently active level */\n    public readonly setLevel = (lvl) => {\n        this._state.setFeatures('_located', []);\n        this.timeout(\n            'set_level',\n            () =>\n                this._router.navigate([], {\n                    relativeTo: this._route,\n                    queryParams: { zone: lvl.id },\n                }),\n            201\n        );\n    };\n    /** Set the currenly active building */\n    public readonly setBuilding = (bld) => (this._org.building = bld);\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: ExploreStateService,\n        private _router: Router,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) =>\n                params.has('zone')\n                    ? this._state.setLevel(params.get('zone'))\n                    : ''\n            )\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { getModule } from '@placeos/ts-client';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    notifyError,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Space, SpacesService } from '@placeos/spaces';\nimport { MapLocation, showStaff, User } from '@placeos/users';\nimport { MapPinComponent, MapRadiusComponent } from '@placeos/components';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpacesService } from './explore-spaces.service';\nimport { ExploreZonesService } from './explore-zones.service';\nimport { ExploreDesksService } from './explore-desks.service';\n\n@Component({\n    selector: 'explore-map-view',\n    template: `\n        <i-map\n            [src]=\"url | async\"\n            [zoom]=\"(positions | async)?.zoom\"\n            [center]=\"(positions | async)?.center\"\n            [styles]=\"styles | async\"\n            [features]=\"features | async\"\n            [actions]=\"actions | async\"\n            [labels]=\"labels | async\"\n        ></i-map>\n        <explore-zoom-controls\n            class=\"absolute bottom-0 right-0\"\n        ></explore-zoom-controls>\n        <explore-map-controls\n            class=\"absolute top-0 left-0\"\n        ></explore-map-controls>\n        <!-- <explore-search class=\"absolute top-0 right-0\"></explore-search> -->\n        <div\n            name=\"zones\"\n            class=\"p-2 bg-white border border-gray-400 absolute left-0 m-2 rounded flex items-center\"\n        >\n            Zones\n            <mat-slide-toggle\n                class=\"ml-2\"\n                [ngModel]=\"!(options | async)?.disable?.includes('zones')\"\n                (ngModelChange)=\"toggleZones($event)\"\n            ></mat-slide-toggle>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            [name='zones'] {\n                top: 3.5rem;\n            }\n        `,\n    ],\n    providers: [ExploreSpacesService, ExploreDesksService, ExploreZonesService],\n})\nexport class ExploreMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._state.map_labels;\n    /** Observable for the active map */\n    public readonly options = this._state.options;\n    /** Observable for user messages */\n    public readonly message = this._state.message;\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public async toggleZones(enabled: boolean) {\n        const options = await this.options.pipe(take(1)).toPromise();\n        const disable = !enabled\n            ? unique([...(options.disable || []), 'zones', 'devices'])\n            : options.disable.filter((_) => _ !== 'zones' && _ !== 'devices') ||\n              [];\n        this.setOptions({ disable });\n    }\n\n    constructor(\n        private _state: ExploreStateService,\n        private _s: ExploreSpacesService,\n        private _desks: ExploreDesksService,\n        private _zones: ExploreZonesService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _spaces: SpacesService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        this.toggleZones(false);\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe(async (params) => {\n                if (params.has('level')) {\n                    this._state.setLevel(params.get('level'));\n                }\n                this._state.setFeatures('_located', []);\n                if (params.has('space')) {\n                    const space = this._spaces.find(params.get('space'));\n                    if (!space) return;\n                    this.locateSpace(space);\n                } else if (params.has('user')) {\n                    let user = this._settings.value('last_search');\n                    if (!user || params.get('user') !== user.email) {\n                        user = null;\n                        user = await showStaff(params.get('user')).toPromise();\n                    }\n                    if (!user)\n                        return notifyError(\n                            `Unable to user details for ${params.get('user')}`\n                        );\n                    this.locateUser(\n                        user instanceof Array ? user[0] : user\n                    ).catch((_) => {\n                        notifyError(`Unable to locate ${params.get('user')}`);\n                        this._router.navigate([], {\n                            relativeTo: this._route,\n                            queryParams: {},\n                        });\n                    });\n                } else {\n                    this.timeout('update_location', () => {\n                        this._state.setFeatures('_located', []);\n                    });\n                }\n            })\n        );\n    }\n\n    private locateSpace(space: Space) {\n        this._state.setLevel(this._org.levelWithID(space.zones)?.id);\n        const feature: any = {\n            location: space.map_id,\n            content: MapPinComponent,\n            data: {\n                message: `${space.display_name || space.name} is here`,\n            },\n        };\n        this.timeout('update_location', () =>\n            this._state.setFeatures('_located', [feature])\n        );\n    }\n\n    private async locateUser(user: User) {\n        let locate_details: any = this._org.organisation.bindings\n            .location_services;\n        if (!locate_details) return;\n        if (typeof locate_details === 'string') {\n            locate_details = {\n                system_id: locate_details,\n                module: 'LocationServices',\n            };\n        }\n        const mod = getModule(locate_details.system_id, locate_details.module);\n        const locations: MapLocation[] = (\n            await mod.execute('locate_user', [user.email, user.id])\n        ).map((i) => new MapLocation(i));\n        locations.sort(\n            (a, b) =>\n                locate_details.priority.indexOf(a.type) -\n                locate_details.priority.indexOf(b.type)\n        );\n        if (!locations?.length) {\n            throw 'No locations for the given user';\n        }\n        this._state.setLevel(this._org.levelWithID([locations[0]?.level])?.id);\n        const pos = locations[0].position;\n        const { coordinates_from } = locations[0];\n        const feature: any = {\n            location:\n                locations[0].type === 'wireless'\n                    ? {\n                          x: coordinates_from?.includes('right')\n                              ? 1 - pos.x\n                              : pos.x,\n                          y: coordinates_from?.includes('bottom')\n                              ? 1 - pos.y\n                              : pos.y,\n                      }\n                    : pos,\n            content:\n                locations[0].type === 'wireless'\n                    ? MapRadiusComponent\n                    : MapPinComponent,\n            data: {\n                message: `${user.name} is here`,\n                radius: locations[0].variance,\n                last_seen: locations[0].last_seen,\n            },\n        };\n        this.timeout('update_location', () => {\n            this._state.setFeatures('_located', [feature]);\n        });\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { CalendarEvent } from '@placeos/events';\nimport { Space } from '@placeos/spaces';\n\nexport interface SpaceInfoData {\n    space: Space;\n    events: CalendarEvent[];\n    status:\n        | 'free'\n        | 'busy'\n        | 'pending'\n        | 'reserved'\n        | 'not-bookable'\n        | 'unknown'\n        | '';\n}\n\n@Component({\n    selector: 'explore-space-info',\n    template: `\n        <div\n            customTooltip\n            [content]=\"space_tooltip\"\n            [backdrop]=\"false\"\n            [xPosition]=\"'center'\"\n            [yPosition]=\"'center'\"\n            [hover]=\"true\"\n            class=\"h-full w-full pointer-events-auto relative\"\n        ></div>\n        <ng-template #space_tooltip>\n            <div\n                name=\"space-info\"\n                [id]=\"space.id\"\n                class=\"\n                    absolute rounded bg-white p-4 top-0 left-0 transform shadow pointer-events-none\n                \"\n                [class.-translate-x-full]=\"x_pos === 'end'\"\n                [class.-translate-y-full]=\"y_pos === 'bottom'\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <h4 class=\"m-0 mb-2\">\n                        {{ space.display_name || space.name }}\n                    </h4>\n                    <div capacity class=\"text-sm\" *ngIf=\"space.capacity >= 0\">\n                        <span>Capacity: </span>{{ space.capacity }}\n                        {{ space.capacity === 1 ? 'person' : 'people' }}\n                    </div>\n                    <div class=\"flex flex-wrap my-2 text-sm\">\n                        <div\n                            status\n                            [class]=\"\n                                'capitalize rounded p-1 px-2 text-light ' +\n                                status\n                            \"\n                        >\n                            {{ status }}\n                        </div>\n                        <div available-until *ngIf=\"status !== 'not-bookable'\">\n                            {{ available_until }}\n                        </div>\n                    </div>\n                    <div features *ngIf=\"space.features?.length > 0\">\n                        <h4 class=\"m-0 mb-2\">Room Features</h4>\n                        <ul class=\"pl-2\">\n                            <li\n                                class=\"text-sm\"\n                                *ngFor=\"let feature of space.features\"\n                            >\n                                {{ feature }}\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [status] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [status].busy {\n                background-color: #e53935;\n            }\n\n            [status].pending {\n                background-color: #ffb300;\n            }\n\n            [status].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreSpaceInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly space = this._details.space;\n    /** List of upcoming events for space */\n    public readonly events = this._details.events;\n    /** Current status of the space */\n    public readonly status = this._details.status;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'start' | 'end';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: SpaceInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@placeos/svg-viewer';\nimport { map } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    HashMap,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#e65100',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _statuses: HashMap<string> = {};\n\n    private _bind = this._state.spaces.pipe(\n        map((list) => {\n            this.unsubWith('b-');\n            this.unsubWith('s-');\n            this._statuses = {};\n            if (!list?.length) return;\n            for (const space of list) {\n                const mod = getModule(space.id, 'Bookings');\n                let binding = mod.binding('bookings');\n                this.subscription(\n                    `b-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleBookingsChange(list, space, d)\n                        )\n                );\n                this.subscription(`b-bind-${space.id}`, binding.bind());\n                binding = mod.binding('status');\n                this.subscription(\n                    `s-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleStatusChange(list, space, d)\n                        )\n                );\n                this.subscription(`s-bind-${space.id}`, binding.bind());\n            }\n            this.updateActions(list);\n            this.updateHoverElements(list);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription('spaces', this._bind.subscribe());\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy' || !space.bookable) {\n            return notifyError(\n                `${\n                    space.display_name || space.name\n                } is unavailable at the current time`\n            );\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space },\n        });\n    }\n\n    public handleBookingsChange(\n        spaces: Space[],\n        space: Space,\n        bookings: HashMap[]\n    ) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout(\n            'update_hover_els',\n            () => this.updateHoverElements(spaces),\n            100\n        );\n    }\n\n    public handleStatusChange(spaces: Space[], space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus(spaces);\n                this.updateHoverElements(spaces);\n            },\n            100\n        );\n    }\n\n    private updateStatus(spaces: Space[]) {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const space of spaces) {\n            const status = this._statuses[space.id] || 'not-bookable';\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${status}`] ||\n                    colours[`${status}`] ||\n                    DEFAULT_COLOURS[`${status}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements(spaces: Space[]) {\n        const features: ViewerFeature[] = [];\n        for (const space of spaces) {\n            features.push({\n                location: space.map_id,\n                full_size: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions(spaces: Space[]) {\n        const actions: ViewAction[] = [];\n        for (const space of spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    Point,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService, unique } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { SpacesService } from '@placeos/spaces';\n\nexport interface MapOptions {\n    /** List of keys to ignore for any map resource */\n    disable?: string[];\n    /** List of keys to ignore for map labels */\n    disable_labels?: string[];\n    /** List of keys to ignore for map actions */\n    disable_actions?: string[];\n    /** List of keys to ignore for map features */\n    disable_features?: string[];\n    /** List of keys to ignore for map styles */\n    disable_styles?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({\n        disable: ['zones', 'devices'],\n    });\n\n    private _message = new BehaviorSubject<string>('');\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Currently active level */\n    public readonly message = this._message.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([\n        this._level,\n        this._spaces.list,\n    ]).pipe(\n        map(([level, spaces]) =>\n            spaces.filter((space) => space.zones.includes(level?.id))\n        )\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(\n        map((lvl) => (lvl ? lvl.map_id : '') || '')\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([features, options]) => {\n            let list = [];\n            for (const key in features) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_features?.includes(key)\n                )\n                    continue;\n                list = list.concat(features[key]);\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = combineLatest([\n        this._actions,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([actions, options]) => {\n            let list = [];\n            for (const key in actions) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_actions?.includes(key)\n                )\n                    continue;\n                list = list.concat(actions[key]);\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([\n        this._labels,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([labels, options]) => {\n            let list = [];\n            for (const key in labels) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_labels?.includes(key)\n                )\n                    continue;\n                list = list.concat(labels[key]);\n            }\n            return list;\n        })\n    );\n    /** Current map styles */\n    public readonly map_styles = combineLatest([\n        this._styles,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([styles, options]) => {\n            let style_mappings = { text: { display: 'none' } };\n            for (const key in styles) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_styles?.includes(key)\n                )\n                    continue;\n                style_mappings = { ...style_mappings, ...styles[key] };\n            }\n            if (options.disable?.includes('zones')) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    public get active_level() {\n        return this._level.getValue();\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._org.active_building.pipe(filter((_) => !!_)).subscribe((bld) => {\n            const level = this._level.getValue();\n            const level_list = this._org.levelsForBuilding(bld);\n            const has_level = level_list.find((lvl) => level?.id === lvl.id);\n            if (!has_level && level_list.length) {\n                this.setLevel(level_list[0].id);\n            }\n            if (this._settings.get('app.explore.disable_actions')) {\n                this.setOptions({\n                    disable_actions: this._settings.get(\n                        'app.explore.disable_actions'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_labels')) {\n                this.setOptions({\n                    disable_labels: this._settings.get(\n                        'app.explore.disable_labels'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_features')) {\n                this.setOptions({\n                    disable_features: this._settings.get(\n                        'app.explore.disable_features'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_styles')) {\n                this.setOptions({\n                    disable_styles: this._settings.get(\n                        'app.explore.disable_styles'\n                    ),\n                });\n            }\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        const old_options = this._options.getValue();\n        const disable = unique([\n            ...(options.disable || old_options.disable),\n            ...this._settings.get('app.explore.disable'),\n        ]);\n        this._options.next({\n            ...this._options.getValue(),\n            ...options,\n            disable,\n        });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { ViewerLabel, Point } from '@placeos/svg-viewer';\nimport { first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport { MapPolygonComponent } from 'libs/components/src/lib/map-polygon.component';\n\nconst EMPTY_LABEL = { location: { x: -10, y: -10 }, content: '0% Usage' };\n\nexport interface ZoneData {\n    /** ID of the zone */\n    area_id: string;\n    /** Number of devices in the zone */\n    count: number;\n\n    ambient_temp: number;\n    people_count: number;\n    humidity: number;\n    queue_size: number;\n    counter: number;\n}\n\n@Injectable()\nexport class ExploreZonesService extends BaseClass {\n    private _statuses: HashMap<string> = {};\n    private _labels: HashMap<ViewerLabel> = {};\n    private _location: HashMap<Point> = {};\n    private _capacity: HashMap<number> = {};\n    private _draw: HashMap<boolean> = {};\n    private _points: HashMap<[number, number][]> = {};\n\n    private _bind = this._state.level.pipe(\n        map((lvl) => {\n            if (!lvl) return;\n            this._statuses = {};\n            const building = this._org.buildings.find(\n                (bld) => bld.id === lvl.parent_id\n            );\n            if (!building) return;\n            const system_id =\n                building.bindings.area_management ||\n                this._org.organisation.bindings.area_management;\n            if (!system_id) return;\n            const binding = getModule(system_id, 'AreaManagement').binding(\n                `${lvl.id}:areas`\n            );\n            this.subscription(\n                `zones`,\n                binding.listen().subscribe((d) => this.parseData(d))\n            );\n            this.subscription('binding', binding.bind());\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        const zone_metadata = await Promise.all(\n            this._org.levels.map((bld) =>\n                showMetadata(bld.id, { name: 'map_regions' }).toPromise()\n            )\n        );\n        for (const zone of zone_metadata) {\n            const areas = (zone?.details as any)?.areas;\n            if (areas) {\n                for (const area of areas) {\n                    this._capacity[area.id] = area.properties?.capacity || 100;\n                    this._location[area.id] = area.properties?.label_location;\n                    this._draw[area.id] = !!area.properties?.draw_polygon;\n                    this._points[area.id] = area.geometry?.coordinates || [];\n                }\n            }\n        }\n        this.subscription('bind', this._bind.subscribe());\n    }\n\n    public parseData(data?: { value: ZoneData[] }) {\n        const value = data?.value || [];\n        const labels = [];\n        for (const zone of value) {\n            const filled = zone.count / (this._capacity[zone.area_id] || 100);\n            this._statuses[zone.area_id] =\n                filled < 0.4 ? 'free' : filled < 0.75 ? 'pending' : 'busy';\n            if (!this._location[zone.area_id]) continue;\n            let content = '';\n            if (zone.count) {\n                content += `${zone.count || 0} ${\n                    zone.count === 1 ? 'Device' : 'Devices'\n                }\\n`;\n            }\n            if (zone.ambient_temp)\n                content += `Ambient Temp: ${zone.ambient_temp} ˚C\\n`;\n            if (zone.people_count > 0)\n                content += `${zone.people_count} ${\n                    zone.people_count === 1 ? 'Person' : 'People'\n                }\\n`;\n            if (zone.humidity) content += `Humidity: ${zone.humidity}%\\n`;\n            if (zone.queue_size) content += `Queue Size: ${zone.queue_size}%\\n`;\n            if (zone.counter) content += `Count: ${zone.queue_size}\\n`;\n            this._labels[zone.area_id] = {\n                location: this._location[zone.area_id],\n                content,\n                z_index: 100,\n            };\n            labels.push(this._labels[zone.area_id]);\n        }\n        this._state.setLabels('zones', labels);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const features = [];\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const zone_id in this._statuses) {\n            const colour =\n                colours[`zone-${this._statuses[zone_id]}`] ||\n                colours[`${this._statuses[zone_id]}`] ||\n                DEFAULT_COLOURS[`${this._statuses[zone_id]}`];\n            if (this._draw[zone_id]) {\n                features.push({\n                    location: getCenterPoint(this._points[zone_id]),\n                    content: MapPolygonComponent,\n                    data: {\n                        color: colour,\n                        points: this._points[zone_id],\n                    },\n                    z_index: 50,\n                });\n            } else {\n                style_map[`#${zone_id}`] = {\n                    fill: colour,\n                    opacity: 0.6,\n                };\n            }\n        }\n        this._state.setFeatures('zones', features);\n        this._state.setStyles('zones', style_map);\n    }\n}\n\nfunction getCenterPoint(points: [number, number][]) {\n    const diff: HashMap<number> = points.reduce(\n        (m, [x, y]) => ({\n            x_min: x < m.x_min ? x : m.x_min,\n            x_max: x > m.x_max ? x : m.x_max,\n            y_min: y < m.y_min ? y : m.y_min,\n            y_max: y > m.y_max ? y : m.y_max,\n        }),\n        {\n            x_min: 100,\n            x_max: -100,\n            y_min: 100,\n            y_max: -100,\n        }\n    );\n    return {\n        x: diff.x_min + (diff.x_max - diff.x_min) / 2,\n        y: diff.y_min + (diff.y_max - diff.y_min) / 2,\n    };\n}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button z-in mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon>add</app-icon>\n        </button>\n        <button z-out mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon>remove</app-icon>\n        </button>\n        <button reset mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon>autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 0.5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () =>\n        this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'an-action-field',\n    template: `\n        <div\n            class=\"flex items-center rounded p-2 border border-gray-300 hover:border-black\"\n            role=\"button\"\n            [attr.disabled]=\"disabled\"\n            form-field\n            tabindex=\"0\"\n            (keydown.enter)=\"performAction()\"\n        >\n            <div\n                placeholder\n                class=\"flex-1 w-0 truncate\"\n                (click)=\"performAction()\"\n            >\n                <ng-content></ng-content>\n            </div>\n            <app-icon class=\"text-xl\" (click)=\"performAction()\">\n                arrow_drop_{{ show_tooltip ? 'up' : 'down' }}\n            </app-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div:hover {\n                box-shadow: inset 0 0 0 1px #000;\n            }\n        `,\n    ],\n})\nexport class ActionFieldComponent {\n    /** Name of the field */\n    @Input() public name: string;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Emitter for user interaction events */\n    @Output('onAction') public on_action = new EventEmitter();\n    /** Whether to show tooltip */\n    public show_tooltip = false;\n\n    /**\n     * Emit that the user has performed an action on the field\n     */\n    public performAction() {\n        this.show_tooltip = !this.show_tooltip;\n        this.on_action.emit();\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'a-counter',\n    template: `\n        <div\n            counter\n            class=\"flex items-center text-base\"\n            (window:keydown.shift)=\"shift_key = true\"\n            (window:keydown.control)=\"ctrl_key = true\"\n            (window:keydown.meta)=\"ctrl_key = true\"\n            (window:keyup.shift)=\"shift_key = false\"\n            (window:keyup.control)=\"ctrl_key = false\"\n            (window:keyup.meta)=\"ctrl_key = false\"\n        >\n            <button\n                mat-icon-button\n                name=\"remove\"\n                type=\"button\"\n                [disabled]=\"!value || value === min\"\n                (click)=\"remove()\"\n            >\n                <app-icon>remove</app-icon>\n            </button>\n            <div value class=\"p-1 text-center\">{{ (render_fn ? render_fn(value) : value) || '0' }}</div>\n            <button\n                mat-icon-button\n                name=\"add\"\n                type=\"button\"\n                [disabled]=\"value === max\"\n                (click)=\"add()\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            [value] {\n                min-width: 3em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => CounterComponent),\n            multi: true,\n        },\n    ],\n})\nexport class CounterComponent implements ControlValueAccessor {\n    /** Size of a single step */\n    @Input() public step = 1;\n    /** Maximum amount for the counter */\n    @Input() public max = 10;\n    /** Minimum amount for the counter */\n    @Input() public min = 0;\n    /** Custom function for rendering the counter value */\n    @Input() public render_fn: (v: number) => string;\n    /** Current value of the counter */\n    public value: number;\n    /** Whether shift key is being held by the user */\n    public shift_key: boolean;\n    /** Whether control key is being held by the user */\n    public ctrl_key: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public add() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value += step;\n        if (this.value > this.max) {\n            this.value = this.max || 10;\n        }\n        this.setValue(this.value);\n    }\n\n    /** Remove the `step` from the current value */\n    public remove() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value -= step;\n        if (this.value < this.min) {\n            this.value = this.min || 0;\n        }\n        this.setValue(this.value);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import {\n    Component,\n\n    forwardRef,\n\n    Injectable, Input, OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    DateAdapter,\n    MatDateFormats,\n    MAT_DATE_FORMATS,\n    NativeDateAdapter\n} from '@angular/material/core';\nimport {\n    addYears,\n\n    endOfDay,\n    format,\n    formatISO,\n    set, startOfDay\n} from 'date-fns';\nimport { BaseClass } from 'libs/common/src/lib/base.class';\nimport { HashMap } from 'libs/common/src/lib/types';\n\n@Injectable()\nclass FieldDateAdapter extends NativeDateAdapter {\n    format(date: Date, displayFormat: HashMap | string): string {\n        if (displayFormat === 'input') {\n            return format(date, 'MMMM d, yyyy');\n        }\n        return format(date, 'MMM yyyy');\n    }\n}\nconst FIELD_DATE_FORMATS: MatDateFormats = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'input',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n@Component({\n    selector: 'a-date-field',\n    template: `\n        <mat-form-field appearance=\"outline\" overlay (click)=\"picker.open()\">\n            <input\n                matInput\n                [ngModel]=\"date\"\n                [disabled]=\"disabled\"\n                [min]=\"from\"\n                [max]=\"until\"\n                (ngModelChange)=\"setValue($event)\"\n                [matDatepicker]=\"picker\"\n            />\n            <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        { provide: DateAdapter, useClass: FieldDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: FIELD_DATE_FORMATS },\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DateFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = new Date().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: string;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** First allowed date on the calendar */\n    public get from(): Date {\n        return new Date(this._from) || startOfDay(new Date());\n    }\n    /** Current date value */\n    public get until(): Date {\n        return new Date(this._to) || addYears(endOfDay(new Date()), 1);\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return format(new Date(this.date), 'DD MMM YYYY');\n    }\n\n    public ngOnInit() {\n        this.date = new Date().toISOString();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        // Keep hours and minutes of the old date\n        const old_date = new Date(this.date);\n        let new_date = set(new_value, {\n            hours: old_date.getHours(),\n            minutes: old_date.getMinutes(),\n        }).valueOf();\n        // Check that new date is before from\n        if (new_date < this.from.valueOf()) {\n            new_date = this.from.valueOf();\n        }\n        this.date = formatISO(new_date || new Date());\n        if (this._onChange) {\n            this._onChange(new_date);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = formatISO(value || new Date());\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n}\n","import { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Identity } from '@placeos/common';\nimport { formatDuration } from 'date-fns';\nimport * as dayjs from 'dayjs';\n\n\n\n@Component({\n    selector: 'a-duration-field',\n    template: `\n        <div class=\"duration-field\" [attr.disabled]=\"disabled\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    #select\n                    [value]=\"duration\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"duration + ' minutes'\"\n                    (valueChange)=\"setValue($event)\"\n                >\n                    <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n                <mat-error><ng-content></ng-content></mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DurationFieldComponent implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max = 240;\n    /** Minimum duration option available */\n    @Input() public min = 30;\n    /** Step value between options */\n    @Input() public step = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Special case prepopulation i.e. out of step options */\n    @Input() public specialPreprops: Array<number> = [];\n\n    public duration = 60;\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        const date = this.time ? dayjs(this.time) : null;\n\n        // Add special case for 10min duration/prepropulation\n        for (const option of this.specialPreprops) {\n            blocks.push({\n                id: option,\n                name: date\n                    ? `${date.add(option, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(option / 60),\n                          minutes: option % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(option / 60), minutes: option % 60 })}`,\n            });\n        }\n\n        while (time <= max) {\n            blocks.push({\n                id: time,\n                name: date\n                    ? `${date.add(time, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(time / 60),\n                          minutes: time % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(time / 60), minutes: time % 60 })}`,\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { BaseClass, Identity, timeFormatString } from '@placeos/common';\nimport {\n    addMinutes,\n    endOfDay,\n    format,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n    startOfDay,\n    startOfMinute\n} from 'date-fns';\n\n@Component({\n    selector: 'a-time-field',\n    template: `\n        <mat-form-field\n            appearance=\"outline\"\n            [style.display]=\"show_select ? 'none' : ''\"\n            (keydown.enter)=\"showSelect()\"\n        >\n            <input\n                matInput\n                type=\"time\"\n                [disabled]=\"disabled\"\n                [ngModel]=\"time\"\n                (ngModelChange)=\"setValue($event)\"\n            />\n            <button mat-icon-button matSuffix class=\"relative top-1 -right-1\" (click)=\"showSelect()\">\n                <app-icon class=\"text-2xl text-black text-opacity-50\">\n                    arrow_drop_down\n                </app-icon>\n            </button>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n            <mat-select\n                #select\n                [value]=\"time\"\n                [disabled]=\"disabled\"\n                (valueChange)=\"setValue($event)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of time_options\"\n                    [value]=\"option.id\"\n                >\n                    {{ option.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class TimeFieldComponent\n    extends BaseClass\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step = 15;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Whether past times are allowed */\n    @Input() public no_past_times = true;\n    /** String representing the currently set time */\n    public date: number = new Date().valueOf();\n    /** String representing the currently set time */\n    public time: string = format(new Date(), 'HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n        this.timeout('hide', () => (this.show_select = false));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(\n                this.date,\n                !this.no_past_times,\n                this.step\n            );\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = (this.time || '00:00').split(':');\n        const date = set(this.date, { hours: +time[0], minutes: +time[1] });\n        if (\n            date.getMinutes() % 15 !== 0 &&\n            !this._time_options.find(\n                (time) => time.id === format(date, 'HH:mm')\n            )\n        ) {\n            this._time_options.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            this._time_options.sort((a, b) =>\n                `${a.id}`.localeCompare(`${b.id}`)\n            );\n        }\n        return this._time_options;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        if (this._onChange) {\n            const time = (this.time || '00:00').split(':');\n            const date = startOfMinute(\n                set(this.date, { hours: +time[0], minutes: +time[1] })\n            );\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value || this.date;\n        let date = startOfMinute(this.date);\n        date = roundToNearestMinutes(date, { nearestTo: 5 });\n        this.time = format(date, 'HH:mm');\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription(\n                    'listen_close',\n                    this.select_field.openedChange.subscribe((state) => {\n                        if (!state) {\n                            this.show_select = false;\n                        }\n                    })\n                );\n            }\n        });\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(\n        datestamp: number,\n        show_past: boolean,\n        step: number = 15\n    ): Identity[] {\n        const now = new Date();\n        let date = new Date(datestamp);\n        const blocks = [];\n        if (show_past || (!isSameDay(date, now) && isAfter(date, now))) {\n            date = startOfDay(date);\n        } else if (isAfter(date, now)) {\n            date = now;\n        }\n        date = roundToNearestMinutes(date, { nearestTo: step });\n        const end = endOfDay(date);\n        // Add options for the rest of the day\n        while (isAfter(end, date)) {\n            blocks.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            date = addMinutes(date, step);\n        }\n        return blocks;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Output,\n    EventEmitter,\n    Input,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    BaseClass,\n    csvToJson,\n    currentUser,\n    downloadFile,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nimport { NewUserModalComponent, User, USER_DOMAIN } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nfunction validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\n@Component({\n    selector: 'a-user-list-field',\n    template: `\n        <div\n            class=\"mb-4bg-white text-black\"\n            form-field\n            [attr.disabled]=\"disabled\"\n        >\n            <div search>\n                <a-user-search-field\n                    [(ngModel)]=\"search_user\"\n                    [guests]=\"guests\"\n                    [filter]=\"filter\"\n                    error=\"Click on Add External to add an attendee.\"\n                    [empty_fn]=\"emptyClick\"\n                    [validate]=\"validFn\"\n                    (ngModelChange)=\"addUser($event)\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"!hide_actions\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    name=\"new-contact\"\n                    class=\"clear underline flex-1\"\n                    (click)=\"openNewUserModal()\"\n                    i18n=\"Add new external attendee\"\n                >\n                    Add External\n                </button>\n                <button\n                    mat-button\n                    type=\"button\"\n                    class=\"clear underline flex-1 relative\"\n                    name=\"upload-csv\"\n                    i18n=\"Upload attendee list from CSV file\"\n                >\n                    Upload CSV\n                    <input\n                        class=\"opacity-0 absolute inset-0\"\n                        type=\"file\"\n                        (change)=\"addUsersFromFile($event)\"\n                    />\n                </button>\n                <button\n                    mat-button\n                    type=\"button\"\n                    class=\"clear underline flex-1\"\n                    name=\"download-template\"\n                    (click)=\"downloadCSVTemplate()\"\n                    i18n=\"Download template CSV file\"\n                >\n                    CSV Template\n                </button>\n            </div>\n            <div\n                class=\"flex flex-col py-2\"\n                *ngIf=\"active_list?.length; else empty_state\"\n            >\n                <div\n                    user\n                    *ngFor=\"let user of active_list\"\n                    class=\"flex items-center space-x-2 p-2 hover:bg-black hover:bg-opacity-5 rounded\"\n                    (click)=\"user.is_external ? openNewUserModal(user) : ''\"\n                >\n                    <a-user-avatar\n                        [user]=\"user\"\n                        [icon]=\"!user.is_external\"\n                        [matTooltip]=\"\n                            user.is_external\n                                ? 'External Attendee'\n                                : 'Staff Attendee'\n                        \"\n                        matTooltipPosition=\"right\"\n                    >\n                        <div class=\"h-full w-full bg-success text-white\">\n                            <app-icon>done</app-icon>\n                        </div>\n                    </a-user-avatar>\n                    <div class=\"flex-1 w-1/4\">\n                        <div class=\"truncate\">{{ user.name }}</div>\n                        <div class=\"text-xs truncate\">{{ user.email }}</div>\n                    </div>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"\n                            user.required = !user.required;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"user.required\"\n                        [class.text-white]=\"user.required\"\n                        matTooltip=\"Required\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon>{{\n                            user.required ? 'person' : 'person_outline'\n                        }}</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        [disabled]=\"!user.is_external\"\n                        (click)=\"\n                            user.visit_expected = !user.visit_expected;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"\n                            user.is_external && user.visit_expected\n                        \"\n                        [class.text-white]=\"\n                            user.is_external && user.visit_expected\n                        \"\n                        matTooltip=\"Physical visit expected\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon>meeting_room</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        [disabled]=\"!user.is_external\"\n                        (click)=\"\n                            user.assistance_required = !user.assistance_required;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"user.assistance_required\"\n                        [class.text-white]=\"user.assistance_required\"\n                        matTooltip=\"Assistance Required\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon *ngIf=\"user.is_external\"\n                            >contact_support</app-icon\n                        >\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"removeUser(user); $event.stopPropagation()\"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"m-2 opacity-50 text-center\" i18n=\"Attendee empty state\">\n                None\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            button {\n                background: transparent;\n                border-top: none !important;\n                border-bottom: none !important;\n            }\n\n            [search] {\n                height: 3.5rem;\n                margin-top: -0.25rem;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserListFieldComponent\n    extends BaseClass\n    implements ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Number of characters needed before a search will start */\n    @Input() public limit = 3;\n    /** Whether guests should also show when searching for users */\n    @Input() public guests = false;\n    /** Whether optional actions should be shown */\n    @Input('hideActions') public hide_actions = false;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any) => boolean;\n    /** Emitter for action to make a new user */\n    @Output() public new_user = new EventEmitter<void>();\n\n    public search_user: User;\n\n    /** User list to display */\n    public user_list: User[] = [];\n    /** List of active selected users on the list */\n    public active_list: User[] = [];\n    /** Whether user list is loading */\n    public loading: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: User[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User[]) => void;\n\n    public readonly validFn = (s) => validateEmail(s);\n    public readonly emptyClick = () => this.openNewUserModal(new User());\n\n    constructor(\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    /**\n     * Add user to the user list\n     * @param user\n     */\n    public addUser(user: User) {\n        const list = this.active_list.filter((_) => _.email !== user.email);\n        this.setValue([\n            ...list,\n            new User({\n                ...user,\n                id: user.id || user.email,\n                visit_expected:\n                    (!user.id && user.is_external !== true\n                        ? user.visit_expected\n                        : null) ?? true,\n            }),\n        ]);\n        this.timeout('clear_user', () => (this.search_user = null), 10);\n    }\n\n    /**\n     * Remove user from the user list\n     * @param user\n     */\n    public removeUser(user: User) {\n        const list = this.active_list.filter(\n            (a_user) => a_user.email !== user.email\n        );\n        this.setValue(list);\n    }\n\n    /**\n     * Load CSV file and populate the user list with the contents\n     * @param event File input field event\n     */\n    public addUsersFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    this.processCsvData((evt.srcElement as any).result);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    /**\n     * Process raw CSV data and save user data to attendee list\n     * @param data CSV data\n     */\n    private processCsvData(data: string) {\n        const list = csvToJson(data) || [];\n        const id = currentUser()?.staff_id || 'unknown';\n        for (const el of list) {\n            el.name = el.name || `${el.first_name} ${el.last_name}`;\n            const display = (\n                el.name || `${Math.floor(Math.random() * 9999_9999)}`\n            )\n                .split(' ')\n                .join('_')\n                .toLowerCase();\n            /* istanbul ignore else */\n            if (!el.email) {\n                el.email = `${display}+${id}@guest.${USER_DOMAIN}`;\n            }\n            const internal_emails = this._settings.get(\n                'app.booking.internal_emails'\n            ) || ['place.tech'];\n            el.visit_expected =\n                el.visit_expected ??\n                !internal_emails.find((_) => el.email.endsWith(_));\n\n            /** Convert phone to string. PWCME-544 */\n            el.phone = '' + el.phone;\n\n            this.addUser(new User(el));\n        }\n    }\n\n    /* istanbul ignore next */\n    /** Download template CSV file */\n    public downloadCSVTemplate() {\n        const template = `Organisation,First Name,Last Name,Email,Phone,Assistance Required,Visit Expected\\nFake Org,John,Smith,john.smith@example.com,01234567898,false,true`;\n        downloadFile('template.csv', template);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User[]): void {\n        this.active_list = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User[]) {\n        this.active_list = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User[]) => void): void {\n        this._onTouch = fn;\n    }\n\n    public displayFn(item): string {\n        return item?.name || '';\n    }\n\n    /**\n     * Open modal to add or update user details\n     */\n    public openNewUserModal(user: User = new User()) {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: { user },\n            }\n        );\n        ref.componentInstance?.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                this.addUser(event.metadata);\n                ref.close();\n            });\n    }\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n    Component,\n    OnInit,\n    forwardRef,\n    Input,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of, forkJoin } from 'rxjs';\nimport {\n    switchMap,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    catchError,\n} from 'rxjs/operators';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { searchGuests, searchStaff, User } from '@placeos/users';\n\n@Component({\n    selector: 'a-user-search-field',\n    template: `\n        <div class=\"user-search-field text-black\" form-field>\n            <mat-form-field overlay appearance=\"outline\">\n                <input\n                    #input\n                    matInput\n                    keyboard\n                    name=\"user-search\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event || '')\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"placeholder || 'Search for user...'\"\n                    [matAutocomplete]=\"auto\"\n                    (keyup.enter)=\"\n                        validate && validate(search_str)\n                            ? setValue(search_str)\n                            : ''\n                    \"\n                    (blur)=\"resetSearchString()\"\n                    (focus)=\"cancelReset()\"\n                />\n                <app-icon matPrefix class=\"text-2xl relative\">search</app-icon>\n                <mat-spinner\n                    *ngIf=\"loading\"\n                    matSuffix\n                    diameter=\"16\"\n                ></mat-spinner>\n            </mat-form-field>\n            <mat-autocomplete\n                #auto=\"matAutocomplete\"\n                (optionSelected)=\"setValue($event.option.value)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of user_list\"\n                    (click)=\"setValue(option); blurInput()\"\n                >\n                    <div class=\"leading-tight\">{{ option.name }}</div>\n                    <div class=\"text-xs text-black opacity-60\">\n                        {{ option.email }}\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"search_str && validate && validate(search_str)\"\n                    class=\"relative pointer-events-none\"\n                >\n                    <div\n                        class=\"absolute inset-0 px-4 pointer-events-auto\"\n                        (mousedown)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (touchstart)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (click)=\"\n                            setValue(search_str);\n                            $event.stopPropagation();\n                            $event.preventDefault()\n                        \"\n                    >\n                        <div class=\"pointer-events-none\">\n                            Add external attendee \"{{ search_str }}\"\n                        </div>\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"!user_list?.length && (search_str || error)\"\n                    [disabled]=\"!empty_fn\"\n                    (click)=\"empty_fn()\"\n                >\n                    {{ search_str ? 'No users found.' : '' }} {{ error }}\n                </mat-option>\n            </mat-autocomplete>\n        </div>\n    `,\n    styles: [\n        `\n            :host,\n            mat-form-field {\n                width: 100%;\n            }\n\n            app-icon {\n                top: 0.15em;\n                left: -0.15em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserSearchFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Placeholder text to display */\n    @Input() public placeholder: string;\n    /** Limit available options to these */\n    @Input() public options: User[];\n    /** Whether guests should also show when searching for users */\n    @Input() public guests: boolean;\n    /** Message to display when no user matches have been found */\n    @Input() public error = '';\n    /** Function to validate the search string */\n    @Input() public validate: (s: string) => boolean;\n    /** Function to call when empty list option is clicked */\n    @Input() public empty_fn: () => void;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any, s?: string) => boolean;\n\n    @Input() public query_fn: (_: string) => Observable<User[]> = (q) =>\n        searchStaff(q);\n    /** Currently selected user */\n    public active_user: User;\n    /** User list to display */\n    public user_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** List of users from an API search */\n    public search_results$: Observable<User[]> = this.search$.pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap((query) => {\n            this.loading = true;\n            return this.options && this.options.length > 0\n                ? of(this.options)\n                : query.length >= 3\n                ? !this.guests\n                    ? this.query_fn(query)\n                    : forkJoin([searchStaff(query), searchGuests(query)])\n                : of([]);\n        }),\n        catchError((_) => of([])),\n        map((list: User[]) => {\n            this.loading = false;\n            list = flatten(list);\n            const search = (this.search_str || '').toLowerCase();\n            return list.filter(\n                (item) => !this.filter || this.filter(item, search)\n            );\n        })\n    );\n\n    /** Form control on change handler */\n    private _onChange: (_: User) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User) => void;\n\n    @ViewChild('input', { read: ElementRef })\n    private _input_el: ElementRef<HTMLInputElement>;\n\n    public cancelReset = () => this.clearTimeout('reset');\n\n    public blurInput = () => {\n        this.timeout('blur', () => this._input_el?.nativeElement?.blur());\n    };\n\n    public ngOnInit(): void {\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.user_list = list))\n        );\n    }\n\n    /**\n     * Reset the search string back to the name of the active user\n     */\n    public resetSearchString() {\n        this.timeout(\n            'reset',\n            () => (this.search_str = this.active_user?.name || ''),\n            100\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User | string, email?: string): void {\n        if (\n            typeof new_value === 'string' &&\n            (new_value as any) === this.search_str\n        ) {\n            new_value = new User({\n                name: (this.search_str || email || '').split('@')[0],\n                email: this.search_str || email || '',\n            });\n        }\n        if (!(new_value instanceof User)) return;\n        this.active_user = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User) {\n        this.active_user = value;\n        this.resetSearchString();\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import { PlaceZone } from '@placeos/ts-client';\n\nexport class Desk {\n    /** ID of the desk also map_id */\n    public readonly id: string;\n    /** ID of the desk on the associated map */\n    public readonly map_id: string;\n    /** Name of the desk */\n    public readonly name: string;\n    /** Whether desk is available / bookable */\n    public readonly bookable: boolean;\n    /** Zone/Level of the desk */\n    public readonly zone: PlaceZone;\n    /** Group/Department allocated to the desk */\n    public readonly groups: string[];\n    /** QR code image data */\n    public readonly qr_code: string;\n\n    constructor(data: Partial<Desk> = {}) {\n        this.id = data.id || '';\n        this.map_id = data.map_id || data.id || '';\n        this.name = data.name || '';\n        this.bookable = data.bookable ?? false;\n        this.zone = data.zone || new PlaceZone();\n        this.groups = data.groups || [];\n        this.qr_code = data.qr_code || '';\n    }\n\n    public format() {\n        const { id, name, bookable, groups } = this;\n        return {\n            id,\n            name,\n            bookable,\n            groups,\n        };\n    }\n\n    public readonly toJSON = () => this.format();\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { Point } from '@placeos/svg-viewer';\nimport { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n","import { del, get, patch } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from './user.class';\nimport { Observable } from 'rxjs';\n\nconst GUEST_ENDPOINT = '/api/staff/v1/guests';\n\nexport interface GuestsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n}\n\n/**\n * Search guests\n * @param q Search string for filtering guests\n */\nexport function searchGuests(q: string): Observable<GuestUser[]> {\n    const query = toQueryString({ q });\n    return get(`${GUEST_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * List guests\n * @param q Parameters to pass to the API request\n */\nexport function queryGuests(q: GuestsQueryParams): Observable<GuestUser[]> {\n    const query = toQueryString({ ...q });\n    return get(`${GUEST_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * Get guest details\n * @param id ID of the guest\n */\nexport function showGuest(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Update guest metadata\n * @param id ID of the guest\n * @param data New metadata state\n */\nexport function updateGuest(id: string, data: Partial<GuestUser>) {\n    return patch(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, data).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Remove a guest\n * @param id ID of the guest to remove\n */\nexport function removeGuest(id: string) {\n    return del(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * List upcoming meetings for a guest\n * @param id ID of the guest\n */\nexport function listGuestMeetings(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}/meetings`).pipe(\n        map((list) => list.map((item) => new CalendarEvent(item)))\n    );\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n"],"sourceRoot":"webpack:///"}