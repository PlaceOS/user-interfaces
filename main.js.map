{"version":3,"sources":["./apps/concierge/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./apps/concierge/src/app/day-view/event-form.component.ts","./apps/concierge/src/app/day-view/booking-modal.component.ts","./apps/concierge/src/app/day-view/events-state.service.ts","./apps/concierge/src/app/ui/date-options.component.ts","./apps/concierge/src/app/ui/searchbar.component.ts","./apps/concierge/src/app/ui/sidebar.component.ts","./apps/concierge/src/app/ui/ui.module.ts","./apps/concierge/src/app/ui/view-event-details.component.ts","./apps/concierge/src/app/app-routing.module.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/realtime/meeting.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/index.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/components/src/lib/app.component.ts","./apps/concierge/src/app/app.module.ts","./apps/concierge/src/environments/environment.prod.ts","./apps/concierge/src/main.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/concierge/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/angular-animations.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/placeos.ts","./libs/common/src/lib/user-state.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/base.class.ts","./libs/common/src/lib/general.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/map-pin.component.ts","./libs/components/src/lib/map-radius.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/login.component.ts","./libs/components/src/lib/unauthorised.component.ts","./libs/components/src/lib/authorised-user.guard.ts","./libs/components/src/lib/components.module.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/components/src/lib/custom-table.component.ts","./libs/components/src/lib/custom-tooltip.component.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/map-polygon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/user-avatar.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/events/src/lib/validators.ts","./libs/events/src/lib/utilities.ts","./libs/events/src/lib/event-form.service.ts","./libs/events/src/lib/event.class.ts","./libs/events/src/lib/events.fn.ts","./libs/events/src/lib/helpers.ts","./libs/form-fields/src/lib/form-fields.module.ts","./libs/form-fields/src/lib/action-field.component.ts","./libs/form-fields/src/lib/counter.component.ts","./libs/form-fields/src/lib/date-field.component.ts","./libs/form-fields/src/lib/duration-field.component.ts","./libs/form-fields/src/lib/item-list-field.component.ts","./libs/form-fields/src/lib/time-field.component.ts","./libs/form-fields/src/lib/user-list-field.component.ts","./libs/form-fields/src/lib/user-search-field.component.ts","./libs/organisation/src/lib/desk.class.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/users/src/lib/location.class.ts","./libs/users/src/lib/guests.fn.ts","./libs/users/src/lib/staff.fn.ts","./libs/users/src/lib/user.class.ts","./libs/users/src/lib/user.utilities.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","form","EventFormComponent","_dialog","this","controls","resources","value","map","i","display_name","name","join","ref","open","data","spaces","date","duration","success","race","componentInstance","event","pipe","first","_","reason","toPromise","afterClosed","patchValue","metadata","close","BookingModalComponent","_data","_service","_dialog_ref","loading","newForm","postForm","catch","emit","EventsStateService","_spaces","super","_poll","BehaviorSubject","_period","_bookings","_event","_filters","_options","_date","Date","valueOf","_zones","_loading","asObservable","zones","options","filtered","combineLatest","events","filters","period","end_fn","endOfMonth","endOfWeek","endOfDay","start","startOfMonth","startOfWeek","startOfDay","end","console","log","filterEvents","shareReplay","filter","debounceTime","switchMap","length","of","next","zone_ids","period_start","getUnixTime","period_end","catchError","tap","processBookings","subscribe","getValue","details","old_options","delay","now","interval","clearInterval","replace","title","content","format","location","icon","class","system_id","system","remove","booking","new_bookings","bkn","concat","bookings","forEach","space","find","s","email","from","to","intersects","in_zone","r","z","includes","has_space","space_emails","in_zones","zone","show","hide_type","guests","status","DateOptionsComponent","dateChange","previousDay","nextDay","SearchbarComponent","model","modelChange","SidebarComponent","_settings","_org","buildings","building_list","active_building","setBuilding","b","building","get","MAT_MODULES","ANGULAR_MODULES","UIModule","ViewEventDetailsComponent","_state","setEvent","edit","newBooking","removeBooking","level","$event","stopPropagation","routes","path","component","loadChildren","m","DayViewModule","canActivate","canLoad","FacilitiesModule","VisitorsModule","DesksModule","ReportsModule","StaffModule","CateringModule","PointsModule","redirectTo","AppRoutingModule","useHash","MOCK_MENU","unit_price","category","tags","group","generateCateringOrder","differenceInMinutes","event_start","event_end","mx","event_id","invoice_number","charge_code","deliver_at","addMinutes","Math","floor","items","Array","fill","idx","quantity","MOCK_ORGS","created_at","updated_at","description","count","capacity","parent_id","triggers","MOCK_BUILDINGS","levels","MOCK_LEVELS","bld","num","map_id","substr","endsWith","split","type","mockLevel","reduce","p","c","MOCK_METADATA","current","contacts","first_name","last_name","ZONE_MOCKS","padString","str","method","callback","request","query_params","message","bindings","area_management","location_services","catering","parts","route_params","generateMockDeskMetadata","map_regions","areas","properties","label_location","x","y","body","DESK_FEATURES","desks","bookable","features","lvl","registerMocks","DOMAIN","PREDEF_USERS","ACTIVE_USER","groups","MOCK_STAFF","toLowerCase","MOCK_GUESTS","visit_expected","randomSpaceFeatures","f","numFeatures","res","push","el","indexOf","MOCK_SPACES","d","EVENT_TIME","startOf","hour","nextEventTime","save","add","unix","event_status","randomStatus","rnd","MOCK_EVENTS","index","PEOPLE","attendees","sort","a","resource","unshift","meeting_url","host","calendar","creator","response_status","private","timezone","all_day","recurring","recurrence","attachments","meeting_id","meeting_provider","extension_data","setup","breakdown","event_spaces","USER_MOCKS","person","user","q","search","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","checked_in","last_seen","subtract","geo","lat","lon","RoomModule","volume","connected","active","input_list","output_list","env_sources","inputs","Object","outputs","t","source","key","state","input","output","$updateState","following","mute","$mute","locked","Mic1","mod","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","overrides","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","setInterval","u","isBefore","pending","subSeconds","addSeconds","MockLocationServicesModule","overview","username","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","number","area_id","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","CaptureModule","live","remaining","$start","createCaptureModule","MeetingPushModule","supported_meeting_url","args","createMeetingPushModule","SYSTEM_MOCKS","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","MeetingPush","createSystem","EVENT_MOCKS","new_event","item","findIndex","splice","CALENDAR_MOCKS","user2","user3","summary","primary","can_edit","hidden","handleSpaceAvailability","systems","system_ids","has","setHours","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","BOOKING_MOCKS","updateBooking","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","listen","localStorage","setItem","getItem","reload","copy","navigator","clipboard","readText","tkn","addHours","setTimeout","initialised","settings","mock","origin","onInitError","timeout","clearTimeout","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","is_logged_in","error","AppModule","provide","useValue","separatorKeyCodes","showDialog","deps","enabled","bootstrapModule","err","Calendar","availability","starts_at","ends_at","CALENDAR_ENDPOINT","calendarsToSpaces","org","list","cal","levelWithID","querySpaceAvailability","query","queryCalendarAvailability","querySpaceFreeBusy","CateringItem","discount_cap","accept_points","total_cost","options_string","localeCompare","CateringOrder","item_count","amount","getTime","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","window","addEventListener","mapKey","last_down","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","v","non_meta","DEFAULT_SETTINGS","debug","composer","domain","route","protocol","port","use_domain","local_login","app","short_name","logo_light","src","logo_dark","general","menu","SettingsService","_title","_app_name","_overrides","_subjects","_observables","time","built","isSameDay","init","getTitle","setTitle","pathname","slice","toUpperCase","_initialised","application","override_settings","override","opacity","height","ANIMATION_SHOW_CONTRACT_EXPAND","_available","_activated","_timer","setNotifyOutlet","snackbar","notify","action","on_action","config","snackbar_ref","panelClass","dismiss","onAction","notifySuccess","msg","notifyError","notifyInfo","info","setupCache","cache","isEnabled","unsubscribe","available","hash","activateUpdate","activated","checkForUpdate","setupPlace","hostname","url","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","_current_user","current_user","currentUser","jest","retry","toQueryString","hasOwnProperty","BaseClass","_timers","_intervals","_subscriptions","destroy","unsub","fn","Function","contains","subs","k","setAppName","stream","force","app_name","colors","getItemWithKeys","shift","unique","array","pos","arr","randomInt","ceil","random","openConfirmModal","dialog","csvToJson","csv","delimiter","objPattern","RegExp","arrMatches","arrData","exec","headers","row","element","JSON","parse","jsonToCsv","json","valid_keys","stringify","downloadFile","filename","contents","document","createElement","setAttribute","encodeURIComponent","style","display","appendChild","click","removeChild","flatten","an_array","stack","pop","isArray","reverse","timePeriodsIntersect","start1","end1","start2","end2","seed","h","imul","charCodeAt","xmur3","rand","predictableRandomInt","timeFormatString","localeString","toLocaleTimeString","querySelector","getAttribute","language","is24HourTime","getInvalidFields","invalid","valid","PopoutMenuComponent","actions","MapPinComponent","_details","stroke","show_message","MapRadiusComponent","_el","zoom","radius","max","formatDistanceToNow","updateRadius","box","nativeElement","getBoundingClientRect","width","StatusOverlayComponent","links","UnauthorisedComponent","PLACEOS_APP_ACCESS","AuthorisedUserGuard","_router","_access","checkUser","segments","can_activate","navigate","ComponentsModule","ActionIconComponent","className","CONFIRM_METADATA","maxHeight","maxWidth","ConfirmModalComponent","confirm_text","cancel_text","disableClose","enableClose","CustomTableComponent","pagination","page_size","column_size","template","data_source","_sort","paginator","_paginator","filterPredicate","changes","dataSource","subscription","trim","columns","display_column","injector","CustomTooltipData","CustomTooltipComponent","_element","_overlay","_injector","backdrop","hover","_overlay_ref","onClick","onEnter","onLeave","_updateInjector","x_pos","y_pos","ngOnDestroy","_updateType","_portal","create","hasBackdrop","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","attach","backdropClick","dispose","providers","parent","GlobalLoadingComponent","IconComponent","MAP_FEATURE_DATA","InteractiveMapComponent","center","injectors","_on_changes","updateDisplay","_feature_list","toArray","viewer","createView","ratio$","ratio","focus","focusOn","styles","labels","updateView","feature_list","desired_zoom","desired_center","_outlet_el","rect","mappings","w","MapPolygonComponent","_cdr","color","padding","scale","offset_x","offset_y","points","point_list","data$","processPoints","diff","x_min","x_max","y_min","y_max","range","edge_padding","detectChanges","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","UserAvatarComponent","DEFAULT_KEYS","VirtualKeyboardComponent","keyset","onFocus","onBlur","blur","global","bottom","centerHorizontally","cursor_pos","selectionStart","dispatchEvent","InputEvent","updateKeyState","focusInput","selectionEnd","endInFuture","control","isAfter","generateEventForm","organiser","recurring_master_id","master","visitor_type","needs_space","needs_parking","valueChanges","setValue","l","disable","replaceBookings","filter_options","updated_list","setMinutes","days","BOOKING_URLS","EventFormService","_view","_form","last_success","sessionStorage","available_spaces","view","some","clearForm","storeForm","removeItem","space_list","result","setView","_default_user","setDefaultCreator","CalendarEvent","nearestTo","online_meeting_url","online_meeting_id","online_meeting_provider","range_start","range_end","pattern","days_of_week","old_system","is_external","obj","hours","minutes","is_today","EVENTS_ENDPOINT","queryEvents","saveEvent","toJSON","updateEvent","createEvent","removeEvent","response_type","checkinEventGuest","guest_id","eventStatus","every","DURATION_MAP","month","months","week","weeks","day","minute","DEFAULT_RULES","auto_approve","stringToMinutes","addToDate","filterSpacesFromRules","rulemap","ruleset","checkRulesMatch","rules","rulesForSpace","matches","conditions","is_before","is_after","min_length","max_length","FormFieldsModule","ActionFieldComponent","show_tooltip","performAction","CounterComponent","step","min","ctrl_key","shift_key","new_value","_onChange","_onTouch","useExisting","multi","FieldDateAdapter","displayFormat","FIELD_DATE_FORMATS","dateInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DateFieldComponent","_from","offset","_to","toISOString","old_date","new_date","getHours","getMinutes","disabled","useClass","DurationFieldComponent","specialPreprops","duration_options","generateDurationOptions","blocks","option","ItemListFieldComponent","separators","item_list","addChipItem","removeChipItem","TimeFieldComponent","no_past_times","show_select","_time_options","generateAvailableTimes","select_field","openedChange","datestamp","show_past","showSelect","UserListFieldComponent","limit","hide_actions","new_user","user_list","active_list","validFn","test","emptyClick","openNewUserModal","search_user","a_user","target","file","files","reader","FileReader","readAsText","evt","processCsvData","srcElement","staff_id","internal_emails","phone","addUser","UserSearchFieldComponent","query_fn","search$","search_results$","search_str","cancelReset","blurInput","_input_el","active_user","resetSearchString","Desk","qr_code","BuildingLevel","locations","Organisation","raw_data","Building","disc_info","discovery_info","zone_id","extras","extra_id","extra_name","loan_items","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl_features","feature","level_id","catering_hours","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","OrganisationService","_buildings","_active_building","_levels","level_list","active_levels","levelsForBuilding","_building_settings","buildingSettings","bld_id","_organisation","id_list","tries","load","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","auth","org_zone","prev","curr","SpaceSelectItemComponent","SpaceSelectModalComponent","space_types","filtered_spaces","multiple","space_map","SharedSpacesModule","SPACE_COUNT","generateMockSpace","linked","long_name","searchable","controlable","cost_hour","support_url","linked_rooms","image","Space","configurations","SpacesService","_list","_compare","loadSpaces","predicate","valid_spaces","organisation","sys","NewUserModalComponent","markAllAsTouched","UserFormComponent","touched","SharedUsersModule","MapLocation","GUEST_ENDPOINT","searchGuests","showGuest","STAFF_ENDPOINT","searchStaff","showStaff","User","notes","photo","organizer","required","sys_admin","support","assistance_required","GuestUser","preferred_beverage","accepted_terms_conditions","StaffUser","card_number","USER_DOMAIN","setInternalUserDomain","generateUserForm","fields"],"mappings":"iFAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,KAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,IAGRL,EAAyBQ,KAAO,IAAM,GACtCR,EAAyBG,QAAUH,EACnCA,EAAyBS,GAAK,KAC9BC,EAAOC,QAAUX,G,mfCCT,kBACI,iBACI,mBAAmB,iBAAK,gBAAM,aAAC,QAAO,aAAC,QACvC,4BACI,mBAMA,qBAAW,sCAAyB,QACxC,QACJ,QACA,kBACI,oBAAkB,iBAAI,iBAAM,cAAC,QAAO,cAAC,QACrC,2BACJ,QACA,kBACI,kBACI,qBAAwB,uBAAU,iBAAM,cAAC,QAAO,cAAC,QACjD,4BAGI,0DAAiBY,KAAA,uBAEpB,QACL,QACA,kBACI,qBAAsB,qBAAQ,iBAAM,cAAC,QAAO,cAAC,QAC7C,gCAKJ,QACJ,QACA,kBACI,qBAAuB,iBAAI,iBAAM,cAAC,QAAO,cAAC,QAC1C,mCAIJ,QACA,kBACI,qBAAuB,sBAAS,iBAAM,cAAC,QAAO,cAAC,QAC/C,iCAIJ,QACA,kBACI,qBAAmB,kBAAK,iBAAM,cAAC,QAAO,cAAC,QACvC,+BAA8B,oEAA2B,UAEvD,QACN,QACJ,Q,wBAxDmB,0BAsBH,oDAAkC,6BASlC,yGAqBiD,2BAQlE,Y,MAAMC,EAWT,YAAoBC,GAAA,KAAAA,UARpB,a,UACI,OACwC,QAApC,EAA6B,QAA7B,EAAkB,QAAlB,EAAAC,KAAKH,KAAKI,gBAAQ,eAAEC,iBAAS,eAAEC,aAAK,eAC9BC,IAAKC,GAAMA,EAAEC,cAAgBD,EAAEE,MAChCC,KAAK,QAAS,iBAMd,c,8DACT,MAAMC,EAAMT,KAAKD,QAAQW,KAGvB,IAA2B,CACzBC,KAAM,CACFC,OAAqC,QAA7B,EAAkB,QAAlB,EAAAZ,KAAKH,KAAKI,gBAAQ,eAAEC,iBAAS,eAAEC,MACvCU,KAA8B,QAAxB,EAAkB,QAAlB,EAAAb,KAAKH,KAAKI,gBAAQ,eAAEY,YAAI,eAAEV,MAChCW,SAAsC,QAA5B,EAAkB,QAAlB,EAAAd,KAAKH,KAAKI,gBAAQ,eAAEa,gBAAQ,eAAEX,SAG1CY,QAAgB5B,QAAQ6B,KAAK,CAC/BP,EAAIQ,kBAAkBC,MACjBC,MAAK,EAAAC,EAAA,GAAOC,GAAgC,SAAbA,EAAEC,SACjCC,YACLd,EAAIe,cAAcD,cAEE,UAApBR,aAAO,EAAPA,EAASO,SACTtB,KAAKH,KAAK4B,WAAW,CAAEvB,UAAWa,EAAQW,WAE9CjB,EAAIkB,W,6CAjCC7B,GAAkB,c,wBAAlBA,EAAkB,kvBA5DvB,yB,KAAO,sB,4GA4DR,G,uCCrDC,kBAII,wBACJ,S,qBADgB,+B,wCAEhB,oBAII,oBAAmB,0DAAiB,gBAAI,QAC5C,S,yBAEI,kBAII,0BACA,aAAG,S,iBAAqB,QAC5B,S,qBAFiB,8BACV,sCAcZ,Y,MAAM8B,EAST,YACqCC,EACzBC,EACAC,GAFyB,KAAAF,QACzB,KAAAC,WACA,KAAAC,cAXK,KAAAb,MAAQ,IAAI,MAEb,KAAAc,QAAUhC,KAAK8B,SAASE,QAExC,WACI,OAAOhC,KAAK8B,SAASjC,KASlB,WACHG,KAAK8B,SAASG,QAAQjC,KAAK6B,MAAMX,OAGxB,O,8CACT,MAAMA,QAAclB,KAAK8B,SAASI,WAAWC,MAAOd,IAEhD,MADA,QAAYA,GACNA,IAEVrB,KAAKkB,MAAMkB,KAAK,CAAEd,OAAQ,OAAQI,SAAUR,KAC5C,QAAc,gCACdlB,KAAK+B,YAAYJ,W,6CA1BZC,GAAqB,MAUlB,MAAe,0B,wBAVlBA,EAAqB,8iB,GAAA,MAvC1B,kBACI,cAAI,uBAAW,QACf,iBACA,oBACI,oBAAU,iBAAK,QACnB,QACJ,QACA,wB,iBAMA,0B,kBAMA,4C,uBAXK,6CAA0B,cAM1B,gD,sJAyBN,GCgBA,Q,MAAMS,UAA2B,KA4GpC,YAAoBC,EAAgCvC,GAChDwC,QADgB,KAAAD,UAAgC,KAAAvC,UA1G5C,KAAAyC,MAAQ,IAAIC,EAAA,EAAwB,GAEpC,KAAAC,QAAU,IAAID,EAAA,EAA0C,OAExD,KAAAE,UAAY,IAAIF,EAAA,EAAiC,IAEjD,KAAAG,OAAS,IAAIH,EAAA,EAA+B,MAE5C,KAAAI,SAAW,IAAIJ,EAAA,EAAgC,IAE/C,KAAAK,SAAW,IAAIL,EAAA,EAAkC,IAEjD,KAAAM,MAAQ,IAAIN,EAAA,GAAwB,IAAIO,MAAOC,WAE/C,KAAAC,OAAS,IAAIT,EAAA,EAA0B,IAEvC,KAAAU,SAAW,IAAIV,EAAA,GAAyB,GAGhC,KAAA5B,KAAOb,KAAK+C,MAAMK,eAElB,KAAAC,MAAQrD,KAAKkD,OAAOE,eAEpB,KAAAE,QAAUtD,KAAK8C,SAASM,eAExB,KAAApB,QAAUhC,KAAKmD,SAASC,eAExB,KAAAlC,MAAQlB,KAAK4C,OAAOQ,eAEpB,KAAAG,UAAW,EAAAC,EAAA,IAAc,CACrCxD,KAAK2C,UACL3C,KAAK6C,SACL7C,KAAK+C,MACL/C,KAAK0C,QACL1C,KAAKkD,SACN/B,MACC,EAAAf,EAAA,GAAI,EAAEqD,EAAQC,EAAS7C,EAAM8C,EAAQN,MACjC,MAMMO,EACS,UAAXD,EACME,EAAA,EACW,SAAXF,EACAG,EAAA,EACAC,EAAA,EACJC,GAXS,UAAXL,EACMM,EAAA,EACW,SAAXN,EACAO,EAAA,EACAC,EAAA,GAOatD,GACjBuD,EAAMR,EAAO/C,GAEnB,OADAwD,QAAQC,IAAIb,GACLzD,KAAKuE,aAAad,EAAQO,EAAOI,EAAKV,EAASL,MAE1D,EAAAmB,EAAA,GAAY,IAIA,KAAAf,QAAS,EAAAD,EAAA,IAAc,CACnCxD,KAAK0C,QACL1C,KAAKkD,OACLlD,KAAK+C,MACL/C,KAAKwC,QACNrB,MACC,EAAAsD,EAAA,GAAQpE,KAAQA,EAAE,KAClB,EAAAqE,EAAA,GAAa,MACb,EAAAC,EAAA,GAAU,EAAEhB,EAAQN,EAAOxC,MACvB,KAAKwC,aAAK,EAALA,EAAOuB,QAAQ,OAAO,EAAAC,MAAG,IAC9B7E,KAAKmD,SAAS2B,MAAK,GACnB,MAMMlB,EACS,UAAXD,EACME,EAAA,EACW,SAAXF,EACAG,EAAA,EACAC,EAAA,EACJC,GAXS,UAAXL,EACMM,EAAA,EACW,SAAXN,EACAO,EAAA,EACAC,EAAA,GAOatD,GACjBuD,EAAMR,EAAO/C,GACnB,OAAO,QAAY,CACfkE,SAAU1B,EAAM7C,KAAK,KACrBwE,cAAc,EAAAC,EAAA,GAAYjB,GAC1BkB,YAAY,EAAAD,EAAA,GAAYb,KACzBjD,MAAK,EAAAf,EAAA,GAAKiB,GAAM,CAACA,EAAG2C,EAAOI,QAElC,EAAAe,EAAA,GAAW,KAAM,EAAAN,MAAG,CAAC,OACrB,EAAAO,EAAA,GAAI,EAAE3B,EAAQO,EAAOI,MACjBpE,KAAKqF,gBACD5B,GAAU,GACVO,aAAK,EAALA,EAAOf,UACPmB,aAAG,EAAHA,EAAKnB,WAETjD,KAAKmD,SAAS2B,MAAK,MAEvB,EAAA1E,EAAA,GAAI,EAAEqD,KAAYA,IAUlBzD,KAAKyD,OAAO6B,YANhB,cACI,OAAOtF,KAAK6C,SAAS0C,WAYlB,WAAWC,GACdxF,KAAK6C,SAASiC,KAAKU,GAOhB,QAAQ3E,GACXb,KAAK+C,MAAM+B,KAAKjE,GAOb,SAASwC,GACZrD,KAAKkD,OAAO4B,KAAKzB,GAOd,SAASnC,GACZlB,KAAK4C,OAAOkC,KAAK5D,GAOd,aAAaoC,GAChB,MAAMmC,EAAczF,KAAK8C,SAASyC,WAClCvF,KAAK8C,SAASgC,KAAK,OAAD,wBAAMW,GAAgBnC,IAOrC,aACHK,EAAmC,MACnC+B,EAAgB,KAEhB1F,KAAKwC,MAAMsC,KAAK9B,KAAK2C,OACrB3F,KAAK0C,QAAQoC,KAAKnB,GAClB3D,KAAK4F,SAAS,UAAW,IAAM5F,KAAKwC,MAAMsC,KAAK9B,KAAK2C,OAAQD,GAMzD,cACH1F,KAAKwC,MAAMsC,KAAK,GAChB9E,KAAK6F,cAAc,WAGV,WAAW3E,G,8CACpB,MAAMT,EAAMT,KAAKD,QAAQW,KAAKkB,EAAuB,CACjDjB,KAAM,CAAEO,WAENsE,QAAgBrG,QAAQ6B,KAAK,CAC/BP,EAAIQ,kBAAkBC,MACjBC,MAAK,EAAAC,EAAA,GAAOC,GAAmB,SAAbA,EAAEC,SACpBC,YACLd,EAAIe,cAAcD,cAEC,SAAnBiE,EAAQlE,QACZtB,KAAK8F,QAAQN,EAAQ9D,YAGZ,cAAcR,G,oDACvB,MAAMsE,QAAgB,QAClB,CACIO,MAAO,kBACPC,QAAS,mDAAkD,EAAAC,EAAA,GACvD,IAAIjD,KAAK9B,EAAML,MACf,gCACQK,EAAMgF,YAClBC,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,WAE9ChG,KAAKD,SAEc,SAAnByF,EAAQlE,SACZkE,EAAQxD,QAAQ,6BACV,QAAYd,EAAMxB,GAAI,CAAE2G,UAAuB,QAAZ,EAAAnF,EAAMoF,cAAM,eAAE5G,KACvDM,KAAKuG,OAAOrF,GACZsE,EAAQ7D,WAOL,QAAQ6E,GACX,MACMC,EADWzG,KAAK2C,UAAU4C,WAE3Bd,OAAQiC,GAAQA,EAAIhH,KAAO8G,EAAQ9G,IACnCiH,OAAO,CAACH,IACbxG,KAAK2C,UAAUmC,KAAK2B,GAOjB,OAAOD,GACV,MACMC,EADWzG,KAAK2C,UAAU4C,WACFd,OAAQiC,GAAQA,EAAIhH,KAAO8G,EAAQ9G,IACjEM,KAAK2C,UAAUmC,KAAK2B,GAGhB,gBACJhD,EACAO,GAAgB,EAAAG,EAAA,GAAWnB,KAAK2C,OAAO1C,UACvCmB,GAAc,EAAAL,EAAA,GAASf,KAAK2C,OAAO1C,WAEnC,IAAI2D,EAAW5G,KAAK2C,UAAU4C,YAAc,IACzB,SACf,QAAQ9B,EAAOrD,IAAKc,GAAUA,EAAMhB,YACpC,SAEO2G,QAASC,IAChBF,GAAW,QACPA,EACAnD,EAAOgB,OAAQiC,GACXA,EAAIxG,UAAU6G,KAAMC,GAAMA,EAAEC,QAAUH,EAAMG,QAEhD,CACIH,MAAOA,EAAMG,MACbC,KAAMlD,EAAMf,UACZkE,GAAI/C,EAAInB,cAIpBoB,QAAQC,IAAIb,EAAQmD,GACpB5G,KAAK2C,UAAUmC,KAAK8B,GAGhB,aACJnD,EACAO,EACAI,EACAV,EACAL,EAAkB,IAElB,OAAOI,EAAOgB,OAAQiC,I,UAClB,MAAMU,GAAa,QACfpD,EAAMf,UACNmB,EAAInB,UACJyD,EAAI7F,KACJ6F,EAAI7F,KAAsB,GAAf6F,EAAI5F,SAAgB,KAE7BuG,IAAYX,EAAIxG,UACjBE,IAAKkH,GAAMtH,KAAKsC,QAAQyE,KAAKO,EAAE5H,IAAM4H,EAAEL,QACvCF,KAAMD,GAAUzD,EAAM0D,KAAMQ,IAAK,MAAC,OAAY,QAAZ,EAAAT,aAAK,EAALA,EAAOzD,aAAK,eAAEmE,SAASD,MACxDE,IACmB,QAApB,EAAA/D,EAAQgE,oBAAY,eAAE9C,WACrB8B,EAAIxG,UAAU6G,KAAMD,GAClBpD,EAAQgE,aAAaF,SAASV,EAAMG,QAEtCU,IACe,QAAhB,EAAAjE,EAAQqB,gBAAQ,eAAEH,WACjB8B,EAAIxG,UAAU6G,KAAMD,GAClBA,EAAMzD,MAAM0D,KAAMa,GAASlE,EAAQqB,SAASyC,SAASI,KAOvDC,IACgB,QAAjB,EAAAnE,EAAQoE,iBAAS,eAAElD,UACnBlB,EAAQoE,UAAUN,SAPVd,EAAIqB,OAAOnD,OAClB,WACe,aAAf8B,EAAIsB,OACJ,YACA,YAIN,OAAOZ,GAAcK,GAAaJ,GAAWM,GAAYE,K,6CApSxDxF,GAAkB,0B,0BAAlBA,EAAkB,QAAlBA,EAAkB,qBAFf,S,GAET,I,0VCrBA,Y,MAAM4F,EAgBT,cAdgB,KAAApH,MAAwB,IAAImC,MAAOC,UAElC,KAAAiF,WAAa,IAAI,MAElB,KAAAC,YAAc,KAC1BnI,KAAKa,MAAO,OAAQ,IAAImC,KAAKhD,KAAKa,MAAO,GAAGoC,UAC5CjD,KAAKkI,WAAW9F,KAAKpC,KAAKa,OAGd,KAAAuH,QAAU,KACtBpI,KAAKa,MAAO,OAAQ,IAAImC,KAAKhD,KAAKa,MAAO,GAAGoC,UAC5CjD,KAAKkI,WAAW9F,KAAKpC,KAAKa,Q,6CAbrBoH,I,wBAAAA,EAAoB,sX,gBAzCzB,oBAAwB,gCAAS,EAAAE,gBAC7B,sBAGJ,QACA,oBAAwB,gCAAS,EAAAC,YAC7B,sBAGJ,QACA,iBAAyD,S,gBAA+B,QACxF,oBAAiD,mDAAS,SACtD,sBACA,mBAEI,oDAAkB,mCACD,EAAAF,WAAA,UAHrB,QAMA,kCACJ,Q,0BAlBQ,kCAKA,mCAGiD,+CAE3C,mCAGN,iCAAkB,qB,4PA0B3B,I,uKC1BA,Y,MAAMG,EAnBb,cAqBoB,KAAAC,MAAgB,GAEf,KAAAC,YAAc,IAAI,O,6CAJ1BF,I,wBAAAA,EAAkB,+QAhBvB,4BACI,mBAGI,qDAAmB,mCACF,EAAAE,YAAA,UAJrB,QAMA,sBACJ,S,MAJQ,kCAGgC,oC,8FASzC,I,mMCNK,SACI,eAKI,sBACA,iBAAqB,SAAe,QACxC,QACJ,S,yBANQ,oDAGgC,8BACX,wB,yBAIjC,qB,kCAQI,oBAAU,oBAAQ,QACtB,S,gCALI,iGAAuF,wB,wCAOvF,qBAGI,oFAEA,SACJ,Q,4BADI,gDAuCT,Y,MAAMC,EAYT,YACYC,EACAC,GADA,KAAAD,YACA,KAAAC,OANI,KAAAC,UAAY3I,KAAK0I,KAAKE,cACtB,KAAAC,gBAAkB7I,KAAK0I,KAAKG,gBAC5B,KAAAC,YAAeC,GAAO/I,KAAK0I,KAAKM,SAAWD,EAT3D,YACI,OAAO/I,KAAKyI,UAAUQ,IAAI,qBAAuB,GAErD,WACI,OAAOjJ,KAAKyI,UAAUQ,IAAI,kBAAoB,I,6CALzCT,GAAgB,0B,wBAAhBA,EAAgB,ysBAtErB,iBACI,iBACJ,QACA,iBACI,gCAUJ,QACA,0B,iBAUA,2BACI,0B,iBAOJ,S,MAhC8C,uCAGX,kCAc9B,uDAUwB,mD,0iBA0C9B,I,wRCtDP,MAOMU,EAAqB,CACvB,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGEC,EAAyB,CAAC,KAAa,MAmBtC,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAfA,CACL,QACGD,KACAD,EACH,KACA,cAAsB,KA1B1B,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KAG4B,KAAa,KAerC,KACA,Q,GAGD,I,6KC5Ba,kBAII,4BAIA,kBACI,kBACI,SAIJ,QACA,kBACI,SACJ,QACJ,QACJ,S,yBAbQ,yBAII,6DAMA,iCAkEzB,Y,MAAMG,EA0BT,YACYC,EACAhH,GADA,KAAAgH,SACA,KAAAhH,UAxBI,KAAAX,MAAQ,IAAM3B,KAAKsJ,OAAOC,SAAS,MAEnC,KAAAC,KAAO,IAAMxJ,KAAKsJ,OAAOG,WAAWzJ,KAAKkB,OAEzC,KAAAqF,OAAS,IAAMvG,KAAKsJ,OAAOI,cAAc1J,KAAKkB,OAE9D,eACI,MAAM4F,EAAQ9G,KAAKsC,QAAQyE,KAAK/G,KAAKkB,MAAMhB,UAAU,GAAGR,IACxD,MAAO,GAAGoH,EAAM6C,MAAMrJ,cAAgBwG,EAAM6C,MAAMpJ,SAC9CuG,EAAMxG,cAAgBwG,EAAMvG,OAIpC,WACI,MAAMM,EAAO,IAAImC,KAAKhD,KAAKkB,MAAML,MACjC,OACI,OAAOA,EAAM,UACb,OACA,QAAO,OAAWA,EAAMb,KAAKkB,MAAMJ,UAAW,W,6CAtB7CuI,GAAyB,yB,wBAAzBA,EAAyB,ogCAnH9B,iBAEI,gCAAS,EAAA1H,UACZ,QACD,iBAGI,iCAASiI,EAAOC,oBAEhB,iBACI,gBACI,SACJ,QACA,iBACI,S,gBACJ,QACA,iBACI,sBAAuB,kBAAK,QAC5B,mBAA6B,UAAiB,QAClD,QACA,kBACI,uBAAuB,qBAAQ,QAC/B,mBAA6B,UAAU,QAC3C,QACA,kBACI,uBAAuB,mBAAM,QAC7B,mBACK,UAEC,QAEV,QACA,kBACI,wBAoBJ,QACA,kBACI,uBAAuB,kBAAK,QAC5B,mBAA6B,UAAc,QAC/C,QACA,mBACI,uBAAuB,8BAAiB,QACxC,mBAA6B,kBAAK,QACtC,QACA,mBACI,oB,qBAMJ,QACJ,QACA,mBAII,sBAA0C,gCAAS,EAAAtD,WAC/C,6BACJ,QACA,sBAAkC,gCAAS,EAAAiD,SACvC,2BACJ,QACJ,QACA,sBAAqC,gCAAS,EAAA7H,UAC1C,qBAAU,kBAAK,QACnB,QACJ,S,MA1EY,4FAGA,2DAI6B,8BAIA,uBAKxB,+FAQgB,4CAqBQ,2BASzB,8E,+WAkDjB,I,yKCrHP,MAAMmI,EAAiB,CACnB,CAAEC,KAAM,eAAgBC,UAAW,MACnC,CACID,KAAM,WACNE,aAAc,IACV,+EAAqC5K,KAAM6K,GAAMA,EAAEC,eACvDC,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,YACNE,aAAc,IACV,iFAAuC5K,KAAM6K,GAAMA,EAAEC,eACzDC,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,aACNE,aAAc,IACV,oPAAyC5K,KACpC6K,GAAMA,EAAEI,kBAEjBF,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,WACNE,aAAc,IACV,+EAAqC5K,KAAM6K,GAAMA,EAAEK,gBACvDH,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,QACNE,aAAc,IACV,2WAA+B5K,KAAM6K,GAAMA,EAAEM,aACjDJ,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,UACNE,aAAc,IACV,6SAAmC5K,KAAM6K,GAAMA,EAAEO,eACrDL,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,QACNE,aAAc,IACV,iMAA+B5K,KAAM6K,GAAMA,EAAEQ,aACjDN,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,WACNE,aAAc,IACV,qQAAqC5K,KAAM6K,GAAMA,EAAES,gBACvDP,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CACIN,KAAM,SACNE,aAAc,IACV,oUAAiC5K,KAAM6K,GAAMA,EAAEU,cACnDR,YAAa,CAAC,MACdC,QAAS,CAAC,OAEd,CAAEN,KAAM,KAAMc,WAAY,aAOvB,Y,MAAMC,G,6CAAAA,I,wBAAAA,I,4BAHA,CAAC,aAAqBhB,EAAQ,CAAEiB,SAAS,KACxC,Q,GAEP,G,2HC/EA,MAAMC,EAAY,CACrB,CACItL,GAAI,SACJa,KAAM,SACN0K,WAAY,IACZC,SAAU,SACVC,KAAM,CAAC,SACP7H,QAAS,CACL,CAAE5D,GAAI,QAASa,KAAM,YAAa6K,MAAO,QACzC,CAAE1L,GAAI,QAASa,KAAM,QAAS6K,MAAO,QACrC,CAAE1L,GAAI,QAASa,KAAM,UAAW6K,MAAO,SAAUH,WAAY,IAC7D,CAAEvL,GAAI,QAASa,KAAM,UAAW6K,MAAO,SAAUH,WAAY,IAC7D,CAAEvL,GAAI,QAASa,KAAM,UAAW6K,MAAO,SAAUH,WAAY,IAC7D,CAAEvL,GAAI,QAASa,KAAM,UAAW6K,MAAO,SAAUH,WAAY,MAGrE,CACIvL,GAAI,SACJa,KAAM,OACN0K,WAAY,IACZC,SAAU,SACVC,KAAM,CAAC,SACP7H,QAAS,CACL,CAAE5D,GAAI,QAASa,KAAM,QAAS6K,MAAO,QACrC,CAAE1L,GAAI,QAASa,KAAM,UAAW6K,MAAO,QACvC,CAAE1L,GAAI,QAASa,KAAM,OAAQ6K,MAAO,QACpC,CAAE1L,GAAI,QAASa,KAAM,YAAa6K,MAAO,UAGjD,CAAE1L,GAAI,SAAUa,KAAM,QAAS0K,WAAY,IAAKC,SAAU,UAC1D,CACIxL,GAAI,SACJa,KAAM,SACN0K,WAAY,IACZC,SAAU,SACV5H,QAAS,CACL,CAAE5D,GAAI,QAASa,KAAM,YAAa6K,MAAO,QACzC,CAAE1L,GAAI,QAASa,KAAM,SAAU6K,MAAO,QACtC,CAAE1L,GAAI,QAASa,KAAM,YAAa6K,MAAO,UAGjD,CACI1L,GAAI,SACJa,KAAM,UACN0K,WAAY,IACZC,SAAU,SACV5H,QAAS,CACL,CAAE5D,GAAI,QAASa,KAAM,YAAa6K,MAAO,QACzC,CAAE1L,GAAI,QAASa,KAAM,YAAa6K,MAAO,QACzC,CAAE1L,GAAI,QAASa,KAAM,YAAa6K,MAAO,UAGjD,CACI1L,GAAI,SACJa,KAAM,eACN0K,WAAY,IACZC,SAAU,eACV5H,QAAS,CACL,CACI5D,GAAI,QACJa,KAAM,eACN6K,MAAO,QACPH,WAAY,IAEhB,CAAEvL,GAAI,QAASa,KAAM,YAAa6K,MAAO,QAASH,WAAY,IAC9D,CACIvL,GAAI,QACJa,KAAM,gBACN6K,MAAO,QACPH,WAAY,IAEhB,CACIvL,GAAI,QACJa,KAAM,qBACN6K,MAAO,QACPH,WAAY,MAIxB,CACIvL,GAAI,SACJa,KAAM,WACN0K,WAAY,IACZC,SAAU,eACV5H,QAAS,CACL,CAAE5D,GAAI,QAASa,KAAM,eAAgB6K,MAAO,QAC5C,CAAE1L,GAAI,QAASa,KAAM,UAAW6K,MAAO,QACvC,CAAE1L,GAAI,QAASa,KAAM,cAAe6K,MAAO,WAKhD,SAASC,EAAsBnK,GAClC,MAAMJ,GAAW,EAAAwK,EAAA,GAAoBpK,EAAMqK,YAAarK,EAAMsK,WACxDC,GAAK,QAAqBT,EAAUpG,QAC1C,MAAO,CACHlF,GAAI,UAAS,QAAqB,UAClCgM,SAAUxK,EAAMxB,GAChBiM,eAAgB,KAAI,QAAqB,UACzCC,YAAa,KAAI,QAAqB,QACtCC,YAAY,EAAAC,EAAA,GACY,IAApB5K,EAAMqK,YAC2C,GAAjD,QAAqBQ,KAAKC,MAAMlL,EAAW,KAE/CmL,MAAO,IAAIC,MAAM,GAAGC,KAAK,GAAG/L,IAAI,CAACiB,EAAG+K,IAAS,OAAD,wBACrCpB,EAAWS,EAAKW,EAAOpB,EAAUpG,SAAO,CAC3CtB,QAAS,GACT+I,UAAU,QAAqB,GAAI,OC9GxC,MAAMC,EAAY,CACrB,CACIC,WAAY,WACZC,WAAY,WACZjM,KAAM,UACNkM,YAAa,GACbtB,KAAM,MACNuB,MAAO,EACPC,SAAU,EACVC,UAAW,GACXC,SAAU,GACVnN,GAAI,qBAICoN,EAAiB,CAC1B,CACIvM,KAAM,SACNkM,YAAa,GACbtB,KAAM,WACNuB,MAAO,EACPC,SAAU,EACVC,UAAW,mBACXC,SAAU,GACVnN,GAAI,SACJqN,OAAQ,CAAC,SAAU,WAEvB,CACIxM,KAAM,WACNkM,YAAa,GACbtB,KAAM,WACNuB,MAAO,EACPC,SAAU,EACVC,UAAW,mBACXC,SAAU,GACVnN,GAAI,SACJqN,OAAQ,CAAC,QAAS,WA4BbC,EAAcF,EAAe1M,IAAK6M,GAC3CA,EAAIF,OAAO3M,IAAI,CAACuJ,EAAOyC,IAzBT,EACd1M,EACA0M,EACApD,EACAkE,EAAc,MAEd,IAAIC,EAASzN,EAAG0N,OAAO,GAEvB,OADAD,EAAS,qBAAqBD,QACvB,CACHxN,GAAI,GAAGsJ,EAAStJ,MAAMA,IACtBa,KAAM,SAASb,EAAG2N,SAAS,MAAQ,IAAM3N,EAAG4N,MAAM,KAAK,KACvDV,UAAW5D,EAAStJ,GACpB+M,YAAa,GACbtB,KAAM,QACNgC,SACA3N,KAAM,gBACN+N,KAAM,cACNb,MAAO,EACPC,SAAU,GACVzG,SAAU,oBACV5F,aAAc,KAMdkN,CAAU7D,EAAOyC,EAAKa,GAAMtD,EAAM2D,MAAM,KAAK,MAEnDG,OAAO,CAACC,EAAGC,IAAMD,EAAE/G,OAAOgH,GAAI,CAC5B,CACIjO,GAAI,OACJkN,UAAW,SACXrM,KAAM,OACN4M,OAAQ,yBCpEVS,EAAgB,CAClBC,QAAS,CACLC,SAAU,CACNvN,KAAM,WACNkM,YAAa,GACbjH,QAAS,CACL,CACI9F,GAAI,SACJa,KAAM,+BACN0G,MAAO,iBACP8G,WAAY,WACZC,UAAW,aAEf,CACItO,GAAI,SACJa,KAAM,0BACN0G,MAAO,kBACP8G,WAAY,OACZC,UAAW,gBAOlBC,EAEb,WAiBI,SAASC,EAAUC,EAAsBvJ,EAAiB,GAEtD,IADAuJ,EAAM,GAAGA,IACFA,EAAIvJ,OAASA,GAAQuJ,EAAM,IAAIA,IACtC,OAAOA,GAnBX,SAAqB,CACjBpE,KAAM,uBACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,GAAkC,QAA9BA,EAAQC,aAAapD,KACrB,OAAOmB,EACJ,GAAkC,aAA9BgC,EAAQC,aAAapD,KAC5B,OAAO2B,EACJ,GAAkC,UAA9BwB,EAAQC,aAAapD,KAC5B,OAAO6B,EAEX,KAAM,CAAEhF,OAAQ,IAAKwG,QAAS,uBAUtC,SAAqB,CACjBzE,KAAM,8BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,GAAkC,aAA9BA,EAAQC,aAAahO,KACrB,MAAO,CACHkO,SAAU,CACNjJ,QAAS,CACLkJ,gBAAiB,UACjBC,kBAAmB,aAKnC,GAAkC,aAA9BL,EAAQC,aAAahO,KACrB,MAAO,CACHqO,SAAU,CACNpJ,QAASwF,IAIrB,GAAkC,UAA9BsD,EAAQC,aAAahO,KAAkB,CACvC,MAAMsO,EAAQP,EAAQQ,aAAapP,GAAG4N,MAAM,KAE5C,OAAOyB,EADIF,EAAMA,EAAMjK,OAAS,IAGpC,MAAkC,gBAA9B0J,EAAQC,aAAahO,KACd,CACHyO,YAAa,CACTxJ,QAAS,CACLyJ,MAAO,CACH,CACIvP,GAAI,YACJwP,WAAY,CACRvC,SAAU,IACVwC,eAAgB,CAAEC,EAAG,IAAMC,EAAG,OAGtC,CACI3P,GAAI,YACJwP,WAAY,CACRvC,SAAU,IACVwC,eAAgB,CAAEC,EAAG,IAAMC,EAAG,OAGtC,CACI3P,GAAI,YACJwP,WAAY,CACRvC,SAAU,IACVwC,eAAgB,CAAEC,EAAG,IAAMC,EAAG,WAStDzB,EAAcU,EAAQQ,aAAapP,KACnCkO,EAAcU,EAAQQ,aAAapP,IAC/B4O,EAAQC,aAAahO,MAGlBqN,EAAcU,EAAQQ,aAAapP,IAE1CkO,EAAcU,EAAQQ,aAAapP,MAClC4O,EAAQC,aAAahO,MAEfqN,EAAcU,EAAQQ,aAAapP,KAEvC,OAIf,SAAqB,CACjBqK,KAAM,8BACNrI,SAAU,GACV0M,OAAQ,QACRC,SAAWC,IACFV,EAAcU,EAAQQ,aAAapP,MACpCkO,EAAcU,EAAQQ,aAAapP,IAAM,IAC7CkO,EAAcU,EAAQQ,aAAapP,IAAI4O,EAAQgB,KAAK/O,MAChD+N,EAAQgB,QAIpB,MAAMC,EAAgB,CAAC,eAAgB,iBAAkB,gBAEzD,SAASR,EAAyBrP,GAC9B,MAAO,CACH8P,MAAO,CACHhK,QAAS,IAAI0G,MAAM,IAAIC,KAAK,GAAG/L,IAAI,CAACiB,EAAG+K,KAAQ,CAC3C1M,GAAI,SAASwO,EAAUxO,EAAI,MAAMwO,EAAU9B,EAAM,EAAG,KACpD7L,KAAM,QAAQb,KAAMwO,EAAU9B,EAAM,EAAG,KACvCqD,UAAU,QAAqB,MAAQ,GAAM,EAC7CrE,MAAO,GACPsE,SAAUH,EAAc9K,OACnBpD,IAAM,QAAqB,OAAS,GAAM,SAO/D,SAAqB,CACjB0I,KAAM,uCACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,MAAM1G,EAAOkF,EAAe/F,KACvB1F,GAAMA,EAAE3B,KAAO4O,EAAQQ,aAAapP,IAEzC,IAAKkI,EACD,KAAM,CACFI,OAAQ,IACRwG,QAAS,gCAAgCF,EAAQQ,aAAapP,OAEtE,OAAOsN,EAAYvI,OAAQpD,GAAMA,EAAEuL,YAAchF,EAAKlI,IAAIU,IACrDuP,IACG,MAAMd,EAAQc,EAAIjQ,GAAG4N,MAAM,KAE3B,MAAO,CACH1F,KAAM+H,EACNjO,SAAUqN,EAHHF,EAAMA,EAAMjK,OAAS,UAlJ1BgL,GC7BbC,EAAS,aCEhBC,EAAe,CACjB,qBACA,gBACA,UACA,kBACA,cACA,aACA,cACA,WACA,gBACA,cACA,gBACA,qBACA,iBACA,iBAGSC,EAAc,CACvBrQ,GAAI,UACJa,KAAM,sBACN0G,MAAO,iBACP+I,OAAQ,CAAC,QAAS,KAGTC,EAAaH,EAAa1P,IAAI,CAACG,EAAMF,KAAM,CACpDX,GAAI,QAAQW,EAAI,IAChBE,KAAM,GAAGA,cACT0G,MAAO,GAAG1G,EAAK+M,MAAM,KAAK9M,KAAK,KAAK0P,iBAAiBL,OACrDlJ,OAAO,CAACoJ,IAECI,EAAcL,EAAa1P,IAAI,CAACG,EAAMF,KAAM,CACrDX,GAAI,SAASW,EAAI,IACjBE,KAAM,GAAGA,eACT0G,MAAO,GAAG1G,EAAK+M,MAAM,KAAK9M,KAAK,KAAK0P,uBAAuBL,IAC3DO,gBAAgB,QAAqB,OAAS,GAAM,K,cClCxD,MAAMC,EAAsB,KACxB,MAAMC,EAAI,CAAC,aAAc,UAAW,YAAa,SAC3CC,GAAc,QAAqBD,EAAE1L,OAAS,GAC9C4L,EAAM,GACZ,IAAK,IAAInQ,EAAI,EAAGA,EAAIkQ,EAAalQ,IAC7BmQ,EAAIC,KAAKH,GAAE,QAAqBA,EAAE1L,UAEtC,OAAO4L,EAAI/L,OAAO,CAACiM,EAAIrQ,EAAGiH,IAAMA,EAAEqJ,QAAQD,KAAQrQ,IAGzCuQ,EAAc,CACvB,CACIrQ,KAAM,wBACN4M,OAAQ,oBACR9J,MAAO,CAAC,SAAU,kBAEtB,CACI9C,KAAM,wBACN4M,OAAQ,oBACR9J,MAAO,CAAC,SAAU,kBAEtB,CACI9C,KAAM,wBACN4M,OAAQ,oBACR9J,MAAO,CAAC,SAAU,kBAEtB,CACI9C,KAAM,wBACN4M,OAAQ,oBACR9J,MAAO,CAAC,SAAU,kBAEtB,CACI9C,KAAM,wBACN4M,OAAQ,oBACR9J,MAAO,CAAC,SAAU,kBAEtB,CACI9C,KAAM,wBACN4M,OAAQ,oBACR9J,MAAO,CAAC,SAAU,kBAEtB,CACI9C,KAAM,uBACN4M,OAAQ,mBACR9J,MAAO,CAAC,SAAU,iBAEtB,CACI9C,KAAM,uBACN4M,OAAQ,mBACR9J,MAAO,CAAC,SAAU,iBAEtB,CACI9C,KAAM,uBACN4M,OAAQ,mBACR9J,MAAO,CAAC,SAAU,iBAEtB,CACI9C,KAAM,uBACN4M,OAAQ,mBACR9J,MAAO,CAAC,SAAU,iBAEtB,CACI9C,KAAM,uBACN4M,OAAQ,mBACR9J,MAAO,CAAC,SAAU,kBAExBjD,IAAKyQ,IAAM,QAAkB,OAAD,wBAAMA,GAAC,CAAEnB,SAAUW,Q,cC/DjD,IAAIS,EAAa,IAAQC,QAAQ,KAAKC,KAAK,GAE3C,MAAMC,EAAgB,CAACC,GAAO,KAC1B,MAAMpM,EAAOgM,EAAWK,IAAoC,KAA/B,QAAqB,GAAK,GAAS,KAIhE,OAHID,IACAJ,EAAahM,GAEVA,EAAKsM,QAGVC,EAAe,CAAC,YAAa,YAAa,aAC1CC,EAAe,KACjB,MAAMC,GAAM,QAAqB,IACjC,OAAOA,EAAM,EACPF,EAAa,GACbE,EAAM,EACNF,EAAa,GACbA,EAAa,IAGVG,EAAc,IAAItF,MAAM,KAAKC,KAAK,GAAG/L,IAAI,CAACiB,EAAGoQ,KACtD,MAAMC,EAASzB,EAAWtJ,OAAOwJ,GACjC,IAAIwB,EAAmB,IAAIzF,OAAM,QAAqB,EAAG,IACpDC,KAAK,GACL/L,IAAI,IAAMsR,GAAO,QAAqBA,EAAO9M,UAClD+M,EAAUC,KACN,CAACC,EAAG9I,KAAO8I,EAAEzB,eAAiB,GAAK,IAAMrH,EAAEqH,eAAiB,GAAK,IAErE,MAAMtJ,EAAQ8J,GAAY,QAAqBA,EAAYhM,SAC3D+M,EAAYA,EAAUhL,OAAO,OAAD,wBAAMG,GAAK,CAAEgL,UAAU,MAC/C,QAAqB,MAAQ,GAAM,EAAGH,EAAUI,QAAQhC,GACvD4B,EAAUI,QAAQ9B,GAAW,QAAqBA,EAAWrL,UAClE+M,GAAY,QAAOA,EAAW,SAC9B,MAAMpG,EAAc0F,GAAc,GAC5BzF,EAAYyF,IACZe,GACF,QAAqB,MAAQ,GAAM,EAAI,0BAA4B,GACvE,MAAO,CACHtS,GAAI,aAAa+R,IACjBzJ,OAAQsJ,IACRW,KAAMN,EAAU,GAAG1K,MACnBiL,SAAU,cACVC,QAAS,oBACTR,WAAW,QAAOA,EAAW,SAASvR,IAAKiB,GAAO,OAAD,wBAC1CA,GAAC,CACJ+Q,iBACI,QAAqB,OAAS,GAAM,EAC9B,YACA,QAAqB,OAAS,GAAM,EACpC,WACA,eAEdrM,MAAO,gBAAgB0L,IACvBnC,KAAM,gBACN+C,SAAS,EACT9G,cACAC,YACA8G,SAAU,mBACVC,SAAS,EACTrM,SAAU,GAAGY,EAAMvG,OACnBiS,WAAW,EACXC,WAAY,GACZC,YAAa,GACbpM,OAAQQ,EACRkL,cACAW,WAAYX,EAAc,KAAI,QAAqB,QAAU,GAC7DY,iBAAkBZ,EAAc,UAAY,GAC5Ca,eAAgB,CACZjE,UACI,QAAqB,OAAS,GAAM,EAC9B,CACIvD,EAAsB,CAClB3L,GAAI,aAAa+R,IACjBlG,cACAC,eAGR,GACVsH,MAAiC,GAA1B,QAAqB,GAC5BC,UAAqC,GAA1B,QAAqB,OAKtCC,EAAe,GACrBxB,EAAY3K,QAAS3F,IACZ8R,EAAa9R,EAAMoF,OAAO5G,MAC3BsT,EAAa9R,EAAMoF,OAAO5G,IAAM,IAEpCsT,EAAa9R,EAAMoF,OAAO5G,IAAI+Q,KAAKvP,KCrFhC,MAAM+R,EAEb,YACI,SAAqB,CACjBlJ,KAAM,2BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,GAAgC,YAA5BA,EAAQQ,aAAapP,GACrB,OAAOqQ,EAEX,MAAMmD,EAASjD,EAAWlJ,KACrBoM,GAASA,EAAKlM,QAAUqH,EAAQQ,aAAapP,IAElD,GAAIwT,EACA,OAAOA,EAEX,KAAM,CAAElL,OAAQ,IAAKwG,QAAS,sBAItC,SAAqB,CACjBzE,KAAM,uBACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQC,aAAa6E,EAAG,CACxB,MAAMC,EAAS/E,EAAQC,aAAa6E,EAAElD,cACtC,OAAOD,EAAWxL,OACb0O,GACGA,EAAK5S,KAAK2P,cAAc1I,SAAS6L,IACjCF,EAAKlM,MAAMiJ,cAAc1I,SAAS6L,IAG9C,OAAOpD,MAIf,SAAqB,CACjBlG,KAAM,2BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,MAAM5O,EAAK4T,mBAAmBhF,EAAQQ,aAAapP,IAC7CwT,EAASjD,EAAWlJ,KAAMoM,GAASA,EAAKlM,QAAUvH,GACxD,GAAIwT,EACA,OAAO,OAAP,wBACOA,GAAM,CACThN,SAAUqN,MAGlB,KAAM,CAAEvL,OAAQ,IAAKwG,QAAS,sBAItC,SAAqB,CACjBzE,KAAM,uBACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQC,aAAa6E,EAAG,CACxB,MAAMC,EAAS/E,EAAQC,aAAa6E,EAAElD,cACtC,OAAOC,EAAY1L,OACd0O,GACGA,EAAK5S,KAAK2P,cAAc1I,SAAS6L,IACjCF,EAAKlM,MAAMiJ,cAAc1I,SAAS6L,IAG9C,OAAOpD,MAIf,SAAqB,CACjBlG,KAAM,8BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,MAAMrH,EAAQqM,mBAAmBhF,EAAQQ,aAAa7H,OAChDiM,EAAS/C,EAAYpJ,KAAMoM,GAASA,EAAKlM,QAAUA,GACzD,GAAIiM,EACA,OAAOA,EAEX,KAAM,CAAElL,OAAQ,IAAKwG,QAAS,uBAItC,SAAqB,CACjBzE,KAAM,uCACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,GAAIA,EAAQQ,aAAa7H,MAAO,CAC5B,MAAMA,EAAQqH,EAAQQ,aAAa7H,MAAMiJ,cAMzC,OALesB,EAAY/M,OAAQvD,GAC/BA,EAAMyQ,UAAU5K,KACXoM,GAASA,EAAKlM,MAAMiJ,gBAAkBjJ,IAKnD,KAAM,CACFe,OAAQ,IACRwG,QAAS,iDAAiDF,EAAQQ,aAAa7H,YAK3F,MAAMuM,EAAiB,CACnB,UACA,UACA,SACA,SACA,MACA,QAGJ,SAASD,IACL,MAAMhG,EACFiG,GAAe,QAAqBA,EAAe5O,SACjD+E,EAAQqD,GAAY,QAAqBA,EAAYpI,SACrD6O,EAAe7C,EAAYnM,OAAQuC,GACrCA,EAAE3D,MAAMmE,SAASmC,EAAMjK,KAErBoH,EACF2M,GAAa,QAAqBA,EAAa7O,UAAY,GACzDsB,EAAoB,GAC1B,OAAQqH,GACJ,IAAK,UACDrH,EAASwN,QAAU,CACf1K,SAAUW,EAAMiD,UAChBjD,MAAOA,EAAMjK,GACb4G,OAAQQ,EAAMpH,GACdyN,OAAQrG,EAAMqG,OACdzB,SAAU,IAEd,MACJ,IAAK,UACDxF,EAASwN,QAAU,CACf1K,SAAUW,EAAMiD,UAChBjD,MAAOA,EAAMjK,GACbyN,OAAQrG,EAAMqG,OACdwG,WAAY,IAAQvC,QAExB,MACJ,IAAK,SACL,IAAK,SACDlL,EAASqH,GAAQ,CACbvE,SAAUW,EAAMiD,UAChBjD,MAAOA,EAAMjK,GACb0P,IAAI,QAAqB,KACzBC,IAAI,QAAqB,KACzBuE,UAAW,IACNC,UAAS,QAAqB,IAAK,KACnCzC,QAET,MACJ,IAAK,MACDlL,EAAS4N,IAAM,CACXC,KAAK,QAAqB,KAAO,GACjCC,KAAK,QAAqB,KAAO,IACjCJ,UAAW,IACNC,UAAS,QAAqB,IAAK,KACnCzC,QAIjB,OAAOlL,GAtKW,GCyB1B,MAAM+N,EAeF,YAAYpS,G,MAFL,KAAAqS,OAAS,EAGZlU,KAAKO,KAAOsB,EAAMtB,MAAQ,cAC1BP,KAAKmU,UAA2B,QAAf,EAAAtS,EAAMsS,iBAAS,SAChCnU,KAAKoU,OAASvS,EAAMuS,SAAU,EAC9BpU,KAAKqU,WAAaxS,EAAMwS,WACxBrU,KAAKsU,YAAczS,EAAMyS,YACzBtU,KAAKuU,YAAc1S,EAAM0S,aAAe,GACxCvU,KAAKwU,OAASC,OAAOhV,KAAKO,KAAKqU,YAAc,KAAO,GACpDrU,KAAK0U,QAAUD,OAAOhV,KAAKO,KAAKsU,aAAe,KAAO,IACxC,QAAOtU,KAAKuU,YAAYnU,IAAKiB,GAAMA,EAAEkM,OAC7C1G,QACD8N,GACI3U,KAAK,GAAG2U,KAAO3U,KAAKuU,YAChB9P,OAAQpD,GAAMA,EAAEkM,OAASoH,GACzBvU,IAAKiB,GAAMA,EAAE3B,KAE1BM,KAAKuU,YAAY1N,QACZ+N,GAAY5U,KAAK,GAAG4U,EAAOrH,QAAQqH,EAAOlV,MAAQkV,GAEvD5U,KAAKwU,OAAO3N,QACPgO,GAAS7U,KAAK,SAAS6U,KAAS7U,KAAKqU,WAAWQ,IAErD7U,KAAK0U,QAAQ7N,QACRgO,GAAS7U,KAAK,UAAU6U,KAAS7U,KAAKsU,YAAYO,IAI3D,OAAOC,GAAQ,GACXzQ,QAAQC,IAAI,SAAUwQ,GACtB9U,KAAKoU,OAASU,EAGlB,UAWA,OAAOC,EAAeC,GACdhV,KAAKwU,OAAOhN,SAASuN,IAAU/U,KAAK0U,QAAQlN,SAASwN,KACrDhV,KAAKiV,aAAaF,EAAO,CACrBjL,QAAQ,QAAO,IACP9J,KAAKqU,WAAWU,GAAOjL,QAAU,GACrCkL,MAGRhV,KAAKiV,aAAaD,EAAQ,CACtBJ,OAAQG,EACRG,UAAWH,KASvB,YAKA,YAEA,eAMA,SAKA,UAEA,UAMA,WAOA,WAMA,QAAQ5U,EAAeyU,EAAiB,OACrB,QAAXA,IACA5U,KAAKkU,OAAS/T,GAItB,MAAM2U,GAAiB,EAAMF,EAAiB,OAC1C5U,KAAKiV,aAAaL,EAAQ,CAAEO,KAAML,IAMtC,QAAQF,EAAiB,OACrB5U,KAAKoV,OAAM,EAAOR,GAUtB,aAAalV,EAAYoV,GACrB,MAAMF,EAAS5U,KAAKuU,YAAYxN,KAAM1F,GAAMA,EAAE3B,KAAOA,GACjDkV,IACA5U,KAAK,GAAG4U,EAAOrH,QAAQqH,EAAOlV,MAAQ,OAAH,wBAAQkV,GAAM,CAAEE,WAI3D,MAAMF,GACF5U,KAAKiV,aAAaL,EAAQ,CAAES,QAAQ,IAGxC,QAAQT,GACJ5U,KAAKiV,aAAaL,EAAQ,CAAES,QAAQ,IAGxC,aAAaT,EAAgBjU,GACrBX,KAAK,SAAS4U,MACd5U,KAAK,SAAS4U,KAAY,OAAH,wBAAQ5U,KAAK,SAAS4U,MAAcjU,GAC3DX,KAAKqU,WAAWO,GAAU,OAAH,wBAAQ5U,KAAK,SAAS4U,MAAcjU,IACpDX,KAAK,UAAU4U,OACtB5U,KAAK,UAAU4U,KAAY,OAAH,wBAAQ5U,KAAK,UAAU4U,MAAcjU,GAC7DX,KAAKsU,YAAYM,GAAU,OAAH,wBAAQ5U,KAAK,UAAU4U,MAAcjU,KAKzE,MAAM0T,EAAsB,CACxBiB,KAAM,CACF/U,KAAM,cACNgN,KAAM,aACNgI,IAAK,gBAETC,KAAM,CACFjV,KAAM,YACNgN,KAAM,aACNgI,IAAK,gBAETE,KAAM,CACFlV,KAAM,eACNgN,KAAM,aACNgI,IAAK,gBAETG,IAAK,CACDnV,KAAM,OACNgN,KAAM,MAEVoI,IAAK,CACDpV,KAAM,OACNgN,KAAM,MAEVqI,IAAK,CACDrV,KAAM,OACNgN,KAAM,MAEVsI,IAAK,CACDtV,KAAM,OACNgN,KAAM,MAEVuI,KAAM,CACFvV,KAAM,cACNgN,KAAM,UAEVwI,IAAK,CACDxV,KAAM,aACNgN,KAAM,UAEVyI,QAAS,CACLzV,KAAM,cACNgN,KAAM,SACNgI,IAAK,YAETU,QAAS,CACL1V,KAAM,eACNgN,KAAM,SACNgI,IAAK,YAETW,QAAS,CACL3V,KAAM,gBACNgN,KAAM,SACNgI,IAAK,YAETY,QAAS,CACL5V,KAAM,iBACNgN,KAAM,SACNgI,IAAK,YAETa,IAAK,CACD7V,KAAM,SACNgN,KAAM,KACNgI,IAAK,WAIPjB,EAAuB,CACzB+B,SAAU,CACN9V,KAAM,YACNgN,KAAM,UACNqH,OAAQ,MACRW,IAAK,aAETe,SAAU,CACN/V,KAAM,YACNgN,KAAM,UACNgI,IAAK,aAETgB,SAAU,CACNhW,KAAM,YACNgN,KAAM,UACNqH,OAAQ,MACRW,IAAK,aAETiB,SAAU,CACNjW,KAAM,YACNgN,KAAM,UACNgI,IAAK,aAETkB,SAAU,CACNlW,KAAM,YACNgN,KAAM,UACNgI,IAAK,YACLX,OAAQ,QAIVL,GAAqB,CACvB,CACI7U,GAAI,SACJa,KAAM,WACNgN,KAAM,SACNmJ,OAAQ,CAAC,MAAO,eAAgB,UAAW,QAC3C5B,MAAO,OAEX,CACIpV,GAAI,SACJa,KAAM,SACNgN,KAAM,SACNmJ,OAAQ,CAAC,MAAO,eAAgB,WAChC5B,MAAO,OAEX,CACIpV,GAAI,UACJa,KAAM,SACNgN,KAAM,SACNmJ,OAAQ,CAAC,KAAM,QACf5B,MAAO,SAIF6B,GAAqB,CAAC7P,EAAgB8P,EAAqB,KACpE,IAAI3C,EAAW,OAAD,sCACPnN,GAAK,CACRuN,aACAC,cACAC,iBACGqC,I,qCCpUJ,MAAMC,GAAb,cAEI,KAAAC,UAAY,mBAEZ,KAAAC,kBAAmB,EAEnB,KAAAC,qBAAsB,EAEtB,KAAApQ,SAAsB,GACtB,KAAAqQ,eAAiB,EACjB,KAAAC,eAAiB,EAEjB,KAAAC,WAAa,GAEb,KAAAC,YAAc,GAEd,KAAAC,qBAAuB,EAEvB,KAAArP,OAAuD,QAGpD,SAASsP,GACZxQ,EACA8P,EAAwC,IAExC,MAAMrB,EAAM,OAAH,sCACF,IAAIsB,IACJD,GAAS,CAEZW,eAAgB,SAAU5C,GACtB3U,KAAKqX,qBAAuB1C,GAGhC6C,aAAc,SAAU7C,KAExB8C,UAAW,SAAUC,EAAa/C,EAAYgD,OAIlD,OAFAC,GAAe9Q,EAAOyO,GACtBsC,YAAY,IAAMD,GAAe9Q,EAAOyO,GAAM,KACvCA,EAGX,SAASqC,GAAe9Q,EAAgByO,G,MACpC,MAAM3O,EACF4K,EAAY/M,OAAQvD,IAAS,MACzB,OAAe,QAAf,EAAAA,EAAMyQ,iBAAS,eAAE5K,KAAM+Q,GAAMA,EAAE7Q,QAAUH,EAAMG,UAC9C,GAGT,GAFAL,EAASgL,KAAK,CAACC,EAAG9I,IAAM8I,EAAEtG,YAAcxC,EAAEwC,aAC1CgK,EAAI3O,SAAWA,GACVE,EAAM2I,SACP,OAAQ8F,EAAIvN,OAAS,eAEzB,MAAMnH,EAAO,IAAImC,KACX6K,EAAUjH,EAASG,KAAML,IAC3B,QACI7F,EAAKoC,UACLpC,EAAKoC,UACLyD,EAAI6E,YACJ7E,EAAI8E,YAGN1G,EAAO8B,EAASG,KAAML,IACxB,EAAAqR,GAAA,GAASlX,EAAKoC,UAAWyD,EAAI6E,cAE3BvH,EAAQ,IAAIhB,KAAsB,QAAhB,EAAA6K,GAAW/I,SAAK,eAAEyG,aACpCyM,GAAU,QACZnX,EACAA,GACA,EAAAoX,GAAA,GAAWjU,EAAOuR,EAAI2B,iBACtB,EAAAgB,GAAA,GAAWlU,EAAOuR,EAAI0B,iBAE1B1B,EAAIvN,OAAS6F,EACPmK,EACI,UACA,OACJlT,GAAQkT,EACR,UACA,O,eC3DH,MAAMG,GAAb,cAEI,KAAAC,SAAkC,GAElC,aAAanR,EAAeoR,KAGhC,SAASC,GAAQC,EAAYb,EAAc,GACvC,IAAIvJ,EAAM,GAAGoK,IACb,KAAOpK,EAAIvJ,OAAS8S,GAChBvJ,EAAM,IAAMA,EAEhB,OAAOA,EAGJ,SAASqK,GACZ1R,EACA8P,EAAqB,IAErB,MAAMrB,EAAM,IAAI4C,GAChB,IAAK,MAAMxI,KAAO3C,EACduI,EAAI6C,SAASzI,EAAIjQ,IAAM,CACnB+Y,WAAY,IACZC,WAAY,EACZC,gBAAiB,IACjBC,aAAc,EACdC,iBAAkB,EAClBC,eAAgB,EAChBC,eAAgB,KAEpBxD,EAAI,GAAG5F,EAAIjQ,eAAiB,IAAIwM,MAAMqJ,EAAI6C,SAASzI,EAAIjQ,IAAI+Y,YACtDtM,KAAK,GACL/L,IAAI,CAACiB,EAAG+K,IAAQ,SAASuD,EAAIqJ,UAAUV,GAAQlM,MACpDmJ,EAAI,GAAG5F,EAAIjQ,MAAQ,CAAES,MAAO,IAC5BoV,EAAI,GAAG5F,EAAIjQ,YAAc,CACrBS,MAAO,CACH,CACI8Y,QAAS,YACTvM,OAAO,QAAqB,KAC5BnM,KAAM,cAEV,CACI0Y,QAAS,YACTvM,OAAO,QAAqB,KAC5BnM,KAAM,cAEV,CACI0Y,QAAS,YACTvM,OAAO,QAAqB,IAC5BnM,KAAM,gBAOtB,OAFA2Y,GAAgB3D,EAAKvI,GACrB6K,YAAY,IAAMqB,GAAgB3D,EAAKvI,GAAc,KAC9CuI,EAGJ,SAAS2D,GACZ3D,EACAxI,GAEA,IAAK,MAAM4C,KAAO5C,EACdwI,EAAI5F,EAAIjQ,IAAM,CACVS,MAAO,IAAI+L,OAAM,QAAqB,KACjCC,KAAK,GACL/L,IAAI,IAAMmT,GAAiB5D,EAAK4F,EAAI,GAAG5F,EAAIjQ,kBAKrD,SAAS6T,GACZ5D,EACAH,EACA2J,EAAQlJ,GAGR,OADc,QAAqB,MAAQ,GAAM,EAE3C,CACI/J,SAAU,OACVkT,aAAa,QAAqB,MAAQ,GAAM,EAChDjM,OAAQqC,GAAM,QAAqBA,EAAM5K,SACzCyU,IAAK,aAAYF,GAAM,QAAqBA,EAAMvU,SAASqC,OAC3D0C,MAAOgG,EAAIjQ,GACXsJ,SAAU2G,EAAI/C,WAElB,CACI1G,SAAU,WACVoT,iBAAkB,cAClBlK,GAAG,QAAqB,KAAQ,GAChCC,GAAG,QAAqB,KAAQ,GAChC2E,IAAK,kBACLD,IAAK,kBACLwF,WAAY,eACZF,IAAK,aAAYF,GAAM,QAAqBA,EAAMvU,SAASqC,OAC3DuS,SAAU,iBACV5F,UAAW7H,KAAKC,OAAM,IAAIhJ,MAAOC,UAAY,KAC7CwW,UAAW,IACXC,WAAY,KC5G1B,MAAMC,GAWF,YAAYtY,GACRrB,KAAK4Z,QAAU,CAAC,aAAc,WAAY,gBAG9C,KAAKC,IAEL,MAAMC,IAEN,QAAQvZ,IAER,aAAaA,KCjCjB,MAAMwZ,GAYF,YAAY1Y,GACRrB,KAAKkU,QAAS,QAAU,KAT5B,MAAMY,GAAiB,GACnB9U,KAAKmV,KAAOL,EAGhB,QAAQ3U,GACJH,KAAKkU,OAAS/T,GCTtB,MAAM6Z,GAYF,YAAY3Y,GACRrB,KAAKkU,QAAS,QAAU,KAT5B,MAAMY,GAAiB,GACnB9U,KAAKmV,KAAOL,EAGhB,QAAQ3U,GACJH,KAAKkU,OAAS/T,GCTtB,IAAIyF,GAEG,MAAMqU,GAST,YAAY5Y,GAPZ,KAAA2G,OAA2C,UAE3C,KAAAkS,MAAgB,EAMZla,KAAKma,WAAY,QAAU,OAG/B,SACIna,KAAKgI,OAAS,UACdpC,GAAWiS,YAAY,KACf7X,KAAKma,UAAY,GAAGtU,cAAcD,IACtC5F,KAAKma,UAAYna,KAAKma,UAAY,EAClCna,KAAK6N,QAAU7N,KAAK6N,QAAU,GAC/B,KAGP,SACI7N,KAAKgI,OAAS,SACdnC,cAAcD,IAGlB,UACI5F,KAAKoa,SAGT,QACIpa,KAAKgI,OAAS,UACdhI,KAAK6N,QAAU,EACfhI,cAAcD,KAKf,MAAMyU,GAAsB,CAACvT,EAAgB8P,EAAqB,KACrE,IAAIqD,GAAc,OAAD,wBAAMnT,GAAU8P,IC1CrC,MAAM0D,GAGF,YAAY3Z,GAFL,KAAA4Z,sBAAwB,gBAI/B,aAAaC,KAGV,MAAMC,GAA0B,CACnCjV,EACAoR,EAAqB,KAErB,IAAI0D,GAAkB,OAAD,wBACd9U,GACAoR,ICXE8D,IAGT9J,EAAY/J,QAAQ,CAACC,EAAY2K,ICI9B,SAAsB3K,IACzB,SAAeA,EAAMpH,GAAI,CACrBib,OAAQ,CAAChE,GAAmB7P,IAC5B8T,SAAU,CAACtD,GAAqBxQ,IAChC+T,eAAgB,CAACrC,MACjBsC,OAAQ,IAAI5O,MAAM,IAAIC,KAAK,GAAG/L,IAAKiB,GNqBT,EAACyF,EAAgB8P,EAAqB,KACpE,IAAI+C,GAAa,OAAD,wBAAM7S,GAAU8P,IMtBamE,CAAmBjU,IAC5DkU,QAAS,IAAI9O,MAAM,IAAIC,KAAK,GAAG/L,IAAKiB,GLCT,EAACyF,EAAgB8P,EAAqB,KACrE,IAAImD,GAAc,OAAD,wBAAMjT,GAAU8P,IKFaqE,CAAoBnU,IAC9DoU,WAAY,IAAIhP,MAAM,IACjBC,KAAK,GACL/L,IAAKiB,GJFoB,EAClCyF,EACA8P,EAAqB,KACpB,IAAIoD,GAAiB,OAAD,wBAAMlT,GAAU8P,IIDjBuE,CAAuBrU,IACvCsU,QAAS,CAACf,GAAoBvT,IAC9BuU,YAAa,CAACZ,QDfyBa,CAAaxU,SAExD,SAAqB,CACjBiD,KAAM,yBACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,GACAsC,KEVN2K,KAGT,SAAqB,CACjBxR,KAAM,uBACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWhN,IACP,IAAIoC,EAAS+N,EAmBb,OAlBKnQ,EAAEkN,aAAaxJ,WAChBtB,EAASA,EAAOgB,OACXvD,KACKA,EAAMyQ,UAAU5K,KACboM,GAASA,EAAKlM,QAAU8I,EAAY9I,SAIjD5F,EAAEkN,aAAavJ,eACfvB,EAASA,EAAOgB,OAAQnF,IACpB,QACI+B,EAAEkN,aAAavJ,aACf3D,EAAEkN,aAAarJ,WACf5F,EAAEiM,YACFjM,EAAEkM,aAIP/H,MAIf,SAAqB,CACjBsG,KAAM,uBACNrI,SAAU,GACV0M,OAAQ,OACRC,SAAWC,IACP,MAAMkN,EAAY,OAAH,wBACRlN,EAAQgB,MAAI,CACf5P,GAAI,eAAc,QAAqB,SAiB3C,OAfA8b,EAAU7J,UAAY,CAClB1B,EAAWlJ,KAAM1F,GAAMA,EAAE4F,QAAUuU,EAAUvJ,SACzCuJ,EAAU7J,WAAa,IAE/B6J,EAAU7J,UAAU9K,QAASsM,IACrBA,EAAK9P,QAAO8P,EAAKrB,UAAW,KAGhC0J,EAAUlV,SACVkV,EAAU7J,UAAY,IACd6J,EAAU7J,WAAa,G,+BACtB6J,EAAUlV,QAAM,CAAEwL,UAAU,MAGzCN,EAAYf,KAAK+K,GACVA,MAIf,SAAqB,CACjBzR,KAAM,2BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,MAAMmN,EAAOjK,EAAYzK,KACpB7F,GAAUA,EAAMxB,KAAO4O,EAAQQ,aAAapP,IAEjD,GAAI+b,EACA,OAAOA,EAEX,KAAM,CAAEzT,OAAQ,IAAKwG,QAAS,uBAItC,SAAqB,CACjBzE,KAAM,2BACNrI,SAAU,GACV0M,OAAQ,SACRC,SAAWC,IACP,MAAMmD,EAAQD,EAAYkK,UACrBxa,GAAUA,EAAMxB,KAAO4O,EAAQQ,aAAapP,IAEjD,KAAI+R,EAAQ,GAWZ,KAAM,CAAEzJ,OAAQ,IAAKwG,QAAS,mBAVtBgD,EAAYC,GAAOQ,OAASlC,EAAY9I,MACxCuK,EAAYmK,OAAOlK,EAAO,GAEbD,EAAYC,GAAOE,UAAU5K,KACrC1F,GAAMA,EAAE4F,QAAU8I,EAAY9I,OAE9BmL,gBAAkB,eAQvC,SAAqB,CACjBrI,KAAM,2BACNrI,SAAU,GACV0M,OAAQ,QACRC,SAAWC,IACP,MAAMmD,EAAQD,EAAYkK,UACrBxa,GAAUA,EAAMxB,KAAO4O,EAAQQ,aAAapP,IAEjD,GAAI+R,GAAS,EACT,OAAOD,EAAYmK,OAAOlK,EAAO,EAAGnD,EAAQgB,MAEhD,KAAM,CAAEtH,OAAQ,IAAKwG,QAAS,2BAItC,SAAqB,CACjBzE,KAAM,iDACNrI,SAAU,GACV0M,OAAQ,OACRC,SAAWC,IACP,MAAMpN,EAAQsQ,EAAYzK,KACrB7F,GAAUA,EAAMxB,KAAO4O,EAAQQ,aAAapP,IAEjD,GAAIwB,EAMA,OAHCA,EAAM2R,eAAuBc,YADzBzS,EAAM2R,eAAuBc,YAAc,IACMhN,OAAO,CACzD2H,EAAQQ,aAAa7H,QAElB/F,EAEX,KAAM,CAAE8G,OAAQ,IAAKwG,QAAS,uBC7H7BoN,GAEb,YACI,SAAqB,CACjB7R,KAAM,0BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,IACP,MAAM6E,EAAOlD,GAAW,QAAqBA,EAAWrL,SAClDiX,EAAQ5L,GAAW,QAAqBA,EAAWrL,SACnDkX,EAAQ7L,GAAW,QAAqBA,EAAWrL,SACzD,MAAO,CACH,CACIlF,GAAIqQ,EAAY9I,MAChB8U,QAAShM,EAAYxP,KACrByb,SAAS,EACTC,UAAU,EACVC,QAAQ,GAEZ,CACIxc,GAAIyT,EAAKlM,MACT8U,QAAS5I,EAAK5S,KACdyb,SAAS,EACTC,UAAU,EACVC,QAAQ,GAEZ,CACIxc,GAAImc,EAAM5U,MACV8U,QAASF,EAAMtb,KACfyb,SAAS,EACTC,UAAU,EACVC,QAAQ,GAEZ,CACIxc,GAAIoc,EAAM7U,MACV8U,QAASD,EAAMvb,KACfyb,SAAS,EACTC,UAAU,EACVC,QAAQ,OAMxB,MAAMC,EAA2B7N,IAC7B,MAAMtK,GAASsK,EAAQC,aAAavJ,aAC9BZ,GAAOkK,EAAQC,aAAarJ,WAC5B7B,GAASiL,EAAQC,aAAaxJ,UAAY,IAC3CuI,MAAM,KACN7I,OAAQpE,KAAQA,GACf+b,GAAW9N,EAAQC,aAAa8N,YAAc,IAC/C/O,MAAM,KACN7I,OAAQpE,KAAQA,GA4BrB,OA1BeuQ,EAAYnM,OAAQqC,GAC/BzD,EAAMuB,OACAvB,EAAMoK,OACF,CAAC6O,EAAK1U,IAAS0U,GAAOxV,EAAMzD,MAAMmE,SAASI,IAC3C,IAEJwU,EAAQxX,QACRwX,EAAQ5U,SAASV,EAAMpH,KAE/B+E,OAAQqC,IACN,MAAMF,EAAW4K,EAAY/M,OAAQvD,GACjCA,EAAMyQ,UAAU5K,KAAMoM,GAASA,EAAKzT,KAAOoH,EAAMpH,KAErD,IAAK,MAAMwB,KAAS0F,EAChB,IACI,QACI5C,EACAI,EACAlD,EAAMqK,YACNrK,EAAMsK,WAGV,OAAO,EAEf,OAAO,MAKf,SAAqB,CACjBzB,KAAM,uCACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,GACP6N,EAAwB7N,GAASlO,IAAKiB,IAAM,CACxCyQ,SAAUzQ,QAItB,SAAqB,CACjB0I,KAAM,oCACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWC,GACP6N,EAAwB7N,GAASlO,IAAKiB,IAAM,CACxCyQ,SAAUzQ,OAnGI,G,mCCF9B,IAAI,IAAa,EAAAkb,GAAA,IAAS,EAAApY,GAAA,GAAW,IAAInB,MAAS,GAElD,MAAM,GAAgB,CAACkO,GAAO,KAC1B,MAAMpM,GAAO,EAAAgH,EAAA,GAAW,GAA4C,KAA/B,QAAqB,GAAK,IAE/D,OADIoF,IAAM,GAAapM,IAChB,EAAAG,GAAA,GAAYH,IAGjB0X,GAAQ,CAAC,OAAQ,WAEVC,GAAgB,IAAIvQ,MAAM,KAAKC,KAAK,GAAG/L,IAAI,CAACiB,EAAGoQ,KACxD,MAAM0B,EAAOlD,GAAW,QAAqBA,EAAWrL,SAClD2I,EAAOiP,IAAM,QAAqBA,GAAM5X,SACxCqI,EAAMH,GAAe,QAAqBA,EAAelI,SACzD8X,EAAO1P,EAAYvI,OAAQpD,GAAMA,EAAEuL,YAAcK,EAAIvN,IACrDiQ,EAAM+M,GAAK,QAAqBA,EAAK9X,SACrC+X,GAAW,QAAqB,QAAU,EAC1CC,EAAW3M,GAAW,QAAqBA,EAAWrL,SAC5D,MAAO,CACHlF,GAAI,WAAW+R,IACfoL,cAAe,IAAc,GAC7BC,YAAa,KACbC,QAAS5J,EAAKzT,GACdsd,UAAW7J,EAAK5S,KAChB0c,WAAY9J,EAAKlM,MACjBiW,SAAU,QAAQvN,aAAG,EAAHA,EAAKjQ,MAAM+R,IAC7BhF,YAAa,QAAQgF,IACrB1L,MAAO,GAAGwH,aAAgBkE,IAC1BlE,OACAoG,YAAY,QAAqB,QAAU,GAAM,EACjDwJ,QAAQ,QAAqB,QAAU,GAAM,EAC7CR,SAAuB,IAAbA,EACVS,SAAuB,IAAbT,EACVU,YAA0B,IAAbV,EAAiBC,EAASld,GAAK,GAC5C4d,cAA4B,IAAbX,EAAiBC,EAASrc,KAAO,GAChDgd,eAA6B,IAAbZ,EAAiBC,EAAS3V,MAAQ,GAClD5D,MAAO,CAAC4J,EAAIvN,GAAIiQ,aAAG,EAAHA,EAAKjQ,IACrBmT,eAAgB,MClCxB,IACI5E,WAAU,EACVgF,WAAU,EACVyH,aAAY,GACZa,YAAW,GACXK,eAAc,GACd4B,cCRJ,YACI,SAAqB,CACjBzT,KAAM,yBACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWhN,GACQob,GAAchY,OACxBvD,IACG,QACIG,EAAEkN,aAAavJ,aACf3D,EAAEkN,aAAarJ,WACfhE,EAAM2b,cACN3b,EAAM4b,cACL5b,EAAMqM,OAASlM,EAAEkN,aAAahB,SAMnD,SAAqB,CACjBxD,KAAM,6BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWhN,IACP,MAAMH,EAAQub,GAAc1V,KAAMzH,GAAMA,EAAEI,KAAO2B,EAAEyN,aAAapP,IAChE,IAAKwB,EACD,KAAM,CACF8G,OAAQ,IACRwG,QAAS,kCAAkCnN,EAAEyN,aAAapP,MAElE,OAAOwB,MAIf,SAAqB,CACjB6I,KAAM,yBACNrI,SAAU,GACV0M,OAAQ,OACRC,SAAWC,IACP,MAAMkN,EAAY,OAAH,wBACRlN,EAAQgB,MAAI,CACf5P,GAAI,aAAY,QAAqB,SAGzC,OADA+c,GAAchM,KAAK+K,GACZA,KAIf,MAAMiC,EAAgB,CAAC/d,EAAIiB,KACvB,MAAM8Q,EAAQgL,GAAcf,UAAWpc,GAAMA,EAAEI,KAAOA,GACtD,GAAI+R,EAAQ,EACR,KAAM,CACFzJ,OAAQ,IACRwG,QAAS,kCAAkC9O,KAEnD,MAAM8b,EAAY,OAAH,UAAQ7a,GAEvB,OADA8b,GAAcd,OAAOlK,EAAO,EAAG+J,GACxBA,IAGX,SAAqB,CACjBzR,KAAM,6BACNrI,SAAU,GACV0M,OAAQ,MACRC,SAAWnP,GAAQue,EAAcve,EAAI4P,aAAapP,GAAI,OAAF,UAAOR,EAAIoQ,UAGnE,SAAqB,CACjBvF,KAAM,qCACNrI,SAAU,GACV0M,OAAQ,OACRC,SAAWnP,GACPue,EAAcve,EAAI4P,aAAapP,GAAI,OAAF,wBAC1BR,EAAIoQ,MAAI,CACXqN,UAAU,EACVS,UAAU,QAItB,SAAqB,CACjBrT,KAAM,oCACNrI,SAAU,GACV0M,OAAQ,OACRC,SAAWnP,GACPue,EAAcve,EAAI4P,aAAapP,GAAI,OAAF,wBAC1BR,EAAIoQ,MAAI,CACXqN,UAAU,EACVS,UAAU,QAItB,SAAqB,CACjBrT,KAAM,sCACNrI,SAAU,GACV0M,OAAQ,OACRC,SAAWnP,GACPue,EAAcve,EAAI4P,aAAapP,GAAI,OAAF,wBAC1BR,EAAIoQ,MAAI,CACXqE,WAAuC,SAA3BzU,EAAIqP,aAAauG,YAIzC,SAAqB,CACjB/K,KAAM,6BACNrI,SAAU,GACV0M,OAAQ,SACRC,SAAWnP,IACP,MAAMuS,EAAQgL,GAAcf,UACvBpc,GAAMA,EAAEI,KAAOR,EAAI4P,aAAapP,IAErC,GAAI+R,EAAQ,EACR,KAAM,CACFzJ,OAAQ,IACRwG,QAAS,kCAAkCtP,EAAI4P,aAAapP,MAEpE+c,GAAcd,OAAOlK,EAAO,MArHX,KDa7B,QAAI,QAAS,oC,gDEyCN,a,MAAMiM,UAAqB,KAC9B,YACYC,EACAlV,EACAC,EACApG,EACAsb,EACAC,EACAC,EACAC,GAERxb,QATQ,KAAAob,WACA,KAAAlV,YACA,KAAAC,OACA,KAAApG,UACA,KAAAsb,SACA,KAAAC,YACA,KAAAC,UACA,KAAAC,aAKC,W,uDACT,QAAI,MAAO,SAAU,GACrB/d,KAAK8d,QAAQE,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,KACrDC,aAAaC,QACT,OACA,GAAoC,SAAjCD,aAAaE,QAAQ,WAE5BjY,SAASkY,WAEbpe,KAAK8d,QAAQE,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,KACrDhe,KAAK+d,WAAWM,KAAK,IAAG,eAAW,eACnC,QAAc,gCAElBre,KAAK8d,QAAQE,OAAO,CAAC,UAAW,MAAO,QAAS,QAAS,K,MAClC,QAAnB,EAAAM,UAAUC,iBAAS,SAAEC,WAAWnf,KAAMof,IAClC,MAAM5P,EAAQ4P,EAAInR,MAAM,KAClB5N,GAAK,WACXue,aAAaC,QAAQ,GAAGxe,iBAAmB,GAAGmP,EAAM,MACpDoP,aAAaC,QAAQ,GAAGxe,kBAAoB,GAAGmP,EAAM,MACrDoP,aAAaC,QACT,GAAGxe,eACH,IAAG,EAAAgf,EAAA,GAAS,IAAI1b,KAAQ,GAAGC,cAE/B,QAAc,8BACd0b,WAAW,IAAMzY,SAASkY,SAAU,UAG5C,QAAgBpe,KAAK6d,iBAEf7d,KAAKyI,UAAUmW,YAAYzd,MAAK,EAAAC,EAAA,GAAOC,GAAMA,IAAIE,aACvD,QAAWvB,KAAKyI,UAAUQ,IAAI,mBAC9B,MAAM4V,EAAW7e,KAAKyI,UAAUQ,IAAI,aAAe,GACnD4V,EAASC,OACH9e,KAAKyI,UAAUQ,IAAI,SACrB/C,SAAS6Y,OAAOvX,SAAS,yBAEvB,QAAWqX,GAAU1c,MAAM,IAAMnC,KAAKgf,gBAC5C,QAAWhf,KAAK4d,QAChB5d,KAAKif,QAAQ,gBAAiB,IAAMjf,KAAKgf,cAAe,WAClD,WAAkB,EAAA5d,EAAA,GAAOC,KAAQA,IAAIE,YAC3CvB,KAAKkf,aAAa,kBAClB,QAAkB,YAClB,QACIlf,KAAKyI,UAAUQ,IAAI,qCACf,IAAwB,QAApB,EAAa,QAAb,oBAAa,eAAEhC,aAAK,eAAEqG,MAAM,KAAK,MAhF9C,SAAoB6R,EAAaC,EAAsB,IACrDD,GACL,EAAAE,EAAY,CACRF,MACAG,aAAc,CACV,IAAI,oBAA4B,CAC5BC,eAAgB,CAAC,YAAarZ,SAAS6Y,QACvCS,uBAAwB,QAGhCC,iBAAkBL,IAwElBM,CAAW1f,KAAKyI,UAAUQ,IAAI,qBAG1B,c,OACA,aAAyB,QAAb,oBAAa,eAAE0W,gBAC/Btb,QAAQub,MAAM,6BACd,WACA1Z,SAASkY,W,6CAnEJV,GAAY,oG,wBAAZA,EAAY,sFALjB,yBACA,4B,wCAID,G,yBCNA,a,MAAMmC,G,6CAAAA,I,wBAAAA,EAAS,WAFNnC,M,6BAlBD,CACP,CACIoC,QAAS,KACTC,SAAU,CACNC,kBAAmB,CAAC,KAAO,QAGnC,CACIF,QAAS,MACTC,SAAU,KAA0B,CAChCE,YAAY,KAGpB,CACIH,QAAS,KACTI,KAAM,CAAC,QAEd,SA5BQ,CACL,KACApV,EACA,KACA,KACA,KACA,KACA,cAA6B,iBAAkB,CAC3CqV,SC7BI,Q,GDoDT,IE9CL,WAGF,OACGC,gBAAgBP,IAChB1d,MAAOke,GAAQhc,QAAQub,MAAMS,K,qECNzB,MAAMC,EAkBT,YAAY3f,EAA0B,IAClCX,KAAKN,GAAKiB,EAAKjB,IAAM,GACrBM,KAAKO,KAAOI,EAAKJ,MAAQ,GACzBP,KAAKgc,UAAYrb,EAAKqb,QACtBhc,KAAK+b,QAAUpb,EAAKob,SAAW,GAC/B/b,KAAKic,WAAatb,EAAKsb,SACvBjc,KAAK8R,SAAW,IAAI,IAAMnR,EAAKmR,UAAanR,EAAa2F,QACzDtG,KAAKugB,cAAgB5f,EAAK4f,cAAgB,IAAIngB,IAC1C,EAAGogB,YAAWC,UAAS5f,OAAMC,WAAUkH,aAC5B,CACHnH,KAAM,IAAImC,KAAKnC,EAAM2f,GAAWvd,UAChCnC,SACIA,IAAY,OAAoB2f,EAASD,GAC7CxY,OAAQA,KAIpBhI,KAAKkc,SAAWvb,EAAKub,U,6GC9B7B,MAAMwE,EAAoB,0BAmBpBC,EAAqBC,IACvB,OAAKC,GACDA,EACKpc,OAAQqc,KAAUA,EAAIhP,UACtB1R,IACI0gB,GACG,IAAI,IAAM,OAAD,wBACFA,EAAIhP,UAAQ,CACfnI,MAAOiX,aAAG,EAAHA,EAAKG,YAAYD,EAAIhP,SAASzO,OACrCkd,aAAcO,EAAIP,iBAG7B9b,OAAQqC,GAAUA,EAAM2I,WAI9B,SAASuR,EACZ5N,EACAwN,GAEA,OA7BG,SACHxN,GAEA,MAAM6N,GAAQ,QAAc7N,GAC5B,OAAO,SACH,GAAGsN,iBAAiCO,EAAQ,IAAMA,EAAQ,MAC5D9f,MAAK,OAAKd,GAAMA,EAAED,IAAKuN,GAAM,IAAI,IAASA,MAuBrCuT,CAA0B9N,GAAGjS,KAAKwf,EAAkBC,IAIxD,SAASO,EACZ/N,EACAwN,GAEA,MAAMK,GAAQ,QAAc7N,GAC5B,OAAO,SACH,GAAGsN,cAA8BO,EAAQ,IAAMA,EAAQ,MACzD9f,MACE,OAAKd,GAAMA,EAAED,IAAKuN,GAAM,IAAI,IAASA,KACrCgT,EAAkBC,M,6CC7DnB,MAAMQ,EA0BT,YAAYzgB,EAA8B,I,MACtCX,KAAKN,GAAKiB,EAAKjB,IAAM,GACrBM,KAAKO,KAAOI,EAAKJ,MAAQI,EAAKjB,IAAM,GACpCM,KAAKkL,SAAWvK,EAAKuK,UAAY,GACjClL,KAAKiL,WAAatK,EAAKsK,YAAc,EACrCjL,KAAKyM,YAAc9L,EAAK8L,aAAe,GACvCzM,KAAKqM,SAAW1L,EAAK0L,UAAY,EACjCrM,KAAKqhB,aAAe1gB,EAAK0gB,cAAgB,EACzCrhB,KAAKshB,gBAAkB3gB,EAAK2gB,cAC5BthB,KAAKsD,QAAU3C,EAAK2C,SAAW,GAC/BtD,KAAKmL,KAAOxK,EAAKwK,MAAQ,GACzBnL,KAAKuhB,YACAvhB,KAAKiL,WACFjL,KAAKsD,QACAlD,IAAKC,GAAMA,EAAE4K,YAAc,GAC3BwC,OAAO,CAACE,EAAGkE,IAAMlE,EAAIkE,EAAG,IACjC7R,KAAKqM,SAETrM,KAAKwhB,gBACW,QAAZ,EAAAxhB,KAAKsD,eAAO,eACNlD,IAAKiB,GAAMA,EAAE3B,IAAM,IACpBkS,KAAK,CAACC,EAAG9I,IAAM8I,EAAE4P,cAAc1Y,IAC/BvI,KAAK,OAAQ,M,qEC5CvB,MAAMkhB,EAwBT,YAAY/gB,EAA+B,I,QACvCX,KAAKN,GAAKiB,EAAKjB,IAAM,UAAS,QAAU,QAAW,OACnDM,KAAKqG,UAAY1F,EAAK0F,WAAa,GACnCrG,KAAK0L,SAAW/K,EAAK+K,WAAsB,QAAV,EAAA/K,EAAKO,aAAK,eAAExB,KAAM,GACnDM,KAAKiM,OAAStL,EAAKsL,OAAS,IAAI7L,IAAKC,GAAM,IAAI,IAAaA,IAC5DL,KAAK2hB,WAAa3hB,KAAKiM,MAAMwB,OACzB,CAACmU,EAAQnG,IAASmG,EAASnG,EAAKpP,SAChC,GAEJrM,KAAKuhB,WAAavhB,KAAKiM,MAAMwB,OACzB,CAACmU,EAAQnG,IAASmG,GAAUnG,EAAK8F,YAAc,GAC/C,GAEJvhB,KAAK4L,YAAcjL,EAAKiL,aAAe,GACvC5L,KAAKgI,OAASrH,EAAKqH,QAAU,WAC7BhI,KAAK2L,eAAiBhL,EAAKgL,gBAAkB,GAC7C3L,KAAKkB,MAAQP,EAAKO,OAAS,KAC3BlB,KAAK6L,WACDlL,EAAKkL,YACJlL,EAAaE,OACJ,QAAV,EAAAb,KAAKkB,aAAK,eAAEL,QACZ,IAAImC,MAAO6e,a,kXC5CvB,MAAMC,EAAoC,CAAC,UAAW,QAAS,MAAO,OAAQ,MAKvE,Y,MAAMC,EAcT,cAZQ,KAAAC,eAAmD,GAEnD,KAAAC,kBAAiD,GAEjD,KAAAC,UAAsB,GAEtB,KAAAC,kBAAgC,GAEhC,KAAAC,QAAkB,EAKtBC,OAAOC,iBAAiB,UAAYphB,IAChC,MAAM1B,EAAOQ,KAAKuiB,QAAQrhB,EAAM1B,MAAQ,IAAI0Q,eACxClQ,KAAKwiB,YAAchjB,IACdQ,KAAKgiB,eAAexiB,KACrBQ,KAAKgiB,eAAexiB,GAAQ,IAAIiD,EAAA,EAAgB,MAChDzC,KAAKiiB,kBAAkBziB,GAAQQ,KAAKgiB,eAAexiB,GAAM4D,gBAE7DpD,KAAKgiB,eAAexiB,GAAMsF,OAAO9E,KAAKoiB,SAClCpiB,KAAKkiB,UAAUvR,QAAQnR,IAAS,GAChC0B,EAAMuhB,iBAEVziB,KAAKwiB,UAAYhjB,KAIzB6iB,OAAOC,iBAAiB,QAAUphB,IAC9B,MAAM1B,EAAOQ,KAAKuiB,QAAQrhB,EAAM1B,MAAQ,IAAI0Q,eAC5ClQ,KAAKgiB,eAAexiB,GAAMsF,KAAK,MAC3B9E,KAAKwiB,YAAchjB,IACnBQ,KAAKwiB,UAAY,QAUtB,OAAOE,EAA0B5d,GAEpC,MAAM6d,GADND,EAASA,aAAiBxW,MAAQwW,EAAQA,EAAMpV,MAAM,MAClBlN,IAAIC,GAAKL,KAAKuiB,OAAOliB,EAAE6P,gBAC3D,GAAIyS,EAAY/d,OAAS,GAAK5E,KAAK4iB,iBAAiBD,GAAc,CAC9D3iB,KAAKmiB,kBAAkB1R,KAAKkS,GAC5B,MAAME,EAAWF,EAAYA,EAAY/d,OAAS,GAMlD,OALK5E,KAAKgiB,eAAea,KACrB7iB,KAAKgiB,eAAea,GAAY,IAAIpgB,EAAA,EAAgB,MACpDzC,KAAKiiB,kBAAkBY,GAAY7iB,KAAKgiB,eAAea,GAAUzf,gBAErEpD,KAAK8iB,2BACE9iB,KAAKiiB,kBAAkBY,GAAUvd,UAAWoH,IAC/C,GAAIA,EAAO,CACP,MAAMqW,EAAoB,GAC1B,GAAIJ,EAAY/d,OAAS,EAAG,CAExB,IAAK,MAAMiQ,KAAO8N,EAAa,CAC3B,MAAM7N,EAAQ9U,KAAKgiB,eAAenN,GAClCkO,EAAQtS,KAAKqE,GAAQA,EAAMvP,aAAoB,GAGnD,IAAK,IAAIlF,EAAI,EAAGA,EAAIsiB,EAAY/d,OAAS,EAAGvE,IACxC,GAAI0iB,EAAQ1iB,GAAK0iB,EAAQ1iB,EAAI,GAAM,OAG7B0iB,EAAQtV,OAAO,CAACoE,EAAGmR,IAAMnR,GAAKmR,EAAI,EAAI,GAAK,GAAI,IAChDL,EAAY/d,QACrBE,OAKhB,OAAO,KAOH,OAAOtF,GACX,OAAIA,EAAKmR,QAAQ,QAAU,GAAKnR,EAAKmR,QAAQ,UAAY,GAAKnR,EAAKmR,QAAQ,YAAc,EAC9EnR,EAAKsG,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAE9CtG,EAMH,2BAEJ,IAAK,MAAMkjB,KAAS1iB,KAAKmiB,kBACrBniB,KAAKkiB,UAAUzR,KAAKiS,EAAMA,EAAM9d,OAAS,IAE7C5E,KAAKkiB,WAAY,QAJA,IAWb,iBAAiBQ,GACrB,IAAIO,EAAW,EACf,IAAK,MAAMpO,KAAO6N,EACVZ,EAAwBnR,QAAQkE,GAAO,GACvCoO,IAGR,OAAOA,EAAW,G,6CAhHblB,I,0BAAAA,EAAc,QAAdA,EAAc,qBAFX,S,GAET,G,kCCZP,MAgEamB,EAAmB,CAC5BC,OAAO,EACPC,SAAU,CACNC,OAAQ,GACRC,MAAO,aACPC,SAAU,GACVC,KAAM,GACNC,YAAY,EACZC,aAAa,GAEjBC,IA7BQ,CACRpjB,KAAM,YACNwF,MAAO,UACP0G,YAAa,eACbmX,WAAY,UACZC,WAAY,CACRtW,KAAM,MACNuW,IAAK,yBAETC,UAAW,CACPxW,KAAM,MACNuW,IAAK,wBAETE,QA1DY,CACZC,KAAM,CACF,CACIX,MAAO,WACP/iB,KAAM,WACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,UAE9C,CACIsd,MAAO,aACP/iB,KAAM,aACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,iBAE9C,CACIsd,MAAO,WACP/iB,KAAM,WACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,iBAE9C,CACIsd,MAAO,WACP/iB,KAAM,WACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,UAE9C,CACIsd,MAAO,QACP/iB,KAAM,QACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,YAE9C,CACIsd,MAAO,QACP/iB,KAAM,QACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,gBAE9C,CACIsd,MAAO,SACP/iB,KAAM,SACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,YAE9C,CACIsd,MAAO,UACP/iB,KAAM,UACN4F,KAAM,CAAEC,MAAO,iBAAkBJ,QAAS,kB,aClB/C,Y,MAAMke,UAAwB,IAmDjC,YAAoBC,GAChB5hB,QADgB,KAAA4hB,SAjDZ,KAAAC,UAAY,UAEZ,KAAAC,WAAa,IAAI5hB,EAAA,EAA2B,IAE5C,KAAA6hB,UAA2C,GAE3C,KAAAC,aAAyC,GA6C7C,MAAM5e,EAAM,IAAI3C,KACVwhB,EAAO,IAAIxhB,KChEb,eDiEEyhB,GAAQ,EAAAC,EAAA,GAAU/e,EAAK6e,GACvB,aAAY,EAAAve,EAAA,GAAOue,EAAM,YACzB,EAAAve,EAAA,GAAOue,EAAM,uBACnB,QAAI,OAAQ,OAAqB,KAAM,SAAS,IAChD,QAAI,MAAO,oBAA4BC,IAAS,KAAM,SAAS,GAC/DzkB,KAAK2kB,OA/CT,cAAqBxkB,GACjBH,KAAKqkB,WAAWvf,KAAK3E,GAIlB,OAAgBI,GAKnB,OAJKP,KAAKukB,aAAahkB,KACnBP,KAAKskB,UAAU/jB,GAAQ,IAAIkC,EAAA,EAAmB,MAC9CzC,KAAKukB,aAAahkB,GAAQP,KAAKskB,UAAU/jB,GAAM6C,gBAE5CpD,KAAKukB,aAAahkB,GAItB,KAAQA,EAAcJ,GACpBH,KAAKukB,aAAahkB,KACnBP,KAAKskB,UAAU/jB,GAAQ,IAAIkC,EAAA,EAAmB,MAC9CzC,KAAKukB,aAAahkB,GAAQP,KAAKskB,UAAU/jB,GAAM6C,gBAEnDpD,KAAKskB,UAAU/jB,GAAMuE,KAAK3E,GAGvB,MAAeI,GAClB,OAAQP,KAAKukB,aAAahkB,GAEpBP,KAAKskB,UAAU/jB,GAAMgF,WADrB,KAKV,YACI,OAAOvF,KAAKmkB,OAAOS,WAEvB,UAAiBzkB,GACbH,KAAKmkB,OAAOU,SACR,GAAG1kB,OAAWH,KAAKiJ,IAAI,aAAejJ,KAAKokB,aAmBtC,O,oDACLpkB,KAAKiJ,IAAI,WACToZ,OAAOc,OAAQ,IAEA,QAAf,EAAAnjB,KAAKiJ,IAAI,cAAM,eAAE1I,QACjBP,KAAKokB,UAAYpkB,KAAKiJ,IAAI,OAAO1I,MAErCP,KAAKokB,UACDle,SAAS4e,SAASC,MAAM,GAAGzX,MAAM,KAAK9M,KAAK,MAAQR,KAAKokB,WAC5D,QAAWpkB,KAAKokB,UAAU9W,MAAM,KAAK9M,KAAK,KAAKwkB,gBAC/C,QAAI,WAAY,gCAChBhlB,KAAKilB,aAAangB,MAAK,GACnBud,OAAOc,QACFd,OAAO6C,cAAa7C,OAAO6C,YAAc,IAC9C7C,OAAO6C,YAAYrG,SAAW7e,QAKtC,eACI,OAAOA,KAAKokB,UAOT,IAAavP,GAChB,MAAMpV,EAAOoV,EAAIvH,MAAM,KACvB,GAAgB,QAAZ7N,EAAK,GACL,OAAO,QAAgBA,EAAMyjB,GAEjC,MAAMiC,EAAoBnlB,KAAKqkB,WAAW9e,WAC1C,IAAK,MAAM6f,KAAYD,EAAmB,CACtC,MAAMhlB,GAAQ,QAAgBV,EAAKslB,MAAM,GAAIK,GAC7C,GAAa,MAATjlB,EACA,OAAOA,EAGf,OAAO,QAAgBV,EAAMyjB,I,6CAzGxBgB,GAAe,c,0BAAfA,EAAe,QAAfA,EAAe,qBAFZ,S,GAET,G,wBEpBmC,QAAQ,OAAQ,EACtD,QAAW,SAAU,EACjB,QAAM,CAAEmB,QAAS,EAAGC,OAAQ,KAC5B,QAAQ,KAAK,QAAM,CAAED,QAAS,EAAGC,OAAQ,UAE7C,QAAW,SAAU,EACjB,QAAM,CAAED,QAAS,EAAGC,OAAQ,OAC5B,QAAQ,KAAK,QAAM,CAAED,QAAS,EAAGC,OAAQ,SAP1C,MAWMC,GAAiC,QAAQ,OAAQ,EAC1D,QAAM,QAAQ,QAAM,CAAEF,QAAS,EAAGC,OAAQ,QAC1C,QAAM,QAAQ,QAAM,CAAED,QAAS,EAAGC,OAAQ,EAAG,iBAAkB,WAC/D,QAAW,iBAAiB,QAAQ,oB,cCdxC,IAAIxjB,ECIA0jB,EACAC,EACAC,EDJG,SAASC,EAAgBC,GAC5B9jB,EAAW8jB,EAWR,SAASC,EACZtY,EACAiB,EACAsX,EAAiB,KACjBC,EACAC,EAAqC,IAErC,IAAKlkB,EACD,MAAM,IAAIvC,MAAM,4CAEpB,MAAM0mB,EAAenkB,EAASpB,KAAK8N,EAASsX,EAAQ,OAAF,QAC9CI,WAAY,CAAC3Y,GACbzM,SAAU,KACPklB,IAEHF,IACAC,EAAYA,GAAa,KAAOE,EAAaE,WAC7CF,EAAaG,WAAW9gB,UAAU,IAAMygB,MAWzC,SAASM,EACZC,EACAR,EACAC,EACAC,EAAqC,IAErC3hB,QAAQ8e,MAAMmD,GACdT,EAAO,UAAWS,EAAKR,EAAQC,EAAWC,GAUvC,SAASO,EACZD,EACAR,EACAC,EACAC,EAAqC,IAErC3hB,QAAQub,MAAM0G,GACdT,EAAO,QAASS,EAAKR,EAAQC,EAAWC,GA2BrC,SAASQ,EACZF,EACAR,EACAC,EACAC,EAAqC,IAErC3hB,QAAQoiB,KAAKH,GACbT,EAAO,OAAQS,EAAKR,EAAQC,EAAWC,GCpFpC,SAASU,EACZC,EACAd,EAAuB,KAAM,MAC7BjgB,EAAmB,KAEf+gB,EAAMC,YACFpB,GAAYA,EAAWqB,cACvBpB,GAAYA,EAAWoB,cACvBnB,GAAQ7f,cAAc6f,GAC1BF,EAAamB,EAAMG,UAAUxhB,UAAWpE,KAGpC,QAAI,QAAS,wCAFyBA,EAAM2M,QAAQkZ,6BACV7lB,EAAM4lB,UAAUC,QAqBtE,SAAwBJ,GAChBA,EAAMC,aACN,QAAI,QAAS,sCACbD,EAAMK,iBAAiB3nB,KAAK,KACxBmnB,EAAW,gDAAiD,UAAW,IACnEtgB,SAASkY,QAAO,OAxBpB4I,CAAeL,KAEnBlB,EAAakB,EAAMM,UAAU3hB,UAAU,MACnC,QAAI,QAAS,mCACbugB,EAAO,gDAAiD,IACpD3f,SAASkY,QAAO,MAGxBsH,EAAc7N,YAAY,MACtB,QAAI,QAAS,2BACb8O,EAAMO,kBACPthB,ICnBJ,SAAeuhB,EAAWtI,G,8CAC7B,MAAM0E,EAAW1E,EAAS0E,UAAYrd,SAASqd,SACzCtR,EAAO4M,EAASwE,QAAUnd,SAASkhB,SACnC5D,EAAO3E,EAAS2E,MAAQtd,SAASsd,KACjC6D,EAAMxI,EAAS4E,WACf,GAAGF,MAAatR,KAAQuR,IACxBtd,SAAS6Y,OACTuE,GAASpd,SAAS4e,SAAW,KAAKhf,QAAQ,KAAM,KACtDzB,QAAQC,IACJ,QACAua,EAASC,KACT5Y,SAASohB,KAAK9f,SAAS,aACU,SAAjCyW,aAAaE,QAAQ,SAEzB,MAAMW,EACFD,EAASC,MACT5Y,SAASohB,KAAK9f,SAAS,cACU,SAAjCyW,aAAaE,QAAQ,QAEnB6H,EAA2B,CAC7BuB,UAAW,YACXC,MAAO,SACPvV,KAAM,GAAGA,IAAOuR,EAAO,IAAMA,EAAO,KACpCiE,SAAU,GAAGJ,yBACbK,UAAW,GAAGL,qBACdM,aAAc,GAAGzhB,SAAS6Y,SAASuE,mBACnCsE,cAAe/I,EAAS6E,YACxBmE,YAAY,EACZ/I,QAWJ,OATIb,cACAA,aAAaC,QACT,OACA,KAAKY,IAAS5Y,SAASohB,KAAK9f,SAAS,iBAGzCsX,GACA0H,EAAW,8BAER,SAAMR,K,4CCxDjB,MAAM8B,EAAgB,IAAIrlB,EAAA,EAA2B,MAExCslB,EAAeD,EAAc1kB,eAkBnC,SAAS4kB,IACZ,OAAOF,EAAcviB,WAfzBoZ,WAAW,KACP,IACI,GAAIsJ,KAAM,OACZ,WACF,SAAS,WACJ9mB,MACG,EAAAuE,EAAA,GAAM,MACN,EAAAwiB,EAAA,GAAM,KACN,EAAA9nB,EAAA,GAAKC,GAAM,IAAI,KAAUA,KAE5BiF,UAAW6N,GAAS2U,EAAchjB,KAAKqO,KAC7C,M,4BCjBI,SAASgV,EAAc/nB,GAC1B,IAAI+N,EAAM,GACV,GAAI/N,EACA,IAAK,MAAMyU,KAAOzU,EACVA,EAAIgoB,eAAevT,IAAnBzU,MAA2BA,EAAIyU,KAC/B1G,GAAO,GAAIA,EAAM,IAAM,KAAM0G,KAAOzU,EAAIyU,MAIpD,OAAO1G,E,iGCTJ,Y,MAAMka,EAHb,cAKc,KAAAC,QAAsC,GAEtC,KAAAC,WAAyC,GAEzC,KAAAC,eAEN,GAEe,KAAAvD,aAAe,IAAI,KAAyB,GAE/C,KAAArG,YAAc5e,KAAKilB,aAAa7hB,eAGhD,qBACI,OAAOpD,KAAKilB,aAAa1f,WAGtB,cACHvF,KAAKyoB,UAGC,UACN,IAAK,MAAM5T,KAAO7U,KAAKsoB,QACfzT,KAAO7U,KAAKsoB,SACZtoB,KAAKkf,aAAarK,GAG1B,IAAK,MAAMA,KAAO7U,KAAKuoB,WACf1T,KAAO7U,KAAKuoB,YACZvoB,KAAK6F,cAAcgP,GAG3B,IAAK,MAAMA,KAAO7U,KAAKwoB,eACf3T,KAAO7U,KAAKwoB,gBACZxoB,KAAK0oB,MAAM7T,GAWb,QAAQtU,EAAcooB,EAAgBjjB,EAAgB,KAC5D,KAAInF,GAAQooB,GAAMA,aAAcC,UAO5B,MAAM,IAAIrpB,MACNgB,EACM,6CACA,8CATVP,KAAKkf,aAAa3e,GAClBP,KAAKsoB,QAAQ/nB,GAAaoe,WAAW,KACjCgK,IACA3oB,KAAKsoB,QAAQ/nB,GAAQ,MACtBmF,GAcD,aAAanF,GACfP,KAAKsoB,QAAQ/nB,KACb2e,aAAalf,KAAKsoB,QAAQ/nB,IAC1BP,KAAKsoB,QAAQ/nB,GAAQ,MAUnB,SAASA,EAAcooB,EAAgBjjB,EAAgB,KAC7D,KAAInF,GAAQooB,GAAMA,aAAcC,UAI5B,MAAM,IAAIrpB,MACNgB,EACM,8CACA,+CANVP,KAAK6F,cAActF,GACnBP,KAAKuoB,WAAWhoB,GAAasX,YAAY,IAAM8Q,IAAMjjB,GAcnD,cAAcnF,GAChBP,KAAKuoB,WAAWhoB,KAChBsF,cAAc7F,KAAKuoB,WAAWhoB,IAC9BP,KAAKuoB,WAAWhoB,GAAQ,MAStB,aAAaA,EAAcmoB,GACjC1oB,KAAK0oB,MAAMnoB,GACXP,KAAKwoB,eAAejoB,GAAQmoB,EAOtB,MAAMnoB,GACRP,KAAKwoB,gBAAkBxoB,KAAKwoB,eAAejoB,KAC3CP,KAAKwoB,eAAejoB,aAAiB,IAC9BP,KAAKwoB,eAAejoB,GAAuBsmB,cAC3C7mB,KAAKwoB,eAAejoB,KAC3BP,KAAKwoB,eAAejoB,GAAQ,MAK1B,UAAUsoB,GAChB,MAAMC,EAAOrU,OAAOhV,KAAKO,KAAKwoB,gBAAgB/jB,OAAQskB,GAClDA,EAAEvhB,SAASqhB,IAEf,IAAK,MAAMhU,KAAOiU,EACd9oB,KAAK0oB,MAAM7T,I,6CArIVwT,I,0BAAAA,EAAS,QAATA,EAAS,qBAFN,S,GAET,I,qMCaP,IAAIjE,EAAY,MAET,SAAS4E,EAAWzoB,GACvB6jB,EAAY7jB,EAWT,SAAS+D,EACZiJ,EACA+Y,EACA9L,EACAyO,EAAwB,QACxBC,GAAiB,EACjBC,EAAmB/E,GAEnB,GAAI/B,OAAOc,OAAS+F,EAAO,CACvB,MAAME,EAAmB,CACrB,iBACA,iBACA,kBAEA5O,EACAnW,QAAQ4kB,GACJ,MAAME,QAAe5b,QAAW+Y,OAC7B8C,EACH5O,GAGJnW,QAAQ4kB,GAAQ,MAAME,QAAe5b,QAAW+Y,OAAU8C,IAU/D,SAASC,EAAgB5pB,EAAgBW,GAC5C,MAAMyU,EAAMpV,EAAK6pB,QACjB,OAAIlpB,GAAmB,MAAZA,EAAIyU,GACJpV,EAAKmF,OAAS,EAAIykB,EAAgB5pB,EAAMW,EAAIyU,IAAQzU,EAAIyU,GAE5D,KAQJ,SAAS0U,EAAgBC,EAAa,GAAI3U,EAAc,IAC3D,OAAO2U,EAAM/kB,OACT,CAACiM,EAAI+Y,EAAKC,IACNA,EAAI/Y,QAEM+Y,EAAI3iB,KADV8N,EACgBxU,GAAMA,EAAEwU,KAASnE,EAAGmE,GACpBxU,GAAMA,IAAMqQ,MAC1B+Y,GASX,SAASE,EAAUC,EAAc5d,EAAgB,GACpD,OAAOD,KAAKC,MAAMD,KAAK8d,UAAYD,EAAO5d,IAAUA,EAGjD,SAAe8d,EAClBnpB,EACAopB,G,8CAEA,MAAMtpB,EAAMspB,EAAOrpB,KACf,IAAqB,+BAEd,KAAgB,CACnBC,UAGR,OAAO,OAAP,8BACcxB,QAAQ6B,KAAK,CACnBP,EAAIQ,kBAAkBC,MACjBC,MAAK,OAAOE,GAAmB,SAAbA,EAAEC,SACpBC,YACLd,EAAIe,cAAcD,eACnB,CACHS,QAAUgF,GAAOvG,EAAIQ,kBAAkBe,QAAUgF,EACjDrF,MAAO,IAAMlB,EAAIkB,YAQlB,SAASqoB,EAAUC,EAAaC,EAAoB,KACvD,MAAMC,EAAa,IAAIC,OACnB,+DACA,MAEJ,IAAIC,EAAa,KACjB,MAAMC,EAAU,CAAC,IACjB,KAAQD,EAAaF,EAAWI,KAAKN,IAC7BI,EAAW,GAAGzlB,QAA4B,MAAlBylB,EAAW,IAAYC,EAAQ7Z,KAAK,IAChE6Z,EAAQA,EAAQ1lB,OAAS,GAAG6L,KACxB4Z,EAAW,GACLA,EAAW,GAAGvkB,QAAQ,IAAIskB,OAAO,KAAM,KAAM,KAC7CC,EAAW,IAGzB,MAAMG,EAAoBF,EAAQ3O,OAAO,EAAG,GAAG,GAa/C,OAZiB2O,EAAQlqB,IAAKqqB,IAC1B,MAAMC,EAAU,GAChB,IAAK,IAAIrqB,EAAI,EAAGA,EAAIoqB,EAAI7lB,OAAQvE,IAAK,CACjC,MAAMwU,EAAM2V,EAAQnqB,GAAGiN,MAAM,KAAK9M,KAAK,KAAK0P,cAC5C,IACIwa,EAAQ7V,GAAO8V,KAAKC,MAAMH,EAAIpqB,IAChC,MAAOf,GACLorB,EAAQ7V,GAAO4V,EAAIpqB,IAAM,IAGjC,OAAOqqB,IASR,SAASG,EAAUC,GACtB,GAAIA,aAAgB5e,OAAS4e,EAAKlmB,OAAS,EAAG,CAC1C,MACMmmB,EADOtW,OAAOhV,KAAKqrB,EAAK,IACNrmB,OAAQoQ,GAAQA,KAAOiW,EAAK,IACpD,MAAO,GAAGC,EAAWvqB,KAAK,SAASsqB,EAC9B1qB,IAAKqb,GACFsP,EAAW3qB,IAAKyU,GAAQ8V,KAAKK,UAAUvP,EAAK5G,KAAOrU,KAAK,MAE3DA,KAAK,QAEd,MAAO,GAQJ,SAASyqB,EAAaC,EAAkBC,GAC3C,MAAMT,EAAUU,SAASC,cAAc,KACvCX,EAAQY,aACJ,OACA,iCAAmCC,mBAAmBJ,IAE1DT,EAAQY,aAAa,WAAYJ,GAEjCR,EAAQc,MAAMC,QAAU,OACxBL,SAAS9b,KAAKoc,YAAYhB,GAE1BA,EAAQiB,QAERP,SAAS9b,KAAKsc,YAAYlB,GAsBvB,SAASmB,EAAiBC,GAC7B,MAAMC,EAAQ,IAAID,GACZtb,EAAM,GACZ,KAAOub,EAAMnnB,QAAQ,CAEjB,MAAME,EAAOinB,EAAMC,MACf9f,MAAM+f,QAAQnnB,GAEdinB,EAAMtb,QAAQ3L,GAEd0L,EAAIC,KAAK3L,GAIjB,OAAO0L,EAAI0b,UAUR,SAASC,EAAqBC,EAAQC,EAAMC,EAAQC,GACvD,OACKH,GAAUE,GAAUF,EAASG,GAC7BF,EAAOC,GAAUD,EAAOE,GACxBD,GAAUF,GAAUE,EAASD,GAC7BE,EAAOH,GAAUG,GAAQF,EAIlC,MAAMG,EAQN,SAAere,GACX,IAAIse,EAAI,WAAate,EAAIvJ,OACzB,IAAK,IAAIvE,EAAI,EAAGA,EAAI8N,EAAIvJ,OAAQvE,IAC3BosB,EAAI1gB,KAAK2gB,KAAKD,EAAIte,EAAIwe,WAAWtsB,GAAI,YACjCosB,EAAKA,GAAK,GAAOA,IAAM,GAChC,OAAO,WAGH,OAFAA,EAAI1gB,KAAK2gB,KAAKD,EAAKA,IAAM,GAAK,YAC9BA,EAAI1gB,KAAK2gB,KAAKD,EAAKA,IAAM,GAAK,aACtBA,GAAKA,IAAM,MAAQ,GAhBtBG,CAAM,WACbC,GAmBShb,EAnBI,WAmBD9I,EAnBa,UAmBV4E,EAnBsB,WAmBnBkD,EAnB+B2b,IAoB5C,WAKH,IAAI7X,GAJJ9C,KAAO,IACP9I,KAAO,GAGW,EAOlB,OANA8I,EAAI9I,EAAKA,IAAM,EACfA,GAJA4E,KAAO,IAIGA,GAAK,GAAM,EAGrBgH,EAAKA,GADL9D,EAAS,GALTA,KAAO,GAKO,GACA,EACdlD,GAHAA,EAAKA,GAAK,GAAOA,IAAM,IAGdgH,EAAK,GACNA,IAAM,GAAK,aAb3B,IAAe9C,EAAG9I,EAAG4E,EAAGkD,EAjBjB,SAASic,EAAqBlD,EAAe,IAAK5d,EAAgB,GACrE,OAAOD,KAAKC,MAAM6gB,KAAUjD,EAAO5d,IAAUA,EAkC1C,SAAS+gB,IACZ,OAIG,WACH,MACMC,GADO,IAAIhqB,MAEZiqB,mBACG7B,SAAS8B,cAAc,QAAQC,aAAa,SACxC7O,UAAU8O,UAEjBld,cACL,OAAO8c,EAAarc,QAAQ,MAAQ,GAAKqc,EAAarc,QAAQ,MAAQ,EAZ/D0c,GAAiB,QAAU,SAe/B,SAASC,EAAiBztB,GAC7B,MAAM0tB,EAAU,GAChB,IAAK,MAAM1Y,KAAOhV,EAAKI,SACdJ,EAAKI,SAAS4U,GAAK2Y,OACpBD,EAAQ9c,KAAKoE,GAGrB,OAAO0Y,I,sXCvSH,oBAKI,8DAA+B,OAAtB,EAAAzH,OAAA,WAAoB,QAAS,IAEtC,sBACJ,Q,gDAJI,qCAGU,0BAwCf,Y,MAAM2H,UAA4B,KAlDzC,c,oBAoDoB,KAAAC,QAA0B,GAEzB,KAAA5H,OAAS,IAAI,MAIvB,QACH9lB,KAAKif,QAAQ,QAAS,IAAOjf,KAAK6H,MAAO,I,0EATpC4lB,KAAmB,GAAnBA,I,2BAAAA,EAAmB,mZA/CxB,0BASA,oBAII,iDAAsB,iCACC,EAAA9rB,QAAU,KAAE,SAEnC,oBAAU,SAAgC,QAC9C,S,MAdqB,2BASjB,8BAIU,2C,0WA+Bf,G,gFC7CC,iBAKI,SACJ,S,qBADI,mC,wCAEJ,yBAKI,4DAEA,aACI,kBAQJ,QACJ,Q,wBAbI,yBAKQ,8BAAmB,oBAkDhC,Y,MAAMgsB,EAaT,YAA8CC,GAAA,KAAAA,WAX9B,KAAApf,QAAUxO,KAAK4tB,SAASpf,QAExB,KAAArC,KAAOnM,KAAK4tB,SAASzhB,MAAQ,UAE7B,KAAA0hB,OAAS7tB,KAAK4tB,SAASC,QAAU,OAEjC,KAAA/H,OAAS9lB,KAAK4tB,SAAS9H,QAAU,KAO1C,WACHnH,WAAW,IAAO3e,KAAK6H,MAAO,EAAO,KACrC8W,WAAW,IAAO3e,KAAK8tB,cAAe,EAAO,M,6CAjBxCH,GAAe,MAaJ,O,wBAbXA,EAAe,gtBAlEpB,uBAOA,wB,MALK,wCAMA,gC,gcA0DN,G,iEC/CS,kBACI,SACJ,S,sBADI,sD,yBARR,iBAMI,SACA,wBAGJ,S,sBAPI,wCAGA,kCACO,oC,wCAff,WAAqC,4EACjC,iBAOA,uBAWJ,Q,wBAhBQ,wCAA6B,+BAA7B,CAA6B,6BAA7B,CAA6B,+BAM5B,kDAyCV,Y,MAAMI,EAoBT,YACsCH,EAC1BI,GAD0B,KAAAJ,WAC1B,KAAAI,MArBL,KAAAC,KAAO,EAEP,KAAAC,OAASluB,KAAK4tB,SAASM,QAAU,GAExB,KAAA1f,QAAUxO,KAAK4tB,SAASpf,QAExB,KAAArC,KAAOnM,KAAK4tB,SAASzhB,MAAQ,UAE7B,KAAA0hB,OAAS7tB,KAAK4tB,SAASC,QAAU,UAEjC,KAAAja,UAAoB5T,KAAK4tB,SAASha,WAAa,EAa3D5T,KAAK4tB,SAASK,KAAK3oB,UAAW0d,GAC1BjX,KAAKoiB,IAAI,GAAMnuB,KAAKiuB,KAAOjL,GAAK,IAZxC,mBACI,OAAO,EAAAoL,EAAA,GAAqC,IAAjBpuB,KAAK4T,WAAoB,OAejD,WACH+K,WAAW,IAAO3e,KAAK6H,MAAO,EAAO,KACrC8W,WAAW,IAAO3e,KAAK8tB,cAAe,EAAO,KAG1C,kBACH9tB,KAAKquB,eAGF,eACH,MAAMC,EAAMtuB,KAAKguB,IAAIO,cAAcC,wBACnC,IAAKF,EAAIG,MAAO,OAAO9P,WAAW,IAAM3e,KAAKquB,eAAgB,KAC7DruB,KAAKkuB,OAASniB,KAAKoiB,IACf,IACCnuB,KAAK4tB,SAASM,QAAU,KAAOI,EAAIG,OAAS,M,6CA3C5CV,GAAkB,MAqBf,KAAgB,e,wBArBnBA,EAAkB,ufAlDvB,gC,KAAe,gC,iUAkDhB,G,sBChDa,SACI,SACJ,S,wDAGA,eAOI,SACJ,S,yBAHI,uCAEA,gC,yBArBZ,SACI,iBAKI,oBAAU,SAA8B,QAC5C,QACA,iBACI,gCAGJ,QACA,iBACI,qBASJ,QACJ,S,gCArBQ,wCAA6B,sBAGnB,uCAGK,gCAAc,cASR,mC,yBAS5B,eAAS,SAAW,S,qBAAX,yB,yBAGV,0BACA,gBAAuC,SAAa,S,qBADvC,qBAC0B,2B,cAK5C,Y,MAAMW,EA3Cb,cA6CoB,KAAA1sB,QAAkB,GAElB,KAAA4d,MAAgB,GAEhB,KAAA+O,MAA2B,I,6CANlCD,I,wBAAAA,EAAsB,+pB,GAAA,M,QAxC3B,iBAII,gCAyBJ,QACA,0CAGA,2C,sBA7BmB,kCAAgB,gB,iBAoCpC,G,sECkDA,ICtDA,Q,MAAME,G,6CAAAA,I,wBAAAA,EAAqB,wE,aAjCuB,4G,EAEzC,4L,EAIA,mK,kMAVR,iBAGI,gBAAqB,eAAG,QACxB,2BAA8D,QAC9D,0BAGA,QACA,wBAGA,QACJ,U,2QAwBD,G,wBCzBA,MAAeC,GAOf,Y,MAAMC,EACT,YACYC,EACYC,GADZ,KAAAD,UACY,KAAAC,UAGX,YACTlqB,EACAgQ,G,8CAEA,OAAO9U,KAAKivB,cAGH,QACT3L,EACA4L,G,8CAEA,OAAOlvB,KAAKivB,cAGF,Y,0DACJ,WACD9tB,MAAK,OAAOE,GAAMA,IAClBE,YACL,MAAM4R,QAAwB,WACpB,OAAO9R,KAAQA,IACpBE,YACC4tB,KACFhc,IACc,QAAZ,EAAAnT,KAAKgvB,eAAO,eAAE5jB,SAAS+H,EAAKnD,OAAOxI,SAASxH,KAAKgvB,QAAQ5jB,QAK/D,OAHK+jB,GACDnvB,KAAK+uB,QAAQK,SAAS,CAAC,oBAElBD,K,6CAlCJL,GAAmB,kBAGKD,EAAkB,K,0BAH1CC,EAAmB,QAAnBA,EAAmB,qBAFhB,S,GAET,GC2CP,MAAM5lB,GAAqB,CACvB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,MAoCG,a,MAAMmmB,G,6CAAAA,I,wBAAAA,I,6BANE,CACP,CAAEvP,QAAS,KAAiBC,SAAU,SACtC,CAAED,QAAS,IAAkBC,SAAU,KAC1C,SAJQ,CAAC,KAAc,KAAa,QAAwB7W,IA7C7D,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,Q,GAoCG,G,MAhCH,IAAmB,MACnB,IAAa,e,MACbukB,EAAmB,WADnB,KAAa,I,MAIb,IAAqB,WAJrB,IAAa,oB,MASbiB,EAAsB,MATtB,IAAa,qB,oFCzEL,eACI,oBACI,SACJ,QACJ,S,qBAJK,+BAEG,4D,sBAGR,iBACI,yBACJ,S,MADiB,+B,cAmCtB,Y,MAAMY,EAtDb,cA0DoB,KAAAC,UAAoB,iBAQpB,KAAAza,MAAkC,I,6CAZzCwa,I,wBAAAA,EAAmB,yb,QAnDxB,oBAMI,sBACI,SACA,SACJ,QACA,uBAKA,uBAGJ,S,MAfI,qCACA,wCAEe,wCAAuB,eAClC,kCAGoC,2CAKZ,mC,uZAoCjC,I,sGC1BC,kBAII,sBACA,eAKJ,S,qBANc,8BAIN,6C,wCAGR,oBAII,oBACI,SACJ,QACA,oBAA8C,+DAC1C,SACJ,QACJ,Q,wBALQ,sCAGA,wC,yBAIJ,mBACI,kBAGI,0BACA,aAAG,SAAa,QACpB,QACJ,S,qBAFW,2BAzChB,MAAME,EAAmB,CAC5BlK,OAAQ,OACRmJ,MAAO,OACPgB,UAAW,oBACXC,SAAU,qBA4CP,Y,MAAMC,EAuBT,YACY5tB,EACyBF,GADzB,KAAAE,cACyB,KAAAF,QArBpB,KAAAX,MAAQ,IAAI,MAEb,KAAA6E,MAAgB/F,KAAK6B,MAAMkE,OAAS,UAEpC,KAAAC,QAAkBhG,KAAK6B,MAAMmE,SAAW,gBAExC,KAAA4pB,aAAuB5vB,KAAK6B,MAAM+tB,cAAgB,SAElD,KAAAC,YAAsB7vB,KAAK6B,MAAMguB,aAAe,SAEhD,KAAA1pB,KAAwBnG,KAAK6B,MAAMsE,MAAQ,CACvDC,MAAO,iBACPJ,QAAS,QAGG,KAAA8pB,aAAe,IAAO9vB,KAAK+B,YAAY+tB,cAAe,EAEtD,KAAAC,YAAc,IAAO/vB,KAAK+B,YAAY+tB,cAAe,EAQ9D,YACH9vB,KAAKkB,MAAMkB,KAAK,CAAEd,OAAQ,U,6CA9BrBquB,GAAqB,kBAyBlB,Q,wBAzBHA,EAAqB,8sB,GAAA,MAtC1B,kBACI,gBAAqB,SAAW,QACpC,QACA,wBAWA,0BAWA,2C,sBAxByB,wBAGpB,kCAAgB,cAYhB,oC,iBAsBN,I,yJC7Ca,kBAQI,SACJ,S,uDANI,4CAA8C,yCAK9C,gD,yBAUA,SAEK,SAAiB,S,mDAAjB,sB,qBAGD,S,4EAAA,iC,6DACK,wCAGP,gD,yBAjBN,kBAQI,iCAIA,2CAYJ,S,gFArBI,4CAA8C,yCAG9C,oBAGK,sCAAyB,e,yBArB1C,SACI,WACI,uBAUA,uBAyBJ,QACJ,S,yBArCkB,kC,qBAuClB,6B,qBAIA,sB,yBAMI,gBACI,SACJ,S,qBADI,uDAiCb,Y,MAAMK,UACD,KAzFZ,c,oBA8FoB,KAAAC,YAAa,EAEb,KAAAC,UAAY,EAQZ,KAAAC,YAAwB,GAIxB,KAAAC,SAAsC,GAEtC,KAAAC,YAAqC,IAAI,KACrD,IAMG,kBACHrwB,KAAKqwB,YAAYze,KAAO5R,KAAKswB,MAC7BtwB,KAAKqwB,YAAYE,UAAYvwB,KAAKiwB,WAAajwB,KAAKwwB,WAAa,KACjExwB,KAAKqwB,YAAYI,gBAAkB,CAACpwB,EAAQ2G,KACxC,IAAK,MAAM6N,KAAOxU,EAAG,CACjB,GACsB,iBAAXA,EAAEwU,IACTxU,EAAEwU,GAAK3E,cAAc1I,SAASR,EAAEkJ,eAEhC,OAAO,EACJ,GAAI7P,EAAEwU,KAAS7N,EAClB,OAAO,EAGf,OAAO,GAIR,YAAY0pB,GACXA,EAAQC,YAAc3wB,KAAK2wB,aACvB3wB,KAAK2wB,sBAAsB,IAC3B3wB,KAAK4wB,aACD,OACA5wB,KAAK2wB,WAAWrrB,UACX3E,GAAUX,KAAKqwB,YAAY1vB,KAAOA,IAI3CX,KAAKqwB,YAAY1vB,KAAOX,KAAK2wB,YAGjCD,EAAQT,aACRjwB,KAAKqwB,YAAYE,UAAYvwB,KAAKiwB,WAC5BjwB,KAAKwwB,WACL,MAENE,EAAQjsB,SACRzE,KAAKqwB,YAAY5rB,QAAUzE,KAAKyE,QAAU,IAAIosB,OAAO3gB,eAErDwgB,EAAQI,SAAW9wB,KAAK8wB,UACxB9wB,KAAK+wB,eAAiB/wB,KAAK8wB,QAAQ1wB,IAC/B,CAACiB,EAAG+K,IAAQpM,KAAK+wB,eAAe3kB,IAAQ/K,EAAEiM,MAAM,KAAK9M,KAAK,OAG7DR,KAAKmwB,cACNnwB,KAAKmwB,YAAc,K,0EA1ElBH,KAAoB,GAApBA,I,2BAAAA,EAAoB,qD,GAAA,M,KA0BlB,KAAY,G,KACZ,KAAO,I,8tCAhHd,uBACI,gCAwCA,kCAIA,2BAKA,+BAKJ,QACA,iBACI,2BAMJ,S,MA/DW,kCAC0B,oCA0C5B,4CAKoB,oCAAAc,SAQjB,uCAEJ,uCAAsB,kBAAtB,CAAsB,6B,8WA2B/B,I,+JCnEa,S,yBADJ,SACI,gCAGJ,S,sBAFS,8CAA4B,8BAAAE,W,yBAGrC,SACI,iB,oBACJ,S,sBADS,wD,qBAGL,S,yBADJ,SACI,gCAGJ,S,sBAFS,6CAA2B,mC,yBAXxC,iBACI,gCAKA,gCAGA,gCAKJ,S,qBAdqC,yBAClB,2CAKA,uC,cArBxB,Y,MAAMC,EAGT,YAAYpgB,GACR7Q,KAAKW,KAAOkQ,EAAElQ,KACdX,KAAK2B,MAAQkP,EAAElP,OAAS,KAAO,O,iEAL1BsvB,EAAiB,QAAjBA,EAAiB,Y,GAAvB,GAiCA,Q,MAAMC,UACD,KA6BR,YACYC,EACAC,EACAC,GAER9uB,QAJQ,KAAA4uB,WACA,KAAAC,WACA,KAAAC,YArBI,KAAAC,UAAW,EAEX,KAAAC,OAAQ,EAEjB,KAAAhkB,KAA0C,WAIzC,KAAAikB,aAA2B,KAII,KAAAC,QAAU,IAAMzxB,KAAKU,OAChB,KAAAgxB,QAAU,IAClD1xB,KAAKuxB,MAAQvxB,KAAKU,OAAS,GACa,KAAAixB,QAAU,IAClD3xB,KAAKuxB,MAAQvxB,KAAK2B,QAAU,GAUzB,YAAY+uB,GACf1wB,KAAK4xB,kBAED5xB,KAAKwxB,eACJd,EAAQmB,OAASnB,EAAQoB,OAASpB,EAAQ1qB,UAE3ChG,KAAKU,OAIN,cACH6B,MAAMwvB,cACN/xB,KAAK2B,QAGF,OACE3B,KAAKgG,UACVhG,KAAKgyB,cACDhyB,KAAKwxB,cAAcxxB,KAAK2B,QACvB3B,KAAKiyB,UACVjyB,KAAKwxB,aAAexxB,KAAKoxB,SAASc,OAAO,CACrCC,cAAenyB,KAAKsxB,SACpBc,iBAAkBpyB,KAAKoxB,SAClBiB,WACAC,oBAAoBtyB,KAAKmxB,UACzBoB,cAAc,CACX,CACIC,QAASxyB,KAAK6xB,OAAS,MACvBY,SACoB,QAAfzyB,KAAK8xB,MACA,SACc,UAAd9xB,KAAK8xB,MACL,MACA9xB,KAAK8xB,QAAU,SACzBY,SAAU1yB,KAAK6xB,OAAS,MACxBc,SAAU3yB,KAAK8xB,OAAS,WAIxC9xB,KAAKwxB,aAAaoB,OAAO5yB,KAAKiyB,SAC1BjyB,KAAKsxB,UACLtxB,KAAK4wB,aACD,WACA5wB,KAAKwxB,aAAaqB,gBAAgBvtB,UAAU,IAAMtF,KAAK2B,YAK5D,QACC3B,KAAKwxB,eACLxxB,KAAKwxB,aAAasB,UAClB9yB,KAAKwxB,aAAe,MAIpB,cACJxxB,KAAKuN,KACuB,iBAAjBvN,KAAKgG,QACN,OACAhG,KAAKgG,mBAAmB,MACxB,WACA,YAGN,kBACJhG,KAAKgxB,SAAW,aAAgB,CAC5B+B,UAAW,CACP,CACIjT,QAASmR,EACTlR,SAAU,CAAEpf,KAAMX,KAAKW,KAAMgB,MAAO,IAAM3B,KAAK2B,WAGvDqxB,OAAQhzB,KAAKqxB,a,6CA9GZH,GAAsB,wC,wBAAtBA,EAAsB,4D,GAAA,K,KAsBpB,KAAS,G,mHAtBX,a,CAAS,+BAAT,a,CAAS,+BAAT,e,kdArBL,SAEA,iC,4EAmBD,I,6IC3CC,iBAII,yBACJ,S,MADiB,+BAgBlB,Y,MAAM+B,EAGT,YACYvqB,EACApG,GADA,KAAAoG,OACA,KAAApG,UAGC,W,8CACTtC,KAAKgC,SAAU,QACThC,KAAK0I,KAAKkW,YAAYzd,MAAK,OAAOE,GAAMA,IAAIE,kBAC5CvB,KAAKsC,QAAQsc,YAAYzd,MAAK,OAAOE,GAAMA,IAAIE,YACrDod,WAAW,IAAO3e,KAAKgC,SAAU,EAAQ,Q,6CAZpCixB,GAAsB,wB,wBAAtBA,EAAsB,iSApB3B,uB,KACK,yB,s+BAmBN,I,wGCtBK,aACI,SACA,SACJ,S,qBAHwC,qDACpC,0D,yBAGJ,iB,sCAAyC,qD,cAwB9C,Y,MAAMC,EAhCb,cAiCoB,KAAA3D,UAAoB,kB,6CAD3B2D,I,wBAAAA,EAAa,+M,QA7BlB,iBACI,qBAIA,uBACJ,S,MALQ,oDAIE,qD,6OAwBX,I,yMCQC,yB,KAGI,qB,qBAmBgB,S,yBADJ,SACI,iCAMJ,S,yDALS,8CAGnB,6C,yBAGU,SACI,kB,oBACJ,S,gCADS,wD,qBAGL,S,yBADJ,SACI,iCAMJ,S,gCALS,6CAGlB,mC,yBAxBC,eACI,mBAOI,iCAQA,iCAGA,iCAQJ,QACJ,S,0CAtBQ,6CAFA,0BAA+B,oBAIhB,2CAQA,uC,yBAvB3B,SAOI,uBA6BJ,S,yBA7BU,0B,yBARd,iBACI,gCAqCJ,S,qBAlCA,qCACF,yDAhBC,MAAMC,EAAmB,IAAI,MAAe,yBAkE5C,Y,MAAMC,UACD,KA4DR,YAAoB/B,GAChB9uB,QADgB,KAAA8uB,YArDJ,KAAApD,KAAO,EAEP,KAAAoF,OAAgB,CAAEjkB,EAAG,GAAKC,EAAG,IActC,KAAAikB,UAAwB,GAKvB,KAAAC,YAAuC,IAAI,IAAgB,MAO7B,WAClCvzB,KAAKiuB,KAAO,EACZjuB,KAAKqzB,OAAS,CAAEjkB,EAAG,GAAKC,EAAG,IAC3BrP,KAAKwzB,gBAGF,KACHxtB,GAEA,MAA0B,iBAAZA,EACR,OACAA,aAAmB,MACnB,WACA,YAGV,mBACI,OAAQhG,KAAK0P,UAAY,IACpBtP,IAAI,CAACkQ,EAAGlE,K,MAAQ,OAAC,OAAD,wBACVkE,GAAC,CACJtK,QAA0C,QAAjC,EAAAhG,KAAKyzB,cAAcC,UAAUtnB,UAAI,eAAEmiB,kBAE/C9pB,OAAQ6L,GAAMA,EAAEtK,SAOlB,YACH,UAGG,cACChG,KAAK2zB,SACL,QAAa3zB,KAAK2zB,QAInB,YAAYjD,GACXA,EAAQ5M,KAAO9jB,KAAK8jB,KACpB9jB,KAAK4zB,aAELlD,EAAQhhB,WACR1P,KAAKszB,WAAatzB,KAAK0P,UAAY,IAAItP,IAAKkQ,GACxC,aAAgB,CACZyiB,UAAW,CACP,CACIjT,QAASqT,EACTpT,SAAU,OAAF,wBACDzP,EAAE3P,MAAI,CACTkzB,OAAQ7zB,KAAKuzB,YAAYpyB,MACrB,OAAKE,GAAMA,EAAEyyB,QAEjB7F,KAAMjuB,KAAKuzB,YAAYpyB,MAAK,OAAKE,GAAMA,EAAE4sB,OACzCoE,SAAUryB,KAAKuzB,YAAYpyB,MACvB,OAAKE,GAAMA,EAAEgyB,aAK7BL,OAAQhzB,KAAKqxB,cAIrBrxB,KAAK2zB,SACDjD,EAAQqD,OAAS/zB,KAAK+zB,MACtB/zB,KAAKg0B,QAAQh0B,KAAK+zB,QACXrD,EAAQzC,MAAQyC,EAAQ2C,SAC/BrzB,KAAKwzB,iBAGL9C,EAAQuD,QACRvD,EAAQhhB,UACRghB,EAAQwD,QACRxD,EAAQhD,UAER1tB,KAAKif,QAAQ,cAAe,IAAMjf,KAAKm0B,aAAc,MAK1D,kBACHn0B,KAAK4zB,aAID,aACJ,IACI,KAAK,QAAU5zB,KAAK2zB,SAAW3zB,KAAKgC,QAChC,OAAOhC,KAAKif,QAAQ,cAAe,IAAMjf,KAAKm0B,eAElD,QAAan0B,KAAK2zB,OAAQ,CACtBM,OAAQj0B,KAAKi0B,OACbvkB,SAAU1P,KAAKo0B,aACfF,OAAQl0B,KAAKk0B,OACbxG,QAAS1tB,KAAK0tB,QACdpqB,QAAStD,KAAKsD,UAEpB,MAAOhE,KAIL,gBACJ,KACI,QAAaU,KAAK2zB,OAAQ,CACtB1F,KAAMjuB,KAAKiuB,KACXoG,aAAcr0B,KAAKiuB,KACnBoF,OAAQrzB,KAAKqzB,OACbiB,eAAgBt0B,KAAKqzB,OACrB/vB,QAAStD,KAAKsD,UAEpB,MAAOhE,KAGC,a,0DACNU,KAAK8jB,MAAsB,QAAf,EAAA9jB,KAAKu0B,kBAAU,eAAEhG,iBAAkBvuB,KAAKgC,SACpDhC,KAAKgC,SAAU,EACXhC,KAAK2zB,UACL,QAAa3zB,KAAK2zB,OAAQ,CACtBM,OAAQj0B,KAAKi0B,OACbvkB,SAAU,GACVwkB,OAAQl0B,KAAKk0B,OACbxG,QAAS1tB,KAAK0tB,QACdpqB,QAAStD,KAAKsD,WAElB,QAAatD,KAAK2zB,SAEtB3zB,KAAK2zB,aAAe,QAAa,CAC7BjJ,QAAwB,QAAf,EAAA1qB,KAAKu0B,kBAAU,eAAEhG,cAC1BlH,IAAKrnB,KAAK8jB,IACVmQ,OAAQj0B,KAAKi0B,OACbhG,KAAMjuB,KAAKiuB,KACXoG,aAAcr0B,KAAKiuB,KACnBoF,OAAQrzB,KAAKqzB,OACb3jB,SAAU1P,KAAKo0B,aACfF,OAAQl0B,KAAKk0B,OACbxG,QAAS1tB,KAAK0tB,QACdpqB,QAAStD,KAAKsD,UAElBtD,KAAKgC,SAAU,EACfhC,KAAK4wB,aACD,eACkC,QAAlC,WAAsB5wB,KAAK2zB,eAAO,eAAEruB,UAAW0d,GAC3ChjB,KAAKuzB,YAAYzuB,KAAKke,OAI7BhjB,KAAK8jB,OAAuB,QAAf,EAAA9jB,KAAKu0B,kBAAU,eAAEhG,gBAC/BvuB,KAAKgC,UAELhC,KAAKif,QAAQ,cAAe,IAAMjf,KAAK4zB,gBAIvC,QAAQl0B,GACZ,IAAKA,IAAOM,KAAK2zB,OAAQ,OACzB,MAAMA,GAAiB,QAAU3zB,KAAK2zB,QACtC,IAAKA,EAAQ,OACb,MAAMa,EAAOb,EAAOc,SAAS/0B,GACxB80B,IACLx0B,KAAKqzB,OAAS,CACVjkB,EAAG,GAAKolB,EAAKplB,EAAIolB,EAAKE,EAAI,GAC1BrlB,EAAG,GAAKmlB,EAAKnlB,EAAImlB,EAAK/H,EAAI,IAE9BzsB,KAAKwzB,kB,6CAzMAJ,GAAuB,e,wBAAvBA,EAAuB,kE,GAAA,M,kLAAvB,eAAU,U,opBA7Df,mBACA,+BAKA,wB,MAJK,4CAIQ,mE,yMAuDd,I,qJC/DS,mB,yBAKI,uBAAuB,gBAHvB,oBAAyB,aAAzB,CAAyB,QA+BtC,Y,MAAMuB,UAA4B,KAsBrC,YACsC/G,EAC1BgH,GAERryB,QAHkC,KAAAqrB,WAC1B,KAAAgH,OAtBL,KAAAr0B,KAAOP,KAAK4tB,SAASrtB,KAErB,KAAA4L,KAAO,GAAGnM,KAAK4tB,SAASiH,OAAS,cAEjC,KAAAhH,OAAS7tB,KAAK4tB,SAASiH,OAAS,UAEhC,KAAAC,QAAU,GAEV,KAAAC,MAAQ,EAER,KAAAC,SAAW,EACX,KAAAC,SAAW,EACX,KAAAxG,MAAQ,EACR,KAAAnJ,OAAS,EAGT,KAAA4P,OAAS,SAASl1B,KAAKslB,UAAUtlB,KAAKyuB,SAASzuB,KAAKslB,UAAUtlB,KAAKyuB,UAEnE,KAAA0G,WAAiC,GASjC,WACCn1B,KAAK4tB,SAASwH,OACdp1B,KAAK4wB,aACD,OACA5wB,KAAK4tB,SAASwH,MAAM9vB,UAAWjE,IAC3BrB,KAAKO,KAAOc,EAAEd,KACdP,KAAKmM,KAAO,GAAG9K,EAAEwzB,OAAS,cAC1B70B,KAAK6tB,OAASxsB,EAAEwzB,OAAS,UACzB70B,KAAKq1B,cAAch0B,EAAE6zB,WAI7Bl1B,KAAK4tB,SAASiG,QACd7zB,KAAK4wB,aACD,QACA5wB,KAAK4tB,SAASiG,OAAOvuB,UAAWjE,IAC5BrB,KAAK4tB,SAASkG,MAAQzyB,EACtBrB,KAAKq1B,cAAcr1B,KAAK4tB,SAASsH,WAI7Cl1B,KAAKq1B,cAAcr1B,KAAK4tB,SAASsH,QAG9B,cAAcA,G,MACjB,MAAMI,EAAwBJ,EAAOznB,OACjC,CAACvD,GAAIkF,EAAGC,MAAO,CACXkmB,MAAOnmB,EAAIlF,EAAEqrB,MAAQnmB,EAAIlF,EAAEqrB,MAC3BC,MAAOpmB,EAAIlF,EAAEsrB,MAAQpmB,EAAIlF,EAAEsrB,MAC3BC,MAAOpmB,EAAInF,EAAEurB,MAAQpmB,EAAInF,EAAEurB,MAC3BC,MAAOrmB,EAAInF,EAAEwrB,MAAQrmB,EAAInF,EAAEwrB,QAE/B,CACIH,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,OAAQ,MAGhB11B,KAAKg1B,SAAwB,IAAbM,EAAKC,MACrBv1B,KAAKi1B,SAAwB,IAAbK,EAAKG,MACrB,MAAME,EACCL,EAAKE,MAAQF,EAAKC,MADnBI,EAECL,EAAKI,MAAQJ,EAAKG,MAEzBz1B,KAAKyuB,MAAkB,IAAVkH,EAAgB31B,KAAK+0B,MAClC/0B,KAAKslB,OAAmB,IAAVqQ,IAA8B,QAAb,EAAA31B,KAAK4tB,gBAAQ,eAAEkG,QAAS,GAAK9zB,KAAK+0B,MACjE,MAAMa,EAAe51B,KAAK80B,QAAU,EAAI,EACxC90B,KAAKyuB,MAAQ1iB,KAAKC,MAAmB,IAAbhM,KAAKyuB,OAAe,IAC5CzuB,KAAKslB,OAASvZ,KAAKC,MAAoB,IAAdhM,KAAKslB,QAAgB,IAC9CtlB,KAAKk1B,OAASA,EACTznB,OACG,CAACzG,GAAIoI,EAAGC,KACJ,GAAGrI,IAAIA,EAAI,IAAM,MACXoI,EAAIkmB,EAAKC,OAASI,EAAW31B,KAAKyuB,MAAQmH,MAE1CvmB,EAAIimB,EAAKG,OAASE,EAAW31B,KAAKslB,OACpCsQ,IAER,IAEH9vB,QAAQ,OAAQ,KACrB9F,KAAKm1B,WAAaD,EAAO90B,IAAI,EAAEgP,EAAGC,KAAO,EACnCD,EAAIkmB,EAAKC,OAASI,EAAW31B,KAAKyuB,MAAQmH,GAC1CvmB,EAAIimB,EAAKG,OAASE,EAAW31B,KAAKslB,OAASsQ,IAEjD51B,KAAKyuB,MAAQzuB,KAAKyuB,MAAQzuB,KAAK80B,QAAU,EACzC90B,KAAKslB,OAAStlB,KAAKslB,OAAStlB,KAAK80B,QAAU,EAC3C90B,KAAK40B,KAAKiB,iB,6CAjGLlB,GAAmB,MAuBhB,KAAgB,e,wBAvBnBA,EAAmB,0gBAlDxB,iBAII,yBAQI,mBAKA,0BAQJ,QACA,yBAII,SACJ,QACJ,S,MAxBQ,kDAA2C,qCAH3C,iEASI,8BAAmB,mBADnB,yBAKkB,uCAYtB,iC,2KAoBT,I,oECnEA,Y,MAAMmB,EACT,YAAoBC,GAAA,KAAAA,YAOb,UACH51B,EACAoN,EAAyD,QAEzD,OAAQA,GACJ,IAAK,WACD,OAAOvN,KAAK+1B,UAAUC,+BAA+B71B,GACzD,IAAK,MACD,OAAOH,KAAK+1B,UAAUE,uBAAuB91B,GACjD,IAAK,SACD,OAAOH,KAAK+1B,UAAUG,0BAA0B/1B,GACpD,IAAK,QACD,OAAOH,KAAK+1B,UAAUI,yBAAyBh2B,GACnD,QACI,OAAOH,KAAK+1B,UAAUK,wBAAwBj2B,K,6CAtBjD21B,GAAQ,iB,qCAARA,EAAQ,U,GAAd,I,oECHFO,EAAL,SAAKA,G,OACD,mBACA,mBACA,qBACA,uBACA,iBACA,mCANCA,EAAL,CAOC,IAKM,Y,MAAMC,EACT,YAAoBP,GAAA,KAAAA,YAEpB,UACI51B,EACAoN,EAAyD,QAEzD,OAAQA,GACJ,IAAK,WACD,OAAOvN,KAAK+1B,UAAUQ,SAASF,EAAgBG,aAAcr2B,GACjE,IAAK,MACD,OAAOH,KAAK+1B,UAAUQ,SAASF,EAAgBI,IAAKt2B,GACxD,IAAK,SACD,OAAOH,KAAK+1B,UAAUQ,SAASF,EAAgBK,OAAQv2B,GAC3D,IAAK,QACD,OAAOH,KAAK+1B,UAAUQ,SAASF,EAAgBM,MAAOx2B,GAC1D,QACI,OAAOH,KAAK+1B,UAAUQ,SAASF,EAAgBO,KAAMz2B,K,6CAjBxDm2B,GAAY,iB,yCAAZA,EAAY,U,GAAlB,I,wGCJK,iBAKI,SACJ,S,sBADI,oC,yBAVR,iBAKI,uBAOJ,S,gCATI,2BAKK,qCAAmB,e,yBAMxB,iB,sCAA2B,uDAmBhC,Y,MAAMO,EAIT,eACI,IAAK72B,KAAKmT,KAAM,MAAO,KACvB,MAAMtE,EAAQ7O,KAAKmT,KAAK5S,KACnBuF,QAAQ,oBAAqB,IAC7BwH,MAAM,KACX,OAAOuB,EAAMjK,OAAS,EAChB,GAAGiK,EAAM,GAAG,KAAKA,EAAMA,EAAMjK,OAAS,GAAG,KACzC5E,KAAKmT,KAAK5S,KAAKwkB,MAAM,EAAG,I,6CAXzB8R,I,wBAAAA,EAAmB,wfAjCxB,uBAaA,2C,KAXK,sB,yNA+BN,I,mJCcqB,iB,sBAII,uC,wCAvBZ,SACI,iBAMI,iEAAsB,kFAGtB,SASA,uBAMJ,QACJ,Q,4BArBQ,iDAAkD,uBAHlD,eAQA,uGAUK,qC,yBAzBjB,iBAKI,gCA2BJ,S,yBA3BkC,6B,yBATtC,iBAII,uBAiCJ,S,qBA9BwB,oC,cApB9BC,EAAe,CACjB,aAAaxpB,MAAM,IACnB,aAAaA,MAAM,IACnB,YAAYA,MAAM,IAClB,UAAUA,MAAM,IAChB,CAAC,SAAU,UAAW,gBA+EnB,Y,MAAMypB,UAAiC,KAoB1C,YACY5F,EACAC,GAER7uB,QAHQ,KAAA4uB,WACA,KAAAC,WAlBI,KAAA4F,OAASF,EAElB,KAAAhiB,MAAqC,SAEpC,KAAA0c,aAA2B,KAIL,KAAAyF,QAAU,KAC/BF,EAAyB5W,UAC9BngB,KAAKU,OACLV,KAAKkf,aAAa,UAEO,KAAAgY,OAAS,IAClCl3B,KAAKif,QAAQ,OAAQ,IAAMjf,KAAK2B,SAS7B,cACHY,MAAMwvB,cACN/xB,KAAK2B,QAGF,a,YACyB,QAA5B,EAAa,QAAb,EAAA3B,KAAKmxB,gBAAQ,eAAE5C,qBAAa,SAAE4I,OACF,QAA5B,EAAa,QAAb,EAAAn3B,KAAKmxB,gBAAQ,eAAE5C,qBAAa,SAAEwF,QAG3B,OACC/zB,KAAKwxB,cACJxxB,KAAKiyB,UACVjyB,KAAKwxB,aAAexxB,KAAKoxB,SAASc,OAAO,CACrCE,iBAAkBpyB,KAAKoxB,SAClBiB,WACA+E,SACAC,SACAC,uBAETt3B,KAAKwxB,aAAaoB,OAAO5yB,KAAKiyB,UAG3B,QACCjyB,KAAKwxB,eACLxxB,KAAKwxB,aAAasB,UAClB9yB,KAAKwxB,aAAe,MAIrB,eAAe3c,GAClB,IAAI0iB,EAAav3B,KAAKmxB,SAAS5C,cAAciJ,eAC7C,MAAMrpB,EAAMnO,KAAKmxB,SAAS5C,cAAcpuB,OAAS,GACjD,OAAQ0U,EAAI3E,eACR,IAAK,SACL,IAAK,UACDlQ,KAAK8U,MAAQ,QACb,MACJ,IAAK,cACD9U,KAAKmxB,SAAS5C,cAAcpuB,MAAQ,GAAGgO,EAAIf,OACvC,EACAmqB,EAAa,KACbppB,EAAIf,OAAOmqB,EAAYppB,EAAIvJ,UAC/B2yB,EAAaxrB,KAAKoiB,IAAI,EAAGoJ,EAAa,GACtC,MACJ,IAAK,UACDv3B,KAAKmxB,SAAS5C,cAAcpuB,MAAQ,GAAGgO,EAAIf,OACvC,EACAmqB,MACMppB,EAAIf,OAAOmqB,EAAYppB,EAAIvJ,UACrC2yB,GAAc,EACd,MACJ,QACuB,UAAfv3B,KAAK8U,QAAmB9U,KAAK8U,MAAQ,UACzC9U,KAAKmxB,SAAS5C,cAAcpuB,MAAQ,GAAGgO,EAAIf,OACvC,EACAmqB,KACA1iB,IAAM1G,EAAIf,OAAOmqB,EAAYppB,EAAIvJ,UACrC2yB,GAAc,EAEtBv3B,KAAKmxB,SAAS5C,cAAckJ,cAAc,IAAIC,WAAW,UACzD13B,KAAK23B,iBACL33B,KAAKif,QACD,QACA,KACIjf,KAAK43B,aACL53B,KAAKmxB,SAAS5C,cAAciJ,eAAiBD,EAC7Cv3B,KAAKmxB,SAAS5C,cAAcsJ,aAAeN,GAE/C,IAID,iBACHv3B,KAAKg3B,OAASh3B,KAAKg3B,OAAO52B,IAAKiB,GAC3BA,EAAEjB,IAAK2oB,GACHA,EAAEnkB,OAAS,EACLmkB,EACAA,EACmB,WAAf/oB,KAAK8U,MACC,cACA,oB,6CA5GnBiiB,GAAwB,2B,wBAAxBA,EAAwB,uF,GAAA,K,KAUtB,KAAS,G,mHAVX,a,CAAS,yBAAT,c,8tBAzEL,SACA,iC,ybAwED,I,oUC7FA,MAAMe,EAAeC,I,MACxB,OACkB,QAAd,EAAAA,EAAQ/E,cAAM,eAAE/pB,IAAI,WACpB,EAAA+uB,EAAA,GACI,IAAIh1B,MACJ,EAAA8I,EAAA,GAAWisB,EAAQ/E,OAAO/pB,IAAI,QAAQ9I,MAAO43B,EAAQ53B,QAGlD,CAAEW,UAAU,GAEhB,MCQJ,SAASm3B,EAAkB/2B,G,UAC9B,MAAMrB,EAAO,IAAI,KAAU,CACvBH,GAAI,IAAI,KAAYwB,EAAMxB,IAC1BuS,KAAM,IAAI,KAAY/Q,EAAM+Q,MAAQ,GAAI,CAAC,gBACzCimB,UAAW,IAAI,KAAYh3B,EAAMg3B,WAAa,GAAI,CAC9C,gBAEJ/lB,QAAS,IAAI,KAAYjR,EAAMiR,QAAS,CAAC,gBACzCD,SAAU,IAAI,KAAYhR,EAAMgR,UAChCP,UAAW,IAAI,KAAYzQ,EAAMyQ,WAAa,IAC9CzR,UAAW,IAAI,KAAYgB,EAAMhB,WAAa,IAC9C6F,MAAO,IAAI,KAAY7E,EAAM6E,MAAO,CAAC,gBACrCuJ,KAAM,IAAI,KAAYpO,EAAMoO,MAC5B+C,QAAS,IAAI,KAAYnR,EAAMmR,SAC/BxR,KAAM,IAAI,KAAYK,EAAML,KAAM,CAAC,gBACnCC,SAAU,IAAI,KAAYI,EAAMJ,SAAU,CAACg3B,IAC3CvlB,QAAS,IAAI,KAAYrR,EAAMqR,SAC/BC,UAAW,IAAI,KAAYtR,EAAMsR,WACjCC,WAAY,IAAI,KAAYvR,EAAMuR,YAClC0lB,oBAAqB,IAAI,KAAYj3B,EAAMi3B,qBAC3CC,OAAQ,IAAI,KAAYl3B,EAAMk3B,QAC9B1lB,YAAa,IAAI,KAAYxR,EAAMwR,aACnC9D,SAAU,IAAI,MAAgC,QAApB,EAAA1N,EAAM2R,sBAAc,eAAEjE,WAAY,IAE5DypB,aAAc,IAAI,KAAgC,QAApB,EAAAn3B,EAAM2R,sBAAc,eAAEwlB,cACpDnyB,SAAU,IAAI,KAAYhF,EAAMgF,UAChCoyB,YAAa,IAAI,MAAY,GAC7BC,cAAe,IAAI,MACK,QAApB,EAAAr3B,EAAM2R,sBAAc,eAAE0lB,iBAAiB,GAE3CjyB,OAAQ,IAAI,KAAYpF,EAAMoF,UAalC,OAXAzG,EAAKoJ,IAAI,aAAauvB,aAAalzB,UAAWqS,GAC1C9X,EAAKI,SAASgS,KAAKwmB,SAAS9gB,aAAC,EAADA,EAAG1Q,QAEnCpH,EAAKoJ,IAAI,aAAauvB,aAAalzB,UAAWozB,GAC1C74B,EAAKI,SAASqG,OAAOmyB,SAASC,EAAE9zB,OAAS8zB,EAAE,GAAK,OAEhDx3B,EAAMxB,KACNG,EAAKoJ,IAAI,QAAQ0vB,UACjB94B,EAAKoJ,IAAI,aAAa0vB,WAEN,YAAhBz3B,EAAM4T,OAAqBjV,EAAKoJ,IAAI,QAAQ0vB,UACzC94B,EA0DJ,SAAS+4B,EACZ/X,EACApa,EACAoyB,GAEA,MAAM3xB,EAAO2xB,EAAe3xB,KACtBC,EAAK0xB,EAAe1xB,GAUpB2xB,EATgBjY,EAAKpc,OAAQ+B,IAC/B,MAAMxC,EAAQ,IAAIhB,KAAKwD,EAAQ3F,MACzBuD,GAAM,EAAA0H,EAAA,GAAW9H,EAAOwC,EAAQ1F,UACtC,OACK0F,EAAQtG,UAAU6G,KACdD,GAAUA,EAAMG,QAAU4xB,EAAe/xB,UACxC,QAAqBI,EAAMC,EAAInD,EAAMf,UAAWmB,EAAInB,aAG/B0D,OAAOF,GAE1C,OADAqyB,EAAalnB,KAAK,CAACC,EAAG9I,IAAM8I,EAAEhR,KAAOkI,EAAElI,OAChC,QAAOi4B,EAAc,M,QAzHb,EAAA3nB,EAAA,IAAI,EAAA4nB,EAAA,IAAW,EAAAxc,EAAA,GAAS,IAAIvZ,KAAQ,GAAI,GAAI,CAAEg2B,MAAO,I,wBCNxE,MAAMC,EAAe,CAAC,cAAe,iBAuB9B,Y,MAAMC,UAAyB,KAqDlC,YAAoBxwB,EAAmCqmB,GACnDxsB,QADgB,KAAAmG,OAAmC,KAAAqmB,UApD/C,KAAAoK,MAAQ,IAAI12B,EAAA,EAA+B,QAC3C,KAAAK,SAAW,IAAIL,EAAA,EAAkC,CAAEsC,SAAU,KAC7D,KAAAq0B,MAAQ,IAAI32B,EAAA,EAA2B,MACvC,KAAAG,OAAS,IAAIH,EAAA,EAA+B,MAC5C,KAAAU,SAAW,IAAIV,EAAA,EAAwB,IAExC,KAAA42B,aAA8B,IAAI,IACrC1O,KAAKC,MAAM0O,eAAenb,QAAQ,8BAAgC,OAEtD,KAAAnc,QAAUhC,KAAKmD,SAASC,eACxB,KAAAE,QAAUtD,KAAK8C,SAAS3B,MAAK,EAAAqD,EAAA,GAAY,IACzC,KAAA+0B,kBAAmB,EAAA/1B,EAAA,IAAc,CAC7CxD,KAAKm5B,MACLn5B,KAAK8C,SACL9C,KAAKo5B,MACLp5B,KAAK0I,KAAKkW,YAAYzd,MAAK,EAAAsD,EAAA,GAAQpD,GAAMA,MAC1CF,MACC,EAAAsD,EAAA,GAAO,EAAE+0B,EAAMn4B,EAAGxB,KAAmB,SAAT25B,KAAqB35B,IACjD,EAAA6E,EAAA,GAAa,MACb,EAAAC,EAAA,GAAU,EAAEtD,EAAGiC,EAASzD,M,QACpBG,KAAKmD,SAAS2B,KAAK,kCACnB,MAAMd,EAAQnE,EAAKoJ,IAAI,QAAQ9I,MACzBiE,EACFvE,EAAKoJ,IAAI,QAAQ9I,MAAqC,GAA7BN,EAAKoJ,IAAI,YAAY9I,MAAa,IAC/D,OAAO,QACH,CACI6E,cAAc,EAAAC,EAAA,GAAYjB,GAC1BkB,YAAY,EAAAD,EAAA,GAAYb,GACxBW,UACoB,QAAhB,EAAAzB,EAAQyB,gBAAQ,eAAEvE,KAAK,OAAQR,KAAK0I,KAAKM,SAAStJ,GACtDgQ,SAA0B,QAAhB,EAAApM,EAAQoM,gBAAQ,eAAElP,KAAK,KACjCmM,SAAUrJ,EAAQqJ,UAEtB3M,KAAK0I,SAGb,EAAAtD,EAAA,GAAK/D,IACDrB,KAAKmD,SAAS2B,KAAK,OAEvB,EAAAN,EAAA,GAAY,IAeZxE,KAAKu5B,iBAAiBj0B,YACtBtF,KAAK4wB,aACD,gBACA5wB,KAAK+uB,QAAQtrB,OAAO6B,UAAWpE,IAEvBA,aAAiB,OAChB+3B,EAAaQ,KAAMp4B,GAAMH,EAAMmmB,IAAI7f,SAASnG,KAE7CrB,KAAK05B,eApBrB,WACI,OAAO15B,KAAKm5B,MAAM5zB,WAEtB,WACI,OAAOvF,KAAKo5B,MAAM7zB,WAEtB,YACI,OAAOvF,KAAK4C,OAAO2C,WAmBhB,QAAQpF,GACXH,KAAKm5B,MAAMr0B,KAAK3E,GAGb,WAAWA,GACdH,KAAK8C,SAASgC,KAAK,OAAD,wBAAM9E,KAAK8C,SAASyC,YAAepF,IAGlD,QAAQe,EAAuB,IAAI,KACtClB,KAAKo5B,MAAMt0B,KAAKmzB,EAAkB/2B,IAClClB,KAAK4wB,aACD,cACA5wB,KAAKo5B,MAAM7zB,WAAWizB,aAAalzB,UAAU,IAAMtF,KAAK25B,cAE5D35B,KAAK4C,OAAOkC,KAAK5D,GACjBlB,KAAK8C,SAASgC,KAAK,IAGhB,YACE9E,KAAKo5B,MAAM7zB,YAAYvF,KAAKiC,UACjC,MAAMf,EAAQlB,KAAK4C,OAAO2C,WAC1BvF,KAAKo5B,MACA7zB,WACA9D,WAAW,OAAD,wBAAOP,GAAS,KAASA,aAAK,EAALA,EAAO2R,iBAAkB,KACjE7S,KAAK8C,SAASgC,KAAK,IAGhB,YACHw0B,eAAeM,WAAW,sBAC1B55B,KAAKiC,UAGF,Y,MACHq3B,eAAepb,QACX,qBACAyM,KAAKK,WAA+B,QAArB,EAAAhrB,KAAKo5B,MAAM7zB,kBAAU,eAAEpF,QAAS,KAIhD,WACEH,KAAKo5B,MAAM7zB,YAAYvF,KAAKiC,UACjCjC,KAAKo5B,MAAM7zB,WAAW9D,WAAW,OAAD,UACzBkpB,KAAKC,MAAM0O,eAAenb,QAAQ,uBAAyB,QAIzD,W,oDACT,MAAMte,EAAOG,KAAKo5B,MAAM7zB,WACxB,IAAK1F,EAAM,KAAM,oBACjB,IAAKA,EAAK2tB,MACN,KAAM,mCAAkC,QAAiB3tB,GAAMW,KAC3D,SAER,MAAMI,GAA8B,QAArB,EAAAf,EAAKoJ,IAAI,oBAAY,eAAE9I,QAAS,GACzC05B,EAAaj5B,EAAOgE,aACd,QAAmB,CACrBI,cAAc,EAAAC,EAAA,GAAYpF,EAAKoJ,IAAI,QAAQ9I,OAC3C+E,YAAY,EAAAD,EAAA,GACRpF,EAAKoJ,IAAI,QAAQ9I,MACgB,GAA7BN,EAAKoJ,IAAI,YAAY9I,MAAa,KAE1Ckc,WAAYzb,EAAOR,IAAKiB,GAAMA,EAAE3B,IAAIc,KAAK,OAC1Ce,YACH,GACN,GAAIs4B,EAAWj1B,SAAWhE,EAAOgE,OAC7B,MACIhE,EAAOgE,OAASi1B,EAAWj1B,OADzB,mDAGV,MAAMk1B,QAAe,QACjB,IAAI,IAAc95B,KAAKo5B,MAAM7zB,WAAWpF,QAC1CoB,YAQF,OAPAvB,KAAK05B,YACL15B,KAAKq5B,aAAeS,EACpBR,eAAepb,QACX,4BACAyM,KAAKK,UAAU8O,IAEnB95B,KAAK+5B,QAAQ,WACND,K,6CAnJFZ,GAAgB,0B,0BAAhBA,EAAgB,QAAhBA,EAAgB,qBAFb,S,GAET,I,kMCbP,IAAIc,EAA0B,CAAEt6B,GAAI,UAAWa,KAAM,gBAE9C,SAAS05B,EAAkB9mB,GAC1BA,IAAM6mB,EAAgB7mB,GAMvB,MAAM+mB,EAmET,YAAYv5B,EAAuC,I,MAC/CX,KAAKN,GAAKiB,EAAKjB,IAAM,GACrBM,KAAKuL,YACD5K,EAAK4K,cACL,OACI5K,EAAKE,OACD,QAAsB,OAAW,IAAImC,KAAQ,GAAI,CAC7Cm3B,UAAW,KAG3Bn6B,KAAKwL,UACD7K,EAAK6K,YACL,QACI,OAA8B,IAAnBxL,KAAKuL,YAAoB5K,EAAKG,UAAY,KAE7Dd,KAAKkS,SAAWvR,EAAKuR,UAAY,GACjClS,KAAKmS,SACoC,QAApC,EAAAxR,EAAKwR,SAAW6nB,EAAc/yB,aAAM,eAAEiJ,gBAAiB,GAC5DlQ,KAAKiS,MACDtR,EAAKsR,MACLjS,KAAKmS,SACL6nB,EAAc/yB,OACd,IACFiJ,cACF,MAAMyB,EAAqBhR,EAAKgR,WAAa,GAC7C3R,KAAK2R,UAAYA,EACZlN,OAAQ0O,IAAeA,EAAKrB,UAC5B1R,IAAK0X,GAAM,IAAI,KAAKA,IACzB9X,KAAKE,WACD,QACIS,EAAKT,WACDyR,EACKlN,OAAQ0O,GAASA,EAAKrB,UACtB1R,IAAK4G,GAAM,IAAI,IAAMA,IAC9B,UACC,GACThH,KAAK+F,MAAQpF,EAAKoF,OAAS,GAC3B/F,KAAKsP,KAAO3O,EAAK2O,MAAQ,GACzBtP,KAAKqS,UAAY1R,EAAK0R,QACtBrS,KAAKuS,UAAY5R,EAAK4R,QACtBvS,KAAKa,KAA0B,IAAnBb,KAAKuL,YACjBvL,KAAKc,SAAWd,KAAKuS,QACf,KACA5R,EAAKG,WACL,OAAqC,IAAjBH,EAAK6K,UAAkBxL,KAAKa,OAChD,GACNb,KAAKsS,SAAW3R,EAAK2R,UAAY,GACjCtS,KAAKkG,SAAWvF,EAAKuF,UAAY,GACjClG,KAAKgS,YAAcrR,EAAKqR,aAAerR,EAAKy5B,oBAAsB,GAClEp6B,KAAK2S,WAAahS,EAAKgS,YAAchS,EAAK05B,mBAAqB,GAC/Dr6B,KAAK4S,iBACDjS,EAAKiS,kBAAoBjS,EAAK25B,yBAA2B,GAC7Dt6B,KAAKwS,YAAc7R,EAAK6R,UACxBxS,KAAKm4B,oBAAsBx3B,EAAKw3B,qBAAuB,GACvDn4B,KAAKk4B,UAAYl4B,KAAK2R,UAAU5K,KAC3BoM,GAASA,EAAKlM,QAAUjH,KAAKiS,MAElCjS,KAAKo4B,OAASz3B,EAAKy3B,OAAS,IAAI8B,EAAcv5B,EAAKy3B,QAAU,KAEzDp4B,KAAKyS,WADL9R,EAAK6R,UACa,CACdxO,MACuB,IAAnBhE,KAAKuL,aACL,IAAIvI,KACuC,IAAtCrC,EAAK8R,WAAmB8nB,aAC3Bt3B,UACNmB,IACIzD,EAAK8R,WAAWrO,KAChB,IAAIpB,KACqC,IAApCrC,EAAK8R,WAAmB+nB,WAC3Bv3B,UACN2C,SAAUjF,EAAK8R,WAAW7M,SAC1B60B,QAAS95B,EAAK8R,WAAWgoB,QACzBC,aAAc/5B,EAAK8R,WAAWioB,cAGhB,GAEtB,MAAMp0B,EAAS3F,EAAK2F,QAEhBA,aAAM,EAANA,EAAQW,SACPjH,KAAKE,UAAU6G,KAAM1F,GAAMA,EAAE4F,QAAUX,EAAOW,QAE/CjH,KAAKE,UAAUuQ,KAAK,IAAI,IAAMnK,IAElCtG,KAAKsG,OAASA,GAAWtG,KAAKE,UAAU,IAAc,KACtDF,KAAK26B,WAAah6B,EAAKg6B,YAAch6B,EAAK2F,OAC1CtG,KAAK0S,YAAc/R,EAAK+R,aAAe,GACvC1S,KAAK6S,eAAiBlS,EAAKkS,gBAAkB,GAC7C7S,KAAKgI,QAAS,QAAYhI,OAAS,OACnCA,KAAKuN,KACe,aAAhBvN,KAAKgI,OACC,YACAhI,KAAK2R,UAAU5K,KAAM1F,GAAMA,EAAEu5B,aAC7B,WACA,WACV,IAAK,MAAM/lB,KAAOlU,EACRkU,KAAO7U,OACTA,KAAK6S,eAAegC,GAChBlU,EAAKkU,IAAQ7U,KAAK6S,eAAegC,IAG7C7U,KAAK6S,eAAejE,UAAY5O,KAAK6S,eAAejE,UAAY,IAAIxO,IAC/DC,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAEa,MAAOlB,SA1GzC,IAAwC6U,GAC3C,OAAO7U,KAAK6S,eAAegC,GA8G/B,aACI,OAAO7U,KAAK2R,UAAUlN,OAAQ6L,KAAQA,EAAEsqB,aAG5C,YACI,OAAO56B,KAAKE,UAAU,IAAM,KAEhC,eACI,OAAO,OAAU,IAAI8C,KAAKhD,KAAKa,MAAO,IAAImC,MAMvC,S,MACH,MAAM63B,EAAG,iBAAiB76B,MACpBoE,GAAM,QAAY,OAAWpE,KAAKa,KAAMb,KAAKc,WAC7CD,EAAOb,KAAKuS,SAAU,OAAIvS,KAAKa,KAAM,CAAEi6B,MAAO,KAAQ96B,KAAKa,KACjEg6B,EAAItvB,aAAc,OAAY1K,GAC9Bg6B,EAAIrvB,UAAYpH,EAChB,MAAMuN,EAAY3R,KAAK2R,UAyBvB,OAxBI3R,KAAKwS,YACLqoB,EAAIpoB,WAAa,OAAH,wBACPzS,KAAKyS,YAAU,CAClB8nB,YAAaM,EAAItvB,YACjBivB,WAAW,OAAYx6B,KAAKyS,WAAWrO,QAG/Cy2B,EAAIpoB,WAAaooB,EAAIpoB,YACfgC,OAAOhV,KAAKo7B,EAAIpoB,YAAY7N,OACxBi2B,EAAIpoB,WAER,KACNooB,EAAIlpB,WAAY,QAAOA,EAAW,SAC7B3R,KAAKuS,UACNsoB,EAAIhoB,eAAeE,UAAY,IAEnC8nB,EAAIhoB,eAAejE,SAAWisB,EAAIhoB,eAAejE,SAASxO,IACrDC,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAEa,MAAO,SAE5C25B,EAAIx0B,UAAuB,QAAX,EAAArG,KAAKsG,cAAM,eAAE5G,UACtBm7B,EAAIjsB,gBACJisB,EAAIh6B,YACJg6B,EAAI/5B,gBACJ+5B,EAAI7yB,OACJ6yB,EAIX,YAMI,MAAMl1B,EAAM,IAAI3C,KACVnC,EAAOb,KAAKa,KAClB,OAAI,OAAS8E,GAAK,OAAI9E,EAAM,CAAEk6B,SAAU,MAAe,UACnD,OAASp1B,EAAK9E,GAAc,YAC5B,OAAS8E,GAAK,OAAI9E,EAAM,CAAEk6B,QAAS,MAAe,WAClD,OAASp1B,GAAK,OAAI9E,EAAM,CAAEk6B,QAAS/6B,KAAKc,YACjC,cACJ,OAGX,mBACI,MAAM6E,EAAM,IAAI3C,KAChB,OACIhD,KAAKg7B,WACJ,OAAQr1B,EAAK3F,KAAKa,QACf,OAAS8E,GAAK,OAAW3F,KAAKa,KAAMb,KAAKc,c,+HCrPzD,MAAMm6B,EAAkB,uBAMjB,SAASC,EACZ9nB,GAEA,MAAM6N,GAAQ,OAAc7N,GAC5B,OAAO,SAAI,GAAG6nB,IAAkBha,EAAQ,IAAMA,EAAQ,MAAM9f,MACxD,OAAK0f,GAASA,EAAKzgB,IAAKd,GAAM,IAAI,IAAcA,MAuDjD,MAAM67B,EAAY,CACrBx6B,EACAyS,K,MAGA,OADoB,QAAZ,EAAAzS,SAAY,gBAAEqH,OACfrH,EAAKjB,GAzBT,SACHA,EACAiB,EACAyS,EAA6B,GAC7BhF,EAA0B,SAE1B,MAAM6S,GAAQ,OAAc7N,GAC5B,OAAmB,UAAXhF,EAAqB,MAAQ,OACjC,GAAG6sB,KAAmB1P,mBAAmB7rB,KACrCuhB,EAAQ,IAAMA,EAAQ,KAEf,UAAX7S,EAAqBzN,EAAO,IAAI,IAAcA,GAAMy6B,UACtDj6B,MAAK,OAAKsa,GAAS,IAAI,IAAcA,KAatB4f,CAAY16B,EAAKjB,GAAIiB,EAAMyS,GAtCzC,SAAqBzS,GACxB,OAAO,SAAK,GAAGs6B,IAAmB,IAAI,IAAct6B,GAAMy6B,UAAUj6B,MAChE,OAAKsa,GAAS,IAAI,IAAcA,KAoCa6f,CAAY36B,IAQ1D,SAAS46B,EAAY77B,EAAY0T,EAA6B,IACjE,MAAM6N,GAAQ,OAAc7N,GAC5B,OAAO,SACH,GAAG6nB,KAAmB1P,mBAAmB7rB,KACrCuhB,EAAQ,IAAMA,EAAQ,KAE1B,CACIua,cAAe,SAyDpB,SAASC,EACZ/7B,EACAg8B,EACA5mB,EACA1B,EAA6B,IAE7B,MAAM6N,GAAQ,OAAc,OAAD,wBAAM7N,GAAC,CAAE0B,WACpC,OAAO,SACH,GAAGmmB,KAAmB1P,mBAClB7rB,aACQg8B,YAAmBza,EAAQ,IAAMA,EAAQ,KACrD,IACF9f,MAAK,OAAKsa,GAAS,IAAI,KAAUA,O,gGCpKhC,SAASkgB,EACZn2B,G,MAEA,OAAqB,QAAjB,EAAAA,EAAQtF,iBAAS,eAAE0E,QACfY,EAAQtF,UAAU07B,MAAOv7B,GAA4B,aAAtBA,EAAE+R,iBAC1B,WAEP5M,EAAQtF,UAAUu5B,KACbp5B,GACyB,cAAtBA,EAAE+R,iBACoB,gBAAtB/R,EAAE+R,iBAGH,YAEJ,WAEJ,WA2FX,MAMMypB,EAA+C,CACjDC,MAHU,MAIVC,OAJU,MAKVC,KANS,MAOTC,MAPS,MAQTC,IATQ,KAURlD,KAVQ,KAWRhoB,KAZS,GAaT8pB,MAbS,GAcTqB,OAfW,EAgBXpB,QAhBW,GAmBTqB,EAA8B,CAChCC,cAAc,EACdngB,QAAQ,GAOL,SAASogB,EAAgBnuB,GAC5B,MAAMU,GAASV,GAAO,IAAIb,MAAM,KAChC,OAAOuB,EAAMjK,OAAS,GAAKiK,EAAM,GAAKgtB,EAAahtB,EAAM,IAAM,EAG5D,SAAS0tB,EAAUprB,EAAatQ,EAAsB,IAAImC,MAC7D,OAAO,OAAWnC,EAAMy7B,EAAgBnrB,IAGrC,SAASqrB,EACZ57B,EACA4E,EACAi3B,GAEA,OAAO77B,EAAO6D,OACTpD,IAAK,MAAC,QAAiD,QAAhD,EAIT,SACHmE,EACAi3B,G,MAEA,MAAM,MAAE31B,GAAUtB,EAClB,IAAK,MAAMoC,KAAQd,EAAMzD,MACrB,GAAiB,QAAb,EAAAo5B,EAAQ70B,UAAK,eAAEhD,OACf,IAAK,MAAM83B,KAAWD,EAAQ70B,GAC1B,GAAI80B,GAAWC,EAAgBn3B,EAASk3B,GACpC,OAAO,OAAP,wBAAYN,GAAkBM,EAAQE,OAItD,OAAOR,EAjBKS,CAAc,OAAD,wBAAMr3B,GAAO,CAAEsB,MAAOzF,IAAKo7B,UAAQ,eAAEvgB,UAoB3D,SAASygB,GACZ,KAAE97B,EAAI,SAAEC,EAAQ,KAAEmR,GAClByqB,GAEA,IAAII,EAAU,EACd,MAAM,WAAEC,GAAeL,EACvB,OAAKK,IAEDA,EAAW/sB,kBAAkB9D,OAC7B6wB,EAAW/sB,OAAO4rB,MAAOv6B,IAAK,MAAC,OAAY,QAAZ,EAAA4Q,aAAI,EAAJA,EAAMjC,cAAM,eAAExI,SAASnG,OAEtDy7B,GAAW,GAEXC,EAAWC,YACX,QAAS,OAAWn8B,EAAMC,GAAWy7B,EAAUQ,EAAWC,cAE1DF,GAAW,GACXC,EAAWE,WAAY,OAAQp8B,EAAM07B,EAAUQ,EAAWE,aAC1DH,GAAW,GAEXC,EAAWG,YACXZ,EAAgBS,EAAWG,aAAep8B,IAE1Cg8B,GAAW,GAEXC,EAAWI,YACXb,EAAgBS,EAAWI,aAAer8B,IAE1Cg8B,GAAW,GACRA,GAAWroB,OAAOhV,KAAKs9B,GAAYn4B,U,sNCtKvC,Y,MAAMw4B,G,6CAAAA,I,wBAAAA,I,4BAdA,CACL,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,S,GAID,I,mFCvBA,Y,MAAMC,EA/Bb,cAqC+B,KAAAtX,UAAY,IAAI,MAEpC,KAAAuX,cAAe,EAKf,gBACHt9B,KAAKs9B,cAAgBt9B,KAAKs9B,aAC1Bt9B,KAAK+lB,UAAU3jB,Q,6CAfVi7B,I,wBAAAA,EAAoB,8Z,QA5BzB,iBAMI,wCAAiB,EAAAE,kBAEjB,iBAGI,gCAAS,EAAAA,kBAET,SACJ,QACA,sBAA0B,gCAAS,EAAAA,kBAC/B,SACJ,QACJ,S,MAfI,6BAaI,gE,kHAYT,I,yFCoBA,Y,MAAMC,EAlDb,cAoDoB,KAAAC,KAAO,EAEP,KAAAtP,IAAM,GAEN,KAAAuP,IAAM,EAkBf,MACE19B,KAAKG,QACNH,KAAKG,MAAQH,KAAK09B,KAAO,GAG7B19B,KAAKG,OADQH,KAAK29B,SAAW,IAAM39B,KAAKy9B,KAAOz9B,KAAK49B,UAAY,GAAK59B,KAAKy9B,KAAOz9B,KAAKy9B,MAAQ,EAE1Fz9B,KAAKG,MAAQH,KAAKmuB,MAClBnuB,KAAKG,MAAQH,KAAKmuB,KAAO,IAE7BnuB,KAAKy4B,SAASz4B,KAAKG,OAIhB,SACEH,KAAKG,QACNH,KAAKG,MAAQH,KAAK09B,KAAO,GAG7B19B,KAAKG,OADQH,KAAK29B,SAAW,IAAM39B,KAAKy9B,KAAOz9B,KAAK49B,UAAY,GAAK59B,KAAKy9B,KAAOz9B,KAAKy9B,MAAQ,EAE1Fz9B,KAAKG,MAAQH,KAAK09B,MAClB19B,KAAKG,MAAQH,KAAK09B,KAAO,GAE7B19B,KAAKy4B,SAASz4B,KAAKG,OAOhB,SAAS09B,GACZ79B,KAAKG,MAAQ09B,EAET79B,KAAK89B,WACL99B,KAAK89B,UAAUD,GAQhB,WAAW19B,GACdH,KAAKG,MAAQA,EAQV,iBAAiBwoB,GACpB3oB,KAAK89B,UAAYnV,EAQd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,G,6CApFX6U,I,wBAAAA,EAAgB,yGATd,CACP,CACI1d,QAAS,KAETke,aAAa,SAAW,IAAMR,GAC9BS,OAAO,MAEd,8XA7CG,iBAGI,qDAAoC,IAAI,QAAxC,CAAyC,gDACJ,IAAI,QADzC,CAAyC,6CAEP,IAAI,QAFtC,CAAyC,6CAGP,IAAK,QAHvC,CAAyC,8CAIN,IAAK,QAJxC,CAAyC,2CAKT,IAAK,SAErC,oBAKI,gCAAS,EAAA13B,WAET,oBAAU,kBAAM,QACpB,QACA,iBAAmC,SAAmD,QACtF,oBAKI,gCAAS,EAAA4K,QAET,oBAAU,eAAG,QACjB,QACJ,S,MAfQ,qDAK+B,gEAK/B,6C,gFAuBT,I,kNC3BD+sB,UAAyB,KAC3B,OAAOr9B,EAAYs9B,GACf,OACW,OAAOt9B,EADI,UAAlBs9B,EACoB,eAEJ,a,0EALtBD,KAAgB,GAAhBA,I,6BAAAA,EAAgB,QAAhBA,EAAgB,Y,MAQtB,MAAME,EAAqC,CACvCxT,MAAO,CACHyT,UAAW,MAEf5S,QAAS,CACL4S,UAAW,QACXC,eAAgB,WAChBC,cAAe,KACfC,mBAAoB,cA0CrB,Y,MAAMC,UACD,IAvCZ,c,oBA0C0B,KAAAC,OAAgB,IAAI17B,MAAOC,UAIjC,KAAAovB,SAA6B,QAE7B,KAAAsM,OAA2B,SAc3C,WACI,OAAO,IAAI37B,KAAKhD,KAAK0+B,SAAU,OAAW,IAAI17B,MAGlD,YACI,OAAO,IAAIA,KAAKhD,KAAK4+B,OAAQ,QAAS,OAAS,IAAI57B,MAAS,GAGhE,kBACI,OAAO,OAAO,IAAIA,KAAKhD,KAAKa,MAAO,eAGhC,WACHb,KAAKa,MAAO,IAAImC,MAAO67B,cAOpB,SAAShB,GAEZ,MAAMiB,EAAW,IAAI97B,KAAKhD,KAAKa,MAC/B,IAAIk+B,GAAW,OAAIlB,EAAW,CAC1B/C,MAAOgE,EAASE,WAChBjE,QAAS+D,EAASG,eACnBh8B,UAEC87B,EAAW/+B,KAAKkH,KAAKjE,YACrB87B,EAAW/+B,KAAKkH,KAAKjE,WAEzBjD,KAAKa,MAAO,OAAUk+B,GAAY,IAAI/7B,MAClChD,KAAK89B,WACL99B,KAAK89B,UAAUiB,GAEnB/+B,KAAKs9B,cAAe,EAQjB,WAAWn9B,GACdH,KAAKa,MAAO,OAAUV,GAAS,IAAI6C,MACnChD,KAAKs9B,cAAe,EAQjB,iBAAiB3U,GACpB3oB,KAAK89B,UAAYnV,EAQd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,EAGb,iBAAiBuW,GACpBl/B,KAAKk/B,SAAWA,G,0EA3FXT,KAAkB,GAAlBA,I,2BAAAA,EAAkB,sJAVhB,CACP,CAAE3e,QAAS,KAAaqf,SAAUjB,GAClC,CAAEpe,QAAS,KAAkBC,SAAUqe,GACvC,CACIte,QAAS,KACTke,aAAa,SAAW,IAAMS,GAC9BR,OAAO,KAEd,6P,wBAjCG,4BAA6C,kDAAS,SAClD,mBAMI,yCAAiB,EAAAxF,SAAA,KANrB,QASA,mCAIA,iCACA,qBAAW,SAAyB,QACxC,Q,yBAbQ,iCAAgB,sBAAhB,CAAgB,aAAhB,CAAgB,cAAhB,CAAgB,mBAShB,0B,6HAuBT,I,0JChEa,wBACI,SACJ,S,yBAFoD,oBAChD,gC,cA0BjB,Y,MAAM2G,EAvCb,cAyCoB,KAAAjR,IAAM,IAEN,KAAAuP,IAAM,GAEN,KAAAD,KAAO,GAMP,KAAA4B,gBAAiC,GAE1C,KAAAv+B,SAAW,GASX,WACHd,KAAKs/B,iBAAmBt/B,KAAKu/B,wBAAwBv/B,KAAKmuB,IAAKnuB,KAAK09B,IAAK19B,KAAKy9B,MAG3E,YAAY/M,IAEXA,EAAQvC,KAAOuC,EAAQgN,KAAOhN,EAAQ+M,MAAQ/M,EAAQlM,QACtDxkB,KAAKs/B,iBAAmBt/B,KAAKu/B,wBAAwBv/B,KAAKmuB,IAAKnuB,KAAK09B,IAAK19B,KAAKy9B,OAQ/E,SAASI,GACZ79B,KAAKc,SAAW+8B,EAEZ79B,KAAK89B,WACL99B,KAAK89B,WAAWD,GASjB,WAAW19B,GACdH,KAAKc,SAAWX,EAGb,iBAAiB++B,GACpBl/B,KAAKk/B,SAAWA,EAQb,iBAAiBvW,GACpB3oB,KAAK89B,UAAYnV,EAQd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,EAGZ,wBAAwBwF,EAAauP,EAAaD,GACtD,MAAM+B,EAAqB,GAC3B,IAAIhb,EAAOkZ,EACX,MAAM78B,EAAOb,KAAKwkB,KAAO,EAAMxkB,KAAKwkB,MAAQ,KAG5C,IAAK,MAAMib,KAAUz/B,KAAKq/B,gBACtBG,EAAO/uB,KAAK,CACR/Q,GAAI+/B,EACJl/B,KAAMM,EACA,GAAGA,EAAKsQ,IAAIsuB,EAAQ,KAAKx5B,OAAO,eAAc,OAAe,CACzD60B,MAAO/uB,KAAKC,MAAMyzB,EAAS,IAC3B1E,QAAS0E,EAAS,QAEtB,IAAG,OAAe,CAAE3E,MAAO/uB,KAAKC,MAAMyzB,EAAS,IAAK1E,QAAS0E,EAAS,SAIpF,KAAOjb,GAAQ2J,GACXqR,EAAO/uB,KAAK,CACR/Q,GAAI8kB,EACJjkB,KAAMM,EACA,GAAGA,EAAKsQ,IAAIqT,EAAM,KAAKve,OAAO,eAAc,OAAe,CACvD60B,MAAO/uB,KAAKC,MAAMwY,EAAO,IACzBuW,QAASvW,EAAO,QAEpB,IAAG,OAAe,CAAEsW,MAAO/uB,KAAKC,MAAMwY,EAAO,IAAKuW,QAASvW,EAAO,SAE5EA,GAAQiZ,EAEZ,OAAO+B,G,6CA3GFJ,I,wBAAAA,EAAsB,4JARpB,CACP,CACItf,QAAS,KACTke,aAAa,SAAW,IAAMoB,GAC9BnB,OAAO,KAEd,4O,QAlCG,iBACI,4BACI,0BAKI,uCAAe,EAAAxF,SAAA,KAEf,8BAGJ,QACA,qBAAW,SAAyB,QACxC,QACJ,S,MAf4B,6BAIhB,mCAAkB,sBAAlB,CAAkB,qCAKa,+C,sHA2B5C,I,8JCOS,sBAII,iFAEA,SACA,sBAAwB,iBAAK,QACjC,Q,4BANI,uBAAmB,gBAInB,2BAwBb,Y,MAAMiH,EAnCb,cAoCoB,KAAAC,WAAuB,CAAC,KAAO,KAAO,MAE/C,KAAAx/B,MAAa,GAUJ,KAAAgR,IAAO7R,GAvFpB,SACHy4B,EACA72B,GAEA,IAAK62B,EAAS,OACd,MAAMhjB,EAAQ7T,EAAM6T,MACd5U,EAAQe,EAAMf,MACdy/B,EAAY7H,EAAQ53B,OACrBA,GAAS,IAAI0wB,SACd+O,EAAUnvB,KAAKtQ,GACf43B,EAAQU,SAASmH,IAIjB7qB,IACAA,EAAM5U,MAAQ,IAyEd0/B,CACI,CAAE1/B,MAAOH,KAAKG,MAAOs4B,SAAWp4B,GAAML,KAAKy4B,SAASp4B,IACpDf,GAIQ,KAAAiH,OAAUkV,GAvEvB,SACHsc,EACAtc,GAEA,IAAKsc,EACD,OAEJ,MAAM6H,EAAY7H,EAAQ53B,MACpBsR,EAAQmuB,EAAUjvB,QAAQ8K,GAE5BhK,GAAS,IACTmuB,EAAUjkB,OAAOlK,EAAO,GACxBsmB,EAAQU,SAASmH,IA4DjBE,CACI,CAAE3/B,MAAOH,KAAKG,MAAOs4B,SAAWp4B,GAAML,KAAKy4B,SAASp4B,IACpDob,GAOD,SAASoiB,GACZ79B,KAAKG,MAAQ09B,EAET79B,KAAK89B,WACL99B,KAAK89B,UAAUD,GAQhB,WAAW19B,GACdH,KAAKG,MAAQA,EAQV,iBAAiBwoB,GACpB3oB,KAAK89B,UAAYnV,EAQd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,G,6CA7DX+W,I,wBAAAA,EAAsB,iFATpB,CACP,CACI5f,QAAS,KAETke,aAAa,SAAW,IAAM0B,GAC9BzB,OAAO,MAEd,uC,SAlB4B,gH,8VAZzB,4BACI,6BACI,4BASA,mBAMI,gDAAwB,EAAA9sB,IAAA,KAN5B,QAQJ,QACJ,S,sBAjB6B,kCAWjB,oCAA4B,6CAA5B,CAA4B,8B,gEAkBzC,I,uRC/BS,wBAII,SACJ,S,yBAHI,oBAEA,gC,wCAXZ,4BACI,0BAII,sEAEA,8BAMJ,QACJ,Q,wBAXQ,+BAAc,uBAKS,0C,cAuBhC,Y,MAAM4uB,UACD,KAtDZ,c,oBAyDoB,KAAAtC,KAAO,GAIP,KAAAuC,eAAgB,EAEzB,KAAAn/B,MAAe,IAAImC,MAAOC,UAE1B,KAAAuhB,MAAe,OAAO,IAAIxhB,KAAQ,SAalC,WACHhD,KAAKigC,aAAc,EACnBjgC,KAAKkgC,cAAgBlgC,KAAKmgC,uBACtBngC,KAAKa,MACJb,KAAKggC,cACNhgC,KAAKy9B,MAETz9B,KAAKif,QAAQ,OAAQ,IAAOjf,KAAKigC,aAAc,GAG5C,YAAYvP,IACXA,EAAQsP,eAAiBtP,EAAQ+M,QACjCz9B,KAAKkgC,cAAgBlgC,KAAKmgC,uBACtBngC,KAAKa,MACJb,KAAKggC,cACNhgC,KAAKy9B,OAMjB,mBACI,MAAMjZ,GAAQxkB,KAAKwkB,MAAQ,SAASlX,MAAM,KACpCzM,GAAO,OAAIb,KAAKa,KAAM,CAAEi6B,OAAQtW,EAAK,GAAIuW,SAAUvW,EAAK,KAe9D,OAbI3jB,EAAKo+B,aAAe,IAAO,GAC1Bj/B,KAAKkgC,cAAcn5B,KACfyd,GAASA,EAAK9kB,MAAO,OAAOmB,EAAM,YAGvCb,KAAKkgC,cAAczvB,KAAK,CACpBlQ,KAAM,IAAG,OAAOM,GAAM,aACtBnB,IAAI,OAAOmB,EAAM,WAErBb,KAAKkgC,cAActuB,KAAK,CAACC,EAAG9I,IACxB,GAAG8I,EAAEnS,KAAK+hB,cAAc,GAAG1Y,EAAErJ,QAG9BM,KAAKkgC,cAOT,SAASrC,GAEZ,GADA79B,KAAKwkB,KAAOqZ,EACR79B,KAAK89B,UAAW,CAChB,MAAMtZ,GAAQxkB,KAAKwkB,MAAQ,SAASlX,MAAM,KACpCzM,GAAO,QACT,OAAIb,KAAKa,KAAM,CAAEi6B,OAAQtW,EAAK,GAAIuW,SAAUvW,EAAK,MAErDxkB,KAAK89B,UAAUj9B,EAAKoC,YAQrB,WAAW9C,GACdH,KAAKa,KAAOV,GAASH,KAAKa,KAC1B,IAAIA,GAAO,OAAcb,KAAKa,MAC9BA,GAAO,OAAsBA,EAAM,CAAEs5B,UAAW,IAChDn6B,KAAKwkB,MAAO,OAAO3jB,EAAM,SACzBb,KAAKkgC,cAAgBlgC,KAAKmgC,uBACtBngC,KAAKa,MACJb,KAAKggC,cACNhgC,KAAKy9B,MAIN,iBAAiByB,GACpBl/B,KAAKk/B,SAAWA,EAOb,iBAAiBvW,GACpB3oB,KAAK89B,UAAYnV,EAOd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,EAMb,aACH3oB,KAAKigC,aAAc,EACnBjgC,KAAKif,QAAQ,WAAY,KACjBjf,KAAKogC,eACLpgC,KAAKogC,aAAarM,QAClB/zB,KAAKogC,aAAa1/B,OAClBV,KAAK4wB,aACD,eACA5wB,KAAKogC,aAAaC,aAAa/6B,UAAWwP,IACjCA,IACD9U,KAAKigC,aAAc,SAanC,uBACJK,EACAC,EACA9C,EAAe,IAEf,MAAM93B,EAAM,IAAI3C,KAChB,IAAInC,EAAO,IAAImC,KAAKs9B,GACpB,MAAMd,EAAS,GACXe,KAAe,OAAU1/B,EAAM8E,KAAQ,OAAQ9E,EAAM8E,GACrD9E,GAAO,OAAWA,IACX,OAAQA,EAAM8E,KACrB9E,EAAO8E,GAEX9E,GAAO,OAAsBA,EAAM,CAAEs5B,UAAWsD,IAChD,MAAMr5B,GAAM,OAASvD,GAErB,MAAO,OAAQuD,EAAKvD,IAChB2+B,EAAO/uB,KAAK,CACRlQ,KAAM,IAAG,OAAOM,GAAM,aACtBnB,IAAI,OAAOmB,EAAM,WAErBA,GAAO,OAAWA,EAAM48B,GAE5B,OAAO+B,G,0EAtKFO,KAAkB,GAAlBA,I,2BAAAA,EAAkB,qD,GAAA,K,yJARhB,CACP,CACIjgB,QAAS,KACTke,aAAa,SAAW,IAAM+B,GAC9B9B,OAAO,KAEd,+d,QAhDG,4BAGI,wCAAiB,EAAAuC,eAEjB,mBAKI,yCAAiB,EAAA/H,SAAA,KALrB,QAOA,oBAAkE,gCAAS,EAAA+H,eACvE,sBACI,6BACJ,QACJ,QACA,qBAAW,SAAyB,QACxC,QACA,mC,MAjBI,yCAMI,sCAAqB,kBAWS,uC,2IA+BvC,I,iNChCK,iBACI,oBAKI,sEALJ,WASA,QACA,gCAQI,oBAGI,yEAHJ,QAKJ,gBACA,qBAKI,yEALJ,YASA,QACJ,S,sBAgFY,oBACK,2BAAe,S,wCA5E5B,kBAII,0GAAqD,KAErD,4BAUI,kBACI,oBAAU,gBAAI,QAClB,QACJ,QACA,kBACI,kBAAsB,SAAe,QACrC,kBAA8B,SAAgB,QAClD,QACA,sBAGI,gEAGG,OAHH,uBAGrB,oBAAwB,4BAOH,qBAAU,UAER,QACN,QACA,sBAII,gEAGG,OAHH,mCAGrB,oBAAwB,4BAWH,qBAAU,yBAAY,QAC1B,QACA,sBAII,gEAGG,OAHH,6CAGrB,oBAAwB,4BAOH,8BAGJ,QACA,sBAGI,mFAA2B52B,EAAOC,oBAElC,qBAAU,kBAAK,QACnB,QACJ,Q,4BA/EQ,yBAAa,sBAAb,CAAa,iEAcS,uBACQ,wBAU9B,wCAAkC,yBAKxB,qDAaV,6DAEC,8CARD,iCA0BA,mDAA6C,oCAN7C,iCAWW,sC,yBA/EvB,kBAII,0BAuFJ,S,qBArFyB,yC,sBAwFzB,8BAEA,SAyBL,Y,MAAM42B,UACD,KAgCR,YACY1gC,EACA0I,GAERlG,QAHQ,KAAAxC,UACA,KAAA0I,YA7BI,KAAAi4B,MAAQ,EAER,KAAA34B,QAAS,EAEI,KAAA44B,cAAe,EAI3B,KAAAC,SAAW,IAAI,MAKzB,KAAAC,UAAoB,GAEpB,KAAAC,YAAsB,GASb,KAAAC,QAAW/5B,GAlNhB,4JACDg6B,KAiNqCh6B,GAC/B,KAAAi6B,WAAa,IAAMjhC,KAAKkhC,iBAAiB,IAAI,MAatD,QAAQ/tB,G,MACX,MAAM0N,EAAO7gB,KAAK8gC,YAAYr8B,OAAQpD,GAAMA,EAAE4F,QAAUkM,EAAKlM,OAC7DjH,KAAKy4B,SAAS,IACP5X,EACH,IAAI,KAAK,OAAD,wBACD1N,GAAI,CACPzT,GAAIyT,EAAKzT,IAAMyT,EAAKlM,MACpBmJ,eAGe,QAFV,EAAC+C,EAAKzT,KAA2B,IAArByT,EAAKynB,YAEZ,KADAznB,EAAK/C,sBACA,cAGvBpQ,KAAKif,QAAQ,aAAc,IAAOjf,KAAKmhC,YAAc,KAAO,IAOzD,WAAWhuB,GACd,MAAM0N,EAAO7gB,KAAK8gC,YAAYr8B,OACzB28B,GAAWA,EAAOn6B,QAAUkM,EAAKlM,OAEtCjH,KAAKy4B,SAAS5X,GAOX,iBAAiB3f,GAEpB,GAAIA,EAAMmgC,OAAQ,CACd,MAAMC,EAAOpgC,EAAMmgC,OAAOE,MAAM,GAEhC,GAAID,EAAM,CACN,MAAME,EAAS,IAAIC,WACnBD,EAAOE,WAAWJ,EAAM,SACxBE,EAAOlf,iBAAiB,OAASqf,IAC7B3hC,KAAK4hC,eAAgBD,EAAIE,WAAmB/H,QAC5C54B,EAAMmgC,OAAOlhC,MAAQ,KAEzBqhC,EAAOlf,iBAAiB,QAAUjhB,IAC9B,QAAY,0BAUpB,eAAeV,G,QACnB,MAAMkgB,GAAO,QAAUlgB,IAAS,GAC1BjB,GAAkB,QAAb,oBAAa,eAAEoiC,WAAY,UACtC,IAAK,MAAMpxB,KAAMmQ,EAAM,CACnBnQ,EAAGnQ,KAAOmQ,EAAGnQ,MAAQ,GAAGmQ,EAAG3C,cAAc2C,EAAG1C,YAC5C,MAAMyd,GACF/a,EAAGnQ,MAAQ,GAAGwL,KAAKC,MAAsB,SAAhBD,KAAK8d,aAE7Bvc,MAAM,KACN9M,KAAK,KACL0P,cAEAQ,EAAGzJ,QACJyJ,EAAGzJ,MAAQ,GAAGwkB,KAAW/rB,WAAY,QAEzC,MAAMqiC,EAAkB/hC,KAAKyI,UAAUQ,IACnC,gCACC,CAAC,cACNyH,EAAGN,eACkB,QAAjB,EAAAM,EAAGN,sBAAc,SAChB2xB,EAAgBh7B,KAAM1F,GAAMqP,EAAGzJ,MAAMoG,SAAShM,IAGnDqP,EAAGsxB,MAAQ,GAAKtxB,EAAGsxB,MAEnBhiC,KAAKiiC,QAAQ,IAAI,KAAKvxB,KAMvB,uBAEH,QAAa,eADI,uJAQd,SAASmtB,GACZ79B,KAAK8gC,YAAcjD,EACf79B,KAAK89B,WACL99B,KAAK89B,UAAUD,GAShB,WAAW19B,GACdH,KAAK8gC,YAAc3gC,EAGhB,iBAAiB++B,GACpBl/B,KAAKk/B,SAAWA,EAQb,iBAAiBvW,GACpB3oB,KAAK89B,UAAYnV,EAQd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,EAGb,UAAUlN,GACb,OAAOA,aAAI,EAAJA,EAAMlb,OAAQ,GAMlB,iBAAiB4S,EAAa,IAAI,M,MACrC,MAAM1S,EAAMT,KAAKD,QAAQW,KACrB,KACA,CACI+tB,MAAO,OACPnJ,OAAQ,OACR3kB,KAAM,CAAEwS,UAGK,QAArB,EAAA1S,EAAIQ,yBAAiB,SAAEC,MAClBC,MAAK,OAAOE,GAAmB,SAAbA,EAAEC,SACpBgE,UAAWpE,IACRlB,KAAKiiC,QAAQ/gC,EAAMQ,UACnBjB,EAAIkB,W,6CApMP8+B,GAAsB,0B,wBAAtBA,EAAsB,uMARpB,CACP,CACI3gB,QAAS,KACTke,aAAa,SAAW,IAAMyC,GAC9BxC,OAAO,KAEd,8C,eAlJe,kH,EASA,yHACA,6C,EAcA,mH,EAkGJ,oG,kkDAnJR,iBAKI,iBACI,iCACI,2DAAyB,mCAMR,EAAAgE,QAAA,KACpB,QACL,QACA,uBAoCA,uBA4FJ,QACA,2C,sBA9II,6BAIQ,wCAAyB,kBAAzB,CAAyB,kBAAzB,CAAyB,wBAAzB,CAAyB,sBASD,uCAsC3B,qEAA2B,gB,6OAuHrC,I,6RC5JS,0B,wCAUA,yBAEI,mGAEA,kBAA2B,SAAiB,QAC5C,kBACI,SACJ,QACJ,Q,4BAJ+B,uBAEvB,iC,wCAGR,yBAII,kBAEI,8BAErB,OADsD,oBACpD,oBAFmB,CAEC,yBAGtB,OADsD,oBACpD,oBALmB,CAEC,6CAOE,OAPF,yBAOtB,oBACE,qBAEmB,kBACI,SACJ,QACJ,QACJ,Q,wBAHY,8D,wCAIZ,yBAGI,8DAEA,SACJ,Q,wBAJI,8BAGA,uEA0Bb,Y,MAAMC,UACD,KAlGZ,c,oBA6GoB,KAAAtiB,MAAQ,GAQR,KAAAuiB,SAA+C/uB,IAC3D,QAAYA,GAUT,KAAAgvB,QAAU,IAAI,KAEd,KAAAC,gBAAsCriC,KAAKoiC,QAAQjhC,MACtD,OAAa,MACb,UACA,OAAW8f,IACPjhB,KAAKgC,SAAU,EACRhC,KAAKsD,SAAWtD,KAAKsD,QAAQsB,OAAS,GACvC,IAAAC,IAAG7E,KAAKsD,SACR2d,EAAMrc,QAAU,EACf5E,KAAK+H,QAEF,OAAS,EAAC,QAAYkZ,IAAQ,QAAaA,KAD3CjhB,KAAKmiC,SAASlhB,IAElB,IAAApc,IAAG,OAEb,OAAYxD,IAAM,IAAAwD,IAAG,MACrB,OAAKgc,IACD7gB,KAAKgC,SAAU,EACf6e,GAAO,QAAQA,GACf,MAAMxN,GAAUrT,KAAKsiC,YAAc,IAAIpyB,cACvC,OAAO2Q,EAAKpc,OACPgX,IAAUzb,KAAKyE,QAAUzE,KAAKyE,OAAOgX,EAAMpI,OAajD,KAAAkvB,YAAc,IAAMviC,KAAKkf,aAAa,SAEtC,KAAAsjB,UAAY,KACfxiC,KAAKif,QAAQ,OAAQ,KAAK,QAAC,OAA6B,QAA7B,EAAc,QAAd,EAAAjf,KAAKyiC,iBAAS,eAAElU,qBAAa,eAAE4I,UAGvD,WAEHn3B,KAAK4wB,aACD,iBACA5wB,KAAKqiC,gBAAgB/8B,UAAWub,GAAU7gB,KAAK6gC,UAAYhgB,IAO5D,oBACH7gB,KAAKif,QACD,QACA,KAAK,MAAC,OAACjf,KAAKsiC,YAA6B,QAAhB,EAAAtiC,KAAK0iC,mBAAW,eAAEniC,OAAQ,IACnD,KAQD,SAASs9B,EAA0B52B,GAEb,iBAAd42B,GACNA,IAAsB79B,KAAKsiC,aAE5BzE,EAAY,IAAI,KAAK,CACjBt9B,MAAOP,KAAKsiC,YAAcr7B,GAAS,IAAIqG,MAAM,KAAK,GAClDrG,MAAOjH,KAAKsiC,YAAcr7B,GAAS,MAGrC42B,aAAqB,OAC3B79B,KAAK0iC,YAAc7E,EACf79B,KAAK89B,WACL99B,KAAK89B,UAAUD,GAEnB79B,KAAK2iC,qBAOF,WAAWxiC,GACdH,KAAK0iC,YAAcviC,EACnBH,KAAK2iC,oBAGF,iBAAiBzD,GACpBl/B,KAAKk/B,SAAWA,EAOb,iBAAiBvW,GACpB3oB,KAAK89B,UAAYnV,EAOd,kBAAkBA,GACrB3oB,KAAK+9B,SAAWpV,G,0EA1IXuZ,KAAwB,GAAxBA,I,2BAAAA,EAAwB,4D,GAAA,K,SA8DL,O,wPAtEjB,CACP,CACIpiB,QAAS,KACTke,aAAa,SAAW,IAAMkE,GAC9BjE,OAAO,KAEd,m0B,GAAA,MA5FG,iBACI,4BACI,qBAKI,0DAAwB,mCACP,EAAAmE,QAAA,QAAuB,KADxC,CAAwB,4CAOxC,yBACA,yBAEJ,IAVoB,CAAwB,yBAUhB,EAAAO,qBAVR,CAAwB,0BAWf,EAAAJ,gBAhBb,QAkBA,sBAA8C,kBAAM,QACpD,+BAKJ,QACA,gCAEI,0CAAkB,EAAA9J,SAAA,kBAElB,8BASA,+BAuBA,gCAOJ,QACJ,S,sBAhEY,uCAAwB,sBAAxB,CAAwB,kDAAxB,CAAwB,qBAevB,iCAUkB,sCASlB,0EAuBA,2F,wNA8Bd,I,gHCrHA,MAAMmK,EAgBT,YAAYjiC,EAAsB,I,MAoBlB,KAAAy6B,OAAS,IAAMp7B,KAAKiG,SAnBhCjG,KAAKN,GAAKiB,EAAKjB,IAAM,GACrBM,KAAKmN,OAASxM,EAAKwM,QAAUxM,EAAKjB,IAAM,GACxCM,KAAKO,KAAOI,EAAKJ,MAAQ,GACzBP,KAAKyP,SAAwB,QAAb,EAAA9O,EAAK8O,gBAAQ,SAC7BzP,KAAK4H,KAAOjH,EAAKiH,MAAQ,IAAI,MAC7B5H,KAAKgQ,OAASrP,EAAKqP,QAAU,GAC7BhQ,KAAK6iC,QAAUliC,EAAKkiC,SAAW,GAG5B,SACH,MAAM,GAAEnjC,EAAE,KAAEa,EAAI,SAAEkP,EAAQ,OAAEO,GAAWhQ,KACvC,MAAO,CACHN,KACAa,OACAkP,WACAO,a,6CC/BL,MAAM8yB,EAoBT,YAAYjhC,EAAgC,I,MAJ5B,KAAAgd,SAAoB,GAKhC7e,KAAKN,GAAKmC,EAAMnC,IAAM,GACtBM,KAAK4M,UAAY/K,EAAM+K,WAAa,GACpC5M,KAAKO,KAAOsB,EAAMtB,MAAQ,GAC1BP,KAAKM,aAAeuB,EAAMvB,cAAgB,GAC1CN,KAAKmN,OAAStL,EAAMsL,QAAU,GAC9BnN,KAAK2M,SAAW9K,EAAM8K,UAAY,EAClC3M,KAAK+iC,UAAYlhC,EAAMkhC,WAAa,GACpC,MAAMl0B,EAAQ7O,KAAKM,aAAagN,MAAM,KACtCtN,KAAKgZ,QAIA,QAHA,EAAAnK,EAAMjK,QAAU,EACXiK,EAAMA,EAAMjK,OAAS,GACrB5E,KAAKM,aAAa,UACvB,eAAE0kB,gBAAiB,M,2DC9BzB,MAAMge,EAkBT,YAAYC,EAA0C,IAClDjjC,KAAKN,GAAKujC,EAASvjC,IAAM,GACzBM,KAAKO,KAAO0iC,EAAS1iC,MAAQ,GAC7BP,KAAKyM,YAAcw2B,EAASx2B,aAAe,GAC3CzM,KAAKmL,KAAO83B,EAAS93B,MAAQ,GAC7BnL,KAAK0M,MAAQu2B,EAASv2B,OAAS,EAC/B1M,KAAK2M,SAAWs2B,EAASt2B,UAAY,EACrC3M,KAAKyO,SAAWw0B,EAASx0B,UAAY,GACrCzO,KAAKyI,UAAYw6B,EAASpkB,UAAY,GAOnC,QAAQhK,GACX,MAAMpV,EAAOoV,EAAIvH,MAAM,KAEvB,OADc,QAAgB7N,EAAMO,KAAKyI,c,iICS1C,MAAMy6B,EAyDT,YAAYD,EAAsC,IAC9CjjC,KAAKN,GAAKujC,EAASvjC,IAAM,GACzBM,KAAKO,KAAO0iC,EAAS1iC,MAAQ,GAC7B,MAAMse,EAAWokB,EAASpkB,UAAY,GACtC7e,KAAKM,aAAe2iC,EAAS3iC,aAC7B,MAAM6iC,EAAYtkB,EAASukB,gBAAkBvkB,EAC7C7e,KAAKqjC,QAAUJ,EAASI,SAAWJ,EAASr7B,KAC5C5H,KAAKsjC,QAAUL,EAASK,QAAUH,EAAUG,QAAU,IAAIljC,IAAKC,IAAM,CACjEX,GAAIW,EAAEkjC,UAAYljC,EAAEX,GACpBa,KAAMF,EAAEmjC,YAAcnjC,EAAEE,QAE5BP,KAAKyjC,YACDR,EAASQ,YACTN,EAAUM,YACV,IACFrjC,IAAKC,IAAM,CACTX,GAAIW,EAAEkjC,UAAYljC,EAAEX,GACpBa,KAAMF,EAAEmjC,YAAcnjC,EAAEE,QAE5BP,KAAK+M,QAAUk2B,EAASl2B,QAAUo2B,EAAUp2B,QAAU,IAAI3M,IACrDC,GAAM,IAAI,IAAc,OAAD,wBAAMA,GAAC,CAAEqjC,YAAa1jC,KAAKN,OAEvDM,KAAK2jC,OAASV,EAASW,OAAST,EAAUS,OAAS,GACnD5jC,KAAK6jC,SACDZ,EAASa,SACTb,EAASc,kBACTZ,EAAUY,kBACV,GACJ/jC,KAAKgkC,SAAWf,EAAS7mB,SAAW+mB,EAAU/mB,SAAW,GACzDpc,KAAKikC,eACDhB,EAASiB,eAAiBf,EAAUe,eAAiB,GACzDlkC,KAAKmkC,UAAYlB,EAAS/8B,UACtBi9B,EAAUj9B,UAAY,CAAEk+B,UAAW,KAAMC,SAAU,MACvDrkC,KAAKskC,oBACDrB,EAASqB,qBAAuBnB,EAAUmB,qBAAuB,GACrEtkC,KAAKukC,WAAatB,EAASsB,YAAcpB,EAAUoB,YAAc,GACjE,MAAMC,EAAc,GACpB,GAAIvB,EAASwB,eACT,IAAK,MAAM90B,KAAOszB,EAASwB,eACvB,GAAI90B,KAAOszB,EAASwB,eAAgB,CAChC,MAAMC,EAAezB,EAASwB,eAAe90B,IAAQ,GACrD,IAAK,MAAMg1B,KAAWD,EACdC,KAAWD,GACXF,EAAY/zB,KAAK,CACb/Q,GAAIglC,EAAaC,GACjBpkC,KAAMokC,EACNC,SAAUj1B,IAOlC3P,KAAKyO,SAAWw0B,EAASx0B,UAAY,GACrCzO,KAAKwkC,YAAcA,EACnBxkC,KAAKsS,SACD2wB,EAAS3wB,UAAY6wB,EAAU7wB,UAAYuM,EAASvM,UAAY,GACpEtS,KAAK6kC,eAAiB5B,EAAS4B,gBAC3B1B,EAAU0B,gBACVhmB,EAASgmB,gBAAkB,CAAE7gC,MAAO,EAAGI,IAAK,IAChDpE,KAAK8kC,cACD7B,EAAS6B,eACT3B,EAAU2B,eACVjmB,EAASimB,eACT,GACJ9kC,KAAK+kC,YACD9B,EAAS8B,aACT5B,EAAU4B,aACVlmB,EAASkmB,aACT,GACJ/kC,KAAKR,KAAOyjC,EAASzjC,MAAQ2jC,EAAU3jC,MAAQqf,EAASrf,MAAQ,GAChEQ,KAAKglC,QACD/B,EAAS+B,SAAW7B,EAAU6B,SAAWnmB,EAASmmB,SAAW,GACjEhlC,KAAKilC,aACDhC,EAASgC,cACT9B,EAAU8B,cACVpmB,EAASomB,cACT,GACJjlC,KAAKklC,gBACDjC,EAASiC,iBACT/B,EAAU+B,iBACVrmB,EAASqmB,iBACT,KACJllC,KAAKmlC,cACDlC,EAASkC,eACThC,EAAUgC,eACVtmB,EAASsmB,eACT,GACJnlC,KAAKolC,yBACDnC,EAASmC,0BACTjC,EAAUiC,0BACVvmB,EAASumB,2BACR,KACLplC,KAAKqlC,SACDpC,EAASoC,UACTlC,EAAUkC,UACVxmB,EAASwmB,UACT,MAOD,KAAK9kC,GACR,MAAO,IAAKP,KAAK2jC,OAAOpjC,IAAS,IAKrC,iBACI,OAAOkU,OAAOhV,KAAKO,KAAK2jC,QAAQl/B,OAAQpE,GAAMA,KAAKL,KAAK2jC,QAG5D,cACI,OAAO,OAAP,UAAa3jC,KAAK6jC,UAAY,IAGlC,cACI,OAAO,OAAP,UAAa7jC,KAAKgkC,UAAY,IAGlC,oBACI,OAAO,OAAP,UAAahkC,KAAKikC,gBAAkB,IAOjC,iBAAiBW,GACpB,OAAQ5kC,KAAKwkC,aAAe,IAAI//B,OAAQpE,GAAMA,EAAEukC,WAAaA,I,kCCtN9D,Y,MAAMU,EA+ET,YAAoBxjC,EAAmCitB,GAAnC,KAAAjtB,WAAmC,KAAAitB,UA7EpC,KAAA9J,aAAe,IAAIxiB,EAAA,GAAyB,GAE/C,KAAAmc,YAAc5e,KAAKilB,aAAa7hB,eAC/B,KAAAmiC,WAAa,IAAI9iC,EAAA,EAA4B,IAC7C,KAAA+iC,iBAAmB,IAAI/iC,EAAA,EAA0B,MACjD,KAAAgjC,QAAU,IAAIhjC,EAAA,EAAiC,IAGhD,KAAAmG,cAAgB5I,KAAKulC,WAAWniC,eAEhC,KAAAsiC,WAAa1lC,KAAKylC,QAAQriC,eAE1B,KAAAyF,gBAAkB7I,KAAKwlC,iBAAiBpiC,eAExC,KAAAuiC,eAAgB,EAAAniC,EAAA,IAAc,CAC1CxD,KAAKylC,QACLzlC,KAAKwlC,mBACNrkC,MAAK,EAAAf,EAAA,GAAI,EAAEiB,EAAG4L,KAAUA,EAAMjN,KAAK4lC,kBAAkB34B,GAAO,KAIvD,KAAAxE,UAAqB,GAErB,KAAAo9B,mBAAuC,IAuD3C,WACK1kC,MAAK,EAAAC,EAAA,GAAOC,GAAMA,IAClBiE,UAAU,IAAMqZ,WAAW,IAAM3e,KAAK2kB,OAAQ,MACnD3kB,KAAK6I,gBAAgBvD,UAAW2H,IACxBA,IACAjN,KAAK8B,SAAS8U,UAAY,CACtB5W,KAAKyI,UACLzI,KAAK8lC,iBAAiB74B,EAAIvN,QA3D1C,eACI,OAAOM,KAAKyI,UAIhB,wBACI,OAAOzI,KAAK6lC,mBAIT,iBAAiBE,EAAiB,IAIrC,OAHKA,GAAU/lC,KAAKgJ,WAChB+8B,EAAS/lC,KAAKgJ,SAAStJ,IAEpBM,KAAK6lC,oBACN7lC,KAAK6lC,mBAAmBE,IACxB,GAIV,mBACI,OAAO/lC,KAAKgmC,cAIhB,gBACI,OAAOhmC,KAAKulC,WAAWhgC,WAI3B,eACI,OAAOvF,KAAKwlC,iBAAiBjgC,WAEjC,aAAoB0H,GAChBjN,KAAKwlC,iBAAiB1gC,KAAKmI,GAC3BjN,KAAK8B,SAAS8U,UAAY,CACtB5W,KAAKyI,UAAUjD,QACfxF,KAAK8lC,iBAAiB74B,EAAIvN,IAAI8F,SAK/B,KAAK9F,GACR,OAAOM,KAAK2I,UAAU5B,KAAM1G,GAAMA,EAAEX,KAAOA,GAI/C,aACI,OAAOM,KAAKylC,QAAQlgC,WAqBjB,YAAY0gC,GACf,OAAOjmC,KAAK+M,OAAOhG,KAAM4I,GAAQs2B,aAAO,EAAPA,EAASz+B,SAASmI,EAAIjQ,KAOpD,kBAAkBuN,GACrB,OAAOjN,KAAK+M,OAAOtI,OAAQkL,GAAQA,EAAI/C,YAAcK,EAAIvN,IAG/C,KAAKwmC,EAAgB,G,8CAC/BlmC,KAAKilB,aAAangB,MAAK,SACjB9E,KAAKmmC,OAAOhkC,MAAOke,IAGrB,MAFA,QAAY,gDACZ1B,WAAW,IAAM3e,KAAK2kB,KAAKuhB,GAAQn6B,KAAK2xB,IAAI,IAAQ,MAAQwI,IACtD7lB,IAEVrgB,KAAKilB,aAAangB,MAAK,GACnBud,OAAOc,QACFd,OAAO6C,cAAa7C,OAAO6C,YAAc,IAC9C7C,OAAO6C,YAAYkhB,KAAOpmC,QAOpB,O,oDACJA,KAAKqmC,yBACLrmC,KAAKsmC,sBACLtmC,KAAKumC,mBACLvmC,KAAKwmC,iBAMF,mB,sDACT,MAAMC,QAAiB,SAAW,CAAEt7B,KAAM,QACrChK,MAAK,EAAAf,EAAA,GAAKC,GAAMA,EAAEM,OAClBY,YACL,GAAIklC,EAAS7hC,OAAQ,CACjB,MAAM8hC,GAAO,WACP9lB,EACF6lB,EAAS1/B,KACJ8Z,IAAQ,MAAC,mBAAYA,EAAKnhB,MAAmB,QAAZ,EAAAgnC,aAAI,EAAJA,EAAM1gB,cAAM,eAAE2gB,aAC/CF,EAAS,GACZh4B,EAEL,QAF0B,QACjB,SAAamS,EAAIlhB,GAAI,CAAEa,KAAM,aAAcgB,mBACpD,eAAEiE,QACGqZ,EAEL,QAF0B,QACjB,SAAa+B,EAAIlhB,GAAI,CAAEa,KAAM,aAAcgB,mBACpD,eAAEiE,QACHxF,KAAKyI,UAAY,OAAH,wBAAQzI,KAAKyI,WAAcoW,GACzC7e,KAAKgmC,cAAgB,IAAI,IAAa,OAAD,wBAAMplB,GAAG,CAAEnS,mBAEhDzO,KAAK+uB,QAAQK,SAAS,CAAC,qBAOlB,gB,sDACT,MAAMxmB,QAAsB,SAAW,CACnCuC,KAAM,WACNu1B,MAAO,MAENv/B,MACG,EAAAf,EAAA,GAAKC,GACDA,EAAEM,KAAK8D,OAAQpD,GAAMA,EAAEuL,YAAc5M,KAAKgmC,cAActmC,MAG/D6B,aACAqH,aAAa,EAAbA,EAAehE,SAChB5E,KAAK+uB,QAAQK,SAAS,CAAC,mBAE3B,MAAMzmB,EAAY,GAClB,IAAK,MAAMsE,KAAOrE,EAAe,CAC7B,MAAM6F,EAEL,QAF0B,QACjB,SAAaxB,EAAIvN,GAAI,CAAEa,KAAM,aAAcgB,mBACpD,eAAEiE,QACHmD,EAAU8H,KAAK,IAAIyyB,EAAS,OAAD,wBAAMj2B,GAAG,CAAEwB,eAE1CzO,KAAKulC,WAAWzgC,KAAK6D,GACrB,MAAMjJ,EAAKue,aAAaE,QAAQ,oBAC5Bze,GAAMM,KAAK2I,UAAU5B,KAAMkG,GAAQA,EAAIvN,KAAOA,IAC9CM,KAAKwlC,iBAAiB1gC,KAClB9E,KAAK2I,UAAU5B,KAAMkG,GAAQA,EAAIvN,KAAOA,MAG9B,QAAb,EAAAM,KAAKgJ,gBAAQ,eAAEtJ,MAAMiJ,aAAS,EAATA,EAAW/D,QAAS,IAC1C5E,KAAKgJ,SAAWL,EAAU,MAOrB,a,8CACT,MAAM+8B,QAAmB,SAAW,CAChCv6B,KAAM,QACNu1B,MAAO,OAENv/B,MAAK,EAAAf,EAAA,GAAKC,GAAMA,EAAEM,OAClBY,aACAmkC,aAAU,EAAVA,EAAY9gC,SACb5E,KAAK+uB,QAAQK,SAAS,CAAC,mBAE3B,MAAMriB,EAAS24B,EAAWtlC,IAAKuP,GAAQ,IAAI,IAAcA,IACzD5C,EAAO6E,KAAK,CAACC,EAAG9I,KAAO8I,EAAEtR,MAAQ,IAAIkhB,cAAc1Y,EAAExI,MAAQ,KAC7DP,KAAKylC,QAAQ3gC,KAAKiI,KAGtB,6BACI,OAAO/M,KAAK2I,UACPvI,IAAK8J,GAAM,IAAIA,EAAEo6B,sBACjB72B,OAAO,CAACm5B,EAAMC,IAASD,EAAKjgC,OAAOkgC,GAAO,IAC1Cj1B,KAAK,CAACC,EAAG9I,IAAM8I,EAAEtR,KAAKkhB,cAAc1Y,EAAExI,OAGlC,e,8CACT,IAAKP,KAAKgmC,cAAe,OACzB,MAAM7c,EAAW,IACbnpB,KAAK8B,SAASmH,IAAI,aAAe,aACnCiH,oBACFlQ,KAAKyI,gBAAkB,SAAazI,KAAKgmC,cAActmC,GAAI,CACvDa,KAAM4oB,IACP5nB,YACH,MAAMoH,EAAY3I,KAAK2I,UACvB,IAAK,MAAMsE,KAAOtE,EACd3I,KAAK6lC,mBAAmB54B,EAAIvN,UAAY,SAAauN,EAAIvN,GAAI,CACzDa,KAAM4oB,IACP5nB,YAEPvB,KAAK8B,SAAS8U,UAAY,CACtB5W,KAAKyI,UAAUjD,QACfxF,KAAK8lC,iBAAiB9lC,KAAKgJ,SAAStJ,IAAI8F,WAKzC,aAAa9F,GAChBue,aAAaC,QAAQ,mBAAoBxe,I,6CAlPpC4lC,GAAmB,0B,0BAAnBA,EAAmB,QAAnBA,EAAmB,qBAFhB,S,GAET,I,+ICPK,iBACI,oBAAU,0BAAc,QACxB,eAAK,SAAoB,QAC7B,S,sBADS,kC,wCAET,oBAGI,kDAASxf,OAAA,SAET,oBAAU,SAER,QACN,Q,yBAHc,oD,yBApBlB,iBAKI,iBACI,iBAAgC,SAAgB,QAChD,iBACI,SACJ,QACJ,QACA,uBAIA,0BASJ,S,gCAlBwC,6BAE5B,6HAGwB,6CAM3B,kCAAgB,e,yBASrB,qBACI,SACJ,S,qBAFgC,oCAC5B,6DAMT,Y,MAAMghB,EApCb,cA4CqB,KAAAhhB,OAAS,IAAI,O,6CARrBghB,I,wBAAAA,EAAwB,4mBAjC7B,uBAyBA,2C,KAtBK,uB,iBA8BN,G,mJCea,yBACI,SACJ,S,yBAF0C,iBACtC,gD,wCAXZ,6BAII,yBAGI,0DAAiB99B,SAAA,UAGjB,+BAGJ,QACJ,Q,wBARQ,gDAI4B,uC,yBAc5B,yBAII,SACJ,S,yBAHI,oBAEA,gC,wCAbZ,6BAII,yBAEI,mEAGA,+BAMJ,QACJ,Q,wBAVQ,iCAIqB,yC,wCAkBb,kCAKI,+FACH,Q,6CAJG,iBAAe,wB,yBALvB,SAGI,wCAOJ,S,oCANS,2C,yBAVb,SAMI,iC,iBAWJ,S,sBAV0B,wD,yBAR9B,SACI,gC,iBAkBJ,S,uCAjBS,4EAGb,e,wBAuBY,kC,oCAEI,iBAAe,wB,yBALvB,SAGI,wCAMJ,S,sBAL0B,oC,yBAT9B,kBAKI,gCAUJ,S,iCAZI,8BAGK,iDAA+B,e,wCAW5C,kBACI,qBAAmB,0DACf,SACJ,QACJ,Q,wBAFQ,oE,sBAIJ,kBACI,sBAA2B,iBAAK,QAChC,aAAG,qBAAS,QAChB,S,sBAGA,kBACI,0BACA,aAAG,uCAA2B,QAClC,SAqBT,Y,MAAM+9B,UAAkC,KAyD3C,YACYr+B,EACAD,EACyB5G,GAEjCU,QAJQ,KAAAmG,OACA,KAAAD,YACyB,KAAA5G,QA1DpB,KAAAX,MAAQ,IAAI,MAEtB,KAAAN,OAAkB,IAAKZ,KAAK6B,MAAMjB,QAAU,IAE5C,KAAAoI,SAAW,IAAIvG,EAAA,EAA0B,MAIzC,KAAAukC,YAA0B,GAMjB,KAAAzN,kBAAmB,EAAA/1B,EAAA,IAAc,CAACxD,KAAKgJ,WAAW7H,MAC9D,EAAAwD,EAAA,GAAU,EAAEsI,MACRjN,KAAKgC,SAAU,GACR,QAAmB,CACtB+C,SAAUkI,aAAG,EAAHA,EAAKvN,GACfsF,cAAc,EAAAC,EAAA,GAAYjF,KAAK6B,MAAMhB,MACrCqE,YAAY,EAAAD,EAAA,IACR,EAAA6G,EAAA,GAAW9L,KAAK6B,MAAMhB,KAAMb,KAAK6B,MAAMf,gBAInD,EAAA0D,EAAA,GAAY,IAGA,KAAAyiC,gBAAkBjnC,KAAKu5B,iBAAiBp4B,MACpD,EAAAf,EAAA,GAAKygB,IACD,QACIA,EACA,+BAAK7gB,KAAK6B,OAAK,CAAEoQ,MAAM,YACvBjS,KAAK0I,KAAKM,SAASm8B,iBAG3B,EAAA//B,EAAA,GAAI,IAAOpF,KAAKgC,SAAU,IAyB1BhC,KAAKgJ,SAASlE,KAAK9E,KAAK0I,KAAKM,UAAYhJ,KAAK2I,UAAU,IACxD3I,KAAK4wB,aACD,SACA5wB,KAAKinC,gBAAgB3hC,UAAWjE,GAAMA,IAzB9C,gBACI,OAAOrB,KAAK0I,KAAKC,UAIrB,eACI,QAAS3I,KAAKyI,UAAUQ,IAAI,+BAIhC,gBACI,MAAMrI,EAAS,GAEf,OADAZ,KAAKY,OAAOiG,QAASC,GAAWlG,EAAOkG,EAAMpH,KAAM,GAC5CkB,EAgBJ,cAAckG,GACb9G,KAAKknC,SACAlnC,KAAKmnC,UAAUrgC,EAAMpH,KACtBM,KAAKY,OAAO6P,KAAK3J,IAGrB9G,KAAKY,OAAS,CAACkG,GACf9G,KAAKkR,QAIN,OACHlR,KAAKkB,MAAMkB,KAAK,CAAEd,OAAQ,OAAQI,SAAU1B,KAAKY,U,6CAlF5CmmC,GAAyB,8BA4DtB,Q,wBA5DHA,EAAyB,wiC,GAAA,MApH9B,kBACI,sBAA2B,iBAAK,QAChC,iBACI,SACJ,QACA,oBACI,sBAA2B,iBAAK,QACpC,QACJ,QACA,gBACI,kCAeA,mCAiBA,kBACI,iCAoBA,wBAgBJ,QACA,2BAKA,2CAMA,2CAMJ,S,uBA9FQ,sDASC,yDAeA,6DAgBc,kCAAgB,cAsB1B,kCAeA,oC,+LAoCd,G,gEClIA,Y,MAAMK,G,6CAAAA,I,wBAAAA,I,6BAHE,GAAE,SADJ,CAAC,KAAc,KAAiB,S,GAItC,G,MAVHL,EAAyB,wCACzBD,EAAwB,c,MAAxBA,EAAwB,oB,sBCR5B,IAAIO,EAAsB,EAEnB,SAASC,EAAkB1wB,EAAqB,IACnD,MAAMlX,EAAK,SAAS2nC,IACd9mC,EAAO,cAAc8mC,IACrBE,GAAS,QAAqB,OAAS,GAAM,GAAKF,EAAc,EAChEvgC,EAAQ,OAAH,QACPpH,KACAa,OACAinC,UAAW,GAAGjnC,sBACd4M,OAAQ,GAAGk6B,IACX16B,SAAwC,GAA9B,QAAqB,GAAI,GACnC1F,MAAO,GAAG1G,EAAK2P,cAAc5C,MAAM,KAAK9M,KAAK,QAAQ,OACrD+M,KAAM,GACNk6B,YAAY,QAAqB,OAAS,GAAM,EAChDC,aAAa,QAAqB,OAAS,GAAM,EACjDj4B,UAAU,QAAqB,OAAS,GAAM,EAC9Ck4B,UAAuC,KAA5B,QAAqB,KAChC70B,MAAiC,GAA1B,QAAqB,GAC5BC,UAAqC,GAA1B,QAAqB,GAChC1P,MAAO,CAAC,cACRukC,YAAa,oBAAoBloC,IACjCkH,SAAU,GACVihC,aAAcN,EACR,CAAC,UAAS,QAAqBF,EAAc,MAC7C,GACNS,MAAO,IACJlxB,GASP,OAPI9P,EAAsB,gBAAKA,EAAsB,eAAElC,OAAS,IAC5DkC,EAAsB,eAAED,QACnBmf,GACIA,EAAOrZ,UAAW,QAAqB7F,EAAM6F,UAAY,GAElE7F,EAAsB,eAAE,GAAG6F,SAAW7F,EAAM6F,UAEzC7F,E,0EC5BJ,MAAMihC,EAkCT,YAAYpnC,EAAuB,IAC/BX,KAAKN,GAAKiB,EAAKjB,IAAM,GACrBM,KAAKO,KAAOI,EAAKJ,MAAQ,GACzBP,KAAKM,aAAeK,EAAKL,cAAgB,GACzCN,KAAKiH,OAAStG,EAAKsG,OAAS,IAAIiJ,cAChClQ,KAAK2M,SAAWhM,EAAKgM,WAAa,EAClC3M,KAAKo0B,aAAezzB,EAAKyzB,cAAiBzzB,EAAK+O,UAAoB,GACnE1P,KAAKyP,WAAa9O,EAAK8O,SACvBzP,KAAKqD,MAAQ1C,EAAK0C,OAAS,GAC3BrD,KAAK4nC,YAAcjnC,EAAKinC,aAAe,GACvC5nC,KAAKmN,OAASxM,EAAKwM,QAAU,GAC7BnN,KAAK8nC,MAAQnnC,EAAKmnC,OAAS,GAC3B9nC,KAAKgoC,eAAiBrnC,EAAKqnC,gBAAkB,GAC7ChoC,KAAK0P,SAAW/O,EAAK+O,UAAY,GACjC1P,KAAKoS,gBAAkBzR,EAAKyR,gBAC5BpS,KAAK2J,MAAQhJ,EAAKgJ,OAAS,IAAI,KAC/B3J,KAAKugB,aAAe5f,EAAK4f,cAAgB,M,iICjD1C,Y,MAAM0nB,EAkBT,YAAoBv/B,GAAA,KAAAA,OAhBZ,KAAAw/B,MAAQ,IAAI,IAAyB,IAE1B,KAAAjjB,aAAe,IAAI,KAAyB,GAE/C,KAAArG,YAAc5e,KAAKilB,aAAa7hB,eAEhC,KAAAyd,KAAO7gB,KAAKkoC,MAAM9kC,eAExB,KAAA+kC,SAAYrhC,GAClBA,EAAMzD,MAAMmE,SAASxH,KAAK0I,KAAKM,SAAStJ,IAQxCM,KAAK0I,KAAKkW,YACLzd,MAAK,OAAOE,GAAMA,IAClBiE,UAAU,IAAMtF,KAAKooC,cAP9B,iBACI,OAAOpoC,KAAKkoC,MAAM3iC,WAaf,OAAO8iC,EAAmCroC,KAAKmoC,UAClD,OAAOnoC,KAAKkoC,MAAM3iC,WAAWd,OAAQpD,GAAMgnC,EAAUhnC,IAOlD,KAAK3B,GACR,OAAOM,KAAKkoC,MACP3iC,WACAwB,KAAMD,GAAUA,EAAMpH,KAAOA,GAAMoH,EAAMG,QAAUvH,GAG9C,a,8CACV,MAcM4oC,SAdgB,SAAa,CAC/BjF,QAASrjC,KAAK0I,KAAK6/B,aAAa7oC,GAChCghC,MAAO,MAENv/B,MAAK,OAAKd,GAAMA,EAAEM,OAClBY,aACsBnB,IACtBooC,GACG,IAAI,IAAM,OAAD,wBACDA,GAAW,CACf7+B,MAAO3J,KAAK0I,KAAKqY,YAAY,IAAIynB,EAAInlC,YAIjBoB,OAAQqC,GAAUA,EAAMqG,QACxDnN,KAAKkoC,MAAMpjC,KAAKwjC,GAChBtoC,KAAKilB,aAAangB,MAAK,M,6CA3DlBmjC,GAAa,c,0BAAbA,EAAa,QAAbA,EAAa,qBAFV,S,GAET,I,kPCQC,kBAII,uBACJ,S,qBADe,+B,wCAEf,oBAII,oBAAoD,kBAAM,QAC1D,qBAAmB,iEAAwB,gBAAI,QACnD,S,sBAEI,mBACI,0BACA,aAAG,8BAAkB,QACzB,SAgBL,Y,MAAMQ,UAA8B,KAUvC,YAA6C5mC,GACzCU,QADyC,KAAAV,QAR5B,KAAAX,MAAQ,IAAI,MAYtB,WACHlB,KAAKmT,KAAOnT,KAAK6B,MAAMsR,MAAQ,GAC/BnT,KAAKH,MAAO,QAAiBG,KAAKmT,MAG/B,cAEH,GADAnT,KAAKH,KAAK6oC,mBACN1oC,KAAKH,KAAK2tB,MAAO,CACjB,MAAMoT,EAAW,IAAI,KAAK,OAAD,wBAClB5gC,KAAKH,KAAKM,OAAK,CAClBoN,KAAM,cAEVvN,KAAKkB,MAAMkB,KAAK,CAAEd,OAAQ,OAAQI,SAAUk/B,M,6CA1B3C6H,GAAqB,MAUV,Q,wBAVXA,EAAqB,stB,GAAA,MA1C1B,kBACI,iBACI,SACJ,QACA,iBACA,oBACI,oBAAU,iBAAK,QACnB,QACJ,QACA,wBAMA,0BAOA,2C,uBApBQ,+EASH,kCAAgB,cAMhB,oC,kJAyBN,G,iDC9CK,iBACI,mBACI,iBAAI,gBAAM,aAAC,QAAO,cACtB,QACA,4BACI,mBAMA,qBAAW,4BAAgB,QAC/B,QACJ,S,sBAZsB,4C,yBAatB,iBACI,mBACI,kBAAK,gBAAM,aAAC,QAAO,cACvB,QACA,4BACI,mBAMA,qBAAW,qCAAyB,QACxC,QACJ,S,sBAZuB,6C,yBAavB,iBACI,mBACI,yBAAY,gBAAM,aAAC,QAAO,cAC9B,QACA,4BACI,oBAMA,qBAAW,oCAAwB,QACvC,QACJ,S,sBAZqB,oD,yBAarB,iBACI,oBACI,oBACJ,QACA,4BACI,oBAOA,qBAAW,mCAAuB,QACtC,QACJ,S,sBAbuB,6C,sBAcvB,iBACI,2BAKI,iCACJ,QACJ,S,sBACA,iBACI,2BAKI,4BACJ,QACJ,S,yBA3EJ,kBACI,wBAcA,wBAcA,wBAcA,uBAeA,uBASA,uBASJ,S,qBA5E6B,0BACL,4CAcA,6CAcA,oDAcA,6CAeA,2DASA,uDAwBzB,Y,MAAME,EAIF,SAASpoC,GACZ,OACIP,KAAKH,KAAKI,SAASM,GAAMgtB,SAAWvtB,KAAKH,KAAKI,SAASM,GAAMqoC,S,6CAN5DD,I,wBAAAA,EAAiB,yyBA3FtB,wB,KAAiB,sB,uLA2FlB,G,kCC3EA,Y,MAAME,G,6CAAAA,I,wBAAAA,I,4BAVA,CACL,KACA,KACA,KACA,KACA,KACA,S,GAID,G,MAXYJ,EAAuB,CAAF,KAAE,mBAAAE,EAAiB,U,cCRpD,MAAMG,EAsBT,YAAYjnC,EAAiB,IACzB7B,KAAKuN,KAAO1L,EAAM0L,MAAQ1L,EAAMqE,UAAY,QAC5ClG,KAAKqyB,SAAWxwB,EAAMwwB,UAClBxwB,EAAMsL,QAAU,CACZiC,EAAGvN,EAAMuN,EAAIvN,EAAM4X,WAAa,EAChCpK,EAAGxN,EAAMwN,EAAIxN,EAAM6X,YAAc,GAEzC1Z,KAAKwZ,SAAW3X,EAAM2X,UAAY,EAClCxZ,KAAK4T,UAAY/R,EAAM+R,YAAa,EAAA3O,EAAA,GAAY,IAAIjC,MACpDhD,KAAK2J,MAAQ9H,EAAM8H,MACnB3J,KAAKgJ,SAAWnH,EAAMmH,SACtBhJ,KAAKoZ,cAAgBvX,EAAMuX,YAC3BpZ,KAAKsZ,iBAAmBzX,EAAMyX,kBAAoB,Y,4CC7B1D,MAAMyvB,EAAiB,uBAiBhB,SAASC,EAAa51B,GACzB,MAAM6N,GAAQ,OAAc,CAAE7N,MAC9B,OAAO,SAAI,GAAG21B,IAAiB31B,EAAI,IAAM6N,EAAQ,MAAM9f,MACnD,OAAK0f,GAASA,EAAKzgB,IAAKqb,GAAS,IAAI,KAAUA,MAmBhD,SAASwtB,EAAUvpC,GACtB,OAAO,SAAI,GAAGqpC,KAAkBxd,mBAAmB7rB,MAAOyB,MACtD,OAAKsa,GAAS,IAAI,KAAUA,KC3CpC,MAAMytB,EAAiB,uBAMhB,SAASC,EAAY/1B,GACxB,MAAM6N,GAAQ,OAAc,CAAE7N,MAC9B,OAAO,SAAI,GAAG81B,IAAiB91B,EAAI,IAAM6N,EAAQ,MAAM9f,MACnD,OAAK0f,GAASA,EAAKzgB,IAAKqb,GAAS,IAAI,KAAUA,MAQhD,SAAS2tB,EAAU1pC,GACtB,OAAO,SAAI,GAAGwpC,KAAkB3d,mBAAmB7rB,MAAOyB,MACtD,OAAKsa,GAAS,IAAI,KAAUA,O,8ECV7B,MAAM4tB,EAwCT,YAAY1oC,EAA8B,I,YACtCX,KAAKN,GAAKiB,EAAKjB,IAAM,GACrBM,KAAKO,KAAOI,EAAKJ,MAAQ,GACzBP,KAAKiH,MAAQtG,EAAKsG,OAAS,GAC3BjH,KAAK+N,WAAapN,EAAKoN,YAAcpN,EAAKJ,MAAQ,GAClDP,KAAKgO,UAAYrN,EAAKqN,WAAa,GACnChO,KAAKgiC,MAAQrhC,EAAKqhC,OAAS,GAC3BhiC,KAAKuoC,aAAe5nC,EAAK4nC,cAAgB,GACzCvoC,KAAKspC,MAAQ3oC,EAAK2oC,OAAS,GAC3BtpC,KAAKupC,MAAQ5oC,EAAK4oC,OAAS,GAC3BvpC,KAAKqY,SAAW1X,EAAK0X,UAAY,GACjCrY,KAAKwpC,YAAc7oC,EAAK6oC,UACxBxpC,KAAKgQ,OAASrP,EAAKqP,QAAU,GAC7BhQ,KAAK2T,aAAehT,EAAKgT,WACzB3T,KAAKypC,SAAwB,QAAb,EAAA9oC,EAAK8oC,gBAAQ,SAC7BzpC,KAAKoS,gBAAkBzR,EAAKyR,iBAAmB,GAC/C,MAAMpC,EAASrP,EAAKqP,QAAU,GAC1BrP,EAAK+oC,WAAW15B,EAAOS,KAAK,iBAC5B9P,EAAKgpC,SAAS35B,EAAOS,KAAK,mBAC9BzQ,KAAKgQ,OAASA,EACdhQ,KAAK6S,eAAiBlS,EAAKkS,gBAAkB,GAC7C7S,KAAK6S,eAAe+2B,oBAChBjpC,EAAKipC,qBAAuB5pC,KAAK6S,eAAe+2B,oBACpD5pC,KAAK46B,cAAyB,QAAV,EAAA56B,KAAKiH,aAAK,eAAEoG,SAAS,GAAG,SAC5CrN,KAAKoQ,eAAoC,QAAnB,EAAAzP,EAAKyP,sBAAc,SACzCpQ,KAAK4pC,uBAA2C,QAAnB,EAAA5pC,KAAK6S,sBAAc,eAAE+2B,sBAInD,MAAMC,UAAkBR,EAM3B,YAAY1oC,EAA2B,IACnC4B,MAAM5B,GACNX,KAAK8pC,mBAAqBnpC,EAAKmpC,oBAAsB,GACrD9pC,KAAK+pC,0BACDppC,EAAKopC,4BAA6B,GAIvC,MAAMC,UAAkBX,EAU3B,YAAY1oC,EAA2B,IACnC4B,MAAM5B,GACNX,KAAKiqC,YAActpC,EAAKspC,aAAe,GACvCjqC,KAAK8hC,SAAWnhC,EAAKmhC,UAAY,GACjC9hC,KAAKkG,SAAWvF,EAAKuF,UAAY,GACjClG,KAAK2f,eAAiBhf,EAAKgf,gB,sFC5GnC,IAIWuqB,EAAc,cAElB,SAASC,EAAsB9mB,GAClC6mB,EAAc7mB,EA8DX,SAAS+mB,EAAiBj3B,G,MAC7B,IAAKA,EACD,MAAM5T,MAAM,kBAGhB,MAAM8qC,EAA+B,CACjC9pC,KAAM,IAAI,KAAY4S,EAAK5S,MAAQ,IACnC0G,MAAO,IAAI,KAAYkM,EAAKlM,OAAS,GAAI,CACrC,WACA,gBAEJshC,aAAc,IAAI,KACdp1B,EAAKo1B,cAAgB,GACrB,eAEJvG,MAAO,IAAI,KACP7uB,EAAK6uB,OAAS,GACd,aAAmB,sBAEvB4H,oBAAqB,IAAI,KAAYz2B,EAAKy2B,sBAAuB,GACjEx5B,eAAgB,IAAI,KAA+B,QAAnB,EAAA+C,EAAK/C,sBAAc,WAKvD,OADa,IAAI,KAAUi6B,M","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 3855;\nmodule.exports = webpackEmptyAsyncContext;","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport {\n    SpaceSelectModalComponent,\n    SpaceSelectModalData,\n} from '@placeos/spaces';\nimport { first, map } from 'rxjs/operators';\n\n@Component({\n    selector: 'event-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"flex flex-col\">\n                <label for=\"title\">Title<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"title\"\n                        formControlName=\"title\"\n                        placeholder=\"Meeting Title\"\n                    />\n                    <mat-error>A valid title is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"date\">Date<span>*</span>:</label>\n                <a-date-field name=\"date\" formControlName=\"date\"></a-date-field>\n            </div>\n            <div class=\"flex space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label for=\"start-time\">Start Time<span>*</span>:</label>\n                    <a-time-field\n                        name=\"start-time\"\n                        [ngModel]=\"form.get('date').value\"\n                        (ngModelChange)=\"form.patchValue({ date: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-time-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label for=\"duration\">Duration<span>*</span>:</label>\n                    <a-duration-field\n                        name=\"duration\"\n                        [time]=\"form.controls?.date?.value\"\n                        formControlName=\"duration\"\n                    ></a-duration-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"organiser\">Host<span>*</span>:</label>\n                <a-user-search-field\n                    name=\"organiser\"\n                    formControlName=\"organiser\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"attendees\">Attendees<span>*</span>:</label>\n                <a-user-list-field\n                    name=\"attendees\"\n                    formControlName=\"attendees\"\n                ></a-user-list-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"space\">Space<span>*</span>:</label>\n                <an-action-field name=\"space\" (onAction)=\"selectSpace()\">{{\n                    spaces\n                }}</an-action-field>\n            </div>\n        </form>\n    `,\n    styles: [``],\n})\nexport class EventFormComponent {\n    @Input() public form: FormGroup;\n\n    public get spaces() {\n        return (\n            this.form.controls?.resources?.value\n                ?.map((i) => i.display_name || i.name)\n                .join(', ') || 'Select a space'\n        );\n    }\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async selectSpace() {\n        const ref = this._dialog.open<\n            SpaceSelectModalComponent,\n            SpaceSelectModalData\n        >(SpaceSelectModalComponent, {\n            data: {\n                spaces: this.form.controls?.resources?.value,\n                date: this.form.controls?.date?.value,\n                duration: this.form.controls?.duration?.value,\n            },\n        });\n        const success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (success?.reason === 'done') {\n            this.form.patchValue({ resources: success.metadata });\n        }\n        ref.close();\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { CalendarEvent, EventFormService } from '@placeos/events';\n\nexport interface BookingModalData {\n    event?: CalendarEvent;\n}\n\n@Component({\n    selector: 'booking-modal',\n    template: `\n        <header>\n            <h2>New Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4\"\n        >\n            <event-form [form]=\"form\"></event-form>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-gray-200\"\n        >\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading | async }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-height: 65vh;\n                max-width: calc(100vw - 4rem);\n            }\n        `,\n    ],\n})\nexport class BookingModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Observable for the loading state of the form */\n    public readonly loading = this._service.loading;\n\n    public get form() {\n        return this._service.form;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: BookingModalData,\n        private _service: EventFormService,\n        private _dialog_ref: MatDialogRef<BookingModalComponent>\n    ) {}\n\n    public ngOnInit(): void {\n        this._service.newForm(this._data.event);\n    }\n\n    public async save() {\n        const event = await this._service.postForm().catch((_) => {\n            notifyError(_);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    startOfDay,\n    endOfDay,\n    startOfWeek,\n    endOfWeek,\n    startOfMonth,\n    endOfMonth,\n    format,\n    getUnixTime,\n} from 'date-fns';\nimport { BehaviorSubject, of, combineLatest } from 'rxjs';\nimport {\n    map,\n    switchMap,\n    debounceTime,\n    catchError,\n    filter,\n    first,\n    tap,\n    shareReplay,\n} from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    openConfirmModal,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    queryEvents,\n    removeEvent,\n    replaceBookings,\n} from '@placeos/events';\nimport { SpacesService } from '@placeos/spaces';\nimport { BookingModalComponent } from './booking-modal.component';\n\nexport type BookingType =\n    | 'internal'\n    | 'client'\n    | 'external'\n    | 'setup'\n    | 'training'\n    | 'interview'\n    | 'declined';\n\nexport interface BookingFilters {\n    /** List of zone ids to get bookings for */\n    zone_ids?: string[];\n    space_emails?: string[];\n    hide_type?: BookingType[];\n}\n\nexport interface BookingUIOptions {\n    /** Whether to show setup and breakdown times for events */\n    show_overflow?: boolean;\n    /** Whether to show cleaning status of the events */\n    show_cleaning?: boolean;\n    /** Whether weekends should be shown on week view */\n    show_weekends?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventsStateService extends BaseClass {\n    /** Emitter for poll events */\n    private _poll = new BehaviorSubject<number>(0);\n    /** Period to list bookings for */\n    private _period = new BehaviorSubject<'month' | 'week' | 'day'>('day');\n    /** List of bookings */\n    private _bookings = new BehaviorSubject<CalendarEvent[]>([]);\n    /** Event to display */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Filter details for bookings */\n    private _filters = new BehaviorSubject<BookingFilters>({});\n    /** Filter details for bookings */\n    private _options = new BehaviorSubject<BookingUIOptions>({});\n    /** Currently active date */\n    private _date = new BehaviorSubject<number>(new Date().valueOf());\n    /** Currently displayed zone */\n    private _zones = new BehaviorSubject<string[]>([]);\n    /** Whether booking data is being loaded */\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    /** Observable for active date */\n    public readonly date = this._date.asObservable();\n    /** Observable for active zone */\n    public readonly zones = this._zones.asObservable();\n    /** Observable for UI display options */\n    public readonly options = this._options.asObservable();\n    /** Observable for loading state of bookings */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for viewed event */\n    public readonly event = this._event.asObservable();\n    /** Obsevable for filtered list of bookings */\n    public readonly filtered = combineLatest([\n        this._bookings,\n        this._filters,\n        this._date,\n        this._period,\n        this._zones,\n    ]).pipe(\n        map(([events, filters, date, period, zones]) => {\n            const start_fn =\n                period === 'month'\n                    ? startOfMonth\n                    : period === 'week'\n                    ? startOfWeek\n                    : startOfDay;\n            const end_fn =\n                period === 'month'\n                    ? endOfMonth\n                    : period === 'week'\n                    ? endOfWeek\n                    : endOfDay;\n            const start = start_fn(date);\n            const end = end_fn(date);\n            console.log(events);\n            return this.filterEvents(events, start, end, filters, zones);\n        }),\n        shareReplay(1)\n    );\n\n    /** Observable for list of bookings */\n    public readonly events = combineLatest([\n        this._period,\n        this._zones,\n        this._date,\n        this._poll,\n    ]).pipe(\n        filter((i) => !!i[0]),\n        debounceTime(300),\n        switchMap(([period, zones, date]) => {\n            if (!zones?.length) return of([]);\n            this._loading.next(true);\n            const start_fn =\n                period === 'month'\n                    ? startOfMonth\n                    : period === 'week'\n                    ? startOfWeek\n                    : startOfDay;\n            const end_fn =\n                period === 'month'\n                    ? endOfMonth\n                    : period === 'week'\n                    ? endOfWeek\n                    : endOfDay;\n            const start = start_fn(date);\n            const end = end_fn(date);\n            return queryEvents({\n                zone_ids: zones.join(','),\n                period_start: getUnixTime(start),\n                period_end: getUnixTime(end),\n            }).pipe(map((_) => [_, start, end]));\n        }),\n        catchError(() => of([[]])),\n        tap(([events, start, end]) => {\n            this.processBookings(\n                events || [],\n                start?.valueOf(),\n                end?.valueOf()\n            );\n            this._loading.next(false);\n        }),\n        map(([events]) => events)\n    );\n\n    /** Active filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n\n    constructor(private _spaces: SpacesService, private _dialog: MatDialog) {\n        super();\n        this.events.subscribe();\n    }\n\n    /**\n     * Update the booking filters\n     * @param details\n     */\n    public setFilters(details: BookingFilters) {\n        this._filters.next(details);\n    }\n\n    /**\n     * Update the booking date\n     * @param details\n     */\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setZones(zones: string[]) {\n        this._zones.next(zones);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setEvent(event: CalendarEvent) {\n        this._event.next(event);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setUIOptions(options: BookingUIOptions) {\n        const old_options = this._options.getValue();\n        this._options.next({ ...old_options, ...options });\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPolling(\n        period: 'day' | 'week' | 'month' = 'day',\n        delay: number = 30 * 1000\n    ) {\n        this._poll.next(Date.now());\n        this._period.next(period);\n        this.interval('polling', () => this._poll.next(Date.now()), delay);\n    }\n\n    /**\n     * Stop polling to update bookings;\n     */\n    public stopPolling() {\n        this._poll.next(0);\n        this.clearInterval('polling');\n    }\n\n    public async newBooking(event?: CalendarEvent) {\n        const ref = this._dialog.open(BookingModalComponent, {\n            data: { event },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details.reason !== 'done') return;\n        this.replace(details.metadata);\n    }\n\n    public async removeBooking(event: CalendarEvent) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete meeting?',\n                content: `Are you sure you want to delete the meeting at ${format(\n                    new Date(event.date),\n                    'dd MMM yyyy, h:mma'\n                )}<br> in ${event.location}?`,\n                icon: { class: 'material-icons', content: 'delete' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Deleting booking...');\n        await removeEvent(event.id, { system_id: event.system?.id });\n        this.remove(event);\n        details.close();\n    }\n\n    /**\n     * Update booking in the bookings list\n     * @param booking\n     */\n    public replace(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings\n            .filter((bkn) => bkn.id !== booking.id)\n            .concat([booking]);\n        this._bookings.next(new_bookings);\n    }\n\n    /**\n     * Remove booking in the bookings list\n     * @param booking\n     */\n    public remove(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings.filter((bkn) => bkn.id !== booking.id);\n        this._bookings.next(new_bookings);\n    }\n\n    private processBookings(\n        events: CalendarEvent[],\n        start: number = startOfDay(Date.now()).valueOf(),\n        end: number = endOfDay(Date.now()).valueOf()\n    ) {\n        let bookings = this._bookings.getValue() || [];\n        const space_list = unique(\n            flatten(events.map((event) => event.resources)),\n            'email'\n        );\n        space_list.forEach((space) => {\n            bookings = replaceBookings(\n                bookings,\n                events.filter((bkn) =>\n                    bkn.resources.find((s) => s.email === space.email)\n                ),\n                {\n                    space: space.email,\n                    from: start.valueOf(),\n                    to: end.valueOf(),\n                }\n            );\n        });\n        console.log(events, bookings);\n        this._bookings.next(bookings);\n    }\n\n    private filterEvents(\n        events: CalendarEvent[],\n        start: Date,\n        end: Date,\n        filters: BookingFilters,\n        zones: string[] = []\n    ) {\n        return events.filter((bkn) => {\n            const intersects = timePeriodsIntersect(\n                start.valueOf(),\n                end.valueOf(),\n                bkn.date,\n                bkn.date + bkn.duration * 60 * 1000\n            );\n            const in_zone = !!bkn.resources\n                .map((r) => this._spaces.find(r.id || r.email))\n                .find((space) => zones.find((z) => space?.zones?.includes(z)));\n            const has_space =\n                !filters.space_emails?.length ||\n                !!bkn.resources.find((space) =>\n                    filters.space_emails.includes(space.email)\n                );\n            const in_zones =\n                !filters.zone_ids?.length ||\n                !!bkn.resources.find((space) =>\n                    space.zones.find((zone) => filters.zone_ids.includes(zone))\n                );\n            const type = bkn.guests.length\n                ? 'external'\n                : bkn.status === 'declined'\n                ? 'cancelled'\n                : 'internal';\n            const show =\n                !filters.hide_type?.length ||\n                !filters.hide_type.includes(type as any);\n            return intersects && has_space && in_zone && in_zones && show;\n        });\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { addDays, subDays } from 'date-fns';\n\n@Component({\n    selector: 'date-options',\n    template: `\n        <button mat-icon-button (click)=\"previousDay()\">\n            <app-icon\n                [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_left' }\"\n            ></app-icon>\n        </button>\n        <button mat-icon-button (click)=\"nextDay()\">\n            <app-icon\n                [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_right' }\"\n            ></app-icon>\n        </button>\n        <div class=\"display m-4 text-center\" style=\"width: 7em;\">{{ date | date: 'mediumDate' }}</div>\n        <button class=\"rounded relative\" mat-icon-button (click)=\"picker.open()\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'today' }\"></app-icon>\n            <input\n                class=\"absolute inset-0\"\n                [(ngModel)]=\"date\"\n                (ngModelChange)=\"dateChange.emit($event)\"\n                [matDatepicker]=\"picker\"\n            />\n            <mat-datepicker #picker></mat-datepicker>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n            }\n\n            button:last-child {\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n            }\n\n            input {\n                opacity: 0;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DateOptionsComponent {\n    /** Currently selected date */\n    @Input() public date: number | string = new Date().valueOf();\n    /** Emitter for changes to the date */\n    @Output() public dateChange = new EventEmitter<number | string>();\n    /** Change date to the previous date */\n    public readonly previousDay = () => {\n        this.date = subDays(new Date(this.date), 1).valueOf();\n        this.dateChange.emit(this.date);\n    };\n    /** Change date to the next date */\n    public readonly nextDay = () => {\n        this.date = addDays(new Date(this.date), 1).valueOf();\n        this.dateChange.emit(this.date);\n    };\n\n    constructor() {}\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'searchbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                placeholder=\"Search...\"\n                [(ngModel)]=\"model\"\n                (ngModelChange)=\"modelChange.emit($event)\"\n            />\n            <app-icon class=\"text-xl\" matSuffix [icon]=\"{ class: 'material-icons', content: 'search' }\"></app-icon>\n        </mat-form-field>\n    `,\n    styles: [`\n        :host {\n            height: 3.5em;\n        }\n    `],\n})\nexport class SearchbarComponent {\n    /** Currently selected date */\n    @Input() public model: string = '';\n    /** Emitter for changes to the date */\n    @Output() public modelChange = new EventEmitter<string>();\n}\n","import { Component } from '@angular/core';\nimport {\n    ApplicationIcon,\n    ApplicationLinkInternal,\n    SettingsService\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'sidebar',\n    template: `\n        <div class=\"logo h-20 w-24 flex items-center justify-center\">\n            <img class=\"object-center object-contain\" [src]=\"logo.src\" />\n        </div>\n        <div class=\"flex-1 overflow-auto w-24\">\n            <ng-container *ngFor=\"let tile of links\">\n                <a\n                    class=\"flex flex-col justify-center items-center\"\n                    [routerLink]=\"['/' + tile.route]\"\n                    routerLinkActive=\"active\"\n                >\n                    <app-icon class=\"text-3xl mb-2\" [icon]=\"tile.icon\"></app-icon>\n                    <div class=\"text-xs\">{{ tile.name }}</div>\n                </a>\n            </ng-container>\n        </div>\n        <button\n            mat-icon-button\n            class=\"mx-auto my-4\"\n            *ngIf=\"(buildings | async).length > 1\"\n            [matTooltip]=\"(active_building | async).display_name || (active_building | async).name\"\n            matTooltipPosition=\"right\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>business</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let building of buildings | async\"\n                (click)=\"setBuilding(building)\"\n            >\n                {{ building.display_name || building.name }}\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                width: 6em;\n                height: 100%;\n                background-color: var(--secondary);\n                border-right: 1px solid #ccc;\n                z-index: 10;\n            }\n\n            a {\n                width: 5.5em;\n                height: 5em;\n                margin: 0.5em 0 0.5em 0.5em;\n                border-radius: 0.25em 0 0 0.25em;\n                text-decoration: none;\n                color: #fff;\n            }\n\n            a.active {\n                background-color: #fff;\n                color: rgba(0, 0, 0, 0.8);\n            }\n\n            button[mat-icon-button] {\n                border: 1px solid #fff;\n                color: #fff;\n                border-radius: 0.25em;\n            }\n        `,\n    ],\n})\nexport class SidebarComponent {\n    public get links(): ApplicationLinkInternal[] {\n        return this._settings.get('app.general.menu') || [];\n    }\n    public get logo(): ApplicationIcon {\n        return this._settings.get('app.logo_dark') || {};\n    }\n\n    public readonly buildings = this._org.building_list;\n    public readonly active_building = this._org.active_building;\n    public readonly setBuilding = (b) => (this._org.building = b);\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {}\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { SidebarComponent } from './sidebar.component';\nimport { DateOptionsComponent } from './date-options.component';\nimport { SearchbarComponent } from './searchbar.component';\nimport { ViewEventDetailsComponent } from './view-event-details.component';\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nconst COMPONENTS: Type<any>[] = [\n    SidebarComponent,\n    DateOptionsComponent,\n    SearchbarComponent,\n    ViewEventDetailsComponent,\n];\n\nconst MAT_MODULES: any[] = [\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatTooltipModule,\n    MatProgressBarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatProgressSpinnerModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatRippleModule,\n];\n\nconst ANGULAR_MODULES: any[] = [FormsModule, ReactiveFormsModule];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ...ANGULAR_MODULES,\n        ...MAT_MODULES,\n        ComponentsModule,\n        RouterModule.forChild([]),\n    ],\n    exports: [\n        ...COMPONENTS,\n        ...MAT_MODULES,\n        ...ANGULAR_MODULES,\n        FormFieldsModule,\n        ComponentsModule\n    ],\n})\nexport class UIModule {}\n","import { Component, Input } from '@angular/core';\nimport { format, addMinutes } from 'date-fns';\n\nimport { CalendarEvent } from '@placeos/events';\nimport { SpacesService } from '@placeos/spaces';\nimport { EventsStateService } from '../day-view/events-state.service';\n\n@Component({\n    selector: 'view-event-details',\n    template: `\n        <div\n            class=\"fixed inset-0 bg-black bg-opacity-30\"\n            (click)=\"close()\"\n        ></div>\n        <div\n            name=\"panel\"\n            class=\"absolute rounded shadow flex flex-col\"\n            (click)=\"$event.stopPropagation()\"\n        >\n            <div class=\"p-4 overflow-auto flex-1\">\n                <h3 class=\"mb-0 pl-6 mb-1\">\n                    {{ event.organiser?.name || event.host }}\n                </h3>\n                <div class=\"text-bold mb-4 pl-6 text-dark-fade\">\n                    {{ event.date | date: 'fullDate' }}\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">title</app-icon>\n                    <span class=\"text-dark-fade\">{{ event.title }}</span>\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">schedule</app-icon>\n                    <span class=\"text-dark-fade\">{{ time }}</span>\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">people</app-icon>\n                    <span class=\"text-dark-fade\"\n                        >{{ event.attendees.length }} Attendee{{\n                            event.attendees.length === 1 ? '' : 's'\n                        }}</span\n                    >\n                </div>\n                <div class=\"flex flex-col mb-2\">\n                    <div\n                        class=\"flex items-center pl-6 mb-1 hover:bg-gray-100 rounded\"\n                        *ngFor=\"let user of event.attendees\"\n                    >\n                        <a-user-avatar\n                            class=\"text-sm pr-2\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <div class=\"flex flex-col\">\n                            <div class=\"text-sm opacity-80\">\n                                {{\n                                    user.name ||\n                                        user.first_name + ' ' + user.last_name\n                                }}\n                            </div>\n                            <div class=\"text-xs opacity-50\">\n                                {{ user.email }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">place</app-icon>\n                    <span class=\"text-dark-fade\">{{ location }}</span>\n                </div>\n                <div class=\"flex items-center\">\n                    <app-icon class=\"mr-1\">format_align_left</app-icon>\n                    <span class=\"text-dark-fade\">Notes</span>\n                </div>\n                <div class=\"flex items-center pl-6 mb-2\">\n                    <span\n                        class=\"text-dark-fade\"\n                        [innerHTML]=\"\n                            event.body || '&lt; No notes &gt;' | sanitize\n                        \"\n                    ></span>\n                </div>\n            </div>\n            <div\n                name=\"actions\"\n                class=\"flex items-center justify-content p-4 space-x-4\"\n            >\n                <button class=\"flex-1 inverse\" mat-button (click)=\"remove()\">\n                    Remove Booking\n                </button>\n                <button class=\"flex-1\" mat-button (click)=\"edit()\">\n                    Edit Booking\n                </button>\n            </div>\n            <button name=\"close\" mat-icon-button (click)=\"close()\">\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                z-index: 999;\n            }\n\n            [name='panel'] {\n                padding-top: 0;\n                width: 26em;\n                left: 50%;\n                top: 6.5em;\n                transform: translateX(-50%);\n                background-color: #fff;\n                max-height: 80vh;\n            }\n\n            [name='actions'] {\n                border-top: 1px solid #ccc;\n            }\n\n            [name='close'] {\n                position: absolute;\n                top: 0.25em;\n                right: 0.25em;\n            }\n        `,\n    ],\n})\nexport class ViewEventDetailsComponent {\n    /** Event to display */\n    @Input() public event: CalendarEvent;\n    /** Close displayed event */\n    public readonly close = () => this._state.setEvent(null);\n\n    public readonly edit = () => this._state.newBooking(this.event);\n\n    public readonly remove = () => this._state.removeBooking(this.event);\n\n    public get location() {\n        const space = this._spaces.find(this.event.resources[0].id);\n        return `${space.level.display_name || space.level.name}, ${\n            space.display_name || space.name\n        }`;\n    }\n\n    public get time() {\n        const date = new Date(this.event.date);\n        return (\n            format(date, 'h:mm a') +\n            ' - ' +\n            format(addMinutes(date, this.event.duration), 'h:mm a')\n        );\n    }\n\n    constructor(\n        private _state: EventsStateService,\n        private _spaces: SpacesService\n    ) {}\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n    AuthorisedUserGuard,\n    UnauthorisedComponent\n} from '@placeos/components';\n\n\nconst routes: Routes = [\n    { path: 'unauthorised', component: UnauthorisedComponent },\n    {\n        path: 'day-view',\n        loadChildren: () =>\n            import('./day-view/day-view.module').then((m) => m.DayViewModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'week-view',\n        loadChildren: () =>\n            import('./week-view/week-view.module').then((m) => m.DayViewModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'facilities',\n        loadChildren: () =>\n            import('./facilities/facilities.module').then(\n                (m) => m.FacilitiesModule\n            ),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'visitors',\n        loadChildren: () =>\n            import('./visitors/visitors.module').then((m) => m.VisitorsModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'desks',\n        loadChildren: () =>\n            import('./desks/desks.module').then((m) => m.DesksModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'reports',\n        loadChildren: () =>\n            import('./reports/reports.module').then((m) => m.ReportsModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'staff',\n        loadChildren: () =>\n            import('./staff/staff.module').then((m) => m.StaffModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'catering',\n        loadChildren: () =>\n            import('./catering/catering.module').then((m) => m.CateringModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'points',\n        loadChildren: () =>\n            import('./points/points.module').then((m) => m.PointsModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    { path: '**', redirectTo: 'day-view' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        tags: ['drink'],\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        tags: ['drink'],\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), [\n    {\n        id: 'test',\n        parent_id: 'bld-01',\n        name: 'Test',\n        map_id: 'assets/maps/l19.svg',\n    },\n]);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nexport const ZONE_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/zones',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.tags === 'org') {\n                return MOCK_ORGS;\n            } else if (request.query_params.tags === 'building') {\n                return MOCK_BUILDINGS;\n            } else if (request.query_params.tags === 'level') {\n                return MOCK_LEVELS;\n            }\n            throw { status: 404, message: 'Zones not found' };\n        },\n    });\n\n    function padString(str: string | number, length: number = 5) {\n        str = `${str}`;\n        while (str.length < length) str = `0${str}`;\n        return str;\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.name === 'bindings') {\n                return {\n                    bindings: {\n                        details: {\n                            area_management: 'space-0',\n                            location_services: 'space-0',\n                        },\n                    },\n                };\n            }\n            if (request.query_params.name === 'catering') {\n                return {\n                    catering: {\n                        details: MOCK_MENU,\n                    },\n                };\n            }\n            if (request.query_params.name === 'desks') {\n                const parts = request.route_params.id.split('-');\n                const id = parts[parts.length - 1];\n                return generateMockDeskMetadata(id);\n            }\n            if (request.query_params.name === 'map_regions') {\n                return {\n                    map_regions: {\n                        details: {\n                            areas: [\n                                {\n                                    id: 'zone-10.A',\n                                    properties: {\n                                        capacity: 100,\n                                        label_location: { x: 0.36, y: 0.33 },\n                                    },\n                                },\n                                {\n                                    id: 'zone-10.B',\n                                    properties: {\n                                        capacity: 100,\n                                        label_location: { x: 0.76, y: 0.33 },\n                                    },\n                                },\n                                {\n                                    id: 'zone-10.C',\n                                    properties: {\n                                        capacity: 100,\n                                        label_location: { x: 0.63, y: 0.77 },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                };\n            }\n            if (\n                MOCK_METADATA[request.route_params.id] &&\n                MOCK_METADATA[request.route_params.id][\n                    request.query_params.name\n                ]\n            ) {\n                return MOCK_METADATA[request.route_params.id];\n            } else if (\n                MOCK_METADATA[request.route_params.id] &&\n                !request.query_params.name\n            ) {\n                return MOCK_METADATA[request.route_params.id] || {};\n            }\n            return {};\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            if (!MOCK_METADATA[request.route_params.id])\n                MOCK_METADATA[request.route_params.id] = {};\n            MOCK_METADATA[request.route_params.id][request.body.name] =\n                request.body;\n        },\n    });\n\n    const DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\n    function generateMockDeskMetadata(id: string) {\n        return {\n            desks: {\n                details: new Array(30).fill(0).map((_, idx) => ({\n                    id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                    name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                    bookable: predictableRandomInt(9999) % 4 !== 0,\n                    group: '',\n                    features: DESK_FEATURES.filter(\n                        (_) => predictableRandomInt(99999) % 3 === 0\n                    ),\n                })),\n            },\n        };\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id/children',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const zone = MOCK_BUILDINGS.find(\n                (_) => _.id === request.route_params.id\n            );\n            if (!zone)\n                throw {\n                    status: 404,\n                    message: `Unable to find zone with id \"${request.route_params.id}\"`,\n                };\n            return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map(\n                (lvl) => {\n                    const parts = lvl.id.split('-');\n                    const id = parts[parts.length - 1];\n                    return {\n                        zone: lvl,\n                        metadata: generateMockDeskMetadata(id),\n                    };\n                }\n            );\n        },\n    });\n}\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@guest.${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    const meeting_url =\n        predictableRandomInt(9999) % 3 === 0 ? 'https://meet.place.tech' : '';\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        meeting_url,\n        meeting_id: meeting_url ? `m${predictableRandomInt(9999)}` : '',\n        meeting_provider: meeting_url ? 'PlaceOS' : '',\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nexport const USER_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/users/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.id === 'current') {\n                return ACTIVE_USER;\n            }\n            const person = MOCK_STAFF.find(\n                (user) => user.email === request.route_params.id\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_STAFF.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const id = decodeURIComponent(request.route_params.id);\n            const person = MOCK_STAFF.find((user) => user.email === id);\n            if (person) {\n                return {\n                    ...person,\n                    location: generateLocation(),\n                };\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_GUESTS.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const email = decodeURIComponent(request.route_params.email);\n            const person = MOCK_GUESTS.find((user) => user.email === email);\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email/meetings',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.email) {\n                const email = request.route_params.email.toLowerCase();\n                const events = MOCK_EVENTS.filter((event) =>\n                    event.attendees.find(\n                        (user) => user.email.toLowerCase() === email\n                    )\n                );\n                return events;\n            }\n            throw {\n                status: 404,\n                message: `Unable to find meetings with guest with email ${request.route_params.email}`,\n            };\n        },\n    });\n\n    const LOCATION_TYPES = [\n        'meeting',\n        'desk_id',\n        'laptop',\n        'mobile',\n        'geo',\n        'none',\n    ];\n\n    function generateLocation() {\n        const type =\n            LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n        const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n        const level_spaces = MOCK_SPACES.filter((s) =>\n            s.zones.includes(level.id)\n        );\n        const space =\n            level_spaces[predictableRandomInt(level_spaces.length)] || {};\n        const location: HashMap = {};\n        switch (type) {\n            case 'meeting':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    system: space.id,\n                    map_id: space.map_id,\n                    event_id: '',\n                };\n                break;\n            case 'desk_id':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    map_id: space.map_id,\n                    checked_in: dayjs().unix(),\n                };\n                break;\n            case 'laptop':\n            case 'mobile':\n                location[type] = {\n                    building: level.parent_id,\n                    level: level.id,\n                    x: +predictableRandomInt(10000),\n                    y: +predictableRandomInt(5000),\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n            case 'geo':\n                location.geo = {\n                    lat: predictableRandomInt(180) - 90,\n                    lon: predictableRandomInt(360) - 180,\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n        }\n        return location;\n    }\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    ref: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    ref: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $power(state = true) {\n        console.log('Power:', state);\n        this.active = state;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt, randomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n        mod[`${lvl.id}:areas`] = {\n            value: [\n                {\n                    area_id: 'zone-10.B',\n                    count: predictableRandomInt(100),\n                    name: '.L1 IFS IT',\n                },\n                {\n                    area_id: 'zone-10.A',\n                    count: predictableRandomInt(100),\n                    name: '.L1 IFS IT',\n                },\n                {\n                    area_id: 'zone-10.C',\n                    count: predictableRandomInt(50),\n                    name: '.L1 IFS IT',\n                },\n            ],\n        };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(users[predictableRandomInt(users.length)].email),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(users[predictableRandomInt(users.length)].email),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { HashMap } from '@placeos/common';\n\nclass MeetingPushModule {\n    public supported_meeting_url = 'https://meet.';\n\n    constructor(data: any) {}\n\n    $econtrol(...args: any[]) {}\n}\n\nexport const createMeetingPushModule = (\n    details?: HashMap,\n    overrides: HashMap = {}\n) =>\n    new MeetingPushModule({\n        ...details,\n        ...overrides,\n    });\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nexport const SYSTEM_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    MOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/systems',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            return MOCK_SPACES;\n        },\n    });\n}\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\nimport { createMeetingPushModule } from './realtime/meeting';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map((_) => createCameraModule(space)),\n        Display: new Array(10).fill(0).map((_) => createDisplayModule(space)),\n        Microphone: new Array(10)\n            .fill(0)\n            .map((_) => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)],\n        MeetingPush: [createMeetingPushModule()],\n    });\n}\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const EVENT_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            let events = MOCK_EVENTS;\n            if (!_.query_params.zone_ids) {\n                events = events.filter(\n                    (event) =>\n                        !!event.attendees.find(\n                            (user) => user.email === ACTIVE_USER.email\n                        )\n                );\n            }\n            if (_.query_params.period_start) {\n                events = events.filter((e) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        e.event_start,\n                        e.event_end\n                    )\n                );\n            }\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-cal-event-${predictableRandomInt(999)}`,\n            };\n            new_event.attendees = [\n                MOCK_STAFF.find((_) => _.email === new_event.host),\n                ...(new_event.attendees || []),\n            ];\n            new_event.attendees.forEach((user) => {\n                if (user.zones) user.resource = true;\n            });\n\n            if (new_event.system) {\n                new_event.attendees = [\n                    ...(new_event.attendees || []),\n                    { ...new_event.system, resource: true },\n                ];\n            }\n            MOCK_EVENTS.push(new_event);\n            return new_event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const item = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (item) {\n                return item;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index > 0) {\n                if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                    MOCK_EVENTS.splice(index, 1);\n                } else {\n                    const user = MOCK_EVENTS[index].attendees.find(\n                        (_) => _.email === ACTIVE_USER.email\n                    );\n                    user.response_status = 'declined';\n                }\n                return;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index >= 0) {\n                return MOCK_EVENTS.splice(index, 1, request.body);\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id/guests/:email/checkin',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const event = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (event) {\n                const checked_in =\n                    (event.extension_data as any).checked_in || [];\n                (event.extension_data as any).checked_in = checked_in.concat([\n                    request.route_params.email,\n                ]);\n                return event;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n}\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const CALENDAR_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n            const user2 = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n            const user3 = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n            return [\n                {\n                    id: ACTIVE_USER.email,\n                    summary: ACTIVE_USER.name,\n                    primary: true,\n                    can_edit: true,\n                    hidden: false,\n                },\n                {\n                    id: user.email,\n                    summary: user.name,\n                    primary: false,\n                    can_edit: true,\n                    hidden: false,\n                },\n                {\n                    id: user2.email,\n                    summary: user2.name,\n                    primary: false,\n                    can_edit: false,\n                    hidden: false,\n                },\n                {\n                    id: user3.email,\n                    summary: user3.name,\n                    primary: false,\n                    can_edit: false,\n                    hidden: true,\n                },\n            ];\n        },\n    });\n\n    const handleSpaceAvailability = (request) => {\n        const start = +request.query_params.period_start;\n        const end = +request.query_params.period_end;\n        const zones = (request.query_params.zone_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n        const systems = (request.query_params.system_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n\n        const spaces = MOCK_SPACES.filter((space) =>\n            zones.length\n                ? zones.reduce(\n                      (has, zone) => has && space.zones.includes(zone),\n                      true\n                  )\n                : systems.length\n                ? systems.includes(space.id)\n                : true\n        ).filter((space) => {\n            const bookings = MOCK_EVENTS.filter((event) =>\n                event.attendees.find((user) => user.id === space.id)\n            );\n            for (const event of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        start,\n                        end,\n                        event.event_start,\n                        event.event_end\n                    )\n                )\n                    return false;\n            }\n            return true;\n        });\n        return spaces;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/availability',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/free_busy',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n}\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { log } from '@placeos/common';\n\nimport { ZONE_MOCKS } from './lib/api/zones.mock';\nimport { USER_MOCKS } from './lib/api/users.mock';\nimport { SYSTEM_MOCKS } from './lib/api/systems.mock';\nimport { EVENT_MOCKS } from './lib/api/events.mock';\nimport { CALENDAR_MOCKS } from './lib/api/calendars.mock';\nimport { BOOKING_MOCKS } from './lib/api/bookings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nexport const BOOKING_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const events = MOCK_BOOKINGS.filter(\n                (event) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        event.booking_start,\n                        event.booking_end\n                    ) && event.type === _.query_params.type\n            );\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n            if (!event)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${_.route_params.id}`,\n                };\n            return event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-booking-${predictableRandomInt(999)}`,\n            };\n            MOCK_BOOKINGS.push(new_event);\n            return new_event;\n        },\n    });\n\n    const updateBooking = (id, data) => {\n        const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${id}`,\n            };\n        const new_event = { ...data };\n        MOCK_BOOKINGS.splice(index, 1, new_event);\n        return new_event;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'PUT',\n        callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/approve',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: true,\n                rejected: false,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/reject',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: false,\n                rejected: true,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/check_in',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                checked_in: req.query_params.state === 'true',\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (req) => {\n            const index = MOCK_BOOKINGS.findIndex(\n                (e) => e.id === req.route_params.id\n            );\n            if (index < 0)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${req.route_params.id}`,\n                };\n            MOCK_BOOKINGS.splice(index, 1);\n            return;\n        },\n    });\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n    log,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        log('APP', 'MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 30 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                `@${currentUser()?.email?.split('@')[1]}`\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MAT_CHIPS_DEFAULT_OPTIONS } from '@angular/material/chips';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\n\nimport { UnauthorisedComponent } from '@placeos/components';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from '../../../../libs/components/src/lib/app.component';\nimport { environment } from '../environments/environment';\nimport { UIModule } from './ui/ui.module';\n\nimport * as Sentry from '@sentry/angular';\n\n@NgModule({\n    declarations: [AppComponent, UnauthorisedComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        MatSnackBarModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        UIModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: {\n                separatorKeyCodes: [ENTER, COMMA],\n            },\n        },\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export const environment = {\n    production: true,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","const general = {\n    menu: [\n        {\n            route: 'day-view',\n            name: 'Calendar',\n            icon: { class: 'material-icons', content: 'event' },\n        },\n        {\n            route: 'facilities',\n            name: 'Facilities',\n            icon: { class: 'material-icons', content: 'meeting_room' },\n        },\n        {\n            route: 'catering',\n            name: 'Catering',\n            icon: { class: 'material-icons', content: 'room_service' },\n        },\n        {\n            route: 'visitors',\n            name: 'Visitors',\n            icon: { class: 'material-icons', content: 'group' },\n        },\n        {\n            route: 'desks',\n            name: 'Desks',\n            icon: { class: 'material-icons', content: 'article' },\n        },\n        {\n            route: 'staff',\n            name: 'Staff',\n            icon: { class: 'material-icons', content: 'account_box' },\n        },\n        {\n            route: 'points',\n            name: 'Points',\n            icon: { class: 'material-icons', content: 'loyalty' },\n        },\n        {\n            route: 'reports',\n            name: 'Reports',\n            icon: { class: 'material-icons', content: 'analytics' },\n        },\n    ],\n};\n\nconst app = {\n    name: 'Concierge',\n    title: 'PlaceOS',\n    description: 'Concierge UI',\n    short_name: 'PlaceOS',\n    logo_light: {\n        type: 'img',\n        src: 'assets/logo-light.svg',\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg',\n    },\n    general,\n};\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/concierge',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app,\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"48a9d8c\",\n    \"hash\": \"48a9d8c\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"48a9d8c\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1631533933683\n};\n/* tslint:enable */\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPinData {\n    message: string;\n    fill: string;\n    stroke: string;\n    action?: () => void;\n}\n\n@Component({\n    selector: '[map-pin]',\n    template: `\n        <div\n            name=\"message\"\n            *ngIf=\"message && show_message\"\n            class=\"p-2 m-2 rounded bg-white text-gray-700 shadow\"\n        >\n            {{ message }}\n        </div>\n        <svg\n            *ngIf=\"show\"\n            name=\"pin\"\n            viewBox=\"0 0 380 560\"\n            [class.action]=\"action\"\n            (click)=\"action()\"\n        >\n            <g>\n                <path\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                    stroke-width=\"25\"\n                    d=\"M182.9,551.7c0,0.1,0.2,0.3,0.2,0.3S358.3,283,358.3,194.6c0-130.1-88.8-186.7-175.4-186.9\n            C96.3,7.9,7.5,64.5,7.5,194.6c0,88.4,175.3,357.4,175.3,357.4S182.9,551.7,182.9,551.7z M122.2,187.2c0-33.6,27.2-60.8,60.8-60.8\n            c33.6,0,60.8,27.2,60.8,60.8S216.5,248,182.9,248C149.4,248,122.2,220.8,122.2,187.2z\"\n                />\n            </g>\n        </svg>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                bottom: 0;\n                left: 50%;\n                width: 24rem;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                transform: translateX(-50%);\n                z-index: -1;\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            .action {\n                pointer-events: auto;\n            }\n\n            svg {\n                width: 2rem;\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translateY(-100%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translateY(0%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapPinComponent implements OnInit {\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#fff';\n    /** Action to perform when clicking pin */\n    public readonly action = this._details.action || null;\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(@Inject(MAP_FEATURE_DATA) private _details: MapPinData) {}\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapRadiusData {\n    message: string;\n    radius: number;\n    fill: string;\n    stroke: string;\n    last_seen?: number;\n    zoom: Observable<number>;\n}\n\n@Component({\n    selector: '[map-radius]',\n    template: `\n        <ng-container *ngIf=\"show && radius\" (window:resize)=\"updateRadius()\">\n            <div\n                class=\"center border-4 rounded-full border-dashed\"\n                [style.border-color]=\"stroke\"\n                [style.background-color]=\"fill + '40'\"\n                [style.width]=\"radius * zoom + 'px'\"\n                [style.height]=\"radius * zoom + 'px'\"\n            ></div>\n            <div\n                *ngIf=\"message && show_message\"\n                name=\"message\"\n                [style.top]=\"'-' + (radius / 2) * zoom + 'px'\"\n                class=\"p-2 m-2 rounded bg-white text-gray-700 shadow absolute top-0 whitespace-no-wrap flex flex-col\"\n            >\n                {{ message }}\n                <span *ngIf=\"last_seen\" class=\"text-xs\">\n                    Last updated: {{ last_seen_at }}\n                </span>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                height: 100%;\n                width: 100%;\n            }\n\n            [name='message'] {\n                transform: translate(-50%, -120%);\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translate(-50%, -220%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translate(-50%, -120%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapRadiusComponent implements OnInit {\n    public zoom = 1;\n    /** Size of the area marked by this component */\n    public radius = this._details.radius || 10;\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#e53935';\n\n    public readonly last_seen: number = this._details.last_seen || 0;\n\n    public get last_seen_at() {\n        return formatDistanceToNow(this.last_seen * 1000) + ' ago';\n    }\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapRadiusData,\n        private _el: ElementRef<HTMLElement>\n    ) {\n        this._details.zoom.subscribe((v) =>\n            Math.max(0.5, (this.zoom = v || 1))\n        );\n    }\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n\n    public ngAfterViewInit() {\n        this.updateRadius();\n    }\n\n    public updateRadius() {\n        const box = this._el.nativeElement.getBoundingClientRect();\n        if (!box.width) return setTimeout(() => this.updateRadius(), 300);\n        this.radius = Math.max(\n            64,\n            (this._details.radius || 10) * (box.width || 10)\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    ApplicationIcon,\n    BaseClass,\n    SettingsService,\n} from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-login',\n    template: `\n        <div class=\"fixed inset-0 overflow-auto\">\n            <form\n                class=\"flex flex-col items-center overflow-hidden mx-auto my-4 bg-white rounded shadow p-4\"\n            >\n                <div\n                    class=\"flex items-center justify-center\"\n                    [style.background-color]=\"logo?.background\"\n                >\n                    <i *ngIf=\"logo?.type === 'icon'\" [class]=\"logo.class\">\n                        {{ logo.content }}\n                    </i>\n                    <img\n                        *ngIf=\"logo?.type === 'img'\"\n                        [src]=\"logo.src | safe: 'resource'\"\n                    />\n                </div>\n                <div class=\"w-full relative h-1/3 flex-1\">\n                    <ng-container *ngIf=\"!loading; else loading_state\">\n                        <div class=\"flex flex-col\">\n                            <label\n                                for=\"username\"\n                                [class.focused]=\"\n                                    username || focus === 'username'\n                                \"\n                                [class.in-focus]=\"focus === 'username'\"\n                            >\n                                Username\n                            </label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    #username\n                                    formControlName=\"username\"\n                                    (keyup.enter)=\"toPassword()\"\n                                />\n                            </mat-form-field>\n                        </div>\n                        <div class=\"flex flex-col\">\n                            <label for=\"password\">Password</label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    #pass_field\n                                    formControlName=\"password\"\n                                    (keyup.enter)=\"login()\"\n                                />\n                                <mat-error>Invalid username or password</mat-error>\n                            </mat-form-field>\n                        </div>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center justify-center w-full\" *ngIf=\"!loading\">\n                    <button mat-button color=\"primary\" (click)=\"login()\">\n                        Login\n                    </button>\n                </div>\n            </form>\n        </div>\n        <ng-template #loading_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"64\"></mat-spinner>\n                <p>Checking user credentials...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                background-color: #f0f0f0;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='64' height='64' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M8 16c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm0-2c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6zm33.414-6l5.95-5.95L45.95.636 40 6.586 34.05.636 32.636 2.05 38.586 8l-5.95 5.95 1.414 1.414L40 9.414l5.95 5.95 1.414-1.414L41.414 8zM40 48c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm0-2c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6zM9.414 40l5.95-5.95-1.414-1.414L8 38.586l-5.95-5.95L.636 34.05 6.586 40l-5.95 5.95 1.414 1.414L8 41.414l5.95 5.95 1.414-1.414L9.414 40z' fill='%23ad1457' fill-opacity='0.2' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n\n            form {\n                width: 20rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            img {\n                max-height: 3.75rem;\n                max-width: 15rem;\n            }\n        `,\n    ],\n})\nexport class LoginComponent implements OnInit {\n    /** Whether the user credentials are being checked */\n    public loading: boolean;\n\n    public readonly form = new FormGroup({\n        username: new FormControl('', [Validators.required]),\n        password: new FormControl('', [Validators.required]),\n    });\n\n    /** Password field element */\n    @ViewChild('pass_field', { static: true })\n    private pwd_field: ElementRef<HTMLInputElement>;\n\n    /** Logo of the application organisation */\n    public get logo(): ApplicationIcon {\n        return this._settings.get('app.logo_dark') || { type: 'icon' };\n    }\n\n    constructor(private _settings: SettingsService) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        this.loading = false;\n    }\n\n    /** Focus on the password field */\n    public toPassword() {\n        if (this.pwd_field && this.pwd_field.nativeElement) {\n            this.pwd_field.nativeElement.focus();\n        }\n    }\n\n    /** Perform user login */\n    public login() {\n        this.loading = true;\n        // this._users.login({\n        //     username: this.username,\n        //     password: this.password\n        // }, { form: true }).then(() => {\n        //     this.loading = false;\n        // }, () => {\n        //     this.loading = false;\n        //     this.error = true;\n        // });\n        this.form.setErrors({ password: 'Invalid username or password' });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-unauthorised',\n    template: `\n        <div\n            class=\"unauthorised rounded m-4 text-center bg-white text-black border border-gray-400 p-4 shadow\"\n        >\n            <h1 class=\"text-4xl\">403</h1>\n            <h3 class=\"text-2xl\" i18n=\"@@forbiddenLabel\">Access forbidden.</h3>\n            <p class=\"py-4\" i18n=\"@@invalidPermissionLabel\">\n                You do not have permission to view this page and your access\n                attempt has been recorded.\n            </p>\n            <p i18n=\"@@contactAdminLabel\">\n                Contact your Administrator if you feel that you should have\n                access.\n            </p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            .unauthorised {\n                width: 28em;\n                max-width: calc(100vw - 1rem);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .unauthorised {\n                    background-color: #262626;\n                    color: #fff;\n                }\n            }\n        `,\n    ],\n})\nexport class UnauthorisedComponent {}\n","import { Injectable, Optional } from '@angular/core';\nimport {\n    CanActivate,\n    CanLoad,\n    Route,\n    UrlSegment,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n    Router,\n} from '@angular/router';\nimport { onlineState } from '@placeos/ts-client';\nimport { current_user } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nexport abstract class PLACEOS_APP_ACCESS {\n    public readonly group: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorisedUserGuard implements CanActivate, CanLoad {\n    constructor(\n        private _router: Router,\n        @Optional() private _access: PLACEOS_APP_ACCESS\n    ) {}\n\n    public async canActivate(\n        next?: ActivatedRouteSnapshot,\n        state?: RouterStateSnapshot\n    ): Promise<boolean | UrlTree> {\n        return this.checkUser();\n    }\n\n    public async canLoad(\n        route?: Route,\n        segments?: UrlSegment[]\n    ): Promise<boolean> {\n        return this.checkUser();\n    }\n\n    private async checkUser() {\n        await onlineState()\n            .pipe(first((_) => _))\n            .toPromise();\n        const user: StaffUser = await current_user\n            .pipe(first((_) => !!_))\n            .toPromise();\n        const can_activate = !!(\n            user &&\n            (!this._access?.group || user.groups.includes(this._access.group))\n        );\n        if (!can_activate) {\n            this._router.navigate(['/unauthorised']);\n        }\n        return !!can_activate;\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MapPolygonComponent } from './map-polygon.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    MapPolygonComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'custom-table',\n    template: `\n        <cdk-table [dataSource]=\"data_source\" matSort>\n            <ng-container *ngFor=\"let column of columns; let i = index\">\n                <ng-container [cdkColumnDef]=\"column\">\n                    <div\n                        cdk-header-cell\n                        class=\"capitalize p-2\"\n                        [style.width]=\"(column_size[i] || '8') + 'em'\"\n                        [style.flex]=\"column_size[i] === 'flex' ? '1' : ''\"\n                        *cdkHeaderCellDef\n                        mat-sort-header\n                    >\n                        {{ display_column[i] || column }}\n                    </div>\n                    <div\n                        cdk-cell\n                        class=\"p-2 truncate flex items-center\"\n                        [style.width]=\"(column_size[i] || '8') + 'em'\"\n                        [style.flex]=\"column_size[i] === 'flex' ? '1' : ''\"\n                        *cdkCellDef=\"let row\"\n                        [title]=\"row[column]\"\n                    >\n                        <ng-container\n                            *ngIf=\"!template[column]; else cell_outlet\"\n                            >{{ row[column] }}</ng-container\n                        >\n                        <ng-template #cell_outlet>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    template[column];\n                                    context: {\n                                        data: row[column],\n                                        row: row,\n                                        key: column\n                                    }\n                                \"\n                            ></ng-container>\n                        </ng-template>\n                    </div>\n                </ng-container>\n            </ng-container>\n\n            <cdk-header-row\n                class=\"flex items-center bg-white sticky top-0 z-10\"\n                *cdkHeaderRowDef=\"columns\"\n            ></cdk-header-row>\n            <cdk-row\n                row\n                class=\"flex z-0 relative\"\n                *cdkRowDef=\"let row; columns: columns\"\n            ></cdk-row>\n            <ng-template cdkNoDataRow>\n                <p class=\"w-full p-4 text-center\">\n                    {{ empty || 'No data to display' }}\n                </p>\n            </ng-template>\n        </cdk-table>\n        <div footer [hidden]=\"!pagination\">\n            <mat-paginator\n                [pageSize]=\"page_size\"\n                [hidePageSize]=\"true\"\n                [showFirstLastButtons]=\"true\"\n            >\n            </mat-paginator>\n        </div>\n    `,\n    styles: [\n        `\n            cdk-header-row {\n                position: sticky;\n                border-bottom: 1px solid #999;\n                font-weight: 500;\n                text-transform: capitalize;\n                min-height: 3rem;\n            }\n\n            cdk-row {\n                border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n            }\n\n            cdk-row:hover {\n                background-color: #f0f0f0;\n            }\n        `,\n    ],\n})\nexport class CustomTableComponent<T extends {} = any>\n    extends BaseClass\n    implements AfterViewInit, OnChanges {\n    /** Data source to render in the table */\n    @Input() public dataSource: T[] | Observable<T[]>;\n    /** Whether table should use pagination */\n    @Input() public pagination = false;\n    /** Number of items to display on pagination pages */\n    @Input() public page_size = 7;\n    /** Filter string to apply to table listings */\n    @Input() public filter: string;\n    /** Values to display for column headers */\n    @Input() public display_column: string[];\n    /** List of columns to display in the table */\n    @Input() public columns: string[];\n    /** Size of the columns in em or flex for a flexible size */\n    @Input() public column_size: string[] = [];\n    /** Displayed value when the table is empty */\n    @Input() public empty: string;\n    /** Displayed value when the table is empty */\n    @Input() public template: HashMap<TemplateRef<any>> = {};\n\n    public readonly data_source: MatTableDataSource<T> = new MatTableDataSource(\n        []\n    );\n\n    @ViewChild(MatPaginator) private _paginator: MatPaginator;\n    @ViewChild(MatSort) private _sort: MatSort;\n\n    public ngAfterViewInit() {\n        this.data_source.sort = this._sort;\n        this.data_source.paginator = this.pagination ? this._paginator : null;\n        this.data_source.filterPredicate = (i: any, s) => {\n            for (const key in i) {\n                if (\n                    typeof i[key] === 'string' &&\n                    i[key].toLowerCase().includes(s.toLowerCase())\n                ) {\n                    return true;\n                } else if (i[key] === s) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.dataSource && this.dataSource) {\n            if (this.dataSource instanceof Observable) {\n                this.subscription(\n                    'data',\n                    this.dataSource.subscribe(\n                        (data) => (this.data_source.data = data)\n                    )\n                );\n            } else {\n                this.data_source.data = this.dataSource;\n            }\n        }\n        if (changes.pagination) {\n            this.data_source.paginator = this.pagination\n                ? this._paginator\n                : null;\n        }\n        if (changes.filter) {\n            this.data_source.filter = (this.filter || '').trim().toLowerCase();\n        }\n        if (changes.columns && this.columns) {\n            this.display_column = this.columns.map(\n                (_, idx) => this.display_column[idx] || _.split('_').join(' ')\n            );\n        }\n        if (!this.column_size) {\n            this.column_size = [];\n        }\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Injectable,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\n@Injectable()\nexport class CustomTooltipData<T = any> {\n    data: T;\n    close: () => void;\n    constructor(d) {\n        this.data = d.data;\n        this.close = d.close || (() => null);\n    }\n}\n\n@Component({\n    selector: '[customTooltip]',\n    template: `\n        <ng-content></ng-content>\n\n        <ng-template cdk-portal>\n            <div custom-tooltip class=\"relative\" [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'component'\">\n                    <ng-container\n                        *ngComponentOutlet=\"content; injector: injector\"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'html'\">\n                    <div [innerHTML]=\"content | sanitize\"></div>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <ng-container\n                        *ngTemplateOutlet=\"content; context: data\"\n                    ></ng-container>\n                </ng-container>\n            </div>\n        </ng-template>\n    `,\n})\nexport class CustomTooltipComponent<T = any>\n    extends BaseClass\n    implements OnChanges, OnDestroy {\n    /** Horizontal position of the rendered overlay */\n    @Input('xPosition') public x_pos: 'start' | 'center' | 'end';\n    /** Vertical position of the rendered overlay */\n    @Input('yPosition') public y_pos: 'top' | 'center' | 'bottom';\n    /** Content to render in the tooltip */\n    @Input() public content: TemplateRef<any> | Type<any> | string;\n    /** Data associated with the tooltip content */\n    @Input() public data: T;\n    /** Whether tooltip has a backdrop */\n    @Input() public backdrop = true;\n    /** Whether tooltip has a backdrop */\n    @Input() public hover = false;\n    /** Type of content to render */\n    public type: 'template' | 'component' | 'html' = 'template';\n\n    public injector: Injector;\n\n    private _overlay_ref: OverlayRef = null;\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('click') public readonly onClick = () => this.open();\n    @HostListener('mouseenter') public readonly onEnter = () =>\n        this.hover ? this.open() : '';\n    @HostListener('mouseleave') public readonly onLeave = () =>\n        this.hover ? this.close() : '';\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay,\n        private _injector: Injector\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        this._updateInjector();\n        if (\n            this._overlay_ref &&\n            (changes.x_pos || changes.y_pos || changes.content)\n        ) {\n            this.open();\n        }\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public open() {\n        if (!this.content) return;\n        this._updateType();\n        if (this._overlay_ref) this.close();\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            hasBackdrop: !!this.backdrop,\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withPositions([\n                    {\n                        originX: this.x_pos || 'end',\n                        originY:\n                            (this.y_pos === 'top'\n                                ? 'bottom'\n                                : this.y_pos == 'bottom'\n                                ? 'top'\n                                : this.y_pos) || 'bottom',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'top',\n                    },\n                ]),\n        });\n        this._overlay_ref.attach(this._portal);\n        if (this.backdrop) {\n            this.subscription(\n                'backdrop',\n                this._overlay_ref.backdropClick().subscribe(() => this.close())\n            );\n        }\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    private _updateType() {\n        this.type =\n            typeof this.content === 'string'\n                ? 'html'\n                : this.content instanceof TemplateRef\n                ? 'template'\n                : 'component';\n    }\n\n    private _updateInjector() {\n        this.injector = Injector.create({\n            providers: [\n                {\n                    provide: CustomTooltipData,\n                    useValue: { data: this.data, close: () => this.close() },\n                },\n            ],\n            parent: this._injector,\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                ratio$: this._on_changes.pipe(\n                                    map((_) => _.ratio)\n                                ),\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        try {\n            if (!getViewer(this.viewer) || this.loading) {\n                return this.timeout('update_view', () => this.updateView());\n            }\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        try {\n            updateViewer(this.viewer, {\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                desired_center: this.center,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                updateViewer(this.viewer, {\n                    styles: this.styles,\n                    features: [],\n                    labels: this.labels,\n                    actions: this.actions,\n                    options: this.options,\n                });\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        if (!id || !this.viewer) return;\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPolygonData {\n    /** Name of the region */\n    name: string;\n    /** Color to display region in on overlay */\n    color: string;\n    /** Array of points that define the shape of the region */\n    points: [number, number][];\n    /**  */\n    ratio?: number;\n\n    ratio$?: Observable<number>;\n\n    data$?: Observable<MapPolygonData>;\n}\n\n@Component({\n    selector: '[map-polygon]',\n    template: `\n        <div\n            polygon\n            class=\"absolute w-full h-full transform -translate-x-1/2 -translate-y-1/2\"\n        >\n            <svg\n                [attr.viewBox]=\"\n                    '0 0 ' + width + padding + ' ' + height + padding\n                \"\n                [style.width]=\"width * (100 / scale) + '%'\"\n                [style.height]=\"height * (100 / scale) + '%'\"\n                class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-full\"\n            >\n                <polygon\n                    [attr.points]=\"points\"\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                />\n                <circle\n                    *ngFor=\"let point of point_list\"\n                    [attr.cx]=\"point[0] || 0\"\n                    [attr.cy]=\"point[1] || 0\"\n                    [attr.r]=\"4\"\n                    [style.stroke]=\"'#000'\"\n                    [style.fill]=\"'#fffd'\"\n                />\n            </svg>\n            <div\n                text\n                class=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-shadow text-white text-xl text-center whitespace-pre-line\"\n            >\n                {{ name }}\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            polygon {\n                stroke-width: 4;\n            }\n            circle {\n                stroke-width: 2;\n            }\n\n            [text] {\n                width: 32rem;\n                max-width: 65vw;\n            }\n        `,\n    ],\n})\nexport class MapPolygonComponent extends BaseClass implements OnInit {\n    /** Message to display above the pin */\n    public name = this._details.name;\n    /** Fill colour for the pin SVG */\n    public fill = `${this._details.color || '#e53935'}88`;\n    /** Stroke colour for the pin SVG */\n    public stroke = this._details.color || '#e53935';\n\n    public padding = 32;\n\n    public scale = 8;\n\n    public offset_x = 0;\n    public offset_y = 0;\n    public width = 1;\n    public height = 1;\n\n    /** List of points for drawing the polygon */\n    public points = `0,0 0,${this.height} ${this.width},${this.height} ${this.width},0`;\n\n    public point_list: [number, number][] = [];\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapPolygonData,\n        private _cdr: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        if (this._details.data$) {\n            this.subscription(\n                'data',\n                this._details.data$.subscribe((_) => {\n                    this.name = _.name;\n                    this.fill = `${_.color || '#e53935'}88`;\n                    this.stroke = _.color || '#e53935';\n                    this.processPoints(_.points);\n                })\n            );\n        }\n        if (this._details.ratio$) {\n            this.subscription(\n                'ratio',\n                this._details.ratio$.subscribe((_) => {\n                    this._details.ratio = _;\n                    this.processPoints(this._details.points);\n                })\n            );\n        }\n        this.processPoints(this._details.points);\n    }\n\n    public processPoints(points: [number, number][]) {\n        const diff: HashMap<number> = points.reduce(\n            (m, [x, y]) => ({\n                x_min: x < m.x_min ? x : m.x_min,\n                x_max: x > m.x_max ? x : m.x_max,\n                y_min: y < m.y_min ? y : m.y_min,\n                y_max: y > m.y_max ? y : m.y_max,\n            }),\n            {\n                x_min: 100,\n                x_max: -100,\n                y_min: 100,\n                y_max: -100,\n            }\n        );\n        this.offset_x = diff.x_min * 100;\n        this.offset_y = diff.y_min * 100;\n        const range = {\n            x: diff.x_max - diff.x_min,\n            y: diff.y_max - diff.y_min,\n        };\n        this.width = range.x * 100 * this.scale;\n        this.height = range.y * 100 * (this._details?.ratio || 1) * this.scale;\n        const edge_padding = this.padding / 2 + 8;\n        this.width = Math.floor(this.width * 100) / 100;\n        this.height = Math.floor(this.height * 100) / 100;\n        this.points = points\n            .reduce(\n                (s, [x, y]) =>\n                    `${s}${s ? ' ' : ''}${\n                        ((x - diff.x_min) / range.x) * this.width + edge_padding\n                    },${\n                        ((y - diff.y_min) / range.y) * this.height +\n                        edge_padding\n                    }`,\n                ''\n            )\n            .replace(/NaN/g, '0');\n        this.point_list = points.map(([x, y]) => [\n            ((x - diff.x_min) / range.x) * this.width + edge_padding,\n            ((y - diff.y_min) / range.y) * this.height + edge_padding,\n        ]);\n        this.width = this.width + this.padding + 8;\n        this.height = this.height + this.padding + 8;\n        this._cdr.detectChanges();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { User } from '../../../users/src/lib/user.class';\n\n@Component({\n    selector: 'a-user-avatar',\n    template: `\n        <div\n            class=\"flex items-center justify-center rounded-full overflow-hidden border-2 border-white\"\n            *ngIf=\"user\"\n            [attr.user-id]=\"user.id\"\n        >\n            <div\n                initials\n                class=\"text-black text-opacity-50 uppercase\"\n                *ngIf=\"!user.photo; else image_state\"\n            >\n                {{ initials }}\n            </div>\n        </div>\n        <ng-template #image_state>\n            <img class=\"h-full w-full\" [src]=\"user.photo | safe: 'resource'\" />\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                height: 2.5em;\n                width: 2.5em;\n                background-color: #ccc;\n                overflow: hidden;\n                border: 2px solid white;\n            }\n\n            .initials {\n                font-size: 1em;\n            }\n        `,\n    ],\n})\nexport class UserAvatarComponent {\n    /** User to display avatar for */\n    @Input() public user: User;\n\n    public get initials(): string {\n        if (!this.user) return 'NA';\n        const parts = this.user.name\n            .replace(/[()[\\]\\-+=\\\\/]+/gi, '')\n            .split(' ');\n        return parts.length > 1\n            ? `${parts[0][0]}${parts[parts.length - 1][0]}`\n            : this.user.name.slice(0, 2);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { addMinutes, isAfter, isBefore } from 'date-fns';\n\nexport const endInFuture = (control: AbstractControl) => {\n    if (\n        control.parent?.get('date') &&\n        isAfter(\n            new Date(),\n            addMinutes(control.parent.get('date').value, control.value)\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(\n    control: AbstractControl\n): { [key: string]: boolean } | null {\n    return control.value && isBefore(control.value, new Date())\n        ? { is_future: true }\n        : null;\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration, [endInFuture]),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data?.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.extension_data?.visitor_type),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(\n            event.extension_data?.needs_parking || false\n        ),\n        system: new FormControl(event.system),\n    });\n    form.get('organiser').valueChanges.subscribe((o) =>\n        form.controls.host.setValue(o?.email)\n    );\n    form.get('resources').valueChanges.subscribe((l) =>\n        form.controls.system.setValue(l.length ? l[0] : null)\n    );\n    if (event.id) {\n        form.get('host').disable();\n        form.get('organiser').disable();\n    }\n    if (event.state === 'started') form.get('date').disable();\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport { BaseClass, getInvalidFields } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { getUnixTime } from 'date-fns';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { CalendarEvent } from './event.class';\nimport { saveEvent } from './events.fn';\nimport { generateEventForm } from './utilities';\n\nconst BOOKING_URLS = ['book/spaces', 'schedule/view'];\n\nexport type EventFlowView =\n    | 'form'\n    | 'find'\n    | 'catering'\n    | 'confirm'\n    | 'success';\n\nexport interface EventFlowOptions {\n    /** Calendar to associate event with */\n    calendar_id?: string;\n    /** List of features to filter spaces on */\n    features?: string[];\n    /** List of zones to filter spaces on */\n    zone_ids?: string[];\n    /** Minimum number of attendees to filter space on */\n    capacity?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventFormService extends BaseClass {\n    private _view = new BehaviorSubject<EventFlowView>('form');\n    private _options = new BehaviorSubject<EventFlowOptions>({ zone_ids: [] });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: CalendarEvent = new CalendarEvent(\n        JSON.parse(sessionStorage.getItem('PLACEOS.last_booked_event') || '{}')\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n    public readonly available_spaces = combineLatest([\n        this._view,\n        this._options,\n        this._form,\n        this._org.initialised.pipe(filter((_) => _)),\n    ]).pipe(\n        filter(([view, _, form]) => view === 'find' && !!form),\n        debounceTime(300),\n        switchMap(([_, options, form]) => {\n            this._loading.next('Retrieving available spaces...');\n            const start = form.get('date').value;\n            const end =\n                form.get('date').value + form.get('duration').value * 60 * 1000;\n            return querySpaceFreeBusy(\n                {\n                    period_start: getUnixTime(start),\n                    period_end: getUnixTime(end),\n                    zone_ids:\n                        options.zone_ids?.join(',') || this._org.building.id,\n                    features: options.features?.join(','),\n                    capacity: options.capacity,\n                },\n                this._org\n            );\n        }),\n        tap((_) => {\n            this._loading.next('');\n        }),\n        shareReplay(1)\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n    public get form() {\n        return this._form.getValue();\n    }\n    public get event() {\n        return this._event.getValue();\n    }\n\n    constructor(private _org: OrganisationService, private _router: Router) {\n        super();\n        this.available_spaces.subscribe();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((event: Event) => {\n                if (\n                    event instanceof NavigationEnd &&\n                    !BOOKING_URLS.some((_) => event.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n    }\n\n    public setView(value: EventFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<EventFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public newForm(event: CalendarEvent = new CalendarEvent()) {\n        this._form.next(generateEventForm(event));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._event.next(event);\n        this._options.next({});\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const event = this._event.getValue();\n        this._form\n            .getValue()\n            .patchValue({ ...(event || {}), ...(event?.extension_data || {}) });\n        this._options.next({});\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.event_form');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.event_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(sessionStorage.getItem('PLACEOS.event_form') || '{}'),\n        });\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for event';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const spaces = form.get('resources')?.value || [];\n        const space_list = spaces.length\n            ? await querySpaceFreeBusy({\n                  period_start: getUnixTime(form.get('date').value),\n                  period_end: getUnixTime(\n                      form.get('date').value +\n                          form.get('duration').value * 60 * 1000\n                  ),\n                  system_ids: spaces.map((_) => _.id).join(','),\n              }).toPromise()\n            : [];\n        if (space_list.length !== spaces.length)\n            throw `${\n                spaces.length - space_list.length\n            } space(s) are not available at the selected time`;\n        const result = await saveEvent(\n            new CalendarEvent(this._form.getValue().value)\n        ).toPromise();\n        this.clearForm();\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_event',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** URL of the associated meeting */\n    public readonly meeting_url: string;\n    /** URL of the associated meeting */\n    public readonly meeting_id: string;\n    /** URL of the associated meeting */\n    public readonly meeting_provider: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.meeting_url = data.meeting_url || data.online_meeting_url || '';\n        this.meeting_id = data.meeting_id || data.online_meeting_id || '';\n        this.meeting_provider =\n            data.meeting_provider || data.online_meeting_provider || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.is_external) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from 'libs/users/src/lib/user.class';\n\nimport { CalendarEvent } from './event.class';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, new CalendarEvent(data).toJSON()).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        method === 'patch' ? data : new CalendarEvent(data).toJSON()\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => {\n    delete (data as any)?.status;\n    return data.id ? updateEvent(data.id, data, q) : createEvent(data);\n};\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        {\n            response_type: 'void',\n        }\n    );\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/approve?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/reject?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/guests/${guest_id}/checkin${query ? '?' + query : ''}`,\n        ''\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'an-action-field',\n    template: `\n        <div\n            class=\"flex items-center rounded p-2 border border-gray-300 hover:border-black\"\n            role=\"button\"\n            [attr.disabled]=\"disabled\"\n            form-field\n            tabindex=\"0\"\n            (keydown.enter)=\"performAction()\"\n        >\n            <div\n                placeholder\n                class=\"flex-1 w-0 truncate\"\n                (click)=\"performAction()\"\n            >\n                <ng-content></ng-content>\n            </div>\n            <app-icon class=\"text-xl\" (click)=\"performAction()\">\n                arrow_drop_{{ show_tooltip ? 'up' : 'down' }}\n            </app-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div:hover {\n                box-shadow: inset 0 0 0 1px #000;\n            }\n        `,\n    ],\n})\nexport class ActionFieldComponent {\n    /** Name of the field */\n    @Input() public name: string;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Emitter for user interaction events */\n    @Output('onAction') public on_action = new EventEmitter();\n    /** Whether to show tooltip */\n    public show_tooltip = false;\n\n    /**\n     * Emit that the user has performed an action on the field\n     */\n    public performAction() {\n        this.show_tooltip = !this.show_tooltip;\n        this.on_action.emit();\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'a-counter',\n    template: `\n        <div\n            counter\n            class=\"flex items-center text-base\"\n            (window:keydown.shift)=\"shift_key = true\"\n            (window:keydown.control)=\"ctrl_key = true\"\n            (window:keydown.meta)=\"ctrl_key = true\"\n            (window:keyup.shift)=\"shift_key = false\"\n            (window:keyup.control)=\"ctrl_key = false\"\n            (window:keyup.meta)=\"ctrl_key = false\"\n        >\n            <button\n                mat-icon-button\n                name=\"remove\"\n                type=\"button\"\n                [disabled]=\"!value || value === min\"\n                (click)=\"remove()\"\n            >\n                <app-icon>remove</app-icon>\n            </button>\n            <div value class=\"p-1 text-center\">{{ (render_fn ? render_fn(value) : value) || '0' }}</div>\n            <button\n                mat-icon-button\n                name=\"add\"\n                type=\"button\"\n                [disabled]=\"value === max\"\n                (click)=\"add()\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            [value] {\n                min-width: 3em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => CounterComponent),\n            multi: true,\n        },\n    ],\n})\nexport class CounterComponent implements ControlValueAccessor {\n    /** Size of a single step */\n    @Input() public step = 1;\n    /** Maximum amount for the counter */\n    @Input() public max = 10;\n    /** Minimum amount for the counter */\n    @Input() public min = 0;\n    /** Custom function for rendering the counter value */\n    @Input() public render_fn: (v: number) => string;\n    /** Current value of the counter */\n    public value: number;\n    /** Whether shift key is being held by the user */\n    public shift_key: boolean;\n    /** Whether control key is being held by the user */\n    public ctrl_key: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public add() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value += step;\n        if (this.value > this.max) {\n            this.value = this.max || 10;\n        }\n        this.setValue(this.value);\n    }\n\n    /** Remove the `step` from the current value */\n    public remove() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value -= step;\n        if (this.value < this.min) {\n            this.value = this.min || 0;\n        }\n        this.setValue(this.value);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import {\n    Component,\n\n    forwardRef,\n\n    Injectable, Input, OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    DateAdapter,\n    MatDateFormats,\n    MAT_DATE_FORMATS,\n    NativeDateAdapter\n} from '@angular/material/core';\nimport {\n    addYears,\n\n    endOfDay,\n    format,\n    formatISO,\n    set, startOfDay\n} from 'date-fns';\nimport { BaseClass } from 'libs/common/src/lib/base.class';\nimport { HashMap } from 'libs/common/src/lib/types';\n\n@Injectable()\nclass FieldDateAdapter extends NativeDateAdapter {\n    format(date: Date, displayFormat: HashMap | string): string {\n        if (displayFormat === 'input') {\n            return format(date, 'MMMM d, yyyy');\n        }\n        return format(date, 'MMM yyyy');\n    }\n}\nconst FIELD_DATE_FORMATS: MatDateFormats = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'input',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n@Component({\n    selector: 'a-date-field',\n    template: `\n        <mat-form-field appearance=\"outline\" overlay (click)=\"picker.open()\">\n            <input\n                matInput\n                [ngModel]=\"date\"\n                [disabled]=\"disabled\"\n                [min]=\"from\"\n                [max]=\"until\"\n                (ngModelChange)=\"setValue($event)\"\n                [matDatepicker]=\"picker\"\n            />\n            <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        { provide: DateAdapter, useClass: FieldDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: FIELD_DATE_FORMATS },\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DateFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = new Date().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: string;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** First allowed date on the calendar */\n    public get from(): Date {\n        return new Date(this._from) || startOfDay(new Date());\n    }\n    /** Current date value */\n    public get until(): Date {\n        return new Date(this._to) || addYears(endOfDay(new Date()), 1);\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return format(new Date(this.date), 'DD MMM YYYY');\n    }\n\n    public ngOnInit() {\n        this.date = new Date().toISOString();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        // Keep hours and minutes of the old date\n        const old_date = new Date(this.date);\n        let new_date = set(new_value, {\n            hours: old_date.getHours(),\n            minutes: old_date.getMinutes(),\n        }).valueOf();\n        // Check that new date is before from\n        if (new_date < this.from.valueOf()) {\n            new_date = this.from.valueOf();\n        }\n        this.date = formatISO(new_date || new Date());\n        if (this._onChange) {\n            this._onChange(new_date);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = formatISO(value || new Date());\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n}\n","import { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Identity } from '@placeos/common';\nimport { formatDuration } from 'date-fns';\nimport * as dayjs from 'dayjs';\n\n\n\n@Component({\n    selector: 'a-duration-field',\n    template: `\n        <div class=\"duration-field\" [attr.disabled]=\"disabled\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    #select\n                    [value]=\"duration\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"duration + ' minutes'\"\n                    (valueChange)=\"setValue($event)\"\n                >\n                    <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n                <mat-error><ng-content></ng-content></mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DurationFieldComponent implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max = 240;\n    /** Minimum duration option available */\n    @Input() public min = 30;\n    /** Step value between options */\n    @Input() public step = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Special case prepopulation i.e. out of step options */\n    @Input() public specialPreprops: Array<number> = [];\n\n    public duration = 60;\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        const date = this.time ? dayjs(this.time) : null;\n\n        // Add special case for 10min duration/prepropulation\n        for (const option of this.specialPreprops) {\n            blocks.push({\n                id: option,\n                name: date\n                    ? `${date.add(option, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(option / 60),\n                          minutes: option % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(option / 60), minutes: option % 60 })}`,\n            });\n        }\n\n        while (time <= max) {\n            blocks.push({\n                id: time,\n                name: date\n                    ? `${date.add(time, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(time / 60),\n                          minutes: time % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(time / 60), minutes: time % 60 })}`,\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\n\n/**\n * Add a tag to the list of tags for the item\n * @param event Input event\n */\nexport function addChipItem(\n    control: FormControl,\n    event: MatChipInputEvent\n): void {\n    if (!control) return;\n    const input = event.input;\n    const value = event.value;\n    const item_list = control.value;\n    if ((value || '').trim()) {\n        item_list.push(value);\n        control.setValue(item_list);\n    }\n\n    // Reset the input value\n    if (input) {\n        input.value = '';\n    }\n}\n\n/**\n * Remove tag from the list\n * @param existing_tag Tag to remove\n */\nexport function removeChipItem<T = string>(\n    control: FormControl,\n    item: T\n): void {\n    if (!control) {\n        return;\n    }\n    const item_list = control.value;\n    const index = item_list.indexOf(item);\n\n    if (index >= 0) {\n        item_list.splice(index, 1);\n        control.setValue(item_list);\n    }\n}\n\n@Component({\n    selector: 'item-list-field',\n    template: `\n        <mat-form-field appearance=\"outline\" class=\"w-full\">\n            <mat-chip-list #chipList aria-label=\"Zone Tags\">\n                <mat-chip\n                    *ngFor=\"let item of value\"\n                    [selectable]=\"true\"\n                    [removable]=\"true\"\n                    (removed)=\"remove(item)\"\n                >\n                    {{ item }}\n                    <app-icon matChipRemove>close</app-icon>\n                </mat-chip>\n                <input\n                    placeholder=\"User groups...\"\n                    i18n-placeholder=\"@@userGroupsPlaceholder\"\n                    [matChipInputFor]=\"chipList\"\n                    [matChipInputSeparatorKeyCodes]=\"separators\"\n                    [matChipInputAddOnBlur]=\"true\"\n                    (matChipInputTokenEnd)=\"add($event)\"\n                />\n            </mat-chip-list>\n        </mat-form-field>\n    `,\n    styles: [``],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => ItemListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ItemListFieldComponent<T = any> implements ControlValueAccessor {\n    @Input() public separators: number[] = [ENTER, COMMA, SPACE];\n    /** List of items stored */\n    public value: T[] = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: T[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: T[]) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public readonly add = (e: MatChipInputEvent) =>\n        addChipItem(\n            { value: this.value, setValue: (i) => this.setValue(i) } as any,\n            e\n        );\n\n    /** Remove the `step` from the current value */\n    public readonly remove = (item: T) =>\n        removeChipItem(\n            { value: this.value, setValue: (i) => this.setValue(i) } as any,\n            item\n        );\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: T[]): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T[]) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: T[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: T[]) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { BaseClass, Identity, timeFormatString } from '@placeos/common';\nimport {\n    addMinutes,\n    endOfDay,\n    format,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n    startOfDay,\n    startOfMinute\n} from 'date-fns';\n\n@Component({\n    selector: 'a-time-field',\n    template: `\n        <mat-form-field\n            appearance=\"outline\"\n            [style.display]=\"show_select ? 'none' : ''\"\n            (keydown.enter)=\"showSelect()\"\n        >\n            <input\n                matInput\n                type=\"time\"\n                [disabled]=\"disabled\"\n                [ngModel]=\"time\"\n                (ngModelChange)=\"setValue($event)\"\n            />\n            <button mat-icon-button matSuffix class=\"relative top-1 -right-1\" (click)=\"showSelect()\">\n                <app-icon class=\"text-2xl text-black text-opacity-50\">\n                    arrow_drop_down\n                </app-icon>\n            </button>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n            <mat-select\n                #select\n                [value]=\"time\"\n                [disabled]=\"disabled\"\n                (valueChange)=\"setValue($event)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of time_options\"\n                    [value]=\"option.id\"\n                >\n                    {{ option.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class TimeFieldComponent\n    extends BaseClass\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step = 15;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Whether past times are allowed */\n    @Input() public no_past_times = true;\n    /** String representing the currently set time */\n    public date: number = new Date().valueOf();\n    /** String representing the currently set time */\n    public time: string = format(new Date(), 'HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n        this.timeout('hide', () => (this.show_select = false));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(\n                this.date,\n                !this.no_past_times,\n                this.step\n            );\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = (this.time || '00:00').split(':');\n        const date = set(this.date, { hours: +time[0], minutes: +time[1] });\n        if (\n            date.getMinutes() % 15 !== 0 &&\n            !this._time_options.find(\n                (time) => time.id === format(date, 'HH:mm')\n            )\n        ) {\n            this._time_options.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            this._time_options.sort((a, b) =>\n                `${a.id}`.localeCompare(`${b.id}`)\n            );\n        }\n        return this._time_options;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        if (this._onChange) {\n            const time = (this.time || '00:00').split(':');\n            const date = startOfMinute(\n                set(this.date, { hours: +time[0], minutes: +time[1] })\n            );\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value || this.date;\n        let date = startOfMinute(this.date);\n        date = roundToNearestMinutes(date, { nearestTo: 5 });\n        this.time = format(date, 'HH:mm');\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription(\n                    'listen_close',\n                    this.select_field.openedChange.subscribe((state) => {\n                        if (!state) {\n                            this.show_select = false;\n                        }\n                    })\n                );\n            }\n        });\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(\n        datestamp: number,\n        show_past: boolean,\n        step: number = 15\n    ): Identity[] {\n        const now = new Date();\n        let date = new Date(datestamp);\n        const blocks = [];\n        if (show_past || (!isSameDay(date, now) && isAfter(date, now))) {\n            date = startOfDay(date);\n        } else if (isAfter(date, now)) {\n            date = now;\n        }\n        date = roundToNearestMinutes(date, { nearestTo: step });\n        const end = endOfDay(date);\n        // Add options for the rest of the day\n        while (isAfter(end, date)) {\n            blocks.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            date = addMinutes(date, step);\n        }\n        return blocks;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Output,\n    EventEmitter,\n    Input,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    BaseClass,\n    csvToJson,\n    currentUser,\n    downloadFile,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nimport { NewUserModalComponent, User, USER_DOMAIN } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nfunction validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\n@Component({\n    selector: 'a-user-list-field',\n    template: `\n        <div\n            class=\"mb-4bg-white text-black\"\n            form-field\n            [attr.disabled]=\"disabled\"\n        >\n            <div search>\n                <a-user-search-field\n                    [(ngModel)]=\"search_user\"\n                    [guests]=\"guests\"\n                    [filter]=\"filter\"\n                    error=\"Click on Add External to add an attendee.\"\n                    [empty_fn]=\"emptyClick\"\n                    [validate]=\"validFn\"\n                    (ngModelChange)=\"addUser($event)\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"!hide_actions\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    name=\"new-contact\"\n                    class=\"clear underline flex-1\"\n                    (click)=\"openNewUserModal()\"\n                    i18n=\"Add new external attendee\"\n                >\n                    Add External\n                </button>\n                <button\n                    mat-button\n                    type=\"button\"\n                    class=\"clear underline flex-1 relative\"\n                    name=\"upload-csv\"\n                    i18n=\"Upload attendee list from CSV file\"\n                >\n                    Upload CSV\n                    <input\n                        class=\"opacity-0 absolute inset-0\"\n                        type=\"file\"\n                        (change)=\"addUsersFromFile($event)\"\n                    />\n                </button>\n                <button\n                    mat-button\n                    type=\"button\"\n                    class=\"clear underline flex-1\"\n                    name=\"download-template\"\n                    (click)=\"downloadCSVTemplate()\"\n                    i18n=\"Download template CSV file\"\n                >\n                    CSV Template\n                </button>\n            </div>\n            <div\n                class=\"flex flex-col py-2\"\n                *ngIf=\"active_list?.length; else empty_state\"\n            >\n                <div\n                    user\n                    *ngFor=\"let user of active_list\"\n                    class=\"flex items-center space-x-2 p-2 hover:bg-black hover:bg-opacity-5 rounded\"\n                    (click)=\"user.is_external ? openNewUserModal(user) : ''\"\n                >\n                    <a-user-avatar\n                        [user]=\"user\"\n                        [icon]=\"!user.is_external\"\n                        [matTooltip]=\"\n                            user.is_external\n                                ? 'External Attendee'\n                                : 'Staff Attendee'\n                        \"\n                        matTooltipPosition=\"right\"\n                    >\n                        <div class=\"h-full w-full bg-success text-white\">\n                            <app-icon>done</app-icon>\n                        </div>\n                    </a-user-avatar>\n                    <div class=\"flex-1 w-1/4\">\n                        <div class=\"truncate\">{{ user.name }}</div>\n                        <div class=\"text-xs truncate\">{{ user.email }}</div>\n                    </div>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"\n                            user.required = !user.required;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"user.required\"\n                        [class.text-white]=\"user.required\"\n                        matTooltip=\"Required\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon>{{\n                            user.required ? 'person' : 'person_outline'\n                        }}</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        [disabled]=\"!user.is_external\"\n                        (click)=\"\n                            user.visit_expected = !user.visit_expected;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"\n                            user.is_external && user.visit_expected\n                        \"\n                        [class.text-white]=\"\n                            user.is_external && user.visit_expected\n                        \"\n                        matTooltip=\"Physical visit expected\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon>meeting_room</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        [disabled]=\"!user.is_external\"\n                        (click)=\"\n                            user.assistance_required = !user.assistance_required;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"user.assistance_required\"\n                        [class.text-white]=\"user.assistance_required\"\n                        matTooltip=\"Assistance Required\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon *ngIf=\"user.is_external\"\n                            >contact_support</app-icon\n                        >\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"removeUser(user); $event.stopPropagation()\"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"m-2 opacity-50 text-center\" i18n=\"Attendee empty state\">\n                None\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            button {\n                background: transparent;\n                border-top: none !important;\n                border-bottom: none !important;\n            }\n\n            [search] {\n                height: 3.5rem;\n                margin-top: -0.25rem;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserListFieldComponent\n    extends BaseClass\n    implements ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Number of characters needed before a search will start */\n    @Input() public limit = 3;\n    /** Whether guests should also show when searching for users */\n    @Input() public guests = false;\n    /** Whether optional actions should be shown */\n    @Input('hideActions') public hide_actions = false;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any) => boolean;\n    /** Emitter for action to make a new user */\n    @Output() public new_user = new EventEmitter<void>();\n\n    public search_user: User;\n\n    /** User list to display */\n    public user_list: User[] = [];\n    /** List of active selected users on the list */\n    public active_list: User[] = [];\n    /** Whether user list is loading */\n    public loading: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: User[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User[]) => void;\n\n    public readonly validFn = (s) => validateEmail(s);\n    public readonly emptyClick = () => this.openNewUserModal(new User());\n\n    constructor(\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    /**\n     * Add user to the user list\n     * @param user\n     */\n    public addUser(user: User) {\n        const list = this.active_list.filter((_) => _.email !== user.email);\n        this.setValue([\n            ...list,\n            new User({\n                ...user,\n                id: user.id || user.email,\n                visit_expected:\n                    (!user.id && user.is_external !== true\n                        ? user.visit_expected\n                        : null) ?? true,\n            }),\n        ]);\n        this.timeout('clear_user', () => (this.search_user = null), 10);\n    }\n\n    /**\n     * Remove user from the user list\n     * @param user\n     */\n    public removeUser(user: User) {\n        const list = this.active_list.filter(\n            (a_user) => a_user.email !== user.email\n        );\n        this.setValue(list);\n    }\n\n    /**\n     * Load CSV file and populate the user list with the contents\n     * @param event File input field event\n     */\n    public addUsersFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    this.processCsvData((evt.srcElement as any).result);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    /**\n     * Process raw CSV data and save user data to attendee list\n     * @param data CSV data\n     */\n    private processCsvData(data: string) {\n        const list = csvToJson(data) || [];\n        const id = currentUser()?.staff_id || 'unknown';\n        for (const el of list) {\n            el.name = el.name || `${el.first_name} ${el.last_name}`;\n            const display = (\n                el.name || `${Math.floor(Math.random() * 9999_9999)}`\n            )\n                .split(' ')\n                .join('_')\n                .toLowerCase();\n            /* istanbul ignore else */\n            if (!el.email) {\n                el.email = `${display}+${id}@guest.${USER_DOMAIN}`;\n            }\n            const internal_emails = this._settings.get(\n                'app.booking.internal_emails'\n            ) || ['place.tech'];\n            el.visit_expected =\n                el.visit_expected ??\n                !internal_emails.find((_) => el.email.endsWith(_));\n\n            /** Convert phone to string. PWCME-544 */\n            el.phone = '' + el.phone;\n\n            this.addUser(new User(el));\n        }\n    }\n\n    /* istanbul ignore next */\n    /** Download template CSV file */\n    public downloadCSVTemplate() {\n        const template = `Organisation,First Name,Last Name,Email,Phone,Assistance Required,Visit Expected\\nFake Org,John,Smith,john.smith@example.com,01234567898,false,true`;\n        downloadFile('template.csv', template);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User[]): void {\n        this.active_list = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User[]) {\n        this.active_list = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User[]) => void): void {\n        this._onTouch = fn;\n    }\n\n    public displayFn(item): string {\n        return item?.name || '';\n    }\n\n    /**\n     * Open modal to add or update user details\n     */\n    public openNewUserModal(user: User = new User()) {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: { user },\n            }\n        );\n        ref.componentInstance?.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                this.addUser(event.metadata);\n                ref.close();\n            });\n    }\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n    Component,\n    OnInit,\n    forwardRef,\n    Input,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of, forkJoin } from 'rxjs';\nimport {\n    switchMap,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    catchError,\n} from 'rxjs/operators';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { searchGuests, searchStaff, User } from '@placeos/users';\n\n@Component({\n    selector: 'a-user-search-field',\n    template: `\n        <div class=\"user-search-field text-black\" form-field>\n            <mat-form-field overlay appearance=\"outline\">\n                <input\n                    #input\n                    matInput\n                    keyboard\n                    name=\"user-search\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event || '')\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"placeholder || 'Search for user...'\"\n                    [matAutocomplete]=\"auto\"\n                    (keyup.enter)=\"\n                        validate && validate(search_str)\n                            ? setValue(search_str)\n                            : ''\n                    \"\n                    (blur)=\"resetSearchString()\"\n                    (focus)=\"cancelReset()\"\n                />\n                <app-icon matPrefix class=\"text-2xl relative\">search</app-icon>\n                <mat-spinner\n                    *ngIf=\"loading\"\n                    matSuffix\n                    diameter=\"16\"\n                ></mat-spinner>\n            </mat-form-field>\n            <mat-autocomplete\n                #auto=\"matAutocomplete\"\n                (optionSelected)=\"setValue($event.option.value)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of user_list\"\n                    (click)=\"setValue(option); blurInput()\"\n                >\n                    <div class=\"leading-tight\">{{ option.name }}</div>\n                    <div class=\"text-xs text-black opacity-60\">\n                        {{ option.email }}\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"search_str && validate && validate(search_str)\"\n                    class=\"relative pointer-events-none\"\n                >\n                    <div\n                        class=\"absolute inset-0 px-4 pointer-events-auto\"\n                        (mousedown)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (touchstart)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (click)=\"\n                            setValue(search_str);\n                            $event.stopPropagation();\n                            $event.preventDefault()\n                        \"\n                    >\n                        <div class=\"pointer-events-none\">\n                            Add external attendee \"{{ search_str }}\"\n                        </div>\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"!user_list?.length && (search_str || error)\"\n                    [disabled]=\"!empty_fn\"\n                    (click)=\"empty_fn()\"\n                >\n                    {{ search_str ? 'No users found.' : '' }} {{ error }}\n                </mat-option>\n            </mat-autocomplete>\n        </div>\n    `,\n    styles: [\n        `\n            :host,\n            mat-form-field {\n                width: 100%;\n            }\n\n            app-icon {\n                top: 0.15em;\n                left: -0.15em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserSearchFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Placeholder text to display */\n    @Input() public placeholder: string;\n    /** Limit available options to these */\n    @Input() public options: User[];\n    /** Whether guests should also show when searching for users */\n    @Input() public guests: boolean;\n    /** Message to display when no user matches have been found */\n    @Input() public error = '';\n    /** Function to validate the search string */\n    @Input() public validate: (s: string) => boolean;\n    /** Function to call when empty list option is clicked */\n    @Input() public empty_fn: () => void;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any, s?: string) => boolean;\n\n    @Input() public query_fn: (_: string) => Observable<User[]> = (q) =>\n        searchStaff(q);\n    /** Currently selected user */\n    public active_user: User;\n    /** User list to display */\n    public user_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** List of users from an API search */\n    public search_results$: Observable<User[]> = this.search$.pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap((query) => {\n            this.loading = true;\n            return this.options && this.options.length > 0\n                ? of(this.options)\n                : query.length >= 3\n                ? !this.guests\n                    ? this.query_fn(query)\n                    : forkJoin([searchStaff(query), searchGuests(query)])\n                : of([]);\n        }),\n        catchError((_) => of([])),\n        map((list: User[]) => {\n            this.loading = false;\n            list = flatten(list);\n            const search = (this.search_str || '').toLowerCase();\n            return list.filter(\n                (item) => !this.filter || this.filter(item, search)\n            );\n        })\n    );\n\n    /** Form control on change handler */\n    private _onChange: (_: User) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User) => void;\n\n    @ViewChild('input', { read: ElementRef })\n    private _input_el: ElementRef<HTMLInputElement>;\n\n    public cancelReset = () => this.clearTimeout('reset');\n\n    public blurInput = () => {\n        this.timeout('blur', () => this._input_el?.nativeElement?.blur());\n    };\n\n    public ngOnInit(): void {\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.user_list = list))\n        );\n    }\n\n    /**\n     * Reset the search string back to the name of the active user\n     */\n    public resetSearchString() {\n        this.timeout(\n            'reset',\n            () => (this.search_str = this.active_user?.name || ''),\n            100\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User | string, email?: string): void {\n        if (\n            typeof new_value === 'string' &&\n            (new_value as any) === this.search_str\n        ) {\n            new_value = new User({\n                name: (this.search_str || email || '').split('@')[0],\n                email: this.search_str || email || '',\n            });\n        }\n        if (!(new_value instanceof User)) return;\n        this.active_user = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User) {\n        this.active_user = value;\n        this.resetSearchString();\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import { PlaceZone } from '@placeos/ts-client';\n\nexport class Desk {\n    /** ID of the desk also map_id */\n    public readonly id: string;\n    /** ID of the desk on the associated map */\n    public readonly map_id: string;\n    /** Name of the desk */\n    public readonly name: string;\n    /** Whether desk is available / bookable */\n    public readonly bookable: boolean;\n    /** Zone/Level of the desk */\n    public readonly zone: PlaceZone;\n    /** Group/Department allocated to the desk */\n    public readonly groups: string[];\n    /** QR code image data */\n    public readonly qr_code: string;\n\n    constructor(data: Partial<Desk> = {}) {\n        this.id = data.id || '';\n        this.map_id = data.map_id || data.id || '';\n        this.name = data.name || '';\n        this.bookable = data.bookable ?? false;\n        this.zone = data.zone || new PlaceZone();\n        this.groups = data.groups || [];\n        this.qr_code = data.qr_code || '';\n    }\n\n    public format() {\n        const { id, name, bookable, groups } = this;\n        return {\n            id,\n            name,\n            bookable,\n            groups,\n        };\n    }\n\n    public readonly toJSON = () => this.format();\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { Point } from '@placeos/svg-viewer';\nimport { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n","import { del, get, patch } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from './user.class';\nimport { Observable } from 'rxjs';\n\nconst GUEST_ENDPOINT = '/api/staff/v1/guests';\n\nexport interface GuestsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n}\n\n/**\n * Search guests\n * @param q Search string for filtering guests\n */\nexport function searchGuests(q: string): Observable<GuestUser[]> {\n    const query = toQueryString({ q });\n    return get(`${GUEST_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * List guests\n * @param q Parameters to pass to the API request\n */\nexport function queryGuests(q: GuestsQueryParams): Observable<GuestUser[]> {\n    const query = toQueryString({ ...q });\n    return get(`${GUEST_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * Get guest details\n * @param id ID of the guest\n */\nexport function showGuest(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Update guest metadata\n * @param id ID of the guest\n * @param data New metadata state\n */\nexport function updateGuest(id: string, data: Partial<GuestUser>) {\n    return patch(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, data).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Remove a guest\n * @param id ID of the guest to remove\n */\nexport function removeGuest(id: string) {\n    return del(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * List upcoming meetings for a guest\n * @param id ID of the guest\n */\nexport function listGuestMeetings(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}/meetings`).pipe(\n        map((list) => list.map((item) => new CalendarEvent(item)))\n    );\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = '@place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(\n            user.phone || '',\n            Validators.pattern(/[+\\-()0-9]{1,24}/g)\n        ),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n"],"sourceRoot":"webpack:///"}