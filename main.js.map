{"version":3,"sources":["./libs/common/src/lib/base.class.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/common/src/lib/general.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/control/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/angular-animations.ts","./libs/common/src/lib/base-api.class.ts","./libs/users/src/lib/user.utilities.ts","./libs/users/src/lib/user.class.ts","./libs/common/src/lib/user-state.ts","./libs/components/src/lib/binding.directive.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/searchbar.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/custom-tooltip.component.ts","./libs/components/src/lib/components.module.ts","./libs/spaces/src/lib/space-select-modal/item/item.component.html","./libs/spaces/src/lib/space-select-modal/item/item.component.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/desk.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space.class.ts","./libs/events/src/lib/event.class.ts","./libs/events/src/lib/event.utilities.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/calendar/src/lib/calendar.service.ts","./libs/spaces/src/lib/space-select-modal/space-select-modal.component.html","./libs/spaces/src/lib/space-select-modal/space-select-modal.component.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/spaces/src/lib/spaces.service.ts","./apps/control/src/app/bootstrap.component.ts","./apps/control/src/app/ui/source-select-modal.component.ts","./apps/control/src/app/control-state.service.ts","./apps/control/src/app/ui/blinds-tooltip.component.ts","./apps/control/src/app/ui/joystick.component.ts","./apps/control/src/app/ui/camera-tooltip.component.ts","./apps/control/src/app/ui/help-tooltip.component.ts","./apps/control/src/app/ui/lighting-tooltip.component.ts","./apps/control/src/app/ui/microphone-tooltip.component.ts","./apps/control/src/app/ui/power-tooltip.component.ts","./apps/control/src/app/topbar-header.component.ts","./apps/control/src/app/ui/source-select.component.ts","./apps/control/src/app/ui/output-display.component.ts","./apps/control/src/app/advanced-view.component.ts","./apps/control/src/app/page-view.component.ts","./apps/control/src/app/ui/duration.pipe.ts","./apps/control/src/app/status-bar.component.ts","./apps/control/src/app/main-view.component.ts","./apps/control/src/app/app-routing.module.ts","./libs/components/src/lib/app.component.ts","./libs/common/src/lib/placeos.ts","./apps/control/src/environments/environment.prod.ts","./apps/control/src/app/ui/ui.module.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./apps/control/src/app/app.module.ts","./apps/control/src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["BaseClass","_timers","_intervals","_subscriptions","_initialised","BehaviorSubject","initialised","this","asObservable","getValue","destroy","key","hasOwnProperty","clearTimeout","clearInterval","unsub","name","fn","delay","Function","Error","setTimeout","setInterval","Subscription","unsubscribe","ConfirmModalComponent","_dialog_ref","_data","event","title","content","confirm_text","cancel_text","icon","class","disableClose","enableClose","close","emit","reason","_app_name","log","type","msg","args","stream","force","app_name","window","debug","colors","console","getItemWithKeys","keys","map","shift","length","unique","array","filter","el","pos","arr","indexOf","find","i","randomInt","ceil","floor","Math","random","timePeriodsIntersect","start1","end1","start2","end2","seed","str","h","imul","charCodeAt","xmur3","rand","a","b","c","d","t","predictableRandomInt","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","addEventListener","code","mapKey","toLowerCase","last_down","next","preventDefault","combo","combination","Array","split","validCombination","push","last_key","updateCombinationEndList","subscribe","count","presses","state","reduce","v","replace","non_meta","DEFAULT_SETTINGS","composer","domain","route","protocol","port","use_domain","local_login","app","description","short_name","logo","src","logo_dark","general","SettingsService","_title","super","_overrides","_subjects","_observables","now","Date","time","built","isSameDay","format","init","value","getTitle","setTitle","get","application","settings","override_settings","override","slice","toQueryString","_available","_activated","_timer","message","action","on_action","config","snackbar_ref","open","panelClass","duration","dismiss","onAction","notifySuccess","notifyError","error","notifyInfo","info","opacity","height","BaseDataClass","raw_data","_server_names","id","zone_id","email","with_changes","obj","Object","substr","undefined","USER_DOMAIN","data","first_name","last_name","phone","organisation","notes","photo","organizer","visit_expected","checked_in","response_status","groups","sys_admin","support","extension_data","assistance_required","is_external","endsWith","StaffUser","card_number","staff_id","location","is_logged_in","_current_user","current_user","currentUser","jest","pipe","retry","user","BindingDirective","_element","_renderer","index","params","modelChange","first","_","bindVariable","changes","sys","mod","bind","model","previousValue","execute","on_event","subscription","listen","nativeElement","binding","exec","module","then","result","ActionIconComponent","className","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","IconComponent","PopoutMenuComponent","actions","timeout","show","MAP_FEATURE_DATA","SearchbarComponent","valueChange","flat","autofocus","focusField","input_field","focus","StatusOverlayComponent","loading","links","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","injector","CustomTooltipData","CustomTooltipComponent","_overlay","_injector","backdrop","_overlay_ref","onClick","_updateInjector","x_pos","y_pos","ngOnDestroy","_updateType","_portal","create","hasBackdrop","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","attach","backdropClick","dispose","providers","provide","useValue","parent","MAT_MODULES","ComponentsModule","SpaceSelectItemComponent","BuildingLevel","parent_id","display_name","map_id","capacity","locations","parts","number","toUpperCase","disc_info","discovery_info","zone","extras","extra_id","extra_name","loan_items","levels","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl","lvl_features","feature","level_id","bindings","timezone","catering_hours","start","end","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","tags","_settings","Desk","bookable","OrganisationService","_service","_router","buildings_subject","active_building_subject","levels_subject","building_list","level_list","active_building","active_levels","combineLatest","details","levelsForBuilding","_building_settings","bld","overrides","buildingSettings","bld_id","building","_organisation","buildings","id_list","includes","load","catch","err","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","toPromise","auth","org","list","org_zone","navigate","limit","localStorage","getItem","sort","localeCompare","m","prev","curr","concat","query","loadMetadata","desks","forEach","level","metadata","desk","setItem","feature_list","features","zones","support_url","image","configurations","_default_user","add","setMinutes","setHours","days","customParseFormat","month","months","week","weeks","day","hour","hours","minute","minutes","options","rules","matches","condition","j","check","isBefore","amount","unit","isAfter","after_time","visitor_type","duration_1","duration_2","subtract","startOf","primary","summary","can_edit","resource","system","availability","date","starts_at","dateTime","valueOf","differenceInMinutes","ends_at","status","CALENDAR_ENDPOINT","queryCalendars","CalendarService","_org","_calendars","calendar_list","freeBusy","q","cal","levelWithID","space","calendarsToSpaces","querySpaceFreeBusy","queryCalendarAvailability","calendars","period_start","startOfDay","period_end","system_ids","old_booking","join","every","findIndex","block","splice","SpaceSelectModalComponent","_calendar","spaces","available_spaces","filtered_spaces","space_types","loadAvailableSpaces","zone_ids","unix","filterSpaces","building_settings","host","all_day","space_rules_for_user","auto_approve","hide","rule_block","conditions","ruleset","max_length","min_length","room_type","filterSpacesRules","multiple","space_map","save","SPACE_COUNT","SpacesService","_list","_compare","loadSpaces","predicate","valid_spaces","BootstrapComponent","_spaces","system_list","filtered_list","system_id","selected_system","bootstrap","configure","clearBootstrap","removeItem","space_list","queryParamMap","has","checkBootstrapped","search","s","SourceSelectModalComponent","output","ControlStateService","_dialog","_id","_system","_inputs","_outputs","_volume","_input_data","_output_data","_lights","_blinds","input_list","output_list","lights","blinds","volume","mic_list","camera_list","bindToState","bindSources","input","source","bindTo","l","alias_list","alias","updateSourceData","list_observer","item","on_change","updateProperty","BlindsTooltipComponent","_state","_tooltip","JoystickTilt","JoystickPan","JoystickComponent","panChange","tiltChange","pan","Stop","Left","tilt","Up","move_event","MouseEvent","end_event","_box","_panning_el","getBoundingClientRect","e","handlePan","point","x","clientX","y","clientY","touches","eventToPoint","angle","atan2","top","left","width","PI","Down","Right","startPan","$event","ZoomDirection","CameraTooltipComponent","presets","preset","zoom","dir","In","Out","HelpTooltipComponent","LightingTooltipComponent","MicrophoneTooltipComponent","mute","PowerTooltipComponent","shutdown","powerOff","TopbarHeaderComponent","lights_list","blinds_list","cmp","lighting","power","help","camera","mics","SourceSelectComponent","output_id","outputs","input_types","input_map","types","setRoute","ICON_MAP","Display","PC","Laptop","Camera","TV","OutputDisplayComponent","_input","icons","switchSource","ControlAdvancedViewComponent","page","page_count","fill","ControlPageViewComponent","padLength","DurationPipe","ControlStatusBarComponent","setVolume","routes","path","component","ControlMainViewComponent","_route","powerOn","paramMap","setID","redirectTo","AppRoutingModule","forRoot","useHash","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","_loading","reload","copy","navigator","clipboard","readText","tkn","addHours","mock","hostname","url","origin","pathname","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","setupPlace","onInitError","cache","notify","interval","isEnabled","available","current","hash","activateUpdate","activated","checkForUpdate","setupCache","dsn","sample_rate","integrations","BrowserTracing","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","ANGULAR_MODULES","UIModule","MOCK_ORGS","created_at","updated_at","triggers","MOCK_BUILDINGS","MOCK_LEVELS","idx","mockLevel","p","method","callback","request","query_params","group","DOMAIN","PREDEF_USERS","ACTIVE_USER","MOCK_STAFF","MOCK_GUESTS","randomSpaceFeatures","f","numFeatures","res","r","MOCK_SPACES","linked","long_name","searchable","controlable","cost_hour","setup","breakdown","bookings","linked_rooms","generateMockSpace","EVENT_TIME","nextEventTime","event_status","randomStatus","rnd","MOCK_EVENTS","attendees","unshift","has_active_user","calendar","creator","body","private","event_start","event_end","recurring","recurrence","attachments","event_spaces","route_params","person","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","event_id","last_seen","geo","lat","lon","recording","connected","env_sources","inputs","$updateState","following","$mute","locked","Mic1","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","u","bkn","pending","subSeconds","addSeconds","MockLocationServicesModule","overview","username","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","updateLocations","users","at_location","mac","hashStr","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","live","remaining","$start","createCaptureModule","System","Bookings","AreaManagement","createCameraModule","createDisplayModule","Microphone","createMicrophoneModule","Capture","createSystem","new_event","AppModule","showDialog","deps","register","enabled","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","exports"],"mappings":"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","file":"main.js","sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { Subscription, BehaviorSubject } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BaseClass {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: { [name: string]: (Subscription | (() => void)) } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (this._timers.hasOwnProperty(key)) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (this._intervals.hasOwnProperty(key)) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (this._subscriptions.hasOwnProperty(key)) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name ? 'Cannot create named timeout without a name' : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name ? 'Cannot create named interval without a name' : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from '../../../common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 px-2\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p content class=\"text-center text-sm\" [innerHTML]=\"content\"></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div class=\"h-48 w-64 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            mat-dialog-actions button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Ok';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this._dialog_ref.close('done');\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport { HashMap } from './types';\n\nimport { ConfirmModalComponent, ConfirmModalData, CONFIRM_METADATA } from '../../../components/src/lib/confirm-modal.component';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = ['color: #E91E63', 'color: #3F51B5', 'color: default'];\n        if (args) {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors, args);\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique(array: any[], key: string = '') {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(key ? arr.find((i) => i[key] === el[key]) : arr.find((i) => i === el)) ===\n            pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(data: ConfirmModalData, dialog: MatDialog) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(ConfirmModalComponent, {\n        ...CONFIRM_METADATA,\n        data,\n    });\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')).toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp((\"(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|([^\\\\,\\\\r\\\\n]*))\"),\"gi\");\n    let arrMatches = null, arrData = [[]];\n    while (arrMatches = objPattern.exec(csv)){\n        if (arrMatches[1].length && arrMatches[1] !== \",\")arrData.push([]);\n        arrData[arrData.length - 1].push(arrMatches[2] ?\n            arrMatches[2].replace(new RegExp( \"\\\"\\\"\", \"g\" ), \"\\\"\") :\n            arrMatches[3]);\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            try {\n                element[headers[i]] = JSON.parse(row[i]);\n            } catch (e) {\n                element[headers[i]] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => json[0].hasOwnProperty(key));\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) => valid_keys.map((key) => JSON.stringify(item[key])).join(','))\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(contents));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    for (var i = 0, h = 1779033703 ^ str.length; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)), (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        var t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'hh:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') || navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","\nconst general = {\n}\n\n\nconst app = {\n    name: 'Control',\n    title: 'PlaceOS',\n    description: 'Room Control UI',\n    short_name: 'PlaceOS',\n    logo: {\n        type: 'img',\n        src: 'assets/logo-light.svg'\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg'\n    },\n    general\n}\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/control',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name] ? null : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(`${value} | ${this.get('app.name') || this._app_name}`);\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) { return value; }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"af47e13\",\n    \"hash\": \"af47e13\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"af47e13\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1617792785407\n};\n/* tslint:enable */\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","\nimport { HashMap } from './types';\n\nexport class BaseDataClass {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Human readable name of the object */\n    public readonly name: string;\n    /** Email address associated with the object */\n    public readonly email: string;\n    /** Map of local property names to server ones */\n    protected _server_names: HashMap<string> = {};\n\n    constructor(raw_data: HashMap) {\n        this.id = raw_data.id || raw_data.zone_id || raw_data.email || '';\n        this.name = raw_data.name || '';\n        this.email = (raw_data.email || '').toLowerCase();\n    }\n\n    /**\n     * Convert object into plain object\n     */\n    public toJSON(this: BaseDataClass, with_changes: boolean = true): HashMap {\n        const obj: any = { ...this };\n        // Remove local private members\n\n        // Convert remaining members to be public\n        const keys = Object.keys(obj);\n        for (const key of keys) {\n            if (key[0] === '_') {\n                const new_key = this._server_names[key.substr(1)] || key.substr(1);\n                obj[new_key] = obj[key];\n                delete obj[key];\n            } else if (obj[key] === undefined) {\n                delete obj[key];\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * Make a copy of this object\n     */\n    public clone(): BaseDataClass {\n        return new BaseDataClass(this);\n    }\n\n    /**\n     * Make a copy of this object without identification data\n     */\n    public duplicate(): BaseDataClass {\n        return new BaseDataClass({ ...this, id: null, email: null });\n    }\n}\n","\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'acaprojects.com';\n\nconst USER_EMAILS: string[] = [];\n\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(id?: string, name?: string, external?: boolean): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(predictableRandomInt(4) + 1, USER_EMAILS.length);\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [Validators.email, Validators.required]),\n        organisation: new FormControl(user.organisation || '', Validators.required),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(user: GuestUser, host: string = ''): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [Validators.email, Validators.required]),\n        organisation: new FormControl(user.organisation || '', Validators.required),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n","import { BaseDataClass } from '../../../common/src/lib/base-api.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User extends BaseDataClass {\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<User> = {}) {\n        super(data);\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.organizer = !!data.organizer;\n        this.visit_expected = data.visit_expected;\n        this.checked_in = data.checked_in;\n        this.response_status = data.response_status || '';\n        const groups = (data.groups || []).map((i) => (i || '').toLowerCase());\n        if ((data as any).sys_admin) groups.push('placeos_admin');\n        if ((data as any).support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email.endsWith(USER_DOMAIN);\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: number;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, any>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || 0;\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    if (window.jest) return;\n    console.log('Loading logged in user details...');\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import {\n    Directive,\n    Input,\n    SimpleChanges,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    ElementRef,\n    Renderer2,\n    EventEmitter,\n    Output,\n} from '@angular/core';\nimport { onlineState, authority, getModule } from '@placeos/ts-client';\n\nimport { BaseClass } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Directive({\n    selector: 'i[bind], [binding], co-bind',\n})\nexport class BindingDirective<T = any>\n    extends BaseClass\n    implements OnInit, OnChanges, OnDestroy {\n    /** ID of the system to bind */\n    @Input() public sys: string;\n    /** Class name of the module to bind */\n    @Input() public mod: string;\n    /** Index of the system to bind */\n    @Input() public index = 1;\n    /** Status variable to bind to */\n    @Input() public bind: string;\n    /** Method to execute */\n    @Input() public exec: string;\n    /** Event to listen for on the parent */\n    @Input('onEvent') public on_event: string;\n    /** ID of the system to bind to */\n    @Input() public params: any[] = [];\n    /** Current value of the binding */\n    @Input() public model: T;\n    /** Emitter for changes to the value of the binding */\n    @Output() public modelChange = new EventEmitter<T>();\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _renderer: Renderer2\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        onlineState()\n            ?.pipe(first((_) => _))\n            .subscribe((_) => this.bindVariable());\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.sys || changes.mod || changes.bind) {\n            this.bindVariable();\n        }\n        if (\n            changes.model &&\n            changes.model.previousValue !== this.model &&\n            this.model != null\n        ) {\n            this.execute();\n        }\n        if (changes.on_event && this.on_event) {\n            this.subscription(\n                'on_event',\n                this._renderer.listen(\n                    this._element.nativeElement,\n                    this.on_event,\n                    () => this.execute()\n                )\n            );\n        }\n    }\n\n    /** Bind to set status variable */\n    private bindVariable() {\n        if (authority() && this.bind && this.sys && this.mod) {\n            const module = getModule(this.sys, this.mod, this.index);\n            const binding = module.binding(this.bind);\n            this.subscription('binding', binding.bind());\n            this.subscription(\n                'on_changes',\n                binding.listen().subscribe((value) =>\n                    setTimeout(() => {\n                        this.model = value;\n                        this.modelChange.emit(this.model);\n                    }, 10)\n                )\n            );\n        }\n    }\n\n    /** Excute the set method on the module */\n    private execute() {\n        if (authority() && this.exec && this.sys && this.mod) {\n            const module = getModule(this.sys, this.mod, this.index);\n            if (this.bind) this.params = [this.model];\n            module.execute(this.exec, this.params).then((result) => {\n                // Emit exec result if not bound to status variable\n                if (!this.bind) {\n                    this.model = result;\n                    this.modelChange.emit(this.model);\n                }\n            });\n        }\n    }\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T) {\n        this.model = value;\n        this.modelChange.emit(this.model);\n        this.execute();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon\n                [icon]=\"{\n                    class: 'material-icons',\n                    content: show ? 'add' : 'more_vert'\n                }\"\n            ></app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                position: absolute;\n                font-size: 1rem;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => {\n            this.show = false;\n        });\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    InjectionToken,\n    Injector,\n    Input,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"center\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container *ngFor=\"let element of features; let i = index\">\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                    >\n                        <ng-container [ngSwitch]=\"featureType(element.content)\">\n                            <ng-container *ngSwitchCase=\"'html'\">\n                                <div [innerHtml]=\"element.content\"></div>\n                            </ng-container>\n                            <ng-container *ngSwitchCase=\"'template'\">\n                                <ng-container\n                                    *ngTemplateOutlet=\"\n                                        element.content;\n                                        context: { data: element.data }\n                                    \"\n                                ></ng-container>\n                            </ng-container>\n                            <ng-container *ngSwitchDefault>\n                                <ng-container\n                                    *ngComponentOutlet=\"\n                                        element.content;\n                                        injector: injectors[i]\n                                    \"\n                                ></ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom: number = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (this.viewer) {\n            if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.injectors = (this.features || []).map((f: any) =>\n                    Injector.create({\n                        providers: [\n                            {\n                                provide: MAP_FEATURE_DATA,\n                                useValue: { ...f.data },\n                            },\n                        ],\n                        parent: this._injector,\n                    })\n                );\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Get the type of the given content */\n    public featureType(content: TemplateRef<any> | Type<any> | string) {\n        if (typeof content === 'string') {\n            return 'html';\n        }\n        if (content instanceof TemplateRef) {\n            return 'template';\n        }\n        return 'component';\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        if (!getViewer(this.viewer) || this.loading) {\n            return this.timeout('update_view', () => this.updateView());\n        }\n        try {\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        updateViewer(this.viewer, {\n            zoom: this.zoom,\n            desired_zoom: this.zoom,\n            center: this.center,\n            desired_center: this.center,\n        });\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement) {\n            this.loading = true;\n            if (this.viewer) {\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n            });\n            this.timeout(\n                'update_view',\n                () => {\n                    this.updateView();\n                    this.updateDisplay();\n                },\n                100\n            );\n            this.loading = false;\n        }\n    }\n}\n","import {\n    Component,\n    Input,\n    EventEmitter,\n    Output,\n    ViewChild,\n    ElementRef,\n    SimpleChanges,\n    OnChanges,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\n@Component({\n    selector: 'a-searchbar',\n    template: `\n        <div\n            class=\"flex items-center h-12 rounded-3xl border border-gray-200 bg-white text-black px-2 w-full shadow\"\n            tabindex=\"0\"\n            (focus)=\"focusField()\"\n            (click)=\"focusField()\"\n        >\n            <app-icon class=\"text-2xl\">search</app-icon>\n            <input\n                #input\n                type=\"text\"\n                class=\"flex-1 w-1/2 outline-none border-none\"\n                [(ngModel)]=\"value\"\n                (ngModelChange)=\"valueChange.emit($event)\"\n                [placeholder]=\"placeholder || 'Search...'\"\n            />\n            <mat-spinner [diameter]=\"32\" *ngIf=\"loading\"></mat-spinner>\n        </div>\n    `,\n    styles: [`\n        :host {\n            width: 768px;\n            max-width: calc(100vw - 2rem);\n        }\n    `],\n})\nexport class SearchbarComponent extends BaseClass implements OnChanges {\n    /** Current contents of the searchbar input */\n    @Input('value') public value: string;\n    /** Current contents of the searchbar input */\n    @Input() public placeholder: string;\n    /** Whether external changes are being processed */\n    @Input() public loading: boolean;\n    /** Whether external changes are being processed */\n    @Input() public autofocus: boolean;\n    /** Emitter for changes to the searchbar value */\n    @Output() public valueChange = new EventEmitter<string>();\n    /** Input field reference */\n    @ViewChild('input', { static: true }) private input_field: ElementRef<\n        HTMLInputElement\n    >;\n    /** if flat is true then remove border radius and box-shadow */\n    @Input() public flat = false;\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.autofocus && this.autofocus) {\n            this.focusField();\n        }\n    }\n\n    public focusField() {\n        if (this.input_field && this.input_field.nativeElement) {\n            this.input_field.nativeElement.focus();\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Injectable,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\n@Injectable()\nexport class CustomTooltipData<T = any> {\n    data: T;\n    close: () => void;\n    constructor(d) {\n        this.data = d.data;\n        this.close = d.close || (() => null);\n    }\n}\n\n@Component({\n    selector: '[customTooltip]',\n    template: `\n        <ng-content></ng-content>\n\n        <ng-template cdk-portal>\n            <div custom-tooltip [ngSwitch]=\"type\">\n                <ng-container *ngSwitchCase=\"'component'\">\n                    <ng-container *ngComponentOutlet=\"content; injector: injector\"></ng-container>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'html'\">\n                    <div [innerHTML]=\"content | sanitize\"></div>\n                </ng-container>\n                <ng-container *ngSwitchCaseDefault>\n                    <ng-container\n                        *ngTemplateOutlet=\"content; context: data\"\n                    ></ng-container>\n                </ng-container>\n            </div>\n        </ng-template>\n    `,\n})\nexport class CustomTooltipComponent<T = any> extends BaseClass implements OnChanges, OnDestroy {\n    /** Horizontal position of the rendered overlay */\n    @Input('xPosition') public x_pos: 'start' | 'center' | 'end';\n    /** Vertical position of the rendered overlay */\n    @Input('yPosition') public y_pos: 'top' | 'center' | 'bottom';\n    /** Content to render in the tooltip */\n    @Input() public content: TemplateRef<any> | Type<any> | string;\n    /** Data associated with the tooltip content */\n    @Input() public data: T;\n    /** Whether tooltip has a backdrop */\n    @Input() public backdrop: boolean = true;\n    /** Type of content to render */\n    public type: 'template' | 'component' | 'html' = 'template';\n\n    public injector: Injector;\n\n    private _overlay_ref: OverlayRef = null;\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('click') public readonly onClick = () => this.open();\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay,\n        private _injector: Injector\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        this._updateInjector();\n        if (\n            this._overlay_ref &&\n            (changes.x_pos || changes.y_pos || changes.content)\n        ) {\n            this.open();\n        }\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public open() {\n        this._updateType();\n        if (this._overlay_ref) this.close();\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            hasBackdrop: !!this.backdrop,\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withPositions([\n                    {\n                        originX: this.x_pos || 'end',\n                        originY: (this.y_pos === 'top' ? 'bottom' : this.y_pos == 'bottom' ? 'top' : this.y_pos) || 'bottom',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'top',\n                    },\n                ]),\n        });\n        this._overlay_ref.attach(this._portal);\n        if (this.backdrop) {\n            this.subscription(\n                'backdrop-click',\n                this._overlay_ref.backdropClick().subscribe((_) => this.close())\n            );\n        }\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    private _updateType() {\n        this.type =\n            typeof this.content === 'string'\n                ? 'html'\n                : this.content instanceof TemplateRef\n                ? 'template'\n                : 'component';\n    }\n\n    private _updateInjector() {\n        this.injector = Injector.create({\n            providers: [\n                {\n                    provide: CustomTooltipData,\n                    useValue: { data: this.data, close: () => this.close() },\n                },\n            ],\n            parent: this._injector,\n        })\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { SearchbarComponent } from './searchbar.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './searchbar.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    SearchbarComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","<div class=\"item\" *ngIf=\"space\">\n    <div class=\"details\">\n        <div class=\"name truncate\">{{ space.name }}</div>\n        <div class=\"info\">{{ space.level?.display_name || space.level?.name }}</div>\n    </div>\n    <div class=\"capacity\" *ngIf=\"space.capacity !== -1\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'account_circle' }\"></app-icon>\n        <div class=\"text\">{{ space.capacity }}</div>\n    </div>\n    <div class=\"actions\">\n        <button mat-icon-button *ngIf=\"multiple; else single_button\" (click)=\"action.emit()\">\n            <app-icon\n                [icon]=\"{\n                    class: 'material-icons',\n                    content: type === 'available' ? 'add' : 'close'\n                }\"\n            ></app-icon>\n        </button>\n    </div>\n</div>\n<ng-template #single_button>\n    <button mat-button [class.request]=\"space.by_request\">\n        {{ space.by_request ? 'Request' : 'Book' }}\n    </button>\n</ng-template>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Space } from '../../space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss']\n})\nexport class SpaceSelectItemComponent implements OnInit {\n    /** Space to display details for */\n    @Input() public space: Space;\n    /** Type of  */\n    @Input() public type: 'available' | 'selected';\n\n    @Input() public multiple: boolean;\n\n    constructor() {}\n\n    public ngOnInit(): void {}\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    public readonly settings: HashMap = {};\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number = (parts.length >= 2\n            ? parts[parts.length - 1]\n            : this.display_name[0]\n        )?.toUpperCase() || '';\n    }\n}\n","import { BaseDataClass, HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRule } from '@placeos/events';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport class Building extends BaseDataClass {\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: HashMap<readonly BookingRule[]>;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number, end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n\n    constructor(raw_data: HashMap = {}) {\n        super(raw_data);\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (raw_data.loan_items || disc_info.loan_items || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers || raw_data.locker_structure || disc_info.locker_structure || {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers = raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes =\n            raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (raw_data.neighbourhoods.hasOwnProperty(lvl)) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (lvl_features.hasOwnProperty(feature)) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone = raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours || disc_info.catering_hours || settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space = raw_data.visitor_space || disc_info.visitor_space || settings.visitor_space || '';\n        this.holding_bay = raw_data.holding_bay || disc_info.holding_bay || settings.holding_bay || '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address = raw_data.address || disc_info.address || settings.address || '';\n        this.orientations = raw_data.orientations || disc_info.orientations || settings.orientations || {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules || disc_info.booking_rules || settings.booking_rules || {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency = raw_data.currency || disc_info.currency || settings.currency || 'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => this._roles.hasOwnProperty(i));\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { BaseDataClass, getItemWithKeys, HashMap } from '@placeos/common';\n\nexport class Organisation extends BaseDataClass {\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** Parent ID for the Organisation */\n    public readonly _parent_id: string;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<Organisation> = {}) {\n        super(raw_data);\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = (raw_data as any).settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","\nexport class Desk {\n    /** ID of the desk also map_id */\n    public readonly id: string;\n    /** Name of the desk */\n    public readonly name: string;\n    /** Whether desk is available / bookable */\n    public readonly bookable: boolean;\n    /** Zone/Level of the desk */\n    public readonly zone: any;\n    /** Group/Department allocated to the desk */\n    public readonly groups: string[];\n\n    constructor(data) {\n        this.id = data.id;\n        this.name = data.name;\n        this.bookable = data.bookable;\n        this.zone = data.zone;\n        this.groups = data.groups || [];\n    }\n\n    public format() {\n        const { id, name, bookable, groups } = this;\n        return {\n            id,\n            name,\n            bookable,\n            groups,\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    onlineState,\n    queryZones,\n    showMetadata,\n    updateMetadata,\n    listChildMetadata,\n    authority,\n    isMock,\n} from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport { Organisation } from './organisation.class';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Desk } from './desk.class';\nimport { HashMap, notifyError, RoomConfiguration, SettingsService } from '@placeos/common';\nimport { Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly buildings_subject = new BehaviorSubject<Building[]>([]);\n    private readonly active_building_subject = new BehaviorSubject<Building>(null);\n    private readonly levels_subject = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this.buildings_subject.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this.levels_subject.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this.active_building_subject.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([this.level_list, this.active_building]).pipe(\n        map((details) => (details[1] ? this.levelsForBuilding(details[1]) : []))\n    );\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings ? this._building_settings[bld_id] || {} : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this.buildings_subject.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this.active_building_subject.getValue();\n    }\n    public set building(bld: Building) {\n        this.active_building_subject.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id || i.email === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this.levels_subject.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [this._settings, this.buildingSettings(bld.id)];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init() {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(), 300);\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org = org_list.find(list => isMock() || list.id === auth?.config?.org_zone) || org_list[0];\n            const bindings = (await showMetadata(org.id, { name: 'bindings' }).toPromise())?.details;\n            this._organisation = new Organisation({ ...org_list[0], bindings } as any);\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = []\n        for (const bld of building_list) {\n            const bindings = (await showMetadata(bld.id, { name: 'bindings' }).toPromise())?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this.buildings_subject.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this.active_building_subject.next(this.buildings.find((bld) => bld.id === id));\n        }\n        if (!this.building && buildings && buildings.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({ tags: 'level', limit: 2500 } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this.levels_subject.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    /** Load metadata for the zone id */\n    public loadMetadata(zone_id: string, query?: HashMap) {\n        return showMetadata(zone_id, query);\n    }\n\n    /** Update Desks for zone */\n    public async updateDesks(zone_id: string, data: any) {\n        return updateMetadata(zone_id, {\n            name: 'desks',\n            description: 'desks',\n            details: data,\n        }).toPromise();\n    }\n\n    /** Load Desks zone */\n    public async loadZoneDesks(zone_id: string): Promise<Desk[]> {\n        const metadata: any = await this.loadMetadata(zone_id, { name: 'desks' }).toPromise();\n        const data = metadata.details;\n        if (!data) {\n            return [];\n        }\n        return data.map(\n            (i) =>\n                new Desk({\n                    ...i,\n                    parent_id: data.parent_id,\n                })\n        );\n    }\n\n    /** Load desks metadata for the parent zone_id */\n    public async loadDesks(zone_id): Promise<any[]> {\n        const levels = await listChildMetadata(zone_id, {\n            tags: 'level',\n            name: 'desks',\n        }).toPromise();\n        const desks = [];\n        levels.forEach((level) => {\n            if (level.metadata?.desks?.details) {\n                (level.metadata.desks.details as any).forEach((desk) => {\n                    desks.push(\n                        new Desk({\n                            ...desk,\n                            zone: level.zone,\n                        })\n                    );\n                });\n            }\n        });\n        return desks;\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(this._service.get('app.name') || 'workplace').toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nexport type ResourceResponseStatus = 'needsAction' | 'declined' | 'tentative' | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string;\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || '';\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n    }\n}\n","import { PlaceSystem } from '@placeos/ts-client';\nimport {\n    startOfDay,\n    differenceInMinutes,\n    isSameDay,\n    add,\n    isBefore,\n    roundToNearestMinutes,\n    addMinutes,\n} from 'date-fns';\n\nimport { HashMap, Identity, unique } from '@placeos/common';\nimport { CateringOrder } from '../../../catering/src/lib/catering-order.class';\nimport { User } from '../../../users/src/lib/user.class';\nimport { Space } from '../../../spaces/src/lib/space.class';\n\nimport { EventNote } from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\nexport interface FileDetails {\n    /** Name of the file */\n    name: string;\n\n    /** Blob contents of the file */\n    blob: Blob;\n}\n\nexport interface ExtDataDetails extends HashMap {\n    /** Setup in minutes */\n    setup?: number;\n    /** Breakdown in minutes */\n    breakdown?: number;\n    /** Whether event is cleaned */\n    cleaned?: boolean;\n    /** Catering */\n    catering?: CateringOrder[];\n    /** Parking */\n    needs_parking?: boolean;\n    /** Configuration */\n    configuration?: any;\n    /** Notes */\n    notes?: EventNote[];\n}\n\nexport interface RecurrenceDetails {\n    /** Start of the recurrence in unix ms */\n    start: number;\n    /** End of the recurrence in unix ms */\n    end: number;\n    /** Days of the week (or month) on which the event should be repeated */\n    days_of_week: number;\n    /** Frequency of the event */\n    pattern: 'daily' | 'weekly' | 'monthly';\n    /** Interval to be used with pattern */\n    interval: number;\n}\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'confirmed' | 'tentative' | 'cancelled' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** URL to a conference call application instance */\n    public readonly meeting_link: string;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: ExtDataDetails;\n    /** System */\n    public readonly system: PlaceSystem;\n    /** Old System id */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: Identity;\n    /** Whether user is allowed to access the lift */\n    public readonly can_access_lift: boolean;\n    /** Whether the host has requested catering for this event */\n    public readonly has_catering: boolean;\n    /** Whether the event has external attendees */\n    public readonly has_visitors: boolean;\n    /** List of catering orders for the event */\n    public readonly catering: CateringOrder[];\n    /** Whether a parking spot is needed for attendees */\n    public readonly needs_parking: boolean;\n    /** Name of the type of external attendees */\n    public readonly visitor_type: string;\n    /** Setup time before event start in minutes */\n    public readonly setup: number;\n    /** Breakdown/Cleanup time after event start in minutes */\n    public readonly breakdown: number;\n    /** List of attendees that are attending remotely */\n    public readonly remote: readonly string[];\n    /** List of email addresses associated with the event attendees */\n    public readonly attendee_emails: readonly string[];\n    /** List of external attendees associated with the event */\n    public readonly guests: readonly Identity[];\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** List of notes associated with the event */\n    public readonly notes: readonly EventNote[];\n    /** First space in the resources list */\n    public readonly space: Identity;\n    /** Whether the time of the booking has been changed */\n    public time_changed: boolean;\n    /** Master event */\n    public master?: CalendarEvent;\n\n    constructor(data: Partial<CalendarEvent> = {}) {\n        this.id = data.id || '';\n        this.calendar = data.calendar || '';\n        this.creator = (data.creator || _default_user.email)?.toLowerCase();\n        this.host = (data.host || this.creator || '').toLowerCase();\n        const attendees = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            data.resources ||\n            attendees\n                .filter((user: any) => user.resource)\n                .map((s) => new Space(s as any));\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        const time = data.event_start * 1000 || data.date;\n        const start = time\n            ? new Date(time)\n            : roundToNearestMinutes(\n                  new Date().setMinutes(new Date().getMinutes() + 3),\n                  {\n                      nearestTo: 5,\n                  }\n              );\n        this.date = this.all_day\n            ? startOfDay(start).valueOf()\n            : start.valueOf();\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(new Date(data.event_end * 1000), start) ||\n              30;\n        this.timezone = data.timezone;\n        this.location = data.location || '';\n        this.recurring = data.recurring;\n        this.recurring_master_id = data.recurring_master_id;\n        this.meeting_link = data.meeting_link || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    start.valueOf() ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        this.system = data.system;\n        if (this.system?.email) {\n            this.resources.push(new Space(this.system as any));\n        }\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.extension_data.catering = (\n            data.catering ||\n            this.extension_data.catering ||\n            []\n        ).map((i) => new CateringOrder({ ...i, event: this }));\n        this.extension_data.needs_parking = !!data.needs_parking;\n        this.extension_data.remote =\n            data.remote || this.extension_data.remote || [];\n        this.extension_data.visitor_type =\n            data.visitor_type || this.extension_data.visitor_type || '';\n        this.can_access_lift =\n            data.can_access_lift ||\n            this.extension_data.can_access_lift ||\n            false;\n        this.resources = unique(this.resources, 'email');\n        this.status = eventStatus(this) || 'none';\n        /** Simplified extension properties */\n        this.has_visitors = !!this.attendees.find(\n            (user) => user.visit_expected || user.is_external\n        );\n        this.has_catering =\n            this.extension_data.catering &&\n            !!this.extension_data.catering.length;\n        this.catering = this.extension_data.catering || [];\n        this.remote = this.extension_data.remote || [];\n        this.needs_parking = !!this.extension_data.needs_parking;\n        this.setup = this.extension_data.setup || 0;\n        this.breakdown = this.extension_data.breakdown || 0;\n        this.visitor_type = this.extension_data.visitor_type || '';\n        this.type =\n            this.status === 'cancelled'\n                ? 'cancelled'\n                : this.has_visitors\n                ? 'external'\n                : 'internal';\n        this.attendee_emails = this.attendees.map((u) => u.email);\n        this.guests = this.attendees.filter((f) => !!f.visit_expected) as any;\n        this.notes = this.extension_data.notes || [];\n        this.space = this.resources[0] || null;\n    }\n\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /** Cleaning status */\n    public get cleaning_status(): 'pending' | 'done' | '' {\n        return this.extension_data.cleaned ? 'done' : '';\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = Math.floor(\n            addMinutes(new Date(this.date), this.duration).valueOf() /\n                1000\n        );\n        obj.event_start = Math.floor(this.date / 1000);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: Math.floor(\n                    new Date(this.recurrence.end).valueOf() / 1000\n                ),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = new Date(this.date);\n        if (isBefore(now, add(date, { minutes: -15 }))) {\n            return 'future';\n        } else if (isBefore(now, date)) {\n            return 'upcoming';\n        } else if (isBefore(now, add(date, { minutes: 15 }))) {\n            return 'started';\n        } else if (isBefore(now, add(date, { minutes: this.duration }))) {\n            return 'in_progress';\n        }\n        return 'done';\n    }\n\n    public get event_start(): number {\n        return Math.floor(new Date(this.date).valueOf() / 1000);\n    }\n\n    public get event_end(): number {\n        return Math.floor(\n            addMinutes(new Date(this.date), this.duration).valueOf() / 1000\n        );\n    }\n\n    public get can_check_in(): boolean {\n        return isSameDay(new Date(), new Date(this.date));\n    }\n}\n","import { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport {\n    add,\n    isBefore,\n    isAfter,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { SpaceRuleOptions, SpaceRules, SpaceCheckOptions } from './event.interfaces';\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.extension_data.visitor_type),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(event.needs_parking || false),\n        system: new FormControl(event.system),\n    });\n    form.controls.duration.setValidators([endInFuture(form)]);\n    form.controls.organiser.valueChanges.subscribe((o) => {\n        form.controls.host.setValue(o?.email);\n    });\n    if (event.id) {\n        form.controls.host.disable();\n        form.controls.organiser.disable();\n    }\n    if (event.state === 'started') {\n        form.controls.date.disable();\n    }\n    return form;\n}\n\nexport const endInFuture = (form: FormGroup) => (control: AbstractControl) => {\n    if (\n        form.controls.date &&\n        isAfter(\n            new Date(),\n            new Date(form.controls.date.value + control.value * 60 * 1000)\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Array is not empty */\nexport function isNotEmpty(control: AbstractControl): { [key: string]: boolean } | null {\n    if (Array.isArray(control.value) && !control.value.length) {\n        return { isNotEmpty: true };\n    }\n    return null;\n}\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(control: AbstractControl): { [key: string]: boolean } | null {\n    if (control.value !== undefined && isBefore(new Date(control.value), new Date())) {\n        return { isFuture: true };\n    }\n    return null;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get booking rules for the given user and space\n * @param user User to determine applicable rules\n * @param space Space to get rules for\n * @param time Booking start time in ms since UTC epoch\n * @param rules List of booking rules for the building\n */\nexport function rulesForSpace(options: SpaceRuleOptions): SpaceRules {\n    if (!options) {\n        throw Error('Options are needed to check for rule matches');\n    }\n    const space_rules_for_user: SpaceRules = {\n        auto_approve: true,\n        hide: true,\n    };\n    /* istanbul ignore else */\n    if (options.space) {\n        for (const type of Object.keys(options.rules)) {\n            if (\n                options.rules.hasOwnProperty(type) &&\n                options.rules[type] instanceof Array &&\n                options.space.zones.find((zone) => zone === type)\n            ) {\n                for (const rule_block of options.rules[type]) {\n                    /* istanbul ignore else */\n                    if (\n                        checkRules({\n                            user: options.user,\n                            space: options.space,\n                            time: options.time,\n                            recurr_end: options.recurr_end,\n                            duration: options.duration,\n                            rules: rule_block.conditions,\n                        })\n                    ) {\n                        const ruleset = rule_block.rules;\n                        const conditions = rule_block.conditions;\n                        space_rules_for_user.hide = false;\n                        /* istanbul ignore else */\n                        if (conditions.max_length) {\n                            space_rules_for_user.max_length = stringToMinutes(\n                                conditions.max_length as string\n                            );\n                        }\n                        /* istanbul ignore else */\n                        if (conditions.min_length) {\n                            space_rules_for_user.min_length = stringToMinutes(\n                                conditions.min_length as string\n                            );\n                        }\n                        // NOTE: use max_length in conditions instead of book_length in rules\n                        // if (ruleset.book_length) {\n                        //     space_rules_for_user.max_length = stringToMinutes(ruleset.book_length as string);\n                        // }\n                        /* istanbul ignore else */\n                        if (ruleset.auto_approve !== undefined) {\n                            space_rules_for_user.auto_approve = ruleset.auto_approve;\n                        }\n                        break;\n                    }\n                }\n            }\n            /* istanbul ignore else */\n            if (!space_rules_for_user.hide) {\n                break;\n            }\n        }\n    }\n    return space_rules_for_user;\n}\n\n/**\n * Check if user matches the given ruleset\n * @param user User to determine applicable rules\n * @param space Space to get rules for\n * @param time Booking start time in ms since UTC epoch\n * @param rules List of booking rules for the building\n */\nfunction checkRules(options: SpaceCheckOptions): boolean {\n    /* istanbul ignore else */\n    if (options.rules) {\n        const time = new Date(options.time);\n        const recurr = options.recurr_end ? new Date(options.recurr_end) : new Date();\n        const count = Object.keys(options.rules).length;\n        let matches = 0;\n        for (const key of Object.keys(options.rules)) {\n            let counter = 0;\n            const condition: string[] =\n                options.rules[key] instanceof Array\n                    ? (options.rules[key] as [])\n                    : [options.rules[key] as string];\n            switch (key) {\n                // case 'groups':\n                //     /* istanbul ignore else */\n                //     if (options.user && options.user.groups) {\n                //         counter = 0;\n                //         condition.forEach((i) =>\n                //             options.user.groups.find((j) => j === i) ? counter++ : null\n                //         );\n                //         /* istanbul ignore else */\n                //         if (counter > 0) {\n                //             matches++;\n                //         }\n                //     }\n                //     break;\n                // case 'locations':\n                //     /* istanbul ignore else */\n                //     if (options.user && options.user.location) {\n                //         counter = 0;\n                //         condition.forEach((i) =>\n                //             (options.user.last_location.name || '').indexOf(i) >= 0\n                //                 ? counter++\n                //                 : null\n                //         );\n                //         /* istanbul ignore else */\n                //         if (counter >= options.rules[key].length) {\n                //             matches++;\n                //         }\n                //     }\n                //     break;\n                case 'is_before':\n                    /* istanbul ignore else */\n                    if (options.time) {\n                        const duration = stringToMinutes(condition[0]);\n                        const check = add(new Date(), { minutes: duration });\n                        let match = isBefore(time, check);\n                        /* istanbul ignore else */\n                        if (recurr) {\n                            match = match && isBefore(recurr, check);\n                        }\n                        matches += match ? 1 : 0;\n                    }\n                    break;\n                case 'is_after':\n                    /* istanbul ignore else */\n                    if (options.time) {\n                        const duration = stringToMinutes(condition[0]);\n                        const check = add(new Date(), { minutes: duration });\n                        if (isAfter(time, check)) {\n                            matches++;\n                        }\n                    }\n                    break;\n                case 'min_length':\n                    /* istanbul ignore else */\n                    if (\n                        options.duration &&\n                        durationGreaterThanOrEqual(options.duration, condition[0])\n                    ) {\n                        matches++;\n                    }\n                    break;\n                case 'max_length':\n                    /* istanbul ignore else */\n                    if (\n                        options.duration &&\n                        durationGreaterThanOrEqual(condition[0], options.duration)\n                    ) {\n                        matches++;\n                    }\n                    break;\n            }\n        }\n        return matches >= count;\n    }\n    return false;\n}\n\n/**\n * Whether the first input is greater than the last. Converts duration strings into minutes\n * @param duration_1 First input can be a number in minutes or a duration string e.g. `1 hour`\n * @param duration_2 Second input can be a number in minutes or a duration string e.g. `30 minutes`\n */\nexport function durationGreaterThanOrEqual(\n    duration_1: string | number,\n    duration_2: string | number\n) {\n    const first: number = typeof duration_1 === 'string' ? stringToMinutes(duration_1) : duration_1;\n    const second: number =\n        typeof duration_2 === 'string' ? stringToMinutes(duration_2) : duration_2;\n    return first >= second;\n}\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = str.split(' ');\n    return +parts[0] * DURATION_MAP[parts[1]];\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const free_slots = getFreeBookingSlots(bookings);\n    const now = new Date(date);\n    const next_free_slot = free_slots.find((slot) => {\n        const start = new Date(slot.start);\n        const end = new Date(slot.end);\n        return isAfter(start, now) || timePeriodsIntersect(date, date, slot.start, slot.end);\n    });\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free ? differenceInMinutes(end, now) : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\nexport interface IBookingSlot {\n    start: number;\n    end: number;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeBookingSlots(list: CalendarEvent[], min_size: number = 30): IBookingSlot[] {\n    /* istanbul ignore else */\n    if (!list) {\n        return [\n            {\n                start: 0,\n                end: startOfMinute(new Date()).getTime() * 10,\n            },\n        ];\n    }\n    const slots: IBookingSlot[] = [];\n    let start = new Date(0);\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = add(bkn_start, { minutes: booking.duration });\n        if (isAfter(bkn_start, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            /* istanbul ignore else */\n            if (diff >= min_size) {\n                slots.push({ start: start.valueOf(), end: bkn_start.valueOf() });\n            }\n            start = bkn_end;\n        } else if (startOfMinute(start).getTime() === startOfMinute(bkn_start).getTime()) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.getTime(),\n        end: startOfMinute(new Date()).getTime() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeBookingSlot(\n    list: CalendarEvent[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): IBookingSlot {\n    const slots = getFreeBookingSlots(list, min_size);\n    const time = add(startOfMinute(new Date(date)), { seconds: 1 });\n    for (const block of slots) {\n        const start = startOfMinute(new Date(block.start));\n        const end = startOfMinute(new Date(block.end));\n        if (isAfter(start, time)) {\n            return block;\n        } else if (isBefore(time, end)) {\n            const duration = differenceInMinutes(end, time);\n            /* istanbul ignore else */\n            if (duration >= min_size) {\n                return block;\n            }\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find((space) => space.email === filter_options.space) ||\n            !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import { FormGroup } from '@angular/forms';\nimport { formatDuration } from 'date-fns';\n\nimport { BookingRule, SpaceCheckOptions, SpaceRules, SpaceRuleOptions } from './booking.interfaces';\n\nimport { CateringItem } from '../../../catering/src/lib/catering-item.class';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { User } from '../../../users/src/lib/user.class';\nimport { generateMockUser } from '../../../users/src/lib/user.utilities';\nimport { CalendarEvent, getFreeBookingSlots } from '@placeos/events';\nimport { Space } from '../../../spaces/src/lib/space.class';\n\nimport * as dayjs from 'dayjs';\nimport * as customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs.extend(customParseFormat);\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nlet BOOKING_COUNT = 0;\nlet BOOKING_DATE = dayjs().hour(6).minute(0).subtract(1, 'd').startOf('m');\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = dayjs(time).startOf('m');\n}\n\nconst randomQuarterHours = () => predictableRandomInt(5, 2) * 15;\n\n/**\n * Create mock raw API data for a booking\n * @param override Overrides the properties of the generated booking with it's own\n */\nexport function generateMockBooking(override: HashMap = {}, resetDate = false) {\n    const id = `booking-${BOOKING_COUNT++}`;\n    if (!!resetDate) {\n        BOOKING_DATE = dayjs().hour(6).minute(0).startOf('m');\n    }\n    BOOKING_DATE = BOOKING_DATE.add(randomQuarterHours(), 'm');\n    const start = BOOKING_DATE.valueOf();\n    const duration = randomQuarterHours();\n    const cateringItem = new CateringItem({\n        id: 'Cappucino',\n        quantity: 5,\n    });\n    return {\n        id,\n        icaluid: predictableRandomInt(99_999_999),\n        title: `A Meeting ${predictableRandomInt(99)}`,\n        attendees: Array(predictableRandomInt(5) + 2)\n            .fill(0)\n            .map((i) => generateMockUser()),\n        organiser: generateMockUser(),\n        start_epoch: dayjs(start).unix(),\n        end_epoch: dayjs(start).add(duration, 'm').unix(),\n        date: start,\n        duration,\n        description: `A Description`,\n        notes: [{ type: 'other', message: `Some notes` }],\n        location: `Your City`,\n        catering: predictableRandomInt(34567) % 3 === 0,\n        extension_data: {\n            catering_order: [cateringItem],\n            catering_notes:\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Dui faucibus in ornare quam viverra orci. Metus dictum at tempor commodo ullamcorper a lacus.',\n        },\n        link: predictableRandomInt(10) > 5 ? 'https://browser.zoom.fake/j/12' : '',\n        room_ids: [],\n        ...override,\n    };\n}\n\nconst STORED_BOOKING_KEY = 'STAFF.booking_form';\nexport function storeBookingFormData(form: FormGroup) {\n    if (localStorage) {\n        const data = form ? form.value : {};\n        if (form && form.controls && form.controls.extension_data) {\n            data.extension_data = form.controls.extension_data.value;\n        }\n        localStorage.setItem(STORED_BOOKING_KEY, JSON.stringify(data));\n    }\n}\n\nexport function retrieveBookingFormData(): any {\n    let formData = {};\n    if (localStorage) {\n        const form_string = localStorage.getItem(STORED_BOOKING_KEY);\n        if (form_string) {\n            try {\n                formData = JSON.parse(form_string);\n            } catch (e) {}\n        }\n    }\n    return formData;\n}\n\nexport function clearBookingFormData() {\n    if (localStorage && !!retrieveBookingFormData()) {\n        localStorage.removeItem(STORED_BOOKING_KEY);\n    }\n}\n\nconst STORED_DESK_BOOKING_KEY = 'STAFF.desk_form';\nexport function storeDeskBookingFormData(form: FormGroup) {\n    if (localStorage) {\n        const data = form ? form.value : {};\n        if (form && form.controls && form.controls.extension_data) {\n            data.extension_data = form.controls.extension_data.value;\n        }\n        localStorage.setItem(STORED_DESK_BOOKING_KEY, JSON.stringify(data));\n    }\n}\n\nexport function retrieveDeskBookingFormData(): any {\n    let formData = {};\n    if (localStorage) {\n        const form_string = localStorage.getItem(STORED_DESK_BOOKING_KEY);\n        if (form_string) {\n            try {\n                formData = JSON.parse(form_string);\n            } catch (e) {}\n        }\n    }\n    return formData;\n}\n\nexport function clearDeskBookingFormData() {\n    if (localStorage && !!retrieveDeskBookingFormData()) {\n        localStorage.removeItem(STORED_DESK_BOOKING_KEY);\n    }\n}\n\n/** Filter spaces based on booking rules */\nexport function filterSpacesRules(\n    list: Space[] = [],\n    building_settings: HashMap<HashMap>,\n    host: User,\n    options: {\n        date: number;\n        duration: number;\n        all_day?: boolean;\n        visitor_type?: string;\n    }\n): Space[] {\n    return list.filter((space) => {\n        const booking_rules = building_settings[space.level.parent_id].details?.booking_rules;\n        const { date, all_day, duration, visitor_type } = options;\n        const rules = rulesForSpace({\n            space,\n            time: date,\n            duration: all_day ? 24 * 60 : duration,\n            visitor_type,\n            user: host,\n            rules: booking_rules,\n        });\n        if (visitor_type) {\n            return !rules.hide && rules.room_type === visitor_type;\n        } else {\n            return !rules.hide;\n        }\n    });\n}\n\n/**\n * Get booking rules for the given user and space\n * @param user User to determine applicable rules\n * @param space Space to get rules for\n * @param time Booking start time in ms since UTC epoch\n * @param rules List of booking rules for the building\n */\nexport function rulesForSpace(options: SpaceRuleOptions): SpaceRules {\n    if (!options) {\n        throw Error('Options are needed to check for rule matches');\n    }\n    const space_rules_for_user: SpaceRules = {\n        auto_approve: true,\n        hide: false,\n    };\n    if (options.space) {\n        for (const type of Object.keys(options.rules || {})) {\n            if (\n                options.rules.hasOwnProperty(type) &&\n                options.rules[type] instanceof Array &&\n                (options.space.zones || []).find((i) => i === type)\n            ) {\n                space_rules_for_user.hide = true;\n                for (const rule_block of options.rules[type]) {\n                    if (\n                        checkRules({\n                            user: options.user,\n                            space: options.space,\n                            time: options.time,\n                            visitor_type: options.visitor_type,\n                            duration: options.duration,\n                            rules: rule_block.conditions,\n                        })\n                    ) {\n                        const ruleset = rule_block.rules;\n                        const conditions = rule_block.conditions;\n                        space_rules_for_user.hide = false;\n                        if (conditions.max_length) {\n                            space_rules_for_user.max_length = stringToMinutes(\n                                conditions.max_length as string\n                            );\n                        }\n                        if (conditions.min_length) {\n                            space_rules_for_user.min_length = stringToMinutes(\n                                conditions.min_length as string\n                            );\n                        }\n                        // NOTE: use max_length in conditions instead of book_length in rules\n                        // if (ruleset.book_length) {\n                        //     space_rules_for_user.max_length = stringToMinutes(ruleset.book_length as string);\n                        // }\n                        if (ruleset.auto_approve !== undefined) {\n                            space_rules_for_user.auto_approve = ruleset.auto_approve;\n                        }\n                        if (ruleset.room_type !== undefined) {\n                            space_rules_for_user.room_type = ruleset.room_type;\n                        }\n                        break;\n                    }\n                }\n                if (!space_rules_for_user.hide) {\n                    break;\n                }\n            }\n        }\n    }\n    return space_rules_for_user;\n}\n\n/**\n * Check if user matches the given ruleset\n * @param user User to determine applicable rules\n * @param space Space to get rules for\n * @param time Booking start time in ms since UTC epoch\n * @param rules List of booking rules for the building\n */\nfunction checkRules(options: SpaceCheckOptions): boolean {\n    if (options.rules) {\n        const time = dayjs(options.time);\n        const count = Object.keys(options.rules).length;\n        let matches = 0;\n        for (const key of Object.keys(options.rules)) {\n            let counter = 0;\n            const condition: string[] =\n                options.rules[key] instanceof Array\n                    ? (options.rules[key] as [])\n                    : [options.rules[key] as string];\n            switch (key) {\n                case 'group':\n                case 'groups':\n                    if (options.user && options.user.groups) {\n                        counter = 0;\n                        condition.forEach((i) =>\n                            options.user.groups.find((j) => j === i) ? counter++ : null\n                        );\n                        if (counter > 0) {\n                            matches++;\n                        }\n                    }\n                    break;\n                case 'location':\n                case 'locations':\n                    // if (options.user && options.user.location) {\n                    //     counter = 0;\n                    //     condition.forEach(i =>\n                    //         (options.user.last_location.name || '').indexOf(i) >= 0\n                    //             ? counter++\n                    //             : null\n                    //     );\n                    //     if (counter >= options.rules[key].length) {\n                    //         matches++;\n                    //     }\n                    // }\n                    break;\n                case 'is_before':\n                    if (options.time) {\n                        const duration = stringToMinutes(condition[0]);\n                        const check = dayjs().add(duration, 'm');\n                        let match = time.isBefore(check, 'm');\n                        matches += match ? 1 : 0;\n                    }\n                    break;\n                case 'is_after':\n                    if (options.time) {\n                        const [amount, unit] = condition[0].split(' ');\n                        const check = dayjs().add(+amount, unit as dayjs.OpUnitType);\n                        time.isAfter(check, unit as dayjs.OpUnitType) ? matches++ : '';\n                    }\n                    break;\n                case 'from_time':\n                    const after_time = dayjs(condition[0], 'HH:mm');\n                    if (dayjs().isAfter(after_time, 'm')) {\n                        matches++;\n                    }\n                    break;\n                case 'min_length':\n                    if (options.duration) {\n                        durationGreaterThanOrEqual(options.duration, condition[0]) ? matches++ : '';\n                    }\n                    break;\n                case 'max_length':\n                    if (options.duration) {\n                        durationGreaterThanOrEqual(condition[0], options.duration) ? matches++ : '';\n                    }\n                    break;\n                case 'visitor_types':\n                    if (options.visitor_type) {\n                        counter = 0;\n                        condition.forEach((i) => (i === options.visitor_type ? counter++ : null));\n                        if (counter > 0) {\n                            matches++;\n                        }\n                    }\n                    break;\n            }\n        }\n        return matches >= count;\n    }\n    return false;\n}\n\n/**\n * Get minimum duration from ruleset in minutes\n * Default to 5min\n */\nexport function getMinLength(rule_list: any): number {\n    return Object.values(rule_list).reduce((min, block: BookingRule[]) => {\n        const min_block = block.reduce((min_length, el) => {\n            if (el.conditions.min_length && stringToMinutes(el.conditions.min_length) > min) {\n                return stringToMinutes(el.conditions.min_length);\n            } else {\n                return min_length;\n            }\n        }, 5);\n        if (min_block > min) {\n            return min_block;\n        } else {\n            return min;\n        }\n    }, 5) as number;\n}\n\n/**\n * Whether the first input is greater than the last. Converts duration strings into minutes\n * @param duration_1 First input can be a number in minutes or a duration string e.g. `1 hour`\n * @param duration_2 Second input can be a number in minutes or a duration string e.g. `30 minutes`\n */\nexport function durationGreaterThanOrEqual(\n    duration_1: string | number,\n    duration_2: string | number\n) {\n    const first: number = typeof duration_1 === 'string' ? stringToMinutes(duration_1) : duration_1;\n    const second: number =\n        typeof duration_2 === 'string' ? stringToMinutes(duration_2) : duration_2;\n    return first >= second;\n}\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = str.split(' ');\n    return +parts[0] * DURATION_MAP[parts[1]];\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = dayjs().valueOf()\n) {\n    const free_slots = getFreeBookingSlots(bookings);\n    const now = dayjs(date);\n    const next_free_slot = free_slots.find((slot) => {\n        const start = dayjs(slot.start);\n        const end = dayjs(slot.end);\n        return start.isAfter(now) || (now.isAfter(start, 's') && now.isBefore(end, 'm'));\n    });\n    const start = dayjs(next_free_slot.start);\n    const end = dayjs(next_free_slot.end);\n    const currently_free = now.isAfter(start, 's') && now.isBefore(end, 'm');\n    const time_until_next_block = formatDuration({\n        minutes: currently_free ? end.diff(now, 'm') : start.diff(now, 'm'),\n    });\n    const free_tomorrow = !currently_free && !start.isSame(now, 'd');\n    const free_today = currently_free && !end.isSame(now, 'd');\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${end.format('h:mma')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${start.format('h:mma')}(${time_until_next_block})`,\n    };\n}\n","\nimport { differenceInMinutes } from 'date-fns';\n\nimport { BaseDataClass } from '@placeos/common';\nimport { Space } from '../../../spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar extends BaseDataClass {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Can edit */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Calendar> = {}) {\n        super(data);\n        this.primary = data.primary;\n        this.summary = data.summary;\n        this.can_edit = data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map((i: any) => {\n            return {\n                date: new Date(i.starts_at.dateTime).valueOf(),\n                duration: differenceInMinutes(\n                    new Date(i.ends_at.dateTime),\n                    new Date(i.starts_at.dateTime)\n                ),\n                status: i.status,\n            };\n        });\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\n\nimport { Calendar } from './calendar.class';\nimport { Space } from '../../../spaces/src/lib/space.class';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(i as any)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c as any))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c as any))), calendarsToSpaces(org));\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { BaseClass, notifyError } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\nimport * as dayjs from 'dayjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends BaseClass {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = this._calendars.asObservable();\n\n    public readonly query = () => queryCalendars();\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(private _org: OrganisationService) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        await this.load().catch((err) => {\n            notifyError('Error loading calendars data');\n        });\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return this.freeBusy({\n            period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n            period_end: Math.floor(startOfDay(date).valueOf() / 1000),\n            calendars,\n        });\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await this.availability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = dayjs(old_booking?.date).valueOf();\n        const end = dayjs(start).add(old_booking?.duration, 'm').valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        dayjs(block.date).add(block.duration, 'm').valueOf() <=\n                            end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return available ? true : false;\n    }\n\n    public async load(): Promise<void> {\n        this._calendars.next(await queryCalendars().toPromise());\n    }\n}\n","<header>\n    <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'place' }\"></app-icon>\n    <div class=\"title\">Select space{{ multiple ? 's' : '' }}</div>\n    <div class=\"flex-1 w-0\"></div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon>close</app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"heading\">\n        <mat-form-field appearance=\"outline\" *ngIf=\"buildings && buildings.length > 1\">\n            <mat-select\n                name=\"booking-type\"\n                [(value)]=\"building\"\n                (selectionChange)=\"loadAvailableSpaces()\"\n                placeholder=\"Select building\"\n            >\n                <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                    {{ bld.display_name || bld.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\" *ngIf=\"space_types && space_types.length > 1\">\n            <mat-select\n                name=\"booking-type\"\n                [(ngModel)]=\"type\"\n                (ngModelChange)=\"loadAvailableSpaces()\"\n                placeholder=\"Any space type\"\n            >\n                <mat-option *ngFor=\"let type of space_types\" [value]=\"type.id\">\n                    {{ type.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"body\" style=\"width: 32rem\">\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"filtered_spaces?.length; else empty_state\">\n                <ng-container *ngFor=\"let space of filtered_spaces\">\n                    <a-space-select-item\n                        *ngIf=\"!space_map[space.id]\"\n                        [space]=\"space\"\n                        [multiple]=\"multiple\"\n                        type=\"available\"\n                        (click)=\"spaceSelected(space)\"\n                    ></a-space-select-item>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n        <div class=\"space-list\" *ngIf=\"multiple\" [class.show]=\"show_selected\">\n            <ng-container *ngIf=\"spaces && spaces.length; else empty_state\">\n                <a-space-select-item\n                    *ngFor=\"let space of spaces\"\n                    [space]=\"space\"\n                    [multiple]=\"multiple\"\n                    type=\"selected\"\n                ></a-space-select-item>\n            </ng-container>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"multiple\">\n    <footer>\n        <button mat-button color=\"primary\" (click)=\"save()\">\n            Save selected spaces({{ spaces.length || '0' }})\n        </button>\n    </footer>\n</mat-dialog-actions>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n        </div>\n        <div class=\"text\">No spaces</div>\n    </div>\n</ng-template>\n<ng-template #load_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\">Finding available spaces...</div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseClass, currentUser, DialogEvent, HashMap, Identity, notifyError, SettingsService } from '@placeos/common'\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '../../../../calendar/src/lib/calendar.service';\nimport { filterSpacesRules } from '../../../../bookings/src/lib/booking.utilities';\nimport { Space } from '../space.class';\n\nimport * as dayjs from 'dayjs';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    templateUrl: './space-select-modal.component.html',\n    styleUrls: ['./space-select-modal.component.scss'],\n})\nexport class SpaceSelectModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [];\n    /** List of available spaces */\n    public available_spaces: Space[] = [];\n    /** List of filtered spaces */\n    public filtered_spaces: Space[] = [];\n    /** Building to filter available spaces */\n    public building: Building;\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _calendar: CalendarService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.building = this._org.building || this.buildings[0];\n        this.spaces = this._data.spaces && this._data.spaces.length ? [...this._data.spaces] : [];\n        this.loadAvailableSpaces();\n    }\n\n    public async loadAvailableSpaces() {\n        this.loading = true;\n        const date = dayjs(this._data.date);\n        this.available_spaces = await this._calendar\n            .freeBusy({\n                zone_ids: this.building.id,\n                period_start: date.unix(),\n                period_end: date.add(this._data.duration, 'm').unix(),\n            })\n            .toPromise()\n            .catch((err) => {\n                notifyError(`Error finding available spaces: ${err.message || err}`);\n                return [];\n            });\n        this.filtered_spaces = this.filterSpaces(this.available_spaces);\n        this.loading = false;\n    }\n\n    /** Check booking rules and filter spaces */\n    public filterSpaces(list: Space[]): Space[] {\n        const settings = this._org.building_settings;\n        const res = filterSpacesRules(list, settings, currentUser(), { ...this._data });\n        return res;\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-modal/item/item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal/space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatDialogModule,\n        ComponentsModule\n    ],\n    providers: [],\n    exports: [...COMPONENTS]\n})\nexport class SharedSpacesModule {}\n","import { HashMap } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = Math.floor(Math.random() * 99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: Math.floor(Math.random() * 20 + 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: Math.floor(Math.random() * 99999) % 2 === 0,\n        controlable: Math.floor(Math.random() * 99999) % 2 === 0,\n        bookable: Math.floor(Math.random() * 99999) % 2 === 0,\n        cost_hour: Math.floor(Math.random() * 300) * 100,\n        setup: Math.floor(Math.random() * 6) * 5,\n        breakdown: Math.floor(Math.random() * 6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked ? [`space-${Math.floor(Math.random() * (SPACE_COUNT - 1))}`] : [],\n        image: '',\n        ...overrides\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(config =>\n            config.capacity = Math.floor(Math.random() * space.capacity) + 1\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Space } from './space.class';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) => space.zones.includes(this._org.building.id);\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised.pipe(first((_) => _)).subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list.getValue().find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) => new Space({ ...(sys as any), level: this._org.levelWithID([...sys.zones]) })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { Space, SpacesService } from '@placeos/spaces';\n\n@Component({\n    selector: '[app-bootstrap]',\n    template: `\n        <div\n            class=\"rounded shadow m-4 bg-white overflow-hidden mx-auto text-center flex flex-col items-center\"\n        >\n            <h2 class=\"bg-secondary text-white py-2 px-4 m-0 w-full text-2xl\">Control Interface Setup</h2>\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <p class=\"description my-3\">Input the PlaceOS <em>System ID</em> to bootstrap</p>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>System ID</mat-label>\n                    <input\n                        matInput\n                        [(ngModel)]=\"system_id\"\n                        [matAutocomplete]=\"auto\"\n                        placeholder=\"System ID\"\n                        (ngModelChange)=\"filter($event)\"\n                    />\n                </mat-form-field>\n                <mat-autocomplete #auto=\"matAutocomplete\">\n                    <mat-option *ngFor=\"let option of filtered_list\" [value]=\"option.id\">\n                        <div class=\"leading-tight\">\n                            <div class=\"name\">{{ option.name }}</div>\n                            <div class=\"text-xs text-dark-fade\">{{ option.id }}</div>\n                        </div>\n                    </mat-option>\n                </mat-autocomplete>\n                <button mat-button [disabled]=\"!system_id\" (click)=\"bootstrap()\">Submit</button>\n            </ng-container>\n        </div>\n        <ng-template #load_state>\n            <div class=\"my-16 flex flex-col items-center\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <div class=\"m-4\">Loading system data...</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: #f0f0f0;\n                background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='hexagons' fill='%23ddd' fill-opacity='1' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n            }\n\n            :host > div {\n                width: 26rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            mat-form-field {\n                width: calc(100% - 2rem);\n            }\n\n            button {\n                width: 8rem;\n                margin: 0.5rem;\n                margin-top: 0;\n            }\n        `,\n    ],\n})\nexport class BootstrapComponent extends BaseClass implements OnInit {\n    /** List of available systems */\n    public system_list: Space[] = [];\n    /** List of available systems */\n    public filtered_list: Space[] = [];\n    /** Whether application data is loading */\n    public loading: boolean;\n    /** ID of the system to bootstrap */\n    public system_id: string = '';\n    /** Selected system to bootstrap */\n    public selected_system: Space = null;\n    /** Whether input field is focused */\n    public input_focus: boolean;\n\n    constructor(\n        private _spaces: SpacesService,\n        private route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        this.system_list = this._spaces.space_list || [];\n        this.filter('');\n        this.loading = false;\n        this.subscription(\n            'route.query',\n            this.route.queryParamMap.subscribe((params) => {\n                if (params.has('clear') && params.get('clear')) {\n                    this.clearBootstrap();\n                } else if (params.has('system_id') || params.has('sys_id')) {\n                    this.system_id = params.get('system_id') || params.get('sys_id');\n                    this.bootstrap();\n                }\n            })\n        );\n\n        this.checkBootstrapped();\n    }\n\n    /**\n     * Setup the default system for the application to bind to\n     */\n    public readonly bootstrap = () => this.configure(this.system_id);\n\n    /**\n     * Check if the application has previously been bootstrapped\n     */\n    private checkBootstrapped(): void {\n        this.loading = true;\n        if (localStorage) {\n            const system_id = localStorage.getItem('PLACEOS.CONTROL.system');\n            if (system_id) {\n                this._router.navigate(['panel', system_id]);\n                return;\n            }\n        }\n        this.loading = false;\n    }\n\n    /**\n     * Save the bootstrapped ID and redirect to the panel for that ID\n     * @param system_id System to bootstrap\n     */\n    private configure(system_id: string): void {\n        this.loading = true;\n        if (localStorage) {\n            localStorage.setItem('PLACEOS.CONTROL.system', system_id);\n            localStorage.setItem('trusted', 'true');\n            localStorage.setItem('fixed_device', 'true');\n        }\n        this._router.navigate(['panel', system_id]);\n        this.loading = false;\n    }\n\n    /**\n     * Remove any previously set bootstrapping details\n     */\n    private readonly clearBootstrap = () => localStorage.removeItem('PLACEOS.CONTROL.system');\n\n    public filter(search: string) {\n        const s = search.toLowerCase();\n        this.filtered_list = this.system_list\n            .filter((i) => i.name.toLowerCase().includes(s) || i.id.includes(search))\n            .slice(0, 100);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport class SourceSelectModalData {\n    output: string;\n}\n\n@Component({\n    selector: 'source-select-modal',\n    template: `\n        <div class=\"fixed inset-0 bg-white flex flex-col items-center py-16 px-8\">\n            <source-select [output]=\"output\" (source)=\"close()\"></source-select>\n            <button\n                mat-icon-button\n                mat-dialog-close\n                class=\"absolute top-8 right-8\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n    `\n})\nexport class SourceSelectModalComponent {\n    public readonly output = this._data.output;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: SourceSelectModalData,\n        private _dialog_ref: MatDialogRef<SourceSelectModalComponent>\n    ) {}\n\n    public close() {\n        this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SourceSelectModalComponent } from './ui/source-select-modal.component';\nimport { map } from 'rxjs/operators';\n\nexport interface EnvironmentSource {\n    name: string;\n    states: string[];\n    state: string;\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    module: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    module: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nexport interface SystemState {\n    name?: string;\n    power?: boolean;\n    connected?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ControlStateService extends BaseClass {\n    private _id = new BehaviorSubject<string>('');\n    private _system = new BehaviorSubject<SystemState>({});\n    private _inputs = new BehaviorSubject<string[]>([]);\n    private _outputs = new BehaviorSubject<string[]>([]);\n    private _volume = new BehaviorSubject<number>(0);\n    private _input_data = new BehaviorSubject<RoomInput[]>([]);\n    private _output_data = new BehaviorSubject<RoomOutput[]>([]);\n    private _lights = new BehaviorSubject<string[]>([]);\n    private _blinds = new BehaviorSubject<string[]>([]);\n\n    /** General data associated with the active system */\n    public readonly system = this._system.asObservable();\n    /** List of available input sources */\n    public readonly input_list = this._input_data.asObservable();\n    /** List of available output sources */\n    public readonly output_list = this._output_data.asObservable();\n    /** List of available light sources */\n    public readonly lights = this._lights.asObservable();\n    /** List of available light sources */\n    public readonly blinds = this._blinds.asObservable();\n    public readonly volume = this._volume.asObservable();\n    /** List of available microphone input sources */\n    public readonly mic_list = this._input_data.pipe(\n        map((list) =>\n            list?.filter(\n                (_) =>\n                    _.type === 'Microphone' || _.module?.includes('Microphone')\n            )\n        )\n    );\n    /** List of available camera input sources */\n    public readonly camera_list = this._input_data.pipe(\n        map((list) =>\n            list?.filter(\n                (_) =>\n                    _.type === 'Camera' || _.module?.includes('Camera')\n            )\n        )\n    );\n\n    public get id() {\n        return this._id.getValue();\n    }\n\n    constructor(private _dialog: MatDialog) {\n        super();\n        this._id.subscribe((id) => this.bindToState(id));\n        this._inputs.subscribe((_) => this.bindSources('input', _ || []));\n        this._outputs.subscribe((_) => this.bindSources('output', _ || []));\n    }\n\n    public setID(id: string) {\n        this._id.next(id);\n    }\n\n    /** Power on the active system */\n    public powerOn() {\n        const mod = getModule(this._id.getValue(), 'System');\n        if (!mod) return;\n        return mod.execute('power_on');\n    }\n\n    /** Power off the active system */\n    public powerOff() {\n        const mod = getModule(this._id.getValue(), 'System');\n        if (!mod) return;\n        return mod.execute('shutdown');\n    }\n\n    /** Route input source to output */\n    public setRoute(input: string, output: string) {\n        const mod = getModule(this._id.getValue(), 'System');\n        if (!mod) return;\n        return mod.execute('route', [input, output]);\n    }\n\n    public setMute(source: string = '', state: boolean = true) {\n        const mod = getModule(this._id.getValue(), 'System');\n        if (!mod) return;\n        return mod.execute('mute', [source, state]);\n    }\n\n    public setVolume(source: string = '', value: number = 0) {\n        const mod = getModule(this._id.getValue(), 'System');\n        if (!mod) return;\n        return mod.execute('volume', [source, value]);\n    }\n\n    public switchSource(output: string) {\n        this._dialog.open(SourceSelectModalComponent, {\n            data: { output },\n        });\n    }\n\n    private bindToState(id: string) {\n        if (!id) return;\n        this.bindTo(id, 'name');\n        this.bindTo(id, 'power');\n        this.bindTo(id, 'connected');\n        this.bindTo(id, 'recording');\n        this.bindTo(id, 'inputs', undefined, (l) => this._inputs.next(l));\n        this.bindTo(id, 'outputs', undefined, (l) => this._outputs.next(l));\n        this.bindTo(id, 'lights', undefined, (l) => this._lights.next(l));\n        this.bindTo(id, 'blinds', undefined, (l) => this._blinds.next(l));\n    }\n\n    /** Bind to changes on input or output sources */\n    private bindSources(type: 'input' | 'output', alias_list: string[]) {\n        const id = this._id.getValue();\n        if (!id) return;\n        for (const alias of alias_list) {\n            this.bindTo(id, `${type}/${alias}`, undefined, (d) =>\n                this.updateSourceData(type, alias, d)\n            );\n        }\n    }\n\n    /** Update listed data for given source */\n    private updateSourceData(\n        type: 'input' | 'output',\n        id: string,\n        data: HashMap\n    ) {\n        const list_observer =\n            type === 'input' ? this._input_data : this._output_data;\n        const list: any[] = [...list_observer.getValue()];\n        const index = list.findIndex((item) => item.id === id);\n        if (index >= 0) {\n            list.splice(index, 1, { id, ...data });\n        } else {\n            list.push({ id, ...data });\n        }\n        list_observer.next(list);\n    }\n\n    /** List to binding */\n    private bindTo(\n        id: string,\n        name: string,\n        mod: string = 'System',\n        on_change: (v: any) => void = (v) => this.updateProperty(name, v)\n    ) {\n        const module = getModule(id, mod).binding(name);\n        this.subscription(\n            `listen:${name}`,\n            module.listen().subscribe(on_change)\n        );\n        this.subscription(`bind:${name}`, module.bind());\n    }\n\n    /** Update properties of the system data */\n    private updateProperty(name: string, value: any) {\n        const item = { ...this._system.getValue() };\n        item[name] = value;\n        this._system.next(item);\n    }\n}\n","import { Component } from \"@angular/core\";\nimport { CustomTooltipData } from \"@placeos/components\";\n\nimport { ControlStateService, EnvironmentSource } from \"../control-state.service\";\n\n@Component({\n    selector: 'blinds-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <div hidden *ngIf=\"!!(blinds | async)[0]\">\n                <i\n                    binding\n                    [(model)]=\"blind\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    [bind]=\"'blinds/' + (blinds | async)[0]\"\n                ></i>\n            </div>\n            <h3 class=\"mb-2 text-xl font-medium\">Blinds Presets</h3>\n            <ng-container *ngIf=\"blind?.states?.length; else empty_state\">\n                <button\n                    state\n                    mat-button\n                    class=\"w-64\"\n                    *ngFor=\"let state of blind.states\"\n                    [class.inverse]=\"state === blind.state\"\n                    binding\n                    onEvent=\"click\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    exec=\"environment\"\n                    [params]=\"[(blinds | async)[0], state]\"\n                >\n                    {{ state }}\n                </button>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex items-center justify-center p-8\">\n                <p>No presets available for blinds</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class BlindsTooltipComponent {\n    public blind: EnvironmentSource;\n\n    public readonly blinds = this._state.blinds;\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    Renderer2,\n    ViewChild,\n} from '@angular/core';\nimport { Point } from '@placeos/svg-viewer';\nimport { BaseClass } from '@placeos/common';\n\n/**\n * Grab point details from mouse or touch event\n * @param event Event to grab details from\n */\nexport function eventToPoint(event: MouseEvent | TouchEvent): Point {\n    if (!event) {\n        return { x: -1, y: -1 };\n    }\n    if (event instanceof MouseEvent) {\n        return { x: event.clientX, y: event.clientY };\n    }\n    return event.touches && event.touches.length > 0\n        ? { x: event.touches[0].clientX, y: event.touches[0].clientY }\n        : { x: -1, y: -1 };\n}\n\nexport enum JoystickTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum JoystickPan {\n    Left,\n    Right,\n    Stop,\n}\n\n@Component({\n    selector: 'joystick',\n    template: `\n        <div\n            #panning_control\n            joystick\n            (mousedown)=\"startPan($event)\"\n            (touchstart)=\"startPan($event)\"\n            class=\"relative h-48 w-48 rounded-full bg-gray-600 text-white\"\n        >\n            <div class=\"absolute inset-0 flex text-5xl items-center\">\n                <app-icon style=\"transform: translateX(-.5rem)\">\n                    chevron_left\n                </app-icon>\n            </div>\n            <div\n                class=\"absolute inset-0 flex text-5xl items-center justify-end\"\n            >\n                <app-icon style=\"transform: translateX(.5rem)\"\n                    >chevron_right</app-icon\n                >\n            </div>\n            <div class=\"absolute inset-0 flex text-5xl justify-center\">\n                <app-icon style=\"transform: translateY(-.5rem)\"\n                    >expand_less</app-icon\n                >\n            </div>\n            <div\n                class=\"absolute inset-0 flex text-5xl items-end justify-center\"\n            >\n                <app-icon style=\"transform: translateY(.5rem)\"\n                    >expand_more</app-icon\n                >\n            </div>\n            <div\n                class=\"absolute top-12 left-12 right-12 bottom-12 bg-white rounded-full flex items-center justify-center\"\n            >\n                <div\n                    thumb\n                    [style.transform]=\"thumb_transform\"\n                    class=\"bg-black h-12 w-12 rounded-full\"\n                ></div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class JoystickComponent extends BaseClass {\n    @Input() public pan: JoystickPan;\n    @Input() public tilt: JoystickTilt;\n\n    @Output() public panChange = new EventEmitter<JoystickPan>();\n    @Output() public tiltChange = new EventEmitter<JoystickTilt>();\n\n    @ViewChild('panning_control', { static: true })\n    private _panning_el: ElementRef<HTMLDivElement>;\n\n    private _box: ClientRect;\n\n    constructor(private _renderer: Renderer2) {\n        super();\n    }\n\n    public get thumb_transform() {\n        return `translate(${\n            this.pan === JoystickPan.Stop\n                ? '0'\n                : this.pan === JoystickPan.Left\n                ? '-50'\n                : '50'\n        }%, ${\n            this.tilt === JoystickTilt.Stop\n                ? '0'\n                : this.tilt === JoystickTilt.Up\n                ? '-50'\n                : '50'\n        }%)`;\n    }\n\n    public startPan(event: MouseEvent | TouchEvent) {\n        const move_event =\n            event instanceof MouseEvent ? 'mousemove' : 'touchmove';\n        const end_event = event instanceof MouseEvent ? 'mouseup' : 'touchend';\n        this._box = this._panning_el.nativeElement.getBoundingClientRect();\n        this.subscription(\n            'on_move',\n            this._renderer.listen('window', move_event, (e) =>\n                this.handlePan(e)\n            )\n        );\n        this.subscription(\n            'on_end',\n            this._renderer.listen('window', end_event, (_) => {\n                this.unsub('on_move');\n                this.unsub('on_end');\n                this.tilt = JoystickTilt.Stop;\n                this.pan = JoystickPan.Stop;\n            })\n        );\n        this.handlePan(event);\n    }\n\n    public handlePan(event: MouseEvent | TouchEvent) {\n        const point = eventToPoint(event);\n        const box_point = {\n            y: this._box.top + this._box.height / 2,\n            x: this._box.left + this._box.width / 2,\n        };\n        const angle =\n            (Math.atan2(point.y - box_point.y, point.x - box_point.x) * 180) /\n            Math.PI;\n        this.tilt =\n            angle >= 150 || angle <= -150 || (angle > -30 && angle < 30)\n                ? JoystickTilt.Stop\n                : angle > 0\n                ? JoystickTilt.Down\n                : JoystickTilt.Up;\n        this.pan =\n            (angle >= 60 && angle <= 120) || (angle <= -60 && angle >= -120)\n                ? JoystickPan.Stop\n                : angle > 90 || angle < -90\n                ? JoystickPan.Left\n                : JoystickPan.Right;\n        this.tiltChange.emit(this.tilt);\n        this.panChange.emit(this.pan);\n    }\n}\n","import { Component, Renderer2 } from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService, RoomInput } from '../control-state.service';\nimport { JoystickPan, JoystickTilt } from './joystick.component';\n\nexport enum ZoomDirection {\n    In,\n    Out,\n    Stop,\n}\n@Component({\n    selector: 'camera-tooltip',\n    template: `\n        <div class=\"my-2 bg-white shadow rounded flex flex-col\" *ngIf=\"(camera_list | async)?.length; else empty_state\">\n            <mat-form-field appearance=\"outline\" class=\"m-4 h-12\">\n                <mat-select\n                    [(ngModel)]=\"active_camera\"\n                    placeholder=\"Select Camera\"\n                >\n                    <mat-option\n                        *ngFor=\"let cam of camera_list | async\"\n                        [value]=\"cam\"\n                    >\n                        {{ cam.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex relative border-t border-gray-400 mt-1\">\n                <div\n                    class=\"flex flex-col items-center border-r border-gray-400 p-4 space-y-2\"\n                >\n                    <h3 class=\"mb-2 text-xl font-medium\">Presets</h3>\n                    <ng-container *ngIf=\"presets?.length; else no_presets\">\n                        <button\n                            preset\n                            mat-button\n                            class=\"w-48\"\n                            [class.inverse]=\"preset === name\"\n                            *ngFor=\"let name of presets\"\n                            (click)=\"preset = name\"\n                        >\n                            {{ name }}\n                        </button>\n                    </ng-container>\n                    <ng-template #no_presets>\n                        <p>No presets for this camera</p>\n                    </ng-template>\n                </div>\n                <div class=\"p-4\">\n                    <h3 class=\"mb-2 text-xl font-medium\">Controls</h3>\n                    <div class=\"flex items-center space-x-2\">\n                        <joystick [(pan)]=\"pan\" [(tilt)]=\"tilt\"></joystick>\n                        <div\n                            zoom\n                            class=\"flex flex-col items-center border border-gray-600 rounded\"\n                        >\n                            <button\n                                zoom-in\n                                mat-icon-button\n                                class=\"rounded\"\n                                (mousedown)=\"startZoom('in', $event)\"\n                                (touchstart)=\"startZoom('in', $event)\"\n                                (contextmenu)=\"$event.preventDefault()\"\n                            >\n                                <app-icon>add</app-icon>\n                            </button>\n                            <div\n                                class=\"text-xs h-10 w-10 flex items-center justify-center border-t border-b border-gray-600\"\n                            >\n                                Zoom\n                            </div>\n\n                            <button\n                            zoom-out\n                                mat-icon-button\n                                class=\"rounded\"\n                                (mousedown)=\"startZoom('out', $event)\"\n                                (touchstart)=\"startZoom('out', $event)\"\n                                (contextmenu)=\"$event.preventDefault()\"\n                            >\n                                <app-icon>remove</app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div\n                    class=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\"\n                    *ngIf=\"!active_camera\"\n                >\n                    <p>Select a camera to control.</p>\n                </div>\n            </div>\n        </div>\n        <div hidden *ngIf=\"active_camera?.module\">\n            <i\n                binding\n                [model]=\"zoom\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.module\"\n                bind=\"zoom\"\n                exec=\"zoom\"\n            ></i>\n            <i\n                binding\n                [model]=\"pan\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.module\"\n                bind=\"pan\"\n                exec=\"pan\"\n            ></i>\n            <i\n                binding\n                [model]=\"tilt\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.module\"\n                bind=\"tilt\"\n                exec=\"tilt\"\n            ></i>\n            <i\n                binding\n                [(model)]=\"presets\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.module\"\n                bind=\"presets\"\n            ></i>\n            <i\n                binding\n                [(model)]=\"preset\"\n                [sys]=\"id\"\n                [mod]=\"active_camera.module\"\n                bind=\"preset\"\n                exec=\"recall\"\n            ></i>\n        </div>\n        <ng-template #empty_state>\n            <div  class=\"my-2 bg-white shadow rounded flex flex-col p-8 text-center\">\n                <p>No cameras available for this system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CameraTooltipComponent extends BaseClass {\n    /** Currently active camera */\n    public active_camera: RoomInput;\n    /** List of available presets for the active camera */\n    public presets: string[] = [];\n    /** Currently active preset */\n    public preset: string = '';\n    /** Current zoom value for camera */\n    public zoom: ZoomDirection = ZoomDirection.Stop;\n    /** Current panning value for camera */\n    public pan: JoystickPan = JoystickPan.Stop;\n    /** Current tilting value for camera */\n    public tilt: JoystickTilt = JoystickTilt.Stop;\n    /** List of available cameras to select from */\n    public readonly camera_list = this._state.camera_list;\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData,\n        private _renderer: Renderer2\n    ) {\n        super();\n    }\n\n    public startZoom(dir: 'in' | 'out', e: MouseEvent | TouchEvent) {\n        const end_event = e instanceof MouseEvent ? 'mouseup' : 'touchend';\n        this.zoom = dir === 'in' ? ZoomDirection.In : ZoomDirection.Out;\n        this.subscription(\n            'on_end',\n            this._renderer.listen('window', end_event, (_) => {\n                this.unsub('on_move');\n                this.unsub('on_end');\n                this.zoom = ZoomDirection.Stop;\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService } from '../control-state.service';\n\n@Component({\n    selector: 'help-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <h3 class=\"mb-2 text-xl font-medium\">Need help?</h3>\n            <p>\n                Contact <span contact>{{ support_contact || ' your administrator' }}</span> if you\n                require <br />assisatance at\n                <a email class=\"underline\" [href]=\"'mailto:' + (support_email || 'support@place.tech')\">{{\n                    support_email || 'support@place.tech'\n                }}</a>\n                or phone\n                <a phone class=\"underline\" [href]=\"'tel:' + (support_phone || '0412345678')\">{{\n                    support_phone || '0412345678'\n                }}</a>\n            </p>\n        </div>\n    `,\n    styles: [``],\n})\nexport class HelpTooltipComponent {\n    public support_contact: string;\n\n    public support_email: string;\n\n    public support_phone: string;\n\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport {\n    ControlStateService,\n    EnvironmentSource,\n} from '../control-state.service';\n\n@Component({\n    selector: 'lighting-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <div hidden *ngIf=\"!!(lights | async)[0]\">\n                <i\n                    binding\n                    [(model)]=\"light\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    [bind]=\"'lights/' + (lights | async)[0]\"\n                ></i>\n            </div>\n            <h3 class=\"mb-2 text-xl font-medium\">Lighting Presets</h3>\n            <ng-container *ngIf=\"light?.states?.length; else empty_state\">\n                <button\n                    state\n                    mat-button\n                    class=\"w-64\"\n                    *ngFor=\"let state of light.states\"\n                    [class.inverse]=\"state === light.state\"\n                    binding\n                    onEvent=\"click\"\n                    [sys]=\"id\"\n                    mod=\"System\"\n                    exec=\"environment\"\n                    [params]=\"[(lights | async)[0], state]\"\n                >\n                    {{ state }}\n                </button>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex items-center justify-center p-8\">\n                <p>No presets available for lights</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LightingTooltipComponent {\n    public light: EnvironmentSource;\n\n    public readonly lights = this._state.lights;\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService } from '../control-state.service';\n\n@Component({\n    selector: 'microphone-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <h3 class=\"mb-2 text-xl font-medium\">Microphones</h3>\n            <ng-container *ngIf=\"(mic_list | async)?.length; else empty_state\">\n                <div *ngFor=\"let mic of mic_list | async\">\n                    <label [for]=\"mic.id\">{{ mic.name }}</label>\n                    <div\n                        class=\"flex items-center space-x-2 w-64\"\n                        [attr.name]=\"mic.id\"\n                    >\n                        <button\n                            mute\n                            mat-icon-button\n                            (click)=\"mute[mic.id] = !mute[mic.id]\"\n                        >\n                            <app-icon>{{\n                                mute[mic.id]\n                                    ? 'volume_off'\n                                    : volume[mic.id] > 0\n                                    ? 'volume_up'\n                                    : 'volume_mute'\n                            }}</app-icon>\n                        </button>\n                        <mat-slider\n                            [ngModel]=\"!mute[mic.id] ? volume[mic.id] : 0\"\n                            (ngModelChange)=\"\n                                volume[mic.id] = $event; mute[mic.id] = false\n                            \"\n                            class=\"flex-1\"\n                        ></mat-slider>\n                    </div>\n                    <div hidden *ngIf=\"mic?.module\">\n                        <i\n                            binding\n                            [sys]=\"id\"\n                            [mod]=\"mic.module\"\n                            bind=\"volume\"\n                            exec=\"volume\"\n                            [(model)]=\"volume[mic.id]\"\n                        ></i>\n                        <i\n                            binding\n                            [sys]=\"id\"\n                            [mod]=\"mic.module\"\n                            bind=\"mute\"\n                            exec=\"mute\"\n                            [(model)]=\"mute[mic.id]\"\n                        ></i>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex items-center justify-center p-8\">\n                <p>No microphones available for system</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class MicrophoneTooltipComponent {\n    /** List of microphones */\n    public readonly mic_list = this._state.mic_list;\n    /** Mapping of microphones to their volume */\n    public readonly volume = {};\n    /** Mapping of microphones to their mute state */\n    public readonly mute = {};\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(\n        private _state: ControlStateService,\n        private _tooltip: CustomTooltipData\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { CustomTooltipData } from '@placeos/components';\n\nimport { ControlStateService } from '../control-state.service';\n\n@Component({\n    selector: 'power-tooltip',\n    template: `\n        <div\n            class=\"p-4 my-2 bg-white shadow rounded flex flex-col items-center space-y-2\"\n        >\n            <h3 class=\"mb-2 font-medium text-center\">\n                Are you sure you want to shutdown <br />the system?\n            </h3>\n            <button mat-button class=\"w-64\" (click)=\"shutdown()\">\n                Yes, I'm sure\n            </button>\n            <button mat-button class=\"w-64 inverse\" (click)=\"close()\">No, go back</button>\n        </div>\n    `,\n    styles: [``],\n})\nexport class PowerTooltipComponent {\n    /** Shutdown the system */\n    public readonly shutdown = () => this._state.powerOff();\n    /** Close the tooltip */\n    public readonly close = () => this._tooltip.close();\n\n    constructor(private _state: ControlStateService, private _tooltip: CustomTooltipData) {}\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { ControlStateService } from './control-state.service';\nimport { BlindsTooltipComponent } from './ui/blinds-tooltip.component';\nimport { CameraTooltipComponent } from './ui/camera-tooltip.component';\nimport { HelpTooltipComponent } from './ui/help-tooltip.component';\nimport { LightingTooltipComponent } from './ui/lighting-tooltip.component';\nimport { MicrophoneTooltipComponent } from './ui/microphone-tooltip.component';\nimport { PowerTooltipComponent } from './ui/power-tooltip.component';\n\n@Component({\n    selector: 'topbar-header',\n    template: `\n        <div class=\"flex-1 px-4\">\n            <img logo class=\"h-10\" [src]=\"logo?.src\" alt=\"Logo\" />\n        </div>\n        <div class=\"p-4 text-lg\">{{ (system | async).name }}</div>\n        <div class=\"flex-1 p-4 flex items-center justify-end space-x-2\">\n            <div customTooltip [content]=\"cmp.lighting\" *ngIf=\"(lights_list | async)?.length\">\n                <button lights mat-icon-button>\n                    <app-icon>brightness_high</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.blinds\" *ngIf=\"(blinds_list | async)?.length\">\n                <button blinds mat-icon-button>\n                    <app-icon>unfold_more</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.mics\" *ngIf=\"(mic_list | async)?.length\">\n                <button mics mat-icon-button>\n                    <app-icon>mic</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.camera\" *ngIf=\"(camera_list | async)?.length\">\n                <button cameras mat-icon-button>\n                    <app-icon>photo_camera</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.help\">\n                <button help mat-icon-button>\n                    <app-icon>help</app-icon>\n                </button>\n            </div>\n            <div customTooltip [content]=\"cmp.power\">\n                <button power mat-icon-button>\n                    <app-icon>power_settings_new</app-icon>\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                border-bottom: 1px solid #ccc8;\n            }\n\n            img {\n                max-height: calc(100% - 1rem);\n            }\n\n            button {\n                border-radius: 0.25rem;\n                background-color: rgba(255, 255, 255, 0.15);\n            }\n        `,\n    ],\n})\nexport class TopbarHeaderComponent {\n    public readonly system = this._state.system;\n    public readonly mic_list = this._state.mic_list;\n    public readonly camera_list = this._state.camera_list;\n    public readonly lights_list = this._state.lights;\n    public readonly blinds_list = this._state.blinds;\n\n    public readonly cmp = {\n        lighting: LightingTooltipComponent,\n        power: PowerTooltipComponent,\n        help: HelpTooltipComponent,\n        blinds: BlindsTooltipComponent,\n        camera: CameraTooltipComponent,\n        mics: MicrophoneTooltipComponent\n    };\n\n    public readonly powerOff = () => this._state.powerOff();\n\n    public get logo() {\n        return this._settings.get('app.logo_dark') || {};\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: ControlStateService\n    ) {}\n}\n","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { unique } from '@placeos/common';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ControlStateService, RoomInput } from '../control-state.service';\n\n@Component({\n    selector: 'source-select',\n    template: `\n        <div class=\"flex flex-col items-center text-black p-4\">\n            <h3 class=\"font-medium text-xl mb-2\">\n                Select input source for\n                {{ (details | async)?.name || '= No Name =' }}\n            </h3>\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"flex flex-wrap divide divide-gray-200\"\n                    *ngIf=\"(input_types | async)?.length; else empty_state\"\n                >\n                    <div\n                        group\n                        *ngFor=\"let type of input_types | async\"\n                        class=\"flex flex-col p-2 space-y-2\"\n                    >\n                        <h4 class=\"text-center underline\">{{ type }}</h4>\n                        <button\n                            mat-button\n                            source\n                            class=\"w-48\"\n                            [class.inverse]=\"\n                                input.id === (details | async)?.source\n                            \"\n                            *ngFor=\"let input of (input_map | async)[type]\"\n                            (click)=\"selectSource(input)\"\n                        >\n                            <div class=\"truncate\">{{ input.name }}</div>\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center p-8 m-auto\">\n                <p>\n                    No input sources available for the selected output({{\n                        details?.name || 'Unknown'\n                    }})\n                </p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 m-auto\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Switching input source...</p>\n            </div>\n        </ng-template>\n    `\n})\nexport class SourceSelectComponent implements OnChanges {\n    // ID of the selected output\n    @Input() public output: string;\n    /** Emitter for changes to the selected input source */\n    @Output() public source = new EventEmitter();\n    /** Whether routing is loading */\n    public loading: boolean;\n    // Store for the ID of the selected output\n    public readonly output_id = new BehaviorSubject('');\n    // Name of the currently selected output\n    public readonly details = combineLatest([\n        this.output_id,\n        this._state.output_list,\n    ]).pipe(map(([id, list]) => list.find((_) => _.id === id)));\n    /** List of inputs available for selected output */\n    public readonly input_list = combineLatest([\n        this.output_id,\n        this._state.input_list,\n    ]).pipe(\n        map(([id, list]) =>\n            list.filter((_) => !_.outputs || _.outputs.includes(id))\n        )\n    );\n    /** Available types of inputs */\n    public readonly input_types = this.input_list.pipe(\n        map((list) => unique(list.map((_) => _.type)))\n    );\n    /** Mapping of input types to inputs */\n    public readonly input_map = combineLatest([\n        this.input_list,\n        this.input_types,\n    ]).pipe(\n        map(([list, types]) =>\n            types.reduce((m, t) => {\n                m[t] = list.filter((_) => _.type === t);\n                return m;\n            }, {})\n        )\n    );\n\n    constructor(private _state: ControlStateService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.output) {\n            this.output_id.next(this.output || '');\n        }\n    }\n\n    public async selectSource(input: RoomInput) {\n        this.loading = true;\n        await this._state.setRoute(input.id, this.output);\n        this.loading = false;\n        this.source.emit(input);\n    }\n}\n","import { Component, Input, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ControlStateService, RoomOutput } from '../control-state.service';\n\nconst ICON_MAP = {\n    Display: 'deskotp_windows',\n    PC: 'desktop_windows',\n    Laptop: 'laptop_chromebook',\n    Camera: 'videocam',\n    TV: 'tv',\n};\n\n@Component({\n    selector: 'output-display',\n    template: `\n        <div class=\"p-4 m-2 bg-white rounded shadow text-black\">\n            <div\n                view\n                matRipple\n                class=\"h-48 border border-gray-300 relative rounded mb-2 flex flex-col items-center justify-center space-y-2\"\n                [class.opacity-60]=\"!(input | async)\"\n                [class.bg-gray-300]=\"!(input | async)\"\n                (click)=\"switchSource()\"\n            >\n                <div\n                    class=\"absolute top-1 left-1 bg-secondary text-white shadow px-2 py-1 rounded\"\n                >\n                    {{ item?.name }}\n                </div>\n                <app-icon class=\"text-7xl\">{{\n                    icons[(input | async)?.type] || 'add_to_queue'\n                }}</app-icon>\n                <p class=\"font-medium\">\n                    {{\n                        (input | async)?.name || 'Click to select input source'\n                    }}\n                </p>\n                <p class=\"text-xs\">\n                    <span *ngIf=\"(input | async)?.name\" class=\"opacity-50\">\n                        Click to switch input source\n                    </span>\n                </p>\n            </div>\n            <div class=\"flex items-center space-x-2 w-full\">\n                <button mat-icon-button (click)=\"mute = !mute\">\n                    <app-icon>{{\n                        mute\n                            ? 'volume_off'\n                            : volume > 0\n                            ? 'volume_up'\n                            : 'volume_mute'\n                    }}</app-icon>\n                </button>\n                <mat-slider\n                    [ngModel]=\"!mute ? volume : 0\"\n                    (ngModelChange)=\"volume = $event; mute = false\"\n                    class=\"flex-1\"\n                ></mat-slider>\n            </div>\n        </div>\n        <div *ngIf=\"item?.module\">\n            <i\n                binding\n                [sys]=\"id\"\n                [mod]=\"item.module\"\n                bind=\"volume\"\n                exec=\"volume\"\n                [(model)]=\"volume\"\n            ></i>\n            <i\n                binding\n                [sys]=\"id\"\n                [mod]=\"item.module\"\n                bind=\"mute\"\n                exec=\"mute\"\n                [(model)]=\"mute\"\n            ></i>\n        </div>\n    `,\n    styles: [\n        `\n            [view] {\n                width: 28vw;\n            }\n        `,\n    ],\n})\nexport class OutputDisplayComponent {\n    @Input() public item: RoomOutput;\n    /** Current volume level for output */\n    public volume: number;\n    /** Current mute state of the output */\n    public mute: boolean;\n    /** ID of the input associated with the displayed output */\n    private _input = new BehaviorSubject('');\n    /** Details of the associated input */\n    public readonly input = combineLatest([\n        this._input,\n        this._state.input_list,\n    ]).pipe(map(([id, list]) => list.find((_) => _.id === id)));\n\n    public readonly icons = ICON_MAP;\n\n    public readonly switchSource = () => this._state.switchSource(this.item.id);\n\n    public get id(): string {\n        return this._state.id;\n    }\n\n    constructor(private _state: ControlStateService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.item) {\n            this._input.next(this.item?.source || '');\n        }\n    }\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { ControlStateService } from './control-state.service';\n\n@Component({\n    selector: 'control-advanced-view',\n    template: `\n        <div\n            class=\"w-full flex-1 h-1/2 flex items-center justify-center flex-wrap\"\n            *ngIf=\"(outputs | async)?.length; else empty_state\"\n        >\n            <output-display\n                *ngFor=\"\n                    let output of outputs\n                        | async\n                        | slice: page * 6:(page + 1) * 6\n                \"\n                [item]=\"output\"\n            ></output-display>\n        </div>\n        <div\n            class=\"w-full h-12 flex items-center justify-center px-2 pb-2 space-x-2\"\n            *ngIf=\"(page_count | async)?.length > 1\"\n        >\n            <button\n                mat-icon-button\n                *ngFor=\"let idx of page_count | async; let i = index\"\n                [class.bg-primary]=\"page === i\"\n                [class.text-black]=\"page !== i\"\n                [class.bg-gray-100]=\"page !== i\"\n                (click)=\"page = i\"\n            >\n                {{ i + 1 }}\n            </button>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No output devices setup for this system.</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                width: 100%;\n                height: 100%;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class ControlAdvancedViewComponent {\n    public page = 0;\n\n    public readonly outputs = this._state.output_list.pipe(map((_) => _ || []));\n\n    public readonly page_count = this.outputs.pipe(\n        map((_) => new Array(Math.floor(_.length / 6) + 1).fill(0))\n    );\n\n    constructor(private _state: ControlStateService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[control-page-view]',\n    template: `\n        <ng-container [ngSwitch]=\"view\">\n            <source-select\n                *ngSwitchCase=\"'basic'\"\n                output=\"'ALL'\"\n            ></source-select>\n            <control-advanced-view *ngSwitchDefault></control-advanced-view>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                flex: 1;\n                height: 50%;\n                overflow: hidden;\n                background: #f0f0f0;\n                color: rgba(0,0,0,.85);\n            }\n        `,\n    ],\n})\nexport class ControlPageViewComponent {\n    public view: 'basic' | 'advanced';\n}\n","import { Pipe } from \"@angular/core\";\n\nexport function padLength(value: number | string, length: number = 2): string {\n    let str = `${value}`;\n    while (str.length < length) str = `0${str}`;\n    return str;\n}\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe {\n    public transform(length: number): string {\n        let str = `${padLength(Math.floor(length / 60) % 60)}:${padLength(length % 60)}`;\n        const hours = Math.floor(length / 60 / 60);\n        if (hours > 0) {\n            str = `${padLength(hours)}:${str}`;\n        }\n        return str;\n    }\n}\n","import { Component } from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport { ControlStateService } from './control-state.service';\n\n@Component({\n    selector: 'control-status-bar',\n    template: `\n        <div\n            recording\n            *ngIf=\"(system | async)?.recording\"\n            class=\"text-xs divide-x divide-gray-100 text-white flex items-center\"\n        >\n            <div hidden>\n                <i\n                    binding\n                    [(model)]=\"rec_status\"\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    bind=\"status\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_title\"\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    bind=\"title\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_remaining\"\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    bind=\"remaining\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_current\"\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    bind=\"current\"\n                ></i>\n                <i\n                    binding\n                    [(model)]=\"rec_next\"\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    bind=\"current\"\n                ></i>\n            </div>\n            <div\n                class=\"h-12 p-2 w-24 flex items-center justify-center text-center\"\n            >\n                {{ rec_title || '~Unnamed Recording~' }}\n            </div>\n            <div class=\"h-12 w-12 flex items-center justify-center\">\n                <button mat-icon-button mute class=\"rounded-none\">\n                    <app-icon>fiber_manual_record</app-icon>\n                </button>\n            </div>\n            <div class=\"h-12 w-12 flex items-center justify-center\">\n                <button\n                    [attr.place-action]=\"\n                        rec_status === 'playing' ? 'pause' : 'start'\n                    \"\n                    mat-icon-button\n                    class=\"rounded-none\"\n                    binding\n                    [sys]=\"id\"\n                    mod=\"Capture\"\n                    onEvent=\"click\"\n                    [exec]=\"rec_status === 'playing' ? 'pause' : 'start'\"\n                >\n                    <app-icon>{{\n                        rec_status === 'playing' ? 'pause' : 'play_arrow'\n                    }}</app-icon>\n                </button>\n            </div>\n            <div class=\"h-12 flex flex-col p-2 w-32\">\n                <div\n                    class=\"p-2 rounded uppercase text-center\"\n                    [class.bg-error]=\"rec_status === 'playing'\"\n                    [class.bg-pending]=\"rec_status === 'paused'\"\n                    [class.bg-gray-400]=\"rec_status === 'stopped'\"\n                >\n                    {{\n                        rec_status === 'playing'\n                            ? 'Recording'\n                            : rec_status === 'paused'\n                            ? 'Paused'\n                            : 'Idle'\n                    }}\n                </div>\n            </div>\n            <div class=\"h-12 p-2\">\n                <label>Remaining</label>\n                <div class=\"\">{{ rec_remaining | duration }}</div>\n            </div>\n            <div class=\"h-12 p-2\">\n                <label>Next Recording</label>\n                <div class=\"\">{{ rec_current | duration }}</div>\n            </div>\n        </div>\n        <div class=\"flex-1\"></div>\n        <div class=\"flex items-center space-x-2 w-64 py-2 px-4\">\n            <button mat-icon-button (click)=\"mute = !mute\">\n                <app-icon>{{\n                    mute\n                        ? 'volume_off'\n                        : (volume | async) > 0\n                        ? 'volume_up'\n                        : 'volume_mute'\n                }}</app-icon>\n            </button>\n            <mat-slider\n                white\n                [ngModel]=\"!mute ? (volume | async) : 0\"\n                (ngModelChange)=\"setVolume($event); mute = false\"\n                class=\"flex-1\"\n            ></mat-slider>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                border-bottom: 1px solid #ccc8;\n                height: 3rem;\n                overflow: hidden;\n            }\n        `,\n    ],\n})\nexport class ControlStatusBarComponent extends BaseClass {\n    /** Current global volume for system */\n    public readonly volume = this._state.volume;\n    /** Details of the active system */\n    public readonly system = this._state.system;\n\n    public mute: boolean;\n    public rec_status: string;\n    public rec_title: string;\n\n    public readonly setVolume = (v) => this._state.setVolume('all', v);\n\n    public get id() {\n        return this._state.id;\n    }\n\n    constructor(private _state: ControlStateService) {\n        super();\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { BaseClass } from '@placeos/common';\n\nimport { ControlStateService } from './control-state.service';\n\n@Component({\n    selector: 'app-control-main-view',\n    template: `\n        <ng-container *ngIf=\"(system | async).connected; else load_state\">\n            <div\n                *ngIf=\"(system | async).power; else power_off_state\"\n                class=\"absolute inset-0 flex flex-col\"\n            >\n                <topbar-header></topbar-header>\n                <div control-page-view></div>\n                <control-status-bar></control-status-bar>\n            </div>\n        </ng-container>\n        <ng-template #power_off_state>\n            <div\n                name=\"splash\"\n                class=\"absolute inset-0 text-white flex flex-col items-center justify-center\"\n                (click)=\"powerOn()\"\n                (touchend)=\"powerOn()\"\n            >\n                <h2 class=\"font-light text-4xl mb-4\">Touch to Start</h2>\n                <p class=\"text-lg\">{{ (system | async).name }}</p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                name=\"loader\"\n                class=\"absolute inset-0 bg-white text-black flex flex-col items-center justify-center\"\n            >\n                <mat-spinner class=\"mb-4\" [diameter]=\"64\"></mat-spinner>\n                <div class=\"text-2xl my-4\">\n                    Connecting to system(<em>{{ id }}</em\n                    >)...\n                </div>\n                <div class=\"text-base\"></div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                background-color: #000051;\n                color: #fff;\n            }\n            [name='loader'] {\n                background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 304 304' width='304' height='304'%3E%3Cpath fill='%23000' fill-opacity='0.05' d='M44.1 224a5 5 0 1 1 0 2H0v-2h44.1zm160 48a5 5 0 1 1 0 2H82v-2h122.1zm57.8-46a5 5 0 1 1 0-2H304v2h-42.1zm0 16a5 5 0 1 1 0-2H304v2h-42.1zm6.2-114a5 5 0 1 1 0 2h-86.2a5 5 0 1 1 0-2h86.2zm-256-48a5 5 0 1 1 0 2H0v-2h12.1zm185.8 34a5 5 0 1 1 0-2h86.2a5 5 0 1 1 0 2h-86.2zM258 12.1a5 5 0 1 1-2 0V0h2v12.1zm-64 208a5 5 0 1 1-2 0v-54.2a5 5 0 1 1 2 0v54.2zm48-198.2V80h62v2h-64V21.9a5 5 0 1 1 2 0zm16 16V64h46v2h-48V37.9a5 5 0 1 1 2 0zm-128 96V208h16v12.1a5 5 0 1 1-2 0V210h-16v-76.1a5 5 0 1 1 2 0zm-5.9-21.9a5 5 0 1 1 0 2H114v48H85.9a5 5 0 1 1 0-2H112v-48h12.1zm-6.2 130a5 5 0 1 1 0-2H176v-74.1a5 5 0 1 1 2 0V242h-60.1zm-16-64a5 5 0 1 1 0-2H114v48h10.1a5 5 0 1 1 0 2H112v-48h-10.1zM66 284.1a5 5 0 1 1-2 0V274H50v30h-2v-32h18v12.1zM236.1 176a5 5 0 1 1 0 2H226v94h48v32h-2v-30h-48v-98h12.1zm25.8-30a5 5 0 1 1 0-2H274v44.1a5 5 0 1 1-2 0V146h-10.1zm-64 96a5 5 0 1 1 0-2H208v-80h16v-14h-42.1a5 5 0 1 1 0-2H226v18h-16v80h-12.1zm86.2-210a5 5 0 1 1 0 2H272V0h2v32h10.1zM98 101.9V146H53.9a5 5 0 1 1 0-2H96v-42.1a5 5 0 1 1 2 0zM53.9 34a5 5 0 1 1 0-2H80V0h2v34H53.9zm60.1 3.9V66H82v64H69.9a5 5 0 1 1 0-2H80V64h32V37.9a5 5 0 1 1 2 0zM101.9 82a5 5 0 1 1 0-2H128V37.9a5 5 0 1 1 2 0V82h-28.1zm16-64a5 5 0 1 1 0-2H146v44.1a5 5 0 1 1-2 0V18h-26.1zm102.2 270a5 5 0 1 1 0 2H98v14h-2v-16h124.1zM242 149.9V160h16v34h-16v62h48v48h-2v-46h-48v-66h16v-30h-16v-12.1a5 5 0 1 1 2 0zM53.9 18a5 5 0 1 1 0-2H64V2H48V0h18v18H53.9zm112 32a5 5 0 1 1 0-2H192V0h50v2h-48v48h-28.1zm-48-48a5 5 0 0 1-9.8-2h2.07a3 3 0 1 0 5.66 0H178v34h-18V21.9a5 5 0 1 1 2 0V32h14V2h-58.1zm0 96a5 5 0 1 1 0-2H137l32-32h39V21.9a5 5 0 1 1 2 0V66h-40.17l-32 32H117.9zm28.1 90.1a5 5 0 1 1-2 0v-76.51L175.59 80H224V21.9a5 5 0 1 1 2 0V82h-49.59L146 112.41v75.69zm16 32a5 5 0 1 1-2 0v-99.51L184.59 96H300.1a5 5 0 0 1 3.9-3.9v2.07a3 3 0 0 0 0 5.66v2.07a5 5 0 0 1-3.9-3.9H185.41L162 121.41v98.69zm-144-64a5 5 0 1 1-2 0v-3.51l48-48V48h32V0h2v50H66v55.41l-48 48v2.69zM50 53.9v43.51l-48 48V208h26.1a5 5 0 1 1 0 2H0v-65.41l48-48V53.9a5 5 0 1 1 2 0zm-16 16V89.41l-34 34v-2.82l32-32V69.9a5 5 0 1 1 2 0zM12.1 32a5 5 0 1 1 0 2H9.41L0 43.41V40.6L8.59 32h3.51zm265.8 18a5 5 0 1 1 0-2h18.69l7.41-7.41v2.82L297.41 50H277.9zm-16 160a5 5 0 1 1 0-2H288v-71.41l16-16v2.82l-14 14V210h-28.1zm-208 32a5 5 0 1 1 0-2H64v-22.59L40.59 194H21.9a5 5 0 1 1 0-2H41.41L66 216.59V242H53.9zm150.2 14a5 5 0 1 1 0 2H96v-56.6L56.6 162H37.9a5 5 0 1 1 0-2h19.5L98 200.6V256h106.1zm-150.2 2a5 5 0 1 1 0-2H80v-46.59L48.59 178H21.9a5 5 0 1 1 0-2H49.41L82 208.59V258H53.9zM34 39.8v1.61L9.41 66H0v-2h8.59L32 40.59V0h2v39.8zM2 300.1a5 5 0 0 1 3.9 3.9H3.83A3 3 0 0 0 0 302.17V256h18v48h-2v-46H2v42.1zM34 241v63h-2v-62H0v-2h34v1zM17 18H0v-2h16V0h2v18h-1zm273-2h14v2h-16V0h2v16zm-32 273v15h-2v-14h-14v14h-2v-16h18v1zM0 92.1A5.02 5.02 0 0 1 6 97a5 5 0 0 1-6 4.9v-2.07a3 3 0 1 0 0-5.66V92.1zM80 272h2v32h-2v-32zm37.9 32h-2.07a3 3 0 0 0-5.66 0h-2.07a5 5 0 0 1 9.8 0zM5.9 0A5.02 5.02 0 0 1 0 5.9V3.83A3 3 0 0 0 3.83 0H5.9zm294.2 0h2.07A3 3 0 0 0 304 3.83V5.9a5 5 0 0 1-3.9-5.9zm3.9 300.1v2.07a3 3 0 0 0-1.83 1.83h-2.07a5 5 0 0 1 3.9-3.9zM97 100a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-48 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 96a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-144a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-96 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm96 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-32 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM49 36a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-32 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM33 68a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 240a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm80-176a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 48a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm112 176a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm-16 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM17 180a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 16a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-32a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM17 84a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm32 64a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm16-16a3 3 0 1 0 0-6 3 3 0 0 0 0 6z'%3E%3C/path%3E%3C/svg%3E\");\n            }\n\n            [name='splash'] {\n                animation: crossfade 10s linear;\n                animation-iteration-count: infinite;\n            }\n        `,\n    ],\n})\nexport class ControlMainViewComponent extends BaseClass {\n    public readonly system = this._state.system;\n\n    public readonly powerOn = () => this._state.powerOn();\n    public get id() {\n        return this._state.id;\n    }\n\n    constructor(\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _state: ControlStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((params) =>\n                params.has('system')\n                    ? this._state.setID(params.get('system'))\n                    : ''\n            )\n        );\n        this.timeout('init', () =>\n            !this._state.id ? this._router.navigate(['/bootstrap']) : ''\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BootstrapComponent } from './bootstrap.component';\nimport { ControlMainViewComponent } from './main-view.component';\n\nconst routes: Routes = [\n    {\n        path: 'bootstrap',\n        component: BootstrapComponent,\n    },\n    {\n        path: 'panel/:system',\n        component: ControlMainViewComponent,\n    },\n    { path: '**', redirectTo: 'bootstrap' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { SpacesService } from '../../../spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from '../../../events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport { Integrations } from '@sentry/tracing';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <div *ngIf=\"loading | async\" class=\"loading-block\">\n            <div class=\"info-block center\">\n                <div class=\"icon\">\n                    <mat-spinner [diameter]=\"64\"></mat-spinner>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``]\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Observable for whether the application is initialising */\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                localStorage.setItem(`${clientId()}_access_token`, `${tkn[0]}`);\n                localStorage.setItem(\n                    `${clientId()}_refresh_token`,\n                    `${tkn[1]}`\n                );\n                localStorage.setItem(\n                    `${clientId()}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        this._loading.next(true);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock = !!this._settings.get('mock');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        this._loading.next(false);\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 5 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) {\n            return;\n        }\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain ? `${protocol}//${host}:${port}` : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem('mock', `${!!mock && !location.href.includes('mock=false')}`);\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","export const environment = {\n    production: true,\n};\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSliderModule } from '@angular/material/slider';\n\nimport { ComponentsModule } from '@placeos/components';\nimport { LightingTooltipComponent } from './lighting-tooltip.component';\nimport { PowerTooltipComponent } from './power-tooltip.component';\nimport { HelpTooltipComponent } from './help-tooltip.component';\nimport { BlindsTooltipComponent } from './blinds-tooltip.component';\nimport { CameraTooltipComponent } from './camera-tooltip.component';\nimport { MicrophoneTooltipComponent } from './microphone-tooltip.component';\nimport { SourceSelectComponent } from './source-select.component';\nimport { SourceSelectModalComponent } from './source-select-modal.component';\nimport { OutputDisplayComponent } from './output-display.component';\nimport { JoystickComponent } from './joystick.component';\nimport { DurationPipe } from './duration.pipe';\n\nconst COMPONENTS: Type<any>[] = [\n    LightingTooltipComponent,\n    PowerTooltipComponent,\n    HelpTooltipComponent,\n    BlindsTooltipComponent,\n    CameraTooltipComponent,\n    MicrophoneTooltipComponent,\n    SourceSelectComponent,\n    SourceSelectModalComponent,\n    OutputDisplayComponent,\n    JoystickComponent,\n\n    DurationPipe\n];\n\nconst MAT_MODULES: any[] = [\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatSliderModule\n];\n\nconst ANGULAR_MODULES: any[] = [FormsModule, ReactiveFormsModule];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        ...MAT_MODULES,\n        ...ANGULAR_MODULES,\n    ],\n    exports: [\n        ComponentsModule,\n        ...COMPONENTS,\n        ...MAT_MODULES,\n        ...ANGULAR_MODULES,\n    ],\n})\nexport class UIModule {}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n    },\n    {\n        name: 'Melbourne',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-03',\n    },\n];\n\nconst levels = [\n    'lvl-00',\n    'lvl-01',\n    'lvl-02',\n    'lvl-03',\n    'lvl-04',\n    'lvl-05',\n    'lvl-06',\n];\nconst mockLevel = (id: string, idx: number, building: any): any => {\n    let map_id = id.substr(4);\n    map_id = `https://s3-ap-southeast-2.amazonaws.com/os.place.tech/16012682998688307492.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('0') ? 'G' : idx}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    levels.map((level, idx) => mockLevel(level, idx, bld))\n).reduce((p, c) => p.concat(c), []);\n","import { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/zones',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.tags === 'org') {\n            return MOCK_ORGS;\n        } else if (request.query_params.tags === 'building') {\n            return MOCK_BUILDINGS;\n        } else if (request.query_params.tags === 'level') {\n            return MOCK_LEVELS;\n        }\n        throw { status: 404, message: 'Zones not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.name === 'catering') {\n            return [];\n        }\n        if (request.query_params.name === 'desks') {\n            return {\n                details: [\n                    {\n                        id: 'table-01.001',\n                        name: '1.001',\n                        bookable: true,\n                        group: '',\n                    },\n                    {\n                        id: 'table-01.002',\n                        name: '1.002',\n                        bookable: true,\n                        group: '',\n                    },\n                    {\n                        id: 'table-01.003',\n                        name: '1.003',\n                        bookable: true,\n                        group: '',\n                    },\n                    {\n                        id: 'table-01.004',\n                        name: '1.004',\n                        bookable: true,\n                        group: '',\n                    },\n                    {\n                        id: 'table-01.005',\n                        name: '1.005',\n                        bookable: false,\n                        group: '',\n                    },\n                    {\n                        id: 'table-01.006',\n                        name: '1.006',\n                        bookable: true,\n                        group: '',\n                    },\n                ],\n            };\n        }\n        return {};\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id/children',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        return [\n            {\n                zone: {\n                    id: 'bld-01_lvl-01',\n                    name: 'Level 1'\n                },\n                metadata: {\n                    desks: {\n                        details: [\n                            {\n                                id: 'table-01.001',\n                                name: '1.001',\n                                bookable: true,\n                                group: '',\n                            },\n                            {\n                                id: 'table-01.002',\n                                name: '1.002',\n                                bookable: true,\n                                group: '',\n                            },\n                            {\n                                id: 'table-01.003',\n                                name: '1.003',\n                                bookable: true,\n                                group: '',\n                            },\n                            {\n                                id: 'table-01.004',\n                                name: '1.004',\n                                bookable: true,\n                                group: '',\n                            },\n                            {\n                                id: 'table-01.005',\n                                name: '1.005',\n                                bookable: false,\n                                group: '',\n                            },\n                            {\n                                id: 'table-01.006',\n                                name: '1.006',\n                                bookable: true,\n                                group: '',\n                            },\n                        ],\n                    },\n                },\n            },\n        ];\n    },\n});\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Alexandre Chuvand',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Landell Archer',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley'\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', '']\n}\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i).join(' ');\n};\n\nexport const MOCK_SPACES = [\n    { name: 'Meeting Room 1.01', map_id: 'area-1.01-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.02', map_id: 'area-1.02-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.03', map_id: 'area-1.03-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.04', map_id: 'area-1.04-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.05', map_id: 'area-1.05-status', zones: ['bld-01_lvl-01'], bookable: false },\n    { name: 'Meeting Room 1.06', map_id: 'area-1.06-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.07', map_id: 'area-1.07-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.08', map_id: 'area-1.08-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.09', map_id: 'area-1.01-status', zones: ['bld-01_lvl-01'] },\n    { name: 'Meeting Room 1.10', map_id: 'area-1.10-status', zones: ['bld-01_lvl-01'] },\n].map(d => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\n\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nimport * as dayjs from 'dayjs';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2 ? event_status[2] : rnd < 5 ? event_status[0] : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    let attendees: any[] = MOCK_STAFF.concat(MOCK_GUESTS).filter((_) => predictableRandomInt(9999) % 3 === 0);\n        attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({\n        ...space,\n        resource: true,\n    });\n    const has_active_user = predictableRandomInt(9999) % 2 === 0;\n    if (has_active_user) {\n        attendees.push(ACTIVE_USER);\n    }\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: has_active_user ? ACTIVE_USER.email : attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email'),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start: nextEventTime(true),\n        event_end: nextEventTime(),\n        timezone: 'Sydney',\n        all_day: false,\n        location: 'clear text location',\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {},\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/users/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.id === 'current') {\n            return ACTIVE_USER;\n        }\n        const person = MOCK_STAFF.find(user => user.email === request.route_params.id);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_STAFF.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const id = decodeURIComponent(request.route_params.id);\n        const person = MOCK_STAFF.find(user => user.email === id);\n        if (person) {\n            return {\n                ...person,\n                location: generateLocation()\n            };\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_GUESTS.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const person = MOCK_GUESTS.find(user => user.email === request.route_params.email);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email/meetings',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.email) {\n            const email = request.route_params.email.toLowerCase();\n            const events = MOCK_EVENTS.filter(\n                (event) => event.attendees.find(user => user.email.toLowerCase() === email)\n            );\n            return events;\n        }\n        throw { status: 404, message: `Unable to find meetings with guest with email ${request.route_params.email}` };\n    },\n});\n\n\n\nconst LOCATION_TYPES = ['meeting', 'desk_id', 'laptop', 'mobile', 'geo', 'none'];\n\nfunction generateLocation() {\n    const type = LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n    const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n    const level_spaces = MOCK_SPACES.filter(s => s.zones.includes(level.id));\n    const space = level_spaces[predictableRandomInt(level_spaces.length)] || {};\n    const location: HashMap = {};\n    switch (type) {\n        case 'meeting':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                system: space.id,\n                map_id: space.map_id,\n                event_id: ''\n            };\n            break;\n        case 'desk_id':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                map_id: space.map_id,\n                checked_in: dayjs().unix()\n            };\n            break;\n        case 'laptop':\n        case 'mobile':\n            location[type] = {\n                building: level.parent_id,\n                level: level.id,\n                x: +predictableRandomInt(10000),\n                y: +predictableRandomInt(5000),\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n        case 'geo':\n            location.geo = {\n                lat: predictableRandomInt(180) - 90,\n                lon: predictableRandomInt(360) - 180,\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n    }\n    return location;\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    module: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    module: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public readonly recording = true;\n    public power: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.power = _data.power || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $power_on() {\n        console.log('Power On');\n        this.power = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.power = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(source: string, value: number) {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(source: string, state: boolean = true) {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string) {\n        this.$mute(source, false);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find(_ => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        module: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        module: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        module: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        module: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        module: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        module: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        module: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        module: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        module: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        module: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        module: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        module: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        module: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blinds',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(space: HashMap, overrides: Partial<MockBookingModule> = {}) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings = MOCK_EVENTS.filter((event) =>\n        event.attendees.find((u) => u.email === space.email)\n    );\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nMOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/systems',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        return MOCK_SPACES;\n    }\n});\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","import { registerMockEndpoint } from '@placeos/ts-client';\nimport { predictableRandomInt } from '@placeos/common';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER } from './users.data';\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const events = MOCK_EVENTS.filter(\n            (event) => !!event.attendees.find((user) => user.email === ACTIVE_USER.email)\n        );\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = { ...request.body, id: `-cal-event-${predictableRandomInt(999)}` };\n        new_event.attendees.forEach(user => {\n            if (user.zones) {\n                user.resource = true;\n            }\n        });\n        MOCK_EVENTS.push(new_event);\n        return new_event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const item = MOCK_EVENTS.find((event) => event.id === request.route_params.id);\n        if (item) {\n            return item;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex((event) => event.id === request.route_params.id);\n        if (index >= 0) {\n            return MOCK_EVENTS.splice(index, 1, request.body);\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id/guests/:email/checkin',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const event = MOCK_EVENTS.find(event => event.id === request.route_params.id);\n        if (event) {\n            const checked_in = (event.extension_data as any).checked_in || [];\n            (event.extension_data as any).checked_in = checked_in.concat([request.route_params.email]);\n            return event;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => []\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/availability',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const start = dayjs(+request.query_params.period_start * 1000);\n        const end = dayjs(+request.query_params.period_end * 1000);\n        const zones = (request.query_params.zone_ids || '').split(',').filter(i => !!i);\n        const systems = (request.query_params.system_ids || '').split(',').filter(i => !!i);\n\n        const spaces = MOCK_SPACES.filter((space) =>\n            zones.length\n                ? zones.reduce((has, zone) => has && space.zones.includes(zone), true)\n                : systems.length\n                    ? systems.includes(space.id)\n                    : true\n        )\n            .filter((space) => {\n                const bookings = MOCK_EVENTS.filter((event) =>\n                    event.attendees.find((user) => user.id === space.id)\n                );\n                for (const event of bookings) {\n                    const event_start = dayjs(event.event_start * 1000);\n                    const event_end = dayjs(event.event_end * 1000);\n                    if (\n                        (start.isAfter(event_start, 's') && start.isBefore(event_end, 'm')) ||\n                        (end.isAfter(event_start, 'm') && end.isBefore(event_end, 'm')) ||\n                        (event_start.isAfter(start, 'm') && event_start.isBefore(end, 'm'))\n                    ) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n        const output = {};\n        spaces.forEach(space => output[space.email] = space);\n        return output;\n    },\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        return [];\n    },\n});\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSliderModule } from '@angular/material/slider';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from '../../../../libs/components/src/lib/app.component';\nimport { environment } from '../environments/environment';\nimport { UIModule } from './ui/ui.module';\nimport { BootstrapComponent } from './bootstrap.component';\nimport { ControlMainViewComponent } from './main-view.component';\nimport { TopbarHeaderComponent } from './topbar-header.component';\nimport { ControlPageViewComponent } from './page-view.component';\nimport { ControlStatusBarComponent } from './status-bar.component';\nimport { ControlAdvancedViewComponent } from './advanced-view.component';\n\nimport '@placeos/mocks';\n\nimport * as Sentry from \"@sentry/angular\";\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        BootstrapComponent,\n        ControlMainViewComponent,\n        TopbarHeaderComponent,\n        ControlPageViewComponent,\n        ControlStatusBarComponent,\n        ControlAdvancedViewComponent\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        UIModule,\n        MatSliderModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}