{"version":3,"sources":["./apps/booking-panel/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./libs/common/src/lib/base.class.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/common/src/lib/general.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/booking-panel/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/angular-animations.ts","./libs/users/src/lib/user.utilities.ts","./libs/users/src/lib/user.class.ts","./libs/common/src/lib/user-state.ts","./libs/components/src/lib/binding.directive.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/components.module.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/events/src/lib/helpers.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./apps/booking-panel/src/app/bootstrap.component.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/events/src/lib/event.class.ts","./libs/events/src/lib/utilities.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/guests.fn.ts","./libs/users/src/lib/staff.fn.ts","./libs/users/src/lib/users.module.ts","./libs/form-fields/src/lib/user-search-field.component.ts","./libs/form-fields/src/lib/time-field.component.ts","./libs/form-fields/src/lib/duration-field.component.ts","./apps/booking-panel/src/app/overlays/booking-modal.component.ts","./apps/booking-panel/src/app/overlays/embedded-control-modal.component.ts","./apps/booking-panel/src/app/panel/panel-state.service.ts","./apps/booking-panel/src/app/panel/panel-details.component.ts","./apps/booking-panel/src/app/panel/panel-booking-list.component.ts","./apps/booking-panel/src/app/panel/panel-status.component.ts","./apps/booking-panel/src/app/panel/topbar.component.ts","./apps/booking-panel/src/app/panel/panel.component.ts","./apps/booking-panel/src/app/panel-array.component.ts","./apps/booking-panel/src/app/panel-select.component.ts","./apps/booking-panel/src/app/app-routing.module.ts","./libs/form-fields/src/lib/form-fields.module.ts","./apps/booking-panel/src/app/overlays/overlays.module.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/realtime/meeting.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/index.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/components/src/lib/app.component.ts","./libs/common/src/lib/placeos.ts","./apps/booking-panel/src/app/app.module.ts","./apps/booking-panel/src/environments/environment.prod.ts","./apps/booking-panel/src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","BaseClass","_timers","_intervals","_subscriptions","_initialised","initialised","this","asObservable","getValue","destroy","key","clearTimeout","clearInterval","unsub","name","fn","delay","Function","setTimeout","setInterval","Subscription","unsubscribe","contains","subs","Object","filter","k","includes","CONFIRM_METADATA","height","width","maxHeight","maxWidth","ConfirmModalComponent","_dialog_ref","_data","event","title","content","confirm_text","cancel_text","icon","class","disableClose","enableClose","emit","reason","_app_name","setAppName","log","type","msg","args","stream","force","app_name","window","debug","colors","console","getItemWithKeys","map","shift","length","array","el","pos","arr","indexOf","find","i","randomInt","ceil","floor","Math","random","openConfirmModal","data","dialog","ref","open","race","componentInstance","pipe","_","toPromise","afterClosed","loading","s","close","start1","end1","start2","end2","seed","str","h","imul","charCodeAt","xmur3","rand","a","b","c","d","t","timeFormatString","localeString","Date","toLocaleTimeString","document","querySelector","getAttribute","navigator","language","toLowerCase","is24HourTime","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","addEventListener","mapKey","last_down","next","preventDefault","combo","combination","Array","split","validCombination","push","last_key","updateCombinationEndList","subscribe","count","presses","state","reduce","v","replace","non_meta","DEFAULT_SETTINGS","composer","domain","route","protocol","port","use_domain","local_login","app","description","short_name","logo","src","logo_dark","general","SettingsService","_title","super","_overrides","_subjects","_observables","now","time","built","init","value","getTitle","setTitle","get","location","pathname","slice","join","toUpperCase","application","settings","override_settings","override","hasOwnProperty","_service","_available","_activated","_timer","notify","message","action","on_action","config","snackbar_ref","panelClass","duration","dismiss","onAction","notifySuccess","notifyError","error","notifyInfo","info","opacity","USER_DOMAIN","User","email","first_name","last_name","phone","organisation","notes","photo","username","organizer","groups","checked_in","required","response_status","sys_admin","support","extension_data","assistance_required","is_external","endsWith","visit_expected","preferred_beverage","accepted_terms_conditions","card_number","staff_id","is_logged_in","_current_user","currentUser","jest","retry","user","BindingDirective","_element","_renderer","index","params","modelChange","bindVariable","changes","sys","mod","bind","model","previousValue","execute","on_event","subscription","listen","nativeElement","binding","exec","result","ActionIconComponent","className","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","IconComponent","PopoutMenuComponent","actions","timeout","show","MAP_FEATURE_DATA","StatusOverlayComponent","links","DEFAULT_KEYS","VirtualKeyboardComponent","_overlay","keyset","_overlay_ref","onFocus","enabled","onBlur","ngOnDestroy","blur","focus","_portal","create","positionStrategy","position","global","bottom","centerHorizontally","attach","dispose","cursor_pos","selectionStart","substr","max","dispatchEvent","InputEvent","updateKeyState","focusInput","selectionEnd","BuildingLevel","parent_id","display_name","map_id","capacity","locations","parts","number","Building","raw_data","disc_info","discovery_info","zone_id","zone","extras","extra_id","extra_name","loan_items","levels","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl","lvl_features","feature","level_id","bindings","timezone","catering_hours","start","end","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","Organisation","tags","_settings","OrganisationService","_router","_buildings","_active_building","_levels","building_list","level_list","active_building","active_levels","bld","levelsForBuilding","_building_settings","overrides","buildingSettings","bld_id","building","_organisation","details","buildings","id_list","tries","load","catch","err","min","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","auth","org","list","org_zone","navigate","limit","localStorage","getItem","sort","localeCompare","m","prev","curr","concat","setItem","Space","feature_list","features","bookable","zones","support_url","image","configurations","level","availability","SpacesService","_org","_list","_compare","space","loadSpaces","predicate","valid_spaces","levelWithID","GlobalLoadingComponent","_spaces","MAT_MODULES","ComponentsModule","provide","useValue","SpaceSelectItemComponent","DURATION_MAP","month","months","week","weeks","day","days","hour","hours","minute","minutes","DEFAULT_RULES","auto_approve","hidden","stringToMinutes","addToDate","add","date","checkRulesMatch","host","ruleset","matches","conditions","every","is_before","is_after","min_length","max_length","primary","summary","can_edit","resource","system","starts_at","ends_at","status","valueOf","SpaceSelectModalComponent","spaces","space_types","available_spaces","q","query","cal","zone_ids","period_start","period_end","filtered_spaces","filterSpacesFromRules","rulemap","rules","rulesForSpace","forEach","multiple","space_map","save","metadata","SPACE_COUNT","BootstrapComponent","system_list","filtered_list","selected_system","bootstrap","configure","system_id","clearBootstrap","removeItem","space_list","queryParamMap","has","checkBootstrapped","search","CateringItem","category","unit_price","quantity","discount_cap","accept_points","options","total_cost","options_string","CateringOrder","event_id","items","item_count","amount","item","charge_code","invoice_number","deliver_at","getTime","_default_user","event_start","roundToNearestMinutes","nearestTo","event_end","calendar","creator","attendees","u","resources","body","private","all_day","meeting_url","online_meeting_url","meeting_id","online_meeting_id","meeting_provider","online_meeting_provider","recurring","recurring_master_id","organiser","master","recurrence","range_start","range_end","interval","pattern","days_of_week","old_system","attachments","some","eventStatus","catering","f","obj","set","breakdown","is_today","setMinutes","setHours","NewUserModalComponent","form","fields","generateUserForm","markAllAsTouched","valid","new_user","UserFormComponent","controls","invalid","touched","searchGuests","searchStaff","UserSearchFieldComponent","query_fn","search$","Subject","search_results$","debounceTime","distinctUntilChanged","of","guests","forkJoin","catchError","an_array","stack","res","pop","isArray","reverse","flatten","search_str","cancelReset","blurInput","_input_el","user_list","active_user","new_value","_onChange","resetSearchString","disabled","_onTouch","useExisting","multi","setValue","TimeFieldComponent","step","no_past_times","show_select","_time_options","generateAvailableTimes","getMinutes","select_field","openedChange","datestamp","show_past","blocks","startOfDay","endOfDay","showSelect","DurationFieldComponent","specialPreprops","duration_options","generateDurationOptions","option","format","BookingModalComponent","room_ids","EmbeddedControlModalComponent","control_url","countdown","tick","reset","$event","currentBooking","bkn","PanelStateService","_dialog","_poll","_bookings","_system","bookings","current","booking","is_active","pending_period","pending","bindTo","l","openBookingModal","makeBooking","startMeeting","meeting","endCurrent","booking_list","control_ui","callWaiter","on_change","updateProperty","PanelDetailsComponent","_state","newEvent","newBooking","confirmWaiter","viewControl","PanelBookingListComponent","started","starting_in","diff","differenceInSeconds","seconds","upcoming","PanelStatusComponent","PanelTopbarComponent","BookingPanelComponent","_route","topbar","paramMap","routes","path","component","BookingPanelArrayComponent","BookingPanelSelectComponent","system_name","system_icon","system_status","active_system","redirectTo","AppRoutingModule","useHash","FormFieldsModule","SharedOverlaysModule","MOCK_MENU","group","generateCateringOrder","mx","fill","idx","MOCK_ORGS","created_at","updated_at","triggers","MOCK_BUILDINGS","MOCK_LEVELS","num","mockLevel","p","MOCK_METADATA","contacts","ZONE_MOCKS","padString","method","callback","request","query_params","area_management","location_services","route_params","generateMockDeskMetadata","map_regions","areas","properties","label_location","x","y","DESK_FEATURES","desks","registerMocks","DOMAIN","PREDEF_USERS","ACTIVE_USER","MOCK_STAFF","MOCK_GUESTS","randomSpaceFeatures","numFeatures","r","MOCK_SPACES","linked","long_name","searchable","controlable","cost_hour","setup","linked_rooms","generateMockSpace","EVENT_TIME","startOf","nextEventTime","unix","event_status","randomStatus","rnd","MOCK_EVENTS","PEOPLE","unshift","event_spaces","USER_MOCKS","person","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","last_seen","subtract","geo","lat","lon","RoomModule","volume","connected","active","input_list","output_list","env_sources","inputs","outputs","source","input","output","$updateState","following","mute","$mute","locked","Mic1","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_before","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","subSeconds","MockLocationServicesModule","overview","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","area_id","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","CaptureModule","live","remaining","$start","createCaptureModule","MeetingPushModule","supported_meeting_url","createMeetingPushModule","SYSTEM_MOCKS","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","MeetingPush","createSystem","EVENT_MOCKS","events","new_event","findIndex","splice","CALENDAR_MOCKS","user2","user3","handleSpaceAvailability","system_ids","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","BOOKING_MOCKS","updateBooking","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","reload","copy","clipboard","readText","tkn","addHours","mock","origin","hostname","url","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","setupPlace","onInitError","cache","isEnabled","available","hash","activateUpdate","activated","checkForUpdate","setupCache","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","AppModule","showDialog","deps","bootstrapModule"],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 7004;\nmodule.exports = webpackEmptyAsyncContext;","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","\nconst general = {\n}\n\n\nconst app = {\n    name: 'Bookings',\n    title: 'PlaceOS',\n    description: 'Bookings UI',\n    short_name: 'PlaceOS',\n    logo: {\n        type: 'img',\n        src: 'assets/logo-light.svg'\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg'\n    },\n    general\n}\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/bookings',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"9d766fe\",\n    \"hash\": \"9d766fe\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"9d766fe\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1631247708184\n};\n/* tslint:enable */\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = '@place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(\n            user.phone || '',\n            Validators.pattern(/[+\\-()0-9]{1,24}/g)\n        ),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import {\n    Directive,\n    Input,\n    SimpleChanges,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    ElementRef,\n    Renderer2,\n    EventEmitter,\n    Output,\n} from '@angular/core';\nimport { onlineState, authority, getModule } from '@placeos/ts-client';\n\nimport { BaseClass } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Directive({\n    selector: 'i[bind], [binding], co-bind',\n})\nexport class BindingDirective<T = any>\n    extends BaseClass\n    implements OnInit, OnChanges, OnDestroy {\n    /** ID of the system to bind */\n    @Input() public sys: string;\n    /** Class name of the module to bind */\n    @Input() public mod: string;\n    /** Index of the system to bind */\n    @Input() public index = 1;\n    /** Status variable to bind to */\n    @Input() public bind: string;\n    /** Method to execute */\n    @Input() public exec: string;\n    /** Event to listen for on the parent */\n    @Input('onEvent') public on_event: string;\n    /** ID of the system to bind to */\n    @Input() public params: any[] = [];\n    /** Current value of the binding */\n    @Input() public model: T;\n    /** Emitter for changes to the value of the binding */\n    @Output() public modelChange = new EventEmitter<T>();\n\n    constructor(\n        private _element: ElementRef<HTMLElement>,\n        private _renderer: Renderer2\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        onlineState()\n            ?.pipe(first((_) => _))\n            .subscribe((_) => this.bindVariable());\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.sys || changes.mod || changes.bind) {\n            this.bindVariable();\n        }\n        if (\n            changes.model &&\n            changes.model.previousValue !== this.model &&\n            this.model != null\n        ) {\n            this.execute();\n        }\n        if (changes.on_event && this.on_event) {\n            this.subscription(\n                'on_event',\n                this._renderer.listen(\n                    this._element.nativeElement,\n                    this.on_event,\n                    () => this.execute()\n                )\n            );\n        }\n    }\n\n    /** Bind to set status variable */\n    private bindVariable() {\n        if (authority() && this.bind && this.sys && this.mod) {\n            const module = getModule(this.sys, this.mod, this.index);\n            const binding = module.binding(this.bind);\n            this.subscription('binding', binding.bind());\n            this.subscription(\n                'on_changes',\n                binding.listen().subscribe((value) =>\n                    setTimeout(() => {\n                        this.model = value;\n                        this.modelChange.emit(this.model);\n                    }, 10)\n                )\n            );\n        }\n    }\n\n    /** Excute the set method on the module */\n    private execute() {\n        if (authority() && this.exec && this.sys && this.mod) {\n            const module = getModule(this.sys, this.mod, this.index);\n            if (this.bind) this.params = [this.model];\n            module.execute(this.exec, this.params).then((result) => {\n                // Emit exec result if not bound to status variable\n                if (!this.bind) {\n                    this.model = result;\n                    this.modelChange.emit(this.model);\n                }\n            });\n        }\n    }\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T) {\n        this.model = value;\n        this.modelChange.emit(this.model);\n        this.execute();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                ratio$: this._on_changes.pipe(\n                                    map((_) => _.ratio)\n                                ),\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        try {\n            if (!getViewer(this.viewer) || this.loading) {\n                return this.timeout('update_view', () => this.updateView());\n            }\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        try {\n            updateViewer(this.viewer, {\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                desired_center: this.center,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                updateViewer(this.viewer, {\n                    styles: this.styles,\n                    features: [],\n                    labels: this.labels,\n                    actions: this.actions,\n                    options: this.options,\n                });\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        if (!id || !this.viewer) return;\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MapPolygonComponent } from './map-polygon.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    MapPolygonComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { Space, SpacesService } from '@placeos/spaces';\n\n@Component({\n    selector: '[app-bootstrap]',\n    template: `\n        <div\n            class=\"rounded shadow m-4 bg-white overflow-hidden mx-auto text-center flex flex-col items-center\"\n        >\n            <h2 class=\"bg-primary text-white py-2 px-4 m-0 w-full text-2xl\">\n                Booking Panel Setup\n            </h2>\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <p class=\"description py-4\">\n                    Input the PlaceOS <em>System ID</em> to bootstrap\n                </p>\n                <mat-form-field appearance=\"outline\">\n                    <mat-label>System ID</mat-label>\n                    <input\n                        matInput\n                        [(ngModel)]=\"system_id\"\n                        [matAutocomplete]=\"auto\"\n                        placeholder=\"System ID\"\n                        (ngModelChange)=\"filter($event)\"\n                    />\n                </mat-form-field>\n                <mat-autocomplete #auto=\"matAutocomplete\">\n                    <mat-option\n                        *ngFor=\"let option of filtered_list\"\n                        [value]=\"option.id\"\n                    >\n                        <div class=\"leading-tight\">\n                            <div class=\"name\">{{ option.name }}</div>\n                            <div class=\"text-xs text-dark-fade\">\n                                {{ option.id }}\n                            </div>\n                        </div>\n                    </mat-option>\n                </mat-autocomplete>\n                <button\n                    mat-button\n                    [disabled]=\"!system_id\"\n                    (click)=\"bootstrap()\"\n                >\n                    Submit\n                </button>\n            </ng-container>\n        </div>\n        <ng-template #load_state>\n            <div load class=\"my-16 flex flex-col items-center\">\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <div class=\"m-4\">Loading system data...</div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: #f0f0f0;\n                background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='28' height='49' viewBox='0 0 28 49'%3E%3Cg fill-rule='evenodd'%3E%3Cg id='hexagons' fill='%23ddd' fill-opacity='1' fill-rule='nonzero'%3E%3Cpath d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\");\n            }\n\n            :host > div {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            mat-form-field {\n                width: calc(100% - 2rem);\n            }\n\n            button {\n                width: 8rem;\n                margin: 0.5rem;\n                margin-top: 0;\n            }\n        `,\n    ],\n})\nexport class BootstrapComponent extends BaseClass implements OnInit {\n    /** List of available systems */\n    public system_list: Space[] = [];\n    /** List of available systems */\n    public filtered_list: Space[] = [];\n    /** Whether application data is loading */\n    public loading: boolean;\n    /** ID of the system to bootstrap */\n    public system_id: string;\n    /** Selected system to bootstrap */\n    public selected_system: Space = null;\n    /** Whether input field is focused */\n    public input_focus: boolean;\n\n    constructor(\n        private _spaces: SpacesService,\n        private route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        this.system_list = this._spaces.space_list || [];\n        this.filter('');\n        this.loading = false;\n        this.subscription(\n            'route.query',\n            this.route.queryParamMap.subscribe((params) => {\n                if (params.has('clear') && !!params.get('clear')) {\n                    this.clearBootstrap();\n                }\n                if (params.has('system_id') || params.has('sys_id')) {\n                    this.system_id =\n                        params.get('system_id') || params.get('sys_id');\n                    this.bootstrap();\n                }\n            })\n        );\n        this.checkBootstrapped();\n    }\n\n    /**\n     * Setup the default system for the application to bind to\n     */\n    public readonly bootstrap = () => this.configure(this.system_id);\n\n    /**\n     * Check if the application has previously been bootstrapped\n     */\n    private checkBootstrapped(): void {\n        this.loading = true;\n        if (localStorage) {\n            const system_id = localStorage.getItem('PLACEOS.BOOKINGS.system');\n            if (system_id) {\n                this._router.navigate(['panel', system_id]);\n                return;\n            }\n        }\n        this.loading = false;\n    }\n\n    /**\n     * Save the bootstrapped ID and redirect to the panel for that ID\n     * @param system_id System to bootstrap\n     */\n    private configure(system_id: string): void {\n        this.loading = true;\n        if (localStorage) {\n            localStorage.setItem('PLACEOS.BOOKINGS.system', system_id);\n            localStorage.setItem('trust', 'true');\n            localStorage.setItem('fixed_device', 'true');\n        }\n        this._router.navigate(['panel', system_id]);\n        this.loading = false;\n    }\n\n    /**\n     * Remove any previously set bootstrapping details\n     */\n    private readonly clearBootstrap = () =>\n        localStorage.removeItem('PLACEOS.BOOKINGS.system');\n\n    public filter(search: string) {\n        const s = search.toLowerCase();\n        this.filtered_list = this.system_list\n            .filter(\n                (i) => i.name.toLowerCase().includes(s) || i.id.includes(search)\n            )\n            .slice(0, 100);\n    }\n}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** URL of the associated meeting */\n    public readonly meeting_url: string;\n    /** URL of the associated meeting */\n    public readonly meeting_id: string;\n    /** URL of the associated meeting */\n    public readonly meeting_provider: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.meeting_url = data.meeting_url || data.online_meeting_url || '';\n        this.meeting_id = data.meeting_id || data.online_meeting_id || '';\n        this.meeting_provider =\n            data.meeting_provider || data.online_meeting_provider || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.is_external) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration, [endInFuture]),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data?.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.extension_data?.visitor_type),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(\n            event.extension_data?.needs_parking || false\n        ),\n        system: new FormControl(event.system),\n    });\n    form.get('organiser').valueChanges.subscribe((o) =>\n        form.controls.host.setValue(o?.email)\n    );\n    form.get('resources').valueChanges.subscribe((l) =>\n        form.controls.system.setValue(l.length ? l[0] : null)\n    );\n    if (event.id) {\n        form.get('host').disable();\n        form.get('organiser').disable();\n    }\n    if (event.state === 'started') form.get('date').disable();\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { del, get, patch } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from './user.class';\nimport { Observable } from 'rxjs';\n\nconst GUEST_ENDPOINT = '/api/staff/v1/guests';\n\nexport interface GuestsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n}\n\n/**\n * Search guests\n * @param q Search string for filtering guests\n */\nexport function searchGuests(q: string): Observable<GuestUser[]> {\n    const query = toQueryString({ q });\n    return get(`${GUEST_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * List guests\n * @param q Parameters to pass to the API request\n */\nexport function queryGuests(q: GuestsQueryParams): Observable<GuestUser[]> {\n    const query = toQueryString({ ...q });\n    return get(`${GUEST_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * Get guest details\n * @param id ID of the guest\n */\nexport function showGuest(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Update guest metadata\n * @param id ID of the guest\n * @param data New metadata state\n */\nexport function updateGuest(id: string, data: Partial<GuestUser>) {\n    return patch(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, data).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Remove a guest\n * @param id ID of the guest to remove\n */\nexport function removeGuest(id: string) {\n    return del(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * List upcoming meetings for a guest\n * @param id ID of the guest\n */\nexport function listGuestMeetings(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}/meetings`).pipe(\n        map((list) => list.map((item) => new CalendarEvent(item)))\n    );\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n    Component,\n    OnInit,\n    forwardRef,\n    Input,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of, forkJoin } from 'rxjs';\nimport {\n    switchMap,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    catchError,\n} from 'rxjs/operators';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { searchGuests, searchStaff, User } from '@placeos/users';\n\n@Component({\n    selector: 'a-user-search-field',\n    template: `\n        <div class=\"user-search-field text-black\" form-field>\n            <mat-form-field overlay appearance=\"outline\">\n                <input\n                    #input\n                    matInput\n                    keyboard\n                    name=\"user-search\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event || '')\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"placeholder || 'Search for user...'\"\n                    [matAutocomplete]=\"auto\"\n                    (keyup.enter)=\"\n                        validate && validate(search_str)\n                            ? setValue(search_str)\n                            : ''\n                    \"\n                    (blur)=\"resetSearchString()\"\n                    (focus)=\"cancelReset()\"\n                />\n                <app-icon matPrefix class=\"text-2xl relative\">search</app-icon>\n                <mat-spinner\n                    *ngIf=\"loading\"\n                    matSuffix\n                    diameter=\"16\"\n                ></mat-spinner>\n            </mat-form-field>\n            <mat-autocomplete\n                #auto=\"matAutocomplete\"\n                (optionSelected)=\"setValue($event.option.value)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of user_list\"\n                    (click)=\"setValue(option); blurInput()\"\n                >\n                    <div class=\"leading-tight\">{{ option.name }}</div>\n                    <div class=\"text-xs text-black opacity-60\">\n                        {{ option.email }}\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"search_str && validate && validate(search_str)\"\n                    class=\"relative pointer-events-none\"\n                >\n                    <div\n                        class=\"absolute inset-0 px-4 pointer-events-auto\"\n                        (mousedown)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (touchstart)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (click)=\"\n                            setValue(search_str);\n                            $event.stopPropagation();\n                            $event.preventDefault()\n                        \"\n                    >\n                        <div class=\"pointer-events-none\">\n                            Add external attendee \"{{ search_str }}\"\n                        </div>\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"!user_list?.length && (search_str || error)\"\n                    [disabled]=\"!empty_fn\"\n                    (click)=\"empty_fn()\"\n                >\n                    {{ search_str ? 'No users found.' : '' }} {{ error }}\n                </mat-option>\n            </mat-autocomplete>\n        </div>\n    `,\n    styles: [\n        `\n            :host,\n            mat-form-field {\n                width: 100%;\n            }\n\n            app-icon {\n                top: 0.15em;\n                left: -0.15em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserSearchFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Placeholder text to display */\n    @Input() public placeholder: string;\n    /** Limit available options to these */\n    @Input() public options: User[];\n    /** Whether guests should also show when searching for users */\n    @Input() public guests: boolean;\n    /** Message to display when no user matches have been found */\n    @Input() public error = '';\n    /** Function to validate the search string */\n    @Input() public validate: (s: string) => boolean;\n    /** Function to call when empty list option is clicked */\n    @Input() public empty_fn: () => void;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any, s?: string) => boolean;\n\n    @Input() public query_fn: (_: string) => Observable<User[]> = (q) =>\n        searchStaff(q);\n    /** Currently selected user */\n    public active_user: User;\n    /** User list to display */\n    public user_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** List of users from an API search */\n    public search_results$: Observable<User[]> = this.search$.pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap((query) => {\n            this.loading = true;\n            return this.options && this.options.length > 0\n                ? of(this.options)\n                : query.length >= 3\n                ? !this.guests\n                    ? this.query_fn(query)\n                    : forkJoin([searchStaff(query), searchGuests(query)])\n                : of([]);\n        }),\n        catchError((_) => of([])),\n        map((list: User[]) => {\n            this.loading = false;\n            list = flatten(list);\n            const search = (this.search_str || '').toLowerCase();\n            return list.filter(\n                (item) => !this.filter || this.filter(item, search)\n            );\n        })\n    );\n\n    /** Form control on change handler */\n    private _onChange: (_: User) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User) => void;\n\n    @ViewChild('input', { read: ElementRef })\n    private _input_el: ElementRef<HTMLInputElement>;\n\n    public cancelReset = () => this.clearTimeout('reset');\n\n    public blurInput = () => {\n        this.timeout('blur', () => this._input_el?.nativeElement?.blur());\n    };\n\n    public ngOnInit(): void {\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.user_list = list))\n        );\n    }\n\n    /**\n     * Reset the search string back to the name of the active user\n     */\n    public resetSearchString() {\n        this.timeout(\n            'reset',\n            () => (this.search_str = this.active_user?.name || ''),\n            100\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User | string, email?: string): void {\n        if (\n            typeof new_value === 'string' &&\n            (new_value as any) === this.search_str\n        ) {\n            new_value = new User({\n                name: (this.search_str || email || '').split('@')[0],\n                email: this.search_str || email || '',\n            });\n        }\n        if (!(new_value instanceof User)) return;\n        this.active_user = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User) {\n        this.active_user = value;\n        this.resetSearchString();\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { BaseClass, Identity, timeFormatString } from '@placeos/common';\nimport {\n    addMinutes,\n    endOfDay,\n    format,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n    startOfDay,\n    startOfMinute\n} from 'date-fns';\n\n@Component({\n    selector: 'a-time-field',\n    template: `\n        <mat-form-field\n            appearance=\"outline\"\n            [style.display]=\"show_select ? 'none' : ''\"\n            (keydown.enter)=\"showSelect()\"\n        >\n            <input\n                matInput\n                type=\"time\"\n                [disabled]=\"disabled\"\n                [ngModel]=\"time\"\n                (ngModelChange)=\"setValue($event)\"\n            />\n            <button mat-icon-button matSuffix class=\"relative top-1 -right-1\" (click)=\"showSelect()\">\n                <app-icon class=\"text-2xl text-black text-opacity-50\">\n                    arrow_drop_down\n                </app-icon>\n            </button>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n            <mat-select\n                #select\n                [value]=\"time\"\n                [disabled]=\"disabled\"\n                (valueChange)=\"setValue($event)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of time_options\"\n                    [value]=\"option.id\"\n                >\n                    {{ option.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class TimeFieldComponent\n    extends BaseClass\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step = 15;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Whether past times are allowed */\n    @Input() public no_past_times = true;\n    /** String representing the currently set time */\n    public date: number = new Date().valueOf();\n    /** String representing the currently set time */\n    public time: string = format(new Date(), 'HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n        this.timeout('hide', () => (this.show_select = false));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(\n                this.date,\n                !this.no_past_times,\n                this.step\n            );\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = (this.time || '00:00').split(':');\n        const date = set(this.date, { hours: +time[0], minutes: +time[1] });\n        if (\n            date.getMinutes() % 15 !== 0 &&\n            !this._time_options.find(\n                (time) => time.id === format(date, 'HH:mm')\n            )\n        ) {\n            this._time_options.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            this._time_options.sort((a, b) =>\n                `${a.id}`.localeCompare(`${b.id}`)\n            );\n        }\n        return this._time_options;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        if (this._onChange) {\n            const time = (this.time || '00:00').split(':');\n            const date = startOfMinute(\n                set(this.date, { hours: +time[0], minutes: +time[1] })\n            );\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value || this.date;\n        let date = startOfMinute(this.date);\n        date = roundToNearestMinutes(date, { nearestTo: 5 });\n        this.time = format(date, 'HH:mm');\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription(\n                    'listen_close',\n                    this.select_field.openedChange.subscribe((state) => {\n                        if (!state) {\n                            this.show_select = false;\n                        }\n                    })\n                );\n            }\n        });\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(\n        datestamp: number,\n        show_past: boolean,\n        step: number = 15\n    ): Identity[] {\n        const now = new Date();\n        let date = new Date(datestamp);\n        const blocks = [];\n        if (show_past || (!isSameDay(date, now) && isAfter(date, now))) {\n            date = startOfDay(date);\n        } else if (isAfter(date, now)) {\n            date = now;\n        }\n        date = roundToNearestMinutes(date, { nearestTo: step });\n        const end = endOfDay(date);\n        // Add options for the rest of the day\n        while (isAfter(end, date)) {\n            blocks.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            date = addMinutes(date, step);\n        }\n        return blocks;\n    }\n}\n","import { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Identity } from '@placeos/common';\nimport { formatDuration } from 'date-fns';\nimport * as dayjs from 'dayjs';\n\n\n\n@Component({\n    selector: 'a-duration-field',\n    template: `\n        <div class=\"duration-field\" [attr.disabled]=\"disabled\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    #select\n                    [value]=\"duration\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"duration + ' minutes'\"\n                    (valueChange)=\"setValue($event)\"\n                >\n                    <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n                <mat-error><ng-content></ng-content></mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DurationFieldComponent implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max = 240;\n    /** Minimum duration option available */\n    @Input() public min = 30;\n    /** Step value between options */\n    @Input() public step = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Special case prepopulation i.e. out of step options */\n    @Input() public specialPreprops: Array<number> = [];\n\n    public duration = 60;\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        const date = this.time ? dayjs(this.time) : null;\n\n        // Add special case for 10min duration/prepropulation\n        for (const option of this.specialPreprops) {\n            blocks.push({\n                id: option,\n                name: date\n                    ? `${date.add(option, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(option / 60),\n                          minutes: option % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(option / 60), minutes: option % 60 })}`,\n            });\n        }\n\n        while (time <= max) {\n            blocks.push({\n                id: time,\n                name: date\n                    ? `${date.add(time, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(time / 60),\n                          minutes: time % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(time / 60), minutes: time % 60 })}`,\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","import { Component, OnInit, EventEmitter, Output, Inject } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\n\nimport { CalendarEvent } from '@placeos/events';\nimport { DialogEvent, HashMap, BaseClass } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { first } from 'rxjs/operators';\n\nexport interface BookingModalData extends HashMap {\n    title?: string;\n    space?: Space;\n    date?: number;\n    min_duration?: number;\n    max_duration?: number;\n}\n\nexport async function openBookingModal(\n    data: BookingModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open(BookingModalComponent, {\n        data,\n    });\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')),\n            ref.afterClosed().toPromise(),\n        ])),\n        close: ref.close,\n    };\n}\n\n@Component({\n    selector: 'booking-modal',\n    template: `\n        <header class=\"bg-primary p-4\">\n            <h3>New Booking</h3>\n        </header>\n        <form\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n            class=\"p-2\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.organiser\">\n                <label for=\"host\">Host<span>*</span>:</label>\n                <a-user-search-field\n                    name=\"host\"\n                    formControlName=\"organiser\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex space-x-2\">\n                <div class=\"flex-1\" *ngIf=\"form.controls.date\">\n                    <label for=\"start-time\">Start Time:</label>\n                    <a-time-field\n                        name=\"start-time\"\n                        formControlName=\"date\"\n                    ></a-time-field>\n                </div>\n                <div class=\"flex-1\" *ngIf=\"form.controls.duration\">\n                    <label for=\"duration\">Duration:</label>\n                    <a-duration-field\n                        name=\"duration\"\n                        formControlName=\"duration\"\n                    ></a-duration-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col\" *ngIf=\"form.controls.title\">\n                <label for=\"host\">Title<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"title\"\n                        placeholder=\"Meeting Title\"\n                        formControlName=\"title\"\n                    />\n                    <mat-error>Title is required</mat-error>\n                </mat-form-field>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center p-2 w-full border-t border-gray-200 space-x-2\"\n        >\n            <button\n                mat-button\n                name=\"close\"\n                class=\"inverse w-32\"\n                mat-dialog-close\n            >\n                Cancel\n            </button>\n            <button mat-button name=\"save\" class=\"w-32\" (click)=\"save()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Processing request...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            form {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n    animations: [],\n})\nexport class BookingModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether modal is closing */\n    public closing: boolean;\n    /** Whether the modal is processing a booking request */\n    public loading: boolean;\n    /** Form */\n    public form: FormGroup;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: BookingModalData) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            // organiser: new FormControl(null, [Validators.required]),\n            room_ids: new FormControl([this._data.space?.email || '']),\n            date: new FormControl(this._data.date || new Date().valueOf()),\n            duration: new FormControl(30),\n            title: new FormControl(this._data.title || '', [\n                Validators.required,\n            ]),\n        });\n    }\n\n    /**\n     * Post form data\n     */\n    public save() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            this.loading = true;\n            this.event.emit({\n                reason: 'done',\n                metadata: new CalendarEvent({ ...this.form.value }),\n            });\n        } else {\n            console.log('Invalid form fields. Valid states:', this.form);\n        }\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { BaseClass } from '@placeos/common';\n\nexport interface EmbeddedControlModalData {\n    control_url: string;\n}\n\n@Component({\n    selector: 'embedded-control-modal',\n    template: `\n        <div class=\"absolute inset-0 bg-white\"></div>\n        <div\n            class=\"absolute w-screen overflow-hidden bg-primary\"\n            modal\n            [@show]\n            (window:click)=\"reset()\"\n        >\n            <div class=\"h-full w-full border-none\">\n                <iframe\n                    class=\"h-full w-full border-none\"\n                    [src]=\"control_url | safe: 'resource'\"\n                ></iframe>\n            </div>\n        </div>\n        <div class=\"absolute top-0 left-0 flex items-center h-12\">\n            <div countdown class=\"text-2xl mx-2\">{{ countdown }}</div>\n            <button\n                mat-icon-button\n                class=\"close\"\n                (click)=\"close()\"\n                (contextmenu)=\"$event.preventDefault()\"\n            >\n                <app-icon class=\"text-2xl mx-2\">close</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            [modal] {\n                height: calc(100vh - 3em);\n                box-sizing: content-box;\n                border: 2px solid #fff;\n                border-top: 1px solid #ccc;\n                transform: translate(-50%, calc(-50% + 1.75em));\n            }\n\n            .overlay {\n                position: absolute;\n                top: 0;\n                right: 0;\n                display: flex;\n                align-items: center;\n                height: 3em;\n            }\n        `,\n    ],\n    animations: [\n        trigger('show', [\n            transition(':enter', [\n                style({ opacity: 0 }),\n                animate(500, style({ opacity: 1 })),\n            ]),\n            transition(':leave', [\n                style({ opacity: 1 }),\n                animate(1000, style({ opacity: 0 })),\n            ]),\n        ]),\n    ],\n})\nexport class EmbeddedControlModalComponent extends BaseClass implements OnInit {\n    /** Control URL to embed into the modal */\n    public readonly control_url: string = this._data.control_url;\n    /** Display value for the time remain until the modal automatically closes */\n    public countdown: number;\n\n    constructor(\n        private _dialog_ref: MatDialogRef<EmbeddedControlModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: EmbeddedControlModalData\n    ) {\n        super();\n        this.countdown = 30;\n    }\n\n    public ngOnInit(): void {\n        this.countdown = 30;\n        this.interval('countdown', () => this.tick(), 1000);\n    }\n\n    /**\n     * Close the modal\n     */\n    public close() {\n        this._dialog_ref.close();\n        this.countdown = 30;\n    }\n\n    /**\n     * User confirmation of the content of the modal\n     */\n    public reset() {\n        this.countdown = 30;\n        this.interval('countdown', () => this.tick(), 1000);\n    }\n\n    /**\n     * Decrement countdown and close if 0\n     */\n    public tick() {\n        if (this.countdown <= 0) {\n            this.close();\n        }\n        this.countdown--;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { getModule } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, interval, Observable } from 'rxjs';\nimport { filter, map, shareReplay, take, tap } from 'rxjs/operators';\n\nimport { CalendarEvent } from '@placeos/events';\nimport { SpacesService } from '@placeos/spaces';\nimport {\n    BaseClass,\n    notifyError,\n    openConfirmModal,\n    timePeriodsIntersect,\n} from '@placeos/common';\n\nimport { openBookingModal } from '../overlays/booking-modal.component';\nimport { EmbeddedControlModalComponent } from '../overlays/embedded-control-modal.component';\nimport { addSeconds, getUnixTime } from 'date-fns';\n\nexport interface PanelSettings {\n    /**  */\n    status?: string;\n    /** Whether booking has a pending state */\n    pending?: boolean;\n    /** Default title for Ad-hoc bookings */\n    default_title?: string;\n    /** Minimum duration for a booking */\n    min_duration?: number;\n    /** Maximum duration for a booking */\n    max_duration?: number;\n    /** Duration in seconds after the start with which to cancel pending bookings */\n    pending_period?: number;\n    /** Whether user is allowed to interact with the interface */\n    disable_book_now?: boolean;\n    /** URL to the control UI for this space */\n    control_ui?: string;\n    /** URI to the catering UI for this space */\n    catering_ui?: string;\n}\n\nexport function currentBooking(\n    list: CalendarEvent[],\n    date: number = new Date().valueOf()\n) {\n    return list.find((bkn) =>\n        timePeriodsIntersect(\n            date,\n            date,\n            bkn.date,\n            bkn.date + bkn.duration * 1000\n        )\n    );\n}\n\nexport type CalendarEventStatus =\n    | 'available'\n    | 'pending'\n    | 'busy'\n    | 'not-bookable';\n\n@Injectable()\nexport class PanelStateService extends BaseClass {\n    /** Polling observable */\n    private _poll = interval(1000);\n    /** List of current bookings for active system */\n    private _bookings = new BehaviorSubject<CalendarEvent[]>([]);\n    /** Mapping of current settings for the active system */\n    private _settings = new BehaviorSubject<PanelSettings>({});\n    /** Active system */\n    private _system = new BehaviorSubject<string>('');\n    /** Mapping of current settings for the active system */\n    public readonly settings = this._settings.asObservable();\n    /** List of current bookings for active system */\n    public readonly bookings = this._bookings.asObservable();\n    /** List of current bookings for active system */\n    public readonly space = combineLatest([\n        this._system,\n        this._spaces.list,\n    ]).pipe(\n        map(([id, list]) => list.find((_) => _.id === id)),\n        shareReplay(1)\n    );\n    /** List of current bookings */\n    public get booking_list() {\n        return this._bookings.getValue();\n    }\n    /** Active system */\n    public get system() {\n        return this._system.getValue();\n    }\n    public set system(value: string) {\n        this._system.next(value);\n    }\n    /** Currently active booking */\n    public readonly current: Observable<CalendarEvent> = combineLatest(\n        this._poll,\n        this._bookings\n    ).pipe(map(([_, bookings]) => currentBooking(bookings)));\n    /** Upcoming booking */\n    public readonly next: Observable<CalendarEvent> = combineLatest([\n        this._poll,\n        this._bookings,\n    ]).pipe(\n        map(([_, bookings]) => {\n            const date = new Date().valueOf();\n            return bookings.find((bkn) => bkn.date > date);\n        })\n    );\n\n    public readonly status: Observable<string> = combineLatest([\n        this.current,\n        this.next,\n        this._settings,\n    ]).pipe(\n        map(([current, next, settings]) => {\n            const booking: CalendarEvent = current || next;\n            const is_active =\n                addSeconds(\n                    new Date(),\n                    settings.pending_period || 1440\n                ).valueOf() > booking?.date;\n            switch (booking.state) {\n                case 'future':\n                    return 'available';\n                case 'upcoming':\n                    return settings.pending && !is_active\n                        ? 'pending'\n                        : 'available';\n                case 'started':\n                    return settings.pending && !is_active ? 'pending' : 'busy';\n                case 'in_progress':\n                    return settings.pending && !is_active ? 'pending' : 'busy';\n            }\n            return 'available';\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _spaces: SpacesService, private _dialog: MatDialog) {\n        super();\n        this._system.pipe(filter((_) => !!_)).subscribe((id) => {\n            this.bindTo(id, 'bookings' as any, 'Bookings', (l) =>\n                this._bookings.next(\n                    l\n                        ?.map((i) => new CalendarEvent(i))\n                        .sort((a, b) => a.date - b.date) || []\n                )\n            );\n            const settings: any[] = [\n                'disable_book_now',\n                'pending',\n                'status',\n                'control_ui',\n                'catering_ui',\n                'pending_period',\n                'pending_before',\n            ];\n            settings.forEach((k) => this.bindTo(id, k));\n        });\n    }\n\n    /**\n     * Open modal to create new booking\n     * @param date Start time of the new booking\n     */\n    public async newBooking(date: number = new Date().valueOf()) {\n        const details = await openBookingModal(\n            {\n                ...this._settings.getValue(),\n                space: this._spaces.find(this.system),\n                date,\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return details.close();\n        await this.makeBooking(details.metadata);\n        details.close();\n    }\n\n    /**\n     * Create new booking with the given details\n     * @param details\n     */\n    public async makeBooking(details: Partial<CalendarEvent>) {\n        const module = getModule(this.system, 'Bookings');\n        if (details && module) {\n            await module\n                .execute('book_now', [\n                    details.duration,\n                    getUnixTime(details.date),\n                ])\n                .catch((e) => notifyError(`Error creating meeting. ${e}`));\n        }\n    }\n\n    /**\n     * Open confirmation modal for starting the meeting\n     */\n    public async confirmStart() {\n        const details = await openConfirmModal(\n            {\n                title: 'Do you wish to start your meeting?',\n                content: `If you don't start your meeting it will be cancelled ${\n                    this._settings.getValue().pending_period / 60\n                } minutes after the start time.`,\n                icon: { class: 'material-icons', content: 'play_arrow' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        this.startMeeting();\n    }\n\n    /**\n     * Execute the logic on the engine driver to start the current or upcoming meeting\n     */\n    public async startMeeting() {\n        if (this.space && (await this.status.toPromise()) === 'pending') {\n            const meeting =\n                (await this.current.toPromise()) ||\n                (await this.next.toPromise());\n            const module = getModule(this.system, 'Bookings');\n            if (meeting && module) {\n                await module\n                    .execute('start_meeting', [meeting.date])\n                    .catch((e) => notifyError(`Error starting meeting. ${e}`));\n            }\n        }\n    }\n\n    /**\n     * Open confirmation modal for ending the meeting\n     */\n    public async confirmEnd() {\n        const details = await openConfirmModal(\n            {\n                title: 'Are you sure want to end your meeting?',\n                content:\n                    'Ending your meeting early will free up this room for others to use',\n                icon: { class: 'material-icons', content: 'stop' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        this.endCurrent();\n    }\n\n    /**\n     * End the current meeting\n     * @param reason Reason for ending the meeting early\n     */\n    public async endCurrent(reason: string = 'user_input') {\n        const now = new Date().valueOf();\n        const current = this.booking_list.find((bkn) =>\n            timePeriodsIntersect(\n                now,\n                now,\n                bkn.date,\n                bkn.date + bkn.duration * 1000\n            )\n        );\n        const module = getModule(this.system, 'Bookings');\n        if (current && module) {\n            await module\n                .execute('cancel_meeting', [current.date, reason])\n                .catch((e) => notifyError(`Error starting meeting. ${e}`));\n        }\n    }\n    /**\n     * Open confirmation modal for calling waiter\n     */\n    public async viewControl() {\n        const control_url = this._settings.getValue().control_ui;\n        if (!control_url) return;\n        this._dialog.open(EmbeddedControlModalComponent, {\n            data: { control_url },\n        });\n    }\n\n    /**\n     * Open confirmation modal for calling waiter\n     */\n    public async confirmWaiter() {\n        const details = await openConfirmModal(\n            {\n                title: 'Do you wish to call a waiter?',\n                content: `Note that it can take up to 15 minutes for them to turn up.`,\n                icon: { class: 'material-icons', content: 'room_service' },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        this.callWaiter();\n    }\n\n    /**\n     * Execute the logic on the engine driver to call waiting staff\n     */\n    public async callWaiter() {\n        const module = getModule(this.system, 'Bookings');\n        if (module) {\n            await module\n                .execute('waiter_call', [Date.now()])\n                .catch((e) => notifyError(`Error calling waiter. ${e}`));\n        }\n    }\n\n    /** List to binding */\n    private bindTo<K extends keyof PanelSettings>(\n        id: string,\n        name: K,\n        mod: string = 'Bookings',\n        on_change: (v: PanelSettings[K]) => void = (v) =>\n            this.updateProperty(name, v)\n    ) {\n        const binding = getModule(id, mod).binding(name);\n        this.subscription(\n            `listen:${name}`,\n            binding.listen().subscribe(on_change)\n        );\n        this.subscription(`bind:${name}`, binding.bind());\n    }\n\n    /** Update properties of the system data */\n    private updateProperty<K extends keyof PanelSettings>(\n        name: K,\n        value: PanelSettings[K]\n    ) {\n        const item = { ...this._settings.getValue() };\n        item[name] = value;\n        this._settings.next(item);\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { PanelStateService } from './panel-state.service';\n\n@Component({\n    selector: 'panel-details',\n    template: `\n        <h1 class=\"text-4xl font-medium mb-8\">\n            {{\n                (space | async)?.display_name ||\n                    (space | async)?.name ||\n                    '&lt;Unknown Space&gt;'\n            }}\n        </h1>\n        <p *ngIf=\"(space | async)?.description\">\n            {{ (space | async)?.description }}\n        </p>\n        <div\n            class=\"flex flex-col items-center space-y-2\"\n            *ngIf=\"!(options | async)?.hide_actions; else empty_state\"\n        >\n            <button\n                event\n                mat-button\n                class=\"w-48\"\n                *ngIf=\"!(options | async)?.disable_book_now\"\n                (click)=\"newEvent()\"\n            >\n                <div class=\"flex items-center justify-center\">\n                    <app-icon class=\"text-xl\">add_circle_outline</app-icon>\n                    <span class=\"mx-2\">New Event</span>\n                </div>\n            </button>\n            <button\n                control\n                mat-button\n                class=\"w-48\"\n                *ngIf=\"(options | async)?.control_ui\"\n                (click)=\"viewControl()\"\n            >\n                <div class=\"flex items-center justify-center\">\n                    <app-icon class=\"text-xl\">settings_remote</app-icon>\n                    <span class=\"mx-2\">View Control</span>\n                </div>\n            </button>\n            <button\n                waiter\n                mat-button\n                class=\"w-48\"\n                *ngIf=\"(options | async)?.catering_ui\"\n                (click)=\"callWaiter()\"\n            >\n                <div class=\"flex items-center justify-center\">\n                    <app-icon class=\"text-xl\">room_service</app-icon>\n                    <span class=\"mx-2\">Call Waiter</span>\n                </div>\n            </button>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center\">\n                <p>No available actions for this space</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n            }\n        `,\n    ],\n})\nexport class PanelDetailsComponent {\n    public readonly space = this._state.space;\n    public readonly options = this._state.settings;\n\n    public readonly newEvent = () => this._state.newBooking();\n\n    public readonly callWaiter = () => this._state.confirmWaiter();\n\n    public readonly viewControl = () => this._state.viewControl();\n\n    constructor(private _state: PanelStateService) {}\n}\n","import { Component } from '@angular/core';\nimport {\n    differenceInSeconds,\n    formatDuration,\n    isAfter,\n    isSameDay,\n} from 'date-fns';\nimport { combineLatest, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { PanelStateService } from './panel-state.service';\n\n@Component({\n    selector: 'panel-booking-list',\n    template: `\n        <h2 class=\"w-full px-4 py-2 mb-2 font-medium\" *ngIf=\"current | async\">\n            Current\n            <span\n                class=\"text-xs shadow px-2 py-1 ml-8 rounded bg-gray-300\"\n                *ngIf=\"!(started | async) && (starting_in | async)\"\n            >\n                Starting in {{ starting_in | async }}\n            </span>\n            <span\n                class=\"text-xs shadow px-2 py-1 ml-8 rounded bg-error text-white\"\n                *ngIf=\"(started | async) && !(pending | async)\"\n            >\n                In Progress\n            </span>\n            <span\n                class=\"text-xs shadow px-2 py-1 ml-8 rounded bg-pending text-white\"\n                *ngIf=\"\n                    ((current | async)?.state === 'upcoming' ||\n                        (current | async)?.state === 'in_progress') &&\n                    (pending | async)\n                \"\n            >\n                Waiting to start\n            </span>\n        </h2>\n        <div class=\"mb-4 w-full\" *ngIf=\"current | async; else empty_state\">\n            <div\n                current\n                class=\"flex items-center bg-white rounded-lg px-4 h-24 text-lg shadow-md w-full border border-gray-100 relative max-w-full\"\n                [class.text-white]=\"started | async\"\n            >\n                <div\n                    color\n                    class=\"absolute -left-2 -right-2 top-2 bottom-2 bg-primary rounded z-0\"\n                    [class.opacity-100]=\"started | async\"\n                    [class.opacity-0]=\"!(started | async)\"\n                ></div>\n                <div\n                    class=\"relative opacity-80 w-24 text-base z-10\"\n                    *ngIf=\"!(started | async)\"\n                >\n                    <span [class.opacity-60]=\"started | async\">{{\n                        (current | async)?.event_start * 1000\n                            | date: 'shortTime'\n                    }}</span\n                    ><br />\n                    <span [class.opacity-60]=\"!(started | async)\">{{\n                        (current | async)?.event_end * 1000 | date: 'shortTime'\n                    }}</span>\n                </div>\n                <div\n                    class=\"relative opacity-80 w-24 text-base z-10 flex flex-col\"\n                    *ngIf=\"started | async\"\n                >\n                    <div class=\"text-xs\">Ends at:</div>\n                    <div>\n                        {{\n                            (current | async)?.date +\n                                (current | async)?.duration * 60 * 1000\n                                | date: 'shortTime'\n                        }}\n                    </div>\n                </div>\n                <div class=\"relative truncate z-10\">\n                    {{ (current | async)?.title || '&lt;Private Event&gt;' }}\n                </div>\n            </div>\n        </div>\n        <h2\n            class=\"w-full px-4 py-2 mb-2 font-medium\"\n            *ngIf=\"(upcoming | async)?.length\"\n        >\n            Upcoming\n        </h2>\n        <ul\n            class=\"list-style-none p-0 m-0 bg-white rounded text-base shadow divide-y divide-gray-100 w-full border border-gray-100 max-w-full\"\n            *ngIf=\"(upcoming | async)?.length\"\n        >\n            <li\n                upcoming\n                class=\"flex items-center w-full p-4\"\n                *ngFor=\"let event of upcoming | async | slice: 0:2\"\n            >\n                <div class=\"opacity-60 w-24\">\n                    {{ event?.date | date: 'shortTime' }}\n                </div>\n                <div class=\"truncate\">\n                    {{ event?.title || '&lt;Private Event&gt;' }}\n                </div>\n            </li>\n            <li\n                upcoming\n                class=\"flex items-center w-full p-4\"\n                *ngIf=\"(upcoming | async)?.length > 2\"\n            ></li>\n        </ul>\n        <ng-template #empty_state>\n            <div\n                class=\"flex items-center justify-center bg-white rounded px-4 py-8 shadow-md w-full border border-gray-100\"\n            >\n                <p class=\"opacity-50\">No upcoming events for today</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n                color: #000;\n            }\n\n            [current] {\n                transition: color 200ms;\n            }\n\n            [current] [color] {\n                transition: opacity 200ms;\n            }\n        `,\n    ],\n})\nexport class PanelBookingListComponent {\n    /** List of current and future events for the current day */\n    public readonly bookings = this._state.bookings.pipe(\n        map((l) =>\n            l.filter((e) => e.state !== 'done' && isSameDay(e.date, new Date()))\n        )\n    );\n    /** In progress or next event */\n    public readonly current = this.bookings.pipe(\n        map((list) => list.sort((a, b) => a.date - b.date)[0])\n    );\n    /** Whether current event has started */\n    public readonly started = combineLatest([this.current, interval(600)]).pipe(\n        map(([c]) => isAfter(Date.now(), c.date))\n    );\n    /** Display string for time until current event's start */\n    public readonly starting_in = combineLatest([\n        this.current,\n        interval(600),\n    ]).pipe(\n        map(([_]) => {\n            const diff = _ ? differenceInSeconds(_.date, new Date()) : 0;\n            return diff && diff < 60 * 60\n                ? `${formatDuration({\n                      hours: Math.floor(diff / 60 / 60),\n                      minutes: Math.floor(diff / 60) % 60,\n                      seconds: diff < 60 ? diff : 0,\n                  })}`\n                : '';\n        })\n    );\n    /** Whether current event is waiting for the attendees to begin the evnt */\n    public readonly pending = combineLatest([\n        this.current,\n        this._state.settings,\n        interval(600),\n    ]).pipe(\n        map(([i, settings]) => i && settings.pending_period && settings.pending)\n    );\n    /** List of events excluding the current/next event */\n    public readonly upcoming = this.bookings.pipe(\n        map((list) => list.sort((a, b) => a.date - b.date).slice(1))\n    );\n\n    constructor(private _state: PanelStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { PanelStateService } from './panel-state.service';\n\n@Component({\n    selector: 'panel-status',\n    template: `\n        <div\n            status\n            class=\"h-12 w-[calc(100% - 2rem)] m-2 rounded shadow\"\n            [class.bg-gray-300]=\"(settings | async)?.status === 'not-bookable'\"\n            [class.bg-pending]=\"(settings | async)?.status === 'pending'\"\n            [class.bg-success]=\"(settings | async)?.status === 'free'\"\n            [class.bg-error]=\"(settings | async)?.status === 'busy'\"\n        ></div>\n    `,\n    styles: [``],\n})\nexport class PanelStatusComponent {\n    public readonly settings = this._state.settings;\n\n    constructor(private _state: PanelStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\n@Component({\n    selector: 'panel-topbar',\n    template: `\n        <div\n            class=\"w-full flex items-center justify-between h-16 border-b border-gray-200 bg-secondary text-white\"\n        >\n            <img [src]=\"logo.src\" alt=\"Logo\" class=\"h-12 mx-2\" />\n            <div time class=\"flex items-center space-x-2 mx-4 text-xl\">\n                <span>{{ time | date: 'shortTime' }}</span>\n                <span> • </span>\n                <span>{{ time | date: 'mediumDate' }}</span>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class PanelTopbarComponent {\n    public get logo() {\n        return this._settings.get('app.logo_dark') || {};\n    }\n\n    public get time() {\n        return getUnixTime(new Date()) * 1000;\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","import {\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass } from '@placeos/common';\n\nimport { PanelStateService } from './panel-state.service';\n\n@Component({\n    selector: 'app-booking-panel',\n    template: `\n        <div class=\"flex flex-col absolute inset-0 bg-gray-50\">\n            <panel-topbar *ngIf=\"topbar\"></panel-topbar>\n            <div\n                content\n                class=\"flex flex-1 items-center h-1/2 space-x-2\"\n                [class.p-8]=\"topbar\"\n                [class.p-4]=\"!topbar\"\n            >\n                <panel-details\n                    class=\"flex-1 h-full max-w-[50%]\"\n                    [class.p-4]=\"topbar\"\n                    [class.p-2]=\"!topbar\"\n                ></panel-details>\n                <panel-booking-list\n                    class=\"flex-1 h-full max-w-[50%]\"\n                    [class.p-4]=\"topbar\"\n                    [class.p-2]=\"!topbar\"\n                ></panel-booking-list>\n            </div>\n            <panel-status></panel-status>\n            <!-- <panel-timeline></panel-timeline> -->\n        </div>\n    `,\n    styles: [``],\n    providers: [PanelStateService],\n})\nexport class BookingPanelComponent\n    extends BaseClass\n    implements OnInit, OnChanges {\n    @Input() public system_id: string = localStorage.getItem(\n        'PLACEOS.BOOKINGS.system'\n    );\n\n    @Input() public topbar = true;\n\n    constructor(\n        private _state: PanelStateService,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.system = this.system_id || '';\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((params) => {\n                if (params.has('system_id')) {\n                    this._state.system = params.get('system_id');\n                }\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.system_id) {\n            this._state.system = this.system_id;\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass } from '@placeos/common';\n\n@Component({\n    selector: 'app-booking-panel-array',\n    template: `\n        <div class=\"absolute inset-0 flex flex-col\">\n            <panel-topbar class=\"w-full\"></panel-topbar>\n            <div\n                class=\"flex items-center justify-center flex-wrap w-full flex-1 h-1/2\"\n            >\n                <ng-container *ngIf=\"systems?.length > 0; else none\">\n                    <div\n                        panel\n                        class=\"relative flex-1 border border-grey-300 overflow-hidden\"\n                        *ngFor=\"let id of systems | slice: 0:4; let i = index\"\n                        [style.height]=\"systems.length >= 2 ? '50%' : '100%'\"\n                    >\n                        <app-booking-panel\n                            *ngIf=\"id\"\n                            [system_id]=\"id\"\n                            [topbar]=\"false\"\n                            classs=\"transform scale-75\"\n                        ></app-booking-panel>\n                    </div>\n                </ng-container>\n            </div>\n        </div>\n        <ng-template #none>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No systems are set for displaying on the panel array</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [panel] {\n                min-width: 40%;\n            }\n\n            .container {\n                background-color: var(--bg-dark);\n                background-image: url(\"data:image/svg+xml,%3Csvg width='24' height='20' viewBox='0 0 24 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M20 18c0-1.105.887-2 1.998-2 1.104 0 2-.895 2.002-1.994V14v6h-4v-2zM0 13.998C0 12.895.888 12 2 12c1.105 0 2 .888 2 2 0 1.105.888 2 2 2 1.105 0 2 .888 2 2v2H0v-6.002zm16 4.004A1.994 1.994 0 0 1 14 20c-1.105 0-2-.887-2-1.998v-4.004A1.994 1.994 0 0 0 10 12c-1.105 0-2-.888-2-2 0-1.105-.888-2-2-2-1.105 0-2-.887-2-1.998V1.998A1.994 1.994 0 0 0 2 0a2 2 0 0 0-2 2V0h8v2c0 1.105.888 2 2 2 1.105 0 2 .888 2 2 0 1.105.888 2 2 2 1.105 0 2-.888 2-2 0-1.105.888-2 2-2 1.105 0 2-.888 2-2V0h4v6.002A1.994 1.994 0 0 1 22 8c-1.105 0-2 .888-2 2 0 1.105-.888 2-2 2-1.105 0-2 .887-2 1.998v4.004z' fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'/%3E%3C/svg%3E\");\n                color: var(--font-light);\n            }\n\n            img {\n                max-width: 12em;\n            }\n        `,\n    ],\n})\nexport class BookingPanelArrayComponent extends BaseClass implements OnInit {\n    /** List of systems to show panels for */\n    public systems: string[];\n\n    constructor(private route: ActivatedRoute) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.subscription(\n            'route.query',\n            this.route.queryParamMap.subscribe((params) => {\n                if (params.has('system_ids')) {\n                    this.systems = (params.get('system_ids') || '')\n                        .split(',')\n                        .filter((_) => !!_);\n                }\n            })\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\nimport { currentBooking } from './panel/panel-state.service';\n\n@Component({\n    selector: 'app-booking-panel-select',\n    template: `\n        <div\n            class=\"absolute inset-0 flex items-center justify-center flex-wrap bg-gray-600\"\n            (window:mousedown)=\"reset()\"\n            (window:touchstart)=\"reset()\"\n        >\n            <div\n                class=\"flex items-center justify-center flex-wrap w-full h-full p-8\"\n            >\n                <ng-container *ngIf=\"systems && systems.length > 0; else none\">\n                    <button\n                        matRipple\n                        class=\"item text-white flex flex-col items-center justify-center rounded m-2 p-2\"\n                        *ngFor=\"let id of systems | slice: 0:8; let i = index\"\n                        (click)=\"showPanel(id)\"\n                    >\n                        <div class=\"bindings\" *ngIf=\"id\">\n                            <i\n                                binding\n                                [sys]=\"id\"\n                                mod=\"Bookings\"\n                                bind=\"room_name\"\n                                [(model)]=\"system_name[id]\"\n                            ></i>\n                            <i\n                                binding\n                                [sys]=\"id\"\n                                mod=\"Bookings\"\n                                bind=\"icon\"\n                                [(model)]=\"system_icon[id]\"\n                            ></i>\n                            <i\n                                binding\n                                [sys]=\"id\"\n                                mod=\"Bookings\"\n                                bind=\"status\"\n                                (modelChange)=\"system_status[id] = $event\"\n                            ></i>\n                        </div>\n                        <div\n                            state\n                            [class]=\"\n                                'h-36 w-36 flex items-center justify-center text-6xl bg-white bg-opacity-10 rounded' +\n                                (system_status[id]\n                                    ? ' ' + system_status[id]\n                                    : '')\n                            \"\n                        >\n                            <img\n                                *ngIf=\"system_name[id]\"\n                                [src]=\"system_icon[id]\"\n                            />\n                            <mat-spinner\n                                *ngIf=\"!system_name[id]\"\n                                [diameter]=\"32\"\n                            ></mat-spinner>\n                        </div>\n                        <div\n                            class=\"truncate text-sm p-3 text-white w-full text\"\n                        >\n                            {{ system_name[id] || id + ' connecting...' }}\n                        </div>\n                    </button>\n                </ng-container>\n            </div>\n            <div\n                class=\"absolute inset-0 border border-white\"\n                *ngIf=\"active_system\"\n            >\n                <app-booking-panel\n                    [system_id]=\"active_system\"\n                ></app-booking-panel>\n                <div\n                    class=\"absolute top-0 left-1/2 transform -translate-x-1/2 flex items-center bg-white rounded-b p-2\"\n                >\n                    <button\n                        mat-icon-button\n                        class=\"action close\"\n                        (click)=\"close()\"\n                        (contextmenu)=\"$event.preventDefault()\"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                    <button\n                        widget\n                        class=\"action countdown w-12 h-10\"\n                        (contextmenu)=\"$event.preventDefault()\"\n                    >\n                        {{ countdown }}\n                    </button>\n                </div>\n            </div>\n            <ng-template #none>\n                <div class=\"absolute inset-0 flex items-center justify-center\">\n                    <p>\n                        No systems are set for displaying on the panel select\n                        list\n                    </p>\n                </div>\n            </ng-template>\n        </div>\n    `,\n    styles: [\n        `\n            .item {\n                height: 11.5em;\n                width: 10em;\n                background-color: var(--bg-dark);\n                box-shadow: 0 1px 3px 0 rgba(#000, 0.2),\n                    0 1px 1px 0 rgba(#000, 0.14),\n                    0 2px 1px -1px rgba(#000, 0.12);\n            }\n\n            .free {\n                background-color: rgba(var(--success), 0.6);\n            }\n\n            .busy {\n                background-color: rgba(var(--error), 0.6);\n            }\n\n            img {\n                max-width: 1em;\n                max-height: 1em;\n            }\n        `,\n    ],\n})\nexport class BookingPanelSelectComponent extends BaseClass implements OnInit {\n    /** List of systems to show panels for */\n    public systems: string[];\n    /** Names for the list of systems */\n    public system_name: HashMap<string> = {};\n    /** Icons for the list of systems */\n    public system_icon: HashMap<string> = {};\n    /** Status for the list of systems */\n    public system_status: HashMap<string> = {};\n    /** Active Panel system */\n    public active_system: string;\n    /** Countdown counter */\n    public countdown: number;\n\n    constructor(private route: ActivatedRoute) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.query',\n            this.route.queryParamMap.subscribe((params) => {\n                if (params.has('system_ids')) {\n                    this.systems = (params.get('system_ids') || '').split(',');\n                }\n            })\n        );\n    }\n\n    /**\n     * Show booking panel for the given system ID\n     * @param id ID of the system to show\n     */\n    public showPanel(id: string) {\n        this.active_system = id;\n        this.reset();\n    }\n\n    /**\n     * Update the status value for the given system ID\n     * @param id ID of the system to update\n     * @param bookings List of current bookings for the system\n     */\n    public updateStatus(id: string, bookings: HashMap[]) {\n        const current = currentBooking(\n            (bookings || []).map((i) => new CalendarEvent(i))\n        );\n        this.system_status[id] = current ? 'unavailable' : 'available';\n    }\n\n    /**\n     * Close the modal\n     */\n    public close() {\n        this.active_system = null;\n        this.clearInterval('countdown');\n    }\n\n    /**\n     * User confirmation of the content of the modal\n     */\n    public reset() {\n        if (this.active_system) {\n            this.countdown = 30;\n            this.interval('countdown', () => this.tick(), 1000);\n        }\n    }\n\n    /**\n     * Decrement countdown and close if 0\n     */\n    public tick() {\n        if (this.countdown <= 0) {\n            this.close();\n        }\n        this.countdown--;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BootstrapComponent } from './bootstrap.component';\nimport { BookingPanelComponent } from './panel/panel.component';\nimport { BookingPanelArrayComponent } from './panel-array.component';\nimport { BookingPanelSelectComponent } from './panel-select.component';\n\nconst routes: Routes = [\n    { path: 'bootstrap', component: BootstrapComponent },\n    { path: 'panel/:system_id', component: BookingPanelComponent },\n    { path: 'panel-array', component: BookingPanelArrayComponent },\n    { path: 'panel-select', component: BookingPanelSelectComponent },\n    { path: '**', redirectTo: 'bootstrap' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { EmbeddedControlModalComponent } from './embedded-control-modal.component';\nimport { BookingModalComponent } from './booking-modal.component';\n\nconst OVERLAYS: Type<any>[] = [\n    EmbeddedControlModalComponent,\n    BookingModalComponent\n];\n\n@NgModule({\n    declarations: [\n        ...OVERLAYS\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        FormFieldsModule,\n        MatDialogModule\n    ],\n    exports: [\n        ...OVERLAYS\n    ]\n})\nexport class SharedOverlaysModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        tags: ['drink'],\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        tags: ['drink'],\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), [\n    {\n        id: 'test',\n        parent_id: 'bld-01',\n        name: 'Test',\n        map_id: 'assets/maps/l19.svg',\n    },\n]);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nexport const ZONE_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/zones',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.tags === 'org') {\n                return MOCK_ORGS;\n            } else if (request.query_params.tags === 'building') {\n                return MOCK_BUILDINGS;\n            } else if (request.query_params.tags === 'level') {\n                return MOCK_LEVELS;\n            }\n            throw { status: 404, message: 'Zones not found' };\n        },\n    });\n\n    function padString(str: string | number, length: number = 5) {\n        str = `${str}`;\n        while (str.length < length) str = `0${str}`;\n        return str;\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.name === 'bindings') {\n                return {\n                    bindings: {\n                        details: {\n                            area_management: 'space-0',\n                            location_services: 'space-0',\n                        },\n                    },\n                };\n            }\n            if (request.query_params.name === 'catering') {\n                return {\n                    catering: {\n                        details: MOCK_MENU,\n                    },\n                };\n            }\n            if (request.query_params.name === 'desks') {\n                const parts = request.route_params.id.split('-');\n                const id = parts[parts.length - 1];\n                return generateMockDeskMetadata(id);\n            }\n            if (request.query_params.name === 'map_regions') {\n                return {\n                    map_regions: {\n                        details: {\n                            areas: [\n                                {\n                                    id: 'zone-10.A',\n                                    properties: {\n                                        capacity: 100,\n                                        label_location: { x: 0.36, y: 0.33 },\n                                    },\n                                },\n                                {\n                                    id: 'zone-10.B',\n                                    properties: {\n                                        capacity: 100,\n                                        label_location: { x: 0.76, y: 0.33 },\n                                    },\n                                },\n                                {\n                                    id: 'zone-10.C',\n                                    properties: {\n                                        capacity: 100,\n                                        label_location: { x: 0.63, y: 0.77 },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                };\n            }\n            if (\n                MOCK_METADATA[request.route_params.id] &&\n                MOCK_METADATA[request.route_params.id][\n                    request.query_params.name\n                ]\n            ) {\n                return MOCK_METADATA[request.route_params.id];\n            } else if (\n                MOCK_METADATA[request.route_params.id] &&\n                !request.query_params.name\n            ) {\n                return MOCK_METADATA[request.route_params.id] || {};\n            }\n            return {};\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            if (!MOCK_METADATA[request.route_params.id])\n                MOCK_METADATA[request.route_params.id] = {};\n            MOCK_METADATA[request.route_params.id][request.body.name] =\n                request.body;\n        },\n    });\n\n    const DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\n    function generateMockDeskMetadata(id: string) {\n        return {\n            desks: {\n                details: new Array(30).fill(0).map((_, idx) => ({\n                    id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                    name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                    bookable: predictableRandomInt(9999) % 4 !== 0,\n                    group: '',\n                    features: DESK_FEATURES.filter(\n                        (_) => predictableRandomInt(99999) % 3 === 0\n                    ),\n                })),\n            },\n        };\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id/children',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const zone = MOCK_BUILDINGS.find(\n                (_) => _.id === request.route_params.id\n            );\n            if (!zone)\n                throw {\n                    status: 404,\n                    message: `Unable to find zone with id \"${request.route_params.id}\"`,\n                };\n            return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map(\n                (lvl) => {\n                    const parts = lvl.id.split('-');\n                    const id = parts[parts.length - 1];\n                    return {\n                        zone: lvl,\n                        metadata: generateMockDeskMetadata(id),\n                    };\n                }\n            );\n        },\n    });\n}\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@guest.${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    const meeting_url =\n        predictableRandomInt(9999) % 3 === 0 ? 'https://meet.place.tech' : '';\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        meeting_url,\n        meeting_id: meeting_url ? `m${predictableRandomInt(9999)}` : '',\n        meeting_provider: meeting_url ? 'PlaceOS' : '',\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nexport const USER_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/users/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.id === 'current') {\n                return ACTIVE_USER;\n            }\n            const person = MOCK_STAFF.find(\n                (user) => user.email === request.route_params.id\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_STAFF.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const id = decodeURIComponent(request.route_params.id);\n            const person = MOCK_STAFF.find((user) => user.email === id);\n            if (person) {\n                return {\n                    ...person,\n                    location: generateLocation(),\n                };\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_GUESTS.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const email = decodeURIComponent(request.route_params.email);\n            const person = MOCK_GUESTS.find((user) => user.email === email);\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email/meetings',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.email) {\n                const email = request.route_params.email.toLowerCase();\n                const events = MOCK_EVENTS.filter((event) =>\n                    event.attendees.find(\n                        (user) => user.email.toLowerCase() === email\n                    )\n                );\n                return events;\n            }\n            throw {\n                status: 404,\n                message: `Unable to find meetings with guest with email ${request.route_params.email}`,\n            };\n        },\n    });\n\n    const LOCATION_TYPES = [\n        'meeting',\n        'desk_id',\n        'laptop',\n        'mobile',\n        'geo',\n        'none',\n    ];\n\n    function generateLocation() {\n        const type =\n            LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n        const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n        const level_spaces = MOCK_SPACES.filter((s) =>\n            s.zones.includes(level.id)\n        );\n        const space =\n            level_spaces[predictableRandomInt(level_spaces.length)] || {};\n        const location: HashMap = {};\n        switch (type) {\n            case 'meeting':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    system: space.id,\n                    map_id: space.map_id,\n                    event_id: '',\n                };\n                break;\n            case 'desk_id':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    map_id: space.map_id,\n                    checked_in: dayjs().unix(),\n                };\n                break;\n            case 'laptop':\n            case 'mobile':\n                location[type] = {\n                    building: level.parent_id,\n                    level: level.id,\n                    x: +predictableRandomInt(10000),\n                    y: +predictableRandomInt(5000),\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n            case 'geo':\n                location.geo = {\n                    lat: predictableRandomInt(180) - 90,\n                    lon: predictableRandomInt(360) - 180,\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n        }\n        return location;\n    }\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    ref: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    ref: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $power(state = true) {\n        console.log('Power:', state);\n        this.active = state;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt, randomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n        mod[`${lvl.id}:areas`] = {\n            value: [\n                {\n                    area_id: 'zone-10.B',\n                    count: predictableRandomInt(100),\n                    name: '.L1 IFS IT',\n                },\n                {\n                    area_id: 'zone-10.A',\n                    count: predictableRandomInt(100),\n                    name: '.L1 IFS IT',\n                },\n                {\n                    area_id: 'zone-10.C',\n                    count: predictableRandomInt(50),\n                    name: '.L1 IFS IT',\n                },\n            ],\n        };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(users[predictableRandomInt(users.length)].email),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(users[predictableRandomInt(users.length)].email),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { HashMap } from '@placeos/common';\n\nclass MeetingPushModule {\n    public supported_meeting_url = 'https://meet.';\n\n    constructor(data: any) {}\n\n    $econtrol(...args: any[]) {}\n}\n\nexport const createMeetingPushModule = (\n    details?: HashMap,\n    overrides: HashMap = {}\n) =>\n    new MeetingPushModule({\n        ...details,\n        ...overrides,\n    });\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nexport const SYSTEM_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    MOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/systems',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            return MOCK_SPACES;\n        },\n    });\n}\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\nimport { createMeetingPushModule } from './realtime/meeting';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map((_) => createCameraModule(space)),\n        Display: new Array(10).fill(0).map((_) => createDisplayModule(space)),\n        Microphone: new Array(10)\n            .fill(0)\n            .map((_) => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)],\n        MeetingPush: [createMeetingPushModule()],\n    });\n}\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const EVENT_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            let events = MOCK_EVENTS;\n            if (!_.query_params.zone_ids) {\n                events = events.filter(\n                    (event) =>\n                        !!event.attendees.find(\n                            (user) => user.email === ACTIVE_USER.email\n                        )\n                );\n            }\n            if (_.query_params.period_start) {\n                events = events.filter((e) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        e.event_start,\n                        e.event_end\n                    )\n                );\n            }\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-cal-event-${predictableRandomInt(999)}`,\n            };\n            new_event.attendees = [\n                MOCK_STAFF.find((_) => _.email === new_event.host),\n                ...(new_event.attendees || []),\n            ];\n            new_event.attendees.forEach((user) => {\n                if (user.zones) user.resource = true;\n            });\n\n            if (new_event.system) {\n                new_event.attendees = [\n                    ...(new_event.attendees || []),\n                    { ...new_event.system, resource: true },\n                ];\n            }\n            MOCK_EVENTS.push(new_event);\n            return new_event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const item = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (item) {\n                return item;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index > 0) {\n                if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                    MOCK_EVENTS.splice(index, 1);\n                } else {\n                    const user = MOCK_EVENTS[index].attendees.find(\n                        (_) => _.email === ACTIVE_USER.email\n                    );\n                    user.response_status = 'declined';\n                }\n                return;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index >= 0) {\n                return MOCK_EVENTS.splice(index, 1, request.body);\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id/guests/:email/checkin',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const event = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (event) {\n                const checked_in =\n                    (event.extension_data as any).checked_in || [];\n                (event.extension_data as any).checked_in = checked_in.concat([\n                    request.route_params.email,\n                ]);\n                return event;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n}\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const CALENDAR_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n            const user2 = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n            const user3 = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n            return [\n                {\n                    id: ACTIVE_USER.email,\n                    summary: ACTIVE_USER.name,\n                    primary: true,\n                    can_edit: true,\n                    hidden: false,\n                },\n                {\n                    id: user.email,\n                    summary: user.name,\n                    primary: false,\n                    can_edit: true,\n                    hidden: false,\n                },\n                {\n                    id: user2.email,\n                    summary: user2.name,\n                    primary: false,\n                    can_edit: false,\n                    hidden: false,\n                },\n                {\n                    id: user3.email,\n                    summary: user3.name,\n                    primary: false,\n                    can_edit: false,\n                    hidden: true,\n                },\n            ];\n        },\n    });\n\n    const handleSpaceAvailability = (request) => {\n        const start = +request.query_params.period_start;\n        const end = +request.query_params.period_end;\n        const zones = (request.query_params.zone_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n        const systems = (request.query_params.system_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n\n        const spaces = MOCK_SPACES.filter((space) =>\n            zones.length\n                ? zones.reduce(\n                      (has, zone) => has && space.zones.includes(zone),\n                      true\n                  )\n                : systems.length\n                ? systems.includes(space.id)\n                : true\n        ).filter((space) => {\n            const bookings = MOCK_EVENTS.filter((event) =>\n                event.attendees.find((user) => user.id === space.id)\n            );\n            for (const event of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        start,\n                        end,\n                        event.event_start,\n                        event.event_end\n                    )\n                )\n                    return false;\n            }\n            return true;\n        });\n        return spaces;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/availability',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/free_busy',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n}\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { log } from '@placeos/common';\n\nimport { ZONE_MOCKS } from './lib/api/zones.mock';\nimport { USER_MOCKS } from './lib/api/users.mock';\nimport { SYSTEM_MOCKS } from './lib/api/systems.mock';\nimport { EVENT_MOCKS } from './lib/api/events.mock';\nimport { CALENDAR_MOCKS } from './lib/api/calendars.mock';\nimport { BOOKING_MOCKS } from './lib/api/bookings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nexport const BOOKING_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const events = MOCK_BOOKINGS.filter(\n                (event) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        event.booking_start,\n                        event.booking_end\n                    ) && event.type === _.query_params.type\n            );\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n            if (!event)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${_.route_params.id}`,\n                };\n            return event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-booking-${predictableRandomInt(999)}`,\n            };\n            MOCK_BOOKINGS.push(new_event);\n            return new_event;\n        },\n    });\n\n    const updateBooking = (id, data) => {\n        const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${id}`,\n            };\n        const new_event = { ...data };\n        MOCK_BOOKINGS.splice(index, 1, new_event);\n        return new_event;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'PUT',\n        callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/approve',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: true,\n                rejected: false,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/reject',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: false,\n                rejected: true,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/check_in',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                checked_in: req.query_params.state === 'true',\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (req) => {\n            const index = MOCK_BOOKINGS.findIndex(\n                (e) => e.id === req.route_params.id\n            );\n            if (index < 0)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${req.route_params.id}`,\n                };\n            MOCK_BOOKINGS.splice(index, 1);\n            return;\n        },\n    });\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n    log,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        log('APP', 'MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 30 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                `@${currentUser()?.email?.split('@')[1]}`\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { ComponentsModule } from '@placeos/components';\nimport { UnauthorisedComponent } from '@placeos/components';\n\nimport { environment } from '../environments/environment';\nimport { SharedOverlaysModule } from './overlays/overlays.module';\nimport { AppComponent } from 'libs/components/src/lib/app.component';\n\nimport { BootstrapComponent } from './bootstrap.component';\nimport { BookingPanelComponent } from './panel/panel.component';\nimport { BookingPanelArrayComponent } from './panel-array.component';\nimport { BookingPanelSelectComponent } from './panel-select.component';\nimport { PanelTopbarComponent } from './panel/topbar.component';\nimport { PanelDetailsComponent } from './panel/panel-details.component';\nimport { PanelBookingListComponent } from './panel/panel-booking-list.component';\n\nimport * as Sentry from '@sentry/angular';\nimport { PanelStatusComponent } from './panel/panel-status.component';\nimport { MatRippleModule } from '@angular/material/core';\nimport { PanelTimelineComponent } from './panel/timeline.component';\n\nconst MAT_MODULES: any[] = [\n    MatFormFieldModule,\n    MatInputModule,\n    MatAutocompleteModule,\n];\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        UnauthorisedComponent,\n        BootstrapComponent,\n        BookingPanelComponent,\n        PanelTopbarComponent,\n        PanelDetailsComponent,\n        PanelStatusComponent,\n        PanelBookingListComponent,\n        PanelTimelineComponent,\n        BookingPanelArrayComponent,\n        BookingPanelSelectComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        HttpClientModule,\n        FormsModule,\n        MatSnackBarModule,\n        MatRippleModule,\n        SharedOverlaysModule,\n        ComponentsModule,\n        ...MAT_MODULES,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {\n    constructor() {\n        console.log('Production:', !!environment.production);\n    }\n}\n","export const environment = {\n    production: true,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"],"sourceRoot":"webpack:///"}