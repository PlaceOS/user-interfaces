{"version":3,"sources":["./apps/caterer-ui/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./libs/common/src/lib/base.class.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/common/src/lib/general.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/caterer-ui/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/angular-animations.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/users/src/lib/user.utilities.ts","./libs/users/src/lib/user.class.ts","./libs/common/src/lib/user-state.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/unauthorised.component.ts","./libs/components/src/lib/components.module.ts","./libs/form-fields/src/lib/action-field.component.ts","./libs/form-fields/src/lib/counter.component.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/events/src/lib/helpers.ts","./libs/events/src/lib/event.class.ts","./libs/form-fields/src/lib/form-fields.module.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/events/src/lib/events.fn.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering.vars.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering.module.ts","./apps/caterer-ui/src/app/catering-topbar.component.ts","./apps/caterer-ui/src/app/catering.component.ts","./apps/caterer-ui/src/app/app-routing.module.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/index.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/components/src/lib/app.component.ts","./libs/common/src/lib/placeos.ts","./apps/caterer-ui/src/app/app.module.ts","./apps/caterer-ui/src/environments/environment.prod.ts","./apps/caterer-ui/src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","BaseClass","_timers","_intervals","_subscriptions","_initialised","BehaviorSubject","initialised","this","asObservable","getValue","destroy","key","clearTimeout","clearInterval","unsub","name","fn","delay","Function","setTimeout","setInterval","Subscription","unsubscribe","contains","subs","Object","filter","k","includes","CONFIRM_METADATA","height","width","maxHeight","maxWidth","ConfirmModalComponent","_dialog_ref","_data","event","title","content","confirm_text","cancel_text","icon","class","disableClose","enableClose","emit","reason","_app_name","setAppName","log","type","msg","args","stream","force","app_name","window","debug","colors","console","getItemWithKeys","map","shift","length","array","el","pos","arr","indexOf","find","i","randomInt","ceil","floor","Math","random","openConfirmModal","data","dialog","ref","open","race","componentInstance","pipe","_","toPromise","afterClosed","loading","s","close","flatten","an_array","stack","res","next","pop","Array","isArray","push","reverse","timePeriodsIntersect","start1","end1","start2","end2","seed","str","h","imul","charCodeAt","xmur3","rand","a","b","c","d","t","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","addEventListener","mapKey","toLowerCase","last_down","preventDefault","combo","combination","split","validCombination","last_key","updateCombinationEndList","subscribe","count","presses","state","reduce","v","replace","non_meta","DEFAULT_SETTINGS","composer","domain","route","protocol","port","use_domain","local_login","app","description","short_name","logo","src","logo_dark","general","SettingsService","_title","super","_overrides","_subjects","_observables","now","Date","time","built","isSameDay","init","value","getTitle","setTitle","get","location","pathname","slice","join","toUpperCase","application","settings","override_settings","override","opacity","ANIMATION_SHOW_CONTRACT_EXPAND","hasOwnProperty","_service","_available","_activated","_timer","notify","message","action","on_action","config","snackbar_ref","panelClass","duration","dismiss","onAction","notifySuccess","notifyError","error","notifyInfo","info","USER_DOMAIN","User","email","first_name","last_name","phone","organisation","notes","photo","username","organizer","groups","checked_in","required","response_status","sys_admin","support","extension_data","assistance_required","is_external","endsWith","visit_expected","card_number","staff_id","is_logged_in","_current_user","currentUser","jest","retry","user","ActionIconComponent","className","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","IconComponent","PopoutMenuComponent","actions","timeout","show","MAP_FEATURE_DATA","StatusOverlayComponent","links","BuildingLevel","parent_id","display_name","map_id","capacity","locations","parts","number","Building","raw_data","disc_info","discovery_info","zone_id","zone","extras","extra_id","extra_name","loan_items","levels","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl","lvl_features","feature","level_id","bindings","timezone","catering_hours","start","end","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","Organisation","tags","_settings","OrganisationService","_router","_buildings","_active_building","_levels","building_list","level_list","active_building","active_levels","combineLatest","bld","levelsForBuilding","_building_settings","overrides","buildingSettings","bld_id","building","_organisation","details","buildings","id_list","tries","load","catch","err","min","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","auth","org","list","org_zone","navigate","limit","localStorage","getItem","sort","localeCompare","m","prev","curr","concat","setItem","Space","feature_list","features","bookable","zones","support_url","image","configurations","level","availability","SpacesService","_org","_list","_compare","space","loadSpaces","predicate","valid_spaces","sys","levelWithID","GlobalLoadingComponent","_spaces","UnauthorisedComponent","MAT_MODULES","ComponentsModule","provide","useValue","CounterComponent","step","max","ctrl_key","shift_key","setValue","new_value","_onChange","_onTouch","useExisting","multi","remove","add","NewUserModalComponent","form","fields","generateUserForm","markAllAsTouched","valid","new_user","metadata","UserFormComponent","controls","invalid","touched","CateringItem","category","unit_price","quantity","discount_cap","accept_points","options","total_cost","options_string","CateringOrder","system_id","event_id","items","item_count","amount","item","charge_code","status","invoice_number","deliver_at","date","getTime","DURATION_MAP","month","months","week","weeks","day","days","hour","hours","minute","minutes","DEFAULT_RULES","auto_approve","hidden","stringToMinutes","addToDate","checkRulesMatch","host","ruleset","matches","conditions","every","is_before","is_after","min_length","max_length","_default_user","event_start","getUnixTime","roundToNearestMinutes","nearestTo","event_end","calendar","creator","attendees","resource","u","resources","body","private","all_day","recurring","recurring_master_id","organiser","master","recurrence","range_start","valueOf","range_end","interval","pattern","days_of_week","system","old_system","attachments","some","eventStatus","catering","f","obj","set","breakdown","is_today","FormFieldsModule","RULE_TYPES","CateringConfigModalComponent","rule_types","rulesets","rules","JSON","stringify","parse","saveChanges","CateringItemModalComponent","separators","categories","markAsDirty","input","tag_list","trim","existing_tag","index","splice","CateringItemOptionModalComponent","option","types","group","multiple","new_option","parent","cateringItemAvailable","is_available","rule","condition","setHours","ext","CateringOrderModalComponent","menu_items","order","getCateringConfig","menu","cat","updateMenuQuantities","choose_options","old_item","itm","o","opt","selectOptions","new_item","addItem","show_order_details","CateringOrderOptionsModalComponent","option_state","group_list","saveOptions","CateringImportMenuModalComponent","element","target","files","file","fileReader","FileReader","csv","delimiter","objPattern","RegExp","arrMatches","arrData","exec","headers","row","csvToJson","result","readAsText","filename","contents","document","createElement","setAttribute","encodeURIComponent","style","display","appendChild","click","removeChild","downloadFile","CateringStateService","_dialog","_menu","_loading","_currency","subscription","getCateringForZone","findIndex","updateMenu","updateConfig","updated_menu","match","CateringMenuItemComponent","_catering","show_options","addOption","editOption","removeOption","deleteOption","editItem","removeItem","deleteItem","CateringMenuComponent","shown_tab","tab_menu","menu_map","CateringOrderItemComponent","active","EVENTS_ENDPOINT","CateringOrdersService","_poll","_filters","orders","debounceTime","switchMap","filters","startOfDay","endOfDay","q","query","queryEvents","zone_ids","period_start","period_end","events","tap","shareReplay","filtered","search","checkOrder","updated_order","method","toJSON","updateEvent","createEvent","CATERING_STATUSES","colour","CateringOrderComponent","_orders","show_items","statuses","updateStatus","CateringOrderListComponent","order_list","startPolling","stopPolling","undefined","SharedCateringModule","CateringTopbarComponent","_route","setDate","updateZones","z","relativeTo","queryParams","editConfig","queryParamMap","params","has","paramMap","page","CateringComponent","routes","path","component","redirectTo","AppRoutingModule","useHash","MOCK_MENU","generateCateringOrder","mx","fill","idx","MOCK_ORGS","created_at","updated_at","triggers","MOCK_BUILDINGS","MOCK_LEVELS","num","substr","mockLevel","p","MOCK_METADATA","current","contacts","ZONE_MOCKS","padString","callback","request","query_params","area_management","location_services","route_params","generateMockDeskMetadata","DESK_FEATURES","desks","registerMocks","DOMAIN","PREDEF_USERS","ACTIVE_USER","MOCK_STAFF","MOCK_GUESTS","SpaceSelectItemComponent","primary","summary","can_edit","starts_at","ends_at","SpaceSelectModalComponent","spaces","space_types","available_spaces","cal","querySpaceFreeBusy","filtered_spaces","filterSpacesFromRules","rulemap","rulesForSpace","forEach","space_map","save","SPACE_COUNT","randomSpaceFeatures","numFeatures","r","MOCK_SPACES","linked","long_name","searchable","controlable","cost_hour","setup","bookings","linked_rooms","generateMockSpace","EVENT_TIME","startOf","nextEventTime","unix","event_status","randomStatus","rnd","MOCK_EVENTS","PEOPLE","unshift","event_spaces","USER_MOCKS","person","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","x","y","last_seen","subtract","geo","lat","lon","RoomModule","volume","connected","input_list","output_list","env_sources","inputs","outputs","source","output","$updateState","following","mute","$mute","locked","Mic1","mod","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","updateBookings","bkn","pending","subSeconds","MockLocationServicesModule","overview","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","CaptureModule","live","remaining","$start","createCaptureModule","SYSTEM_MOCKS","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","createSystem","EVENT_MOCKS","new_event","CALENDAR_MOCKS","handleSpaceAvailability","system_ids","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","BOOKING_MOCKS","updateBooking","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","listen","reload","copy","navigator","clipboard","readText","tkn","addHours","mock","origin","hostname","url","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","setupPlace","onInitError","cache","isEnabled","available","hash","activateUpdate","activated","checkForUpdate","setupCache","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","AppModule","showDialog","deps","enabled","bootstrapModule"],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8355;\nmodule.exports = webpackEmptyAsyncContext;","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","\nconst general = {\n}\n\n\nconst app = {\n    name: 'Catering',\n    title: 'PlaceOS',\n    description: 'Caterers UI',\n    short_name: 'PlaceOS',\n    logo: {\n        type: 'img',\n        src: 'assets/logo-light.svg'\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg'\n    },\n    general\n}\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/catering',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"eca7e56\",\n    \"hash\": \"eca7e56\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"eca7e56\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1628648816690\n};\n/* tslint:enable */\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                ratio$: this._on_changes.pipe(\n                                    map((_) => _.ratio)\n                                ),\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        try {\n            if (!getViewer(this.viewer) || this.loading) {\n                return this.timeout('update_view', () => this.updateView());\n            }\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        try {\n            updateViewer(this.viewer, {\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                desired_center: this.center,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                updateViewer(this.viewer, {\n                    styles: this.styles,\n                    features: [],\n                    labels: this.labels,\n                    actions: this.actions,\n                    options: this.options,\n                });\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        if (!id || !this.viewer) return;\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-unauthorised',\n    template: `\n        <div\n            class=\"unauthorised rounded m-4 text-center bg-white text-black border border-gray-400 p-4 shadow\"\n        >\n            <h1 class=\"text-4xl\">403</h1>\n            <h3 class=\"text-2xl\" i18n=\"@@forbiddenLabel\">Access forbidden.</h3>\n            <p class=\"py-4\" i18n=\"@@invalidPermissionLabel\">\n                You do not have permission to view this page and your access\n                attempt has been recorded.\n            </p>\n            <p i18n=\"@@contactAdminLabel\">\n                Contact your Administrator if you feel that you should have\n                access.\n            </p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            .unauthorised {\n                width: 28em;\n                max-width: calc(100vw - 1rem);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .unauthorised {\n                    background-color: #262626;\n                    color: #fff;\n                }\n            }\n        `,\n    ],\n})\nexport class UnauthorisedComponent {}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MapPolygonComponent } from './map-polygon.component';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    MapPolygonComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'an-action-field',\n    template: `\n        <div\n            class=\"flex items-center rounded p-2 border border-gray-300 hover:border-black\"\n            role=\"button\"\n            [attr.disabled]=\"disabled\"\n            form-field\n            tabindex=\"0\"\n            (keydown.enter)=\"performAction()\"\n        >\n            <div\n                placeholder\n                class=\"flex-1 w-0 truncate\"\n                (click)=\"performAction()\"\n            >\n                <ng-content></ng-content>\n            </div>\n            <app-icon class=\"text-xl\" (click)=\"performAction()\">\n                arrow_drop_{{ show_tooltip ? 'up' : 'down' }}\n            </app-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div:hover {\n                box-shadow: inset 0 0 0 1px #000;\n            }\n        `,\n    ],\n})\nexport class ActionFieldComponent {\n    /** Name of the field */\n    @Input() public name: string;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Emitter for user interaction events */\n    @Output('onAction') public on_action = new EventEmitter();\n    /** Whether to show tooltip */\n    public show_tooltip = false;\n\n    /**\n     * Emit that the user has performed an action on the field\n     */\n    public performAction() {\n        this.show_tooltip = !this.show_tooltip;\n        this.on_action.emit();\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'a-counter',\n    template: `\n        <div\n            counter\n            class=\"flex items-center text-base\"\n            (window:keydown.shift)=\"shift_key = true\"\n            (window:keydown.control)=\"ctrl_key = true\"\n            (window:keydown.meta)=\"ctrl_key = true\"\n            (window:keyup.shift)=\"shift_key = false\"\n            (window:keyup.control)=\"ctrl_key = false\"\n            (window:keyup.meta)=\"ctrl_key = false\"\n        >\n            <button\n                mat-icon-button\n                name=\"remove\"\n                type=\"button\"\n                [disabled]=\"!value || value === min\"\n                (click)=\"remove()\"\n            >\n                <app-icon>remove</app-icon>\n            </button>\n            <div value class=\"p-1 text-center\">{{ (render_fn ? render_fn(value) : value) || '0' }}</div>\n            <button\n                mat-icon-button\n                name=\"add\"\n                type=\"button\"\n                [disabled]=\"value === max\"\n                (click)=\"add()\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            [value] {\n                min-width: 3em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => CounterComponent),\n            multi: true,\n        },\n    ],\n})\nexport class CounterComponent implements ControlValueAccessor {\n    /** Size of a single step */\n    @Input() public step = 1;\n    /** Maximum amount for the counter */\n    @Input() public max = 10;\n    /** Minimum amount for the counter */\n    @Input() public min = 0;\n    /** Custom function for rendering the counter value */\n    @Input() public render_fn: (v: number) => string;\n    /** Current value of the counter */\n    public value: number;\n    /** Whether shift key is being held by the user */\n    public shift_key: boolean;\n    /** Whether control key is being held by the user */\n    public ctrl_key: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public add() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value += step;\n        if (this.value > this.max) {\n            this.value = this.max || 10;\n        }\n        this.setValue(this.value);\n    }\n\n    /** Remove the `step` from the current value */\n    public remove() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value -= step;\n        if (this.value < this.min) {\n            this.value = this.min || 0;\n        }\n        this.setValue(this.value);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.is_external) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, { name: 'catering' }).toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, { name: 'catering_config' }).toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n            <div class=\"flex items-center p-2 flex-1\">\n                <div class=\"flex-1\">\n                    <div>{{ item.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">\n                        {{ item.category }}\n                    </div>\n                </div>\n                <div\n                    class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                >\n                    {{ item.unit_price / 100 | currency: (symbol | async) }}\n                </div>\n            </div>\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                <app-icon>more_vert</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                [disabled]=\"!item.options.length\"\n                (click)=\"show_options = !show_options\"\n            >\n                <app-icon>expand_more</app-icon>\n            </button>\n        </div>\n        <div\n            options\n            *ngIf=\"item\"\n            class=\"bg-gray-100 overflow-hidden\"\n            [style.height]=\"\n                show_options ? item.options.length * 3.5 + 'rem' : '0'\n            \"\n        >\n            <div\n                class=\"flex p-2 items-center border-none border-t border-solid border-gray-300\"\n                *ngFor=\"let option of item.options\"\n            >\n                <div class=\"flex-1 px-2\">\n                    <div class=\"text\">{{ option.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">{{ option.group }}</div>\n                </div>\n                <button\n                    edit\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"editOption(option)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    remove\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"removeOption(option)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </div>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"addOption()\"\n            >\n                <app-icon>add</app-icon>\n                <div class=\"ml-2\">Add Option</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"editItem()\"\n            >\n                <app-icon>edit</app-icon>\n                <div class=\"ml-2\">Edit Item</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"removeItem()\"\n            >\n                <app-icon>delete</app-icon>\n                <div class=\"ml-2\">Remove Item</div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                background-color: #fff;\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n                overflow: hidden;\n                width: 768px;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab *ngFor=\"let group of categories\" [label]=\"group\">\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <div class=\"w-20 text-right\">\n            <div name=\"item-bar\" class=\"bg-gray-300\"></div>\n        </div>\n        <div class=\"w-12 mr-4\">\n            <button\n                mat-icon-button\n                class=\"border border-gray-300 border-dashed text-2xl text-dark-fade\"\n                [class.bg-success]=\"active\"\n                [class.text-white]=\"active\"\n                [class.border-solid]=\"active\"\n            >\n                <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n            </button>\n        </div>\n        <div class=\"flex-1 border-b border-gray-300 border-solid py-4\">\n            {{ item?.name }}\n        </div>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n\n            [name='item-bar'] {\n                height: 2px;\n                margin-left: auto;\n                margin-right: 1rem;\n                width: calc(50% - 0.9375rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public item: CateringItem;\n\n    public active = false;\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from 'libs/users/src/lib/user.class';\n\nimport { CalendarEvent } from './event.class';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, new CalendarEvent(data).toJSON()).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        method === 'patch' ? data : new CalendarEvent(data).toJSON()\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => {\n    delete (data as any)?.status;\n    return data.id ? updateEvent(data.id, data, q) : createEvent(data);\n};\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        {\n            response_type: 'void',\n        }\n    );\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/approve?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/reject?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/guests/${guest_id}/checkin${query ? '?' + query : ''}`,\n        ''\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends BaseClass {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(filters.date || Date.now()));\n            const end = getUnixTime(endOfDay(filters.date || Date.now()));\n            return queryEvents({\n                zone_ids: (filters.zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list.filter((order) => checkOrder(order, this._filters.getValue()))\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public updateStatus(order: CateringOrder, status: CateringOrderStatus) {\n        const updated_order = new CateringOrder({ ...order, status });\n        const event = new CalendarEvent({\n            ...order.event,\n            catering: [\n                ...order.event.ext('catering').filter((o) => o.id !== order.id),\n                updated_order,\n            ].map((i) => new CateringOrder({ ...i })),\n        });\n        return saveEvent(event);\n    }\n}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n","import { Component, Input } from '@angular/core';\n\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 bg-gray-100\"\n            [class.shown]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div class=\"w-20 flex items-center justify-center\">\n                <div\n                    class=\"rounded-full bg-gray-300  p-2 text-2xl text-dark-fade flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div class=\"w-24\">{{ order.deliver_at | date: 'shortTime' }}</div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-24\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button mat-icon-button (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <div\n                name=\"bar\"\n                class=\"absolute top-0 bg-gray-300\"\n                [style.height]=\"3.125 * order.items.length - 1 + 'rem'\"\n            ></div>\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            .shown {\n                background-color: #eee;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = (s) =>\n        this._orders.updateStatus(this.order, s);\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    constructor(private _orders: CateringOrdersService) {}\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-24\">Charge Code</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block text-dark-fade\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n    CateringImportMenuModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        MatRadioModule,\n        MatTooltipModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        FormFieldsModule,\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CateringOrdersService, CateringStateService } from '@placeos/catering';\n\n@Component({\n    selector: 'catering-topbar',\n    template: `\n        <a\n            matRipple\n            *ngIf=\"page\"\n            class=\"flex items-center space-x-2 pl-4 py-2 pr-8 rounded\"\n            [routerLink]=\"['/']\"\n        >\n            <app-icon>arrow_back</app-icon>\n            <p class=\"underline\">Back</p>\n        </a>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button *ngIf=\"page === 'menu'\" mat-button (click)=\"addItem()\">\n            Add Item\n        </button>\n        <button *ngIf=\"page === 'menu'\" mat-button (click)=\"editConfig()\">\n            Edit Config\n        </button>\n        <div class=\"flex-1 w-2\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <!-- <date-options (dateChange)=\"setDate($event)\"></date-options> -->\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class CateringTopbarComponent extends BaseClass {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** Currently active page */\n    public page: string;\n    /** Set filtered date */\n    public readonly setDate = (date) =>\n        (this._orders.filters = { ...this._orders.filters, date });\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._orders.filters = { ...this._orders.filters, zones: [z] };\n    };\n\n    public readonly addItem = () => this._catering.addItem();\n    public readonly editConfig = () => this._catering.editConfig();\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _catering: CateringStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(\n                (params) =>\n                    (this.page = params.has('view') ? params.get('view') : '')\n            )\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass } from '@placeos/common';\n\n@Component({\n    selector: 'app-catering',\n    template: `\n        <main class=\"relative w-full flex flex-col bg-gray-200\">\n            <catering-topbar\n                *ngIf=\"page\"\n                class=\"relative z-10\"\n            ></catering-topbar>\n            <ng-container [ngSwitch]=\"page\">\n                <catering-order-list\n                    *ngSwitchCase=\"'orders'\"\n                    class=\"flex-1\"\n                ></catering-order-list>\n                <catering-menu\n                    *ngSwitchCase=\"'menu'\"\n                    class=\"flex-1\"\n                ></catering-menu>\n                <div\n                    *ngSwitchDefault\n                    class=\"flex flex-1 items-center justify-center\"\n                >\n                    <a\n                        matRipple\n                        class=\"rounded flex flex-col items-center bg-white shadow text-black overflow-hidden\"\n                        [routerLink]=\"['/menu']\"\n                    >\n                        <div\n                            name=\"img\"\n                            class=\"w-full flex flex-1 items-center justify-center text-2xl text-white\"\n                            [style.background]=\"\n                                'rgba(0,0,0, .45) url(assets/img/menus.jpg)'\n                            \"\n                        >\n                            Menus and Pricing\n                        </div>\n                        <div\n                            class=\"p-2 h-14 w-full text-sm text-center flex items-center justify-center\"\n                        >\n                            View and Edit Menus and Pricing\n                        </div>\n                    </a>\n                    <a\n                        matRipple\n                        class=\"rounded flex flex-col items-center bg-white shadow text-black overflow-hidden\"\n                        [routerLink]=\"['/orders']\"\n                    >\n                        <div\n                            name=\"img\"\n                            class=\"w-full flex flex-1 items-center justify-center text-2xl text-white\"\n                            [style.background]=\"\n                                'rgba(0,0,0, .45) url(assets/img/orders.jpg)'\n                            \"\n                        >\n                            Today's Orders\n                        </div>\n                        <div\n                            class=\"p-2 h-14 w-full text-sm text-center flex items-center justify-center\"\n                        >\n                            View Catering Orders and their statuses upon arrival\n                        </div>\n                    </a>\n                </div>\n            </ng-container>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            a {\n                width: 28rem;\n                height: 16rem;\n                margin-left: 0.5rem;\n                text-decoration: none;\n                transition: background 200ms;\n            }\n\n            a:hover {\n                background-color: #00000001 !important;\n            }\n\n            a:first-child {\n                margin: 0;\n            }\n\n            [name='img'] {\n                background: rgba(0, 0, 0, 0.45);\n            }\n        `,\n    ],\n})\nexport class CateringComponent extends BaseClass {\n    /** Page being displayed */\n    public page: string;\n\n    constructor(private _route: ActivatedRoute) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(\n                (params) =>\n                    (this.page = params.has('view') ? params.get('view') : '')\n            )\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UnauthorisedComponent } from '@placeos/components';\nimport { CateringComponent } from './catering.component';\n\nconst routes: Routes = [\n    {\n        path: 'unauthorised',\n        component: UnauthorisedComponent,\n    },\n    { path: '', component: CateringComponent },\n    { path: ':view', component: CateringComponent },\n    { path: '**', redirectTo: 'unauthorised' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        tags: ['drink'],\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        tags: ['drink'],\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), []);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nexport const ZONE_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/zones',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.tags === 'org') {\n                return MOCK_ORGS;\n            } else if (request.query_params.tags === 'building') {\n                return MOCK_BUILDINGS;\n            } else if (request.query_params.tags === 'level') {\n                return MOCK_LEVELS;\n            }\n            throw { status: 404, message: 'Zones not found' };\n        },\n    });\n\n    function padString(str: string | number, length: number = 5) {\n        str = `${str}`;\n        while (str.length < length) str = `0${str}`;\n        return str;\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.name === 'bindings') {\n                return {\n                    bindings: {\n                        details: {\n                            area_management: 'space-0',\n                            location_services: 'space-0',\n                        },\n                    },\n                };\n            }\n            if (request.query_params.name === 'catering') {\n                return {\n                    catering: {\n                        details: MOCK_MENU,\n                    },\n                };\n            }\n            if (request.query_params.name === 'desks') {\n                const parts = request.route_params.id.split('-');\n                const id = parts[parts.length - 1];\n                return generateMockDeskMetadata(id);\n            }\n            if (\n                MOCK_METADATA[request.route_params.id] &&\n                MOCK_METADATA[request.route_params.id][\n                    request.query_params.name\n                ]\n            ) {\n                return MOCK_METADATA[request.route_params.id];\n            } else if (\n                MOCK_METADATA[request.route_params.id] &&\n                !request.query_params.name\n            ) {\n                return MOCK_METADATA[request.route_params.id] || {};\n            }\n            return {};\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            if (!MOCK_METADATA[request.route_params.id])\n                MOCK_METADATA[request.route_params.id] = {};\n            MOCK_METADATA[request.route_params.id][request.body.name] =\n                request.body;\n        },\n    });\n\n    const DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\n    function generateMockDeskMetadata(id: string) {\n        return {\n            desks: {\n                details: new Array(30).fill(0).map((_, idx) => ({\n                    id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                    name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                    bookable: predictableRandomInt(9999) % 4 !== 0,\n                    group: '',\n                    features: DESK_FEATURES.filter(\n                        (_) => predictableRandomInt(99999) % 3 === 0\n                    ),\n                })),\n            },\n        };\n    }\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/metadata/:id/children',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const zone = MOCK_BUILDINGS.find(\n                (_) => _.id === request.route_params.id\n            );\n            if (!zone)\n                throw {\n                    status: 404,\n                    message: `Unable to find zone with id \"${request.route_params.id}\"`,\n                };\n            return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map(\n                (lvl) => {\n                    const parts = lvl.id.split('-');\n                    const id = parts[parts.length - 1];\n                    return {\n                        zone: lvl,\n                        metadata: generateMockDeskMetadata(id),\n                    };\n                }\n            );\n        },\n    });\n}\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nexport const USER_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/engine/v2/users/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.id === 'current') {\n                return ACTIVE_USER;\n            }\n            const person = MOCK_STAFF.find(\n                (user) => user.email === request.route_params.id\n            );\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_STAFF.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/people/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const id = decodeURIComponent(request.route_params.id);\n            const person = MOCK_STAFF.find((user) => user.email === id);\n            if (person) {\n                return {\n                    ...person,\n                    location: generateLocation(),\n                };\n            }\n            throw { status: 404, message: 'User not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.query_params.q) {\n                const search = request.query_params.q.toLowerCase();\n                return MOCK_GUESTS.filter(\n                    (user) =>\n                        user.name.toLowerCase().includes(search) ||\n                        user.email.toLowerCase().includes(search)\n                );\n            }\n            return MOCK_STAFF;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const email = decodeURIComponent(request.route_params.email);\n            const person = MOCK_GUESTS.find((user) => user.email === email);\n            if (person) {\n                return person;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/guests/:email/meetings',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            if (request.route_params.email) {\n                const email = request.route_params.email.toLowerCase();\n                const events = MOCK_EVENTS.filter((event) =>\n                    event.attendees.find(\n                        (user) => user.email.toLowerCase() === email\n                    )\n                );\n                return events;\n            }\n            throw {\n                status: 404,\n                message: `Unable to find meetings with guest with email ${request.route_params.email}`,\n            };\n        },\n    });\n\n    const LOCATION_TYPES = [\n        'meeting',\n        'desk_id',\n        'laptop',\n        'mobile',\n        'geo',\n        'none',\n    ];\n\n    function generateLocation() {\n        const type =\n            LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n        const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n        const level_spaces = MOCK_SPACES.filter((s) =>\n            s.zones.includes(level.id)\n        );\n        const space =\n            level_spaces[predictableRandomInt(level_spaces.length)] || {};\n        const location: HashMap = {};\n        switch (type) {\n            case 'meeting':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    system: space.id,\n                    map_id: space.map_id,\n                    event_id: '',\n                };\n                break;\n            case 'desk_id':\n                location.meeting = {\n                    building: level.parent_id,\n                    level: level.id,\n                    map_id: space.map_id,\n                    checked_in: dayjs().unix(),\n                };\n                break;\n            case 'laptop':\n            case 'mobile':\n                location[type] = {\n                    building: level.parent_id,\n                    level: level.id,\n                    x: +predictableRandomInt(10000),\n                    y: +predictableRandomInt(5000),\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n            case 'geo':\n                location.geo = {\n                    lat: predictableRandomInt(180) - 90,\n                    lon: predictableRandomInt(360) - 180,\n                    last_seen: dayjs()\n                        .subtract(predictableRandomInt(60), 'm')\n                        .unix(),\n                };\n                break;\n        }\n        return location;\n    }\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $powerup() {\n        console.log('Power On');\n        this.active = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.active = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nexport const SYSTEM_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    MOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\n    registerMockEndpoint({\n        path: '/api/engine/v2/systems',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            return MOCK_SPACES;\n        },\n    });\n}\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\nexport const EVENT_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            let events = MOCK_EVENTS;\n            if (!_.query_params.zone_ids) {\n                events = events.filter(\n                    (event) =>\n                        !!event.attendees.find(\n                            (user) => user.email === ACTIVE_USER.email\n                        )\n                );\n            }\n            if (_.query_params.period_start) {\n                events = events.filter((e) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        e.event_start,\n                        e.event_end\n                    )\n                );\n            }\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-cal-event-${predictableRandomInt(999)}`,\n            };\n            new_event.attendees = [\n                MOCK_STAFF.find((_) => _.email === new_event.host),\n                ...(new_event.attendees || []),\n            ];\n            new_event.attendees.forEach((user) => {\n                if (user.zones) user.resource = true;\n            });\n\n            if (new_event.system) {\n                new_event.attendees = [\n                    ...(new_event.attendees || []),\n                    { ...new_event.system, resource: true },\n                ];\n            }\n            MOCK_EVENTS.push(new_event);\n            return new_event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => {\n            const item = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (item) {\n                return item;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index > 0) {\n                if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                    MOCK_EVENTS.splice(index, 1);\n                } else {\n                    const user = MOCK_EVENTS[index].attendees.find(\n                        (_) => _.email === ACTIVE_USER.email\n                    );\n                    user.response_status = 'declined';\n                }\n                return;\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id',\n        metadata: {},\n        method: 'PATCH',\n        callback: (request) => {\n            const index = MOCK_EVENTS.findIndex(\n                (event) => event.id === request.route_params.id\n            );\n            if (index >= 0) {\n                return MOCK_EVENTS.splice(index, 1, request.body);\n            }\n            throw { status: 404, message: 'Event not found' };\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/events/:id/guests/:email/checkin',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const event = MOCK_EVENTS.find(\n                (event) => event.id === request.route_params.id\n            );\n            if (event) {\n                const checked_in =\n                    (event.extension_data as any).checked_in || [];\n                (event.extension_data as any).checked_in = checked_in.concat([\n                    request.route_params.email,\n                ]);\n                return event;\n            }\n            throw { status: 404, message: 'Guest not found' };\n        },\n    });\n}\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport { timePeriodsIntersect } from '@placeos/common';\n\nexport const CALENDAR_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars',\n        metadata: {},\n        method: 'GET',\n        callback: (request) => [],\n    });\n\n    const handleSpaceAvailability = (request) => {\n        const start = +request.query_params.period_start;\n        const end = +request.query_params.period_end;\n        const zones = (request.query_params.zone_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n        const systems = (request.query_params.system_ids || '')\n            .split(',')\n            .filter((i) => !!i);\n\n        const spaces = MOCK_SPACES.filter((space) =>\n            zones.length\n                ? zones.reduce(\n                      (has, zone) => has && space.zones.includes(zone),\n                      true\n                  )\n                : systems.length\n                ? systems.includes(space.id)\n                : true\n        ).filter((space) => {\n            const bookings = MOCK_EVENTS.filter((event) =>\n                event.attendees.find((user) => user.id === space.id)\n            );\n            for (const event of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        start,\n                        end,\n                        event.event_start,\n                        event.event_end\n                    )\n                )\n                    return false;\n            }\n            return true;\n        });\n        return spaces;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/availability',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/calendars/free_busy',\n        metadata: {},\n        method: 'GET',\n        callback: (request) =>\n            handleSpaceAvailability(request).map((_) => ({\n                resource: _,\n            })),\n    });\n}\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { log } from '@placeos/common';\n\nimport { ZONE_MOCKS } from './lib/api/zones.mock';\nimport { USER_MOCKS } from './lib/api/users.mock';\nimport { SYSTEM_MOCKS } from './lib/api/systems.mock';\nimport { EVENT_MOCKS } from './lib/api/events.mock';\nimport { CALENDAR_MOCKS } from './lib/api/calendars.mock';\nimport { BOOKING_MOCKS } from './lib/api/bookings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nexport const BOOKING_MOCKS = registerMocks();\n\nfunction registerMocks() {\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const events = MOCK_BOOKINGS.filter(\n                (event) =>\n                    timePeriodsIntersect(\n                        _.query_params.period_start,\n                        _.query_params.period_end,\n                        event.booking_start,\n                        event.booking_end\n                    ) && event.type === _.query_params.type\n            );\n            return events;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'GET',\n        callback: (_) => {\n            const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n            if (!event)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${_.route_params.id}`,\n                };\n            return event;\n        },\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings',\n        metadata: {},\n        method: 'POST',\n        callback: (request) => {\n            const new_event = {\n                ...request.body,\n                id: `-booking-${predictableRandomInt(999)}`,\n            };\n            MOCK_BOOKINGS.push(new_event);\n            return new_event;\n        },\n    });\n\n    const updateBooking = (id, data) => {\n        const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${id}`,\n            };\n        const new_event = { ...data };\n        MOCK_BOOKINGS.splice(index, 1, new_event);\n        return new_event;\n    };\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'PUT',\n        callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/approve',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: true,\n                rejected: false,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/reject',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                approved: false,\n                rejected: true,\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id/check_in',\n        metadata: {},\n        method: 'POST',\n        callback: (req) =>\n            updateBooking(req.route_params.id, {\n                ...req.body,\n                checked_in: req.query_params.state === 'true',\n            }),\n    });\n\n    registerMockEndpoint({\n        path: '/api/staff/v1/bookings/:id',\n        metadata: {},\n        method: 'DELETE',\n        callback: (req) => {\n            const index = MOCK_BOOKINGS.findIndex(\n                (e) => e.id === req.route_params.id\n            );\n            if (index < 0)\n                throw {\n                    status: 404,\n                    message: `Unable to find booking with ID ${req.route_params.id}`,\n                };\n            MOCK_BOOKINGS.splice(index, 1);\n            return;\n        },\n    });\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n    log,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        log('APP', 'MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 30 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                currentUser()?.email?.split('@')[1]\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatChipsModule } from '@angular/material/chips';\n\nimport { SharedCateringModule } from '@placeos/catering';\nimport { ComponentsModule, UnauthorisedComponent } from '@placeos/components';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from '../../../../libs/components/src/lib/app.component';\nimport { environment } from '../environments/environment';\nimport { CateringComponent } from './catering.component';\nimport { CateringTopbarComponent } from './catering-topbar.component';\n\nimport * as Sentry from '@sentry/angular';\nimport { MatRippleModule } from '@angular/material/core';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        UnauthorisedComponent,\n        CateringComponent,\n        CateringTopbarComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        AppRoutingModule,\n        MatSnackBarModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatTabsModule,\n        MatChipsModule,\n        SharedCateringModule,\n        ComponentsModule,\n        MatRippleModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export const environment = {\n    production: true,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n"],"sourceRoot":"webpack:///"}