{"version":3,"sources":["./apps/concierge/$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./apps/concierge/src/app/day-view/event-form.component.ts","./apps/concierge/src/app/day-view/booking-modal.component.ts","./apps/concierge/src/app/day-view/events-state.service.ts","./apps/concierge/src/app/ui/date-options.component.ts","./apps/concierge/src/app/ui/searchbar.component.ts","./apps/concierge/src/app/ui/sidebar.component.ts","./apps/concierge/src/app/ui/ui.module.ts","./apps/concierge/src/app/ui/view-event-details.component.ts","./apps/concierge/src/app/app-routing.module.ts","./libs/mocks/src/lib/api/catering.data.ts","./libs/mocks/src/lib/api/zone.data.ts","./libs/mocks/src/lib/api/zones.mock.ts","./libs/mocks/src/lib/api/common.mock.ts","./libs/mocks/src/lib/api/users.data.ts","./libs/mocks/src/lib/api/spaces.data.ts","./libs/mocks/src/lib/api/events.data.ts","./libs/mocks/src/lib/api/users.mock.ts","./libs/mocks/src/lib/realtime/control.ts","./libs/mocks/src/lib/realtime/events.ts","./libs/mocks/src/lib/realtime/desks.ts","./libs/mocks/src/lib/realtime/camera.ts","./libs/mocks/src/lib/realtime/display.ts","./libs/mocks/src/lib/realtime/microphone.ts","./libs/mocks/src/lib/realtime/capture.ts","./libs/mocks/src/lib/systems-bindings.mock.ts","./libs/mocks/src/lib/api/systems.mock.ts","./libs/mocks/src/lib/api/events.mock.ts","./libs/mocks/src/lib/api/calendars.mock.ts","./libs/mocks/src/lib/api/bookings.data.ts","./libs/mocks/src/lib/api/bookings.mock.ts","./libs/mocks/src/index.ts","./libs/components/src/lib/app.component.ts","./apps/concierge/src/app/app.module.ts","./apps/concierge/src/environments/environment.prod.ts","./apps/concierge/src/main.ts","./libs/calendar/src/lib/calendar.class.ts","./libs/calendar/src/lib/calendar.fn.ts","./libs/catering/src/lib/catering-item.class.ts","./libs/catering/src/lib/catering-order.class.ts","./libs/common/src/lib/hotkeys.service.ts","./apps/concierge/src/environments/settings.ts","./libs/common/src/lib/settings.service.ts","./libs/common/src/lib/version.ts","./libs/common/src/lib/angular-animations.ts","./libs/common/src/lib/notifications.ts","./libs/common/src/lib/application.ts","./libs/common/src/lib/placeos.ts","./libs/common/src/lib/user-state.ts","./libs/common/src/lib/api.ts","./libs/common/src/lib/base.class.ts","./libs/common/src/lib/general.ts","./libs/components/src/lib/popout-menu.component.ts","./libs/components/src/lib/map-pin.component.ts","./libs/components/src/lib/map-radius.component.ts","./libs/components/src/lib/status-overlay.component.ts","./libs/components/src/lib/login.component.ts","./libs/components/src/lib/unauthorised.component.ts","./libs/components/src/lib/authorised-user.guard.ts","./libs/components/src/lib/components.module.ts","./libs/components/src/lib/action-icon.component.ts","./libs/components/src/lib/confirm-modal.component.ts","./libs/components/src/lib/custom-table.component.ts","./libs/components/src/lib/global-loading.component.ts","./libs/components/src/lib/icon.component.ts","./libs/components/src/lib/interactive-map.component.ts","./libs/components/src/lib/safe.pipe.ts","./libs/components/src/lib/sanitise.pipe.ts","./libs/components/src/lib/user-avatar.component.ts","./libs/components/src/lib/virtual-keyboard.component.ts","./libs/events/src/lib/validators.ts","./libs/events/src/lib/utilities.ts","./libs/events/src/lib/event-form.service.ts","./libs/events/src/lib/event.class.ts","./libs/events/src/lib/events.fn.ts","./libs/events/src/lib/helpers.ts","./libs/form-fields/src/lib/form-fields.module.ts","./libs/form-fields/src/lib/action-field.component.ts","./libs/form-fields/src/lib/counter.component.ts","./libs/form-fields/src/lib/date-field.component.ts","./libs/form-fields/src/lib/duration-field.component.ts","./libs/form-fields/src/lib/item-list-field.component.ts","./libs/form-fields/src/lib/time-field.component.ts","./libs/form-fields/src/lib/user-list-field.component.ts","./libs/form-fields/src/lib/user-search-field.component.ts","./libs/organisation/src/lib/desk.class.ts","./libs/organisation/src/lib/level.class.ts","./libs/organisation/src/lib/organisation.class.ts","./libs/organisation/src/lib/building.class.ts","./libs/organisation/src/lib/organisation.service.ts","./libs/spaces/src/lib/space-select-item.component.ts","./libs/spaces/src/lib/space-select-modal.component.ts","./libs/spaces/src/lib/spaces.module.ts","./libs/spaces/src/lib/space.utilities.ts","./libs/spaces/src/lib/space.class.ts","./libs/spaces/src/lib/spaces.service.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/users/src/lib/location.class.ts","./libs/users/src/lib/guests.fn.ts","./libs/users/src/lib/staff.fn.ts","./libs/users/src/lib/user.class.ts","./libs/users/src/lib/user.utilities.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","form","EventFormComponent","_dialog","this","controls","resources","value","map","i","display_name","name","join","ref","open","data","spaces","date","duration","success","race","componentInstance","event","pipe","first","_","reason","toPromise","afterClosed","patchValue","metadata","close","BookingModalComponent","_data","_service","_dialog_ref","loading","newForm","postForm","catch","emit","EventsStateService","_spaces","super","_poll","BehaviorSubject","_long_poll","_bookings","_filters","_options","_date","Date","valueOf","_zones","_loading","_state","combineLatest","_event","bookings","asObservable","zones","options","filtered","start","startOfDay","getValue","end","endOfDay","filterEvents","filtered_week","startOfWeek","endOfWeek","filtered_month","startOfMonth","endOfMonth","search","filter","debounceTime","switchMap","fzones","length","of","next","zone_ids","period_start","Math","floor","period_end","catchError","search_long","props","type","subscribe","events","processBookings","details","old_options","delay","interval","clearInterval","booking","replace","title","content","format","location","icon","class","system_id","system","remove","new_bookings","bkn","concat","period","forEach","space","find","s","email","from","to","filters","intersects","in_zone","r","z","includes","has_space","space_emails","in_zones","zone","show","hide_type","guests","status","DateOptionsComponent","dateChange","previousDay","nextDay","SearchbarComponent","model","modelChange","SidebarComponent","_settings","_org","buildings","building_list","active_building","setBuilding","b","building","get","MAT_MODULES","ANGULAR_MODULES","UIModule","ViewEventDetailsComponent","setEvent","edit","newBooking","removeBooking","level","$event","stopPropagation","routes","path","component","loadChildren","m","DayViewModule","canActivate","canLoad","FacilitiesModule","VisitorsModule","DesksModule","ReportsModule","StaffModule","CateringModule","PointsModule","redirectTo","AppRoutingModule","useHash","MOCK_MENU","unit_price","category","group","generateCateringOrder","differenceInMinutes","event_start","event_end","mx","event_id","invoice_number","charge_code","deliver_at","addMinutes","items","Array","fill","idx","quantity","MOCK_ORGS","created_at","updated_at","description","tags","count","capacity","parent_id","triggers","MOCK_BUILDINGS","levels","MOCK_LEVELS","bld","num","map_id","substr","endsWith","split","mockLevel","reduce","p","c","MOCK_METADATA","current","contacts","first_name","last_name","padString","str","method","callback","request","query_params","message","bindings","area_management","location_services","catering","parts","route_params","generateMockDeskMetadata","body","DESK_FEATURES","desks","bookable","features","lvl","DOMAIN","PREDEF_USERS","ACTIVE_USER","groups","MOCK_STAFF","toLowerCase","MOCK_GUESTS","visit_expected","randomSpaceFeatures","f","numFeatures","res","push","el","indexOf","MOCK_SPACES","d","EVENT_TIME","startOf","hour","nextEventTime","save","add","unix","event_status","randomStatus","rnd","MOCK_EVENTS","index","PEOPLE","attendees","sort","a","resource","unshift","host","calendar","creator","response_status","private","timezone","all_day","recurring","recurrence","attachments","extension_data","setup","breakdown","event_spaces","person","user","q","decodeURIComponent","generateLocation","LOCATION_TYPES","level_spaces","meeting","checked_in","x","y","last_seen","subtract","geo","lat","lon","RoomModule","volume","connected","active","input_list","output_list","env_sources","inputs","Object","outputs","t","source","key","console","log","input","output","$updateState","following","state","mute","$mute","locked","Mic1","mod","Mic2","Mic3","PC1","PC2","PC3","PC4","HDMI","VGA","Camera1","Camera2","Camera3","Camera4","TV1","Display1","Display2","Display3","Display4","Display5","states","createSystemModule","overrides","MockBookingModule","time_zone","disable_book_now","disable_end_meeting","pending_period","pending_before","control_ui","catering_ui","last_booking_started","createBookingsModule","$start_meeting","$end_meeting","$book_now","len","o","updateBookings","setInterval","u","isBefore","pending","subSeconds","addSeconds","MockLocationServicesModule","overview","username","padZero","no","createLocationServicesModule","desk_count","desk_usage","device_capacity","device_count","estimated_people","percentage_use","recommendation","number","updateLocations","users","at_location","mac","coordinates_from","s2_cell_id","variance","map_width","map_height","CameraModule","presets","dir","tilt","DisplayModule","MicrophoneModule","CaptureModule","live","remaining","$start","createCaptureModule","createSystem","System","Bookings","AreaManagement","Camera","createCameraModule","Display","createDisplayModule","Microphone","createMicrophoneModule","Capture","new_event","item","findIndex","splice","handleSpaceAvailability","systems","system_ids","has","setHours","getUnixTime","TYPES","MOCK_BOOKINGS","lvls","approved","approver","booking_start","booking_end","user_id","user_name","user_email","asset_id","access","rejected","approver_id","approver_name","approver_email","updateBooking","ZONE_MOCKS","USER_MOCKS","SYSTEM_MOCKS","EVENT_MOCKS","CALENDAR_MOCKS","BOOKING_MOCKS","BINDING_MOCKS","AppComponent","_tracing","_cache","_snackbar","_hotkey","_clipboard","listen","localStorage","setItem","getItem","reload","copy","navigator","clipboard","readText","tkn","addHours","setTimeout","initialised","settings","mock","origin","onInitError","timeout","clearTimeout","dsn","sample_rate","S","integrations","tracingOrigins","routingInstrumentation","tracesSampleRate","initSentry","is_logged_in","error","AppModule","provide","useValue","separatorKeyCodes","showDialog","deps","enabled","bootstrapModule","err","Calendar","primary","summary","can_edit","availability","starts_at","ends_at","hidden","CALENDAR_ENDPOINT","calendarsToSpaces","org","list","cal","levelWithID","querySpaceAvailability","query","queryCalendarAvailability","querySpaceFreeBusy","CateringItem","discount_cap","accept_points","total_cost","options_string","localeCompare","CateringOrder","item_count","amount","getTime","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","counter","window","addEventListener","mapKey","last_down","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","v","non_meta","DEFAULT_SETTINGS","debug","composer","domain","route","protocol","port","use_domain","local_login","app","short_name","logo_light","src","logo_dark","general","menu","SettingsService","_title","_app_name","_overrides","_subjects","_observables","now","time","built","isSameDay","init","getTitle","setTitle","pathname","slice","toUpperCase","_initialised","application","override_settings","override","opacity","height","ANIMATION_SHOW_CONTRACT_EXPAND","_available","_activated","_timer","setNotifyOutlet","snackbar","notify","action","on_action","config","snackbar_ref","panelClass","dismiss","onAction","notifySuccess","msg","notifyError","notifyInfo","info","setupCache","cache","isEnabled","unsubscribe","available","hash","activateUpdate","activated","checkForUpdate","setupPlace","hostname","url","href","auth_type","scope","auth_uri","token_uri","redirect_uri","handle_login","use_iframe","_current_user","current_user","currentUser","jest","retry","toQueryString","hasOwnProperty","BaseClass","_timers","_intervals","_subscriptions","destroy","unsub","fn","Function","contains","subs","k","setAppName","args","stream","force","app_name","colors","getItemWithKeys","shift","unique","array","pos","arr","randomInt","ceil","random","openConfirmModal","dialog","csvToJson","csv","delimiter","objPattern","RegExp","arrMatches","arrData","exec","headers","row","element","JSON","parse","jsonToCsv","json","valid_keys","stringify","downloadFile","filename","contents","document","createElement","setAttribute","encodeURIComponent","style","display","appendChild","click","removeChild","flatten","an_array","stack","pop","isArray","reverse","timePeriodsIntersect","start1","end1","start2","end2","seed","h","imul","charCodeAt","xmur3","rand","predictableRandomInt","timeFormatString","localeString","toLocaleTimeString","querySelector","getAttribute","language","is24HourTime","getInvalidFields","invalid","valid","PopoutMenuComponent","actions","MapPinComponent","_details","stroke","show_message","MapRadiusComponent","_el","zoom","radius","max","formatDistanceToNow","updateRadius","box","nativeElement","getBoundingClientRect","width","StatusOverlayComponent","links","UnauthorisedComponent","PLACEOS_APP_ACCESS","AuthorisedUserGuard","_router","_access","checkUser","segments","can_activate","navigate","ComponentsModule","ActionIconComponent","className","CONFIRM_METADATA","maxHeight","maxWidth","ConfirmModalComponent","confirm_text","cancel_text","disableClose","enableClose","CustomTableComponent","pagination","page_size","column_size","template","data_source","_sort","paginator","_paginator","filterPredicate","changes","dataSource","subscription","trim","columns","display_column","GlobalLoadingComponent","IconComponent","MAP_FEATURE_DATA","InteractiveMapComponent","_injector","center","injectors","_on_changes","updateDisplay","_feature_list","toArray","viewer","createView","providers","position","parent","focus","focusOn","styles","labels","updateView","feature_list","desired_zoom","desired_center","_outlet_el","rect","mappings","w","SafePipe","sanitizer","bypassSecurityTrustResourceUrl","bypassSecurityTrustUrl","bypassSecurityTrustScript","bypassSecurityTrustStyle","bypassSecurityTrustHtml","SecurityContext","SanitizePipe","sanitize","RESOURCE_URL","URL","SCRIPT","STYLE","HTML","UserAvatarComponent","DEFAULT_KEYS","VirtualKeyboardComponent","_element","_overlay","keyset","_overlay_ref","onFocus","onBlur","ngOnDestroy","blur","_portal","create","positionStrategy","global","bottom","centerHorizontally","attach","dispose","cursor_pos","selectionStart","dispatchEvent","InputEvent","updateKeyState","focusInput","selectionEnd","endInFuture","control","isAfter","generateEventForm","organiser","recurring_master_id","master","visitor_type","ext","needs_space","needs_parking","valueChanges","setValue","l","disable","replaceBookings","filter_options","updated_list","setMinutes","days","BOOKING_URLS","EventFormService","_view","_form","last_success","sessionStorage","shareReplay","available_spaces","view","tap","some","clearForm","storeForm","removeItem","space_list","result","setView","_default_user","setDefaultCreator","CalendarEvent","nearestTo","range_start","range_end","pattern","days_of_week","old_system","is_external","obj","hours","minutes","is_today","EVENTS_ENDPOINT","queryEvents","saveEvent","toJSON","updateEvent","createEvent","removeEvent","response_type","checkinEventGuest","guest_id","eventStatus","every","DURATION_MAP","month","months","week","weeks","day","minute","DEFAULT_RULES","auto_approve","stringToMinutes","addToDate","filterSpacesFromRules","rulemap","ruleset","checkRulesMatch","rules","rulesForSpace","matches","conditions","is_before","is_after","min_length","max_length","FormFieldsModule","ActionFieldComponent","show_tooltip","performAction","CounterComponent","step","min","ctrl_key","shift_key","new_value","_onChange","_onTouch","useExisting","multi","FieldDateAdapter","displayFormat","FIELD_DATE_FORMATS","dateInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DateFieldComponent","_from","offset","_to","toISOString","old_date","new_date","getHours","getMinutes","disabled","useClass","DurationFieldComponent","specialPreprops","duration_options","generateDurationOptions","blocks","option","ItemListFieldComponent","separators","item_list","addChipItem","removeChipItem","TimeFieldComponent","no_past_times","show_select","_time_options","generateAvailableTimes","select_field","openedChange","datestamp","show_past","showSelect","UserListFieldComponent","limit","hide_actions","new_user","user_list","active_list","validFn","test","emptyClick","openNewUserModal","search_user","a_user","target","file","files","reader","FileReader","readAsText","evt","processCsvData","srcElement","staff_id","internal_emails","phone","addUser","UserSearchFieldComponent","query_fn","search$","search_results$","search_str","cancelReset","blurInput","_input_el","active_user","resetSearchString","Desk","qr_code","BuildingLevel","locations","Organisation","raw_data","Building","disc_info","discovery_info","zone_id","extras","extra_id","extra_name","loan_items","building_id","_roles","roles","_lockers","lockers","locker_structure","_systems","_phone_numbers","phone_numbers","_location","longitude","latitude","room_configurations","attributes","searchables","neighbourhoods","lvl_features","feature","level_id","catering_hours","visitor_space","holding_bay","address","orientations","booking_details","booking_rules","catering_restricted_from","currency","OrganisationService","_buildings","_active_building","_levels","level_list","active_levels","levelsForBuilding","_building_settings","buildingSettings","bld_id","_organisation","id_list","tries","load","orgs","loadOrganisation","loadBuildings","loadLevels","loadSettings","org_list","auth","org_zone","prev","curr","SpaceSelectItemComponent","SpaceSelectModalComponent","space_types","filtered_spaces","multiple","space_map","SharedSpacesModule","SPACE_COUNT","generateMockSpace","linked","long_name","searchable","controlable","cost_hour","support_url","linked_rooms","image","Space","configurations","SpacesService","_list","_compare","loadSpaces","predicate","valid_spaces","organisation","sys","NewUserModalComponent","markAllAsTouched","UserFormComponent","touched","SharedUsersModule","MapLocation","GUEST_ENDPOINT","searchGuests","showGuest","STAFF_ENDPOINT","searchStaff","showStaff","User","notes","photo","organizer","required","sys_admin","support","assistance_required","GuestUser","preferred_beverage","accepted_terms_conditions","StaffUser","card_number","USER_DOMAIN","setInternalUserDomain","generateUserForm","fields"],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 3855;\nmodule.exports = webpackEmptyAsyncContext;","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport {\n    SpaceSelectModalComponent,\n    SpaceSelectModalData,\n} from '@placeos/spaces';\nimport { first, map } from 'rxjs/operators';\n\n@Component({\n    selector: 'event-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"flex flex-col\">\n                <label for=\"title\">Title<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"title\"\n                        formControlName=\"title\"\n                        placeholder=\"Meeting Title\"\n                    />\n                    <mat-error>A valid title is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"date\">Date<span>*</span>:</label>\n                <a-date-field name=\"date\" formControlName=\"date\"></a-date-field>\n            </div>\n            <div class=\"flex space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label for=\"start-time\">Start Time<span>*</span>:</label>\n                    <a-time-field\n                        name=\"start-time\"\n                        [ngModel]=\"form.get('date').value\"\n                        (ngModelChange)=\"form.patchValue({ date: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-time-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label for=\"duration\">Duration<span>*</span>:</label>\n                    <a-duration-field\n                        name=\"duration\"\n                        [time]=\"form.controls?.date?.value\"\n                        formControlName=\"duration\"\n                    ></a-duration-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"organiser\">Host<span>*</span>:</label>\n                <a-user-search-field\n                    name=\"organiser\"\n                    formControlName=\"organiser\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"attendees\">Attendees<span>*</span>:</label>\n                <a-user-list-field\n                    name=\"attendees\"\n                    formControlName=\"attendees\"\n                ></a-user-list-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"space\">Space<span>*</span>:</label>\n                <an-action-field name=\"space\" (onAction)=\"selectSpace()\">{{\n                    spaces\n                }}</an-action-field>\n            </div>\n        </form>\n    `,\n    styles: [``],\n})\nexport class EventFormComponent {\n    @Input() public form: FormGroup;\n\n    public get spaces() {\n        return (\n            this.form.controls?.resources?.value\n                ?.map((i) => i.display_name || i.name)\n                .join(', ') || 'Select a space'\n        );\n    }\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async selectSpace() {\n        const ref = this._dialog.open<\n            SpaceSelectModalComponent,\n            SpaceSelectModalData\n        >(SpaceSelectModalComponent, {\n            data: {\n                spaces: this.form.controls?.resources?.value,\n                date: this.form.controls?.date?.value,\n                duration: this.form.controls?.duration?.value,\n            },\n        });\n        const success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (success?.reason === 'done') {\n            this.form.patchValue({ resources: success.metadata });\n        }\n        ref.close();\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { CalendarEvent, EventFormService } from '@placeos/events';\n\nexport interface BookingModalData {\n    event?: CalendarEvent;\n}\n\n@Component({\n    selector: 'booking-modal',\n    template: `\n        <header>\n            <h2>New Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4\"\n        >\n            <event-form [form]=\"form\"></event-form>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-gray-200\"\n        >\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading | async }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-height: 65vh;\n                max-width: calc(100vw - 4rem);\n            }\n        `,\n    ],\n})\nexport class BookingModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Observable for the loading state of the form */\n    public readonly loading = this._service.loading;\n\n    public get form() {\n        return this._service.form;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: BookingModalData,\n        private _service: EventFormService,\n        private _dialog_ref: MatDialogRef<BookingModalComponent>\n    ) {}\n\n    public ngOnInit(): void {\n        this._service.newForm(this._data.event);\n    }\n\n    public async save() {\n        const event = await this._service.postForm().catch((_) => {\n            notifyError(_);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    startOfDay,\n    endOfDay,\n    startOfWeek,\n    endOfWeek,\n    startOfMonth,\n    endOfMonth,\n    format,\n} from 'date-fns';\nimport { BehaviorSubject, of, combineLatest } from 'rxjs';\nimport {\n    map,\n    switchMap,\n    debounceTime,\n    catchError,\n    filter,\n    first,\n} from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    queryEvents,\n    removeEvent,\n    replaceBookings,\n} from '@placeos/events';\nimport { SpacesService } from '@placeos/spaces';\nimport { BookingModalComponent } from './booking-modal.component';\nimport { ConfirmModalComponent } from '@placeos/components';\n\nexport type BookingType =\n    | 'internal'\n    | 'client'\n    | 'external'\n    | 'setup'\n    | 'training'\n    | 'interview'\n    | 'declined';\n\nexport interface BookingFilters {\n    /** List of zone ids to get bookings for */\n    zone_ids?: string[];\n    space_emails?: string[];\n    hide_type?: BookingType[];\n}\n\nexport interface BookingUIOptions {\n    /** Whether to show setup and breakdown times for events */\n    show_overflow?: boolean;\n    /** Whether to show cleaning status of the events */\n    show_cleaning?: boolean;\n    /** Whether weekends should be shown on week view */\n    show_weekends?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventsStateService extends BaseClass {\n    /** List of bookings */\n    private _poll = new BehaviorSubject<boolean>(false);\n    /** List of bookings */\n    private _long_poll = new BehaviorSubject<'month' | 'week' | ''>('');\n    /** List of bookings */\n    private _bookings = new BehaviorSubject<CalendarEvent[]>([]);\n    /** Filter details for bookings */\n    private _filters = new BehaviorSubject<BookingFilters>({});\n    /** Filter details for bookings */\n    private _options = new BehaviorSubject<BookingUIOptions>({});\n    /** Currently active date */\n    private _date = new BehaviorSubject<number>(new Date().valueOf());\n    /** Currently displayed zone */\n    private _zones = new BehaviorSubject<string[]>([]);\n    /** Whether booking data is being loaded */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Observable for filter and booking list changes */\n    private _state = combineLatest([\n        this._bookings,\n        this._filters,\n        this._date,\n        this._zones,\n    ]);\n    /** Event currently being viewed */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n\n    /** Observable for list of bookings */\n    public readonly bookings = this._bookings.asObservable();\n    /** Observable for active date */\n    public readonly date = this._date.asObservable();\n    /** Observable for active zone */\n    public readonly zones = this._zones.asObservable();\n    /** Observable for UI display options */\n    public readonly options = this._options.asObservable();\n    /** Observable for loading state of bookings */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for viewed event */\n    public readonly event = this._event.asObservable();\n    /** Obsevable for filtered list of bookings */\n    public readonly filtered = this._state.pipe(\n        map(() => {\n            const start = startOfDay(new Date(this._date.getValue()));\n            const end = endOfDay(start);\n            return this.filterEvents(start, end);\n        })\n    );\n    /** Obsevable for filtered list of bookings of the active week */\n    public readonly filtered_week = this._state.pipe(\n        map(() => {\n            const start = startOfWeek(new Date(this._date.getValue()));\n            const end = endOfWeek(start);\n            return this.filterEvents(start, end);\n        })\n    );\n    /** Obsevable for filtered list of bookings for active month */\n    public readonly filtered_month = this._state.pipe(\n        map(() => {\n            const start = startOfMonth(new Date(this._date.getValue()));\n            const end = endOfMonth(start);\n            return this.filterEvents(start, end);\n        })\n    );\n\n    /** Active filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n\n    constructor(private _spaces: SpacesService, private _dialog: MatDialog) {\n        super();\n        /** Generate observable for updating bookings */\n        const search = combineLatest([\n            this._poll,\n            this._zones,\n            this._date,\n        ]).pipe(\n            filter((i) => !!i[0]),\n            debounceTime(500),\n            switchMap(() => {\n                const fzones = this._zones.getValue();\n                if (!fzones || !fzones.length) {\n                    return of([]);\n                }\n                this._loading.next(true);\n                const start = startOfDay(new Date(this._date.getValue()));\n                const end = endOfDay(start);\n                return queryEvents({\n                    zone_ids: fzones.join(','),\n                    period_start: Math.floor(start.valueOf() / 1000),\n                    period_end: Math.floor(end.valueOf() / 1000),\n                });\n            }),\n            catchError(() => of([]))\n        );\n        /** Generate observable for updating bookings */\n        const search_long = combineLatest([\n            this._long_poll,\n            this._zones,\n            this._date,\n        ]).pipe(\n            filter((i) => !!i[0]),\n            debounceTime(500),\n            switchMap((props) => {\n                const type = props[0];\n                const fzones = props[1];\n                if (!fzones || !fzones.length) {\n                    return of([]);\n                }\n                this._loading.next(true);\n                const start = (type === 'week' ? startOfWeek : startOfMonth)(\n                    new Date(props[2])\n                );\n                const end = (type === 'week' ? endOfWeek : endOfMonth)(start);\n                return queryEvents({\n                    zone_ids: fzones.join(','),\n                    period_start: Math.floor(start.valueOf() / 1000),\n                    period_end: Math.floor(end.valueOf() / 1000),\n                });\n            }),\n            catchError(() => of([]))\n        );\n        /** Subscribe to update observable */\n        search.subscribe((events) => {\n            this.processBookings(events);\n            this._loading.next(false);\n        });\n        search_long.subscribe((events) => {\n            this.processBookings(events, this._long_poll.getValue() as any);\n            this._loading.next(false);\n        });\n    }\n\n    /**\n     * Update the booking filters\n     * @param details\n     */\n    public setFilters(details: BookingFilters) {\n        this._filters.next(details);\n    }\n\n    /**\n     * Update the booking date\n     * @param details\n     */\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setZones(zones: string[]) {\n        this._zones.next(zones);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setEvent(event: CalendarEvent) {\n        this._event.next(event);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setUIOptions(options: BookingUIOptions) {\n        const old_options = this._options.getValue();\n        this._options.next({ ...old_options, ...options });\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPolling(delay: number = 30 * 1000) {\n        this._poll.next(true);\n        this.interval('polling', () => this._poll.next(true), delay);\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPollingWeek(delay: number = 150 * 1000) {\n        this._long_poll.next('week');\n        this.interval(\n            'polling_long',\n            () => this._long_poll.next('week'),\n            delay\n        );\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPollingMonth(delay: number = 5 * 60 * 1000) {\n        this._long_poll.next('month');\n        this.interval(\n            'polling_long',\n            () => this._long_poll.next('month'),\n            delay\n        );\n    }\n\n    /**\n     * Stop polling to update bookings;\n     */\n    public stopPolling() {\n        this._poll.next(false);\n        this.clearInterval('polling');\n        this._long_poll.next('');\n        this.clearInterval('polling_long');\n    }\n\n    public async newBooking(event?: CalendarEvent) {\n        const ref = this._dialog.open(BookingModalComponent, {\n            data: {\n                event,\n            },\n        });\n        const booking: CalendarEvent | null = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (booking instanceof CalendarEvent) {\n            this.replace(booking);\n        }\n    }\n\n    public async removeBooking(event: CalendarEvent) {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Delete meeting?',\n                content: `Are you sure you want to delete the meeting at ${format(\n                    new Date(event.date),\n                    'dd MMM yyyy, h:mma'\n                )}<br> in ${event.location}?`,\n                icon: { class: 'material-icons', content: 'delete' },\n            },\n        });\n        const done: boolean | null = await Promise.race([\n            ref.componentInstance.event\n                .pipe(\n                    first((_) => _.reason === 'done'),\n                    map((_) => true)\n                )\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (done) {\n            ref.componentInstance.loading = 'Deleting booking...';\n            await removeEvent(event.id, { system_id: event.system?.id });\n            this.remove(event);\n            ref.close();\n        }\n    }\n\n    /**\n     * Update booking in the bookings list\n     * @param booking\n     */\n    public replace(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings\n            .filter((bkn) => bkn.id !== booking.id)\n            .concat([booking]);\n        this._bookings.next(new_bookings);\n    }\n\n    /**\n     * Remove booking in the bookings list\n     * @param booking\n     */\n    public remove(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings.filter((bkn) => bkn.id !== booking.id);\n        this._bookings.next(new_bookings);\n    }\n\n    private processBookings(\n        events: CalendarEvent[],\n        period: 'day' | 'week' | 'month' = 'day'\n    ) {\n        const start = (period === 'month'\n            ? startOfMonth\n            : period === 'week'\n            ? startOfWeek\n            : startOfDay)(new Date(this._date.getValue()));\n        const end = (period === 'month'\n            ? endOfMonth\n            : period === 'week'\n            ? endOfWeek\n            : endOfDay)(start);\n        let bookings = this._bookings.getValue();\n        const space_list = unique(\n            flatten(events.map((event) => event.resources)),\n            'email'\n        );\n        space_list.forEach((space) => {\n            bookings = replaceBookings(\n                bookings,\n                events\n                    .filter((bkn) =>\n                        bkn.resources.find((s) => s.email === space.email)\n                    )\n                    .map((bkn) => new CalendarEvent(bkn)),\n                {\n                    space: space.email,\n                    from: start.valueOf(),\n                    to: end.valueOf(),\n                }\n            );\n        });\n        this._bookings.next(bookings);\n    }\n\n    private filterEvents(start: Date, end: Date) {\n        const filters = this._filters.getValue();\n        const bookings = this._bookings.getValue();\n        const fzones = this._zones.getValue();\n        return bookings.filter((bkn) => {\n            const intersects = timePeriodsIntersect(\n                start.valueOf(),\n                end.valueOf(),\n                bkn.date,\n                bkn.date + bkn.duration * 60 * 1000\n            );\n            const in_zone = !!bkn.resources\n                .map((r) => this._spaces.find(r.id || r.email))\n                .find((space) => fzones.find((z) => space?.zones?.includes(z)));\n            const has_space =\n                !filters.space_emails?.length ||\n                !!bkn.resources.find((space) =>\n                    filters.space_emails.includes(space.email)\n                );\n            const in_zones =\n                !filters.zone_ids?.length ||\n                !!bkn.resources.find((space) =>\n                    space.zones.find((zone) => filters.zone_ids.includes(zone))\n                );\n            const type = bkn.guests.length\n                ? 'external'\n                : bkn.status === 'declined'\n                ? 'cancelled'\n                : 'internal';\n            const show =\n                !filters.hide_type?.length ||\n                !filters.hide_type.includes(type as any);\n            return intersects && has_space && in_zone && in_zones && show;\n        });\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { addDays, subDays } from 'date-fns';\n\n@Component({\n    selector: 'date-options',\n    template: `\n        <button mat-icon-button (click)=\"previousDay()\">\n            <app-icon\n                [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_left' }\"\n            ></app-icon>\n        </button>\n        <button mat-icon-button (click)=\"nextDay()\">\n            <app-icon\n                [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_right' }\"\n            ></app-icon>\n        </button>\n        <div class=\"display m-4 text-center\" style=\"width: 7em;\">{{ date | date: 'mediumDate' }}</div>\n        <button class=\"rounded relative\" mat-icon-button (click)=\"picker.open()\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'today' }\"></app-icon>\n            <input\n                class=\"absolute inset-0\"\n                [(ngModel)]=\"date\"\n                (ngModelChange)=\"dateChange.emit($event)\"\n                [matDatepicker]=\"picker\"\n            />\n            <mat-datepicker #picker></mat-datepicker>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n            }\n\n            button:last-child {\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n            }\n\n            input {\n                opacity: 0;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DateOptionsComponent {\n    /** Currently selected date */\n    @Input() public date: number | string = new Date().valueOf();\n    /** Emitter for changes to the date */\n    @Output() public dateChange = new EventEmitter<number | string>();\n    /** Change date to the previous date */\n    public readonly previousDay = () => {\n        this.date = subDays(new Date(this.date), 1).valueOf();\n        this.dateChange.emit(this.date);\n    };\n    /** Change date to the next date */\n    public readonly nextDay = () => {\n        this.date = addDays(new Date(this.date), 1).valueOf();\n        this.dateChange.emit(this.date);\n    };\n\n    constructor() {}\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'searchbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <input\n                matInput\n                placeholder=\"Search...\"\n                [(ngModel)]=\"model\"\n                (ngModelChange)=\"modelChange.emit($event)\"\n            />\n            <app-icon class=\"text-xl\" matSuffix [icon]=\"{ class: 'material-icons', content: 'search' }\"></app-icon>\n        </mat-form-field>\n    `,\n    styles: [`\n        :host {\n            height: 3.5em;\n        }\n    `],\n})\nexport class SearchbarComponent {\n    /** Currently selected date */\n    @Input() public model: string = '';\n    /** Emitter for changes to the date */\n    @Output() public modelChange = new EventEmitter<string>();\n}\n","import { Component } from '@angular/core';\nimport {\n    ApplicationIcon,\n    ApplicationLinkInternal,\n    SettingsService\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'sidebar',\n    template: `\n        <div class=\"logo h-20 w-24 flex items-center justify-center\">\n            <img class=\"object-center object-contain\" [src]=\"logo.src\" />\n        </div>\n        <div class=\"flex-1 overflow-auto w-24\">\n            <ng-container *ngFor=\"let tile of links\">\n                <a\n                    class=\"flex flex-col justify-center items-center\"\n                    [routerLink]=\"['/' + tile.route]\"\n                    routerLinkActive=\"active\"\n                >\n                    <app-icon class=\"text-3xl mb-2\" [icon]=\"tile.icon\"></app-icon>\n                    <div class=\"text-xs\">{{ tile.name }}</div>\n                </a>\n            </ng-container>\n        </div>\n        <button\n            mat-icon-button\n            class=\"mx-auto my-4\"\n            *ngIf=\"(buildings | async).length > 1\"\n            [matTooltip]=\"(active_building | async).display_name || (active_building | async).name\"\n            matTooltipPosition=\"right\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>business</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let building of buildings | async\"\n                (click)=\"setBuilding(building)\"\n            >\n                {{ building.display_name || building.name }}\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                width: 6em;\n                height: 100%;\n                background-color: var(--secondary);\n                border-right: 1px solid #ccc;\n                z-index: 10;\n            }\n\n            a {\n                width: 5.5em;\n                height: 5em;\n                margin: 0.5em 0 0.5em 0.5em;\n                border-radius: 0.25em 0 0 0.25em;\n                text-decoration: none;\n                color: #fff;\n            }\n\n            a.active {\n                background-color: #fff;\n                color: rgba(0, 0, 0, 0.8);\n            }\n\n            button[mat-icon-button] {\n                border: 1px solid #fff;\n                color: #fff;\n                border-radius: 0.25em;\n            }\n        `,\n    ],\n})\nexport class SidebarComponent {\n    public get links(): ApplicationLinkInternal[] {\n        return this._settings.get('app.general.menu') || [];\n    }\n    public get logo(): ApplicationIcon {\n        return this._settings.get('app.logo_dark') || {};\n    }\n\n    public readonly buildings = this._org.building_list;\n    public readonly active_building = this._org.active_building;\n    public readonly setBuilding = (b) => (this._org.building = b);\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {}\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { SidebarComponent } from './sidebar.component';\nimport { DateOptionsComponent } from './date-options.component';\nimport { SearchbarComponent } from './searchbar.component';\nimport { ViewEventDetailsComponent } from './view-event-details.component';\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nconst COMPONENTS: Type<any>[] = [\n    SidebarComponent,\n    DateOptionsComponent,\n    SearchbarComponent,\n    ViewEventDetailsComponent,\n];\n\nconst MAT_MODULES: any[] = [\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatTooltipModule,\n    MatProgressBarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatProgressSpinnerModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    MatRippleModule,\n];\n\nconst ANGULAR_MODULES: any[] = [FormsModule, ReactiveFormsModule];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ...ANGULAR_MODULES,\n        ...MAT_MODULES,\n        ComponentsModule,\n        RouterModule.forChild([]),\n    ],\n    exports: [\n        ...COMPONENTS,\n        ...MAT_MODULES,\n        ...ANGULAR_MODULES,\n        FormFieldsModule,\n        ComponentsModule\n    ],\n})\nexport class UIModule {}\n","import { Component, Input } from '@angular/core';\nimport { format, addMinutes } from 'date-fns';\n\nimport { CalendarEvent } from '@placeos/events';\nimport { SpacesService } from '@placeos/spaces';\nimport { EventsStateService } from '../day-view/events-state.service';\n\n@Component({\n    selector: 'view-event-details',\n    template: `\n        <div\n            class=\"fixed inset-0 bg-black bg-opacity-30\"\n            (click)=\"close()\"\n        ></div>\n        <div\n            name=\"panel\"\n            class=\"absolute rounded shadow flex flex-col\"\n            (click)=\"$event.stopPropagation()\"\n        >\n            <div class=\"p-4 overflow-auto flex-1\">\n                <h3 class=\"mb-0 pl-6 mb-1\">\n                    {{ event.organiser?.name || event.host }}\n                </h3>\n                <div class=\"text-bold mb-4 pl-6 text-dark-fade\">\n                    {{ event.date | date: 'fullDate' }}\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">title</app-icon>\n                    <span class=\"text-dark-fade\">{{ event.title }}</span>\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">schedule</app-icon>\n                    <span class=\"text-dark-fade\">{{ time }}</span>\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">people</app-icon>\n                    <span class=\"text-dark-fade\"\n                        >{{ event.attendees.length }} Attendee{{\n                            event.attendees.length === 1 ? '' : 's'\n                        }}</span\n                    >\n                </div>\n                <div class=\"flex flex-col mb-2\">\n                    <div\n                        class=\"flex items-center pl-6 mb-1 hover:bg-gray-100 rounded\"\n                        *ngFor=\"let user of event.attendees\"\n                    >\n                        <a-user-avatar\n                            class=\"text-sm pr-2\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <div class=\"flex flex-col\">\n                            <div class=\"text-sm opacity-80\">\n                                {{\n                                    user.name ||\n                                        user.first_name + ' ' + user.last_name\n                                }}\n                            </div>\n                            <div class=\"text-xs opacity-50\">\n                                {{ user.email }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"flex items-center mb-2\">\n                    <app-icon class=\"mr-1\">place</app-icon>\n                    <span class=\"text-dark-fade\">{{ location }}</span>\n                </div>\n                <div class=\"flex items-center\">\n                    <app-icon class=\"mr-1\">format_align_left</app-icon>\n                    <span class=\"text-dark-fade\">Notes</span>\n                </div>\n                <div class=\"flex items-center pl-6 mb-2\">\n                    <span\n                        class=\"text-dark-fade\"\n                        [innerHTML]=\"\n                            event.body || '&lt; No notes &gt;' | sanitize\n                        \"\n                    ></span>\n                </div>\n            </div>\n            <div\n                name=\"actions\"\n                class=\"flex items-center justify-content p-4 space-x-4\"\n            >\n                <button class=\"flex-1 inverse\" mat-button (click)=\"remove()\">\n                    Remove Booking\n                </button>\n                <button class=\"flex-1\" mat-button (click)=\"edit()\">\n                    Edit Booking\n                </button>\n            </div>\n            <button name=\"close\" mat-icon-button (click)=\"close()\">\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                z-index: 999;\n            }\n\n            [name='panel'] {\n                padding-top: 0;\n                width: 26em;\n                left: 50%;\n                top: 6.5em;\n                transform: translateX(-50%);\n                background-color: #fff;\n                max-height: 80vh;\n            }\n\n            [name='actions'] {\n                border-top: 1px solid #ccc;\n            }\n\n            [name='close'] {\n                position: absolute;\n                top: 0.25em;\n                right: 0.25em;\n            }\n        `,\n    ],\n})\nexport class ViewEventDetailsComponent {\n    /** Event to display */\n    @Input() public event: CalendarEvent;\n    /** Close displayed event */\n    public readonly close = () => this._state.setEvent(null);\n\n    public readonly edit = () => this._state.newBooking(this.event);\n\n    public readonly remove = () => this._state.removeBooking(this.event);\n\n    public get location() {\n        const space = this._spaces.find(this.event.resources[0].id);\n        return `${space.level.display_name || space.level.name}, ${\n            space.display_name || space.name\n        }`;\n    }\n\n    public get time() {\n        const date = new Date(this.event.date);\n        return (\n            format(date, 'h:mm a') +\n            ' - ' +\n            format(addMinutes(date, this.event.duration), 'h:mm a')\n        );\n    }\n\n    constructor(\n        private _state: EventsStateService,\n        private _spaces: SpacesService\n    ) {}\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {\n    AuthorisedUserGuard,\n    UnauthorisedComponent\n} from '@placeos/components';\n\n\nconst routes: Routes = [\n    { path: 'unauthorised', component: UnauthorisedComponent },\n    {\n        path: 'day-view',\n        loadChildren: () =>\n            import('./day-view/day-view.module').then((m) => m.DayViewModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'week-view',\n        loadChildren: () =>\n            import('./week-view/week-view.module').then((m) => m.DayViewModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'facilities',\n        loadChildren: () =>\n            import('./facilities/facilities.module').then(\n                (m) => m.FacilitiesModule\n            ),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'visitors',\n        loadChildren: () =>\n            import('./visitors/visitors.module').then((m) => m.VisitorsModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'desks',\n        loadChildren: () =>\n            import('./desks/desks.module').then((m) => m.DesksModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'reports',\n        loadChildren: () =>\n            import('./reports/reports.module').then((m) => m.ReportsModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'staff',\n        loadChildren: () =>\n            import('./staff/staff.module').then((m) => m.StaffModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'catering',\n        loadChildren: () =>\n            import('./catering/catering.module').then((m) => m.CateringModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    {\n        path: 'points',\n        loadChildren: () =>\n            import('./points/points.module').then((m) => m.PointsModule),\n        canActivate: [AuthorisedUserGuard],\n        canLoad: [AuthorisedUserGuard],\n    },\n    { path: '**', redirectTo: 'day-view' },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { addMinutes, differenceInMinutes } from 'date-fns';\n\nexport const MOCK_MENU = [\n    {\n        id: 'item-1',\n        name: 'Coffee',\n        unit_price: 200,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Cappacino', group: 'type' },\n            { id: 'opt-2', name: 'Latte', group: 'type' },\n            { id: 'opt-3', name: '1 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-4', name: '2 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-5', name: '3 Sugar', group: 'sugars', unit_price: 20 },\n            { id: 'opt-6', name: '4 Sugar', group: 'sugars', unit_price: 20 },\n        ],\n    },\n    {\n        id: 'item-2',\n        name: 'Soda',\n        unit_price: 160,\n        category: 'Drinks',\n        options: [\n            { id: 'opt-1', name: 'Pepsi', group: 'type' },\n            { id: 'opt-2', name: 'Sunkist', group: 'type' },\n            { id: 'opt-3', name: 'Solo', group: 'type' },\n            { id: 'opt-4', name: 'Dr Pepper', group: 'type' },\n        ],\n    },\n    { id: 'item-3', name: 'Water', unit_price: 100, category: 'Drinks' },\n    {\n        id: 'item-4',\n        name: 'Muffin',\n        unit_price: 160,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Banana', group: 'type' },\n            { id: 'opt-3', name: 'Blueberry', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-5',\n        name: 'Cookies',\n        unit_price: 400,\n        category: 'Snacks',\n        options: [\n            { id: 'opt-1', name: 'Choc Chip', group: 'type' },\n            { id: 'opt-2', name: 'Macadamia', group: 'type' },\n            { id: 'opt-3', name: 'Dark Choc', group: 'type' },\n        ],\n    },\n    {\n        id: 'item-6',\n        name: 'Fish & Chips',\n        unit_price: 250,\n        category: 'Simple Meals',\n        options: [\n            {\n                id: 'opt-1',\n                name: 'Tomato Sauce',\n                group: 'sauce',\n                unit_price: 30,\n            },\n            { id: 'opt-2', name: 'BBQ Sauce', group: 'sauce', unit_price: 35 },\n            {\n                id: 'opt-3',\n                name: 'Tartare Sause',\n                group: 'sauce',\n                unit_price: 40,\n            },\n            {\n                id: 'opt-4',\n                name: 'Garlic Aoili Sauce',\n                group: 'sauce',\n                unit_price: 50,\n            },\n        ],\n    },\n    {\n        id: 'item-7',\n        name: 'Sandwich',\n        unit_price: 300,\n        category: 'Simple Meals',\n        options: [\n            { id: 'opt-1', name: 'Ham & Cheese', group: 'type' },\n            { id: 'opt-2', name: 'Chicken', group: 'type' },\n            { id: 'opt-3', name: 'Fairy Bread', group: 'type' },\n        ],\n    },\n];\n\nexport function generateCateringOrder(event: HashMap) {\n    const duration = differenceInMinutes(event.event_start, event.event_end);\n    const mx = predictableRandomInt(MOCK_MENU.length);\n    return {\n        id: `order-${predictableRandomInt(999_999)}`,\n        event_id: event.id,\n        invoice_number: `I${predictableRandomInt(999_999)}`,\n        charge_code: `C${predictableRandomInt(9_999)}`,\n        deliver_at: addMinutes(\n            event.event_start * 1000,\n            predictableRandomInt(Math.floor(duration / 5)) * 5\n        ),\n        items: new Array(3).fill(0).map((_, idx) => ({\n            ...MOCK_MENU[(mx * idx) % MOCK_MENU.length],\n            options: [],\n            quantity: predictableRandomInt(10, 1),\n        })),\n    };\n}\n","export const MOCK_ORGS = [\n    {\n        created_at: 1587057070,\n        updated_at: 1587692680,\n        name: 'PlaceOS',\n        description: '',\n        tags: 'org',\n        count: 0,\n        capacity: 0,\n        parent_id: '',\n        triggers: [],\n        id: 'zone-EmWFTjuYExK',\n    },\n];\n\nexport const MOCK_BUILDINGS = [\n    {\n        name: 'Sydney',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-01',\n        levels: ['lvl-10', 'lvl-11'],\n    },\n    {\n        name: 'Brisbane',\n        description: '',\n        tags: 'building',\n        count: 0,\n        capacity: 0,\n        parent_id: 'zone-EmWFTjuYExK',\n        triggers: [],\n        id: 'bld-02',\n        levels: ['lvl-2', 'lvl-3'],\n    },\n];\n\nconst mockLevel = (\n    id: string,\n    idx: number,\n    building: any,\n    num: number = 10\n): any => {\n    let map_id = id.substr(4);\n    map_id = `assets/maps/level_${num}.svg`;\n    return {\n        id: `${building.id}_${id}`,\n        name: `Level ${id.endsWith('00') ? 'G' : id.split('-')[1]}`,\n        parent_id: building.id,\n        description: '',\n        tags: 'level',\n        map_id,\n        code: 'level code 12',\n        type: 'staff floor',\n        count: 5,\n        capacity: 30,\n        location: 'optional lat,long',\n        display_name: '',\n    };\n};\n\nexport const MOCK_LEVELS = MOCK_BUILDINGS.map((bld) =>\n    bld.levels.map((level, idx) =>\n        mockLevel(level, idx, bld, +level.split('-')[1])\n    )\n).reduce((p, c) => p.concat(c), []);\n","import { predictableRandomInt } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_MENU } from './catering.data';\nimport { MOCK_ORGS, MOCK_LEVELS, MOCK_BUILDINGS } from './zone.data';\n\nconst MOCK_METADATA = {\n    current: {\n        contacts: {\n            name: 'contacts',\n            description: '',\n            details: [\n                {\n                    id: 'user-1',\n                    name: 'Jonathan McFarlane (PlaceOS)',\n                    email: 'jon@place.tech',\n                    first_name: 'Jonathan',\n                    last_name: 'McFarlane',\n                },\n                {\n                    id: 'user-1',\n                    name: 'Alex Sorafumo (PlaceOS)',\n                    email: 'alex@place.tech',\n                    first_name: 'Alex',\n                    last_name: 'Sorafumo',\n                },\n            ],\n        },\n    },\n};\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/zones',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.tags === 'org') {\n            return MOCK_ORGS;\n        } else if (request.query_params.tags === 'building') {\n            return MOCK_BUILDINGS;\n        } else if (request.query_params.tags === 'level') {\n            return MOCK_LEVELS;\n        }\n        throw { status: 404, message: 'Zones not found' };\n    },\n});\n\nfunction padString(str: string | number, length: number = 5) {\n    str = `${str}`;\n    while (str.length < length) str = `0${str}`;\n    return str;\n}\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.name === 'bindings') {\n            return {\n                bindings: {\n                    details: {\n                        area_management: 'space-0',\n                        location_services: 'space-0',\n                    },\n                },\n            };\n        }\n        if (request.query_params.name === 'catering') {\n            return {\n                catering: {\n                    details: MOCK_MENU,\n                },\n            };\n        }\n        if (request.query_params.name === 'desks') {\n            const parts = request.route_params.id.split('-');\n            const id = parts[parts.length - 1];\n            return generateMockDeskMetadata(id);\n        }\n        if (\n            MOCK_METADATA[request.route_params.id] &&\n            MOCK_METADATA[request.route_params.id][request.query_params.name]\n        ) {\n            return MOCK_METADATA[request.route_params.id];\n        } else if (\n            MOCK_METADATA[request.route_params.id] &&\n            !request.query_params.name\n        ) {\n            return MOCK_METADATA[request.route_params.id] || {};\n        }\n        return {};\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        if (!MOCK_METADATA[request.route_params.id])\n            MOCK_METADATA[request.route_params.id] = {};\n        MOCK_METADATA[request.route_params.id][request.body.name] =\n            request.body;\n    },\n});\n\nconst DESK_FEATURES = ['sit_to_stand', 'single_monitor', 'dual_monitor'];\n\nfunction generateMockDeskMetadata(id: string) {\n    return {\n        desks: {\n            details: new Array(30).fill(0).map((_, idx) => ({\n                id: `table-${padString(id, 2)}.${padString(idx + 1, 3)}`,\n                name: `Desk ${id}.${padString(idx + 1, 3)}`,\n                bookable: predictableRandomInt(9999) % 4 !== 0,\n                group: '',\n                features: DESK_FEATURES.filter(\n                    (_) => predictableRandomInt(99999) % 3 === 0\n                ),\n            })),\n        },\n    };\n}\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/metadata/:id/children',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const zone = MOCK_BUILDINGS.find(\n            (_) => _.id === request.route_params.id\n        );\n        if (!zone)\n            throw {\n                status: 404,\n                message: `Unable to find zone with id \"${request.route_params.id}\"`,\n            };\n        return MOCK_LEVELS.filter((_) => _.parent_id === zone.id).map((lvl) => {\n            const parts = lvl.id.split('-');\n            const id = parts[parts.length - 1];\n            return {\n                zone: lvl,\n                metadata: generateMockDeskMetadata(id),\n            };\n        });\n    },\n});\n","/** Domain of the organisation */\nexport const DOMAIN = 'place.tech';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff/v1';\n","import { predictableRandomInt } from '@placeos/common';\nimport { DOMAIN } from './common.mock';\n\nconst PREDEF_USERS = [\n    'Jonathan McFarlane',\n    'Alex Sorafumo',\n    'Jim Doe',\n    'Cristina Boston',\n    'Jeremy West',\n    'Viv Briffa',\n    'Candy Russo',\n    'Jeff Wiz',\n    'Sravani Kotha',\n    'Kim Burgess',\n    'Caspian Baska',\n    'Stephen Von Takach',\n    'Cameron Reeves',\n    'Shane Boseley',\n];\n\nexport const ACTIVE_USER = {\n    id: 'current',\n    name: 'PlaceOS - Mock User',\n    email: 'dev@place.tech',\n    groups: ['deals', ''],\n};\n\nexport const MOCK_STAFF = PREDEF_USERS.map((name, i) => ({\n    id: `user-${i + 1}`,\n    name: `${name} (PlaceOS)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@${DOMAIN}`,\n})).concat([ACTIVE_USER]);\n\nexport const MOCK_GUESTS = PREDEF_USERS.map((name, i) => ({\n    id: `guest-${i + 1}`,\n    name: `${name} (External)`,\n    email: `${name.split(' ').join('.').toLowerCase()}@not-${DOMAIN}`,\n    visit_expected: predictableRandomInt(99999) % 2 === 0,\n}));\n","import { predictableRandomInt } from '@placeos/common';\nimport { generateMockSpace } from '@placeos/spaces';\n\nconst randomSpaceFeatures = () => {\n    const f = ['Whiteboard', 'VidConf', 'Projector', 'Views'];\n    const numFeatures = predictableRandomInt(f.length + 1);\n    const res = [];\n    for (let i = 0; i < numFeatures; i++) {\n        res.push(f[predictableRandomInt(f.length)]);\n    }\n    return res.filter((el, i, r) => r.indexOf(el) === i);\n};\n\nexport const MOCK_SPACES = [\n    {\n        name: 'Conference Room 10.01',\n        map_id: 'area-10.01-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.02',\n        map_id: 'area-10.02-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 10.03',\n        map_id: 'area-10.03-status',\n        zones: ['bld-01', 'bld-01_lvl-10'],\n    },\n    {\n        name: 'Conference Room 11.01',\n        map_id: 'area-11.01-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.02',\n        map_id: 'area-11.02-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 11.03',\n        map_id: 'area-11.03-status',\n        zones: ['bld-01', 'bld-01_lvl-11'],\n    },\n    {\n        name: 'Conference Room 2.01',\n        map_id: 'area-2.01-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 2.02',\n        map_id: 'area-2.02-status',\n        zones: ['bld-02', 'bld-02_lvl-2'],\n    },\n    {\n        name: 'Conference Room 3.01',\n        map_id: 'area-3.01-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.02',\n        map_id: 'area-3.02-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n    {\n        name: 'Conference Room 3.03',\n        map_id: 'area-3.03-status',\n        zones: ['bld-02', 'bld-02_lvl-3'],\n    },\n].map((d) => generateMockSpace({ ...d, features: randomSpaceFeatures() }));\n","import { predictableRandomInt, unique } from '@placeos/common';\nimport * as dayjs from 'dayjs';\nimport { generateCateringOrder } from './catering.data';\nimport { MOCK_SPACES } from './spaces.data';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\n\nlet EVENT_TIME = dayjs().startOf('d').hour(7);\n\nconst nextEventTime = (save = false): number => {\n    const next = EVENT_TIME.add((predictableRandomInt(8) + 1) * 15, 'm');\n    if (save) {\n        EVENT_TIME = next;\n    }\n    return next.unix();\n};\n\nconst event_status = ['tentative', 'confirmed', 'cancelled'];\nconst randomStatus = (): string => {\n    const rnd = predictableRandomInt(10);\n    return rnd < 2\n        ? event_status[2]\n        : rnd < 5\n        ? event_status[0]\n        : event_status[1];\n};\n\nexport const MOCK_EVENTS = new Array(200).fill(0).map((_, index) => {\n    const PEOPLE = MOCK_STAFF.concat(MOCK_GUESTS);\n    let attendees: any[] = new Array(predictableRandomInt(8, 1))\n        .fill(0)\n        .map(() => PEOPLE[predictableRandomInt(PEOPLE.length)]);\n    attendees.sort(\n        (a, b) => (a.visit_expected ? 0 : -1) - (b.visit_expected ? 0 : -1)\n    );\n    const space = MOCK_SPACES[predictableRandomInt(MOCK_SPACES.length)];\n    attendees = attendees.concat({ ...space, resource: true });\n    if (predictableRandomInt(9999) % 2 === 0) attendees.unshift(ACTIVE_USER);\n    else attendees.unshift(MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)]);\n    attendees = unique(attendees, 'email');\n    const event_start = nextEventTime(true);\n    const event_end = nextEventTime();\n    return {\n        id: `cal-event-${index}`,\n        status: randomStatus(),\n        host: attendees[0].email,\n        calendar: 'calendar_id',\n        creator: 'optional@fake.com',\n        attendees: unique(attendees, 'email').map((_) => ({\n            ..._,\n            response_status:\n                predictableRandomInt(99999) % 2 === 0\n                    ? 'accepted'\n                    : predictableRandomInt(99999) % 6 === 0\n                    ? 'declined'\n                    : 'tentative',\n        })),\n        title: `Some Meeting ${index}`,\n        body: `A Description`,\n        private: false,\n        event_start,\n        event_end,\n        timezone: 'Australia/Sydney',\n        all_day: false,\n        location: `${space.name}`,\n        recurring: false,\n        recurrence: {},\n        attachments: {},\n        system: space,\n        extension_data: {\n            catering:\n                predictableRandomInt(99999) % 4 === 0\n                    ? [\n                          generateCateringOrder({\n                              id: `cal-event-${index}`,\n                              event_start,\n                              event_end,\n                          }),\n                      ]\n                    : [],\n            setup: predictableRandomInt(4) * 5,\n            breakdown: predictableRandomInt(4) * 5,\n        },\n    };\n});\n\nconst event_spaces = {};\nMOCK_EVENTS.forEach((event) => {\n    if (!event_spaces[event.system.id]) {\n        event_spaces[event.system.id] = [];\n    }\n    event_spaces[event.system.id].push(event);\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { ACTIVE_USER, MOCK_GUESTS, MOCK_STAFF } from './users.data';\nimport { MOCK_LEVELS } from './zone.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { MOCK_EVENTS } from './events.data';\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/users/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.id === 'current') {\n            return ACTIVE_USER;\n        }\n        const person = MOCK_STAFF.find(user => user.email === request.route_params.id);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_STAFF.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/people/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const id = decodeURIComponent(request.route_params.id);\n        const person = MOCK_STAFF.find(user => user.email === id);\n        if (person) {\n            return {\n                ...person,\n                location: generateLocation()\n            };\n        }\n        throw { status: 404, message: 'User not found' };\n    },\n});\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.query_params.q) {\n            const search = request.query_params.q.toLowerCase();\n            return MOCK_GUESTS.filter(\n                (user) =>\n                    user.name.toLowerCase().includes(search) ||\n                    user.email.toLowerCase().includes(search)\n            );\n        }\n        return MOCK_STAFF;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const person = MOCK_GUESTS.find(user => user.email === request.route_params.email);\n        if (person) {\n            return person;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/guests/:email/meetings',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        if (request.route_params.email) {\n            const email = request.route_params.email.toLowerCase();\n            const events = MOCK_EVENTS.filter(\n                (event) => event.attendees.find(user => user.email.toLowerCase() === email)\n            );\n            return events;\n        }\n        throw { status: 404, message: `Unable to find meetings with guest with email ${request.route_params.email}` };\n    },\n});\n\n\n\nconst LOCATION_TYPES = ['meeting', 'desk_id', 'laptop', 'mobile', 'geo', 'none'];\n\nfunction generateLocation() {\n    const type = LOCATION_TYPES[predictableRandomInt(LOCATION_TYPES.length)];\n    const level = MOCK_LEVELS[predictableRandomInt(MOCK_LEVELS.length)];\n    const level_spaces = MOCK_SPACES.filter(s => s.zones.includes(level.id));\n    const space = level_spaces[predictableRandomInt(level_spaces.length)] || {};\n    const location: HashMap = {};\n    switch (type) {\n        case 'meeting':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                system: space.id,\n                map_id: space.map_id,\n                event_id: ''\n            };\n            break;\n        case 'desk_id':\n            location.meeting = {\n                building: level.parent_id,\n                level: level.id,\n                map_id: space.map_id,\n                checked_in: dayjs().unix()\n            };\n            break;\n        case 'laptop':\n        case 'mobile':\n            location[type] = {\n                building: level.parent_id,\n                level: level.id,\n                x: +predictableRandomInt(10000),\n                y: +predictableRandomInt(5000),\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n        case 'geo':\n            location.geo = {\n                lat: predictableRandomInt(180) - 90,\n                lon: predictableRandomInt(360) - 180,\n                last_seen: dayjs().subtract(predictableRandomInt(60), 'm').unix()\n            };\n            break;\n    }\n    return location;\n}\n","import { HashMap, unique } from '@placeos/common';\n\nexport interface EnvironmentSource {\n    id?: string;\n    name: string;\n    type?: 'lights' | 'blinds' | 'screen';\n    state: string | number;\n    states: string[];\n}\n\nexport interface RoomInput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    routes: string[];\n    outputs: string[];\n}\n\nexport interface RoomOutput {\n    id?: string;\n    name: string;\n    type: string;\n    mod: string;\n    mute: boolean;\n    locked: boolean;\n    source: string;\n    inputs: string[];\n    following: string;\n}\n\nclass RoomModule {\n    public readonly name: string;\n    public readonly connected: boolean;\n    public active: boolean;\n\n    public readonly input_list: HashMap<RoomInput>;\n    public readonly output_list: HashMap<RoomOutput>;\n    public readonly env_sources: EnvironmentSource[];\n\n    public readonly inputs;\n    public readonly outputs;\n    public readonly environment;\n\n    public volume = 0;\n\n    constructor(_data: Partial<RoomModule>) {\n        this.name = _data.name || 'Test Module';\n        this.connected = _data.connected ?? true;\n        this.active = _data.active || false;\n        this.input_list = _data.input_list;\n        this.output_list = _data.output_list;\n        this.env_sources = _data.env_sources || [];\n        this.inputs = Object.keys(this.input_list || {}) || [];\n        this.outputs = Object.keys(this.output_list || {}) || [];\n        const types = unique(this.env_sources.map((_) => _.type));\n        types.forEach(\n            (t) =>\n                (this[`${t}`] = this.env_sources\n                    .filter((_) => _.type === t)\n                    .map((_) => _.id))\n        );\n        this.env_sources.forEach(\n            (source) => (this[`${source.type}/${source.id}`] = source)\n        );\n        this.inputs.forEach(\n            (key) => (this[`input/${key}`] = this.input_list[key])\n        );\n        this.outputs.forEach(\n            (key) => (this[`output/${key}`] = this.output_list[key])\n        );\n    }\n\n    $powerup() {\n        console.log('Power On');\n        this.active = true;\n    }\n    /**\n     * Power off the space. End any active calls, disconnect signal routes, place\n     * powerable devices into standby and return environmental configuration to\n     * sensible defaults.\n     **/\n    $shutdown() {\n        this.active = false;\n    }\n    /** Shares a signal source with the room and any connected remote participants. */\n    $share() {}\n    /**\n     * Connect a signal source to a signal output, or set of outputs. Any intermediate\n     * device interactions are handled internally. For example, on a system using a small\n     * presentation switcher and a display, routing a laptop input will select the\n     * appropriate input on the switcher, and select the appropriate input on the display.\n     *\n     * This includes all routable signal types - in addition to the above example, this may\n     * be interacting with an audio DSP to add a microphone feed to an output zone, or\n     * connecting a USB HID input device with a specific output.\n     **/\n    $route(input: string, output: string) {\n        if (this.inputs.includes(input) && this.outputs.includes(output)) {\n            this.$updateState(input, {\n                routes: unique([\n                    ...(this.input_list[input].routes || []),\n                    output,\n                ]),\n            });\n            this.$updateState(output, {\n                source: input,\n                following: input,\n            });\n        }\n    }\n    /**\n     * Remove a signal source from a signal output.\n     * Predominantly intended for outputs that support more than one simultaneous input source\n     * (mixed audio zone, or display capable of compositing multiple video sources).\n     **/\n    $unroute() {}\n    /**\n     * Establish a call (either phone or video) with a remote participant.\n     * This may be a peer-to-peer connection or a wider group via an external bridging service.\n     **/\n    $connect() {}\n    /** End a call with a remote participant. */\n    $disconnect() {}\n    /**\n     * Bind the current system to another PlaceOS controlled space, relinquishing local control.\n     * This may be used for an education pod that pairs with a wider classroom or a room being\n     * used as an overflow from a primary event space.\n     **/\n    $link() {}\n    /**\n     * Join the current system with another PlaceOS controlled space, sharing control and signal IO.\n     * Examples of usage would be a set of rooms with moveable walls. N-way merges supported.\n     **/\n    $merge() {}\n    /** Separate from a linked or merged system. */\n    $split() {}\n    /**\n     * Display an alert visible to participants in the space. This may occur as a screen overlay,\n     * on a control interface, a bot post in a chat space associated with the current meeting or\n     * other modalities depending on hardware capability.\n     **/\n    $notify() {}\n    /**\n     * Place the room into a predefined operation mode. This may include executing an arbitrary\n     * set of device interactions, changing metadata associated with the system itself (changing\n     * available input or output nodes), or other configurable actions designed to transition\n     * the space to a specific state.\n     **/\n    $preset() {}\n    /**\n     * Set the volume for a signal node in the space. This can include outputs as well as inputs\n     * where supported (e.g. microphone). If unspecified, default is to interact with a ‘primary’\n     * output node.\n     **/\n    $volume(value: number, source: string = 'all') {\n        if (source === 'all') {\n            this.volume = value;\n        }\n    }\n    /** Interact with audio muting on supporting signal nodes within the space. */\n    $mute(state: boolean = true, source: string = 'all') {\n        this.$updateState(source, { mute: state });\n    }\n    /**\n     * Activates or deactivates a signal mute for the associated IO. If this is not possible,\n     * (e.g. unsupported by the device) an error is returned.\n     **/\n    $unmute(source: string = 'all') {\n        this.$mute(false, source);\n    }\n    /**\n     * Wrapper for an arbitrary set of control points defined in system configuration.\n     * Each of these may map to control options available on a sibling module and take one of two forms:\n     *  - Continuous value within a range (temperature set point 16.0...28.0 degrees, lighting level 0...100)\n     *  - Set of possible states (lighting high/med/low, blind up/down, electrochromic glass clear/opaque)\n     *\n     * System state provides the ability to introspect configured points for both control limits and current value.\n     **/\n    $environment(id: string, state: string | number) {\n        const source = this.env_sources.find((_) => _.id === id);\n        if (source) {\n            this[`${source.type}/${source.id}`] = { ...source, state };\n        }\n    }\n    /** Locks an IO node. Prevents any route changes that include this until unlocked. */\n    $lock(source: string) {\n        this.$updateState(source, { locked: true });\n    }\n    /** Unlocks an IO node. */\n    $unlock(source: string) {\n        this.$updateState(source, { locked: false });\n    }\n\n    $updateState(source: string, data: HashMap) {\n        if (this[`input/${source}`]) {\n            this[`input/${source}`] = { ...this[`input/${source}`], ...data };\n            this.input_list[source] = { ...this[`input/${source}`], ...data };\n        } else if (this[`output/${source}`]) {\n            this[`output/${source}`] = { ...this[`output/${source}`], ...data };\n            this.output_list[source] = { ...this[`output/${source}`], ...data };\n        }\n    }\n}\n\nconst input_list: HashMap = {\n    Mic1: {\n        name: 'Lectern Mic',\n        type: 'Microphone',\n        mod: 'Microphone_1',\n    },\n    Mic2: {\n        name: 'Lapel Mic',\n        type: 'Microphone',\n        mod: 'Microphone_2',\n    },\n    Mic3: {\n        name: 'Handheld Mic',\n        type: 'Microphone',\n        mod: 'Microphone_3',\n    },\n    PC1: {\n        name: 'PC-1',\n        type: 'PC',\n    },\n    PC2: {\n        name: 'PC-2',\n        type: 'PC',\n    },\n    PC3: {\n        name: 'PC-3',\n        type: 'PC',\n    },\n    PC4: {\n        name: 'PC-4',\n        type: 'PC',\n    },\n    HDMI: {\n        name: 'Laptop HDMI',\n        type: 'Laptop',\n    },\n    VGA: {\n        name: 'Laptop VGA',\n        type: 'Laptop',\n    },\n    Camera1: {\n        name: 'Camera Rear',\n        type: 'Camera',\n        mod: 'Camera_1',\n    },\n    Camera2: {\n        name: 'Camera Front',\n        type: 'Camera',\n        mod: 'Camera_2',\n    },\n    Camera3: {\n        name: 'Camera Rear 2',\n        type: 'Camera',\n        mod: 'Camera_3',\n    },\n    Camera4: {\n        name: 'Camera Front 2',\n        type: 'Camera',\n        mod: 'Camera_4',\n    },\n    TV1: {\n        name: 'IPTV 1',\n        type: 'TV',\n        mod: 'IPTV_1',\n    },\n};\n\nconst output_list: HashMap = {\n    Display1: {\n        name: 'Display 1',\n        type: 'Display',\n        source: 'PC1',\n        mod: 'Display_1',\n    },\n    Display2: {\n        name: 'Display 2',\n        type: 'Display',\n        mod: 'Display_2',\n    },\n    Display3: {\n        name: 'Display 3',\n        type: 'Display',\n        source: 'PC2',\n        mod: 'Display_3',\n    },\n    Display4: {\n        name: 'Display 4',\n        type: 'Display',\n        mod: 'Display_4',\n    },\n    Display5: {\n        name: 'Display 5',\n        type: 'Display',\n        mod: 'Display_5',\n        source: 'TV1',\n    },\n};\n\nconst env_sources: any[] = [\n    {\n        id: 'light1',\n        name: 'Lighting',\n        type: 'lights',\n        states: ['Off', 'Presentation', 'Meeting', 'Full'],\n        state: 'Off',\n    },\n    {\n        id: 'blind1',\n        name: 'Blinds',\n        type: 'blinds',\n        states: ['Off', 'Presentation', 'Meeting'],\n        state: 'Off',\n    },\n    {\n        id: 'screen1',\n        name: 'Screen',\n        type: 'screen',\n        states: ['Up', 'Down'],\n        state: 'Down',\n    },\n];\n\nexport const createSystemModule = (space: HashMap, overrides: HashMap = {}) =>\n    new RoomModule({\n        ...space,\n        input_list,\n        output_list,\n        env_sources,\n        ...overrides,\n    });\n","import { addSeconds, isBefore, subSeconds } from 'date-fns';\n\nimport { HashMap, timePeriodsIntersect } from '@placeos/common';\nimport { MOCK_EVENTS } from '../api/events.data';\n\nexport class MockBookingModule {\n    /** Timezone the associated space resided */\n    time_zone = 'Australia/Sydney';\n    /** Whether booking is disabled */\n    disable_book_now = false;\n    /** Whether ending current meeting is disabled */\n    disable_end_meeting = false;\n    /** List of current and upcoming bookings for space */\n    bookings: HashMap[] = [];\n    pending_period = 0;\n    pending_before = 0;\n    /** Control UI associated with the space */\n    control_ui = '';\n    /** Catering UI associated with the space */\n    catering_ui = '';\n    /** Time of the last booking started by a user */\n    last_booking_started = 0;\n    /** Current status of the space */\n    status: 'pending' | 'busy' | 'free' | 'not-bookable' = 'free';\n}\n\nexport function createBookingsModule(\n    space: HashMap,\n    overrides: Partial<MockBookingModule> = {}\n) {\n    const mod = {\n        ...new MockBookingModule(),\n        ...overrides,\n        /** Start the meeting at the given time */\n        $start_meeting: function (t: number) {\n            this.last_booking_started = t;\n        },\n        /** End the meeting at the given time */\n        $end_meeting: function (t: number) {},\n        /** Book meeting for the current time */\n        $book_now: function (len: number, t?: string, o?: string) {},\n    };\n    updateBookings(space, mod);\n    setInterval(() => updateBookings(space, mod), 1000);\n    return mod;\n}\n\nfunction updateBookings(space: HashMap, mod: HashMap) {\n    const bookings =\n        MOCK_EVENTS.filter((event) =>\n            event.attendees?.find((u) => u.email === space.email)\n        ) || [];\n    bookings.sort((a, b) => a.event_start - b.event_start);\n    mod.bookings = bookings;\n    if (!space.bookable) {\n        return (mod.status = 'not-bookable');\n    }\n    const date = new Date();\n    const current = bookings.find((bkn) =>\n        timePeriodsIntersect(\n            date.valueOf(),\n            date.valueOf(),\n            bkn.event_start,\n            bkn.event_end\n        )\n    );\n    const next = bookings.find((bkn) =>\n        isBefore(date.valueOf(), bkn.event_start)\n    );\n    const start = new Date((current || next)?.event_start);\n    const pending = timePeriodsIntersect(\n        date,\n        date,\n        subSeconds(start, mod.pending_before),\n        addSeconds(start, mod.pending_period)\n    );\n    mod.status = current\n        ? pending\n            ? 'pending'\n            : 'busy'\n        : next && pending\n        ? 'pending'\n        : 'free';\n}\n","import { Md5 } from 'ts-md5';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { MOCK_LEVELS } from '../api/zone.data';\nimport { MOCK_STAFF } from '../api/users.data';\n\nexport interface ZoneOverview {\n    /** Desk count based on `desks` metadata in the zone\n     falls back to the zone.count field otherwise */\n    desk_count: number;\n\n    desk_usage: number;\n    /** Capacity of the space, set in zone.capacity field */\n    device_capacity: number;\n    /** Raw device count */\n    device_count: number;\n    /** This is the adjusted count based on the duplication factor */\n    estimated_people: number;\n\n    percentage_use: number;\n    /** The higher the recommendation number the better for recommending */\n    recommendation: number;\n}\n\nexport class MockLocationServicesModule implements HashMap {\n    /** Overview of the zones */\n    overview: HashMap<ZoneOverview> = {};\n\n    $locate_user(email: string, username: string) {}\n}\n\nfunction padZero(no: number, len: number = 3) {\n    let str = `${no}`;\n    while (str.length < len) {\n        str = '0' + str;\n    }\n    return str;\n}\n\nexport function createLocationServicesModule(\n    space: HashMap,\n    overrides: HashMap = {}\n) {\n    const mod = new MockLocationServicesModule();\n    for (const lvl of MOCK_LEVELS) {\n        mod.overview[lvl.id] = {\n            desk_count: 100,\n            desk_usage: 0,\n            device_capacity: 100,\n            device_count: 0,\n            estimated_people: 0,\n            percentage_use: 0,\n            recommendation: 10000,\n        };\n        mod[`${lvl.id}:desk_ids`] = new Array(mod.overview[lvl.id].desk_count)\n            .fill(0)\n            .map((_, idx) => `table-${lvl.number}.${padZero(idx)}`);\n        mod[`${lvl.id}`] = { value: [] };\n    }\n    updateLocations(mod, MOCK_LEVELS);\n    setInterval(() => updateLocations(mod, MOCK_LEVELS), 60 * 1000);\n    return mod;\n}\n\nexport function updateLocations(\n    mod: MockLocationServicesModule,\n    levels: HashMap[]\n) {\n    for (const lvl of levels) {\n        mod[lvl.id] = {\n            value: new Array(predictableRandomInt(20))\n                .fill(0)\n                .map(() => generateLocation(lvl, mod[`${lvl.id}:desk_ids`])),\n        };\n    }\n}\n\nexport function generateLocation(\n    lvl: HashMap,\n    desks: string[],\n    users = MOCK_STAFF\n) {\n    const fixed = predictableRandomInt(9999) % 3 === 0;\n    return fixed\n        ? {\n              location: 'desk',\n              at_location: predictableRandomInt(9999) % 5 !== 0,\n              map_id: desks[predictableRandomInt(desks.length)],\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              level: lvl.id,\n              building: lvl.parent_id,\n          }\n        : {\n              location: 'wireless',\n              coordinates_from: 'bottom-left',\n              x: predictableRandomInt(1000) / 10,\n              y: predictableRandomInt(1000) / 10,\n              lon: 55.27476066828535,\n              lat: 25.20106100633537,\n              s2_cell_id: '3e5f4281459c',\n              mac: Md5.hashStr(\n                  users[predictableRandomInt(users.length)].email\n              ),\n              variance: 9.62534032222287,\n              last_seen: Math.floor(new Date().valueOf() / 1000),\n              map_width: 100,\n              map_height: 100,\n          };\n}\n","import { HashMap } from '@placeos/common';\n\nexport enum CameraTilt {\n    Down,\n    Up,\n    Stop,\n}\n\nexport enum CameraPan {\n    Left,\n    Right,\n    Stop,\n}\n\nclass CameraModule {\n    pan: number;\n    tilt: number;\n    zoom: number;\n\n    pan_speed: number;\n    tilt_speed: number;\n    zoom_speed: number;\n\n    presets: string[];\n\n    constructor(_) {\n        this.presets = ['Preset One', 'Preset 2', 'Preset Three'];\n    }\n\n    $pan(dir: CameraPan) {}\n\n    $tilt(tilt: CameraTilt) {}\n\n    $recall(name: string) {}\n\n    $save_preset(name: string) {}\n}\n\nexport const createCameraModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CameraModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass DisplayModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createDisplayModule = (space: HashMap, overrides: HashMap = {}) =>\n    new DisplayModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from '@placeos/common';\n\nclass MicrophoneModule {\n    mute: boolean;\n    volume: number;\n\n    $mute(state: boolean = true) {\n        this.mute = state;\n    }\n\n    $volume(value: number) {\n        this.volume = value;\n    }\n\n    constructor(_) {\n        this.volume = randomInt(100);\n    }\n}\n\nexport const createMicrophoneModule = (\n    space: HashMap,\n    overrides: HashMap = {}\n) => new MicrophoneModule({ ...space, ...overrides });\n","import { HashMap, randomInt } from \"@placeos/common\";\n\nlet interval;\n\nexport class CaptureModule {\n\n    status: 'playing' | 'stopped' | 'paused' = 'stopped';\n    title: string;\n    live: boolean = false;\n    remaining: number;\n    current: number;\n    next: number;\n\n    constructor(_) {\n        this.remaining = randomInt(24 * 60 * 60);\n    }\n\n    $start() {\n        this.status = 'playing';\n        interval = setInterval(() => {\n            if (this.remaining < 1) clearInterval(interval);\n            this.remaining = this.remaining - 1;\n            this.current = this.current + 1;\n        }, 3000);\n    }\n\n    $pause() {\n        this.status = 'paused';\n        clearInterval(interval);\n    }\n\n    $resume() {\n        this.$start();\n    }\n\n    $stop() {\n        this.status = 'stopped';\n        this.current = 0;\n        clearInterval(interval);\n    }\n\n}\n\nexport const createCaptureModule = (space: HashMap, overrides: HashMap = {}) =>\n    new CaptureModule({ ...space, ...overrides });\n","import { registerSystem } from '@placeos/ts-client';\nimport { HashMap } from '@placeos/common';\n\nimport { createSystemModule } from './realtime/control';\nimport { createBookingsModule } from './realtime/events';\nimport { createLocationServicesModule } from './realtime/desks';\nimport { createCameraModule } from './realtime/camera';\nimport { createDisplayModule } from './realtime/display';\nimport { createMicrophoneModule } from './realtime/microphone';\nimport { createCaptureModule } from './realtime/capture';\n\nexport function createSystem(space: HashMap) {\n    registerSystem(space.id, {\n        System: [createSystemModule(space)],\n        Bookings: [createBookingsModule(space)],\n        AreaManagement: [createLocationServicesModule(space)],\n        Camera: new Array(10).fill(0).map(_ => createCameraModule(space)),\n        Display: new Array(10).fill(0).map(_ => createDisplayModule(space)),\n        Microphone: new Array(10).fill(0).map(_ => createMicrophoneModule(space)),\n        Capture: [createCaptureModule(space)]\n    });\n}\n","\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { createSystem } from '../systems-bindings.mock';\nimport { MOCK_SPACES } from './spaces.data';\n\nMOCK_SPACES.forEach((space: any, index) => createSystem(space));\n\nregisterMockEndpoint({\n    path: '/api/engine/v2/systems',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        return MOCK_SPACES;\n    }\n});\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\nimport { MOCK_EVENTS } from './events.data';\nimport { ACTIVE_USER, MOCK_STAFF } from './users.data';\n\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        let events = MOCK_EVENTS;\n        if (!_.query_params.zone_ids) {\n            events = events.filter(\n                (event) =>\n                    !!event.attendees.find(\n                        (user) => user.email === ACTIVE_USER.email\n                    )\n            );\n        }\n        if (_.query_params.period_start) {\n            events = events.filter((e) =>\n                timePeriodsIntersect(\n                    _.query_params.period_start,\n                    _.query_params.period_end,\n                    e.event_start,\n                    e.event_end\n                )\n            );\n        }\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = {\n            ...request.body,\n            id: `-cal-event-${predictableRandomInt(999)}`,\n        };\n        new_event.attendees = [\n            MOCK_STAFF.find((_) => _.email === new_event.host),\n            ...(new_event.attendees || []),\n        ];\n        new_event.attendees.forEach((user) => {\n            if (user.zones) user.resource = true;\n        });\n\n        if (new_event.system) {\n            new_event.attendees = [\n                ...(new_event.attendees || []),\n                { ...new_event.system, resource: true },\n            ];\n        }\n        MOCK_EVENTS.push(new_event);\n        return new_event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => {\n        const item = MOCK_EVENTS.find(\n            (event) => event.id === request.route_params.id\n        );\n        if (item) {\n            return item;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'DELETE',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex(\n            (event) => event.id === request.route_params.id\n        );\n        if (index > 0) {\n            if (MOCK_EVENTS[index].host === ACTIVE_USER.email) {\n                MOCK_EVENTS.splice(index, 1);\n            } else {\n                const user = MOCK_EVENTS[index].attendees.find((_) => _.email === ACTIVE_USER.email);\n                user.response_status = 'declined';\n            }\n            return;\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id',\n    metadata: {},\n    method: 'PATCH',\n    callback: (request) => {\n        const index = MOCK_EVENTS.findIndex(\n            (event) => event.id === request.route_params.id\n        );\n        if (index >= 0) {\n            return MOCK_EVENTS.splice(index, 1, request.body);\n        }\n        throw { status: 404, message: 'Event not found' };\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/events/:id/guests/:email/checkin',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const event = MOCK_EVENTS.find(\n            (event) => event.id === request.route_params.id\n        );\n        if (event) {\n            const checked_in = (event.extension_data as any).checked_in || [];\n            (event.extension_data as any).checked_in = checked_in.concat([\n                request.route_params.email,\n            ]);\n            return event;\n        }\n        throw { status: 404, message: 'Guest not found' };\n    },\n});\n","import { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_EVENTS } from './events.data';\nimport { MOCK_SPACES } from './spaces.data';\n\nimport * as dayjs from 'dayjs';\nimport { timePeriodsIntersect } from '@placeos/common';\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars',\n    metadata: {},\n    method: 'GET',\n    callback: (request) => [],\n});\n\nconst handleSpaceAvailability = (request) => {\n    const start = +request.query_params.period_start;\n    const end = +request.query_params.period_end;\n    const zones = (request.query_params.zone_ids || '')\n        .split(',')\n        .filter((i) => !!i);\n    const systems = (request.query_params.system_ids || '')\n        .split(',')\n        .filter((i) => !!i);\n\n    const spaces = MOCK_SPACES.filter((space) =>\n        zones.length\n            ? zones.reduce(\n                  (has, zone) => has && space.zones.includes(zone),\n                  true\n              )\n            : systems.length\n            ? systems.includes(space.id)\n            : true\n    ).filter((space) => {\n        const bookings = MOCK_EVENTS.filter((event) =>\n            event.attendees.find((user) => user.id === space.id)\n        );\n        for (const event of bookings) {\n            if (\n                timePeriodsIntersect(\n                    start,\n                    end,\n                    event.event_start,\n                    event.event_end\n                )\n            )\n                return false;\n        }\n        return true;\n    });\n    return spaces;\n};\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/availability',\n    metadata: {},\n    method: 'GET',\n    callback: (request) =>\n        handleSpaceAvailability(request).map((_) => ({\n            resource: _,\n        })),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/calendars/free_busy',\n    metadata: {},\n    method: 'GET',\n    callback: (request) =>\n        handleSpaceAvailability(request).map((_) => ({\n            resource: _,\n        })),\n});\n","import { predictableRandomInt } from '@placeos/common';\nimport { addMinutes, getUnixTime, setHours, startOfDay } from 'date-fns';\n\nimport { MOCK_STAFF } from './users.data';\nimport { MOCK_BUILDINGS, MOCK_LEVELS } from './zone.data';\n\nlet EVENT_TIME = setHours(startOfDay(new Date()), 7);\n\nconst nextEventTime = (save = false): number => {\n    const next = addMinutes(EVENT_TIME, (predictableRandomInt(8) + 1) * 15);\n    if (save) EVENT_TIME = next;\n    return getUnixTime(next);\n};\n\nconst TYPES = ['desk', 'parking'];\n\nexport const MOCK_BOOKINGS = new Array(200).fill(0).map((_, index) => {\n    const user = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    const type = TYPES[predictableRandomInt(TYPES.length)];\n    const bld = MOCK_BUILDINGS[predictableRandomInt(MOCK_BUILDINGS.length)];\n    const lvls = MOCK_LEVELS.filter((_) => _.parent_id === bld.id);\n    const lvl = lvls[predictableRandomInt(lvls.length)];\n    const approved = predictableRandomInt(999999) % 4;\n    const approver = MOCK_STAFF[predictableRandomInt(MOCK_STAFF.length)];\n    return {\n        id: `booking-${index}`,\n        booking_start: nextEventTime(true),\n        booking_end: nextEventTime(),\n        user_id: user.id,\n        user_name: user.name,\n        user_email: user.email,\n        asset_id: `desk-${lvl?.id}-${index}`,\n        description: `Desk ${index}`,\n        title: `${type} Booking ${index}`,\n        type,\n        checked_in: predictableRandomInt(999999) % 3 === 0,\n        access: predictableRandomInt(999999) % 3 === 0,\n        approved: approved === 0,\n        rejected: approved === 1,\n        approver_id: approved === 0 ? approver.id : '',\n        approver_name: approved === 0 ? approver.name : '',\n        approver_email: approved === 0 ? approver.email : '',\n        zones: [bld.id, lvl?.id],\n        extension_data: {},\n    };\n});\n","import { predictableRandomInt, timePeriodsIntersect } from '@placeos/common';\nimport { registerMockEndpoint } from '@placeos/ts-client';\n\nimport { MOCK_BOOKINGS } from './bookings.data';\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const events = MOCK_BOOKINGS.filter(\n            (event) =>\n                timePeriodsIntersect(\n                    _.query_params.period_start,\n                    _.query_params.period_end,\n                    event.booking_start,\n                    event.booking_end\n                ) && event.type === _.query_params.type\n        );\n        return events;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'GET',\n    callback: (_) => {\n        const event = MOCK_BOOKINGS.find((e) => e.id === _.route_params.id);\n        if (!event)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${_.route_params.id}`,\n            };\n        return event;\n    },\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings',\n    metadata: {},\n    method: 'POST',\n    callback: (request) => {\n        const new_event = {\n            ...request.body,\n            id: `-booking-${predictableRandomInt(999)}`,\n        };\n        MOCK_BOOKINGS.push(new_event);\n        return new_event;\n    },\n});\n\nconst updateBooking = (id, data) => {\n    const index = MOCK_BOOKINGS.findIndex((e) => e.id === id);\n    if (index < 0)\n        throw {\n            status: 404,\n            message: `Unable to find booking with ID ${id}`,\n        };\n    const new_event = { ...data };\n    MOCK_BOOKINGS.splice(index, 1, new_event);\n    return new_event;\n};\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'PUT',\n    callback: (req) => updateBooking(req.route_params.id, { ...req.body }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/approve',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            approved: true,\n            rejected: false,\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/reject',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            approved: false,\n            rejected: true,\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id/check_in',\n    metadata: {},\n    method: 'POST',\n    callback: (req) =>\n        updateBooking(req.route_params.id, {\n            ...req.body,\n            checked_in: req.query_params.state === 'true',\n        }),\n});\n\nregisterMockEndpoint({\n    path: '/api/staff/v1/bookings/:id',\n    metadata: {},\n    method: 'DELETE',\n    callback: (req) => {\n        const index = MOCK_BOOKINGS.findIndex(\n            (e) => e.id === req.route_params.id\n        );\n        if (index < 0)\n            throw {\n                status: 404,\n                message: `Unable to find booking with ID ${req.route_params.id}`,\n            };\n        MOCK_BOOKINGS.splice(index, 1);\n        return;\n    },\n});\n","import { log } from '@placeos/common';\n\nimport * as ZONE_MOCKS from './lib/api/zones.mock';\nimport * as USER_MOCKS from './lib/api/users.mock';\nimport * as SYSTEM_MOCKS from './lib/api/systems.mock';\nimport * as EVENT_MOCKS from './lib/api/events.mock';\nimport * as CALENDAR_MOCKS from './lib/api/calendars.mock';\nimport * as BOOKING_MOCKS from './lib/api/bookings.mock';\n\nimport * as BINDING_MOCKS from './lib/systems-bindings.mock';\n\nexport default {\n    ZONE_MOCKS,\n    USER_MOCKS,\n    SYSTEM_MOCKS,\n    EVENT_MOCKS,\n    CALENDAR_MOCKS,\n    BOOKING_MOCKS,\n    BINDING_MOCKS,\n};\n\nlog('MOCKS', 'Mocks included with application.');\n","import { Component, OnInit } from '@angular/core';\nimport { SwUpdate } from '@angular/service-worker';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { Integrations } from '@sentry/tracing';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport {\n    clientId,\n    invalidateToken,\n    isMock,\n    refreshToken,\n    token,\n} from '@placeos/ts-client';\n\nimport {\n    BaseClass,\n    current_user,\n    currentUser,\n    HotkeysService,\n    notifySuccess,\n    setAppName,\n    setNotifyOutlet,\n    SettingsService,\n    setupCache,\n    setupPlace,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { setInternalUserDomain } from 'libs/users/src/lib/user.utilities';\n\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\nimport { setDefaultCreator } from 'libs/events/src/lib/event.class';\nimport { addHours } from 'date-fns';\n\nimport * as Sentry from '@sentry/angular';\nimport * as MOCKS from '@placeos/mocks';\n\nexport function initSentry(dsn: string, sample_rate: number = 0.2) {\n    if (!dsn) return;\n    Sentry.init({\n        dsn,\n        integrations: [\n            new Integrations.BrowserTracing({\n                tracingOrigins: ['localhost', location.origin],\n                routingInstrumentation: Sentry.routingInstrumentation,\n            }),\n        ],\n        tracesSampleRate: sample_rate,\n    });\n}\n\n@Component({\n    selector: 'app-root',\n    template: `\n        <router-outlet></router-outlet>\n        <global-loading></global-loading>\n    `,\n    styles: [``],\n})\nexport class AppComponent extends BaseClass implements OnInit {\n    constructor(\n        private _tracing: Sentry.TraceService,\n        private _settings: SettingsService,\n        private _org: OrganisationService, // For init\n        private _spaces: SpacesService, // For init\n        private _cache: SwUpdate,\n        private _snackbar: MatSnackBar,\n        private _hotkey: HotkeysService,\n        private _clipboard: Clipboard\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        console.log('MOCKS:', MOCKS);\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyM'], () => {\n            localStorage.setItem(\n                'mock',\n                `${localStorage.getItem('mock') !== 'true'}`\n            );\n            location.reload();\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyC'], () => {\n            this._clipboard.copy(`${token()}|${refreshToken()}`);\n            notifySuccess('Successfully copied token.');\n        });\n        this._hotkey.listen(['Control', 'Alt', 'Shift', 'KeyV'], () => {\n            navigator.clipboard?.readText().then((tkn) => {\n                const parts = tkn.split('|');\n                const id = clientId();\n                localStorage.setItem(`${id}_access_token`, `${parts[0]}`);\n                localStorage.setItem(`${id}_refresh_token`, `${parts[1]}`);\n                localStorage.setItem(\n                    `${id}_expires_at`,\n                    `${addHours(new Date(), 6).valueOf()}`\n                );\n                notifySuccess('Successfully pasted token.');\n                setTimeout(() => location.reload(), 2000);\n            });\n        });\n        setNotifyOutlet(this._snackbar);\n        /** Wait for settings to initialise */\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        setAppName(this._settings.get('app.short_name'));\n        const settings = this._settings.get('composer') || {};\n        settings.mock =\n            !!this._settings.get('mock') ||\n            location.origin.includes('demo.place.tech');\n        /** Wait for authentication details to load */\n        await setupPlace(settings).catch(() => this.onInitError());\n        setupCache(this._cache);\n        this.timeout('wait_for_user', () => this.onInitError(), 5 * 1000);\n        await current_user.pipe(first((_) => !!_)).toPromise();\n        this.clearTimeout('wait_for_user');\n        setDefaultCreator(currentUser());\n        setInternalUserDomain(\n            this._settings.get('app.general.internal_user_domain') ||\n                currentUser()?.email?.split('@')[1]\n        );\n        initSentry(this._settings.get('app.sentry_dsn'));\n    }\n\n    private onInitError() {\n        if (isMock() || currentUser()?.is_logged_in) return;\n        console.error('Error initialising user.');\n        invalidateToken();\n        location.reload();\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MAT_CHIPS_DEFAULT_OPTIONS } from '@angular/material/chips';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\n\nimport { UnauthorisedComponent } from '@placeos/components';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from '../../../../libs/components/src/lib/app.component';\nimport { environment } from '../environments/environment';\nimport { UIModule } from './ui/ui.module';\n\nimport * as Sentry from '@sentry/angular';\n\n@NgModule({\n    declarations: [AppComponent, UnauthorisedComponent],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        MatSnackBarModule,\n        BrowserAnimationsModule,\n        HttpClientModule,\n        UIModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: environment.production,\n        }),\n    ],\n    providers: [\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: {\n                separatorKeyCodes: [ENTER, COMMA],\n            },\n        },\n        {\n            provide: ErrorHandler,\n            useValue: Sentry.createErrorHandler({\n                showDialog: false,\n            }),\n        },\n        {\n            provide: Sentry.TraceService,\n            deps: [Router],\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export const environment = {\n    production: true,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.error(err));\n","import { differenceInMinutes } from 'date-fns';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nimport { CalendarAvailability } from './calendar.interfaces';\n\nexport class Calendar {\n    /** ID of the calendar */\n    public readonly id: string;\n    /** Name of the calendar */\n    public readonly name: string;\n    /** System associated with the calendar */\n    public readonly resource: Space;\n    /** Primary calendar of the user */\n    public readonly primary: boolean;\n    /** Summary */\n    public readonly summary: string;\n    /** Whether the user can edit events associated to this calendar */\n    public readonly can_edit: boolean;\n    /** Availability */\n    public readonly availability: CalendarAvailability[];\n    /** Whether calendar should be hidden from the user */\n    public readonly hidden: boolean;\n\n    constructor(data: Partial<Calendar> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.primary = !!data.primary;\n        this.summary = data.summary || '';\n        this.can_edit = !!data.can_edit;\n        this.resource = new Space(data.resource || (data as any).system);\n        this.availability = (data.availability || []).map(\n            ({ starts_at, ends_at, date, duration, status }: any) => {\n                return {\n                    date: new Date(date, starts_at).valueOf(),\n                    duration:\n                        duration || differenceInMinutes(ends_at, starts_at),\n                    status: status,\n                };\n            }\n        );\n        this.hidden = !!data.hidden;\n    }\n}\n","import { get } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { Calendar } from './calendar.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\n\nconst CALENDAR_ENDPOINT = '/api/staff/v1/calendars';\n\n/** List calendars associated with the logged in user */\nexport function queryCalendars(): Observable<Calendar[]> {\n    return get(CALENDAR_ENDPOINT).pipe(\n        map((i) => i.map((c) => new Calendar(c)))\n    );\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function queryCalendarAvailability(\n    q: CalendarAvailabilityQueryParams\n): Observable<Calendar[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/availability${query ? '?' + query : ''}`\n    ).pipe(map((i) => i.map((c) => new Calendar(c))));\n}\n\nconst calendarsToSpaces = (org?) =>\n    map((list: Calendar[]) =>\n        list\n            .filter((cal) => !!cal.resource)\n            .map(\n                (cal) =>\n                    new Space({\n                        ...cal.resource,\n                        level: org?.levelWithID(cal.resource.zones),\n                        availability: cal.availability,\n                    })\n            )\n            .filter((space) => space.bookable)\n    );\n\n/** List available spaces based on the given query */\nexport function querySpaceAvailability(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    return queryCalendarAvailability(q).pipe(calendarsToSpaces(org));\n}\n\n/** List room calendars for available spaces based on the given query */\nexport function querySpaceFreeBusy(\n    q: CalendarAvailabilityQueryParams,\n    org?: OrganisationService\n): Observable<Space[]> {\n    const query = toQueryString(q);\n    return get(\n        `${CALENDAR_ENDPOINT}/free_busy${query ? '?' + query : ''}`\n    ).pipe(\n        map((i) => i.map((c) => new Calendar(c))),\n        calendarsToSpaces(org)\n    );\n}\n","import { CateringOption } from './catering.interfaces';\n\nexport class CateringItem {\n    /** ID of the catering item */\n    public readonly id: string;\n    /** Display name for the catering item */\n    public readonly name: string;\n    /** Category that this item is associated */\n    public readonly category: string;\n    /** Description of the contents of the catering item */\n    public readonly description: string;\n    /** Unit price in cents for the catering item */\n    public readonly unit_price: number;\n    /** Number of item in the associated order */\n    public readonly quantity: number;\n    /** List of options for the catering item */\n    public readonly options: CateringOption[];\n    /** List of attributes assoicated with the catering item */\n    public readonly tags: string[];\n    /** Whether catering items can be purchased using points */\n    public readonly accept_points: boolean;\n    /** Max percentage of the cost that can be covered using points */\n    public readonly discount_cap: number;\n    /** Total cost for the item */\n    public readonly total_cost: number;\n\n    public readonly options_string: string;\n\n    constructor(data: Partial<CateringItem> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || data.id || '';\n        this.category = data.category || '';\n        this.unit_price = data.unit_price || 0;\n        this.description = data.description || '';\n        this.quantity = data.quantity || 0;\n        this.discount_cap = data.discount_cap || 0;\n        this.accept_points = !!data.accept_points;\n        this.options = data.options || [];\n        this.tags = data.tags || [];\n        this.total_cost =\n            (this.unit_price +\n                this.options\n                    .map((i) => i.unit_price || 0)\n                    .reduce((c, a) => c + a, 0)) *\n            this.quantity;\n\n        this.options_string =\n            this.options\n                ?.map((_) => _.id || '')\n                .sort((a, b) => a.localeCompare(b))\n                .join(',') || '';\n    }\n}\n","import { randomInt } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport class CateringOrder {\n    /** ID of the order */\n    public readonly id: string;\n    /** ID of the space the order is associated */\n    public readonly system_id: string;\n    /** ID of the event the order is associated */\n    public readonly event_id: string;\n    /** List of items associated with the order */\n    public readonly items: readonly CateringItem[];\n    /** Number of items in the order */\n    public readonly item_count: number;\n    /** Total cost of order */\n    public readonly total_cost: number;\n    /** Invoice number associated with the order */\n    public readonly invoice_number: string;\n    /** Charge code for the order */\n    public readonly charge_code: string;\n    /** Unix epoch in seconds of order delivery time */\n    public readonly deliver_at: number;\n    /** Current status of the order */\n    public readonly status: CateringOrderStatus;\n    /** Event associated with the order */\n    public readonly event: CalendarEvent | null;\n\n    constructor(data: Partial<CateringOrder> = {}) {\n        this.id = data.id || `order-${randomInt(9_999_999, 1_000_000)}`;\n        this.system_id = data.system_id || '';\n        this.event_id = data.event_id || data.event?.id || '';\n        this.items = (data.items || []).map((i) => new CateringItem(i));\n        this.item_count = this.items.reduce(\n            (amount, item) => amount + item.quantity,\n            0\n        );\n        this.total_cost = this.items.reduce(\n            (amount, item) => amount + (item.total_cost || 0),\n            0\n        );\n        this.charge_code = data.charge_code || '';\n        this.status = data.status || 'accepted';\n        this.invoice_number = data.invoice_number || '';\n        this.event = data.event || null;\n        this.deliver_at =\n            data.deliver_at ||\n            (data as any).date ||\n            this.event?.date ||\n            new Date().getTime();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from './types';\nimport { unique } from './general';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            if (this.last_down !== code) {\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            this.keydown_states[code].next(null);\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                if (count) {\n                    const presses: number[] = [];\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","const general = {\n    menu: [\n        {\n            route: 'day-view',\n            name: 'Calendar',\n            icon: { class: 'material-icons', content: 'event' },\n        },\n        {\n            route: 'facilities',\n            name: 'Facilities',\n            icon: { class: 'material-icons', content: 'meeting_room' },\n        },\n        {\n            route: 'catering',\n            name: 'Catering',\n            icon: { class: 'material-icons', content: 'room_service' },\n        },\n        {\n            route: 'visitors',\n            name: 'Visitors',\n            icon: { class: 'material-icons', content: 'group' },\n        },\n        {\n            route: 'desks',\n            name: 'Desks',\n            icon: { class: 'material-icons', content: 'article' },\n        },\n        {\n            route: 'staff',\n            name: 'Staff',\n            icon: { class: 'material-icons', content: 'account_box' },\n        },\n        {\n            route: 'points',\n            name: 'Points',\n            icon: { class: 'material-icons', content: 'loyalty' },\n        },\n        {\n            route: 'reports',\n            name: 'Reports',\n            icon: { class: 'material-icons', content: 'analytics' },\n        },\n    ],\n};\n\nconst app = {\n    name: 'Concierge',\n    title: 'PlaceOS',\n    description: 'Concierge UI',\n    short_name: 'PlaceOS',\n    logo_light: {\n        type: 'img',\n        src: 'assets/logo-light.svg',\n    },\n    logo_dark: {\n        type: 'img',\n        src: 'assets/logo-dark.svg',\n    },\n    general,\n};\n\n/**\n * ROOT SETTIGNS\n */\nexport const DEFAULT_SETTINGS = {\n    debug: true,\n    composer: {\n        domain: '',\n        route: '/concierge',\n        protocol: '',\n        port: '',\n        use_domain: false,\n        local_login: false,\n    },\n    app,\n};\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { format, isSameDay } from 'date-fns';\n\nimport { log, getItemWithKeys, setAppName } from './general';\nimport { DEFAULT_SETTINGS } from './settings';\nimport { HashMap } from './types';\nimport { BaseClass } from './base.class';\n\nimport { VERSION } from './version';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n        application: HashMap;\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SettingsService extends BaseClass {\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n    /** List of override settings in order of priority */\n    private _overrides = new BehaviorSubject<HashMap[]>([]);\n    /** Mapping of behaviour subjects */\n    private _subjects: HashMap<BehaviorSubject<any>> = {};\n    /** Mapping of observables */\n    private _observables: HashMap<Observable<any>> = {};\n\n    /**\n     * @hidden\n     */\n    public set overrides(value: HashMap[]) {\n        this._overrides.next(value);\n    }\n\n    /** Get observable for key */\n    public listen<T = any>(name: string): Observable<T> {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        return this._observables[name];\n    }\n\n    /** Update observable value for key */\n    public post<T>(name: string, value: T): void {\n        if (!this._observables[name]) {\n            this._subjects[name] = new BehaviorSubject<T>(null);\n            this._observables[name] = this._subjects[name].asObservable();\n        }\n        this._subjects[name].next(value);\n    }\n\n    public value<T = any>(name: string): T {\n        return !this._observables[name]\n            ? null\n            : this._subjects[name].getValue();\n    }\n\n    /** Page title */\n    public get title() {\n        return this._title.getTitle();\n    }\n    public set title(value: string) {\n        this._title.setTitle(\n            `${value} | ${this.get('app.name') || this._app_name}`\n        );\n    }\n\n    constructor(private _title: Title) {\n        super();\n        const now = new Date();\n        const time = new Date(VERSION.time);\n        const built = isSameDay(now, time)\n            ? `Today at ${format(time, 'h:mma')}`\n            : format(time, 'do MMM yyyy, h:mma');\n        log('CORE', `${VERSION.semver}`, null, 'debug', true);\n        log('APP', `${VERSION.hash} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        if (this.get('debug')) {\n            window.debug = true;\n        }\n        if (this.get('app')?.name) {\n            this._app_name = this.get('app').name;\n        }\n        this._app_name =\n            location.pathname.slice(1).split('/').join('-') || this._app_name;\n        setAppName(this._app_name.split('-').join('_').toUpperCase());\n        log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.settings = this;\n        }\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() {\n        return this._app_name;\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get<T = any>(key: string): T {\n        const keys = key.split('.');\n        if (keys[0] !== 'app') {\n            return getItemWithKeys(keys, DEFAULT_SETTINGS);\n        }\n        const override_settings = this._overrides.getValue();\n        for (const override of override_settings) {\n            const value = getItemWithKeys(keys.slice(1), override);\n            if (value != null) {\n                return value;\n            }\n        }\n        return getItemWithKeys(keys, DEFAULT_SETTINGS);\n    }\n}\n","// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\n/* tslint:disable */\nexport const VERSION = {\n    \"dirty\": false,\n    \"raw\": \"5306690\",\n    \"hash\": \"5306690\",\n    \"distance\": null,\n    \"tag\": null,\n    \"semver\": null,\n    \"suffix\": \"5306690\",\n    \"semverString\": null,\n    \"version\": \"0.0.0\",\n    \"time\": 1627281144918\n};\n/* tslint:enable */\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\nlet _service: MatSnackBar;\n\nexport function setNotifyOutlet(snackbar: MatSnackBar) {\n    _service = snackbar;\n}\n\n/**\n * Create notification popup\n * @param type CSS Class to add to the notification\n * @param message Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notify(\n    type: string,\n    message: string,\n    action: string = 'OK',\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    if (!_service) {\n        throw new Error(\"Snackbar service hasn't been initialised\");\n    }\n    const snackbar_ref = _service.open(message, action, {\n        panelClass: [type],\n        duration: 5000,\n        ...config,\n    });\n    if (action) {\n        on_action = on_action || (() => snackbar_ref.dismiss());\n        snackbar_ref.onAction().subscribe(() => on_action());\n    }\n}\n\n/**\n * Create success notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifySuccess(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.debug(msg);\n    notify('success', msg, action, on_action, config);\n}\n\n/**\n * Create error notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyError(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.error(msg);\n    notify('error', msg, action, on_action, config);\n}\n\n/**\n * Create warning notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyWarn(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.warn(msg);\n    notify('warn', msg, action, on_action, config);\n}\n\n/**\n * Create info notification popup\n * @param msg Message to display on the notificaiton\n * @param action Display text for the callback action\n * @param on_action Callback of action on the notification\n * @param config Configuration details to pass to the snackbar\n */\nexport function notifyInfo(\n    msg: string,\n    action?: string,\n    on_action?: () => void,\n    config: Partial<MatSnackBarConfig> = {}\n): void {\n    console.info(msg);\n    notify('info', msg, action, on_action, config);\n}\n","import { SwUpdate } from '@angular/service-worker';\n\nimport { log } from './general';\nimport { Subscription } from 'rxjs';\nimport { notifyInfo } from './notifications';\n\nlet _available: Subscription;\nlet _activated: Subscription;\nlet _timer: number;\n\nexport type Notification = (message: string, callback: () => void) => void;\n\n/**\n * Setup handler for cache change events\n * @param cache Angular Service worker service\n * @param notify Function to call on changes to the cache\n * @param interval Time interval to check the cache for changes\n */\nexport function setupCache(\n    cache: SwUpdate,\n    notify: Notification = () => null,\n    interval: number = 5 * 60 * 1000\n) {\n    if (cache.isEnabled) {\n        if (_available) _available.unsubscribe();\n        if (_activated) _activated.unsubscribe();\n        if (_timer) clearInterval(_timer);\n        _available = cache.available.subscribe((event) => {\n            const current = `current version is ${event.current.hash}`;\n            const available = `available version is ${event.available.hash}`;\n            log('CACHE', `Update available: ${current} ${available}`);\n            activateUpdate(cache);\n        });\n        _activated = cache.activated.subscribe(() => {\n            log('CACHE', `Updates activated. Reloading...`);\n            notify('Newer version of the application is available', () =>\n                location.reload(true)\n            );\n        });\n        _timer = <any>setInterval(() => {\n            log('CACHE', `Checking for updates...`);\n            cache.checkForUpdate();\n        }, interval);\n    }\n}\n\n/**\n * Update the cache and reload the page\n *\n */\nfunction activateUpdate(cache: SwUpdate) {\n    if (cache.isEnabled) {\n        log('CACHE', `Activating changes to the cache...`);\n        cache.activateUpdate().then(() => {\n            notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                location.reload(true)\n            );\n        });\n    }\n}\n","import { PlaceAuthOptions, setup } from '@placeos/ts-client';\nimport { notifyInfo } from './notifications';\n\nexport interface PlaceSettings {\n    /** Protocol used by the application server */\n    protocol: 'http:' | 'https:';\n    /** Domain that the API server lies  */\n    domain: string;\n    /** Port number of the API server */\n    port: number;\n    /** Route on domain application rests */\n    route: string;\n    /** Whether to use the settings domain for auth */\n    use_domain: boolean;\n    /** Whether login is handled locally by the application */\n    local_login: boolean;\n    /** Whether application should mock out API requests */\n    mock: boolean;\n}\n\n/**\n * Initialise the PlaceOS API library\n */\nexport async function setupPlace(settings: PlaceSettings): Promise<void> {\n    const protocol = settings.protocol || location.protocol;\n    const host = settings.domain || location.hostname;\n    const port = settings.port || location.port;\n    const url = settings.use_domain\n        ? `${protocol}//${host}:${port}`\n        : location.origin;\n    const route = (location.pathname + '/').replace('//', '/');\n    console.log(\n        'Mock:',\n        settings.mock,\n        location.href.includes('mock=true'),\n        localStorage.getItem('mock') === 'true'\n    );\n    const mock =\n        settings.mock ||\n        location.href.includes('mock=true') ||\n        localStorage.getItem('mock') === 'true';\n    // Generate configuration object\n    const config: PlaceAuthOptions = {\n        auth_type: 'auth_code',\n        scope: 'public',\n        host: `${host}${port ? ':' + port : ''}`,\n        auth_uri: `${url}/auth/oauth/authorize`,\n        token_uri: `${url}/auth/oauth/token`,\n        redirect_uri: `${location.origin}${route}oauth-resp.html`,\n        handle_login: !settings.local_login,\n        use_iframe: true,\n        mock,\n    };\n    if (localStorage) {\n        localStorage.setItem(\n            'mock',\n            `${!!mock && !location.href.includes('mock=false')}`\n        );\n    }\n    if (mock) {\n        notifyInfo('Application in mock mode.');\n    }\n    return setup(config);\n}\n","import { showUser } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { delay, map, retry } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nconst _current_user = new BehaviorSubject<StaffUser>(null);\n\nexport const current_user = _current_user.asObservable();\n\ndeclare let jest;\n\nsetTimeout(() => {\n    try {\n        if (jest) return;\n    } catch {}\n    showUser('current')\n        .pipe(\n            delay(1000),\n            retry(10),\n            map((i) => new StaffUser(i))\n        )\n        .subscribe((user) => _current_user.next(user));\n}, 300);\n\n/** Get the current user details */\nexport function currentUser() {\n    return _current_user.getValue();\n}\n","import { HashMap } from \"./types\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BaseClass implements OnDestroy {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: {\n        [name: string]: Subscription | (() => void);\n    } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            if (key in this._timers) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            if (key in this._intervals) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            if (key in this._subscriptions) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named timeout without a name'\n                    : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name\n                    ? 'Cannot create named interval without a name'\n                    : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub;\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n\n    /** Unsubscribe to the items with names containing the given string */\n    protected unsubWith(contains: string) {\n        const subs = Object.keys(this._subscriptions).filter((k) =>\n            k.includes(contains)\n        );\n        for (const key of subs) {\n            this.unsub(key);\n        }\n    }\n}\n","import { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../../../components/src/lib/confirm-modal.component';\nimport { HashMap } from './types';\n\n/** Available console output streams. */\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nlet _app_name = 'APP';\n\nexport function setAppName(name: string) {\n    _app_name = name;\n}\n\n/**\n * Log data to the browser console\n * @param type Type of message\n * @param msg Message body\n * @param args array of argments to log to the console\n * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n * @param force Whether to force message to be emitted when debug is disabled\n */\nexport function log(\n    type: string,\n    msg: string,\n    args?: any,\n    stream: ConsoleStream = 'debug',\n    force: boolean = false,\n    app_name: string = _app_name\n) {\n    if (window.debug || force) {\n        const colors: string[] = [\n            'color: #E91E63',\n            'color: #3F51B5',\n            'color: default',\n        ];\n        if (args) {\n            console[stream](\n                `%c[${app_name}]%c[${type}] %c${msg}`,\n                ...colors,\n                args\n            );\n        } else {\n            console[stream](`%c[${app_name}]%c[${type}] %c${msg}`, ...colors);\n        }\n    }\n}\n\n/**\n * Get item from the nested object\n * @param keys List of sub-keys to search for\n * @param map Object to search\n */\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map && map[key] != null) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique<T = any>(array: T[] = [], key: string = ''): T[] {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(\n                key\n                    ? arr.find((i) => i[key] === el[key])\n                    : arr.find((i) => i === el)\n            ) === pos\n    );\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\nexport async function openConfirmModal(\n    data: ConfirmModalData,\n    dialog: MatDialog\n) {\n    const ref = dialog.open<ConfirmModalComponent, ConfirmModalData>(\n        ConfirmModalComponent,\n        {\n            ...CONFIRM_METADATA,\n            data,\n        }\n    );\n    return {\n        ...(await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ])),\n        loading: (s) => (ref.componentInstance.loading = s),\n        close: () => ref.close(),\n    };\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string, delimiter: string = ','): HashMap[] {\n    const objPattern = new RegExp(\n        '(\\\\,|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\\\\,\\\\r\\\\n]*))',\n        'gi'\n    );\n    let arrMatches = null;\n    const arrData = [[]];\n    while ((arrMatches = objPattern.exec(csv))) {\n        if (arrMatches[1].length && arrMatches[1] !== ',') arrData.push([]);\n        arrData[arrData.length - 1].push(\n            arrMatches[2]\n                ? arrMatches[2].replace(new RegExp('\"\"', 'g'), '\"')\n                : arrMatches[3]\n        );\n    }\n    const headers: string[] = arrData.splice(0, 1)[0];\n    const elements = arrData.map((row) => {\n        const element = {};\n        for (let i = 0; i < row.length; i++) {\n            const key = headers[i].split(' ').join('_').toLowerCase();\n            try {\n                element[key] = JSON.parse(row[i]);\n            } catch (e) {\n                element[key] = row[i] || '';\n            }\n        }\n        return element;\n    });\n    return elements;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => key in json[0]);\n        return `${valid_keys.join(',')}\\n${json\n            .map((item) =>\n                valid_keys.map((key) => JSON.stringify(item[key])).join(',')\n            )\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute(\n        'href',\n        'data:text/plain;charset=utf-8,' + encodeURIComponent(contents)\n    );\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport function parseJWT(token: string) {\n    const base64Url = token.split('.')[1];\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    const jsonPayload = decodeURIComponent(\n        atob(base64)\n            .split('')\n            .map((c) => {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            })\n            .join('')\n    );\n    return JSON.parse(jsonPayload);\n}\n\n/* istanbul ignore next */\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n\n/**\n * Check whether two time periods intersect with each other\n * @param start1 Unix epoch in ms of the first period's start time\n * @param end1 Unix epoch in ms of the first period's end time\n * @param start2 Unix epoch in ms of the second period's start time\n * @param end2 Unix epoch in ms of the second period's end time\n */\nexport function timePeriodsIntersect(start1, end1, start2, end2) {\n    return (\n        (start1 >= start2 && start1 < end2) ||\n        (end1 > start2 && end1 < end2) ||\n        (start2 >= start1 && start2 < end1) ||\n        (end2 > start1 && end2 <= end1)\n    );\n}\n\nconst seed = xmur3('PlaceOS');\nconst rand = sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, seed());\n\nexport function predictableRandomInt(ceil: number = 100, floor: number = 0) {\n    return Math.floor(rand() * (ceil - floor)) + floor;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\nfunction xmur3(str) {\n    let h = 1779033703 ^ str.length;\n    for (let i = 0; i < str.length; i++)\n        (h = Math.imul(h ^ str.charCodeAt(i), 3432918353)),\n            (h = (h << 13) | (h >>> 19));\n    return function () {\n        h = Math.imul(h ^ (h >>> 16), 2246822507);\n        h = Math.imul(h ^ (h >>> 13), 3266489909);\n        return (h ^= h >>> 16) >>> 0;\n    };\n}\n\nfunction sfc32(a, b, c, d) {\n    return function () {\n        a >>>= 0;\n        b >>>= 0;\n        c >>>= 0;\n        d >>>= 0;\n        let t = (a + b) | 0;\n        a = b ^ (b >>> 9);\n        b = (c + (c << 3)) | 0;\n        c = (c << 21) | (c >>> 11);\n        d = (d + 1) | 0;\n        t = (t + d) | 0;\n        c = (c + t) | 0;\n        return (t >>> 0) / 4294967296;\n    };\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm a';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date\n        .toLocaleTimeString(\n            document.querySelector('html').getAttribute('lang') ||\n                navigator.language\n        )\n        .toLowerCase();\n    return localeString.indexOf('am') < 0 && localeString.indexOf('pm') < 0;\n}\n\nexport function getInvalidFields(form: FormGroup) {\n    const invalid = [];\n    for (const key in form.controls) {\n        if (!form.controls[key].valid) {\n            invalid.push(key);\n        }\n    }\n    return invalid;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon, BaseClass } from '@placeos/common';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    template: `\n        <button\n            mat-icon-button\n            class=\"small absolute text-base center shadow\"\n            *ngFor=\"let item of actions; let i = index\"\n            [style.top]=\"show ? -110 * i - 60 + '%' : ''\"\n            (click)=\"action.emit(item.id); show = false\"\n        >\n            <app-icon [icon]=\"item\"></app-icon>\n        </button>\n        <button\n            name=\"root\"\n            mat-icon-button\n            [class.show]=\"show\"\n            (click)=\"show = !show\"\n            (window:click)=\"show ? close() : ''\"\n        >\n            <app-icon>{{ show ? 'add' : 'more_vert' }}</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n\n            app-icon {\n                transition: transform 200ms;\n            }\n\n            button {\n                background-color: #fff;\n                color: rgba(#000, 0.85);\n                font-size: 1.25rem;\n                height: 2.5em;\n                width: 2.5em;\n            }\n\n            button.show app-icon {\n                transform: rotate(45deg);\n            }\n\n            button.small {\n                transition: top 200ms, left 200ms;\n            }\n        `,\n    ],\n})\nexport class PopoutMenuComponent extends BaseClass {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => (this.show = false));\n    }\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapPinData {\n    message: string;\n    fill: string;\n    stroke: string;\n    action?: () => void;\n}\n\n@Component({\n    selector: '[map-pin]',\n    template: `\n        <div\n            name=\"message\"\n            *ngIf=\"message && show_message\"\n            class=\"p-2 m-2 rounded bg-white text-gray-700 shadow\"\n        >\n            {{ message }}\n        </div>\n        <svg\n            *ngIf=\"show\"\n            name=\"pin\"\n            viewBox=\"0 0 380 560\"\n            [class.action]=\"action\"\n            (click)=\"action()\"\n        >\n            <g>\n                <path\n                    [style.fill]=\"fill\"\n                    [style.stroke]=\"stroke\"\n                    stroke-width=\"25\"\n                    d=\"M182.9,551.7c0,0.1,0.2,0.3,0.2,0.3S358.3,283,358.3,194.6c0-130.1-88.8-186.7-175.4-186.9\n            C96.3,7.9,7.5,64.5,7.5,194.6c0,88.4,175.3,357.4,175.3,357.4S182.9,551.7,182.9,551.7z M122.2,187.2c0-33.6,27.2-60.8,60.8-60.8\n            c33.6,0,60.8,27.2,60.8,60.8S216.5,248,182.9,248C149.4,248,122.2,220.8,122.2,187.2z\"\n                />\n            </g>\n        </svg>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                bottom: 0;\n                left: 50%;\n                width: 24rem;\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                transform: translateX(-50%);\n                z-index: -1;\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            .action {\n                pointer-events: auto;\n            }\n\n            svg {\n                width: 2rem;\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translateY(-100%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translateY(0%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapPinComponent implements OnInit {\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#fff';\n    /** Action to perform when clicking pin */\n    public readonly action = this._details.action || null;\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(@Inject(MAP_FEATURE_DATA) private _details: MapPinData) {}\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { MAP_FEATURE_DATA } from './interactive-map.component';\n\nexport interface MapRadiusData {\n    message: string;\n    radius: number;\n    fill: string;\n    stroke: string;\n    last_seen?: number;\n    zoom: Observable<number>;\n}\n\n@Component({\n    selector: '[map-radius]',\n    template: `\n        <ng-container *ngIf=\"show && radius\" (window:resize)=\"updateRadius()\">\n            <div\n                class=\"center border-4 rounded-full border-dashed\"\n                [style.border-color]=\"stroke\"\n                [style.background-color]=\"fill + '40'\"\n                [style.width]=\"radius * zoom + 'px'\"\n                [style.height]=\"radius * zoom + 'px'\"\n            ></div>\n            <div\n                *ngIf=\"message && show_message\"\n                name=\"message\"\n                [style.top]=\"'-' + (radius / 2) * zoom + 'px'\"\n                class=\"p-2 m-2 rounded bg-white text-gray-700 shadow absolute top-0 whitespace-no-wrap flex flex-col\"\n            >\n                {{ message }}\n                <span *ngIf=\"last_seen\" class=\"text-xs\">\n                    Last updated: {{ last_seen_at }}\n                </span>\n            </div>\n        </ng-container>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                height: 100%;\n                width: 100%;\n            }\n\n            [name='message'] {\n                transform: translate(-50%, -120%);\n            }\n\n            div {\n                animation: fade-in-top 1s;\n            }\n\n            @keyframes fade-in-top {\n                0% {\n                    opacity: 0;\n                    transform: translate(-50%, -220%);\n                }\n                100% {\n                    opacity: 1;\n                    transform: translate(-50%, -120%);\n                }\n            }\n        `,\n    ],\n})\nexport class MapRadiusComponent implements OnInit {\n    public zoom = 1;\n    /** Size of the area marked by this component */\n    public radius = this._details.radius || 10;\n    /** Message to display above the pin */\n    public readonly message = this._details.message;\n    /** Fill colour for the pin SVG */\n    public readonly fill = this._details.fill || '#e53935';\n    /** Stroke colour for the pin SVG */\n    public readonly stroke = this._details.stroke || '#e53935';\n\n    public readonly last_seen: number = this._details.last_seen || 0;\n\n    public get last_seen_at() {\n        return formatDistanceToNow(this.last_seen * 1000) + ' ago';\n    }\n\n    public show: boolean;\n    public show_message: boolean;\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: MapRadiusData,\n        private _el: ElementRef<HTMLElement>\n    ) {\n        this._details.zoom.subscribe((v) =>\n            Math.max(0.5, (this.zoom = v || 1))\n        );\n    }\n\n    public ngOnInit() {\n        setTimeout(() => (this.show = true), 300);\n        setTimeout(() => (this.show_message = true), 1000);\n    }\n\n    public ngAfterViewInit() {\n        this.updateRadius();\n    }\n\n    public updateRadius() {\n        const box = this._el.nativeElement.getBoundingClientRect();\n        if (!box.width) return setTimeout(() => this.updateRadius(), 300);\n        this.radius = Math.max(\n            64,\n            (this._details.radius || 10) * (box.width || 10)\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationLink } from '@placeos/common';\n\n@Component({\n    selector: 'status-overlay',\n    template: `\n        <div\n            status-overlay\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50 text-white\"\n        >\n            <ng-container *ngIf=\"!loading; else load_state\">\n                <div\n                    class=\"text-4xl rounded-full bg-white mb-4\"\n                    [class.text-success]=\"!error\"\n                    [class.text-error]=\"error\"\n                >\n                    <app-icon>{{ error ? 'close' : 'done' }}</app-icon>\n                </div>\n                <div class=\"text-center text-lg mb-4\">\n                    <ng-container *ngIf=\"!error; else error_msg\">\n                        <ng-content></ng-content>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <a\n                        button\n                        mat-button\n                        class=\"w-32\"\n                        *ngFor=\"let link of links\"\n                        [routerLink]=\"[link.route]\"\n                    >\n                        {{ link.name }}\n                    </a>\n                </div>\n            </ng-container>\n        </div>\n        <ng-template #error_msg\n            ><p error>{{ error }}</p></ng-template\n        >\n        <ng-template #load_state>\n            <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n            <p loading class=\"text-center text-lg\">{{ loading }}</p>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class StatusOverlayComponent {\n    /** Whether overlay is loading */\n    @Input() public loading: string = '';\n    /** Details about any errors that have occurred */\n    @Input() public error: string = '';\n    /** Links to display on success */\n    @Input() public links: ApplicationLink[] = [];\n}\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n    ApplicationIcon,\n    BaseClass,\n    SettingsService,\n} from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-login',\n    template: `\n        <div class=\"fixed inset-0 overflow-auto\">\n            <form\n                class=\"flex flex-col items-center overflow-hidden mx-auto my-4 bg-white rounded shadow p-4\"\n            >\n                <div\n                    class=\"flex items-center justify-center\"\n                    [style.background-color]=\"logo?.background\"\n                >\n                    <i *ngIf=\"logo?.type === 'icon'\" [class]=\"logo.class\">\n                        {{ logo.content }}\n                    </i>\n                    <img\n                        *ngIf=\"logo?.type === 'img'\"\n                        [src]=\"logo.src | safe: 'resource'\"\n                    />\n                </div>\n                <div class=\"w-full relative h-1/3 flex-1\">\n                    <ng-container *ngIf=\"!loading; else loading_state\">\n                        <div class=\"flex flex-col\">\n                            <label\n                                for=\"username\"\n                                [class.focused]=\"\n                                    username || focus === 'username'\n                                \"\n                                [class.in-focus]=\"focus === 'username'\"\n                            >\n                                Username\n                            </label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    #username\n                                    formControlName=\"username\"\n                                    (keyup.enter)=\"toPassword()\"\n                                />\n                            </mat-form-field>\n                        </div>\n                        <div class=\"flex flex-col\">\n                            <label for=\"password\">Password</label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    #pass_field\n                                    formControlName=\"password\"\n                                    (keyup.enter)=\"login()\"\n                                />\n                                <mat-error>Invalid username or password</mat-error>\n                            </mat-form-field>\n                        </div>\n                    </ng-container>\n                </div>\n                <div class=\"flex items-center justify-center w-full\" *ngIf=\"!loading\">\n                    <button mat-button color=\"primary\" (click)=\"login()\">\n                        Login\n                    </button>\n                </div>\n            </form>\n        </div>\n        <ng-template #loading_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"64\"></mat-spinner>\n                <p>Checking user credentials...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                background-color: #f0f0f0;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='64' height='64' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M8 16c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm0-2c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6zm33.414-6l5.95-5.95L45.95.636 40 6.586 34.05.636 32.636 2.05 38.586 8l-5.95 5.95 1.414 1.414L40 9.414l5.95 5.95 1.414-1.414L41.414 8zM40 48c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm0-2c3.314 0 6-2.686 6-6s-2.686-6-6-6-6 2.686-6 6 2.686 6 6 6zM9.414 40l5.95-5.95-1.414-1.414L8 38.586l-5.95-5.95L.636 34.05 6.586 40l-5.95 5.95 1.414 1.414L8 41.414l5.95 5.95 1.414-1.414L9.414 40z' fill='%23ad1457' fill-opacity='0.2' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n\n            form {\n                width: 20rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            img {\n                max-height: 3.75rem;\n                max-width: 15rem;\n            }\n        `,\n    ],\n})\nexport class LoginComponent implements OnInit {\n    /** Whether the user credentials are being checked */\n    public loading: boolean;\n\n    public readonly form = new FormGroup({\n        username: new FormControl('', [Validators.required]),\n        password: new FormControl('', [Validators.required]),\n    });\n\n    /** Password field element */\n    @ViewChild('pass_field', { static: true })\n    private pwd_field: ElementRef<HTMLInputElement>;\n\n    /** Logo of the application organisation */\n    public get logo(): ApplicationIcon {\n        return this._settings.get('app.logo_dark') || { type: 'icon' };\n    }\n\n    constructor(private _settings: SettingsService) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._settings.initialised.pipe(first((_) => _)).toPromise();\n        this.loading = false;\n    }\n\n    /** Focus on the password field */\n    public toPassword() {\n        if (this.pwd_field && this.pwd_field.nativeElement) {\n            this.pwd_field.nativeElement.focus();\n        }\n    }\n\n    /** Perform user login */\n    public login() {\n        this.loading = true;\n        // this._users.login({\n        //     username: this.username,\n        //     password: this.password\n        // }, { form: true }).then(() => {\n        //     this.loading = false;\n        // }, () => {\n        //     this.loading = false;\n        //     this.error = true;\n        // });\n        this.form.setErrors({ password: 'Invalid username or password' });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-unauthorised',\n    template: `\n        <div\n            class=\"unauthorised rounded m-4 text-center bg-white text-black border border-gray-400 p-4 shadow\"\n        >\n            <h1 class=\"text-4xl\">403</h1>\n            <h3 class=\"text-2xl\" i18n=\"@@forbiddenLabel\">Access forbidden.</h3>\n            <p class=\"py-4\" i18n=\"@@invalidPermissionLabel\">\n                You do not have permission to view this page and your access\n                attempt has been recorded.\n            </p>\n            <p i18n=\"@@contactAdminLabel\">\n                Contact your Administrator if you feel that you should have\n                access.\n            </p>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n\n            .unauthorised {\n                width: 28em;\n                max-width: calc(100vw - 1rem);\n            }\n\n            @media (prefers-color-scheme: dark) {\n                .unauthorised {\n                    background-color: #262626;\n                    color: #fff;\n                }\n            }\n        `,\n    ],\n})\nexport class UnauthorisedComponent {}\n","import { Injectable, Optional } from '@angular/core';\nimport {\n    CanActivate,\n    CanLoad,\n    Route,\n    UrlSegment,\n    ActivatedRouteSnapshot,\n    RouterStateSnapshot,\n    UrlTree,\n    Router,\n} from '@angular/router';\nimport { onlineState } from '@placeos/ts-client';\nimport { current_user } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nimport { StaffUser } from '../../../users/src/lib/user.class';\n\nexport abstract class PLACEOS_APP_ACCESS {\n    public readonly group: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthorisedUserGuard implements CanActivate, CanLoad {\n    constructor(\n        private _router: Router,\n        @Optional() private _access: PLACEOS_APP_ACCESS\n    ) {}\n\n    public async canActivate(\n        next?: ActivatedRouteSnapshot,\n        state?: RouterStateSnapshot\n    ): Promise<boolean | UrlTree> {\n        return this.checkUser();\n    }\n\n    public async canLoad(\n        route?: Route,\n        segments?: UrlSegment[]\n    ): Promise<boolean> {\n        return this.checkUser();\n    }\n\n    private async checkUser() {\n        await onlineState()\n            .pipe(first((_) => _))\n            .toPromise();\n        const user: StaffUser = await current_user\n            .pipe(first((_) => !!_))\n            .toPromise();\n        const can_activate = !!(\n            user &&\n            (!this._access?.group || user.groups.includes(this._access.group))\n        );\n        if (!can_activate) {\n            this._router.navigate(['/unauthorised']);\n        }\n        return !!can_activate;\n    }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { BindingDirective } from './binding.directive';\nimport { ActionIconComponent } from './action-icon.component';\nimport { IconComponent } from './icon.component';\nimport { PopoutMenuComponent } from './popout-menu.component';\nimport { UserAvatarComponent } from './user-avatar.component';\n\nimport { ConfirmModalComponent } from './confirm-modal.component';\nimport {\n    InteractiveMapComponent,\n    MAP_FEATURE_DATA,\n} from './interactive-map.component';\nimport { MapPinComponent } from './map-pin.component';\nimport { MapRadiusComponent } from './map-radius.component';\nimport { StatusOverlayComponent } from './status-overlay.component';\nimport { FixedPipe } from './fixed.pipe';\nimport { SafePipe } from './safe.pipe';\nimport { SanitizePipe } from './sanitise.pipe';\nimport { CustomTableComponent } from './custom-table.component';\nimport { CustomTooltipComponent } from './custom-tooltip.component';\nimport { VirtualKeyboardComponent } from './virtual-keyboard.component';\nimport { GlobalLoadingComponent } from './global-loading.component';\nimport { MatSortModule } from '@angular/material/sort';\n\nexport * from './action-icon.component';\nexport * from './binding.directive';\nexport * from './confirm-modal.component';\nexport * from './icon.component';\nexport * from './login.component';\nexport * from './popout-menu.component';\nexport * from './unauthorised.component';\nexport * from './user-avatar.component';\nexport * from './interactive-map.component';\nexport * from './map-pin.component';\nexport * from './map-radius.component';\nexport * from './misconfigured.component';\nexport * from './status-overlay.component';\nexport * from './custom-table.component';\nexport * from './custom-tooltip.component';\nexport * from './fixed.pipe';\nexport * from './safe.pipe';\nexport * from './sanitise.pipe';\nexport * from './virtual-keyboard.component';\nexport * from './global-loading.component';\n\nexport * from './authorised-admin.guard';\nexport * from './authorised-user.guard';\n\nconst MAT_MODULES: any[] = [\n    MatAutocompleteModule,\n    MatMenuModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatDatepickerModule,\n    MatInputModule,\n    ClipboardModule,\n    MatProgressSpinnerModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    CdkTableModule,\n    PortalModule,\n    MatSortModule,\n];\n\nconst COMPONENTS: Type<any>[] = [\n    ActionIconComponent,\n    IconComponent,\n    PopoutMenuComponent,\n    UserAvatarComponent,\n\n    ConfirmModalComponent,\n    InteractiveMapComponent,\n    MapPinComponent,\n    MapRadiusComponent,\n    StatusOverlayComponent,\n    CustomTableComponent,\n    CustomTooltipComponent,\n    VirtualKeyboardComponent,\n    GlobalLoadingComponent,\n\n    FixedPipe,\n    SafePipe,\n    SanitizePipe,\n];\n\nconst DIRECTIVES: Type<any>[] = [BindingDirective];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...DIRECTIVES],\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...MAT_MODULES],\n    providers: [\n        { provide: MAT_DATE_LOCALE, useValue: 'en-GB' },\n        { provide: MAP_FEATURE_DATA, useValue: {} },\n    ],\n    exports: [...COMPONENTS, ...DIRECTIVES, ...MAT_MODULES],\n})\nexport class ComponentsModule {}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'action-icon',\n    template: `\n        <button\n            mat-icon-button\n            class=\"relative flex items-center justify-center h-8 w-8\"\n            [class.success]=\"state === 'success'\"\n            [disabled]=\"loading || disabled\"\n        >\n            <app-icon root [className]=\"className\" [icon]=\"icon\">\n                {{ content }}\n                <ng-content></ng-content>\n            </app-icon>\n            <div [class]=\"'state center ' + state\" *ngIf=\"!loading && state\">\n                <app-icon>\n                    {{ state === 'success' ? 'done' : 'close' }}\n                </app-icon>\n            </div>\n            <div class=\"loader center\" *ngIf=\"loading\">\n                <mat-spinner [diameter]=\"16\"></mat-spinner>\n            </div>\n        </button>\n    `,\n    styles: [\n        `\n            .action-icon.fade > app-icon {\n                opacity: 0.35;\n            }\n\n            [center] {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n\n            .success {\n                pointer-events: none;\n            }\n\n            .success app-icon[root] {\n                opacity: 0.2;\n            }\n\n            .state.success {\n                color: #388e3c;\n            }\n\n            .state.error {\n                color: #e53935;\n            }\n        `,\n    ],\n})\nexport class ActionIconComponent {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Icon to display */\n    @Input() public className: string = 'material-icons';\n    /** Icon to display */\n    @Input() public content: string;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** Whether action is being processed */\n    @Input() public disabled: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon, DialogEvent } from 'libs/common/src/lib/types';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    confirm_text?: string;\n    /** Text displaed on the confirmation button */\n    cancel_text?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)',\n};\n\n@Component({\n    selector: 'confirm-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ title }}</h3>\n        </header>\n        <main\n            *ngIf=\"!loading; else load_state\"\n            class=\"flex flex-col items-center space-y-2 p-4\"\n        >\n            <app-icon [icon]=\"icon\" class=\"text-5xl\"></app-icon>\n            <p\n                content\n                class=\"text-center text-sm w-[22rem]\"\n                [innerHTML]=\"content\"\n            ></p>\n        </main>\n        <footer\n            class=\"flex items-center justify-center p-2 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse w-32\" mat-dialog-close>\n                {{ cancel_text }}\n            </button>\n            <button mat-button name=\"accept\" class=\"w-32\" (click)=\"onConfirm()\">\n                {{ confirm_text }}\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <main loading>\n                <div\n                    class=\"w-full h-48 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner diameter=\"32\"></mat-spinner>\n                    <p>{{ loading }}</p>\n                </div>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ConfirmModalComponent {\n    /** Loading state */\n    public loading: string;\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Title of the confirm modal */\n    public readonly title: string = this._data.title || 'Confirm';\n    /** Body of the confirm modal */\n    public readonly content: string = this._data.content || 'Are you sure?';\n    /** Display text on the confirm button */\n    public readonly confirm_text: string = this._data.confirm_text || 'Accept';\n    /** Display text on the cancel button */\n    public readonly cancel_text: string = this._data.cancel_text || 'Cancel';\n    /** Display icon properties */\n    public readonly icon: ApplicationIcon = this._data.icon || {\n        class: 'material-icons',\n        content: 'done',\n    };\n    /** Prevent user from closing the modal */\n    public readonly disableClose = () => (this._dialog_ref.disableClose = true);\n    /** Allow the user to close the modal */\n    public readonly enableClose = () => (this._dialog_ref.disableClose = false);\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {}\n\n    /** User confirmation of the content of the modal */\n    public onConfirm() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n} from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { BaseClass, HashMap } from '@placeos/common';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'custom-table',\n    template: `\n        <cdk-table [dataSource]=\"data_source\" matSort>\n            <ng-container *ngFor=\"let column of columns; let i = index\">\n                <ng-container [cdkColumnDef]=\"column\">\n                    <div\n                        cdk-header-cell\n                        class=\"capitalize p-2\"\n                        [style.width]=\"(column_size[i] || '8') + 'em'\"\n                        [style.flex]=\"column_size[i] === 'flex' ? '1' : ''\"\n                        *cdkHeaderCellDef\n                        mat-sort-header\n                    >\n                        {{ display_column[i] || column }}\n                    </div>\n                    <div\n                        cdk-cell\n                        class=\"p-2 truncate flex items-center\"\n                        [style.width]=\"(column_size[i] || '8') + 'em'\"\n                        [style.flex]=\"column_size[i] === 'flex' ? '1' : ''\"\n                        *cdkCellDef=\"let row\"\n                        [title]=\"row[column]\"\n                    >\n                        <ng-container\n                            *ngIf=\"!template[column]; else cell_outlet\"\n                            >{{ row[column] }}</ng-container\n                        >\n                        <ng-template #cell_outlet>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    template[column];\n                                    context: {\n                                        data: row[column],\n                                        row: row,\n                                        key: column\n                                    }\n                                \"\n                            ></ng-container>\n                        </ng-template>\n                    </div>\n                </ng-container>\n            </ng-container>\n\n            <cdk-header-row\n                class=\"flex items-center bg-white sticky top-0 z-10\"\n                *cdkHeaderRowDef=\"columns\"\n            ></cdk-header-row>\n            <cdk-row\n                row\n                class=\"flex z-0 relative\"\n                *cdkRowDef=\"let row; columns: columns\"\n            ></cdk-row>\n            <ng-template cdkNoDataRow>\n                <p class=\"w-full p-4 text-center\">\n                    {{ empty || 'No data to display' }}\n                </p>\n            </ng-template>\n        </cdk-table>\n        <div footer [hidden]=\"!pagination\">\n            <mat-paginator\n                [pageSize]=\"page_size\"\n                [hidePageSize]=\"true\"\n                [showFirstLastButtons]=\"true\"\n            >\n            </mat-paginator>\n        </div>\n    `,\n    styles: [\n        `\n            cdk-header-row {\n                position: sticky;\n                border-bottom: 1px solid #999;\n                font-weight: 500;\n                text-transform: capitalize;\n                min-height: 3rem;\n            }\n\n            cdk-row {\n                border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n            }\n\n            cdk-row:hover {\n                background-color: #f0f0f0;\n            }\n        `,\n    ],\n})\nexport class CustomTableComponent<T extends {} = any>\n    extends BaseClass\n    implements AfterViewInit, OnChanges {\n    /** Data source to render in the table */\n    @Input() public dataSource: T[] | Observable<T[]>;\n    /** Whether table should use pagination */\n    @Input() public pagination = false;\n    /** Number of items to display on pagination pages */\n    @Input() public page_size = 7;\n    /** Filter string to apply to table listings */\n    @Input() public filter: string;\n    /** Values to display for column headers */\n    @Input() public display_column: string[];\n    /** List of columns to display in the table */\n    @Input() public columns: string[];\n    /** Size of the columns in em or flex for a flexible size */\n    @Input() public column_size: string[] = [];\n    /** Displayed value when the table is empty */\n    @Input() public empty: string;\n    /** Displayed value when the table is empty */\n    @Input() public template: HashMap<TemplateRef<any>> = {};\n\n    public readonly data_source: MatTableDataSource<T> = new MatTableDataSource(\n        []\n    );\n\n    @ViewChild(MatPaginator) private _paginator: MatPaginator;\n    @ViewChild(MatSort) private _sort: MatSort;\n\n    public ngAfterViewInit() {\n        this.data_source.sort = this._sort;\n        this.data_source.paginator = this.pagination ? this._paginator : null;\n        this.data_source.filterPredicate = (i: any, s) => {\n            for (const key in i) {\n                if (\n                    typeof i[key] === 'string' &&\n                    i[key].toLowerCase().includes(s.toLowerCase())\n                ) {\n                    return true;\n                } else if (i[key] === s) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.dataSource && this.dataSource) {\n            if (this.dataSource instanceof Observable) {\n                this.subscription(\n                    'data',\n                    this.dataSource.subscribe(\n                        (data) => (this.data_source.data = data)\n                    )\n                );\n            } else {\n                this.data_source.data = this.dataSource;\n            }\n        }\n        if (changes.pagination) {\n            this.data_source.paginator = this.pagination\n                ? this._paginator\n                : null;\n        }\n        if (changes.filter) {\n            this.data_source.filter = (this.filter || '').trim().toLowerCase();\n        }\n        if (changes.columns && this.columns) {\n            this.display_column = this.columns.map(\n                (_, idx) => this.display_column[idx] || _.split('_').join(' ')\n            );\n        }\n        if (!this.column_size) {\n            this.column_size = [];\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpacesService } from 'libs/spaces/src/lib/spaces.service';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'global-loading',\n    template: `\n        <div\n            *ngIf=\"loading\"\n            class=\"fixed inset-0 flex items-center justify-center pointer-events-auto bg-white\"\n        >\n            <mat-spinner [diameter]=\"64\"></mat-spinner>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: none;\n            }\n\n            :host > div {\n                z-index: 9999;\n                background-image: url(\"data:image/svg+xml,%3Csvg width='36' height='36' viewBox='0 0 36 36' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M36 0H0v36h36V0zM15.126 2H2v13.126c.367.094.714.24 1.032.428L15.554 3.032c-.188-.318-.334-.665-.428-1.032zM18 4.874V18H4.874c-.094-.367-.24-.714-.428-1.032L16.968 4.446c.318.188.665.334 1.032.428zM22.874 2h11.712L20 16.586V4.874c1.406-.362 2.512-1.468 2.874-2.874zm10.252 18H20v13.126c.367.094.714.24 1.032.428l12.522-12.522c-.188-.318-.334-.665-.428-1.032zM36 22.874V36H22.874c-.094-.367-.24-.714-.428-1.032l12.522-12.522c.318.188.665.334 1.032.428zm0-7.748V3.414L21.414 18h11.712c.362-1.406 1.468-2.512 2.874-2.874zm-18 18V21.414L3.414 36h11.712c.362-1.406 1.468-2.512 2.874-2.874zM4.874 20h11.712L2 34.586V22.874c1.406-.362 2.512-1.468 2.874-2.874z' fill='%23000000' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\");\n            }\n        `,\n    ],\n})\nexport class GlobalLoadingComponent implements OnInit {\n    public loading: boolean;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService\n    ) {}\n\n    public async ngOnInit() {\n        this.loading = true;\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        setTimeout(() => (this.loading = false), 300);\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '@placeos/common';\n\n@Component({\n    selector: 'app-icon',\n    template: `\n        <div class=\"app-icon\">\n            <i *ngIf=\"!icon || icon.type !== 'img'\" [class]=\"icon?.class || className\">\n                {{ icon?.content }}\n                <ng-content></ng-content>\n            </i>\n            <img *ngIf=\"icon && icon.type === 'img'\" [src]=\"icon.src | safe: 'resource'\" />\n        </div>\n    `,\n    styles: [\n        `\n            .app-icon {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                height: 1.25em;\n                width: 1.25em;\n            }\n\n            i {\n                font-size: 1em;\n            }\n\n            img {\n                height: 1em;\n                width: 1em;\n            }\n        `,\n    ],\n})\nexport class IconComponent {\n    @Input() public className: string = 'material-icons';\n    /** Icon details */\n    @Input() public icon: ApplicationIcon;\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostListener,\n    InjectionToken,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    QueryList,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nimport {\n    applyGlobalStyles,\n    createViewer,\n    getViewer,\n    Point,\n    Viewer,\n    removeViewer,\n    updateViewer,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n    listenToViewerChanges,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport const MAP_FEATURE_DATA = new InjectionToken('Data for Map Features');\n\n@Component({\n    selector: `i-map,interactive-map`,\n    template: `\n        <div #outlet tabindex=\"0\" role=\"map\" class=\"absolute inset-0\"></div>\n        <mat-spinner\n            *ngIf=\"!viewer || loading\"\n            class=\"absolute\"\n            [diameter]=\"48\"\n        ></mat-spinner>\n        <div hidden *ngIf=\"injectors?.length\">\n            <ng-container\n                *ngFor=\"\n                    let element of features;\n                    let i = index;\n                    trackBy: element?.location\n                \"\n            >\n                <div *ngIf=\"element\">\n                    <div\n                        #feature\n                        class=\"pointer-events-none\"\n                        [attr.el-id]=\"element.location\"\n                        [attr.view-id]=\"viewer\"\n                        [ngSwitch]=\"type(element.content)\"\n                    >\n                        <ng-container *ngSwitchCase=\"'component'\">\n                            <ng-container\n                                *ngComponentOutlet=\"\n                                    element.content;\n                                    injector: injectors[i]\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'html'\">\n                            <div [innerHTML]=\"element.content | sanitize\"></div>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    element.content;\n                                    context: element.data\n                                \"\n                            ></ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n\n            mat-spinner {\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            }\n        `,\n    ],\n})\nexport class InteractiveMapComponent\n    extends BaseClass\n    implements AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /** URL to the SVG file */\n    @Input() public src: string;\n    /** Custom CSS styles to apply to the SVG file */\n    @Input() public styles: ViewerStyles;\n    /** Zoom level to apply to the SVG */\n    @Input() public zoom = 1;\n    /** Zoom level to apply to the SVG */\n    @Input() public center: Point = { x: 0.5, y: 0.5 };\n    /** List of features to renderer over the SVG */\n    @Input() public features: ViewerFeature[];\n    /** List of labels to renderer over the SVG */\n    @Input() public labels: ViewerLabel[];\n    /** List of available user actions for the SVG */\n    @Input() public actions: ViewAction[];\n\n    @Input() public options: any;\n\n    @Input() public focus: string;\n\n    public loading: boolean;\n\n    public injectors: Injector[] = [];\n\n    /** ID of the active SVG Viewer */\n    public viewer: string;\n    /** Observable for changes on the SVG viewer */\n    private _on_changes: BehaviorSubject<Viewer> = new BehaviorSubject(null);\n\n    @ViewChild('outlet') private _outlet_el: ElementRef<HTMLDivElement>;\n    @ViewChildren('feature') private _feature_list: QueryList<\n        ElementRef<HTMLDivElement>\n    >;\n\n    @HostListener('window:resize') public onResize() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n        this.updateDisplay();\n    }\n\n    public type(\n        content: string | TemplateRef<any> | Type<any>\n    ): 'html' | 'template' | 'component' {\n        return typeof content === 'string'\n            ? 'html'\n            : content instanceof TemplateRef\n            ? 'template'\n            : 'component';\n    }\n\n    public get feature_list() {\n        return (this.features || [])\n            .map((f, idx) => ({\n                ...f,\n                content: this._feature_list.toArray()[idx]?.nativeElement,\n            }))\n            .filter((f) => f.content);\n    }\n\n    constructor(private _injector: Injector) {\n        super();\n    }\n\n    public ngOnInit() {\n        applyGlobalStyles();\n    }\n\n    public ngOnDestroy(): void {\n        if (this.viewer) {\n            removeViewer(this.viewer);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.src && this.src) {\n            this.createView();\n        }\n        if (changes.features) {\n            this.injectors = (this.features || []).map((f: any) =>\n                Injector.create({\n                    providers: [\n                        {\n                            provide: MAP_FEATURE_DATA,\n                            useValue: {\n                                ...f.data,\n                                zoom: this._on_changes.pipe(map((_) => _.zoom)),\n                                position: this._on_changes.pipe(\n                                    map((_) => _.center)\n                                ),\n                            },\n                        },\n                    ],\n                    parent: this._injector,\n                })\n            );\n        }\n        if (this.viewer) {\n            if (changes.focus && this.focus) {\n                this.focusOn(this.focus);\n            } else if (changes.zoom || changes.center) {\n                this.updateDisplay();\n            }\n            if (\n                changes.styles ||\n                changes.features ||\n                changes.labels ||\n                changes.actions\n            ) {\n                this.timeout('update_view', () => this.updateView(), 100);\n            }\n        }\n    }\n\n    public ngAfterViewInit() {\n        this.createView();\n    }\n\n    /** Update overlays, styles and actions of viewer */\n    private updateView() {\n        if (!getViewer(this.viewer) || this.loading) {\n            return this.timeout('update_view', () => this.updateView());\n        }\n        try {\n            updateViewer(this.viewer, {\n                styles: this.styles,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n        } catch (e) {}\n    }\n\n    /** Update zoom and center position of viewer */\n    private updateDisplay() {\n        updateViewer(this.viewer, {\n            zoom: this.zoom,\n            desired_zoom: this.zoom,\n            center: this.center,\n            desired_center: this.center,\n            options: this.options,\n        });\n    }\n\n    private async createView() {\n        if (this.src && this._outlet_el?.nativeElement && !this.loading) {\n            this.loading = true;\n            if (this.viewer) {\n                removeViewer(this.viewer);\n            }\n            this.viewer = await createViewer({\n                element: this._outlet_el?.nativeElement,\n                url: this.src,\n                styles: this.styles,\n                zoom: this.zoom,\n                desired_zoom: this.zoom,\n                center: this.center,\n                features: this.feature_list,\n                labels: this.labels,\n                actions: this.actions,\n                options: this.options,\n            });\n            this.loading = false;\n            this.subscription(\n                'view_changes',\n                listenToViewerChanges(this.viewer)?.subscribe((v) =>\n                    this._on_changes.next(v)\n                )\n            );\n        } else if (\n            (this.src && !this._outlet_el?.nativeElement) ||\n            this.loading\n        ) {\n            this.timeout('create_view', () => this.createView());\n        }\n    }\n\n    private focusOn(id: string) {\n        const viewer: Viewer = getViewer(this.viewer);\n        if (!viewer) return;\n        const rect = viewer.mappings[id];\n        if (!rect) return;\n        this.center = {\n            x: 1 - (rect.x + rect.w / 2),\n            y: 1 - (rect.y + rect.h / 2),\n        };\n        this.updateDisplay();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    /**\n     * Sanitizes the string allowing it to be injected into a template\n     * @param value String to sanitize\n     * @param type Type of value to sanitise. `resource`, `url`, `script`, `style` or `html`\n     */\n    public transform(\n        value: string,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            case 'url':\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'script':\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'style':\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            default:\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle } from '@angular/platform-browser';\n\nenum SecurityContext {\n    NONE = 0,\n    HTML = 1,\n    STYLE = 2,\n    SCRIPT = 3,\n    URL = 4,\n    RESOURCE_URL = 5\n}\n\n@Pipe({\n    name: 'sanitize'\n})\nexport class SanitizePipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) {}\n\n    transform(\n        value: any,\n        type: 'resource' | 'url' | 'script' | 'style' | 'html' = 'html'\n    ): SafeHtml | SafeResourceUrl | SafeScript | SafeStyle {\n        switch (type) {\n            case 'resource':\n                return this.sanitizer.sanitize(SecurityContext.RESOURCE_URL, value);\n            case 'url':\n                return this.sanitizer.sanitize(SecurityContext.URL, value);\n            case 'script':\n                return this.sanitizer.sanitize(SecurityContext.SCRIPT, value);\n            case 'style':\n                return this.sanitizer.sanitize(SecurityContext.STYLE, value);\n            default:\n                return this.sanitizer.sanitize(SecurityContext.HTML, value);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { User } from '../../../users/src/lib/user.class';\n\n@Component({\n    selector: 'a-user-avatar',\n    template: `\n        <div\n            class=\"flex items-center justify-center rounded-full overflow-hidden border-2 border-white\"\n            *ngIf=\"user\"\n            [attr.user-id]=\"user.id\"\n        >\n            <div\n                initials\n                class=\"text-black text-opacity-50 uppercase\"\n                *ngIf=\"!user.photo; else image_state\"\n            >\n                {{ initials }}\n            </div>\n        </div>\n        <ng-template #image_state>\n            <img class=\"h-full w-full\" [src]=\"user.photo | safe: 'resource'\" />\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host > div {\n                height: 2.5em;\n                width: 2.5em;\n                background-color: #ccc;\n                overflow: hidden;\n                border: 2px solid white;\n            }\n\n            .initials {\n                font-size: 1em;\n            }\n        `,\n    ],\n})\nexport class UserAvatarComponent {\n    /** User to display avatar for */\n    @Input() public user: User;\n\n    public get initials(): string {\n        if (!this.user) return 'NA';\n        const parts = this.user.name\n            .replace(/[()[\\]\\-+=\\\\/]+/gi, '')\n            .split(' ');\n        return parts.length > 1\n            ? `${parts[0][0]}${parts[parts.length - 1][0]}`\n            : this.user.name.slice(0, 2);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Input,\n    OnDestroy,\n    ViewChild,\n} from '@angular/core';\nimport { BaseClass } from '@placeos/common';\n\nconst DEFAULT_KEYS = [\n    '0123456789'.split(''),\n    'qwertyuiop'.split(''),\n    'asdfghjkl'.split(''),\n    'zxcvbnm'.split(''),\n    ['{caps}', '{space}', '{backspace}'],\n];\n\n@Component({\n    selector: 'input[keyboard],textarea[keyboard]',\n    template: `\n        <ng-content></ng-content>\n        <ng-template cdk-portal>\n            <div\n                keyboard\n                class=\"w-screen flex flex-col space-y-4 bg-gray-200 p-2 border-t border-gray-400\"\n            >\n                <div\n                    row\n                    class=\"flex items-center justify-center space-x-2\"\n                    *ngFor=\"let row of keyset\"\n                >\n                    <ng-container *ngFor=\"let key of row\">\n                        <div\n                            [attr.key]=\"key\"\n                            tabindex=\"0\"\n                            class=\"rounded-xl p-2 border border-gray-300 relative cursor-pointer bg-white\"\n                            [class.special]=\"key[0] === '{' && key.length > 1\"\n                            [class.space]=\"key === '{space}'\"\n                            (focus)=\"focusInput()\"\n                            (click)=\"handleKeyPress(key)\"\n                        >\n                            {{\n                                key === '{space}'\n                                    ? 'Space'\n                                    : key === '{caps}'\n                                    ? 'Caps Lock'\n                                    : key === '{backspace}'\n                                    ? 'Backspace'\n                                    : key\n                            }}\n                            <div\n                                *ngIf=\"key === '{caps}'\"\n                                dot\n                                class=\"absolute top-2 right-2 h-2 w-2 rounded-full bg-gray-300\"\n                                [class.bg-success]=\"state === 'shift'\"\n                            ></div>\n                        </div>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [key] {\n                height: 3.5rem;\n                width: 4rem;\n                transition: box-shadow 200ms, top 200ms;\n                box-shadow: 0 4px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key].special {\n                width: 10rem;\n            }\n\n            [key].space {\n                flex: 1;\n                min-width: 10rem;\n                max-width: 25rem;\n            }\n\n            [key]:hover {\n                top: 2px;\n                box-shadow: 0 2px 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n\n            [key]:active {\n                top: 4px;\n                box-shadow: 0 0 0 0.04px rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class VirtualKeyboardComponent extends BaseClass implements OnDestroy {\n    /** Whether virtual keyboard should activate */\n    public static enabled: boolean;\n    /** List of rows of keys to display on the keyboard */\n    @Input() public keyset = DEFAULT_KEYS;\n    /** Current state of the displayed keyset */\n    public state: 'normal' | 'caps' | 'shift' = 'normal';\n    /** References to the overlay containing the keyboard */\n    private _overlay_ref: OverlayRef = null;\n    /** Portal with the keyboard contents */\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n\n    @HostListener('focus') public onFocus = () => {\n        if (!VirtualKeyboardComponent.enabled) return;\n        this.open();\n        this.clearTimeout('blur');\n    };\n    @HostListener('blur') public onBlur = () =>\n        this.timeout('blur', () => this.close());\n\n    constructor(\n        private _element: ElementRef<HTMLInputElement | HTMLTextAreaElement>,\n        private _overlay: Overlay\n    ) {\n        super();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.close();\n    }\n\n    public focusInput() {\n        this._element?.nativeElement?.blur();\n        this._element?.nativeElement?.focus();\n    }\n\n    public open() {\n        if (this._overlay_ref) return;\n        if (!this._portal) return;\n        this._overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .global()\n                .bottom()\n                .centerHorizontally(),\n        });\n        this._overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this._overlay_ref) {\n            this._overlay_ref.dispose();\n            this._overlay_ref = null;\n        }\n    }\n\n    public handleKeyPress(key: string) {\n        let cursor_pos = this._element.nativeElement.selectionStart;\n        const str = this._element.nativeElement.value || '';\n        switch (key.toLowerCase()) {\n            case '{caps}':\n            case '{shift}':\n                this.state = 'shift';\n                break;\n            case '{backspace}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos - 1\n                )}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos = Math.max(0, cursor_pos - 1);\n                break;\n            case '{space}':\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${' '}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n                break;\n            default:\n                if (this.state === 'shift') this.state = 'normal';\n                this._element.nativeElement.value = `${str.substr(\n                    0,\n                    cursor_pos\n                )}${key}${str.substr(cursor_pos, str.length)}`;\n                cursor_pos += 1;\n        }\n        this._element.nativeElement.dispatchEvent(new InputEvent('input'));\n        this.updateKeyState();\n        this.timeout(\n            'focus',\n            () => {\n                this.focusInput();\n                this._element.nativeElement.selectionStart = cursor_pos;\n                this._element.nativeElement.selectionEnd = cursor_pos;\n            },\n            50\n        );\n    }\n\n    public updateKeyState() {\n        this.keyset = this.keyset.map((_) =>\n            _.map((k) =>\n                k.length > 1\n                    ? k\n                    : k[\n                          this.state !== 'normal'\n                              ? 'toUpperCase'\n                              : 'toLowerCase'\n                      ]()\n            )\n        );\n    }\n}\n","import { AbstractControl } from '@angular/forms';\nimport { addMinutes, isAfter, isBefore } from 'date-fns';\n\nexport const endInFuture = (control: AbstractControl) => {\n    if (\n        control.parent?.get('date') &&\n        isAfter(\n            new Date(),\n            addMinutes(control.parent.get('date').value, control.value)\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(\n    control: AbstractControl\n): { [key: string]: boolean } | null {\n    return control.value && isBefore(control.value, new Date())\n        ? { is_future: true }\n        : null;\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration, [endInFuture]),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.ext('visitor_type')),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(event.ext('needs_parking') || false),\n        system: new FormControl(event.system),\n    });\n    form.get('organiser').valueChanges.subscribe((o) =>\n        form.controls.host.setValue(o?.email)\n    );\n    form.get('resources').valueChanges.subscribe((l) =>\n        form.controls.system.setValue(l.length ? l[0] : null)\n    );\n    if (event.id) {\n        form.get('host').disable();\n        form.get('organiser').disable();\n    }\n    if (event.state === 'started') form.get('date').disable();\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport { BaseClass, getInvalidFields } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { getUnixTime } from 'date-fns';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { CalendarEvent } from './event.class';\nimport { saveEvent } from './events.fn';\nimport { generateEventForm } from './utilities';\n\nconst BOOKING_URLS = ['book/spaces', 'schedule/view'];\n\nexport type EventFlowView =\n    | 'form'\n    | 'find'\n    | 'catering'\n    | 'confirm'\n    | 'success';\n\nexport interface EventFlowOptions {\n    /** Calendar to associate event with */\n    calendar_id?: string;\n    /** List of features to filter spaces on */\n    features?: string[];\n    /** List of zones to filter spaces on */\n    zone_ids?: string[];\n    /** Minimum number of attendees to filter space on */\n    capacity?: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventFormService extends BaseClass {\n    private _view = new BehaviorSubject<EventFlowView>('form');\n    private _options = new BehaviorSubject<EventFlowOptions>({ zone_ids: [] });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: CalendarEvent = new CalendarEvent(\n        JSON.parse(sessionStorage.getItem('PLACEOS.last_booked_event') || '{}')\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n    public readonly available_spaces = combineLatest([\n        this._view,\n        this._options,\n        this._form,\n        this._org.initialised.pipe(filter((_) => _)),\n    ]).pipe(\n        filter(([view, _, form]) => view === 'find' && !!form),\n        switchMap(([_, options, form]) => {\n            this._loading.next('Retrieving available spaces...');\n            const start = form.get('date').value;\n            const end =\n                form.get('date').value + form.get('duration').value * 60 * 1000;\n            return querySpaceFreeBusy(\n                {\n                    period_start: getUnixTime(start),\n                    period_end: getUnixTime(end),\n                    zone_ids:\n                        options.zone_ids?.join(',') || this._org.building.id,\n                    features: options.features?.join(','),\n                    capacity: options.capacity,\n                },\n                this._org\n            );\n        }),\n        tap((_) => {\n            this._loading.next('');\n        }),\n        shareReplay(1)\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n    public get form() {\n        return this._form.getValue();\n    }\n    public get event() {\n        return this._event.getValue();\n    }\n\n    constructor(private _org: OrganisationService, private _router: Router) {\n        super();\n        this.available_spaces.subscribe();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((event: Event) => {\n                if (\n                    event instanceof NavigationEnd &&\n                    !BOOKING_URLS.some((_) => event.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n    }\n\n    public setView(value: EventFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<EventFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public newForm(event: CalendarEvent = new CalendarEvent()) {\n        this._form.next(generateEventForm(event));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._event.next(event);\n        this._options.next({});\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const event = this._event.getValue();\n        this._form\n            .getValue()\n            .patchValue({ ...(event || {}), ...(event?.extension_data || {}) });\n        this._options.next({});\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.event_form');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.event_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(sessionStorage.getItem('PLACEOS.event_form') || '{}'),\n        });\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for event';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const spaces = form.get('resources')?.value || [];\n        const space_list = spaces.length\n            ? await querySpaceFreeBusy({\n                  period_start: getUnixTime(form.get('date').value),\n                  period_end: getUnixTime(\n                      form.get('date').value +\n                          form.get('duration').value * 60 * 1000\n                  ),\n                  system_ids: spaces.map((_) => _.id).join(','),\n              }).toPromise()\n            : [];\n        if (space_list.length !== spaces.length)\n            throw `${\n                spaces.length - space_list.length\n            } space(s) are not available at the selected time`;\n        const result = await saveEvent(\n            new CalendarEvent(this._form.getValue().value)\n        ).toPromise();\n        this.clearForm();\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_event',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n}\n","import { HashMap, Identity, unique } from '@placeos/common';\nimport { PlaceSystem } from '@placeos/ts-client';\nimport {\n    add,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isBefore,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n} from 'date-fns';\nimport { CateringOrder } from 'libs/catering/src/lib/catering-order.class';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport { GuestUser, User } from 'libs/users/src/lib/user.class';\nimport {\n    EventExtensionData,\n    FileDetails,\n    RecurrenceDetails,\n} from './event.interfaces';\nimport { eventStatus } from './helpers';\n\nlet _default_user: Identity = { id: 'default', name: 'Default User' };\n\nexport function setDefaultCreator(user: Identity) {\n    if (user) _default_user = user;\n}\n\ntype CalendarEventExtended = CalendarEvent & EventExtensionData;\n\n/** User's calendar event/booking */\nexport class CalendarEvent {\n    /** ID of the calendar event */\n    public readonly id: string;\n    /** Status of the event */\n    public readonly status: 'approved' | 'tentative' | 'declined' | 'none';\n    /** Email address of the host */\n    public readonly host: string;\n    /** ID of the calendar associated with the event */\n    public readonly calendar: string;\n    /** Email address of the event creator */\n    public readonly creator: string;\n    /** List of attendees of the event */\n    public readonly attendees: User[];\n    /** List of attendees of the event */\n    public readonly resources: Space[];\n    /** Summary of the event details */\n    public readonly title: string;\n    /** Extended details of the event */\n    public readonly body: string;\n    /** Unix epoch in seconds of the start time of the event */\n    public readonly event_start: number;\n    /** Unix epoch in seconds of the end time of the event */\n    public readonly event_end: number;\n    /** Whether event occurs over the full day */\n    public readonly all_day: boolean;\n    /** Unix epoch of the start time of the event */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** IANA timezone string for the event location */\n    public readonly timezone: string;\n    /** Location details for the event */\n    public readonly location: string;\n    /** Whether this event is recurring */\n    public readonly recurring: boolean;\n    /** Details about the event's recurrence */\n    public readonly recurrence: RecurrenceDetails;\n    /** ID of the parent recurring event */\n    public readonly recurring_master_id: string;\n    /** Whether event details should be private */\n    public readonly private: boolean;\n    /** File attachements for the event */\n    public readonly attachments: FileDetails[];\n    /** Extra data associated with the event */\n    public readonly extension_data: Partial<EventExtensionData>;\n    /** System associated with the event */\n    public readonly system: PlaceSystem;\n    /** Previous system associated with the event */\n    public readonly old_system: PlaceSystem;\n    /** Host user details of the event */\n    public readonly organiser: User;\n    /** Type of event */\n    public readonly type: 'cancelled' | 'external' | 'internal';\n    /** Master event */\n    public master?: CalendarEvent;\n\n    /** Get field from extension data */\n    public ext<K extends keyof EventExtensionData>(key: K) {\n        return this.extension_data[key];\n    }\n\n    constructor(data: Partial<CalendarEventExtended> = {}) {\n        this.id = data.id || '';\n        this.event_start =\n            data.event_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 3), {\n                        nearestTo: 5,\n                    })\n            );\n        this.event_end =\n            data.event_end ||\n            getUnixTime(\n                addMinutes(this.event_start * 1000, data.duration || 30)\n            );\n        this.calendar = data.calendar || '';\n        this.creator =\n            (data.creator || _default_user.email)?.toLowerCase() || '';\n        this.host = (\n            data.host ||\n            this.creator ||\n            _default_user.email ||\n            ''\n        ).toLowerCase();\n        const attendees: HashMap = data.attendees || [];\n        this.attendees = attendees\n            .filter((user: any) => !user.resource)\n            .map((u) => new User(u));\n        this.resources =\n            unique(\n                data.resources ||\n                    attendees\n                        .filter((user) => user.resource)\n                        .map((s) => new Space(s)),\n                'email'\n            ) || [];\n        this.title = data.title || '';\n        this.body = data.body || '';\n        this.private = !!data.private;\n        this.all_day = !!data.all_day;\n        this.date = this.event_start * 1000;\n        this.duration = this.all_day\n            ? 24 * 60\n            : data.duration ||\n              differenceInMinutes(data.event_end * 1000, this.date) ||\n              30;\n        this.timezone = data.timezone || '';\n        this.location = data.location || '';\n        this.recurring = !!data.recurring;\n        this.recurring_master_id = data.recurring_master_id || '';\n        this.organiser = this.attendees.find(\n            (user) => user.email === this.host\n        );\n        this.master = data.master ? new CalendarEvent(data.master) : null;\n        if (data.recurring) {\n            this.recurrence = {\n                start:\n                    this.event_start * 1000 ||\n                    new Date(\n                        (data.recurrence as any).range_start * 1000\n                    ).valueOf(),\n                end:\n                    data.recurrence.end ||\n                    new Date(\n                        (data.recurrence as any).range_end * 1000\n                    ).valueOf(),\n                interval: data.recurrence.interval,\n                pattern: data.recurrence.pattern,\n                days_of_week: data.recurrence.days_of_week,\n            };\n        } else {\n            this.recurrence = {} as any;\n        }\n        const system = data.system;\n        if (\n            system?.email &&\n            !this.resources.find((_) => _.email === system.email)\n        ) {\n            this.resources.push(new Space(system as any));\n        }\n        this.system = system || (this.resources[0] as any) || null;\n        this.old_system = data.old_system || data.system;\n        this.attachments = data.attachments || [];\n        this.extension_data = data.extension_data || {};\n        this.status = eventStatus(this) || 'none';\n        this.type =\n            this.status === 'declined'\n                ? 'cancelled'\n                : this.attendees.find((_) => _.is_external)\n                ? 'external'\n                : 'internal';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n        this.extension_data.catering = (this.extension_data.catering || []).map(\n            (i) => new CateringOrder({ ...i, event: this })\n        );\n    }\n\n    /** List of external attendees associated with the event */\n    public get guests() {\n        return this.attendees.filter((f) => !!f.visit_expected) as GuestUser[];\n    }\n    /** Primary space associated with the booking */\n    public get space() {\n        return this.resources[0] || null;\n    }\n    public get is_today(): boolean {\n        return isSameDay(new Date(this.date), new Date());\n    }\n\n    /**\n     * Convert class data to simple JSON object\n     */\n    public toJSON(): HashMap {\n        const obj: HashMap = { ...this };\n        const end = getUnixTime(addMinutes(this.date, this.duration));\n        const date = this.all_day ? set(this.date, { hours: 12 }) : this.date;\n        obj.event_start = getUnixTime(date);\n        obj.event_end = end;\n        const attendees = this.attendees;\n        if (this.recurring) {\n            obj.recurrence = {\n                ...this.recurrence,\n                range_start: obj.event_start,\n                range_end: getUnixTime(this.recurrence.end),\n            };\n        }\n        obj.recurrence = obj.recurrence\n            ? Object.keys(obj.recurrence).length\n                ? obj.recurrence\n                : null\n            : null;\n        obj.attendees = unique(attendees, 'email');\n        if (!this.all_day) {\n            obj.extension_data.breakdown = 15;\n        }\n        obj.extension_data.catering = obj.extension_data.catering.map(\n            (i) => new CateringOrder({ ...i, event: null })\n        );\n        obj.system_id = this.system?.id;\n        delete obj.catering;\n        delete obj.date;\n        delete obj.duration;\n        delete obj.status;\n        return obj;\n    }\n\n    /** Status of the booking */\n    public get state():\n        | 'future'\n        | 'upcoming'\n        | 'done'\n        | 'started'\n        | 'in_progress' {\n        const now = new Date();\n        const date = this.date;\n        if (isBefore(now, add(date, { minutes: -15 }))) return 'future';\n        if (isBefore(now, date)) return 'upcoming';\n        if (isBefore(now, add(date, { minutes: 15 }))) return 'started';\n        if (isBefore(now, add(date, { minutes: this.duration })))\n            return 'in_progress';\n        return 'done';\n    }\n\n    public get can_check_in(): boolean {\n        const now = new Date();\n        return (\n            this.is_today ||\n            (isAfter(now, this.date) &&\n                isBefore(now, addMinutes(this.date, this.duration)))\n        );\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from 'libs/users/src/lib/user.class';\n\nimport { CalendarEvent } from './event.class';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, new CalendarEvent(data).toJSON()).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        method === 'patch' ? data : new CalendarEvent(data).toJSON()\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => {\n    delete (data as any)?.status;\n    return data.id ? updateEvent(data.id, data, q) : createEvent(data);\n};\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        {\n            response_type: 'void',\n        }\n    );\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/approve?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/reject?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/guests/${guest_id}/checkin${query ? '?' + query : ''}`,\n        ''\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","import { HashMap } from '@placeos/common';\nimport {\n    addMinutes, addSeconds,\n\n    differenceInMinutes,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    startOfMinute\n} from 'date-fns';\nimport { Space } from 'libs/spaces/src/lib/space.class';\nimport {\n    BookingRuleDetails,\n    BookingRules,\n    BookingRuleset,\n    BookingRulesmap,\n    RecurrenceDetails,\n    TimeBlock,\n    TimePeriod\n} from './event.interfaces';\n\nexport function eventStatus(\n    details: HashMap\n): 'approved' | 'tentative' | 'declined' {\n    if (details.resources?.length) {\n        if (details.resources.every((i) => i.response_status === 'accepted')) {\n            return 'approved';\n        } else if (\n            details.resources.some(\n                (i) =>\n                    i.response_status === 'tentative' ||\n                    i.response_status === 'needsAction'\n            )\n        ) {\n            return 'tentative';\n        }\n        return 'declined';\n    }\n    return 'approved';\n}\n\nexport function formatRecurrence({\n    interval,\n    pattern,\n    end,\n}: RecurrenceDetails) {\n    let details = '';\n    if (interval) {\n        switch (pattern) {\n            case 'daily':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} days` : 'Daily'\n                );\n                break;\n            case 'weekly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} weeks` : 'Weekly'\n                );\n                break;\n            case 'monthly':\n                details = details.concat(\n                    interval > 1 ? `Every ${interval} months` : 'Monthly'\n                );\n                break;\n        }\n        details = details.concat(`, until ${format(end, 'MMM do, yyyy')}`);\n    }\n    return details;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeTimeSlots(\n    list: TimePeriod[],\n    min_size: number = 30\n): TimeBlock[] {\n    let start = new Date(0);\n    const slots: TimeBlock[] = [];\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = new Date(booking.date);\n        const bkn_end = addMinutes(booking.date, booking.duration);\n        if (isAfter(booking.date, start)) {\n            const diff = Math.abs(differenceInMinutes(bkn_start, start));\n            if (diff >= min_size) {\n                slots.push({\n                    start: start.valueOf(),\n                    end: booking.date,\n                });\n            }\n            start = bkn_end;\n        } else if (isSameMinute(start, booking.date)) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: start.valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeTimeSlot(\n    list: TimePeriod[],\n    date: number = new Date().valueOf(),\n    min_size: number = 30\n): TimeBlock {\n    const slots = getFreeTimeSlots(list, min_size);\n    const time = addSeconds(startOfMinute(date), 1);\n    for (const block of slots) {\n        if (isAfter(block.start, time)) {\n            return block;\n        } else if (isBefore(time, block.end)) {\n            const duration = differenceInMinutes(block.end, time);\n            if (duration >= min_size) return block;\n        }\n    }\n    return slots[slots.length - 1];\n}\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nconst DEFAULT_RULES: BookingRules = {\n    auto_approve: true,\n    hidden: false,\n};\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = (str || '').split(' ');\n    return parts.length > 1 ? +parts[0] * DURATION_MAP[parts[1]] : 0;\n}\n\nexport function addToDate(add: string, date: Date | number = new Date()) {\n    return addMinutes(date, stringToMinutes(add));\n}\n\nexport function filterSpacesFromRules(\n    spaces: Space[],\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n) {\n    return spaces.filter(\n        (_) => !rulesForSpace({ ...details, space: _ }, rulemap)?.hidden\n    );\n}\n\nexport function rulesForSpace(\n    details: BookingRuleDetails,\n    rulemap: BookingRulesmap\n): BookingRules {\n    const { space } = details;\n    for (const zone of space.zones) {\n        if (rulemap[zone]?.length) {\n            for (const ruleset of rulemap[zone]) {\n                if (ruleset && checkRulesMatch(details, ruleset))\n                    return { ...DEFAULT_RULES, ...ruleset.rules };\n            }\n        }\n    }\n    return DEFAULT_RULES;\n}\n\nexport function checkRulesMatch(\n    { date, duration, host }: BookingRuleDetails,\n    ruleset: BookingRuleset\n): boolean {\n    let matches = 0;\n    const { conditions } = ruleset;\n    if (!conditions) return true;\n    if (\n        conditions.groups instanceof Array &&\n        conditions.groups.every((_) => host?.groups?.includes(_))\n    )\n        matches += 1;\n    if (\n        conditions.is_before &&\n        isBefore(addMinutes(date, duration), addToDate(conditions.is_before))\n    )\n        matches += 1;\n    if (conditions.is_after && isAfter(date, addToDate(conditions.is_after)))\n        matches += 1;\n    if (\n        conditions.min_length &&\n        stringToMinutes(conditions.min_length) <= duration\n    )\n        matches += 1;\n    if (\n        conditions.max_length &&\n        stringToMinutes(conditions.max_length) >= duration\n    )\n        matches += 1;\n    return matches >= Object.keys(conditions).length;\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'an-action-field',\n    template: `\n        <div\n            class=\"flex items-center rounded p-2 border border-gray-300 hover:border-black\"\n            role=\"button\"\n            [attr.disabled]=\"disabled\"\n            form-field\n            tabindex=\"0\"\n            (keydown.enter)=\"performAction()\"\n        >\n            <div\n                placeholder\n                class=\"flex-1 w-0 truncate\"\n                (click)=\"performAction()\"\n            >\n                <ng-content></ng-content>\n            </div>\n            <app-icon class=\"text-xl\" (click)=\"performAction()\">\n                arrow_drop_{{ show_tooltip ? 'up' : 'down' }}\n            </app-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div:hover {\n                box-shadow: inset 0 0 0 1px #000;\n            }\n        `,\n    ],\n})\nexport class ActionFieldComponent {\n    /** Name of the field */\n    @Input() public name: string;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Emitter for user interaction events */\n    @Output('onAction') public on_action = new EventEmitter();\n    /** Whether to show tooltip */\n    public show_tooltip = false;\n\n    /**\n     * Emit that the user has performed an action on the field\n     */\n    public performAction() {\n        this.show_tooltip = !this.show_tooltip;\n        this.on_action.emit();\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'a-counter',\n    template: `\n        <div\n            counter\n            class=\"flex items-center text-base\"\n            (window:keydown.shift)=\"shift_key = true\"\n            (window:keydown.control)=\"ctrl_key = true\"\n            (window:keydown.meta)=\"ctrl_key = true\"\n            (window:keyup.shift)=\"shift_key = false\"\n            (window:keyup.control)=\"ctrl_key = false\"\n            (window:keyup.meta)=\"ctrl_key = false\"\n        >\n            <button\n                mat-icon-button\n                name=\"remove\"\n                type=\"button\"\n                [disabled]=\"!value || value === min\"\n                (click)=\"remove()\"\n            >\n                <app-icon>remove</app-icon>\n            </button>\n            <div value class=\"p-1 text-center\">{{ (render_fn ? render_fn(value) : value) || '0' }}</div>\n            <button\n                mat-icon-button\n                name=\"add\"\n                type=\"button\"\n                [disabled]=\"value === max\"\n                (click)=\"add()\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            [value] {\n                min-width: 3em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => CounterComponent),\n            multi: true,\n        },\n    ],\n})\nexport class CounterComponent implements ControlValueAccessor {\n    /** Size of a single step */\n    @Input() public step = 1;\n    /** Maximum amount for the counter */\n    @Input() public max = 10;\n    /** Minimum amount for the counter */\n    @Input() public min = 0;\n    /** Custom function for rendering the counter value */\n    @Input() public render_fn: (v: number) => string;\n    /** Current value of the counter */\n    public value: number;\n    /** Whether shift key is being held by the user */\n    public shift_key: boolean;\n    /** Whether control key is being held by the user */\n    public ctrl_key: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public add() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value += step;\n        if (this.value > this.max) {\n            this.value = this.max || 10;\n        }\n        this.setValue(this.value);\n    }\n\n    /** Remove the `step` from the current value */\n    public remove() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value -= step;\n        if (this.value < this.min) {\n            this.value = this.min || 0;\n        }\n        this.setValue(this.value);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import {\n    Component,\n\n    forwardRef,\n\n    Injectable, Input, OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    DateAdapter,\n    MatDateFormats,\n    MAT_DATE_FORMATS,\n    NativeDateAdapter\n} from '@angular/material/core';\nimport {\n    addYears,\n\n    endOfDay,\n    format,\n    formatISO,\n    set, startOfDay\n} from 'date-fns';\nimport { BaseClass } from 'libs/common/src/lib/base.class';\nimport { HashMap } from 'libs/common/src/lib/types';\n\n@Injectable()\nclass FieldDateAdapter extends NativeDateAdapter {\n    format(date: Date, displayFormat: HashMap | string): string {\n        if (displayFormat === 'input') {\n            return format(date, 'MMMM d, yyyy');\n        }\n        return format(date, 'MMM yyyy');\n    }\n}\nconst FIELD_DATE_FORMATS: MatDateFormats = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'input',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n@Component({\n    selector: 'a-date-field',\n    template: `\n        <mat-form-field appearance=\"outline\" overlay (click)=\"picker.open()\">\n            <input\n                matInput\n                [ngModel]=\"date\"\n                [disabled]=\"disabled\"\n                [min]=\"from\"\n                [max]=\"until\"\n                (ngModelChange)=\"setValue($event)\"\n                [matDatepicker]=\"picker\"\n            />\n            <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        { provide: DateAdapter, useClass: FieldDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: FIELD_DATE_FORMATS },\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DateFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = new Date().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: string;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** First allowed date on the calendar */\n    public get from(): Date {\n        return new Date(this._from) || startOfDay(new Date());\n    }\n    /** Current date value */\n    public get until(): Date {\n        return new Date(this._to) || addYears(endOfDay(new Date()), 1);\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return format(new Date(this.date), 'DD MMM YYYY');\n    }\n\n    public ngOnInit() {\n        this.date = new Date().toISOString();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        // Keep hours and minutes of the old date\n        const old_date = new Date(this.date);\n        let new_date = set(new_value, {\n            hours: old_date.getHours(),\n            minutes: old_date.getMinutes(),\n        }).valueOf();\n        // Check that new date is before from\n        if (new_date < this.from.valueOf()) {\n            new_date = this.from.valueOf();\n        }\n        this.date = formatISO(new_date || new Date());\n        if (this._onChange) {\n            this._onChange(new_date);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = formatISO(value || new Date());\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n}\n","import { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Identity } from '@placeos/common';\nimport { formatDuration } from 'date-fns';\nimport * as dayjs from 'dayjs';\n\n\n\n@Component({\n    selector: 'a-duration-field',\n    template: `\n        <div class=\"duration-field\" [attr.disabled]=\"disabled\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    #select\n                    [value]=\"duration\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"duration + ' minutes'\"\n                    (valueChange)=\"setValue($event)\"\n                >\n                    <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n                <mat-error><ng-content></ng-content></mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DurationFieldComponent implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max = 240;\n    /** Minimum duration option available */\n    @Input() public min = 30;\n    /** Step value between options */\n    @Input() public step = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Special case prepopulation i.e. out of step options */\n    @Input() public specialPreprops: Array<number> = [];\n\n    public duration = 60;\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        const date = this.time ? dayjs(this.time) : null;\n\n        // Add special case for 10min duration/prepropulation\n        for (const option of this.specialPreprops) {\n            blocks.push({\n                id: option,\n                name: date\n                    ? `${date.add(option, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(option / 60),\n                          minutes: option % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(option / 60), minutes: option % 60 })}`,\n            });\n        }\n\n        while (time <= max) {\n            blocks.push({\n                id: time,\n                name: date\n                    ? `${date.add(time, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(time / 60),\n                          minutes: time % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(time / 60), minutes: time % 60 })}`,\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\n\n/**\n * Add a tag to the list of tags for the item\n * @param event Input event\n */\nexport function addChipItem(\n    control: FormControl,\n    event: MatChipInputEvent\n): void {\n    if (!control) return;\n    const input = event.input;\n    const value = event.value;\n    const item_list = control.value;\n    if ((value || '').trim()) {\n        item_list.push(value);\n        control.setValue(item_list);\n    }\n\n    // Reset the input value\n    if (input) {\n        input.value = '';\n    }\n}\n\n/**\n * Remove tag from the list\n * @param existing_tag Tag to remove\n */\nexport function removeChipItem<T = string>(\n    control: FormControl,\n    item: T\n): void {\n    if (!control) {\n        return;\n    }\n    const item_list = control.value;\n    const index = item_list.indexOf(item);\n\n    if (index >= 0) {\n        item_list.splice(index, 1);\n        control.setValue(item_list);\n    }\n}\n\n@Component({\n    selector: 'item-list-field',\n    template: `\n        <mat-form-field appearance=\"outline\" class=\"w-full\">\n            <mat-chip-list #chipList aria-label=\"Zone Tags\">\n                <mat-chip\n                    *ngFor=\"let item of value\"\n                    [selectable]=\"true\"\n                    [removable]=\"true\"\n                    (removed)=\"remove(item)\"\n                >\n                    {{ item }}\n                    <app-icon matChipRemove>close</app-icon>\n                </mat-chip>\n                <input\n                    placeholder=\"User groups...\"\n                    i18n-placeholder=\"@@userGroupsPlaceholder\"\n                    [matChipInputFor]=\"chipList\"\n                    [matChipInputSeparatorKeyCodes]=\"separators\"\n                    [matChipInputAddOnBlur]=\"true\"\n                    (matChipInputTokenEnd)=\"add($event)\"\n                />\n            </mat-chip-list>\n        </mat-form-field>\n    `,\n    styles: [``],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => ItemListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ItemListFieldComponent<T = any> implements ControlValueAccessor {\n    @Input() public separators: number[] = [ENTER, COMMA, SPACE];\n    /** List of items stored */\n    public value: T[] = [];\n\n    /** Form control on change handler */\n    private _onChange: (_: T[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: T[]) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public readonly add = (e: MatChipInputEvent) =>\n        addChipItem(\n            { value: this.value, setValue: (i) => this.setValue(i) } as any,\n            e\n        );\n\n    /** Remove the `step` from the current value */\n    public readonly remove = (item: T) =>\n        removeChipItem(\n            { value: this.value, setValue: (i) => this.setValue(i) } as any,\n            item\n        );\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: T[]): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: T[]) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: T[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: T[]) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\nimport { BaseClass, Identity, timeFormatString } from '@placeos/common';\nimport {\n    addMinutes,\n    endOfDay,\n    format,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    set,\n    startOfDay,\n    startOfMinute\n} from 'date-fns';\n\n@Component({\n    selector: 'a-time-field',\n    template: `\n        <mat-form-field\n            appearance=\"outline\"\n            [style.display]=\"show_select ? 'none' : ''\"\n            (keydown.enter)=\"showSelect()\"\n        >\n            <input\n                matInput\n                type=\"time\"\n                [disabled]=\"disabled\"\n                [ngModel]=\"time\"\n                (ngModelChange)=\"setValue($event)\"\n            />\n            <button mat-icon-button matSuffix class=\"relative top-1 -right-1\" (click)=\"showSelect()\">\n                <app-icon class=\"text-2xl text-black text-opacity-50\">\n                    arrow_drop_down\n                </app-icon>\n            </button>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n            <mat-select\n                #select\n                [value]=\"time\"\n                [disabled]=\"disabled\"\n                (valueChange)=\"setValue($event)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of time_options\"\n                    [value]=\"option.id\"\n                >\n                    {{ option.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class TimeFieldComponent\n    extends BaseClass\n    implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step = 15;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Whether past times are allowed */\n    @Input() public no_past_times = true;\n    /** String representing the currently set time */\n    public date: number = new Date().valueOf();\n    /** String representing the currently set time */\n    public time: string = format(new Date(), 'HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n        this.timeout('hide', () => (this.show_select = false));\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(\n                this.date,\n                !this.no_past_times,\n                this.step\n            );\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = (this.time || '00:00').split(':');\n        const date = set(this.date, { hours: +time[0], minutes: +time[1] });\n        if (\n            date.getMinutes() % 15 !== 0 &&\n            !this._time_options.find(\n                (time) => time.id === format(date, 'HH:mm')\n            )\n        ) {\n            this._time_options.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            this._time_options.sort((a, b) =>\n                `${a.id}`.localeCompare(`${b.id}`)\n            );\n        }\n        return this._time_options;\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        if (this._onChange) {\n            const time = (this.time || '00:00').split(':');\n            const date = startOfMinute(\n                set(this.date, { hours: +time[0], minutes: +time[1] })\n            );\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value || this.date;\n        let date = startOfMinute(this.date);\n        date = roundToNearestMinutes(date, { nearestTo: 5 });\n        this.time = format(date, 'HH:mm');\n        this._time_options = this.generateAvailableTimes(\n            this.date,\n            !this.no_past_times,\n            this.step\n        );\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription(\n                    'listen_close',\n                    this.select_field.openedChange.subscribe((state) => {\n                        if (!state) {\n                            this.show_select = false;\n                        }\n                    })\n                );\n            }\n        });\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(\n        datestamp: number,\n        show_past: boolean,\n        step: number = 15\n    ): Identity[] {\n        const now = new Date();\n        let date = new Date(datestamp);\n        const blocks = [];\n        if (show_past || (!isSameDay(date, now) && isAfter(date, now))) {\n            date = startOfDay(date);\n        } else if (isAfter(date, now)) {\n            date = now;\n        }\n        date = roundToNearestMinutes(date, { nearestTo: step });\n        const end = endOfDay(date);\n        // Add options for the rest of the day\n        while (isAfter(end, date)) {\n            blocks.push({\n                name: `${format(date, timeFormatString())}`,\n                id: format(date, 'HH:mm'),\n            });\n            date = addMinutes(date, step);\n        }\n        return blocks;\n    }\n}\n","import {\n    Component,\n    forwardRef,\n    Output,\n    EventEmitter,\n    Input,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    BaseClass,\n    csvToJson,\n    currentUser,\n    downloadFile,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nimport { NewUserModalComponent, User, USER_DOMAIN } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nfunction validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\n@Component({\n    selector: 'a-user-list-field',\n    template: `\n        <div\n            class=\"mb-4bg-white text-black\"\n            form-field\n            [attr.disabled]=\"disabled\"\n        >\n            <div search>\n                <a-user-search-field\n                    [(ngModel)]=\"search_user\"\n                    [guests]=\"guests\"\n                    [filter]=\"filter\"\n                    error=\"Click on Add External to add an attendee.\"\n                    [empty_fn]=\"emptyClick\"\n                    [validate]=\"validFn\"\n                    (ngModelChange)=\"addUser($event)\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"!hide_actions\">\n                <button\n                    mat-button\n                    type=\"button\"\n                    name=\"new-contact\"\n                    class=\"clear underline flex-1\"\n                    (click)=\"openNewUserModal()\"\n                    i18n=\"Add new external attendee\"\n                >\n                    Add External\n                </button>\n                <button\n                    mat-button\n                    type=\"button\"\n                    class=\"clear underline flex-1 relative\"\n                    name=\"upload-csv\"\n                    i18n=\"Upload attendee list from CSV file\"\n                >\n                    Upload CSV\n                    <input\n                        class=\"opacity-0 absolute inset-0\"\n                        type=\"file\"\n                        (change)=\"addUsersFromFile($event)\"\n                    />\n                </button>\n                <button\n                    mat-button\n                    type=\"button\"\n                    class=\"clear underline flex-1\"\n                    name=\"download-template\"\n                    (click)=\"downloadCSVTemplate()\"\n                    i18n=\"Download template CSV file\"\n                >\n                    CSV Template\n                </button>\n            </div>\n            <div\n                class=\"flex flex-col py-2\"\n                *ngIf=\"active_list?.length; else empty_state\"\n            >\n                <div\n                    user\n                    *ngFor=\"let user of active_list\"\n                    class=\"flex items-center space-x-2 p-2 hover:bg-black hover:bg-opacity-5 rounded\"\n                    (click)=\"user.is_external ? openNewUserModal(user) : ''\"\n                >\n                    <a-user-avatar\n                        [user]=\"user\"\n                        [icon]=\"!user.is_external\"\n                        [matTooltip]=\"\n                            user.is_external\n                                ? 'External Attendee'\n                                : 'Staff Attendee'\n                        \"\n                        matTooltipPosition=\"right\"\n                    >\n                        <div class=\"h-full w-full bg-success text-white\">\n                            <app-icon>done</app-icon>\n                        </div>\n                    </a-user-avatar>\n                    <div class=\"flex-1 w-1/4\">\n                        <div class=\"truncate\">{{ user.name }}</div>\n                        <div class=\"text-xs truncate\">{{ user.email }}</div>\n                    </div>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"\n                            user.required = !user.required;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"user.required\"\n                        [class.text-white]=\"user.required\"\n                        matTooltip=\"Required\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon>{{\n                            user.required ? 'person' : 'person_outline'\n                        }}</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        [disabled]=\"!user.is_external\"\n                        (click)=\"\n                            user.visit_expected = !user.visit_expected;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"\n                            user.is_external && user.visit_expected\n                        \"\n                        [class.text-white]=\"\n                            user.is_external && user.visit_expected\n                        \"\n                        matTooltip=\"Physical visit expected\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon>meeting_room</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        [disabled]=\"!user.is_external\"\n                        (click)=\"\n                            user.assistance_required = !user.assistance_required;\n                            $event.stopPropagation();\n                            setValue(active_list)\n                        \"\n                        [class.bg-success]=\"user.assistance_required\"\n                        [class.text-white]=\"user.assistance_required\"\n                        matTooltip=\"Assistance Required\"\n                        matTooltipPosition=\"left\"\n                    >\n                        <app-icon *ngIf=\"user.is_external\"\n                            >contact_support</app-icon\n                        >\n                    </button>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"removeUser(user); $event.stopPropagation()\"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"m-2 opacity-50 text-center\" i18n=\"Attendee empty state\">\n                None\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            button {\n                background: transparent;\n                border-top: none !important;\n                border-bottom: none !important;\n            }\n\n            [search] {\n                height: 3.5rem;\n                margin-top: -0.25rem;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserListFieldComponent\n    extends BaseClass\n    implements ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Number of characters needed before a search will start */\n    @Input() public limit = 3;\n    /** Whether guests should also show when searching for users */\n    @Input() public guests = false;\n    /** Whether optional actions should be shown */\n    @Input('hideActions') public hide_actions = false;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any) => boolean;\n    /** Emitter for action to make a new user */\n    @Output() public new_user = new EventEmitter<void>();\n\n    public search_user: User;\n\n    /** User list to display */\n    public user_list: User[] = [];\n    /** List of active selected users on the list */\n    public active_list: User[] = [];\n    /** Whether user list is loading */\n    public loading: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: User[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User[]) => void;\n\n    public readonly validFn = (s) => validateEmail(s);\n    public readonly emptyClick = () => this.openNewUserModal(new User());\n\n    constructor(\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    /**\n     * Add user to the user list\n     * @param user\n     */\n    public addUser(user: User) {\n        console.log('Add user:', user);\n        const list = this.active_list.filter((_) => _.email !== user.email);\n        this.setValue([\n            ...list,\n            new User({\n                ...user,\n                id: user.id || user.email,\n                visit_expected:\n                    (!user.id && user.is_external !== true\n                        ? user.visit_expected\n                        : null) ?? true,\n            }),\n        ]);\n        this.timeout('clear_user', () => (this.search_user = null), 10);\n    }\n\n    /**\n     * Remove user from the user list\n     * @param user\n     */\n    public removeUser(user: User) {\n        const list = this.active_list.filter(\n            (a_user) => a_user.email !== user.email\n        );\n        this.setValue(list);\n    }\n\n    /**\n     * Load CSV file and populate the user list with the contents\n     * @param event File input field event\n     */\n    public addUsersFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    this.processCsvData((evt.srcElement as any).result);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    /**\n     * Process raw CSV data and save user data to attendee list\n     * @param data CSV data\n     */\n    private processCsvData(data: string) {\n        const list = csvToJson(data) || [];\n        const id = currentUser()?.staff_id || 'unknown';\n        for (const el of list) {\n            el.name = el.name || `${el.first_name} ${el.last_name}`;\n            const display = (\n                el.name || `${Math.floor(Math.random() * 9999_9999)}`\n            )\n                .split(' ')\n                .join('_')\n                .toLowerCase();\n            /* istanbul ignore else */\n            if (!el.email) {\n                el.email = `${display}+${id}@guest.${USER_DOMAIN}`;\n            }\n            const internal_emails = this._settings.get(\n                'app.booking.internal_emails'\n            ) || ['place.tech'];\n            el.visit_expected =\n                el.visit_expected ??\n                !internal_emails.find((_) => el.email.endsWith(_));\n\n            /** Convert phone to string. PWCME-544 */\n            el.phone = '' + el.phone;\n\n            this.addUser(new User(el));\n        }\n    }\n\n    /* istanbul ignore next */\n    /** Download template CSV file */\n    public downloadCSVTemplate() {\n        const template = `Organisation,First Name,Last Name,Email,Phone,Assistance Required,Visit Expected\\nFake Org,John,Smith,john.smith@example.com,01234567898,false,true`;\n        downloadFile('template.csv', template);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User[]): void {\n        this.active_list = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User[]) {\n        this.active_list = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User[]) => void): void {\n        this._onTouch = fn;\n    }\n\n    public displayFn(item): string {\n        return item?.name || '';\n    }\n\n    /**\n     * Open modal to add or update user details\n     */\n    public openNewUserModal(user: User = new User()) {\n        console.log('Open User Modal:', user);\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: { user },\n            }\n        );\n        ref.componentInstance?.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                this.addUser(event.metadata);\n                ref.close();\n            });\n    }\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n    Component,\n    OnInit,\n    forwardRef,\n    Input,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of, forkJoin } from 'rxjs';\nimport {\n    switchMap,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    catchError,\n} from 'rxjs/operators';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { searchGuests, searchStaff, User } from '@placeos/users';\n\n@Component({\n    selector: 'a-user-search-field',\n    template: `\n        <div class=\"user-search-field text-black\" form-field>\n            <mat-form-field overlay appearance=\"outline\">\n                <input\n                    #input\n                    matInput\n                    keyboard\n                    name=\"user-search\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event || '')\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"placeholder || 'Search for user...'\"\n                    [matAutocomplete]=\"auto\"\n                    (keyup.enter)=\"\n                        validate && validate(search_str)\n                            ? setValue(search_str)\n                            : ''\n                    \"\n                    (blur)=\"resetSearchString()\"\n                    (focus)=\"cancelReset()\"\n                />\n                <app-icon matPrefix class=\"text-2xl relative\">search</app-icon>\n                <mat-spinner\n                    *ngIf=\"loading\"\n                    matSuffix\n                    diameter=\"16\"\n                ></mat-spinner>\n            </mat-form-field>\n            <mat-autocomplete\n                #auto=\"matAutocomplete\"\n                (optionSelected)=\"setValue($event.option.value)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of user_list\"\n                    (click)=\"setValue(option); blurInput()\"\n                >\n                    <div class=\"leading-tight\">{{ option.name }}</div>\n                    <div class=\"text-xs text-black opacity-60\">\n                        {{ option.email }}\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"search_str && validate && validate(search_str)\"\n                    class=\"relative pointer-events-none\"\n                >\n                    <div\n                        class=\"absolute inset-0 px-4 pointer-events-auto\"\n                        (mousedown)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (touchstart)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (click)=\"\n                            setValue(search_str);\n                            $event.stopPropagation();\n                            $event.preventDefault()\n                        \"\n                    >\n                        <div class=\"pointer-events-none\">\n                            Add external attendee \"{{ search_str }}\"\n                        </div>\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"!user_list?.length && (search_str || error)\"\n                    [disabled]=\"!empty_fn\"\n                    (click)=\"empty_fn()\"\n                >\n                    {{ search_str ? 'No users found.' : '' }} {{ error }}\n                </mat-option>\n            </mat-autocomplete>\n        </div>\n    `,\n    styles: [\n        `\n            :host,\n            mat-form-field {\n                width: 100%;\n            }\n\n            app-icon {\n                top: 0.15em;\n                left: -0.15em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserSearchFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Placeholder text to display */\n    @Input() public placeholder: string;\n    /** Limit available options to these */\n    @Input() public options: User[];\n    /** Whether guests should also show when searching for users */\n    @Input() public guests: boolean;\n    /** Message to display when no user matches have been found */\n    @Input() public error = '';\n    /** Function to validate the search string */\n    @Input() public validate: (s: string) => boolean;\n    /** Function to call when empty list option is clicked */\n    @Input() public empty_fn: () => void;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any, s?: string) => boolean;\n\n    @Input() public query_fn: (_: string) => Observable<User[]> = (q) =>\n        searchStaff(q);\n    /** Currently selected user */\n    public active_user: User;\n    /** User list to display */\n    public user_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** List of users from an API search */\n    public search_results$: Observable<User[]> = this.search$.pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap((query) => {\n            this.loading = true;\n            return this.options && this.options.length > 0\n                ? of(this.options)\n                : query.length >= 3\n                ? !this.guests\n                    ? this.query_fn(query)\n                    : forkJoin([searchStaff(query), searchGuests(query)])\n                : of([]);\n        }),\n        catchError((_) => of([])),\n        map((list: User[]) => {\n            this.loading = false;\n            list = flatten(list);\n            const search = (this.search_str || '').toLowerCase();\n            return list.filter(\n                (item) => !this.filter || this.filter(item, search)\n            );\n        })\n    );\n\n    /** Form control on change handler */\n    private _onChange: (_: User) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User) => void;\n\n    @ViewChild('input', { read: ElementRef })\n    private _input_el: ElementRef<HTMLInputElement>;\n\n    public cancelReset = () => this.clearTimeout('reset');\n\n    public blurInput = () => {\n        this.timeout('blur', () => this._input_el?.nativeElement?.blur());\n    };\n\n    public ngOnInit(): void {\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.user_list = list))\n        );\n    }\n\n    /**\n     * Reset the search string back to the name of the active user\n     */\n    public resetSearchString() {\n        this.timeout(\n            'reset',\n            () => (this.search_str = this.active_user?.name || ''),\n            100\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User | string, email?: string): void {\n        if (\n            typeof new_value === 'string' &&\n            (new_value as any) === this.search_str\n        ) {\n            new_value = new User({\n                name: (this.search_str || email || '').split('@')[0],\n                email: this.search_str || email || '',\n            });\n        }\n        if (!(new_value instanceof User)) return;\n        this.active_user = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User) {\n        this.active_user = value;\n        this.resetSearchString();\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import { PlaceZone } from '@placeos/ts-client';\n\nexport class Desk {\n    /** ID of the desk also map_id */\n    public readonly id: string;\n    /** ID of the desk on the associated map */\n    public readonly map_id: string;\n    /** Name of the desk */\n    public readonly name: string;\n    /** Whether desk is available / bookable */\n    public readonly bookable: boolean;\n    /** Zone/Level of the desk */\n    public readonly zone: PlaceZone;\n    /** Group/Department allocated to the desk */\n    public readonly groups: string[];\n    /** QR code image data */\n    public readonly qr_code: string;\n\n    constructor(data: Partial<Desk> = {}) {\n        this.id = data.id || '';\n        this.map_id = data.map_id || data.id || '';\n        this.name = data.name || '';\n        this.bookable = data.bookable ?? false;\n        this.zone = data.zone || new PlaceZone();\n        this.groups = data.groups || [];\n        this.qr_code = data.qr_code || '';\n    }\n\n    public format() {\n        const { id, name, bookable, groups } = this;\n        return {\n            id,\n            name,\n            bookable,\n            groups,\n        };\n    }\n\n    public readonly toJSON = () => this.format();\n}\n","import { HashMap, Identity } from '@placeos/common';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    public readonly id: string;\n    /** ID of the building zone associated with the level */\n    public readonly parent_id: string;\n    /** Name of the level */\n    public readonly name: string;\n    /** Display name */\n    public readonly display_name: string;\n    /** Capacity for the level */\n    public readonly capacity: number;\n    /** Number or letter representing the level */\n    public readonly number: string;\n    /** URL of the map associated with the level */\n    public readonly map_id: string;\n    /** Settings overrides associated with the level */\n    public readonly settings: HashMap = {};\n    /** List of points of interest for the level */\n    public readonly locations: readonly Identity[];\n\n    constructor(_data: Partial<BuildingLevel> = {}) {\n        this.id = _data.id || '';\n        this.parent_id = _data.parent_id || '';\n        this.name = _data.name || '';\n        this.display_name = _data.display_name || '';\n        this.map_id = _data.map_id || '';\n        this.capacity = _data.capacity || 0;\n        this.locations = _data.locations || [];\n        const parts = this.display_name.split(' ');\n        this.number =\n            (parts.length >= 2\n                ? parts[parts.length - 1]\n                : this.display_name[0]\n            )?.toUpperCase() || '';\n    }\n}\n","import { getItemWithKeys, HashMap } from '@placeos/common';\n\nexport interface OrganisationComplete extends Organisation {\n    settings?: HashMap;\n}\n\nexport class Organisation {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Description for the Organisation */\n    public readonly description: string;\n    /** Tags for the Organisation */\n    public readonly tags: string[];\n    /** Count for the Organisation */\n    public readonly count: number;\n    /** Capacity for the Organisation */\n    public readonly capacity: number;\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n\n    constructor(raw_data: Partial<OrganisationComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        this.description = raw_data.description || '';\n        this.tags = raw_data.tags || [];\n        this.count = raw_data.count || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.bindings = raw_data.bindings || {};\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom organisation setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n}\n","import { HashMap, Identity, RoomConfiguration } from '@placeos/common';\nimport { BookingRulesmap } from 'libs/events/src/lib/event.interfaces';\n\nimport { BuildingLevel } from './level.class';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport interface BuildingComplete extends Building {\n    settings: HashMap;\n    locker_structure: HashMap;\n    roles: HashMap;\n    zone: string;\n    location: string;\n    neighbourhoods: HashMap;\n}\n\nexport class Building {\n    /** PlaceOS zone id of the building */\n    public readonly id: string;\n    /** Name of the building zone */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** IANA timezone string for building */\n    public readonly timezone: string;\n    /** ID of space that temporarily holds new meetings */\n    public readonly holding_bay: string;\n    /** ID of the space for assigning new visitor bookings to */\n    public readonly visitor_space: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: BookingRulesmap;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** List of available extras for the building */\n    public readonly extras: readonly Identity[];\n    /** List of available extra equipment for loan at the building */\n    public readonly loan_items: readonly Identity[];\n    /** List of available levels for the building */\n    public readonly levels: readonly BuildingLevel[];\n    /** List of zones associated with the building */\n    public readonly zones: readonly string[];\n    /** Searchable map features */\n    public readonly searchables: readonly LevelFeature[];\n    /** List of available room configurations for the building */\n    public readonly room_configurations: readonly RoomConfiguration[];\n    /** Start and end hours catering can be delivered */\n    public readonly catering_hours: { start: number; end: number };\n    /** PlaceOS bindings for applications */\n    public readonly bindings: HashMap<string>;\n\n    public readonly orientations: HashMap<number>;\n    public readonly attributes: readonly Identity[];\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n\n    constructor(raw_data: Partial<BuildingComplete> = {}) {\n        this.id = raw_data.id || '';\n        this.name = raw_data.name || '';\n        const settings = raw_data.settings || {};\n        this.display_name = raw_data.display_name;\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this.extras = (raw_data.extras || disc_info.extras || []).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.loan_items = (\n            raw_data.loan_items ||\n            disc_info.loan_items ||\n            []\n        ).map((i) => ({\n            id: i.extra_id || i.id,\n            name: i.extra_name || i.name,\n        }));\n        this.levels = (raw_data.levels || disc_info.levels || []).map(\n            (i) => new BuildingLevel({ ...i, building_id: this.id })\n        );\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers =\n            raw_data.lockers ||\n            raw_data.locker_structure ||\n            disc_info.locker_structure ||\n            {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._phone_numbers =\n            raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location ||\n            disc_info.location || { longitude: null, latitude: null };\n        this.room_configurations =\n            raw_data.room_configurations || disc_info.room_configurations || [];\n        this.attributes = raw_data.attributes || disc_info.attributes || [];\n        const searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (lvl in raw_data.neighbourhoods) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (feature in lvl_features) {\n                            searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl,\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.bindings = raw_data.bindings || {};\n        this.searchables = searchables;\n        this.timezone =\n            raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.catering_hours = raw_data.catering_hours ||\n            disc_info.catering_hours ||\n            settings.catering_hours || { start: 7, end: 20 };\n        this.visitor_space =\n            raw_data.visitor_space ||\n            disc_info.visitor_space ||\n            settings.visitor_space ||\n            '';\n        this.holding_bay =\n            raw_data.holding_bay ||\n            disc_info.holding_bay ||\n            settings.holding_bay ||\n            '';\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address =\n            raw_data.address || disc_info.address || settings.address || '';\n        this.orientations =\n            raw_data.orientations ||\n            disc_info.orientations ||\n            settings.orientations ||\n            {};\n        this.booking_details =\n            raw_data.booking_details ||\n            disc_info.booking_details ||\n            settings.booking_details ||\n            null;\n        this.booking_rules =\n            raw_data.booking_rules ||\n            disc_info.booking_rules ||\n            settings.booking_rules ||\n            {};\n        this.catering_restricted_from =\n            raw_data.catering_restricted_from ||\n            disc_info.catering_restricted_from ||\n            settings.catering_restricted_from ||\n            -1440;\n        this.currency =\n            raw_data.currency ||\n            disc_info.currency ||\n            settings.currency ||\n            'USD';\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter((i) => i in this._roles);\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this.searchables || []).filter((i) => i.level_id === level_id);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n    HashMap,\n    notifyError,\n    RoomConfiguration,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    authority,\n    isMock,\n    onlineState,\n    queryZones,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\nimport { Building } from './building.class';\nimport { BuildingLevel } from './level.class';\nimport { Organisation } from './organisation.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class OrganisationService {\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    private readonly _buildings = new BehaviorSubject<Building[]>([]);\n    private readonly _active_building = new BehaviorSubject<Building>(null);\n    private readonly _levels = new BehaviorSubject<BuildingLevel[]>([]);\n\n    /** Observable for the list of buildings */\n    public readonly building_list = this._buildings.asObservable();\n    /** Observable for the list of levels */\n    public readonly level_list = this._levels.asObservable();\n    /** Observable for the currently active building */\n    public readonly active_building = this._active_building.asObservable();\n    /** Observable for the levels associated with the currently active building */\n    public readonly active_levels = combineLatest([\n        this._levels,\n        this._active_building,\n    ]).pipe(map(([_, bld]) => (bld ? this.levelsForBuilding(bld) : [])));\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Mapping of organisation settings overrides */\n    private _settings: HashMap = {};\n    /** Mapping of buildings to settings overrides */\n    private _building_settings: HashMap<HashMap> = {};\n\n    /** Mapping of organisation settings overrides */\n    public get settings(): HashMap {\n        return this._settings;\n    }\n\n    /** Mapping of builgins to settings overrides */\n    public get building_settings(): HashMap<HashMap> {\n        return this._building_settings;\n    }\n\n    /** Mapping building settings overrides */\n    public buildingSettings(bld_id: string = ''): HashMap {\n        if (!bld_id && this.building) {\n            bld_id = this.building.id;\n        }\n        return this._building_settings\n            ? this._building_settings[bld_id] || {}\n            : {};\n    }\n\n    /** Organisation data for the application */\n    public get organisation(): Organisation {\n        return this._organisation;\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._buildings.getValue();\n    }\n\n    /** Currently active building */\n    public get building(): Building {\n        return this._active_building.getValue();\n    }\n    public set building(bld: Building) {\n        this._active_building.next(bld);\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(bld.id).details,\n        ];\n    }\n\n    /** Get building by id */\n    public find(id: string) {\n        return this.buildings.find((i) => i.id === id);\n    }\n\n    /** List of available levels */\n    public get levels(): BuildingLevel[] {\n        return this._levels.getValue();\n    }\n\n    constructor(private _service: SettingsService, private _router: Router) {\n        onlineState()\n            .pipe(first((_) => _))\n            .subscribe(() => setTimeout(() => this.init(), 1000));\n        this.active_building.subscribe((bld) => {\n            if (bld) {\n                this._service.overrides = [\n                    this._settings,\n                    this.buildingSettings(bld.id),\n                ];\n            }\n        });\n    }\n\n    /**\n     * Get level with a matching ID\n     * @param id_list List of IDs to find a match\n     */\n    public levelWithID(id_list: string[]): BuildingLevel {\n        return this.levels.find((lvl) => id_list?.includes(lvl.id));\n    }\n\n    /**\n     * Get list of levels for the given building\n     * @param bld Building to list levels for\n     */\n    public levelsForBuilding(bld: Building): BuildingLevel[] {\n        return this.levels.filter((lvl) => lvl.parent_id === bld.id);\n    }\n\n    private async init(tries: number = 0) {\n        this._initialised.next(false);\n        await this.load().catch((err) => {\n            notifyError('Error loading organisation data. Retrying...');\n            setTimeout(() => this.init(tries), Math.min(10_000, 300 * ++tries));\n            throw err;\n        });\n        this._initialised.next(true);\n        if (window.debug) {\n            if (!window.application) window.application = {};\n            window.application.orgs = this;\n        }\n    }\n\n    /**\n     * Initialise service data\n     */\n    private async load(): Promise<void> {\n        await this.loadOrganisation();\n        await this.loadBuildings();\n        await this.loadLevels();\n        await this.loadSettings();\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_list = await queryZones({ tags: 'org' })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (org_list.length) {\n            const auth = authority();\n            const org =\n                org_list.find(\n                    (list) => isMock() || list.id === auth?.config?.org_zone\n                ) || org_list[0];\n            const bindings: HashMap = (\n                await showMetadata(org.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            const settings: HashMap = (\n                await showMetadata(org.id, { name: 'settings' }).toPromise()\n            )?.details;\n            this._settings = { ...this._settings, ...settings };\n            this._organisation = new Organisation({ ...org, bindings });\n        } else {\n            this._router.navigate(['/misconfigured']);\n        }\n    }\n\n    /**\n     * Load buildings data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const building_list = await queryZones({\n            tags: 'building',\n            limit: 500,\n        } as any)\n            .pipe(\n                map((i) =>\n                    i.data.filter((_) => _.parent_id === this._organisation.id)\n                )\n            )\n            .toPromise();\n        if (!building_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const buildings = [];\n        for (const bld of building_list) {\n            const bindings: HashMap = (\n                await showMetadata(bld.id, { name: 'bindings' }).toPromise()\n            )?.details;\n            buildings.push(new Building({ ...bld, bindings }));\n        }\n        this._buildings.next(buildings);\n        const id = localStorage.getItem(`PLACEOS.building`);\n        if (id && this.buildings.find((bld) => bld.id === id)) {\n            this._active_building.next(\n                this.buildings.find((bld) => bld.id === id)\n            );\n        }\n        if (!this.building?.id && buildings?.length > 0) {\n            this.building = buildings[0];\n        }\n    }\n\n    /**\n     * Load levels data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const level_list = await queryZones({\n            tags: 'level',\n            limit: 2500,\n        } as any)\n            .pipe(map((i) => i.data))\n            .toPromise();\n        if (!level_list?.length) {\n            this._router.navigate(['/misconfigured']);\n        }\n        const levels = level_list.map((lvl) => new BuildingLevel(lvl));\n        levels.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n        this._levels.next(levels);\n    }\n\n    public get available_room_configs(): RoomConfiguration[] {\n        return this.buildings\n            .map((m) => [...m.room_configurations])\n            .reduce((prev, curr) => prev.concat(curr), [])\n            .sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    public async loadSettings() {\n        if (!this._organisation) return;\n        const app_name = `${(\n            this._service.get('app.name') || 'workplace'\n        ).toLowerCase()}_app`;\n        this._settings = await showMetadata(this._organisation.id, {\n            name: app_name,\n        }).toPromise();\n        const buildings = this.buildings;\n        for (const bld of buildings) {\n            this._building_settings[bld.id] = await showMetadata(bld.id, {\n                name: app_name,\n            }).toPromise();\n        }\n        this._service.overrides = [\n            this._settings.details,\n            this.buildingSettings(this.building.id).details,\n        ];\n    }\n\n    /** Save building selection */\n    public saveBuilding(id: string) {\n        localStorage.setItem(`PLACEOS.building`, id);\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Space } from './space.class';\n\n@Component({\n    selector: 'a-space-select-item',\n    template: `\n        <div\n            space\n            class=\"w-full flex items-center p-2 space-x-2 border-b border-gray-100\"\n            *ngIf=\"space\"\n        >\n            <div class=\"flex-1 w-1/2\">\n                <div class=\"text-base truncate\">{{ space.name }}</div>\n                <div class=\"text-xs\">\n                    {{ space.level?.display_name || space.level?.name }}\n                </div>\n            </div>\n            <div class=\"flex items-center\" *ngIf=\"space.capacity !== -1\">\n                <app-icon>account_circle</app-icon>\n                <div>{{ space.capacity }}</div>\n            </div>\n            <button\n                mat-icon-button\n                *ngIf=\"multiple; else single_button\"\n                (click)=\"action.emit()\"\n            >\n                <app-icon>{{\n                    type === 'available' ? 'add' : 'close'\n                }}</app-icon>\n            </button>\n        </div>\n        <ng-template #single_button>\n            <button mat-button class=\"w-32\" [class.request]=\"space.by_request\">\n                {{ space.by_request ? 'Request' : 'Book' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class SpaceSelectItemComponent {\n    /** Space to display the details */\n    @Input() public space: Space;\n    /** Selected state for the space */\n    @Input() public type: 'available' | 'selected';\n    /** Whether user is allowed to select multiple spaces */\n    @Input() public multiple: boolean;\n    /** Emitter for selection actions */\n    @Output() public action = new EventEmitter();\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { addMinutes, getUnixTime } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    DialogEvent,\n    HashMap,\n    Identity,\n    SettingsService,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport { filterSpacesFromRules } from 'libs/events/src/lib/helpers';\nimport { querySpaceFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { Space } from './space.class';\n\nexport interface SpaceSelectModalData {\n    /** List of currently selected spaces */\n    readonly spaces: Space[];\n    /** Selected date to check space availability */\n    readonly date: number;\n    /** Duration of the availability that is desired */\n    readonly duration: number;\n    all_day?: boolean;\n    visitor_type?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    template: `\n        <header>\n            <app-icon class=\"text-3xl\">place</app-icon>\n            <div class=\"text-xl font-semibold flex-1\">\n                Select space{{ multiple ? 's' : '' }}\n            </div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon class=\"text-3xl\">close</app-icon>\n            </button>\n        </header>\n        <main>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"buildings && buildings.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [ngModel]=\"building.getValue()\"\n                    (ngModelChange)=\"building.next($event)\"\n                    placeholder=\"Select building\"\n                >\n                    <mat-option *ngFor=\"let bld of buildings\" [value]=\"bld\">\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                appearance=\"outline\"\n                *ngIf=\"space_types && space_types.length > 1\"\n            >\n                <mat-select\n                    name=\"booking-type\"\n                    [(ngModel)]=\"type\"\n                    placeholder=\"Any space type\"\n                >\n                    <mat-option\n                        *ngFor=\"let type of space_types\"\n                        [value]=\"type.id\"\n                    >\n                        {{ type.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"body\" style=\"width: 32rem\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container\n                        *ngIf=\"\n                            (filtered_spaces | async)?.length;\n                            else empty_state\n                        \"\n                    >\n                        <ng-container\n                            *ngFor=\"let space of filtered_spaces | async\"\n                        >\n                            <a-space-select-item\n                                *ngIf=\"!space_map[space.id]\"\n                                [space]=\"space\"\n                                [multiple]=\"multiple\"\n                                type=\"available\"\n                                (click)=\"spaceSelected(space)\"\n                            ></a-space-select-item>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n                <div\n                    class=\"space-list\"\n                    *ngIf=\"multiple\"\n                    [class.show]=\"show_selected\"\n                >\n                    <ng-container\n                        *ngIf=\"spaces && spaces.length; else empty_state\"\n                    >\n                        <a-space-select-item\n                            *ngFor=\"let space of spaces\"\n                            [space]=\"space\"\n                            [multiple]=\"multiple\"\n                            type=\"selected\"\n                        ></a-space-select-item>\n                    </ng-container>\n                </div>\n            </div>\n            <footer *ngIf=\"multiple\">\n                <button mat-button (click)=\"save()\">\n                    Save selected spaces({{ spaces.length || '0' }})\n                </button>\n            </footer>\n            <ng-template #empty_state>\n                <div empty class=\"p-16 flex flex-col items-center space-y-2\">\n                    <app-icon class=\"text-3xl\">close</app-icon>\n                    <p>No spaces</p>\n                </div>\n            </ng-template>\n            <ng-template #load_state>\n                <div load class=\"p-16 flex flex-col items-center space-y-2\">\n                    <mat-spinner diameter=\"48\"></mat-spinner>\n                    <p>Finding available spaces...</p>\n                </div>\n            </ng-template>\n        </main>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.5em;\n                width: 100%;\n                padding: 0 0.25em;\n            }\n\n            .body {\n                min-width: 20rem;\n                max-width: calc(100vw - 2rem);\n                max-height: 65vh;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class SpaceSelectModalComponent extends BaseClass {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected spaces */\n    public spaces: Space[] = [...(this._data.spaces || [])];\n    /** Building to filter available spaces */\n    public building = new BehaviorSubject<Building>(null);\n    /** Whether to show selected spaces */\n    public show_selected: boolean;\n    /** List of available space types */\n    public space_types: Identity[] = [];\n    /** ID of the space type to filter available spaces on */\n    public type: string;\n    /** Whether the available spaces are being loaded */\n    public loading: boolean;\n\n    public readonly available_spaces = combineLatest([this.building]).pipe(\n        switchMap(([bld]) => {\n            this.loading = true;\n            return querySpaceFreeBusy({\n                zone_ids: bld?.id,\n                period_start: getUnixTime(this._data.date),\n                period_end: getUnixTime(\n                    addMinutes(this._data.date, this._data.duration)\n                ),\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_spaces = this.available_spaces.pipe(\n        map((list) =>\n            filterSpacesFromRules(\n                list,\n                { ...this._data, host: currentUser() } as any,\n                this._org.building.booking_rules\n            )\n        ),\n        tap(() => (this.loading = false))\n    );\n\n    public get buildings(): Building[] {\n        return this._org.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._settings.get('app.booking.multiple_spaces');\n    }\n\n    /** Mapping of spaces to whether they are selected */\n    public get space_map(): HashMap<boolean> {\n        const spaces = {};\n        this.spaces.forEach((space) => (spaces[space.id] = true));\n        return spaces;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n        this.building.next(this._org.building || this.buildings[0]);\n        this.subscription(\n            'spaces',\n            this.filtered_spaces.subscribe((_) => _)\n        );\n    }\n\n    public spaceSelected(space: Space) {\n        if (this.multiple) {\n            if (!this.space_map[space.id]) {\n                this.spaces.push(space);\n            }\n        } else {\n            this.spaces = [space];\n            this.save();\n        }\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.spaces });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { SpaceSelectItemComponent } from './space-select-item.component';\nimport { SpaceSelectModalComponent } from './space-select-modal.component';\n\nconst COMPONENTS: Type<any>[] = [\n    SpaceSelectModalComponent,\n    SpaceSelectItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [CommonModule, MatDialogModule, ComponentsModule],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedSpacesModule {}\n","import { HashMap, predictableRandomInt } from '@placeos/common';\nimport { USER_DOMAIN } from '../../../users/src/lib/user.utilities';\n\nlet SPACE_COUNT: number = 0;\n/* istanbul ignore next */\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `Test Space ${SPACE_COUNT}`;\n    const linked = predictableRandomInt(99999) % 2 === 0 && SPACE_COUNT > 1;\n    const space = {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: predictableRandomInt(21, 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: '',\n        searchable: predictableRandomInt(99999) % 2 === 0,\n        controlable: predictableRandomInt(99999) % 2 === 0,\n        bookable: predictableRandomInt(99999) % 2 === 0,\n        cost_hour: predictableRandomInt(300) * 100,\n        setup: predictableRandomInt(6) * 5,\n        breakdown: predictableRandomInt(6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/panel/${id}`,\n        bookings: [], //Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked\n            ? [`space-${predictableRandomInt(SPACE_COUNT - 1)}`]\n            : [],\n        image: '',\n        ...overrides,\n    };\n    if (space['configurations'] && space['configurations'].length > 0) {\n        space['configurations'].forEach(\n            (config) =>\n                (config.capacity = predictableRandomInt(space.capacity) + 1)\n        );\n        space['configurations'][0].capacity = space.capacity;\n    }\n    return space;\n}\n","import { RoomConfiguration } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\n\nimport { CalendarAvailability } from 'libs/calendar/src/lib/calendar.interfaces';\n\nexport type ResourceResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted';\n\nexport class Space {\n    /** ID of the space resource */\n    public readonly id: string;\n    /** Display name of the space resource */\n    public readonly name: string;\n    /** Name to display */\n    public readonly display_name: string;\n    /** Email address of the resource associated with space */\n    public readonly email: string;\n    /** Capacity of the space resource */\n    public readonly capacity: number;\n    /** List of features available at the space resource  */\n    public readonly feature_list: string[];\n    /** URL to a supporting site for space */\n    public readonly support_url: string;\n    /** ID of the space on the associated map */\n    public readonly map_id: string;\n    /** Whether resource is bookable */\n    public readonly bookable: boolean;\n    /** List of zones the spaces is associated with */\n    public readonly zones: string[];\n    /** List of available room configurations for this room */\n    public readonly configurations: readonly RoomConfiguration[];\n    /** Image url */\n    public readonly image: string;\n    /** Status of the resource */\n    public readonly response_status: ResourceResponseStatus;\n    /** Level Assoicated with the space */\n    public readonly level: BuildingLevel;\n    /** List of features associated with the space */\n    public readonly features: string[];\n\n    public readonly availability: CalendarAvailability[];\n\n    constructor(data: Partial<Space> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.display_name = data.display_name || '';\n        this.email = (data.email || '').toLowerCase();\n        this.capacity = data.capacity || -1;\n        this.feature_list = data.feature_list || (data.features as any) || [];\n        this.bookable = !!data.bookable;\n        this.zones = data.zones || [];\n        this.support_url = data.support_url || '';\n        this.map_id = data.map_id || '';\n        this.image = data.image || '';\n        this.configurations = data.configurations || [];\n        this.features = data.features || [];\n        this.response_status = data.response_status;\n        this.level = data.level || new BuildingLevel();\n        this.availability = data.availability || [];\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { querySystems } from '@placeos/ts-client';\nimport { first, map } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { Space } from './space.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SpacesService {\n    /** Subject to store list of spaces */\n    private _list = new BehaviorSubject<Space[]>([]);\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n    /** Observable of the initialised state of the object */\n    public readonly initialised = this._initialised.asObservable();\n    /** Observable for list of spaces */\n    public readonly list = this._list.asObservable();\n    /** Default predicate for filter method */\n    protected _compare = (space: Space) =>\n        space.zones.includes(this._org.building.id);\n\n    /** List of available spaces */\n    public get space_list(): Space[] {\n        return this._list.getValue();\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.loadSpaces());\n    }\n\n    /**\n     * Get a filtered list of the available spaces\n     * @param predicate Predicate for filtering spaces\n     */\n    public filter(predicate: (_: Space) => boolean = this._compare) {\n        return this._list.getValue().filter((_) => predicate(_));\n    }\n\n    /**\n     * Find space with given id/email\n     * @param id ID/Email address associated with the space\n     */\n    public find(id: string) {\n        return this._list\n            .getValue()\n            .find((space) => space.id === id || space.email === id);\n    }\n\n    private async loadSpaces(): Promise<void> {\n        const systems = await querySystems({\n            zone_id: this._org.organisation.id,\n            limit: 5000,\n        })\n            .pipe(map((i) => i.data))\n            .toPromise();\n        const space_list = systems.map(\n            (sys) =>\n                new Space({\n                    ...(sys as any),\n                    level: this._org.levelWithID([...sys.zones]),\n                })\n        );\n        // Remove spaces without a map ID\n        const valid_spaces = space_list.filter((space) => space.map_id);\n        this._list.next(valid_spaces);\n        this._initialised.next(true);\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { Point } from '@placeos/svg-viewer';\nimport { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n","import { del, get, patch } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from './user.class';\nimport { Observable } from 'rxjs';\n\nconst GUEST_ENDPOINT = '/api/staff/v1/guests';\n\nexport interface GuestsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n}\n\n/**\n * Search guests\n * @param q Search string for filtering guests\n */\nexport function searchGuests(q: string): Observable<GuestUser[]> {\n    const query = toQueryString({ q });\n    return get(`${GUEST_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * List guests\n * @param q Parameters to pass to the API request\n */\nexport function queryGuests(q: GuestsQueryParams): Observable<GuestUser[]> {\n    const query = toQueryString({ ...q });\n    return get(`${GUEST_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * Get guest details\n * @param id ID of the guest\n */\nexport function showGuest(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Update guest metadata\n * @param id ID of the guest\n * @param data New metadata state\n */\nexport function updateGuest(id: string, data: Partial<GuestUser>) {\n    return patch(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, data).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Remove a guest\n * @param id ID of the guest to remove\n */\nexport function removeGuest(id: string) {\n    return del(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * List upcoming meetings for a guest\n * @param id ID of the guest\n */\nexport function listGuestMeetings(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}/meetings`).pipe(\n        map((list) => list.map((item) => new CalendarEvent(item)))\n    );\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n","import { MapLocation } from './location.class';\nimport { USER_DOMAIN } from './user.utilities';\n\nexport interface UserComplete extends User {\n    sys_admin?: boolean;\n    support?: boolean;\n}\n\nexport type EventResponseStatus =\n    | 'needsAction'\n    | 'declined'\n    | 'tentative'\n    | 'accepted'\n    | '';\n\nexport class User {\n    /** ID of the user */\n    public readonly id: string;\n    /** Display name of the user */\n    public readonly name: string;\n    /** Email address of the user */\n    public readonly email: string;\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Username of the user */\n    public readonly username: string;\n    /** Phone number of the user */\n    public readonly phone: string;\n    /** Organisation associated with the user */\n    public readonly organisation: string;\n    /** Details about the user */\n    public readonly notes: string;\n    /** URL to the user's photo */\n    public readonly photo: string;\n    /** Whether user attendance is required */\n    public readonly required: boolean;\n    /** Whether user is the event organiser */\n    public readonly organizer: boolean;\n    /** Whether the users is expected for an event */\n    public readonly response_status: EventResponseStatus;\n    /** Whether the users is expected for an event */\n    public visit_expected: boolean;\n    /** Whether user has been checked in */\n    public readonly checked_in: boolean;\n    /** Department that the user belongs to in the organisation */\n    public readonly groups: string[];\n    /** Extra metadata associated with the user */\n    public readonly extension_data: Record<string, any>;\n    /** Whether user is external from the organisation */\n    public readonly is_external: boolean;\n    /** Whether user needs assistance when attending an event */\n    public readonly assistance_required: boolean;\n\n    constructor(data: Partial<UserComplete> = {}) {\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.email = data.email || '';\n        this.first_name = data.first_name || data.name || '';\n        this.last_name = data.last_name || '';\n        this.phone = data.phone || '';\n        this.organisation = data.organisation || '';\n        this.notes = data.notes || '';\n        this.photo = data.photo || '';\n        this.username = data.username || '';\n        this.organizer = !!data.organizer;\n        this.groups = data.groups || [];\n        this.checked_in = !!data.checked_in;\n        this.required = data.required ?? true;\n        this.response_status = data.response_status || '';\n        const groups = data.groups || [];\n        if (data.sys_admin) groups.push('placeos_admin');\n        if (data.support) groups.push('placeos_support');\n        this.groups = groups;\n        this.extension_data = data.extension_data || {};\n        this.extension_data.assistance_required =\n            data.assistance_required || this.extension_data.assistance_required;\n        this.is_external = !this.email?.endsWith(`${USER_DOMAIN}`);\n        this.visit_expected = data.visit_expected ?? true;\n        this.assistance_required = !!this.extension_data?.assistance_required;\n    }\n}\n\nexport class GuestUser extends User {\n    /** Preferred beverage of the guest */\n    public readonly preferred_beverage: string;\n    /** Whether guest has accepted the terms and conditions */\n    public readonly accepted_terms_conditions: boolean;\n\n    constructor(data: Partial<GuestUser> = {}) {\n        super(data);\n        this.preferred_beverage = data.preferred_beverage || '';\n        this.accepted_terms_conditions =\n            data.accepted_terms_conditions || false;\n    }\n}\n\nexport class StaffUser extends User {\n    /** Number associated with the user's access card */\n    public readonly card_number: string;\n    /** ID of the user */\n    public readonly staff_id: string;\n    /** Whether user is logged in */\n    public readonly is_logged_in: boolean;\n    /** Location of the user */\n    public readonly location: Record<string, MapLocation>;\n\n    constructor(data: Partial<StaffUser> = {}) {\n        super(data);\n        this.card_number = data.card_number || '';\n        this.staff_id = data.staff_id || '';\n        this.location = data.location || {};\n        this.is_logged_in = !!data.is_logged_in;\n    }\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { predictableRandomInt, unique } from '../../../common/src/lib/general';\n\nimport { GuestUser, User } from './user.class';\n\nlet USER_COUNT = 0;\n\ntype HashMap<T = any> = Record<string, T>;\n\nexport let USER_DOMAIN = 'place.tech';\n\nexport function setInternalUserDomain(domain: string) {\n    USER_DOMAIN = domain;\n}\n\nconst USER_EMAILS: string[] = [];\n/* istanbul ignore next */\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(\n    id?: string,\n    name?: string,\n    external?: boolean\n): HashMap {\n    if (!id) {\n        id = `user-${USER_COUNT++}`;\n    }\n    if (!name) {\n        name = `User ${USER_COUNT}`;\n    }\n    if (external === undefined) {\n        external = !(predictableRandomInt(99999) % 2);\n    }\n    const organisation = external ? `Fake Co.` : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(\n        predictableRandomInt(4) + 1,\n        USER_EMAILS.length\n    );\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[predictableRandomInt(USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name.split(' ').join('.').toLowerCase()}@${\n        external ? 'not-' : ''\n    }${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: `(02) 4567 8901`,\n        visitor: external,\n        organisation: {\n            id: organisation.split(' ').join('.').toLowerCase(),\n            name: organisation,\n        },\n        department: `Department ${predictableRandomInt(10)}`,\n        staff_code: predictableRandomInt(999_999),\n        delegates,\n        image: `${id}.png`,\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        assistance_required: new FormControl(user.assistance_required || false),\n        visit_expected: new FormControl(user.visit_expected ?? true),\n    };\n\n    // Generate form group for the user\n    const form = new FormGroup(fields);\n    return form;\n}\n\nexport function generateGuestForm(\n    user: GuestUser,\n    host: string = ''\n): FormGroup {\n    const fields: HashMap<FormControl> = {\n        name: new FormControl(user.name || ''),\n        email: new FormControl(user.email || '', [\n            Validators.email,\n            Validators.required,\n        ]),\n        organisation: new FormControl(\n            user.organisation || '',\n            Validators.required\n        ),\n        phone: new FormControl(user.phone || ''),\n        host: new FormControl(host || '', [Validators.required]),\n    };\n    // Generate form group for the guest\n    const form = new FormGroup(fields);\n    return form;\n}\n"],"sourceRoot":"webpack:///"}