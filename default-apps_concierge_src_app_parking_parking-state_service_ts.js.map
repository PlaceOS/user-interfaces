{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":"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","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts","./libs/bookings/src/index.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService, ParkingSpace } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    getInvalidFields,\n    notify,\n    notifyError,\n} from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"date\">Date</label>\n                <a-date-field formControlName=\"date\"></a-date-field>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    user_id: user.id || user.email,\n                    attendees: [user],\n                });\n            }),\n        );\n        this.form.patchValue({\n            all_day: true,\n            booking_type: 'parking',\n            user: (this._data.user as any) || currentUser(),\n        });\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_id: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.space) {\n            this.form.patchValue({ resources: [this._data.space] });\n        }\n        if (this._data.date) {\n            this.timeout(\n                'init_date',\n                () => {\n                    this.form.patchValue({ date: this._data.date });\n                    if (!this._data.allow_time_changes) {\n                        this.form.get('date').disable();\n                    }\n                },\n                300,\n            );\n            if (!this._data.allow_time_changes) {\n                this.subscription(\n                    'form_change',\n                    this.form.valueChanges.subscribe((v) => {\n                        this.timeout(\n                            'disable_date',\n                            () =>\n                                this.form\n                                    .get('date')\n                                    .disable({ emitEvent: false }),\n                            50,\n                        );\n                    }),\n                );\n            }\n        }\n    }\n\n    public async postForm() {\n        this.form.markAllAsTouched();\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        if (this._data.external_user) {\n            this.form.patchValue({ user_id: undefined });\n        }\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            notifyError(e);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { showStaff, User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\nimport { showUser } from '@placeos/ts-client';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>,\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public async ngOnInit() {\n        if (this._data.assigned_to) {\n            const user = await showStaff(this._data.assigned_to).toPromise();\n            if (user) {\n                this.form.patchValue({\n                    assigned_user: user,\n                    assigned_to: user.email,\n                    assigned_name: user.name,\n                });\n            }\n        }\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = { ...this.form.getRawValue() };\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n            delete value.assigned_user;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    approveBookingInstance,\n    Booking,\n    checkinBooking,\n    checkinBookingInstance,\n    queryBookings,\n    RecurrenceDays,\n    rejectBooking,\n    rejectBookingInstance,\n    removeBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n    zone_id?: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([_, bld]) => {\n            const levels = this._org.levels.filter((_) =>\n                _.tags.includes('parking'),\n            );\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter((lvl) =>\n                    bld_ids.includes(lvl.parent_id),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter((lvl) => lvl.parent_id === bld.id);\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of([] as ParkingSpace[]);\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces',\n            ).pipe(\n                map(\n                    ({ details }) =>\n                        (details instanceof Array ? details : []).map(\n                            (space) =>\n                                ({\n                                    ...space,\n                                    zone_id: options.zones[0] || levels[0]?.id,\n                                }) as ParkingSpace,\n                        ) as ParkingSpace[],\n                ),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n                include_checked_out: true,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase(),\n                        );\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                }),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 2 * 60 * 1000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space: ParkingSpace = {} as any) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone =\n            this._options.getValue().zones[0] ||\n            space.zone_id ||\n            this._org.levelsForBuilding()[0]?.id;\n        const new_space = {\n            ...state.metadata,\n            zone,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (space.assigned_to && space.assigned_to !== new_space.assigned_to) {\n            const booking_list = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n                email: new_space.assigned_to,\n                include_checked_out: true,\n            }).toPromise();\n            const filtered = booking_list.filter(\n                (_) => _.asset_id === space.id,\n            );\n            await Promise.all(\n                filtered.map((_) => removeBooking(_.id).toPromise()),\n            );\n        }\n        if (\n            space.assigned_to !== new_space.assigned_to &&\n            new_space.assigned_to\n        ) {\n            await saveBooking(\n                new Booking({\n                    user_id: new_space.assigned_to,\n                    user_email: new_space.assigned_to,\n                    booking_start: getUnixTime(startOfDay(Date.now())),\n                    booking_end: getUnixTime(endOfDay(Date.now())),\n                    type: 'parking',\n                    booking_type: 'parking',\n                    asset_id: new_space.id,\n                    asset_name: new_space.name,\n                    recurrence_type: 'daily',\n                    recurrence_days:\n                        RecurrenceDays.MONDAY |\n                        RecurrenceDays.TUESDAY |\n                        RecurrenceDays.WEDNESDAY |\n                        RecurrenceDays.THURSDAY |\n                        RecurrenceDays.FRIDAY,\n                    zones: unique([\n                        this._org.organisation.id,\n                        this._org.region?.id,\n                        this._org.building?.id,\n                        new_space.zone_id ||\n                            new_space.zone?.id ||\n                            new_space.zone,\n                    ]),\n                    extension_data: {\n                        asset_name: new_space.name,\n                    },\n                }),\n            ).toPromise();\n        }\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._org.building.id;\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n        this._change.next(Date.now());\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        {\n            user,\n            link_id,\n            date,\n            space,\n            allow_time_changes,\n            external_user,\n        }: {\n            user?: User;\n            link_id?: string;\n            date?: number;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        } = {},\n    ) {\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const spaces = await this.spaces.pipe(take(1)).toPromise();\n            if (!space && reservation?.asset_id) {\n                space = spaces.find((_) => _.id === reservation.asset_id);\n            }\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                    space,\n                    allow_time_changes,\n                    external_user,\n                },\n            });\n            ref.afterClosed().subscribe((id) => resolve(id));\n        });\n    }\n\n    public async setBookingCheckinState(\n        booking: Booking,\n        state: boolean = true,\n    ) {\n        const promise = (\n            booking.instance\n                ? checkinBookingInstance(booking.id, booking.instance, state)\n                : checkinBooking(booking.id, state)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error setting checkin state of parking booking')\n            : notifySuccess(\n                  `${state ? 'Checked in to' : 'Checked out of'} parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async approveBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? approveBookingInstance(booking.id, booking.instance)\n                : approveBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error approving in parking booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async rejectBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? rejectBookingInstance(booking.id, booking.instance)\n                : rejectBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error rejecting in parking booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM dd')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>,\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            }),\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","export * from './lib/bookings.module';\nexport * from './lib/booking-form.service';\nexport * from './lib/booking.class';\nexport * from './lib/booking.utilities';\nexport * from './lib/bookings.fn';\nexport * from './lib/bookings.module';\nexport * from './lib/desk.service';\nexport * from './lib/lockers.service';\nexport * from './lib/booking-details-modal.component';\nexport * from './lib/booking-card.component';\nexport * from './lib/parking-select-modal/parking-select-modal.component';\n\nexport * from './lib/parking.service';\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { StaffUser, User } from 'libs/users/src/lib/user.class';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"names":["Validators","MAT_DIALOG_DATA","MatDialogRef","BookingFormService","AsyncHandler","currentUser","notifyError","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵtemplate","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_span_25_Template","ɵɵproperty","ctx_r0","form","ɵɵadvance","user","ɵɵlistener","ParkingBookingModalComponent_footer_6_Template_button_click_3_listener","ɵɵrestoreView","_r2","ɵɵnextContext","ɵɵresetView","postForm","ParkingBookingModalComponent","id","value","constructor","_data","_booking_form","_dialog_ref","loading","date","ngOnInit","newForm","booking","setOptions","type","subscription","controls","valueChanges","subscribe","patchValue","user_name","name","user_email","email","user_id","attendees","all_day","booking_type","plate_number","setValidators","required","disable","level","zone_id","link_id","parent_id","space","resources","timeout","allow_time_changes","get","v","emitEvent","_this","_asyncToGenerator","markAllAsTouched","updateValueAndValidity","valid","external_user","undefined","result","catch","e","close","_","ɵɵdirectiveInject","i1","i2","_2","selectors","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","ParkingBookingModalComponent_Template","rf","ctx","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","ɵɵtemplateRefExtractor","ɵɵtextInterpolate1","load_state_r3","EventEmitter","FormControl","FormGroup","showStaff","ParkingSpaceModalComponent_main_5_Template_button_click_17_listener","_r1","ctx_r1","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent_main_5_Template_button_click_27_listener","ParkingSpaceModalComponent","event","map_id","notes","map_rotation","toPromise","getRawValue","disableClose","emit","reason","metadata","outputs","ParkingSpaceModalComponent_Template","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","MatDialog","approveBooking","approveBookingInstance","Booking","checkinBooking","checkinBookingInstance","queryBookings","RecurrenceDays","rejectBooking","rejectBookingInstance","removeBooking","saveBooking","notifySuccess","openConfirmModal","SettingsService","unique","OrganisationService","showMetadata","updateMetadata","randomInt","endOfDay","format","getUnixTime","startOfDay","BehaviorSubject","combineLatest","of","debounceTime","filter","first","map","shareReplay","switchMap","take","tap","ParkingUserModalComponent","ParkingStateService","_org","_dialog","_settings","_poll","_change","_options","Date","now","search","zones","_loading","levels","active_region","active_building","pipe","bld","tags","includes","blds","buildingsForRegion","bld_ids","list","lvl","display_name","find","spaces","options","next","getValue","details","Array","users","bookings","period_start","period_end","length","join","region","include_checked_out","toLowerCase","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","ref","open","data","state","Promise","race","afterClosed","componentInstance","zone","levelsForBuilding","new_space","idx","findIndex","booking_list","filtered","asset_id","all","booking_start","booking_end","asset_name","recurrence_type","recurrence_days","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","organisation","building","push","new_space_list","description","removeSpace","_this2","title","content","icon","editUser","_this3","new_user","removeUser","_this4","editReservation","reservation","_this5","_ref","resolve","_x","apply","arguments","setBookingCheckinState","_this6","promise","instance","success","_this7","_this8","ɵɵinject","i3","factory","ɵfac","providedIn","ParkingUserModalComponent_main_5_Template_button_click_3_listener","phone","ɵɵi18n","ParkingUserModalComponent_footer_6_Template_button_click_3_listener","_r3","car_color","deny","i18n_0","ngI18nClosureMode","$localize","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template","load_state_r4","DeskConfirmModalComponent","DeskQuestionsModalComponent","DesksService","can_set_date","error_on_host","bookDesk","desks","host","levelWithID","desk_list","d","desk","makeDeskBooking","valueOf","for_user","location","booking_data","Math","floor","groups"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}