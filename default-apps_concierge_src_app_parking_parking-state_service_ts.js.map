{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":"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","names":["i0","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_span_25_Template","ctx_r0","form","user","_r2","postForm","ParkingBookingModalComponent","AsyncHandler","id","this","value","constructor","_data","_booking_form","_dialog_ref","super","loading","date","ngOnInit","newForm","booking","setOptions","type","subscription","controls","valueChanges","subscribe","patchValue","user_name","name","user_email","email","user_id","attendees","all_day","booking_type","currentUser","plate_number","setValidators","Validators","required","disable","level","zone_id","link_id","parent_id","space","resources","timeout","allow_time_changes","get","v","emitEvent","_this","_asyncToGenerator","updateValueAndValidity","valid","external_user","undefined","result","catch","e","notifyError","close","static","t","MAT_DIALOG_DATA","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","features","decls","vars","consts","template","rf","ctx","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","load_state_r3","_r1","ctx_r1","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent","event","EventEmitter","FormGroup","FormControl","map_id","notes","map_rotation","showStaff","toPromise","getRawValue","disableClose","emit","reason","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_2__","outputs","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","ParkingStateService","_org","_dialog","_settings","_poll","BehaviorSubject","_change","_options","Date","now","search","zones","_loading","levels","combineLatest","active_region","active_building","pipe","map","_","bld","filter","tags","includes","blds","buildingsForRegion","bld_ids","list","lvl","display_name","find","spaces","switchMap","options","next","getValue","showMetadata","details","Array","of","tap","shareReplay","users","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","length","join","region","include_checked_out","toLowerCase","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","ref","open","data","state","Promise","race","afterClosed","componentInstance","first","zone","levelsForBuilding","new_space","randomInt","take","idx","findIndex","filtered","asset_id","all","removeBooking","saveBooking","Booking","booking_start","booking_end","asset_name","recurrence_type","recurrence_days","RecurrenceDays","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","unique","organisation","building","push","new_space_list","updateMetadata","description","removeSpace","_this2","openConfirmModal","title","content","icon","editUser","_this3","ParkingUserModalComponent","new_user","removeUser","_this4","editReservation","reservation","_this5","_ref","resolve","_x","apply","arguments","setBookingCheckinState","_this6","success","instance","checkinBookingInstance","checkinBooking","notifySuccess","format","approveBooking","_this7","approveBookingInstance","rejectBooking","_this8","rejectBookingInstance","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__","jDH","factory","ɵfac","providedIn","phone","_r3","car_color","deny","i18n_0","$localize","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template","load_state_r4"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService, ParkingSpace } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    getInvalidFields,\n    notify,\n    notifyError,\n} from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"date\">Date</label>\n                <a-date-field formControlName=\"date\"></a-date-field>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    user_id: user.id || user.email,\n                    attendees: [user],\n                });\n            }),\n        );\n        this.form.patchValue({\n            all_day: true,\n            booking_type: 'parking',\n            user: (this._data.user as any) || currentUser(),\n        });\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_id: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.space) {\n            this.form.patchValue({ resources: [this._data.space] });\n        }\n        if (this._data.date) {\n            this.timeout(\n                'init_date',\n                () => {\n                    this.form.patchValue({ date: this._data.date });\n                    if (!this._data.allow_time_changes) {\n                        this.form.get('date').disable();\n                    }\n                },\n                300,\n            );\n            if (!this._data.allow_time_changes) {\n                this.subscription(\n                    'form_change',\n                    this.form.valueChanges.subscribe((v) => {\n                        this.timeout(\n                            'disable_date',\n                            () =>\n                                this.form\n                                    .get('date')\n                                    .disable({ emitEvent: false }),\n                            50,\n                        );\n                    }),\n                );\n            }\n        }\n    }\n\n    public async postForm() {\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        if (this._data.external_user) {\n            this.form.patchValue({ user_id: undefined });\n        }\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            notifyError(e);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { showStaff, User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\nimport { showUser } from '@placeos/ts-client';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>,\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public async ngOnInit() {\n        if (this._data.assigned_to) {\n            const user = await showStaff(this._data.assigned_to).toPromise();\n            if (user) {\n                this.form.patchValue({\n                    assigned_user: user,\n                    assigned_to: user.email,\n                    assigned_name: user.name,\n                });\n            }\n        }\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = { ...this.form.getRawValue() };\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n            delete value.assigned_user;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    approveBookingInstance,\n    Booking,\n    checkinBooking,\n    checkinBookingInstance,\n    queryBookings,\n    RecurrenceDays,\n    rejectBooking,\n    rejectBookingInstance,\n    removeBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n    zone_id?: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([_, bld]) => {\n            const levels = this._org.levels.filter((_) =>\n                _.tags.includes('parking'),\n            );\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter((lvl) =>\n                    bld_ids.includes(lvl.parent_id),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter((lvl) => lvl.parent_id === bld.id);\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of([] as ParkingSpace[]);\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces',\n            ).pipe(\n                map(\n                    ({ details }) =>\n                        (details instanceof Array ? details : []).map(\n                            (space) =>\n                                ({\n                                    ...space,\n                                    zone_id: options.zones[0] || levels[0]?.id,\n                                }) as ParkingSpace,\n                        ) as ParkingSpace[],\n                ),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n                include_checked_out: true,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase(),\n                        );\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                }),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 2 * 60 * 1000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space: ParkingSpace = {} as any) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone =\n            this._options.getValue().zones[0] ||\n            space.zone_id ||\n            this._org.levelsForBuilding()[0]?.id;\n        const new_space = {\n            ...state.metadata,\n            zone,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (space.assigned_to && space.assigned_to !== new_space.assigned_to) {\n            const booking_list = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n                email: new_space.assigned_to,\n            }).toPromise();\n            const filtered = booking_list.filter(\n                (_) => _.asset_id === space.id,\n            );\n            await Promise.all(\n                filtered.map((_) => removeBooking(_.id).toPromise()),\n            );\n        }\n        if (\n            space.assigned_to !== new_space.assigned_to &&\n            new_space.assigned_to\n        ) {\n            await saveBooking(\n                new Booking({\n                    user_id: new_space.assigned_to,\n                    user_email: new_space.assigned_to,\n                    booking_start: getUnixTime(startOfDay(Date.now())),\n                    booking_end: getUnixTime(endOfDay(Date.now())),\n                    type: 'parking',\n                    booking_type: 'parking',\n                    asset_id: new_space.id,\n                    asset_name: new_space.name,\n                    recurrence_type: 'daily',\n                    recurrence_days:\n                        RecurrenceDays.MONDAY |\n                        RecurrenceDays.TUESDAY |\n                        RecurrenceDays.WEDNESDAY |\n                        RecurrenceDays.THURSDAY |\n                        RecurrenceDays.FRIDAY,\n                    zones: unique([\n                        this._org.organisation.id,\n                        this._org.region?.id,\n                        this._org.building?.id,\n                        new_space.zone_id ||\n                            new_space.zone?.id ||\n                            new_space.zone,\n                    ]),\n                    extension_data: {\n                        asset_name: new_space.name,\n                    },\n                }),\n            ).toPromise();\n        }\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._options.getValue().zones[0];\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        {\n            user,\n            link_id,\n            date,\n            space,\n            allow_time_changes,\n            external_user,\n        }: {\n            user?: User;\n            link_id?: string;\n            date?: number;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        } = {},\n    ) {\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const spaces = await this.spaces.pipe(take(1)).toPromise();\n            if (!space && reservation?.asset_id) {\n                space = spaces.find((_) => _.id === reservation.asset_id);\n            }\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                    space,\n                    allow_time_changes,\n                    external_user,\n                },\n            });\n            ref.afterClosed().subscribe((id) => resolve(id));\n        });\n    }\n\n    public async setBookingCheckinState(\n        booking: Booking,\n        state: boolean = true,\n    ) {\n        const promise = (\n            booking.instance\n                ? checkinBookingInstance(booking.id, booking.instance, state)\n                : checkinBooking(booking.id, state)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error setting checkin state of parking booking')\n            : notifySuccess(\n                  `${state ? 'Checked in to' : 'Checked out of'} parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async approveBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? approveBookingInstance(booking.id, booking.instance)\n                : approveBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error approving in parking booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async rejectBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? rejectBookingInstance(booking.id, booking.instance)\n                : rejectBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error rejecting in parking booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM dd')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>,\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            }),\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n"],"x_google_ignoreList":[]}