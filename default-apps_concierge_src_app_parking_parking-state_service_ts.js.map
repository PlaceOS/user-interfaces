{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":"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","names":["i0","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_span_25_Template","ctx_r0","form","user","_r2","postForm","ParkingBookingModalComponent","AsyncHandler","id","this","value","constructor","_data","_booking_form","_dialog_ref","super","loading","date","ngOnInit","newForm","booking","setOptions","type","subscription","controls","valueChanges","subscribe","patchValue","user_name","name","user_email","email","user_id","attendees","all_day","booking_type","currentUser","plate_number","setValidators","Validators","required","disable","level","zone_id","link_id","parent_id","space","resources","timeout","allow_time_changes","get","v","emitEvent","_this","_asyncToGenerator","updateValueAndValidity","valid","result","catch","e","notifyError","close","static","t","MAT_DIALOG_DATA","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","features","decls","vars","consts","template","rf","ctx","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","load_state_r3","_r1","ctx_r1","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent","event","EventEmitter","FormGroup","FormControl","map_id","notes","map_rotation","showStaff","toPromise","getRawValue","disableClose","emit","reason","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_2__","outputs","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","ParkingStateService","_org","_dialog","_settings","_poll","BehaviorSubject","_change","_options","Date","now","search","zones","_loading","levels","combineLatest","active_region","active_building","pipe","map","_","bld","filter","tags","includes","blds","buildingsForRegion","bld_ids","list","lvl","display_name","find","spaces","switchMap","options","next","getValue","showMetadata","details","Array","of","tap","shareReplay","users","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","length","join","region","include_checked_out","toLowerCase","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","ref","open","data","state","Promise","race","afterClosed","componentInstance","first","zone","levelsForBuilding","new_space","randomInt","take","idx","findIndex","filtered","asset_id","all","removeBooking","saveBooking","Booking","booking_start","booking_end","asset_name","recurrence_type","recurrence_days","RecurrenceDays","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","unique","organisation","building","push","new_space_list","updateMetadata","description","removeSpace","_this2","openConfirmModal","title","content","icon","editUser","_this3","console","log","ParkingUserModalComponent","new_user","removeUser","_this4","editReservation","reservation","_this5","_ref","resolve","_x","apply","arguments","approveBooking","_this6","success","notifySuccess","format","rejectBooking","_this7","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__","jDH","factory","ɵfac","providedIn","phone","_r3","car_color","deny","i18n_0","$localize","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template","load_state_r4"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService, ParkingSpace } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    notify,\n    notifyError,\n} from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"date\">Date</label>\n                <a-date-field formControlName=\"date\"></a-date-field>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    user_id: user.id || user.email,\n                    attendees: [user],\n                });\n            }),\n        );\n        this.form.patchValue({\n            all_day: true,\n            booking_type: 'parking',\n            user: (this._data.user as any) || currentUser(),\n        });\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_id: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.space) {\n            this.form.patchValue({ resources: [this._data.space] });\n        }\n        if (this._data.date) {\n            this.timeout(\n                'init_date',\n                () => {\n                    this.form.patchValue({ date: this._data.date });\n                    if (!this._data.allow_time_changes) {\n                        this.form.get('date').disable();\n                    }\n                },\n                300,\n            );\n            if (!this._data.allow_time_changes) {\n                this.subscription(\n                    'form_change',\n                    this.form.valueChanges.subscribe((v) => {\n                        this.timeout(\n                            'disable_date',\n                            () =>\n                                this.form\n                                    .get('date')\n                                    .disable({ emitEvent: false }),\n                            50,\n                        );\n                    }),\n                );\n            }\n        }\n    }\n\n    public async postForm() {\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            notifyError(e);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { showStaff, User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\nimport { showUser } from '@placeos/ts-client';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>,\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public async ngOnInit() {\n        if (this._data.assigned_to) {\n            const user = await showStaff(this._data.assigned_to).toPromise();\n            if (user) {\n                this.form.patchValue({\n                    assigned_user: user,\n                    assigned_to: user.email,\n                    assigned_name: user.name,\n                });\n            }\n        }\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = { ...this.form.getRawValue() };\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n            delete value.assigned_user;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    RecurrenceDays,\n    rejectBooking,\n    removeBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n    zone_id?: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([_, bld]) => {\n            const levels = this._org.levels.filter((_) =>\n                _.tags.includes('parking'),\n            );\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter((lvl) =>\n                    bld_ids.includes(lvl.parent_id),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter((lvl) => lvl.parent_id === bld.id);\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of([] as ParkingSpace[]);\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces',\n            ).pipe(\n                map(\n                    ({ details }) =>\n                        (details instanceof Array ? details : []).map(\n                            (space) =>\n                                ({\n                                    ...space,\n                                    zone_id: options.zones[0] || levels[0]?.id,\n                                }) as ParkingSpace,\n                        ) as ParkingSpace[],\n                ),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n                include_checked_out: true,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase(),\n                        );\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                }),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 2 * 60 * 1000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space: ParkingSpace = {} as any) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone =\n            this._options.getValue().zones[0] ||\n            space.zone_id ||\n            this._org.levelsForBuilding()[0]?.id;\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (space.assigned_to && space.assigned_to !== new_space.assigned_to) {\n            const booking_list = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n                email: new_space.assigned_to,\n            }).toPromise();\n            const filtered = booking_list.filter(\n                (_) => _.asset_id === space.id,\n            );\n            await Promise.all(\n                filtered.map((_) => removeBooking(_.id).toPromise()),\n            );\n        }\n        if (\n            space.assigned_to !== new_space.assigned_to &&\n            new_space.assigned_to\n        ) {\n            await saveBooking(\n                new Booking({\n                    user_id: new_space.assigned_to,\n                    user_email: new_space.assigned_to,\n                    booking_start: getUnixTime(startOfDay(Date.now())),\n                    booking_end: getUnixTime(endOfDay(Date.now())),\n                    type: 'parking',\n                    booking_type: 'parking',\n                    asset_id: new_space.id,\n                    asset_name: new_space.name,\n                    recurrence_type: 'daily',\n                    recurrence_days:\n                        RecurrenceDays.MONDAY |\n                        RecurrenceDays.TUESDAY |\n                        RecurrenceDays.WEDNESDAY |\n                        RecurrenceDays.THURSDAY |\n                        RecurrenceDays.FRIDAY,\n                    zones: unique([\n                        this._org.organisation.id,\n                        this._org.region?.id,\n                        this._org.building?.id,\n                        space.zone_id,\n                    ]),\n                }),\n            ).toPromise();\n        }\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        console.log('Edit User', user);\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._options.getValue().zones[0];\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        {\n            user,\n            link_id,\n            date,\n            space,\n            allow_time_changes,\n        }: {\n            user?: User;\n            link_id?: string;\n            date?: number;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n        } = {},\n    ) {\n        console.log('Reservation:', space);\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const spaces = await this.spaces.pipe(take(1)).toPromise();\n            if (!space && reservation?.asset_id) {\n                space = spaces.find((_) => _.id === reservation.asset_id);\n            }\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                    space,\n                    allow_time_changes,\n                },\n            });\n            ref.afterClosed().subscribe((id) => resolve(id));\n        });\n    }\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM dd')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n        console.log('User Modal', this.form.value, _data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            })\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n"],"x_google_ignoreList":[]}