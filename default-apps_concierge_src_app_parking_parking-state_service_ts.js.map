{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":"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","names":["i0","$event","_r1","ctx_r1","form","patchValue","date","value","_c0","use_24hr","max_duration","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_mat_checkbox_21_Template","ParkingBookingModalComponent_main_5_div_22_Template","ParkingBookingModalComponent_main_5_span_28_Template","user","allow_all_day","all_day","_r3","postForm","ParkingBookingModalComponent","AsyncHandler","id","this","end_date","endOfDay","addDays","Date","now","_settings","get","constructor","_data","_booking_form","_dialog_ref","super","loading","ngOnInit","newForm","booking","setOptions","type","subscription","controls","valueChanges","subscribe","user_name","name","user_email","email","attendees","booking_type","currentUser","plate_number","setValidators","Validators","required","disable","level","zone_id","link_id","parent_id","space","resources","timeout","allow_time_changes","v","emitEvent","_this","_asyncToGenerator","markAllAsTouched","updateValueAndValidity","valid","user_id","undefined","result","catch","e","notifyError","notifySuccess","close","static","__ngFactoryType__","MAT_DIALOG_DATA","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_7__","VBU","selectors","features","decls","vars","consts","i18n_0","$localize","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","ctx","load_state_r4","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent","event","EventEmitter","FormGroup","FormControl","map_id","notes","map_rotation","showStaff","toPromise","getRawValue","disableClose","emit","reason","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_2__","outputs","template","rf","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","load_state_r3","ParkingStateService","_org","_dialog","_poll","BehaviorSubject","_change","_options","search","zones","_loading","levels","combineLatest","active_region","active_building","pipe","map","_","bld","filter","tags","includes","blds","buildingsForRegion","bld_ids","list","lvl","display_name","find","spaces","switchMap","options","next","getValue","showMetadata","details","Array","of","tap","shareReplay","users","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","length","join","region","include_checked_out","toLowerCase","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","ref","open","data","state","Promise","race","afterClosed","componentInstance","first","zone","levelsForBuilding","new_space","randomInt","take","idx","findIndex","filtered","asset_id","all","removeBooking","saveBooking","Booking","booking_start","booking_end","asset_name","recurrence_type","recurrence_days","RecurrenceDays","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","unique","organisation","building","push","new_space_list","updateMetadata","description","removeSpace","_this2","openConfirmModal","title","content","icon","editUser","_this3","ParkingUserModalComponent","new_user","removeUser","_this4","editReservation","reservation","external_user","_this5","_ref","resolve","_x","apply","arguments","setBookingCheckinState","_this6","success","instance","checkinBookingInstance","checkinBooking","format","approveBooking","_this7","approveBookingInstance","rejectBooking","_this8","rejectBookingInstance","_angular_core__WEBPACK_IMPORTED_MODULE_23__","jDH","factory","ɵfac","providedIn","phone","car_color","deny","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService, ParkingSpace } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    getInvalidFields,\n    notify,\n    notifyError,\n    notifySuccess,\n    SettingsService,\n} from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\nimport { addDays, endOfDay } from 'date-fns';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"relative\">\n                    <label for=\"date\">Date</label>\n                    <a-date-field formControlName=\"date\"></a-date-field>\n                    <mat-checkbox\n                        formControlName=\"all_day\"\n                        *ngIf=\"allow_all_day\"\n                        class=\"absolute -top-2 right-0\"\n                        i18n\n                    >\n                        All Day\n                    </mat-checkbox>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"!form.value.all_day\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n\n                            >Start Time<span>*</span></label\n                        >\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [use_24hr]=\"use_24hr\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3 relative\">\n                        <label for=\"end-time\" i18n\n                            >End Time<span>*</span></label\n                        >\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form?.value?.date\"\n                            [max]=\"max_duration\"\n                            [use_24hr]=\"use_24hr\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.parking.available_period') || 7,\n            ),\n        );\n    }\n\n    public get max_duration() {\n        return this._settings.get('app.bookings.max_duration') || 480;\n    }\n\n    public get allow_all_day() {\n        return this._settings.get('app.parking.allow_all_day') || true;\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    attendees: [user],\n                });\n            }),\n        );\n        this.form.patchValue({\n            all_day: true,\n            booking_type: 'parking',\n        });\n        if (!this.form.value.user) {\n            this.form.patchValue({\n                user:\n                    (this._data.booking?.attendees[0] as any) || currentUser(),\n            });\n        }\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.space) {\n            this.form.patchValue({ resources: [this._data.space] });\n        }\n        if (this._data.date) {\n            this.timeout(\n                'init_date',\n                () => {\n                    this.form.patchValue({ date: this._data.date });\n                    if (!this._data.allow_time_changes) {\n                        this.form.get('date').disable();\n                    }\n                },\n                300,\n            );\n            if (!this._data.allow_time_changes) {\n                this.subscription(\n                    'form_change',\n                    this.form.valueChanges.subscribe((v) => {\n                        this.timeout(\n                            'disable_date',\n                            () =>\n                                this.form\n                                    .get('date')\n                                    .disable({ emitEvent: false }),\n                            50,\n                        );\n                    }),\n                );\n            }\n        }\n    }\n\n    public async postForm() {\n        this.form.markAllAsTouched();\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const id = this.form.value.id;\n        this.form.patchValue({ user_id: undefined });\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            notifyError(e);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        notifySuccess(\n            `Successfully ${id ? 'updated' : 'created'} parking reservation`,\n        );\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { showStaff, User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\nimport { showUser } from '@placeos/ts-client';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>,\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public async ngOnInit() {\n        if (this._data.assigned_to) {\n            const user = await showStaff(this._data.assigned_to).toPromise();\n            if (user) {\n                this.form.patchValue({\n                    assigned_user: user,\n                    assigned_to: user.email,\n                    assigned_name: user.name,\n                });\n            }\n        }\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = { ...this.form.getRawValue() };\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n            delete value.assigned_user;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    approveBookingInstance,\n    Booking,\n    checkinBooking,\n    checkinBookingInstance,\n    queryBookings,\n    RecurrenceDays,\n    rejectBooking,\n    rejectBookingInstance,\n    removeBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n    zone_id?: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([_, bld]) => {\n            const levels = this._org.levels.filter((_) =>\n                _.tags.includes('parking'),\n            );\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter((lvl) =>\n                    bld_ids.includes(lvl.parent_id),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter((lvl) => lvl.parent_id === bld.id);\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of([] as ParkingSpace[]);\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces',\n            ).pipe(\n                map(\n                    ({ details }) =>\n                        (details instanceof Array ? details : []).map(\n                            (space) =>\n                                ({\n                                    ...space,\n                                    zone_id: options.zones[0] || levels[0]?.id,\n                                }) as ParkingSpace,\n                        ) as ParkingSpace[],\n                ),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n                include_checked_out: true,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase(),\n                        );\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                }),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 2 * 60 * 1000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space: ParkingSpace = {} as any) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone =\n            this._options.getValue().zones[0] ||\n            space.zone_id ||\n            this._org.levelsForBuilding()[0]?.id;\n        const new_space = {\n            ...state.metadata,\n            zone,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (space.assigned_to && space.assigned_to !== new_space.assigned_to) {\n            const booking_list = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n                email: new_space.assigned_to,\n                include_checked_out: true,\n            }).toPromise();\n            const filtered = booking_list.filter(\n                (_) => _.asset_id === space.id,\n            );\n            await Promise.all(\n                filtered.map((_) => removeBooking(_.id).toPromise()),\n            );\n        }\n        if (\n            space.assigned_to !== new_space.assigned_to &&\n            new_space.assigned_to\n        ) {\n            await saveBooking(\n                new Booking({\n                    user_id: new_space.assigned_to,\n                    user_email: new_space.assigned_to,\n                    booking_start: getUnixTime(startOfDay(Date.now())),\n                    booking_end: getUnixTime(endOfDay(Date.now())),\n                    type: 'parking',\n                    booking_type: 'parking',\n                    asset_id: new_space.id,\n                    asset_name: new_space.name,\n                    recurrence_type: 'daily',\n                    recurrence_days:\n                        RecurrenceDays.MONDAY |\n                        RecurrenceDays.TUESDAY |\n                        RecurrenceDays.WEDNESDAY |\n                        RecurrenceDays.THURSDAY |\n                        RecurrenceDays.FRIDAY,\n                    zones: unique([\n                        this._org.organisation.id,\n                        this._org.region?.id,\n                        this._org.building?.id,\n                        new_space.zone_id ||\n                            new_space.zone?.id ||\n                            new_space.zone,\n                    ]),\n                    extension_data: {\n                        asset_name: new_space.name,\n                    },\n                }),\n            ).toPromise();\n        }\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._org.building.id;\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n        this._change.next(Date.now());\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        {\n            user,\n            link_id,\n            date,\n            space,\n            allow_time_changes,\n            external_user,\n        }: {\n            user?: User;\n            link_id?: string;\n            date?: number;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        } = {},\n    ) {\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const spaces = await this.spaces.pipe(take(1)).toPromise();\n            if (!space && reservation?.asset_id) {\n                space = spaces.find((_) => _.id === reservation.asset_id);\n            }\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                    space,\n                    allow_time_changes,\n                    external_user,\n                },\n            });\n            ref.afterClosed().subscribe((id) => {\n                resolve(id);\n                this._poll.next(Date.now());\n            });\n        });\n    }\n\n    public async setBookingCheckinState(\n        booking: Booking,\n        state: boolean = true,\n    ) {\n        const promise = (\n            booking.instance\n                ? checkinBookingInstance(booking.id, booking.instance, state)\n                : checkinBooking(booking.id, state)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error setting checkin state of parking booking')\n            : notifySuccess(\n                  `${state ? 'Checked in to' : 'Checked out of'} parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async approveBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? approveBookingInstance(booking.id, booking.instance)\n                : approveBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error approving in parking booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async rejectBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? rejectBookingInstance(booking.id, booking.instance)\n                : rejectBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error rejecting in parking booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM dd')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>,\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            }),\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n"],"x_google_ignoreList":[]}