{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":"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","names":["i0","$event","_r1","ctx_r1","form","patchValue","date","value","_c0","controls","disabled","use_24hr","tmp_7_0","getRawValue","max_duration","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_mat_checkbox_21_Template","ParkingBookingModalComponent_main_5_div_22_Template","ParkingBookingModalComponent_main_5_span_28_Template","user","allow_all_day","all_day","_r3","postForm","ParkingBookingModalComponent","AsyncHandler","id","this","end_date","endOfDay","addDays","Date","now","_settings","get","constructor","_data","_booking_form","_dialog_ref","super","loading","allow_time_changes","ngOnInit","newForm","booking","setOptions","type","subscription","valueChanges","subscribe","user_name","name","user_email","email","attendees","booking_type","duration","currentUser","plate_number","setValidators","Validators","required","disable","level","zone_id","link_id","parent_id","space","resources","timeout","v","emitEvent","_this","_asyncToGenerator","markAllAsTouched","updateValueAndValidity","valid","user_id","undefined","result","catch","e","notifyError","notifySuccess","close","static","__ngFactoryType__","MAT_DIALOG_DATA","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_7__","VBU","selectors","features","decls","vars","consts","i18n_0","$localize","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","ctx","load_state_r4","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent","event","EventEmitter","FormGroup","FormControl","map_id","notes","map_rotation","showStaff","toPromise","disableClose","emit","reason","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_2__","outputs","template","rf","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","load_state_r3","ParkingStateService","_org","_dialog","_poll","BehaviorSubject","_change","_options","search","zones","_loading","levels","combineLatest","active_region","active_building","pipe","map","_","bld","filter","tags","includes","blds","buildingsForRegion","bld_ids","list","lvl","display_name","find","spaces","switchMap","options","next","getValue","showMetadata","details","Array","of","tap","shareReplay","users","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","length","join","region","include_checked_out","toLowerCase","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","ref","open","data","state","Promise","race","afterClosed","componentInstance","first","zone","levelsForBuilding","new_space","randomInt","take","idx","findIndex","filtered","asset_id","all","removeBooking","saveBooking","Booking","booking_start","booking_end","asset_name","recurrence_type","recurrence_days","RecurrenceDays","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","unique","organisation","building","push","new_space_list","updateMetadata","description","removeSpace","_this2","openConfirmModal","title","content","icon","editUser","_this3","ParkingUserModalComponent","new_user","removeUser","_this4","editReservation","reservation","external_user","_this5","_ref","resolve","_x","apply","arguments","setBookingCheckinState","_this6","success","instance","checkinBookingInstance","checkinBooking","format","approveBooking","_this7","approveBookingInstance","rejectBooking","_this8","rejectBookingInstance","_angular_core__WEBPACK_IMPORTED_MODULE_23__","jDH","factory","ɵfac","providedIn","phone","car_color","deny","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService, ParkingSpace } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    notifyError,\n    notifySuccess,\n    SettingsService,\n} from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\nimport { addDays, endOfDay } from 'date-fns';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"relative\">\n                    <label for=\"date\">Date</label>\n                    <a-date-field formControlName=\"date\"></a-date-field>\n                    <mat-checkbox\n                        formControlName=\"all_day\"\n                        *ngIf=\"allow_all_day\"\n                        class=\"absolute -top-2 right-0\"\n                        i18n\n                    >\n                        All Day\n                    </mat-checkbox>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"!form.value.all_day\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n\n                            >Start Time<span>*</span></label\n                        >\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [disabled]=\"form.controls.date.disabled\"\n                            [use_24hr]=\"use_24hr\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3 relative\">\n                        <label for=\"end-time\" i18n\n                            >End Time<span>*</span></label\n                        >\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form?.getRawValue()?.date\"\n                            [max]=\"max_duration\"\n                            [use_24hr]=\"use_24hr\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n    public readonly allow_time_changes = this._data.allow_time_changes;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.parking.available_period') || 7,\n            ),\n        );\n    }\n\n    public get max_duration() {\n        return this._settings.get('app.bookings.max_duration') || 480;\n    }\n\n    public get allow_all_day() {\n        return this._settings.get('app.parking.allow_all_day') || true;\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    attendees: [user],\n                });\n            }),\n        );\n        this.form.patchValue({\n            booking_type: 'parking',\n            all_day: this._data.booking\n                ? this._data.booking.duration > 12 * 60\n                : true,\n        });\n        if (!this.form.value.user) {\n            this.form.patchValue({\n                user:\n                    (this._data.booking?.attendees[0] as any) || currentUser(),\n            });\n        }\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.space) {\n            this.form.patchValue({ resources: [this._data.space] });\n        }\n        if (this._data.date) {\n            this.timeout(\n                'init_date',\n                () => {\n                    this.form.patchValue({ date: this._data.date });\n                    if (!this._data.allow_time_changes) {\n                        this.form.get('date').disable();\n                        this.form.get('duration').disable();\n                    }\n                },\n                300,\n            );\n            if (!this._data.allow_time_changes) {\n                this.subscription(\n                    'form_change',\n                    this.form.valueChanges.subscribe((v) => {\n                        this.timeout(\n                            'disable_date',\n                            () => {\n                                this.form\n                                    .get('date')\n                                    .disable({ emitEvent: false });\n                                this.form\n                                    .get('duration')\n                                    .disable({ emitEvent: false });\n                            },\n                            50,\n                        );\n                    }),\n                );\n            }\n        }\n    }\n\n    public async postForm() {\n        this.form.markAllAsTouched();\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const id = this.form.value.id;\n        this.form.patchValue({ user_id: undefined });\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            notifyError(e);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        notifySuccess(\n            `Successfully ${id ? 'updated' : 'created'} parking reservation`,\n        );\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { showStaff, User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\nimport { showUser } from '@placeos/ts-client';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>,\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public async ngOnInit() {\n        if (this._data.assigned_to) {\n            const user = await showStaff(this._data.assigned_to).toPromise();\n            if (user) {\n                this.form.patchValue({\n                    assigned_user: user,\n                    assigned_to: user.email,\n                    assigned_name: user.name,\n                });\n            }\n        }\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = { ...this.form.getRawValue() };\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n            delete value.assigned_user;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    approveBookingInstance,\n    Booking,\n    checkinBooking,\n    checkinBookingInstance,\n    queryBookings,\n    RecurrenceDays,\n    rejectBooking,\n    rejectBookingInstance,\n    removeBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n    zone_id?: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([_, bld]) => {\n            const levels = this._org.levels.filter((_) =>\n                _.tags.includes('parking'),\n            );\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter((lvl) =>\n                    bld_ids.includes(lvl.parent_id),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter((lvl) => lvl.parent_id === bld.id);\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of([] as ParkingSpace[]);\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces',\n            ).pipe(\n                map(\n                    ({ details }) =>\n                        (details instanceof Array ? details : []).map(\n                            (space) =>\n                                ({\n                                    ...space,\n                                    zone_id: options.zones[0] || levels[0]?.id,\n                                }) as ParkingSpace,\n                        ) as ParkingSpace[],\n                ),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n                include_checked_out: true,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase(),\n                        );\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                }),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 2 * 60 * 1000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space: ParkingSpace = {} as any) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone =\n            this._options.getValue().zones[0] ||\n            space.zone_id ||\n            this._org.levelsForBuilding()[0]?.id;\n        const new_space = {\n            ...state.metadata,\n            zone,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (space.assigned_to && space.assigned_to !== new_space.assigned_to) {\n            const booking_list = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n                email: new_space.assigned_to,\n                include_checked_out: true,\n            }).toPromise();\n            const filtered = booking_list.filter(\n                (_) => _.asset_id === space.id,\n            );\n            await Promise.all(\n                filtered.map((_) => removeBooking(_.id).toPromise()),\n            );\n        }\n        if (\n            space.assigned_to !== new_space.assigned_to &&\n            new_space.assigned_to\n        ) {\n            await saveBooking(\n                new Booking({\n                    user_id: new_space.assigned_to,\n                    user_email: new_space.assigned_to,\n                    booking_start: getUnixTime(startOfDay(Date.now())),\n                    booking_end: getUnixTime(endOfDay(Date.now())),\n                    type: 'parking',\n                    booking_type: 'parking',\n                    asset_id: new_space.id,\n                    asset_name: new_space.name,\n                    recurrence_type: 'daily',\n                    recurrence_days:\n                        RecurrenceDays.MONDAY |\n                        RecurrenceDays.TUESDAY |\n                        RecurrenceDays.WEDNESDAY |\n                        RecurrenceDays.THURSDAY |\n                        RecurrenceDays.FRIDAY,\n                    zones: unique([\n                        this._org.organisation.id,\n                        this._org.region?.id,\n                        this._org.building?.id,\n                        new_space.zone_id ||\n                            new_space.zone?.id ||\n                            new_space.zone,\n                    ]),\n                    extension_data: {\n                        asset_name: new_space.name,\n                    },\n                }),\n            ).toPromise();\n        }\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._org.building.id;\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n        this._change.next(Date.now());\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        {\n            user,\n            link_id,\n            date,\n            space,\n            allow_time_changes,\n            external_user,\n        }: {\n            user?: User;\n            link_id?: string;\n            date?: number;\n            space?: ParkingSpace;\n            allow_time_changes?: boolean;\n            external_user?: boolean;\n        } = {},\n    ) {\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const spaces = await this.spaces.pipe(take(1)).toPromise();\n            if (!space && reservation?.asset_id) {\n                space = spaces.find((_) => _.id === reservation.asset_id);\n            }\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                    space,\n                    allow_time_changes,\n                    external_user,\n                },\n            });\n            ref.afterClosed().subscribe((id) => {\n                resolve(id);\n                this._poll.next(Date.now());\n            });\n        });\n    }\n\n    public async setBookingCheckinState(\n        booking: Booking,\n        state: boolean = true,\n    ) {\n        const promise = (\n            booking.instance\n                ? checkinBookingInstance(booking.id, booking.instance, state)\n                : checkinBooking(booking.id, state)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error setting checkin state of parking booking')\n            : notifySuccess(\n                  `${state ? 'Checked in to' : 'Checked out of'} parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async approveBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? approveBookingInstance(booking.id, booking.instance)\n                : approveBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error approving in parking booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async rejectBooking(booking: Booking) {\n        const promise = (\n            booking.instance\n                ? rejectBookingInstance(booking.id, booking.instance)\n                : rejectBooking(booking.id)\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        const success = await promise;\n        success === 'failed'\n            ? notifyError('Error rejecting in parking booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM dd')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>,\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            }),\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n"],"x_google_ignoreList":[]}