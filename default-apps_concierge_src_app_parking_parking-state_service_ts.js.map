{"version":3,"file":"default-apps_concierge_src_app_parking_parking-state_service_ts.js","mappings":"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","names":["i0","ParkingBookingModalComponent_main_5_div_1_Template","ParkingBookingModalComponent_main_5_span_25_Template","ctx_r0","form","user","_r2","postForm","ParkingBookingModalComponent","AsyncHandler","id","this","value","constructor","_data","_booking_form","_dialog_ref","super","loading","date","ngOnInit","newForm","booking","setOptions","type","subscription","controls","valueChanges","subscribe","patchValue","user_name","name","user_email","email","user_id","attendees","all_day","booking_type","currentUser","plate_number","setValidators","Validators","required","disable","level","zone_id","link_id","parent_id","space","resources","v","timeout","get","emitEvent","_this","_asyncToGenerator","updateValueAndValidity","valid","result","catch","e","close","static","t","MAT_DIALOG_DATA","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","features","decls","vars","consts","template","rf","ctx","ParkingBookingModalComponent_button_4_Template","ParkingBookingModalComponent_main_5_Template","ParkingBookingModalComponent_footer_6_Template","ParkingBookingModalComponent_ng_template_7_Template","load_state_r3","_r1","ctx_r1","assigned_user","assigned_to","assigned_name","ParkingSpaceModalComponent","event","EventEmitter","FormGroup","FormControl","map_id","notes","map_rotation","getRawValue","disableClose","emit","reason","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_1__","outputs","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","ParkingStateService","_org","_dialog","_settings","_poll","BehaviorSubject","_change","_options","Date","now","search","zones","_loading","levels","combineLatest","active_region","active_building","pipe","map","_","bld","filter","tags","includes","blds","buildingsForRegion","bld_ids","list","lvl","display_name","find","spaces","switchMap","options","next","getValue","showMetadata","details","Array","of","tap","shareReplay","users","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","length","join","region","include_checked_out","toLowerCase","extension_data","asObservable","startPolling","delay","interval","stopPolling","clearInterval","editSpace","ref","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","first","zone","levelsForBuilding","new_space","randomInt","take","idx","findIndex","filtered","asset_id","all","removeBooking","saveBooking","Booking","booking_start","booking_end","asset_name","recurrence_type","recurrence_days","RecurrenceDays","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","push","new_space_list","updateMetadata","description","removeSpace","_this2","openConfirmModal","title","content","icon","editUser","_this3","console","log","ParkingUserModalComponent","building","new_user","removeUser","_this4","editReservation","reservation","_this5","_ref","resolve","_x","apply","arguments","approveBooking","_this6","success","notifyError","notifySuccess","format","rejectBooking","_this7","i3","_angular_core__WEBPACK_IMPORTED_MODULE_23__","jDH","factory","ɵfac","providedIn","phone","_r3","car_color","deny","_angular_core__WEBPACK_IMPORTED_MODULE_2__","i18n_0","$localize","ParkingUserModalComponent_button_4_Template","ParkingUserModalComponent_main_5_Template","ParkingUserModalComponent_footer_6_Template","ParkingUserModalComponent_ng_template_7_Template","load_state_r4"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-booking-modal.component.ts","./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-user-modal.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Booking, BookingFormService, ParkingSpace } from '@placeos/bookings';\nimport { AsyncHandler, currentUser } from '@placeos/common';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'parking-booking-modal',\n    template: `\n        <div class=\"w-[32rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">\n                    {{ id ? 'Edit' : 'New' }} Parking Reservation\n                </h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\" *ngIf=\"!user\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1\">\n                        <label for=\"user-name\">Name</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"user-name\"\n                                formControlName=\"user_name\"\n                                placeholder=\"Name\"\n                            />\n                            <mat-error>A name is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1\">\n                        <label for=\"email\">Email</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"email\"\n                                formControlName=\"user_email\"\n                                placeholder=\"Email\"\n                            />\n                            <mat-error>An email is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"date\">Date</label>\n                <a-date-field formControlName=\"date\"></a-date-field>\n                <label for=\"parking-space\">Parking Space</label>\n                <parking-space-list-field\n                    name=\"parking-space\"\n                    formControlName=\"resources\"\n                    class=\"mb-2\"\n                ></parking-space-list-field>\n                <label for=\"plate-number\">\n                    Plate Number<span *ngIf=\"user\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        name=\"plate-number\"\n                        formControlName=\"plate_number\"\n                        placeholder=\"Plate Number\"\n                    />\n                    <mat-error>A plate number is required</mat-error>\n                </mat-form-field>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking reservation...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingBookingModalComponent extends AsyncHandler {\n    public loading: boolean = false;\n    public readonly user = this._data.user;\n    public readonly date = this._data.date;\n\n    public form = this._booking_form.form;\n\n    public get id() {\n        return this.form.value.id;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            booking: Booking;\n            user?: User;\n            link_id?: string;\n            date?: number;\n            level?: BuildingLevel;\n            space?: ParkingSpace;\n        },\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<ParkingBookingModalComponent>,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._booking_form.newForm(this._data.booking);\n        this._booking_form.setOptions({ type: 'parking' });\n        this.subscription(\n            'user_changes',\n            this.form.controls.user.valueChanges.subscribe((user) => {\n                if (!user) return;\n                this.form.patchValue({\n                    user_name: user.name,\n                    user_email: user.email,\n                    user_id: user.id || user.email,\n                    attendees: [user],\n                });\n            }),\n        );\n        this.form.patchValue({\n            all_day: true,\n            booking_type: 'parking',\n            user: (this._data.user as any) || currentUser(),\n        });\n        if (this._data.user) {\n            this.form.patchValue({\n                user_email: this._data.user.email,\n                user_id: this._data.user.email,\n                user_name: this._data.user.name,\n                attendees: [this._data.user],\n            });\n            this.form.controls.plate_number.setValidators([\n                Validators.required,\n            ]);\n            this.form.controls.user_name.disable();\n            this.form.controls.user_email.disable();\n        }\n        if (this._data.level) {\n            this._booking_form.setOptions({ zone_id: this._data.level.id });\n        }\n        if (this._data.link_id) {\n            this.form.patchValue({ parent_id: this._data.link_id });\n        }\n        if (this._data.space) {\n            this.form.patchValue({ resources: [this._data.space] });\n        }\n        if (this._data.date) {\n            this.form.patchValue({ date: this._data.date });\n            this.subscription(\n                'form_change',\n                this.form.valueChanges.subscribe((v) => {\n                    this.timeout(\n                        'disable_date',\n                        () =>\n                            this.form.get('date').disable({ emitEvent: false }),\n                        50,\n                    );\n                }),\n            );\n            this.form.get('date').disable();\n        }\n    }\n\n    public async postForm() {\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const result = await this._booking_form.postForm().catch((e) => {\n            this.loading = false;\n            this.form.controls.plate_number.setValidators([]);\n            throw e;\n        });\n        this.form.controls.plate_number.setValidators([]);\n        this._dialog_ref.close(result.id);\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Assigned User\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <!-- <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field> -->\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = { ...this.form.getRawValue() };\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n            delete value.assigned_user;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    RecurrenceDays,\n    rejectBooking,\n    removeBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingUserModalComponent } from './parking-user-modal.component';\nimport { ParkingBookingModalComponent } from './parking-booking-modal.component';\nimport { User } from '@placeos/users';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n    zone_id?: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([_, bld]) => {\n            const levels = this._org.levels.filter((_) =>\n                _.tags.includes('parking'),\n            );\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter((lvl) =>\n                    bld_ids.includes(lvl.parent_id),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter((lvl) => lvl.parent_id === bld.id);\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of([] as ParkingSpace[]);\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces',\n            ).pipe(\n                map(\n                    ({ details }) =>\n                        (details instanceof Array ? details : []).map(\n                            (space) =>\n                                ({\n                                    ...space,\n                                    zone_id: options.zones[0] || levels[0]?.id,\n                                }) as ParkingSpace,\n                        ) as ParkingSpace[],\n                ),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this.users,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options, users]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n                include_checked_out: true,\n            }).pipe(\n                map((list) => {\n                    for (const booking of list) {\n                        const user = users.find(\n                            (_) =>\n                                _.email.toLowerCase() ===\n                                booking.user_email.toLowerCase(),\n                        );\n                        if (user) {\n                            booking.extension_data.plate_number =\n                                booking.extension_data.plate_number ||\n                                user.plate_number;\n                        }\n                    }\n                    return list;\n                }),\n            );\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 2 * 60 * 1000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space: ParkingSpace = {} as any) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone =\n            this._options.getValue().zones[0] ||\n            space.zone_id ||\n            this._org.levelsForBuilding()[0]?.id;\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (space.assigned_to && space.assigned_to !== new_space.assigned_to) {\n            const booking_list = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n                email: new_space.assigned_to,\n            }).toPromise();\n            const filtered = booking_list.filter(\n                (_) => _.asset_id === space.id,\n            );\n            await Promise.all(\n                filtered.map((_) => removeBooking(_.id).toPromise()),\n            );\n        }\n        if (\n            space.assigned_to !== new_space.assigned_to &&\n            new_space.assigned_to\n        ) {\n            await saveBooking(\n                new Booking({\n                    user_id: new_space.assigned_to,\n                    user_email: new_space.assigned_to,\n                    booking_start: getUnixTime(startOfDay(Date.now())),\n                    booking_end: getUnixTime(endOfDay(Date.now())),\n                    type: 'parking',\n                    booking_type: 'parking',\n                    asset_id: new_space.id,\n                    asset_name: new_space.name,\n                    recurrence_type: 'daily',\n                    recurrence_days:\n                        RecurrenceDays.MONDAY |\n                        RecurrenceDays.TUESDAY |\n                        RecurrenceDays.WEDNESDAY |\n                        RecurrenceDays.THURSDAY |\n                        RecurrenceDays.FRIDAY,\n                }),\n            ).toPromise();\n        }\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    /** Add or update a space in the available list */\n    public async editUser(user?: ParkingUser) {\n        console.log('Edit User', user);\n        const ref = this._dialog.open(ParkingUserModalComponent, {\n            data: user,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._org.building.id;\n        const new_user = {\n            ...state.metadata,\n            id: state.metadata.id || `P:USR-${randomInt(999_999)}`,\n        };\n        if ('user' in new_user) delete new_user.user;\n        const users = await this.users.pipe(take(1)).toPromise();\n        const idx = users.findIndex((_) => _.id === new_user.id);\n        if (idx >= 0) users[idx] = new_user;\n        else users.push(new_user);\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users,\n            description: 'List of available parking users',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeUser(user: ParkingUser) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking User',\n                content: `Are you sure you wish to remove the parking user \"${user.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking user...');\n        const zone = this._options.getValue().zones[0];\n        const users = await this.users.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-users',\n            details: users.filter((_) => _.id !== user.id),\n            description: 'List of available parking users',\n        }).toPromise();\n        state.close();\n    }\n\n    public editReservation(\n        reservation?: Booking,\n        {\n            user,\n            link_id,\n            date,\n            space,\n        }: {\n            user?: User;\n            link_id?: string;\n            date?: number;\n            space?: ParkingSpace;\n        } = {},\n    ) {\n        console.log('Reservation:', space);\n        return new Promise<string>(async (resolve) => {\n            const levels = await this.levels.pipe(take(1)).toPromise();\n            const ref = this._dialog.open(ParkingBookingModalComponent, {\n                data: {\n                    booking: reservation,\n                    user,\n                    link_id,\n                    date,\n                    level: levels[0],\n                    space,\n                },\n            });\n            ref.afterClosed().subscribe((id) => resolve(id));\n        });\n    }\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM dd')}.`,\n              );\n        if (success !== 'failed') this._change.next(Date.now());\n    }\n}\n","import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler, DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingUser } from './parking-state.service';\n\n@Component({\n    selector: 'parking-user-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking User</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col max-h-[65vh] overflow-auto\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex items-center space-x-2 mb-4\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"user\"\n                        class=\"flex-1\"\n                    ></a-user-search-field>\n                    <button\n                        icon\n                        matRipple\n                        class=\"h-12 w-12 min-w-12 rounded bg-secondary text-secondary-content\"\n                        matTooltip=\"Clear Selected User\"\n                        (click)=\"\n                            form.patchValue({\n                                user: null,\n                                email: null,\n                                name: null,\n                                phone: null,\n                            })\n                        \"\n                    >\n                        <app-icon className=\"material-symbols-outlined\">\n                            person_cancel\n                        </app-icon>\n                    </button>\n                </div>\n                <label for=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Name\"\n                    />\n                    <mat-error>A name is required</mat-error>\n                </mat-form-field>\n                <label for=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email\"\n                    />\n                    <mat-error>An email is required</mat-error>\n                </mat-form-field>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"plate-number\">Car Number Plate</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"plate-number\"\n                                formControlName=\"plate_number\"\n                                placeholder=\"Car Plate Number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"car-color\">Car Colour</label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"car-color\"\n                                formControlName=\"car_color\"\n                                placeholder=\"Car Colour\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"User's Notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"px-2 pb-2\">\n                    <mat-checkbox\n                        name=\"deny\"\n                        formControlName=\"deny\"\n                        i18n=\"@@deny\"\n                    >\n                        Deny User Parking Access\n                    </mat-checkbox>\n                </div>\n            </main>\n            <footer\n                *ngIf=\"!loading\"\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-base-200\"\n            >\n                <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                    Save\n                </button>\n            </footer>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center user-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking user details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingUserModalComponent extends AsyncHandler {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean = false;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        user: new FormControl<User>(null),\n        name: new FormControl('', [Validators.required]),\n        email: new FormControl('', [Validators.required]),\n        plate_number: new FormControl(''),\n        car_color: new FormControl(''),\n        notes: new FormControl(''),\n        deny: new FormControl(false),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingUser,\n        private _dialog_ref: MatDialogRef<ParkingUserModalComponent>\n    ) {\n        super();\n        if (_data) this.form.patchValue(_data);\n        console.log('User Modal', this.form.value, _data);\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'user',\n            this.form.valueChanges.subscribe((value) => {\n                if (value.user) {\n                    this.form.patchValue({\n                        email: value.user.email,\n                        name: value.user.name,\n                    });\n                }\n            })\n        );\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.user) {\n            value.email = value.user.email;\n            value.name = value.user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n"],"x_google_ignoreList":[]}