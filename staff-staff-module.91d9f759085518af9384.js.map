{"version":3,"sources":["./src/app/staff/staff-state.service.ts","./src/app/staff/staff-topbar.component.ts","./src/app/staff/staff-details.component.ts","./src/app/staff/staff-listing.component.ts","./src/app/staff/staff.component.ts","./src/app/staff/staff.module.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.html","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/location.class.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/users.module.ts"],"names":["StaffStateService","_staff","_bookings","_org","super","_onsite","_events","_filters","BehaviorSubject","_search","_loading","_users","loading","this","asObservable","filters","users","filtered_users","combineLatest","pipe","map","details","filter","options","i","name","toLowerCase","includes","email","only_onsite","user_events","switchMap","_","next","bookings","query","period_start","Math","floor","startOfDay","Date","valueOf","period_end","endOfDay","type","checkin_map","now","bkn","date","duration","asset_id","checked_in","shareReplay","loadUsers","getValue","search","delay","setFilters","interval","clearInterval","user","result","save","booking_start","booking_end","title","description","building","display_name","zones","id","booking_type","checkIn","event","update","toJSON","user_list","sort","a","b","localeCompare","StaffTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","setSearchString","updateZones","navigate","relativeTo","queryParams","zone_ids","join","initialised","first","toPromise","subscription","queryParamMap","subscribe","params","has","get","split","length","level","levelWithID","buildings","find","bld","parent_id","zone","lvl","push","StaffDetailsComponent","checkin","catch","e","checkout","CHARS","StaffListingComponent","active_group","groups","events","user_count","list","user_map","char","startsWith","timeout","onScroll","scroll_top","_el","nativeElement","scrollTop","group","el","document","querySelector","offsetTop","scrollIntoView","behavior","block","StaffComponent","startPolling","stopPolling","ROUTES","path","component","COMPONENTS","StaffModule","forChild","UserFormComponent","MapLocation","_data","location","position","map_id","x","map_width","y","map_height","variance","last_seen","at_location","SharedUsersModule"],"mappings":"8XAqBO,Y,MAAMA,UAA0B,IAiEnC,YACYC,EACAC,EACAC,GAERC,QAJQ,KAAAH,SACA,KAAAC,YACA,KAAAC,OAnEJ,KAAAE,QAA4B,GAC5B,KAAAC,QAA4B,GAE5B,KAAAC,SAAW,IAAIC,EAAA,EAA8B,IAE7C,KAAAC,QAAU,IAAID,EAAA,EAAwB,IAEtC,KAAAE,SAAW,IAAIF,EAAA,GAAyB,GAExC,KAAAG,OAAS,IAAIH,EAAA,EAA6B,IAElC,KAAAI,QAAUC,KAAKH,SAASI,eAExB,KAAAC,QAAUF,KAAKN,SAASO,eAExB,KAAAE,MAAQH,KAAKN,SAASO,eAEtB,KAAAG,eAAiB,OAAAC,EAAA,GAAc,CAC3CL,KAAKJ,QACLI,KAAKF,OACLE,KAAKN,WACNY,KACC,OAAAC,EAAA,GAAKC,IACD,MAAOC,EAAQN,EAAOO,GAAWF,EACjC,OAAOL,EAAMM,OACRE,KACKF,GACEE,EAAEC,KAAKC,cAAcC,SAASL,IAC9BE,EAAEI,MAAMF,cAAcC,SAASL,OACjCC,EAAQM,aAAehB,KAAKR,QAAQmB,EAAEI,YAKxC,KAAAE,YAAc,OAAAZ,EAAA,GAAc,CAACL,KAAKN,WAAWY,KACzD,OAAAY,EAAA,GAAiBC,GAAM,YAAD,gCAClBnB,KAAKH,SAASuB,MAAK,GACnB,MAAMC,QAAiBrB,KAAKX,UAAUiC,MAAM,CACxCC,aAAcC,KAAKC,MAAM,OAAAC,EAAA,GAAW,IAAIC,MAAQC,UAAY,KAC5DC,WAAYL,KAAKC,MAAM,OAAAK,EAAA,GAAS,IAAIH,MAAQC,UAAY,KACxDG,KAAM,UAEJC,EAAc,GACdC,GAAM,IAAIN,MAAOC,UACvB,IAAK,MAAMM,KAAOb,EAEV,YACIY,EACAA,EACAC,EAAIC,KACJD,EAAIC,KAAsB,GAAfD,EAAIE,SAAgB,OAGnCJ,EAAYE,EAAIG,UAAYH,EAAII,WAChCtC,KAAKP,QAAQyC,EAAIG,UAAYH,GAKrC,OAFAlC,KAAKR,QAAUwC,EACfhC,KAAKH,SAASuB,MAAK,GACZY,MAEX,OAAAO,EAAA,MASAvC,KAAKwC,YAGF,WAAWtC,GACdF,KAAKN,SAAS0B,KAAK,OAAD,wBAAMpB,KAAKN,SAAS+C,YAAevC,IAGlD,gBAAgBwC,GACnB1C,KAAKJ,QAAQwB,KAAKsB,GAGf,aAAaC,EAAgB,KAChC3C,KAAK4C,WAAW5C,KAAKN,SAAS+C,YAC9BzC,KAAK6C,SAAS,OAAQ,IAAM7C,KAAK4C,WAAW5C,KAAKN,SAAS+C,YAAaE,GAGpE,cACH3C,KAAK8C,cAAc,QAGV,QAAQC,G,mDACjB,MAAMC,QAAehD,KAAKX,UAAU4D,KAAK,CACrCC,cAAe1B,KAAKC,OAChB,IAAIE,MAAOC,UAAY,KAE3BuB,YAAa3B,KAAKC,MAAM,OAAAK,EAAA,GAAS,IAAIH,MAAQC,UAAY,KACzDS,SAAUU,EAAKhC,MACfqC,MAAO,oBACPC,YAAarD,KAAKV,KAAKgE,SAASC,cAAgBvD,KAAKV,KAAKgE,SAAS1C,KACnE4C,MAAO,CAACxD,KAAKV,KAAKgE,SAASG,IAC3BC,aAAc,gBAEZ1D,KAAKX,UAAUsE,QAAQX,GAAQ,GACrChD,KAAKP,QAAQsD,EAAKhC,OAASiC,EAC3BhD,KAAKR,QAAQuD,EAAKhC,QAAS,KAGlB,SAASgC,G,mDAClB,MAAMa,EAAQ5D,KAAKP,QAAQsD,EAAKhC,OAChC,GAAI6C,EAAO,CACP,MAAMZ,QAAehD,KAAKX,UAAUwE,OAAOD,EAAMH,GAAI,OAAF,wBAC5CG,EAAME,UAAQ,CACjBX,YAAa3B,KAAKC,OAAM,IAAIE,MAAOC,UAAY,cAE7C5B,KAAKX,UAAUsE,QAAQX,GAAQ,GACrChD,KAAKP,QAAQsD,EAAKhC,OAASiC,EAC3BhD,KAAKR,QAAQuD,EAAKhC,QAAS,MAIrB,Y,mDACV,MAAMgD,QAAkB/D,KAAKZ,OAAOkC,QACpCyC,EAAUC,KAAK,CAACC,EAAGC,IAAMD,EAAErD,KAAKuD,cAAcD,EAAEtD,OAChDZ,KAAKF,OAAOsB,KAAK2C,O,6CA5HZ5E,GAAiB,gC,yBAAjBA,EAAiB,QAAjBA,EAAiB,qBAFd,S,GAET,G,iHCHS,uBAII,QACJ,Q,yBAHI,mBAEA,8CAmCb,Y,MAAMiF,UAA6B,IAsBtC,YACYC,EACA/E,EACAgF,EACAC,GAERhF,QALQ,KAAA8E,SACA,KAAA/E,OACA,KAAAgF,SACA,KAAAC,UAxBL,KAAAf,MAAkB,GAET,KAAAgB,OAASxE,KAAKV,KAAKmF,cAEnB,KAAAvE,QAAUF,KAAKqE,OAAOnE,QAEtB,KAAAwE,QAAWvC,GAASnC,KAAKqE,OAAOzB,WAAW,CAAET,SAE7C,KAAAS,WAAc1C,GAAYF,KAAKqE,OAAOzB,WAAW1C,GAEjD,KAAAyE,UAAaC,GAAQ5E,KAAKqE,OAAOQ,gBAAgBD,GAEjD,KAAAE,YAAetB,IAC3BxD,KAAKuE,QAAQQ,SAAS,GAAI,CACtBC,WAAYhF,KAAKsE,OACjBW,YAAa,CAAEC,SAAU1B,EAAM2B,KAAK,QAExCnF,KAAKqE,OAAOzB,WAAW,CAAEY,WAYhB,W,yDACHxD,KAAKV,KAAK8F,YAAY9E,KAAK,OAAA+E,EAAA,GAAOlE,GAAMA,IAAImE,YAClDtF,KAAKuF,aACD,cACAvF,KAAKsE,OAAOkB,cAAcC,UAAWC,IACjC,GAAIA,EAAOC,IAAI,YAAa,CACxB,MAAMnC,EAAQkC,EAAOE,IAAI,YAAYC,MAAM,KAC3C,GAAIrC,EAAMsC,OAAQ,CACd,MAAMC,EAAQ/F,KAAKV,KAAK0G,YAAYxC,GACpC,IAAKuC,EACD,OAEJ/F,KAAKV,KAAKgE,SAAWtD,KAAKV,KAAK2G,UAAUC,KACpCC,GAAQA,EAAI1C,KAAOsC,EAAMK,WAE9BpG,KAAKwD,MAAQA,OAK7BxD,KAAKuF,aACD,SACAvF,KAAKV,KAAKmF,cAAcgB,UAAWjB,IAC/BxE,KAAKwD,MAAQxD,KAAKwD,MAAM/C,OAAQ4F,GAC5B7B,EAAO0B,KAAMI,GAAQA,EAAI7C,KAAO4C,KAE/BrG,KAAKwD,MAAMsC,QAAUtB,EAAOsB,QAC7B9F,KAAKwD,MAAM+C,KAAK/B,EAAO,GAAGf,IAE9BzD,KAAK8E,YAAY9E,KAAKwD,UAG9BxD,KAAK2E,UAAU,Q,6CA/DVP,GAAoB,wC,uBAApBA,EAAoB,2U,GAAA,MA9CzB,2BACI,uBAEI,sDAAmB,oCACF,EAAAU,YAAA,MAGjB,6B,gBAMJ,OACJ,OACA,6BAGI,yCAAiB,EAAAlC,WAAA,oB,gBAChB,gBAAqB,sBAAW,OAAM,OAE3C,gBACA,sBAAwB,uCAAe,EAAA+B,UAAA,MAAmB,Q,gBAnBlD,gCAKsB,2CAS1B,2E,olBA6BL,G,sFC1CK,iBAAoD,iBAAM,QAyB/D,Y,MAAM6B,EAkBT,YAAoBnC,GAAA,KAAAA,SAXJ,KAAAoC,QAAU,IAAY,YAAD,gCACjCzG,KAAKD,SAAU,QACTC,KAAKqE,OAAOoC,QAAQzG,KAAK+C,MAAM2D,MAAMC,GAAK,YAAY,mCAC5D3G,KAAKD,SAAU,KAEH,KAAA6G,SAAW,IAAY,YAAD,gCAClC5G,KAAKD,SAAU,QACTC,KAAKqE,OAAOuC,SAAS5G,KAAK+C,MAAM2D,MAAMC,GAAK,YAAY,oCAC7D3G,KAAKD,SAAU,M,6CAfVyG,GAAqB,U,uBAArBA,EAAqB,6oBA/B1B,gBACI,0BACA,gBACI,gBAAkB,QAAgB,OAClC,gBAA0C,QAAiB,OAC/D,OACA,sBACA,gBACI,wBAKI,yCAAkB,EAAAI,WAAa,EAAAH,aAEnC,OACA,eACI,sBAAqC,iBAAK,OAC9C,OACA,gBACI,sBAAqC,gBAAI,OAC7C,OACJ,OACJ,Q,MAtBmB,4BAEO,4CACwB,6CAExC,8BAGE,qEAA0D,oBAA1D,CAA0D,mDAOlB,uDAAyB,wDAGzB,uDAAyB,uD,wKAY9E,G,6EC5BK,gBAMI,kF,gBAEA,QACJ,O,qCALI,oDAAyD,6BAIzD,yB,yBAmBQ,2B,kGAKI,6BAAkC,SAAlC,CAAkC,6D,yBAb1C,QACI,iBAKI,QACJ,OACA,iC,gBASJ,Q,wCAdQ,6CAGA,wBAK1B,kD,yBAZc,QACI,+B,gBAkBJ,Q,mCAlBmB,sD,yBAFvB,QACI,+BAoBJ,Q,oBApBoC,kC,qBAsBxC,8B,sBAEI,iBACI,YAAG,oCAAyB,OAChC,QAlDZ,MAAMI,EAAQ,8BAA8BhB,MAAM,IAoF3C,Y,MAAMiB,UAA8B,IA6BvC,YAAoBzC,GAChB9E,QADgB,KAAA8E,SA5Bb,KAAA0C,aAAe,IAEN,KAAAC,OAASH,EACT,KAAAI,OAASjH,KAAKqE,OAAOpD,YACrB,KAAAlB,QAAUC,KAAKqE,OAAOtE,QAEtB,KAAAmH,WAAalH,KAAKqE,OAAOjE,eAAeE,KACpD,OAAAC,EAAA,GAAK4G,GAASA,EAAKrB,SAGP,KAAA/B,UAAY/D,KAAKqE,OAAOjE,eAAeE,KACnD,OAAAC,EAAA,GAAK4G,IACD,MAAMC,EAAW,GACjB,IAAK,MAAMC,KAAQR,EACfO,EAASC,IAASF,GAAQ,IAAI1G,OACzBsC,GACGA,EAAKnC,KAAKC,cAAc,GAAGyG,WAAWD,IAC5B,MAATA,IACIR,EAAM/F,SAASiC,EAAKnC,KAAKC,cAAc,KAIxD,OADAb,KAAKuH,QAAQ,SAAU,IAAMvH,KAAKwH,SAAS,IAAK,IACzCJ,KAUR,SAASjG,GACZ,MAAMsG,EAAazH,KAAK0H,IAAIC,cAAcC,UAC1C,IAAK,MAAMC,KAAShB,EAAO,CACvB,MAAMiB,EAAqBC,SAASC,cAAc,YAAqB,MAAVH,EAAgB,IAAMA,IACnF,GAAIC,EAAI,CACJ,GAAIA,EAAGG,UAAYR,EAAa,EAC5B,MAEJzH,KAAK+G,aAAec,IAKzB,SAASA,GACZ,MAAMC,EAAKC,SAASC,cAAc,WAAWH,OACzCC,IACAA,EAAGI,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAC/CpI,KAAK+G,aAAec,I,6CAlDnBf,GAAqB,U,uBAArBA,EAAqB,uD,GAAA,K,m7BA/E1B,gBACI,sBAUJ,OACA,kBAII,kCAAU,EAAAU,SAAA,MAEV,+B,gBAsBJ,OACA,mC,gBACA,yC,qBAvC0B,iCAeP,4CAA0B,cAuB1B,2C,gwBAsCpB,G,qBC/EK,6BAiBL,Y,MAAMa,EAGT,YAAoBhE,GAAA,KAAAA,SAFJ,KAAAtE,QAAUC,KAAKqE,OAAOtE,QAI/B,WACHC,KAAKqE,OAAOiE,eAGT,cACHtI,KAAKqE,OAAOkE,e,6CAVPF,GAAc,U,uBAAdA,EAAc,2QArBnB,kBACA,iBACI,yBACA,2BACA,mC,gBAKJ,Q,MAHS,2C,wLAeV,G,gBCjBP,MAAMG,EAAkB,CAAC,CAAEC,KAAM,GAAIC,UAAW,IAEnCC,EAA0B,CACnC,EACA,EACA,EACA,GAYG,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAW,SAPX,CACL,IACA,IACA,IACA,IAAaC,SAASL,O,GAGvB,I,wPCnBS,oBAA8C,2BAAgB,Q,yBARtE,gBACI,kBAGK,eAAI,eAAM,YAAC,OAAO,YAAC,OAExB,2BACI,kBACA,4BACJ,OACJ,Q,qBAPQ,iFAKY,mD,sBAWZ,oBAA+C,oCAAyB,Q,yBARhF,gBACI,kBAGK,gBAAK,eAAM,YAAC,OAAO,YAAC,OAEzB,2BACI,mBACA,4BACJ,OACJ,Q,qBAPQ,mFAKY,oD,sBAkBZ,oBACK,mCAAwB,Q,yBAhBrC,gBACI,mBAKK,uBAAY,eAAM,YAAC,OAAO,YAAC,OAEhC,2BACI,mBAMA,4BAGJ,OACJ,Q,qBAhBQ,iGAYY,2D,sBAaZ,oBAA+C,kCAAuB,Q,yBAR9E,gBACI,mBAGK,iBAAM,OAEX,2BACI,mBACA,4BACJ,OACJ,Q,qBAPQ,mFAKY,oD,sBAGpB,gBACI,0BACK,8BAAmB,OAE5B,Q,sBACA,gBACI,0BACK,yBAAc,OAEvB,Q,yBAhER,gBACI,iBACI,sBAWA,sBAWA,sBAoBA,sBAWA,sBAKA,sBAKJ,OACJ,Q,oBAjEU,iCACkB,0CAWA,2CAWA,kDAoBA,2CAWA,yDAKA,qDCpDrB,Y,MAAMM,G,6CAAAA,I,uBAAAA,EAAiB,8vBDR9B,sB,KAAwB,qB,0aCQjB,G,kDCLA,MAAMC,EAgBT,YAAYC,GACRhJ,KAAK+B,KAAOiH,EAAMjH,MAAQiH,EAAMC,UAAY,QAC5CjJ,KAAKkJ,SAAWF,EAAME,UAClBF,EAAMG,QAAU,CACZC,EAAGJ,EAAMI,EAAIJ,EAAMK,UACnBC,EAAGN,EAAMM,EAAIN,EAAMO,YAE3BvJ,KAAKwJ,SAAWR,EAAMQ,UAAY,EAClCxJ,KAAKyJ,UACDT,EAAMS,WAAajI,KAAKC,OAAM,IAAIE,MAAOC,UAAY,KACzD5B,KAAK+F,MAAQiD,EAAMjD,MACnB/F,KAAKsD,SAAW0F,EAAM1F,SACtBtD,KAAK0J,cAAgBV,EAAMU,a,kGCT5B,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAiB,SAVjB,CACL,IACA,IACA,IACA,IACA,IACA,Q,GAID,G,KAXY,IAAuB,CAAF,IAAE,sBAAiB","file":"staff-staff-module.91d9f759085518af9384.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { StaffUser } from '@user-interfaces/users';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport { StaffService } from '@user-interfaces/users';\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { endOfDay, startOfDay } from 'date-fns';\nimport { BaseClass, timePeriodsIntersect } from '@user-interfaces/common';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { OrganisationService } from '@user-interfaces/organisation';\n\nexport interface StaffFilters {\n    date?: number;\n    zones?: string[];\n    only_onsite?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StaffStateService extends BaseClass {\n    private _onsite: HashMap<boolean> = {};\n    private _events: HashMap<Booking> = {};\n\n    private _filters = new BehaviorSubject<StaffFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _users = new BehaviorSubject<StaffUser[]>([]);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly users = this._filters.asObservable();\n\n    public readonly filtered_users = combineLatest([\n        this._search,\n        this._users,\n        this._filters,\n    ]).pipe(\n        map((details) => {\n            const [filter, users, options] = details;\n            return users.filter(\n                (i) =>\n                    (!filter ||\n                        i.name.toLowerCase().includes(filter) ||\n                        i.email.toLowerCase().includes(filter)) &&\n                    (!options.only_onsite || this._onsite[i.email])\n            );\n        })\n    );\n\n    public readonly user_events = combineLatest([this._filters]).pipe(\n        switchMap(async (_) => {\n            this._loading.next(true);\n            const bookings = await this._bookings.query({\n                period_start: Math.floor(startOfDay(new Date()).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n                type: 'staff',\n            });\n            const checkin_map = {};\n            const now = new Date().valueOf();\n            for (const bkn of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        now,\n                        now,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                ) {\n                    checkin_map[bkn.asset_id] = bkn.checked_in;\n                    this._events[bkn.asset_id] = bkn;\n                }\n            }\n            this._onsite = checkin_map;\n            this._loading.next(false);\n            return checkin_map;\n        }),\n        shareReplay()\n    );\n\n    constructor(\n        private _staff: StaffService,\n        private _bookings: BookingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.loadUsers();\n    }\n\n    public setFilters(filters: StaffFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.setFilters(this._filters.getValue());\n        this.interval('poll', () => this.setFilters(this._filters.getValue()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkin(user: StaffUser) {\n        const result = await this._bookings.save({\n            booking_start: Math.floor(\n                new Date().valueOf() / 1000\n            ),\n            booking_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            asset_id: user.email,\n            title: 'Checked-in Onsite',\n            description: this._org.building.display_name || this._org.building.name,\n            zones: [this._org.building.id],\n            booking_type: 'staff',\n        });\n        await this._bookings.checkIn(result, true);\n        this._events[user.email] = result;\n        this._onsite[user.email] = true;\n    }\n\n    public async checkout(user: StaffUser) {\n        const event = this._events[user.email];\n        if (event) {\n            const result = await this._bookings.update(event.id, {\n                ...event.toJSON(),\n                booking_end: Math.floor(new Date().valueOf() / 1000),\n            });\n            await this._bookings.checkIn(result, false);\n            this._events[user.email] = result;\n            this._onsite[user.email] = false;\n        }\n    }\n\n    private async loadUsers() {\n        const user_list = await this._staff.query();\n        user_list.sort((a, b) => a.name.localeCompare(b.name));\n        this._users.next(user_list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-slide-toggle\n            class=\"m-2\"\n            [ngModel]=\"(filters | async)?.only_onsite\"\n            (ngModelChange)=\"setFilters({ only_onsite: $event })\"\n            ><div class=\"text-xs\">Onsite Only</div></mat-slide-toggle\n        >\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar class=\"mr-2\" (modelChange)=\"setSearch($event)\"></searchbar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class StaffTopbarComponent extends BaseClass implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones })\n    };\n\n    constructor(\n        private _state: StaffStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { notifyError } from '@user-interfaces/common';\nimport { StaffUser } from '@user-interfaces/users';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-details',\n    template: `\n        <div class=\"w-full flex items-center px-4 py-2 bg-white border-b border-gray-200\">\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1\">\n                <div class=\"px-2\">{{ user?.name }}</div>\n                <div class=\"px-2 text-xs text-opacity-50\">{{ user?.email }}</div>\n            </div>\n            <div *ngIf=\"onsite\" class=\"text-xs opacity-50 px-4\">Onsite</div>\n            <div class=\"flex items-center\">\n                <action-icon\n                    [matTooltip]=\"onsite ? 'Checkout Staff' : 'Checkin Staff'\"\n                    [loading]=\"loading\"\n                    className=\"material-icons\"\n                    [content]=\"onsite ? 'event_busy' : 'event_available'\"\n                    (click)=\"onsite ? checkout() : checkin()\"\n                >\n                </action-icon>\n                <a mat-icon-button matTooltip=\"Email Staff\" [disabled]=\"!user?.email\" [href]=\"'mailto:' + user?.email\">\n                    <app-icon className=\"material-icons\">email</app-icon>\n                </a>\n                <a mat-icon-button matTooltip=\"Phone Staff\" [disabled]=\"!user?.phone\" [href]=\"'tel:' + user?.phone\">\n                    <app-icon className=\"material-icons\">call</app-icon>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [`\n        :host > div:hover {\n            background-color: #f0f0f0 !important;\n        }\n    `]\n})\nexport class StaffDetailsComponent {\n\n    @Input() public user: StaffUser;\n    @Input() public onsite: boolean;\n\n    public loading: boolean;\n\n    public readonly checkin = async () => {\n        this.loading = true;\n        await this._state.checkin(this.user).catch(e => notifyError('Error checking in Staff member'));\n        this.loading = false;\n    };\n    public readonly checkout = async () => {\n        this.loading = true;\n        await this._state.checkout(this.user).catch(e => notifyError('Error checking out Staff member'));\n        this.loading = false;\n    };\n\n    constructor(private _state: StaffStateService) {}\n}\n","import { Component, ElementRef, HostListener, ViewChild } from '@angular/core';\nimport { BaseClass } from '@user-interfaces/common';\nimport { map } from 'rxjs/operators';\n\nimport { StaffStateService } from './staff-state.service';\n\nconst CHARS = '#abcdefghijklmnopqrstuvwxyz'.split('');\n\n@Component({\n    selector: 'staff-listings',\n    template: `\n        <div class=\"w-full p-2 flex items-center justify-center\">\n            <div\n                letter\n                *ngFor=\"let group of groups\"\n                class=\"capitalize h-6 w-6 flex items-center justify-center text-xs cursor-pointer\"\n                [class.disabled]=\"(user_list | async)[group].length <= 0\"\n                [class.active]=\"group === active_group\"\n                (click)=\"scrollTo(group)\"\n            >\n                {{ group }}\n            </div>\n        </div>\n        <div\n            class=\"flex-1 overflow-auto w-full relative bg-gray-100\"\n            style=\"height: 50%\"\n            #container\n            (scroll)=\"onScroll($event)\"\n        >\n            <ng-container *ngIf=\"user_count | async; else empty_state\">\n                <ng-container *ngFor=\"let group of groups\">\n                    <ng-container *ngIf=\"(user_list | async)[group].length\">\n                        <div\n                            group\n                            [id]=\"'letter-' + (group === '#' ? '0' : group)\"\n                            class=\"capitalize bg-gray-300 border-b text-sm font-medium sticky top-0 z-10\"\n                        >\n                            {{ group }}\n                        </div>\n                        <staff-details\n                            *ngFor=\"\n                                let user of (user_list | async)[group];\n                                let i = index\n                            \"\n                            [id]=\"'letter-' + group + '-' + i\"\n                            [user]=\"user\"\n                            [onsite]=\"(events | async) ? (events | async)[user.email]: false\"\n                        ></staff-details>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar *ngIf=\"loading | async\" mode=\"indeterminate\"></mat-progress-bar>\n        <ng-template #empty_state>\n            <div class=\"absolute inset-0 flex flex-col items-center justify-center\">\n                <p>No matching staff members</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n            }\n\n            [letter] {\n                transition: font-size 200ms, color 200ms;\n            }\n\n            [group] {\n                border-color: #ccc;\n                padding: 0.5rem 1.65rem;\n            }\n\n            .disabled {\n                opacity: 0.2;\n                pointer-events: none;\n            }\n\n            .active {\n                font-size: 1.25rem;\n                opacity: 1;\n                color: #d81b60;\n            }\n        `,\n    ],\n})\nexport class StaffListingComponent extends BaseClass {\n    public active_group = '#';\n\n    public readonly groups = CHARS;\n    public readonly events = this._state.user_events;\n    public readonly loading = this._state.loading;\n\n    public readonly user_count = this._state.filtered_users.pipe(\n        map((list) => list.length)\n    );\n\n    public readonly user_list = this._state.filtered_users.pipe(\n        map((list) => {\n            const user_map = {};\n            for (const char of CHARS) {\n                user_map[char] = (list || []).filter(\n                    (user) =>\n                        user.name.toLowerCase()[0].startsWith(char) ||\n                        (char === '#' &&\n                            !CHARS.includes(user.name.toLowerCase()[0]))\n                );\n            }\n            this.timeout('scroll', () => this.onScroll({}), 30);\n            return user_map;\n        })\n    );\n\n    @ViewChild('container') private _el: ElementRef<HTMLDivElement>;\n\n    constructor(private _state: StaffStateService) {\n        super();\n    }\n\n    public onScroll(_) {\n        const scroll_top = this._el.nativeElement.scrollTop;\n        for (const group of CHARS) {\n            const el: HTMLDivElement = document.querySelector(`#letter-${group === '#' ? '0' : group}`);\n            if (el) {\n                if (el.offsetTop - scroll_top > 0) {\n                    break;\n                }\n                this.active_group = group;\n            }\n        }\n    }\n\n    public scrollTo(group: string) {\n        const el = document.querySelector(`#letter-${group}-0`);\n        if (el) {\n            el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            this.active_group = group;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'app-staff',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <staff-topbar class=\"w-full\"></staff-topbar>\n            <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class StaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { StaffComponent } from './staff.component';\nimport { StaffTopbarComponent } from './staff-topbar.component';\nimport { StaffListingComponent } from './staff-listing.component';\nimport { StaffDetailsComponent } from './staff-details.component';\nimport { UIModule } from '../ui/ui.module';\n\nconst ROUTES: Route[] = [{ path: '', component: StaffComponent }];\n\nexport const COMPONENTS: Type<any>[] = [\n    StaffComponent,\n    StaffTopbarComponent,\n    StaffListingComponent,\n    StaffDetailsComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class StaffModule {}\n","<div class=\"user form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"name\" placeholder=\"Name\" formControlName=\"name\" />\n                <mat-error *ngIf=\"form.controls.name.invalid\">Name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.email\">\n            <label\n                for=\"email\"\n                [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                >Email<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" placeholder=\"Email Address\" formControlName=\"email\" />\n                <mat-error *ngIf=\"form.controls.email.invalid\">A valid email is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.organisation\">\n            <label\n                for=\"organisation\"\n                [class.error]=\"\n                    form.controls.organisation.invalid && form.controls.organisation.touched\n                \"\n                >Organisation<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"organisation\"\n                    placeholder=\"Organisation\"\n                    formControlName=\"organisation\"\n                />\n                <mat-error *ngIf=\"form.controls.organisation.invalid\"\n                    >Organisation is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.phone\">\n            <label\n                for=\"phone\"\n                [class.error]=\"form.controls.phone.invalid && form.controls.phone.touched\"\n                >Phone:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"phone\" placeholder=\"Phone\" formControlName=\"phone\" />\n                <mat-error *ngIf=\"form.controls.phone.invalid\">Phone format is invalid</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n            <mat-checkbox color=\"primary\" formControlName=\"assistance_required\"\n                >Assistance required</mat-checkbox\n            >\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n            <mat-checkbox color=\"primary\" formControlName=\"visit_expected\"\n                >Visit expected</mat-checkbox\n            >\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","import { Point } from '@yuion/svg-viewer';\nimport { HashMap } from '@user-interfaces/common';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n\n    constructor(_data: HashMap) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width,\n                y: _data.y / _data.map_height,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen =\n            _data.last_seen || Math.floor(new Date().valueOf() / 1000);\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { NewUserModalComponent } from './new-user-modal/new-user-modal.component';\nimport { UserFormComponent } from './user-form/user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n"],"sourceRoot":"webpack:///"}