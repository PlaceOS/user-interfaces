{"version":3,"sources":["./libs/explore/src/lib/explore-spaces.service.ts","./libs/explore/src/lib/explore-device-info.component.ts","./libs/explore/src/lib/explore-desk-info.component.ts","./libs/explore/src/lib/explore-desks.service.ts","./libs/explore/src/lib/explore.module.ts","./libs/explore/src/lib/explore-state.service.ts","./libs/explore/src/lib/explore-zoom-control.component.ts"],"names":["DEFAULT_COLOURS","free","pending","reserved","busy","unknown","ExploreDeviceInfoComponent","_details","_element","_overlay","username","user","this","mac","manufacturer","os","ssid","variance","toFixed","diameter","bg_color","distance_color","overlay_ref","onEnter","loadUser","onLeave","close","onClick","onTouch","formatDistanceToNow","last_seen","addSuffix","Math","abs","differenceInMinutes","Date","distance","tries","setTimeout","parent","nativeElement","parentElement","ngOnInit","position","parseInt","style","top","left","y_pos","x_pos","open","mod","system","details","execute","catch","_","assigned_to","_portal","create","positionStrategy","flexibleConnectedTo","_dot","withPositions","originX","originY","overlayX","overlayY","attach","dispose","ExploreDeskInfoComponent","map_id","start","end","ExploreDesksService","_state","_org","_settings","_bookings","super","_in_use","_options","_desks","_reserved","_statuses","_users","_poll","_desk_bookings","combineLatest","level","pipe","switchMap","lvl","period_start","period_end","type","zones","id","desk_list","name","map","i","Array","j","zone","catchError","e","_bind","unsubWith","building","buildings","find","bld","parent_id","system_id","bindings","area_management","organisation","binding","subscription","listen","subscribe","d","processBindingChange","bind","next","_state_change","desks","in_use","bookable","is_used","some","is_reserved","processDesks","init","initialised","toPromise","setOptions","enable_booking","get","delay","asset_id","interval","valueOf","clearInterval","options","getValue","value","devices","filter","v","includes","location","at_location","processDevices","timeout","updateStatus","style_map","colours","desk_id","fill","opacity","setStyles","list","device","x","map_width","y","map_height","push","coordinates_from","content","data","setFeatures","actions","desk","hover","staff_name","status","z_index","book_fn","newForm","form","patchValue","host","booking_type","confirmPost","action","callback","setActions","SharedExploreModule","ExploreStateService","_spaces","_level","_positions","zoom","center","_styles","_features","_actions","_labels","disable","_message","asObservable","message","spaces","space","map_url","map_positions","map_features","features","key","disable_features","concat","map_actions","disable_actions","map_labels","labels","disable_labels","map_styles","styles","style_mappings","text","display","disable_styles","active_building","level_list","levelsForBuilding","length","setLevel","old_options","zone_id","levelWithID","feature_map","actions_map","labels_map","ExploreZoomControlComponent","zoomIn","setPositions","min","positions","zoomOut","max","reset"],"mappings":"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","file":"default-libs_explore_src_index_ts.js","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@placeos/svg-viewer';\nimport { map } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    HashMap,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#e65100',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _statuses: HashMap<string> = {};\n\n    private _bind = this._state.spaces.pipe(\n        map((list) => {\n            this.unsubWith('b-');\n            this.unsubWith('s-');\n            this._statuses = {};\n            if (!list?.length) return;\n            for (const space of list) {\n                const mod = getModule(space.id, 'Bookings');\n                let binding = mod.binding('bookings');\n                this.subscription(\n                    `b-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleBookingsChange(list, space, d)\n                        )\n                );\n                this.subscription(`b-bind-${space.id}`, binding.bind());\n                binding = mod.binding('status');\n                this.subscription(\n                    `s-${space.id}`,\n                    binding\n                        .listen()\n                        .subscribe((d) =>\n                            this.handleStatusChange(list, space, d)\n                        )\n                );\n                this.subscription(`s-bind-${space.id}`, binding.bind());\n            }\n            this.updateActions(list);\n            this.updateHoverElements(list);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription('spaces', this._bind.subscribe());\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy' || !space.bookable) {\n            return notifyError(\n                `${\n                    space.display_name || space.name\n                } is unavailable at the current time`\n            );\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space },\n        });\n    }\n\n    public handleBookingsChange(\n        spaces: Space[],\n        space: Space,\n        bookings: HashMap[]\n    ) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout(\n            'update_hover_els',\n            () => this.updateHoverElements(spaces),\n            100\n        );\n    }\n\n    public handleStatusChange(spaces: Space[], space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus(spaces);\n                this.updateHoverElements(spaces);\n            },\n            100\n        );\n    }\n\n    private updateStatus(spaces: Space[]) {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const space of spaces) {\n            const status = this._statuses[space.id] || 'not-bookable';\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${status}`] ||\n                    colours[`${status}`] ||\n                    DEFAULT_COLOURS[`${status}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements(spaces: Space[]) {\n        const features: ViewerFeature[] = [];\n        for (const space of spaces) {\n            features.push({\n                location: space.map_id,\n                full_size: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions(spaces: Space[]) {\n        const actions: ViewAction[] = [];\n        for (const space of spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\nexport interface DeviceInfoData {\n    mac: string;\n    variance: number;\n    last_seen: number;\n    system: string;\n    manufacturer?: string;\n    os?: string;\n    ssid?: string;\n    user?: any;\n    bg_color?: string;\n}\n\n@Component({\n    selector: '[explore-device-info]',\n    template: `\n        <div\n            name=\"radius\"\n            (mouseenter)=\"loadUser()\"\n            class=\"radius absolute center bg-blue-600 bg-opacity-25 border-4 border-dashed border-blue-600 rounded-full\"\n            [style]=\"'height: ' + diameter + '%; width: ' + diameter + '%;'\"\n        ></div>\n        <div\n            name=\"dot\"\n            #dot\n            class=\"h-2 w-2 absolute center rounded-full pointer-events-auto shadow\"\n            [style.background-color]=\"bg_color\"\n        ></div>\n\n        <ng-template cdk-portal>\n            <div\n                name=\"device-info\"\n                class=\"w-64 rounded bg-white p-4 top-0 left-0 shadow pointer-events-none\"\n                (mouseleave)=\"close()\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <p><label>MAC:</label> {{ mac }}</p>\n                    <p><label>Accuracy:</label> {{ variance }}m</p>\n                    <p><label>Last Seen:</label> {{ last_seen }}</p>\n                    <p type *ngIf=\"manufacturer\">\n                        <label>Manufacturer:</label> {{ manufacturer }}\n                    </p>\n                    <p os *ngIf=\"os\"><label>OS:</label> {{ os }}</p>\n                    <p ssid *ngIf=\"ssid\"><label>SSID:</label> {{ ssid }}</p>\n                    <p username *ngIf=\"username\">\n                        <label>Username:</label>\n                        {{ user?.name || user?.username || username }}\n                    </p>\n                    <p user *ngIf=\"user\">\n                        <label>Type:</label> {{ user.type }}\n                    </p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: auto;\n            }\n\n            :host > [name='dot'] {\n                background-color: #616161;\n            }\n\n            :host:hover > [name='radius'] {\n                opacity: 1;\n            }\n\n            [name='radius'] {\n                opacity: 0;\n                transition: opacity 200ms;\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ExploreDeviceInfoComponent implements OnInit {\n    /** Name of the user associated with the mac address */\n    public username = '';\n    /** User details associated with device */\n    public readonly user = this._details.user;\n    /** Mac Address of the device */\n    public readonly mac = this._details.mac;\n    /** Mac Address of the device */\n    public readonly manufacturer = this._details.manufacturer;\n    /** Mac Address of the device */\n    public readonly os = this._details.os;\n    /** Mac Address of the device */\n    public readonly ssid = this._details.ssid;\n    /** Accuracy of the location data */\n    public readonly variance = this._details.variance?.toFixed(2);\n    /** Diameter of the radius circle */\n    public readonly diameter = this._details.variance * 100;\n    /** Background color for the dot */\n    public readonly bg_color = this._details.bg_color || this.distance_color;\n\n    public overlay_ref: OverlayRef = null;\n    /** Time of the last update */\n    public get last_seen() {\n        return formatDistanceToNow((this._details.last_seen || 0) * 1000, {\n            addSuffix: true,\n        });\n    }\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'end' | 'start';\n    public get distance() {\n        return Math.abs(\n            differenceInMinutes(\n                (this._details.last_seen || 0) * 1000,\n                new Date()\n            )\n        );\n    }\n\n    public get distance_color() {\n        return this.distance < 10\n            ? '#43a047'\n            : this.distance < 20\n            ? '#ffb300'\n            : '#e53935';\n    }\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n    @ViewChild('dot') private _dot: ElementRef<HTMLDivElement>;\n\n    @HostListener('mouseenter') public onEnter = () => this.loadUser();\n    @HostListener('mouseleave') public onLeave = () => this.close();\n    @HostListener('click') public onClick = () => this.loadUser();\n    @HostListener('touchend') public onTouch = () => this.loadUser();\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeviceInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public async loadUser() {\n        this.open();\n        if (this.username) return;\n        const mod = getModule(this._details.system, 'LocationServices');\n        if (mod) {\n            this.username = 'Loading...';\n            const details = await mod\n                .execute('check_ownership_of', [this.mac])\n                .catch((_) => null);\n            this.username =\n                details && details.assigned_to ? details.assigned_to : '';\n        }\n    }\n\n    public open() {\n        if (this.overlay_ref) this.close();\n        if (!this._portal) return;\n        this.overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._dot)\n                .withPositions([\n                    {\n                        originX: this.x_pos === 'start' ? 'end' : 'start',\n                        originY: this.y_pos === 'top' ? 'bottom' : 'top',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'bottom',\n                    },\n                ]),\n        });\n        this.overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this.overlay_ref) {\n            this.overlay_ref.dispose();\n            this.overlay_ref = null;\n        }\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@placeos/components';\n\nexport interface DeskInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 map-id class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p user class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p start class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeskInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    BaseClass,\n    currentUser,\n    HashMap,\n    notifySuccess,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    BookingFormService,\n    queryBookings,\n} from '@placeos/bookings';\nimport { StaffUser } from '@placeos/users';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nexport interface DeskOptions {\n    enable_booking?: boolean;\n    date?: number | Date;\n    zones?: string[];\n    host?: StaffUser;\n}\nexport interface DesksStats {\n    free: number;\n    occupied: number;\n    total: number;\n}\n\n@Injectable()\nexport class ExploreDesksService extends BaseClass implements OnDestroy {\n    private _in_use = new BehaviorSubject<string[]>([]);\n    private _options = new BehaviorSubject<DeskOptions>({});\n    private _desks = new BehaviorSubject<string[]>([]);\n    private _reserved = new BehaviorSubject<string[]>([]);\n    private _statuses: HashMap<string> = {};\n    private _users: HashMap<string> = {};\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _desk_bookings = combineLatest([\n        this._state.level,\n        this._poll,\n    ]).pipe(\n        switchMap(([lvl]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(new Date())),\n                period_end: getUnixTime(endOfDay(new Date())),\n                type: 'desk',\n                zones: lvl.id,\n            })\n        )\n    );\n\n    public readonly desk_list = this._state.level.pipe(\n        switchMap((lvl) =>\n            showMetadata(lvl.id, { name: 'desks' }).pipe(\n                map((i) =>\n                    (i.details instanceof Array ? i.details : []).map(\n                        (j: HashMap) => new Desk({ ...j, zone: lvl as any })\n                    )\n                )\n            )\n        ),\n        catchError((e) => [])\n    );\n\n    private _bind = this._state.level.pipe(\n        map((lvl) => {\n            this._statuses = {};\n            this.unsubWith('lvl');\n            if (!lvl) return;\n            const building = this._org.buildings.find(\n                (bld) => bld.id === lvl.parent_id\n            );\n            if (!building) return;\n            const system_id =\n                building.bindings?.area_management ||\n                this._org.organisation.bindings?.area_management;\n            if (!system_id) return;\n            let binding = getModule(system_id, 'AreaManagement').binding(\n                lvl.id\n            );\n            this.subscription(\n                `lvl-in_use`,\n                binding\n                    .listen()\n                    .subscribe((d) =>\n                        this.processBindingChange(d || {}, system_id)\n                    )\n            );\n            this.subscription('lvl-in_use_bind', binding.bind());\n            binding = getModule(system_id, 'AreaManagement').binding(\n                `${lvl.id}:desk_ids`\n            );\n            this.subscription(\n                `lvl-desks_list`,\n                binding.listen().subscribe((d) => this._desks.next(d || []))\n            );\n            this.subscription('lvl-desk_list_bind', binding.bind());\n        })\n    );\n\n    private _state_change = combineLatest([\n        this.desk_list,\n        this._in_use,\n        this._reserved,\n        this._options,\n    ]).pipe(\n        // debounceTime(50),\n        map(([desks, in_use, reserved]) => {\n            this._statuses = {};\n            for (const { id, bookable } of desks) {\n                const is_used = in_use.some((i) => id === i);\n                const is_reserved = reserved.some((i) => id === i);\n                this._statuses[id] = bookable\n                    ? !is_used\n                        ? 'free'\n                        : is_reserved\n                        ? 'reserved'\n                        : 'busy'\n                    : 'not-bookable';\n            }\n            this.processDesks(desks);\n        })\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _bookings: BookingFormService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.setOptions({\n            enable_booking: this._settings.get('app.desks.enabled') !== false,\n        });\n        this.subscription('bind', this._bind.subscribe());\n        this.subscription('changes', this._state_change.subscribe());\n        this.subscription(\n            'desks',\n            this.desk_list.subscribe((desks) => this.processDesks(desks))\n        );\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.subscription(\n            'desks_in_use_bookings',\n            this._desk_bookings.subscribe((_) =>\n                this._in_use.next(_.map((i) => i.asset_id))\n            )\n        );\n        this.interval(\n            'poll',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: DeskOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public processBindingChange(\n        { value }: { value: any[] },\n        system_id: string\n    ) {\n        const devices = (value || []).filter(\n            (v) => !['desk', 'booking'].includes(v.location)\n        );\n        const desks = (value || []).filter(\n            (v) =>\n                v.location === 'desk' ||\n                (v.location === 'booking' && v.type === 'desk')\n        );\n        this._in_use.next(desks.map((v) => v.map_id || v.asset_id));\n        this._reserved.next(\n            desks\n                .filter((v) => !v.at_location)\n                .map((v) => v.map_id || v.asset_id)\n        );\n        this.processDevices(devices, system_id);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk_id in this._statuses) {\n            if (!this._statuses[desk_id]) continue;\n            style_map[`#${desk_id}`] = {\n                fill:\n                    colours[`desk-${this._statuses[desk_id]}`] ||\n                    colours[`${this._statuses[desk_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[desk_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('desks', style_map);\n    }\n\n    private processDevices(devices: HashMap[], system_id: string) {\n        const list = [];\n        for (const device of devices) {\n            const x = device.x / device.map_width;\n            const y = device.y / device.map_height;\n            list.push({\n                location: {\n                    x: device.coordinates_from?.includes('right') ? 1 - x : x,\n                    y: device.coordinates_from?.includes('bottom') ? 1 - y : y,\n                },\n                content: ExploreDeviceInfoComponent,\n                data: { ...device, system: system_id },\n            });\n        }\n        this._state.setFeatures('devices', list);\n    }\n\n    private processDesks(desks: HashMap[]) {\n        const list = [];\n        const actions = [];\n        const options = this._options.getValue();\n        for (const desk of desks) {\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    user: this._users[desk.map_id] || desk.staff_name,\n                    status: this._statuses[desk.map_id],\n                },\n                z_index: 20\n            });\n            if (!desk.bookable) continue;\n            const book_fn = async () => {\n                this._bookings.newForm();\n                this._bookings.form.patchValue({\n                    asset_id: desk.id,\n                    user: options.host || currentUser(),\n                    booking_type: 'desk',\n                    zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : []\n                });\n                await this._bookings.confirmPost();\n                notifySuccess(\n                    `Successfull booked desk ${desk.name || desk.id}`\n                );\n            };\n            actions.push({\n                id: desk.id,\n                action: 'click',\n                callback: book_fn,\n            });\n            actions.push({\n                id: desk.id,\n                action: 'touchend',\n                callback: book_fn,\n            });\n        }\n        this._state.setActions(\n            'desks',\n            this._options.getValue().enable_booking ? actions : []\n        );\n        this._state.setFeatures('desks', list);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        OverlayModule,\n        PortalModule,\n        FormFieldsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n","import { Injectable } from '@angular/core';\nimport {\n    Point,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService, unique } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { SpacesService } from '@placeos/spaces';\n\nexport interface MapOptions {\n    /** List of keys to ignore for any map resource */\n    disable?: string[];\n    /** List of keys to ignore for map labels */\n    disable_labels?: string[];\n    /** List of keys to ignore for map actions */\n    disable_actions?: string[];\n    /** List of keys to ignore for map features */\n    disable_features?: string[];\n    /** List of keys to ignore for map styles */\n    disable_styles?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({\n        disable: ['zones', 'devices'],\n    });\n\n    private _message = new BehaviorSubject<string>('');\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Currently active level */\n    public readonly message = this._message.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([\n        this._level,\n        this._spaces.list,\n    ]).pipe(\n        map(([level, spaces]) =>\n            spaces.filter((space) => space.zones.includes(level?.id))\n        )\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(\n        map((lvl) => (lvl ? lvl.map_id : '') || '')\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([features, options]) => {\n            let list = [];\n            for (const key in features) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_features?.includes(key)\n                )\n                    continue;\n                list = list.concat(features[key]);\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = combineLatest([\n        this._actions,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([actions, options]) => {\n            let list = [];\n            for (const key in actions) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_actions?.includes(key)\n                )\n                    continue;\n                list = list.concat(actions[key]);\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([\n        this._labels,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([labels, options]) => {\n            let list = [];\n            for (const key in labels) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_labels?.includes(key)\n                )\n                    continue;\n                list = list.concat(labels[key]);\n            }\n            return list;\n        })\n    );\n    /** Current map styles */\n    public readonly map_styles = combineLatest([\n        this._styles,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map(([styles, options]) => {\n            let style_mappings = { text: { display: 'none' } };\n            for (const key in styles) {\n                if (\n                    options.disable?.includes(key) ||\n                    options.disable_styles?.includes(key)\n                )\n                    continue;\n                style_mappings = { ...style_mappings, ...styles[key] };\n            }\n            if (options.disable?.includes('zones')) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    public get active_level() {\n        return this._level.getValue();\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._org.active_building.pipe(filter((_) => !!_)).subscribe((bld) => {\n            const level = this._level.getValue();\n            const level_list = this._org.levelsForBuilding(bld);\n            const has_level = level_list.find((lvl) => level?.id === lvl.id);\n            if (!has_level && level_list.length) {\n                this.setLevel(level_list[0].id);\n            }\n            if (this._settings.get('app.explore.disable_actions')) {\n                this.setOptions({\n                    disable_actions: this._settings.get(\n                        'app.explore.disable_actions'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_labels')) {\n                this.setOptions({\n                    disable_labels: this._settings.get(\n                        'app.explore.disable_labels'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_features')) {\n                this.setOptions({\n                    disable_features: this._settings.get(\n                        'app.explore.disable_features'\n                    ),\n                });\n            }\n            if (this._settings.get('app.explore.disable_styles')) {\n                this.setOptions({\n                    disable_styles: this._settings.get(\n                        'app.explore.disable_styles'\n                    ),\n                });\n            }\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        const old_options = this._options.getValue();\n        const disable = unique([\n            ...(options.disable || old_options.disable),\n            ...(this._settings.get('app.explore.disable') || []),\n        ]);\n        this._options.next({\n            ...this._options.getValue(),\n            ...options,\n            disable,\n        });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button z-in mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon>add</app-icon>\n        </button>\n        <button z-out mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon>remove</app-icon>\n        </button>\n        <button reset mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon>autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: 0.5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () =>\n        this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n"],"sourceRoot":"webpack:///"}