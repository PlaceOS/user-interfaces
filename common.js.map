{"version":3,"file":"common.js","mappings":"8WAiCM,MAAOA,UAA6BC,KAqNtCC,YACYC,EACAC,GAERC,QAHQC,iBACAA,YAtNJA,WAAQ,IAAIC,IAAgB,GAC5BD,gBAAa,IAAIC,IAA8B,OAC/CD,cAAW,IAAIC,KAAgB,GAC/BD,cAAW,IAAIC,IAAgB,CACnCC,YAAa,CAAC,QAAS,OAAQ,UAAW,UAAW,YAEjDF,WAAQ,IAAIC,IAAgBE,KAAKC,OACjCJ,gBAAUK,MAAc,CAACL,KAAKM,MAAON,KAAKO,QAAQC,QACtDC,KAAa,MAAG,EAChBC,KAAKC,GAAMX,KAAKY,SAASC,MAAK,KAG1Bb,cAAqB,GAErBA,qBACJA,KAAKF,KAAKgB,gBAAgBN,QACtBO,KAAQJ,KAAQA,IAAC,EACjBK,KAAwB,OAAI,EAC5BP,KAAa,MAAG,EAChBC,KAAKC,GAAMX,KAAKiB,UAAU,WAAQ,EAClCC,KAAU,EAAGC,SACTnB,KAAKY,SAASC,MAAK,IAAI,EAChBO,MAAqBD,MAC/B,EACDE,KAAqB,EAAEC,IAAMC,KAAQD,IAAOC,IAAE,EAC9CL,KAAWM,IACPxB,KAAKY,SAASC,MAAK,IAAK,EACjBR,OACFmB,GAAQ,IAAIC,IAAKC,IACd,MAAMC,KAAUC,OAAUF,EAAMP,GAAI,YAAYQ,QAC5C,YAEEE,EAAMF,EAAQG,SAAStB,QACzBiB,KAAKM,IACAA,GAAc,IAAIN,IACdO,GACG,IAAIC,KAAc,IACXD,EACHE,UAAWF,EAAEG,UAAUpB,OAClBJ,GACGA,EAAEyB,QAAUV,EAAMU,OAClBzB,EAAE0B,UAEVC,OAAQZ,OAEnB,EAELa,KAAY5B,MAAM6B,MAAG,MAEzB,OAAKxC,KAAKyC,gBAAgB,QAAQf,EAAMP,OACpCnB,KAAK0C,aACD,QAAQhB,EAAMP,KACdQ,EAAQgB,QAGTd,QAGlB,EACDJ,KAAKd,MAAMiC,MAAuBjC,KAAE,EACpCkC,KAAY,IAGJ7C,kBAAYK,MAAc,CACtCL,KAAK8C,gBACL9C,KAAK+C,UACNvC,QACCiB,KAAI,EAAEd,GAAIqC,OACN,MAAMC,KAAOC,QACb,OAAOvC,EAAEI,OACJJ,MACGwC,KAAUxC,EAAEqC,KAAMA,KACjBrC,EAAEyC,KAAKC,gBAAkBJ,EAAKb,MAAMiB,eACjC1C,EAAEwB,UAAUmB,KACPC,GACGA,EAAEnB,MAAMiB,gBACRJ,EAAKb,MAAMiB,gBACjB,IAKNrD,gBAA0CA,KAAK+C,QAAQvC,QACnEU,KAAU,EAAE8B,MACR,MAAMQ,EAAQ,CACVC,gBAAcC,QAAYC,KAAWX,IACrCY,cAAYF,QAAYG,KAASb,KAErC,OAAOhD,KAAKH,UAAUiE,IAAI,4BAAyB,EAC7CC,MAAc,IAAKP,EAAOQ,KAAM,SAAUxD,QACtCiB,KAAKd,GAAMA,EAAEc,IAAKO,MAAMiC,MAA4BjC,MAAG,EACvDO,KAAY5B,MAAM6B,MAAG,OAAI,EAE7B0B,MAAY,IAAKV,IAAShD,QAAK+B,KAAY5B,MAAM6B,MAAG,KAAI,IACjE,EACDK,KAAY,IAGA7C,eAASK,MAAc,CAACL,KAAKmE,aAAa3D,QACtDU,KAAU,EAAEkD,KAAc,QAANA,EAAcpE,KAAKqE,WAAarE,KAAKsE,YAAU,EACnE5D,KAAI,IAAMV,KAAKuE,QAAQ,cAAe,IAAMvE,KAAKY,SAASC,MAAK,MAAO,EACtEgC,KAAY,IAGA7C,cAAkCA,KAAK+C,QAAQvC,QAC3DU,KAAU,EAAE8B,MAAI,EACZe,MAAc,CACVN,gBAAcC,QAAYC,KAAWX,IACrCY,cAAYF,QAAYG,KAASb,IACjCgB,KAAM,YACPxD,QACC+B,KAAY5B,IACR6D,QAAQC,MAAM9D,IAAC,EACR6B,MAAG,SAEjB,EAEL9B,KAAI,IAAMV,KAAKuE,QAAQ,cAAe,IAAMvE,KAAKY,SAASC,MAAK,MAAO,EACtEgC,KAAY,IAGA7C,WAA+BA,KAAK+C,QAAQvC,QACxDU,KAAU,EAAE8B,MAAI,EACZe,MAAc,CACVN,gBAAcC,QAAYC,KAAWX,IACrCY,cAAYF,QAAYG,KAASb,IACjC0B,qBAAqB,EACrBV,KAAM,SACPxD,QACC+B,KAAY5B,IACR6D,QAAQC,MAAM9D,IAAC,EACR6B,MAAG,SAEjB,EAEL9B,KAAI,IAAMV,KAAKuE,QAAQ,cAAe,IAAMvE,KAAKY,SAASC,MAAK,MAAO,EACtEgC,KAAY,IAGA7C,aAAiCA,KAAK+C,QAAQvC,QAC1DU,KAAU,EAAE8B,MAAI,EACZe,MAAc,CACVN,gBAAcC,QAAYC,KAAWX,IACrCY,cAAYF,QAAYG,KAASb,IACjCgB,KAAM,YACPxD,QAAK+B,KAAY5B,MAAM6B,MAAG,QAAK,EAEtC9B,KAAI,IAAMV,KAAKuE,QAAQ,cAAe,IAAMvE,KAAKY,SAASC,MAAK,MAAO,EACtEgC,KAAY,IAGA7C,aAAiCA,KAAK+C,QAAQvC,QAC1DU,KAAU,EAAE8B,MACR,MAAM2B,EAAY3E,KAAKF,KAAK6B,QAAQ,mBACpC,OAAKgD,KACO/C,OAAU+C,EAAW,WACtBC,QAAQ,2BAA2BC,MAAOlE,GAAM,KAAE,EAFtC6B,MAAG,GAAE,IAG/B,EACDf,KAAKd,GACDA,EAAEc,IACGO,GACG,IAAI8C,KAAQ,CACR9B,QAAMW,KAAWxD,KAAKC,OAAO2E,UAC7BC,SAAU,KACVC,SAAUjD,EAAEkD,UACZC,WAAYnD,EAAEoD,YACdC,MAAO,CAACrD,EAAEsD,SAAUtD,EAAEuD,OACtBC,eAAgB,CACZC,OAAQzD,EAAEkD,gBAGzB,EAEL3C,KAAW,OAAMC,MAAG,MAAG,EACvB9B,KAAI,IAAMV,KAAKuE,QAAQ,cAAe,IAAMvE,KAAKY,SAASC,MAAK,MAAO,EACtEgC,KAAY,IAIA7C,iBAAWK,MAAc,CACrCL,KAAK0F,OACL1F,KAAK2F,SACL3F,KAAK4F,MACL5F,KAAK6F,QACL7F,KAAK8F,UACNtF,QACCiB,KAAI,EAAEsE,EAAGC,EAAGC,EAAGC,EAAGC,KACd,IAAIJ,KAAMC,KAAMC,KAAMC,KAAMC,GAAGC,KAAK,CAAC7C,EAAG8C,IAAM9C,EAAEP,KAAOqD,EAAErD,QAIjDhD,0BAAoBK,MAAc,CAC9CL,KAAKsG,SACLtG,KAAKuG,WACN/F,QACCiB,KAAI,EAAE+E,EAAMC,KACRD,EAAKzF,OACAJ,IACKX,KAAK0G,SAASC,SAAShG,EAAEQ,KACvBR,aAAasB,MACbwE,GAASvG,aAAayG,SAAS,UACnCF,GAASvG,aAAayG,SAAUhG,EAAUiG,iBAK1C5G,aAAUA,KAAKuG,SAASM,eAExB7G,UAAOA,KAAKM,MAAMuG,eAElB7G,aAAUA,KAAKY,SAASiG,eAOpC7G,KAAK0C,aACD,YACA1C,KAAKF,KAAKgB,gBAAgBgG,UAAU,IAChC9G,KAAKmE,WAAWtD,KACZb,KAAKH,UAAUiE,IAAI,8BACb,KACA,SAIlB9D,KAAK0G,SAAWK,KAAKC,MACjBC,eAAeC,QAAQ,2BAA6B,KAE5D,CAEOC,cACHnH,KAAKO,MAAMM,KAAKV,KAAKC,MACzB,CAEOgH,aAAaC,EAAQ,KACxB,YAAKC,SACD,OACA,KACiC,YAA7BC,SAASC,iBACHxH,KAAKO,MAAMM,KAAKV,KAAKC,MAAK,EAGpCiH,GAEG,IAAMrH,KAAKyH,aACtB,CAEOA,cACHzH,KAAK0H,cAAc,OACvB,CAEOC,QAAQ3E,GACXhD,KAAKM,MAAMO,KAAKmC,EACpB,CAEO4E,WAAWC,GACd7H,KAAK8H,aAAaD,EAAK1G,IACvBnB,KAAKO,MAAMM,KAAKV,KAAKC,MACzB,CAEO0H,aAAa3G,GAChBnB,KAAK0G,SAASqB,KAAK5G,GACnB8F,eAAee,QACX,yBACAjB,KAAKkB,UAAUjI,KAAK0G,UAE5B,CAEawB,WAAWC,EAAcC,GAAiB,GAAK,qCACxD,MAAM3B,EAAU4B,EAAK9B,SAAS+B,YAAc,CAAEpI,YAAa,KACnDA,eAAgBuG,EACpBvG,IAAgBA,EAAYyG,SAASwB,IAASC,GAC9CC,EAAK9B,SAAS1F,KAAK,IACZ4F,EACHvG,YAAaA,EAAYa,OAAQJ,GAAMA,IAAMwH,KAGjDE,EAAK9B,SAAS1F,KAAK,IACZ4F,EACHvG,YAAa,IAAIA,EAAaiI,IAErC,EAbuD,EAc5D,EA7RSzI,EAAqB,oCAArBA,GAAoB6I,0BAApB7I,EAAqB,wBAArBA,EAAoB8I,QAApB9I,EAAoB,qBAFjB,mPCWV,MAAOA,UAA6BC,KAsEtCC,YAAoBC,GAChBE,QADgBC,iBArEZA,WAAQ,IAAIC,IAAgB,GAC5BD,cAAW,IAAIC,IAAiC,CACpDwI,MAAOtI,KAAKC,QAERJ,cAAW,IAAIC,IAAwB,IACvCD,eAAY,IAAIC,IAA+B,IAEvCD,aAAUA,KAAK0I,SAAS7B,eACxB7G,aAAUA,KAAKY,SAASiG,eACxB7G,cAAWA,KAAKY,SAASiG,eAEzB7G,kBAAY2I,KAAM,KAAMnI,QACpCU,KAAWP,MAAMiI,UAAgB,EACjC/F,KAAY,IAGA7C,eAAoCK,MAAc,CAC9DL,KAAK0I,SACL1I,KAAKO,QACNC,QACCC,KAAa,MAAI,EACjBoI,MAAS,EAAEC,MACP9I,KAAKY,SAASC,KAAK,uBACnB,MAAM2C,EAAa,CACfC,gBAAcC,QAAYC,KAAWmF,EAAQL,QAC7C7E,cAAYF,QAAYqF,QAAQlF,KAASiF,EAAQL,OAAQ,KAE7D,OAAIK,EAAQE,WACRxF,EAAMwF,SAAWF,EAAQE,UAE7BhJ,KAAKiJ,UAAUpI,KACXb,KAAKiJ,UACAX,WACAvH,OACIJ,KACG,EAACuI,MACwB,IAArB1F,EAAMC,aACa,IAAnBD,EAAMI,WACNjD,EAAEqC,KACFrC,EAAEqC,KAAoB,GAAbrC,EAAEqE,SAAgB,QAEtC,EAEFmE,KAAS,EACsC,IAAlDnJ,KAAKH,UAAUiE,IAAI,4BAA+B,EAC5CC,MAAc,IAAKP,EAAOQ,KAAM,SAAUxD,QACtCiB,KAAKd,GACDA,EAAEc,IAAKO,MAAMiC,MAA4BjC,OAC5C,EAELkC,MAAY,IAAKV,KAAO,EAC9BO,MAAc,IAAKP,EAAOQ,KAAM,UAAQ,EACxCD,MAAc,IAAKP,EAAOQ,KAAM,cACjCxD,QAAK+B,KAAY5B,GAAM,IAAG,IAChC,EACDc,KAAI,EAAEiE,EAAQY,MACV,MAAM9E,EAAO,IACNxB,KAAKiJ,UAAUX,cACf5C,KACAY,EAASvF,OAAQJ,GAAmB,aAAbA,EAAEyI,SAC9BhD,KAAK,CAAC7C,EAAG8C,IAAM9C,EAAEP,KAAOqD,EAAErD,MAC5B,YAAKiG,UAAUpI,QAAKwI,MAAO7H,EAAM,OAC1BA,KACV,EACDe,KAAY5B,GAAM,KAAE,EACpBD,KAAKC,GAAMX,KAAKY,SAASC,KAAK,MAAG,EACjCgC,KAAY,GAKhB,CAEOuE,aAAaC,EAAgB,MAChCrH,KAAKsH,SAAS,OAAQ,IAAMtH,KAAKO,MAAMM,KAAKV,KAAKC,OAAQiH,EAC7D,CAEOI,cACHzH,KAAK0H,cAAc,OACvB,CAEO4B,WAAWR,GACd9I,KAAK0I,SAAS7H,KAAK,IAAKb,KAAK0I,SAASJ,cAAeQ,GACzD,EApFSpJ,EAAqB,oCAArBA,GAAoB6J,cAApB7J,EAAqB,wBAArBA,EAAoB8I,QAApB9I,EAAoB,qBAFjB,qMCnBV,MAAO8J,UAAwB7J,IAkBjCC,YACYE,EACAD,GAERE,QAHQC,YACAA,iBAnBKA,gBAAa,IAAIC,IAA4B,IAG9CD,sBAAgB4I,QAAiBpI,QAC7CE,KAAKyF,GAAMnG,KAAKyJ,WAAW5I,KAAKsF,KAAE,EAClCtD,KAAY,IAIA7C,WAAQ,OAAM4I,QAEd5I,cAAY0J,MACxBC,MAAmBD,EAAG1J,KAAKF,MAEfE,kBAAgB0J,MAC5BE,MAA0BF,GAO1B1J,KAAKF,KAAK+J,YACLrJ,QAAKsJ,KAAOnJ,GAAMA,IAClBmG,UAAU,IAAM9G,KAAK+J,OAC9B,CAEaA,OAAI,qCACT1B,EAAKxI,UAAUiE,IAAI,4BACvBuE,EAAK2B,aAAanJ,MAAK,EAAM,EAFhB,EAGjB,CAEWoJ,gBACP,OAAOjK,KAAKyJ,WAAWnB,UAC3B,CAMO4B,gBAAgBlH,EAAciH,GACjC,SAAON,MACH,CACIlG,gBAAcC,QAAYC,KAAWX,IACrCY,cAAYF,QAAYG,KAASb,IACjCiH,aAEJjK,KAAKF,KAEb,CAGaqK,wBACTC,EACA3G,EACAG,EACAyG,GAA2B,0BAE3B,MAAMC,QAAM,EAASV,MAA0B,CAC3CnG,eACAG,aACAwG,WAAYA,EAAWG,KAAK,OAC7BC,YACG/B,EAAQ,IAAItI,KAAKkK,GAAarH,MAAM+B,UACpC0F,KAAMC,KAAWjC,EAAO4B,GAAarF,UAAUD,UAgBrD,QAfkBuF,EAAOK,MAAO3I,IAC5B,MAAM4I,EAAe5I,EAAE4I,aACvB,GAAIP,GAAerI,EAAEb,KAAOkJ,EAAY/H,QAAQF,MAAO,CACnD,MAAMyI,EAAQD,EAAaE,UAAWC,GAE9BA,EAAM/H,MAAQyF,MACdiC,KAAWK,EAAM/H,KAAM+H,EAAM/F,UAAUD,WAAa0F,IAG9C,IAAVI,GACAD,EAAaI,OAAOH,EAAO,EAAC,CAGpC,OAAQD,EAAaK,QAEN,EAxBQ,EAyB/B,EAlFSzB,EAAgB,oCAAhBA,GAAe0B,wBAAf1B,EAAgB,wBAAhBA,EAAehB,QAAfgB,EAAe,qBAFZ","names":["ScheduleStateService","AsyncHandler","constructor","_settings","_org","super","this","BehaviorSubject","shown_types","Date","now","combineLatest","_date","_poll","pipe","debounceTime","tap","_","_loading","next","active_building","filter","distinctUntilKeyChanged","unsubWith","switchMap","id","requestSpacesForZone","distinctUntilChanged","s1","s2","list","map","space","binding","getModule","obs","listen","event_list","i","CalendarEvent","resources","attendees","email","resource","system","catchError","of","hasSubscription","subscription","bind","flatten","shareReplay","_space_bookings","_update","date","user","currentUser","isSameDay","host","toLowerCase","find","a","query","period_start","getUnixTime","startOfDay","period_end","endOfDay","get","queryBookings","type","newCalendarEventFromBooking","queryEvents","_poll_type","t","api_events","ws_events","timeout","console","error","include_checked_out","system_id","execute","catch","Booking","valueOf","duration","asset_id","locker_id","asset_name","locker_name","zones","building","level","extension_data","map_id","events","visitors","desks","parking","lockers","e","v","d","p","l","sort","b","bookings","_filters","bkns","filters","_deleted","includes","booking_type","asObservable","subscribe","JSON","parse","sessionStorage","getItem","triggerPoll","startPolling","delay","interval","document","visibilityState","stopPolling","clearInterval","setDate","removeItem","item","setAsDeleted","push","setItem","stringify","toggleType","name","clear","_this","getValue","_angular_core__WEBPACK_IMPORTED_MODULE_23__","factory","start","_options","timer","queryCalendars","mergeMap","options","addDays","calendar","_schedule","timePeriodsIntersect","forkJoin","status","unique","setOptions","_angular_core__WEBPACK_IMPORTED_MODULE_19__","CalendarService","_calendars","q","querySpaceFreeBusy","queryCalendarAvailability","initialised","first","init","_initialised","calendars","getFreeBusyDate","checkSpacesAvailability","system_ids","old_booking","result","join","toPromise","end","addMinutes","every","availability","index","findIndex","block","splice","length","core"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/schedule/schedule-state.service.ts","./libs/calendar/src/lib/calendar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    flatten,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from '@placeos/spaces';\nimport { getModule } from '@placeos/ts-client';\nimport { endOfDay, getUnixTime, isSameDay, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    distinctUntilKeyChanged,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _poll_type = new BehaviorSubject<'api' | 'ws'>('api');\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: ['event', 'desk', 'parking', 'visitor', 'locker'],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    private _update = combineLatest([this._date, this._poll]).pipe(\n        debounceTime(500),\n        tap((_) => this._loading.next(true))\n    );\n\n    private _deleted: string[] = [];\n\n    private _space_bookings: Observable<CalendarEvent[]> =\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n            debounceTime(300),\n            tap((_) => this.unsubWith('bind:')),\n            switchMap(({ id }) => {\n                this._loading.next(true);\n                return requestSpacesForZone(id);\n            }), // Get list of spaces for building\n            distinctUntilChanged(([s1], [s2]) => s1 !== s2),\n            switchMap((list) => {\n                this._loading.next(false);\n                return combineLatest(\n                    (list || []).map((space) => {\n                        const binding = getModule(space.id, 'Bookings').binding(\n                            'bookings'\n                        );\n                        const obs = binding.listen().pipe(\n                            map((event_list) =>\n                                (event_list || []).map(\n                                    (i) =>\n                                        new CalendarEvent({\n                                            ...i,\n                                            resources: i.attendees.filter(\n                                                (_) =>\n                                                    _.email === space.email ||\n                                                    _.resource\n                                            ),\n                                            system: space,\n                                        })\n                                )\n                            ),\n                            catchError((_) => of([]))\n                        );\n                        if (!this.hasSubscription(`bind:${space.id}`)) {\n                            this.subscription(\n                                `bind:${space.id}`,\n                                binding.bind()\n                            );\n                        }\n                        return obs;\n                    })\n                );\n            }),\n            map((_) => flatten<CalendarEvent>(_)),\n            shareReplay(1)\n        );\n\n    public readonly ws_events = combineLatest([\n        this._space_bookings,\n        this._update,\n    ]).pipe(\n        map(([_, [date]]) => {\n            const user = currentUser();\n            return _.filter(\n                (_) =>\n                    isSameDay(_.date, date) &&\n                    (_.host.toLowerCase() === user.email.toLowerCase() ||\n                        _.attendees.find(\n                            (a) =>\n                                a.email.toLowerCase() ===\n                                user.email.toLowerCase()\n                        ))\n            );\n        })\n    );\n    /** List of calendar events for the selected date */\n    public readonly api_events: Observable<CalendarEvent[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const query = {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            };\n            return this._settings.get('app.events.use_bookings')\n                ? queryBookings({ ...query, type: 'room' }).pipe(\n                      map((_) => _.map((i) => newCalendarEventFromBooking(i))),\n                      catchError((_) => of([]))\n                  )\n                : queryEvents({ ...query }).pipe(catchError((_) => of([])));\n        }),\n        shareReplay(1)\n    );\n    /** List of calendar events for the selected date */\n    public readonly events = combineLatest([this._poll_type]).pipe(\n        switchMap(([t]) => (t === 'api' ? this.api_events : this.ws_events)),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly visitors: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'visitor',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                include_checked_out: true,\n                type: 'desk',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n            }).pipe(catchError((_) => of([])))\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly lockers: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const system_id = this._org.binding('area_management');\n            if (!system_id) return of([]);\n            const mod = getModule(system_id, 'Lockers');\n            return mod.execute('lockers_allocated_to_me').catch((_) => []);\n        }),\n        map((_) =>\n            _.map(\n                (i) =>\n                    new Booking({\n                        date: startOfDay(Date.now()).valueOf(),\n                        duration: 24 * 60 - 1,\n                        asset_id: i.locker_id,\n                        asset_name: i.locker_name,\n                        zones: [i.building, i.level],\n                        extension_data: {\n                            map_id: i.locker_id,\n                        },\n                    })\n            )\n        ),\n        catchError(() => of([])),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.visitors,\n        this.desks,\n        this.parking,\n        this.lockers,\n    ]).pipe(\n        map(([e, v, d, p, l]) =>\n            [...e, ...v, ...d, ...p, ...l].sort((a, b) => a.date - b.date)\n        )\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter(\n                (_) =>\n                    (!this._deleted.includes(_.id) &&\n                        _ instanceof CalendarEvent &&\n                        filters?.shown_types?.includes('event')) ||\n                    filters?.shown_types?.includes((_ as any).booking_type)\n            )\n        )\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.subscription(\n            'poll_type',\n            this._org.active_building.subscribe(() =>\n                this._poll_type.next(\n                    this._settings.get('app.schedule.use_websocket')\n                        ? 'ws'\n                        : 'api'\n                )\n            )\n        );\n        this._deleted = JSON.parse(\n            sessionStorage.getItem('PLACEOS.events.deleted') || '[]'\n        );\n    }\n\n    public triggerPoll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay = 60 * 1000) {\n        this.interval(\n            'poll',\n            () => {\n                document.visibilityState === 'visible'\n                    ? this._poll.next(Date.now())\n                    : '';\n            },\n            delay\n        );\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public removeItem(item) {\n        this.setAsDeleted(item.id);\n        this._poll.next(Date.now());\n    }\n\n    public setAsDeleted(id: string) {\n        this._deleted.push(id);\n        sessionStorage.setItem(\n            'PLACEOS.events.deleted',\n            JSON.stringify(this._deleted)\n        );\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters;\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({\n                ...filters,\n                shown_types: shown_types.filter((_) => _ !== name),\n            });\n        } else {\n            this._filters.next({\n                ...filters,\n                shown_types: [...shown_types, name],\n            });\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    AsyncHandler,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.events.use_bookings') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, tap } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { AsyncHandler } from 'libs/common/src/lib/async-handler.class';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends AsyncHandler {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = queryCalendars().pipe(\n        tap((l) => this._calendars.next(l)),\n        shareReplay(1)\n    );\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        if (this._settings.get('app.events.use_bookings')) return;\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n}\n"],"x_google_ignoreList":[]}