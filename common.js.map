{"version":3,"file":"common.js","mappings":"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","names":["ScheduleStateService","BaseClass","constructor","_settings","_org","super","this","BehaviorSubject","shown_types","Date","now","combineLatest","_date","_poll","pipe","debounceTime","tap","_","_loading","next","active_building","filter","distinctUntilKeyChanged","unsubWith","switchMap","id","requestSpacesForZone","distinctUntilChanged","s1","s2","list","map","space","binding","getModule","obs","listen","event_list","i","CalendarEvent","resources","attendees","email","resource","system","hasSubscription","subscription","bind","flatten","shareReplay","_space_bookings","console","log","host","a","join","user","currentUser","toLowerCase","find","_update","date","query","period_start","getUnixTime","startOfDay","period_end","endOfDay","get","queryBookings","type","newCalendarEventFromBooking","catchError","queryEvents","timeout","_poll_type","t","api_events","ws_events","error","events","visitors","desks","parking","e","v","d","p","sort","b","bookings","_filters","bkns","filters","includes","booking_type","asObservable","subscribe","triggerPoll","startPolling","delay","interval","document","visibilityState","stopPolling","clearInterval","setDate","removeItem","item","toggleType","name","clear","s","getValue","i0","factory","start","_options","timer","queryCalendars","mergeMap","options","addDays","calendar","_schedule","timePeriodsIntersect","duration","forkJoin","status","unique","setOptions","CalendarService","l","_calendars","q","querySpaceFreeBusy","queryCalendarAvailability","initialised","first","init","_initialised","calendars","getFreeBusyDate","checkSpacesAvailability","system_ids","old_booking","result","toPromise","valueOf","end","addMinutes","every","availability","index","findIndex","block","splice","length"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/schedule/schedule-state.service.ts","./libs/calendar/src/lib/calendar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from '@placeos/spaces';\nimport { getModule } from '@placeos/ts-client';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    distinctUntilKeyChanged,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _poll = new BehaviorSubject(0);\n    private _poll_type = new BehaviorSubject<'api' | 'ws'>('api');\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: ['event', 'desk', 'parking', 'visitor'],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    private _update = combineLatest([this._date, this._poll]).pipe(\n        debounceTime(500),\n        tap((_) => this._loading.next(true))\n    );\n\n    private _space_bookings: Observable<CalendarEvent[]> =\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n            debounceTime(300),\n            tap((_) => this.unsubWith('bind:')),\n            switchMap(({ id }) => {\n                this._loading.next(true);\n                return requestSpacesForZone(id);\n            }), // Get list of spaces for building\n            distinctUntilChanged(([s1], [s2]) => s1 !== s2),\n            switchMap((list) => {\n                this._loading.next(false);\n                return combineLatest(\n                    (list || []).map((space) => {\n                        const binding = getModule(space.id, 'Bookings').binding(\n                            'bookings'\n                        );\n                        const obs = binding.listen().pipe(\n                            map((event_list) =>\n                                (event_list || []).map(\n                                    (i) =>\n                                        new CalendarEvent({\n                                            ...i,\n                                            resources: i.attendees.filter(\n                                                (_) =>\n                                                    _.email === space.email ||\n                                                    _.resource\n                                            ),\n                                            system: space,\n                                        })\n                                )\n                            )\n                        );\n                        if (!this.hasSubscription(`bind:${space.id}`)) {\n                            this.subscription(\n                                `bind:${space.id}`,\n                                binding.bind()\n                            );\n                        }\n                        return obs;\n                    })\n                );\n            }),\n            map((_) => flatten<CalendarEvent>(_)),\n            shareReplay(1)\n        );\n\n    public readonly ws_events = this._space_bookings.pipe(\n        tap((_) =>\n            console.log(\n                'Events:',\n                _.map(\n                    (_) =>\n                        `${_.host} | [${_.attendees\n                            .map((a) => a.email)\n                            .join(',')}]`\n                )\n            )\n        ),\n        map((_) => {\n            const user = currentUser();\n            console.log('User:', user);\n            return _.filter(\n                (_) =>\n                    _.host.toLowerCase() === user.email.toLowerCase() ||\n                    _.attendees.find(\n                        (a) =>\n                            a.email.toLowerCase() === user.email.toLowerCase()\n                    )\n            );\n        }),\n        tap((_) => console.log('Your events:', _))\n    );\n    /** List of calendar events for the selected date */\n    public readonly api_events: Observable<CalendarEvent[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const query = {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            };\n            return this._settings.get('app.events.use_bookings')\n                ? queryBookings({ ...query, type: 'room' }).pipe(\n                      map((_) => _.map((i) => newCalendarEventFromBooking(i))),\n                      catchError((_) => [])\n                  )\n                : queryEvents({ ...query }).pipe(catchError((_) => []));\n        }),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of calendar events for the selected date */\n    public readonly events = this._poll_type.pipe(\n        switchMap((t) => (t === 'api' ? this.api_events : this.ws_events))\n    );\n    /** List of desk bookings for the selected date */\n    public readonly visitors: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'visitor',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return [];\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'desk',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return [];\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n            }).pipe(catchError((_) => []))\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.visitors,\n        this.desks,\n        this.parking,\n    ]).pipe(\n        map(([e, v, d, p]) =>\n            [...e, ...v, ...d, ...p].sort((a, b) => a.date - b.date)\n        )\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter(\n                (_) =>\n                    (_ instanceof CalendarEvent &&\n                        filters?.shown_types?.includes('event')) ||\n                    filters?.shown_types?.includes((_ as any).booking_type)\n            )\n        )\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.subscription(\n            'poll_type',\n            this._org.active_building.subscribe(() =>\n                this._poll_type.next(\n                    this._settings.get('app.schedule.use_websocket')\n                        ? 'ws'\n                        : 'api'\n                )\n            )\n        );\n    }\n\n    public triggerPoll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay = 60 * 1000) {\n        this.interval(\n            'poll',\n            () => {\n                document.visibilityState === 'visible'\n                    ? this._poll.next(Date.now())\n                    : '';\n            },\n            delay\n        );\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public removeItem(item) {\n        this._poll.next(Date.now());\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters;\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({\n                ...filters,\n                shown_types: shown_types.filter((_) => _ !== name),\n            });\n        } else {\n            this._filters.next({\n                ...filters,\n                shown_types: [...shown_types, name],\n            });\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    BaseClass,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.events.use_bookings') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, tap } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { BaseClass } from 'libs/common/src/lib/base.class';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends BaseClass {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = queryCalendars().pipe(\n        tap((l) => this._calendars.next(l)),\n        shareReplay(1)\n    );\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        if (this._settings.get('app.events.use_bookings')) return;\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n}\n"],"x_google_ignoreList":[]}