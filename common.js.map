{"version":3,"file":"common.js","mappings":"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","names":["ScheduleStateService","AsyncHandler","constructor","_settings","_org","_lockers","_dialog","_parking","_this","super","this","_poll","BehaviorSubject","_poll_type","_loading","_filters","shown_types","_date","Date","now","_update","combineLatest","pipe","debounceTime","tap","_","next","_deleted","_space_bookings","active_building","filter","distinctUntilKeyChanged","unsubWith","switchMap","id","requestSpacesForZone","distinctUntilChanged","s1","s2","list","map","space","binding","getModule","obs","listen","event_list","i","CalendarEvent","resources","attendees","email","resource","system","catchError","of","hasSubscription","subscription","bind","flatten","shareReplay","ws_events","date","user","currentUser","isSameDay","host","toLowerCase","find","a","linked_bookings","b","booking_type","api_events","query","period_start","getUnixTime","startOfDay","period_end","endOfDay","get","queryBookings","type","newCalendarEventFromBooking","queryEvents","raw_events","t","timeout","events","extension_data","shared_event","visitors","parent_id","linked_event","desks","include_checked_out","parking","include_deleted","group_events","lockers","lockers$","_ref","_asyncToGenerator","system_id","execute","catch","_x","apply","arguments","my_lockers","locker","locker_id","level","building","level_id","levelWithID","Booking","valueOf","duration","title","description","locker_name","all_day","asset_id","map_id","asset_name","zones","item","e","console","error","bookings","ev","bkn","meeting_id","sort","filtered_bookings","bkns","filters","includes","asObservable","loading","_ignore_cancel","_checkCancel","current_user","interval","startWith","u","_ref2","is_home","location","auto_release","time_after","time_before","length","Math","min","startOfMinute","addMinutes","toPromise","check_block","booking","checked_in","rejected","closeAll","diff","differenceInMinutes","time","close_after","differenceInMilliseconds","getTime","wording","result","openConfirmModal","content","format","time_format","icon","confirm_text","cancel_text","close_delay","reason","checkinBooking","close","push","_x2","subscribe","triggerPoll","JSON","parse","sessionStorage","getItem","startPolling","delay","stopPolling","clearInterval","setDate","removeItem","setAsDeleted","setItem","stringify","toggleType","name","clear","_this2","getValue","static","i0","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_30__","jDH","factory","ɵfac","providedIn","_options","start","_schedule","options","schedule","calendars","timer","queryCalendars","mergeMap","addDays","calendar","timePeriodsIntersect","forkJoin","status","unique","setOptions","_angular_core__WEBPACK_IMPORTED_MODULE_19__","CalendarService","_calendars","calendar_list","l","freeBusy","q","querySpaceFreeBusy","availability","queryCalendarAvailability","initialised","first","init","_initialised","getFreeBusyDate","checkSpacesAvailability","system_ids","old_booking","join","end","every","index","findIndex","block","splice","core"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/schedule/schedule-state.service.ts","./libs/calendar/src/lib/calendar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    Booking,\n    Locker,\n    LockersService,\n    ParkingService,\n    checkinBooking,\n    queryBookings,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    current_user,\n    currentUser,\n    flatten,\n    openConfirmModal,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from '@placeos/spaces';\nimport { getModule } from '@placeos/ts-client';\nimport {\n    addMinutes,\n    differenceInMilliseconds,\n    differenceInMinutes,\n    endOfDay,\n    format,\n    getUnixTime,\n    isSameDay,\n    startOfDay,\n    startOfMinute,\n} from 'date-fns';\nimport { BehaviorSubject, combineLatest, interval, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    distinctUntilKeyChanged,\n    filter,\n    map,\n    shareReplay,\n    startWith,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _poll_type = new BehaviorSubject<'api' | 'ws'>('api');\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: [\n            'event',\n            'desk',\n            'parking',\n            'visitor',\n            'locker',\n            'group-event',\n        ],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    private _update = combineLatest([this._date, this._poll]).pipe(\n        debounceTime(500),\n        tap((_) => this._loading.next(true)),\n    );\n\n    private _deleted: string[] = [];\n\n    private _space_bookings: Observable<CalendarEvent[]> =\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n            debounceTime(300),\n            tap((_) => this.unsubWith('bind:')),\n            switchMap(({ id }) => {\n                this._loading.next(true);\n                return requestSpacesForZone(id);\n            }), // Get list of spaces for building\n            distinctUntilChanged(([s1], [s2]) => s1 !== s2),\n            switchMap((list) => {\n                this._loading.next(false);\n                return combineLatest(\n                    (list || []).map((space) => {\n                        const binding = getModule(space.id, 'Bookings').binding(\n                            'bookings',\n                        );\n                        const obs = binding.listen().pipe(\n                            map((event_list) =>\n                                (event_list || []).map(\n                                    (i) =>\n                                        new CalendarEvent({\n                                            ...i,\n                                            resources: i.attendees.filter(\n                                                (_) =>\n                                                    _.email === space.email ||\n                                                    _.resource,\n                                            ),\n                                            system: space,\n                                        }),\n                                ),\n                            ),\n                            catchError((_) => of([])),\n                        );\n                        if (!this.hasSubscription(`bind:${space.id}`)) {\n                            this.subscription(\n                                `bind:${space.id}`,\n                                binding.bind(),\n                            );\n                        }\n                        return obs;\n                    }),\n                );\n            }),\n            map((_) => flatten<CalendarEvent>(_)),\n            shareReplay(1),\n        );\n\n    public readonly ws_events = combineLatest([\n        this._space_bookings,\n        this._update,\n    ]).pipe(\n        map(([_, [date]]) => {\n            const user = currentUser();\n            return _.filter(\n                (_) =>\n                    isSameDay(_.date, date) &&\n                    (_.host.toLowerCase() === user.email.toLowerCase() ||\n                        _.attendees.find(\n                            (a) =>\n                                a.email.toLowerCase() ===\n                                user.email.toLowerCase(),\n                        )) &&\n                    !_.linked_bookings?.find(\n                        (b) => b.booking_type === 'group-event',\n                    ),\n            );\n        }),\n    );\n    /** List of calendar events for the selected date */\n    public readonly api_events: Observable<CalendarEvent[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const query = {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            };\n            return this._settings.get('app.events.use_bookings')\n                ? queryBookings({ ...query, type: 'room' }).pipe(\n                      map((_) => _.map((i) => newCalendarEventFromBooking(i))),\n                      catchError((_) => of([])),\n                  )\n                : queryEvents({ ...query }).pipe(catchError((_) => of([])));\n        }),\n        shareReplay(1),\n    );\n    /** List of calendar events for the selected date */\n    public readonly raw_events = combineLatest([this._poll_type]).pipe(\n        switchMap(([t]) => (t === 'api' ? this.api_events : this.ws_events)),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1),\n    );\n    /** List of calendar events for the selected date */\n    public readonly events = this.raw_events.pipe(\n        map((_) => _.filter((_) => !_.extension_data?.shared_event)),\n    );\n    /** List of desk bookings for the selected date */\n    public readonly visitors: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'visitor',\n            }).pipe(catchError((_) => of([] as Booking[]))),\n        ),\n        map((_) => _.filter((_) => !_.parent_id && !_.linked_event)),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1),\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                include_checked_out: true,\n                type: 'desk',\n            }).pipe(catchError((_) => of([]))),\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1),\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n                include_deleted: 'recurring',\n            }).pipe(catchError((_) => of([]))),\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1),\n    );\n    /** List of calendar events for the selected date */\n    public readonly group_events = this.raw_events.pipe(\n        map((_) => _.filter((_) => _.extension_data?.shared_event)),\n    );\n    /** List of parking bookings for the selected date */\n    public readonly lockers: Observable<Booking[]> = combineLatest([\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n        ),\n        this._lockers.lockers$,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(async ([_, lockers]) => {\n            const system_id = this._org.binding('lockers');\n            if (!system_id) return [[], lockers];\n            const mod = getModule(system_id, 'LockerLocations');\n            const my_lockers = await mod\n                .execute('lockers_allocated_to_me')\n                .catch((_) => []);\n            return [my_lockers, lockers];\n        }),\n        map(([my_lockers, lockers]) => {\n            return my_lockers\n                .map((i) => {\n                    const locker = (lockers as Locker[]).find(\n                        (_) => _.id === i.locker_id,\n                    );\n                    if (!locker && (!i.level || !i.building)) return null;\n                    i.level = i.level || locker?.level_id;\n                    i.building =\n                        i.building ||\n                        this._org.levelWithID([locker?.level_id])?.parent_id;\n                    return new Booking({\n                        date: startOfDay(Date.now()).valueOf(),\n                        duration: 24 * 60 - 1,\n                        title: 'Locker Booking',\n                        description: i.locker_name,\n                        booking_type: 'locker',\n                        all_day: true,\n                        asset_id: locker.map_id,\n                        asset_name: i.locker_name,\n                        zones: [i.building, i.level],\n                        extension_data: {\n                            // map_id: i.locker_id || locker.map_id,\n                        },\n                    });\n                })\n                .filter((item) => item);\n        }),\n        catchError((e) => {\n            console.error(e);\n            return of([]);\n        }),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1),\n    );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.visitors,\n        this.desks,\n        this.parking,\n        this.lockers,\n        this.group_events,\n    ]).pipe(\n        map(\n            ([\n                events,\n                visitors,\n                desks,\n                parking,\n                lockers,\n                group_events,\n            ]: any) => {\n                const filtered_events = events.filter(\n                    (ev) =>\n                        !desks.find(\n                            (bkn) => `${ev.meeting_id}` === `${bkn.id}`,\n                        ) &&\n                        ev.linked_bookings[0]?.booking_type !== 'group-event',\n                );\n                return [\n                    ...filtered_events,\n                    ...visitors,\n                    ...desks,\n                    ...parking,\n                    ...lockers,\n                    ...group_events,\n                ].sort((a, b) => a.date - b.date);\n            },\n        ),\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter((_) => {\n                if (this._deleted.includes(_.id)) return false;\n                if (\n                    _.extension_data?.shared_event &&\n                    !filters?.shown_types?.includes('group-event')\n                )\n                    return false;\n                if (\n                    _ instanceof CalendarEvent &&\n                    !filters?.shown_types?.includes('event')\n                )\n                    return false;\n                else if (_ instanceof CalendarEvent) return true;\n                return filters?.shown_types?.includes((_ as any).booking_type);\n            }),\n        ),\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    private _ignore_cancel: string[] = [];\n    private _checkCancel = combineLatest([\n        current_user,\n        interval(60 * 1000).pipe(startWith(0)),\n    ]).pipe(\n        filter(([u]) => !!u),\n        map(async ([user]) => {\n            const is_home = user.location !== 'wfo';\n            const auto_release = this._settings.get('app.auto_release');\n            if (\n                auto_release &&\n                is_home &&\n                (auto_release.time_after || auto_release.time_before) &&\n                auto_release.resources?.length\n            ) {\n                const time_before = Math.min(60, auto_release.time_before || 0);\n                for (const type of auto_release.resources) {\n                    const bookings = await queryBookings({\n                        period_start: getUnixTime(startOfMinute(Date.now())),\n                        period_end: getUnixTime(\n                            addMinutes(\n                                Date.now(),\n                                (auto_release.time_after || 5) + time_before,\n                            ),\n                        ),\n                        type,\n                    }).toPromise();\n                    const check_block =\n                        (auto_release.time_after || 0) + time_before;\n                    for (const booking of bookings) {\n                        if (\n                            this._ignore_cancel.includes(booking.id) ||\n                            booking.checked_in ||\n                            booking.rejected\n                        ) {\n                            continue;\n                        }\n                        this._dialog.closeAll();\n                        const diff = differenceInMinutes(\n                            addMinutes(\n                                booking.date,\n                                auto_release.time_after || 0,\n                            ),\n                            Date.now(),\n                        );\n                        if (diff > check_block || diff < 0) continue;\n                        const time = addMinutes(\n                            booking.date,\n                            auto_release.time_after || 0,\n                        );\n                        const close_after = differenceInMilliseconds(\n                            time.getTime() + 60 * 1000,\n                            Date.now(),\n                        );\n                        const wording =\n                            type === 'parking' ? 'reservation' : 'booking';\n                        const result = await openConfirmModal(\n                            {\n                                title: `Keep ${type} ${wording}`,\n                                content: `You have indicated you are not in the office. \n                                Your  ${wording} for \"<i>${\n                                    booking.asset_name || booking.title\n                                }</i>\" at ${format(\n                                    booking.date,\n                                    this._settings.time_format,\n                                )} will be cancelled at ${format(\n                                    time,\n                                    this._settings.time_format,\n                                )}.<br/><br/>\n                                Do you wish to keep this ${wording}?`,\n                                icon: { content: 'event_busy' },\n                                confirm_text: 'Keep',\n                                cancel_text: 'Dismiss',\n                                close_delay: close_after,\n                            },\n                            this._dialog,\n                        );\n                        if (result.reason !== 'done') {\n                            this._ignore_cancel.push(booking.id);\n                            continue;\n                        }\n                        result.loading('Checking in booking...');\n                        await checkinBooking(booking.id, true).toPromise();\n                        result.close();\n                    }\n                }\n            }\n        }),\n    );\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _lockers: LockersService,\n        private _dialog: MatDialog,\n        private _parking: ParkingService,\n    ) {\n        super();\n        this.subscription(\n            'poll_type',\n            this._org.active_building.subscribe(() =>\n                this._poll_type.next(\n                    this._settings.get('app.schedule.use_websocket')\n                        ? 'ws'\n                        : 'api',\n                ),\n            ),\n        );\n        this.subscription(\n            'chat_event',\n            this._settings\n                .listen('CHAT:task_complete')\n                .subscribe(() => this.triggerPoll()),\n        );\n        this.subscription('wfh_checks', this._checkCancel.subscribe());\n        this._deleted = JSON.parse(\n            sessionStorage.getItem('PLACEOS.events.deleted') || '[]',\n        );\n    }\n\n    public triggerPoll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay = 60 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public removeItem(item) {\n        this.setAsDeleted(item.id);\n        this._poll.next(Date.now());\n    }\n\n    public setAsDeleted(id: string) {\n        this._deleted.push(id);\n        sessionStorage.setItem(\n            'PLACEOS.events.deleted',\n            JSON.stringify(this._deleted),\n        );\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters;\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({\n                ...filters,\n                shown_types: shown_types.filter((_) => _ !== name),\n            });\n        } else {\n            this._filters.next({\n                ...filters,\n                shown_types: [...shown_types, name],\n            });\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    AsyncHandler,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.events.use_bookings') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n                queryBookings({ ...query, type: 'group-event' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings, parking, group_events]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n                ...group_events.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, tap } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { AsyncHandler } from 'libs/common/src/lib/async-handler.class';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends AsyncHandler {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = queryCalendars().pipe(\n        tap((l) => this._calendars.next(l)),\n        shareReplay(1)\n    );\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        if (this._settings.get('app.events.use_bookings')) return;\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n}\n"],"x_google_ignoreList":[]}