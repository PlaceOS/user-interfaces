{"version":3,"file":"common.js","mappings":"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","names":["DesksStateService","AsyncHandler","new_desk_count","this","_new_desks","getValue","length","nextPage","_call_next_page","next","Date","now","constructor","_org","_dialog","super","_filters","BehaviorSubject","_desk_bookings","_loading","new_desks","asObservable","loading","filters","desks","pipe","debounceTime","switchMap","zones","includes","showMetadata","map","m","details","Array","catchError","_","of","listChildMetadata","building","id","name","i","metadata","reduce","c","list","console","log","sort","a","b","localeCompare","Desk","qr_code","shareReplay","_next_page","Subject","_all_zones_keys","setup_paging","combineLatest","initialised","tap","loaded","date","some","z","queryPagedBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","join","include_checked_out","data","total","paged_bookings","distinctUntilChanged","next_page","action","reset","scan","acc","has_more_pages","bookings","subscribe","setFilters","levelsForBuilding","lvl","refresh","timeout","addDesks","concat","removeNewDesk","desk","filter","d","clearNewDesks","checkinDesk","state","_asyncToGenerator","status","checkinBooking","toPromise","catch","failed","error","notifyError","notifySuccess","user_name","approveDesk","approveBooking","format","approved","rejected","rejectDesk","rejectBooking","giveAccess","_this","success","saveBooking","Booking","access","rejectAllDesks","_this2","notifyInfo","resp","openConfirmModal","title","content","icon","class","reason","Promise","all","close","static","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_22__","Yz7","factory","Éµfac","providedIn"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/desks/desks-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    scan,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryPagedBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { QueryResponse } from '@placeos/ts-client/dist/esm/resources/functions';\n\nfunction addQRCodeToBooking(booking: Booking): Booking {\n    return new Booking({\n        ...booking,\n        extension_data: {\n            ...booking.extension_data,\n            checkin_qr_code: generateQRCode(\n                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                    booking.asset_id\n                )}`\n            ),\n        },\n    });\n}\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _new_desks = new BehaviorSubject<Desk[]>([]);\n    private _desk_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly new_desks = this._new_desks.asObservable();\n\n    public get new_desk_count() {\n        return this._new_desks.getValue()?.length || 0;\n    }\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || [];\n            return zones && !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(\n                      map((m) => (m.details instanceof Array ? m.details : [])),\n                      catchError((_) => of([]))\n                  )\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata?.desks?.details || [])\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      ),\n                      catchError((_) => of([]))\n                  );\n        }),\n        map((list) => {\n            console.log('Desks:', list);\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name?.localeCompare(b.name));\n            return list.map((i) => new Desk({ ...i, qr_code: '' }));\n        }),\n        shareReplay(1)\n    );\n\n    private _next_page = new Subject<() => QueryResponse<Booking>>();\n    private _call_next_page = new Subject<string>();\n    private _all_zones_keys = ['All', -1, '-1'];\n    public readonly setup_paging = combineLatest([\n        this._filters,\n        this._org.initialised,\n    ]).pipe(\n        debounceTime(500),\n        tap(([filters, loaded]) => {\n            if (!loaded) return;\n            const date = filters.date || Date.now();\n            const zones =\n                !filters.zones ||\n                filters.zones.some((z) => this._all_zones_keys.includes(z))\n                    ? [this._org.building.id]\n                    : filters.zones;\n            this._next_page.next(() =>\n                queryPagedBookings({\n                    period_start: getUnixTime(startOfDay(date)),\n                    period_end: getUnixTime(endOfDay(date)),\n                    type: 'desk',\n                    zones: zones.join(','),\n                    include_checked_out: true,\n                }).pipe(\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                )\n            );\n            this._call_next_page.next(`RESET_${Date.now()}`);\n        })\n    );\n\n    public readonly paged_bookings = combineLatest([\n        this._next_page,\n        this._call_next_page,\n    ]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        switchMap(([next_page, action]) => {\n            this._loading.next(true);\n            if (!next_page) {\n                return of({\n                    data: [],\n                    total: 0,\n                    next: null,\n                    reset: action.includes('RESET'),\n                });\n            }\n            // If reset is true, start over\n            if (action.includes('RESET')) {\n                return next_page().pipe(\n                    map((data: any) => ({ ...data, reset: true })),\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                );\n            }\n            return next_page().pipe(\n                map((data: any) => ({ ...data, reset: false })),\n                catchError((_) => of({ data: [], total: 0, next: null }))\n            );\n        }),\n        scan(\n            (acc, { data, total, next, reset }) => {\n                const list = data;\n                this._next_page.next(next); // Set the next page function\n                if (reset) return { list, total }; // Reset the items array\n                return {\n                    list: [...acc.list, ...list],\n                    total,\n                };\n            },\n            { list: [], total: 0 }\n        ),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly has_more_pages = this.paged_bookings.pipe(\n        map((_) => _.list.length < _.total)\n    );\n    public readonly bookings = this.paged_bookings.pipe(map((i) => i.list));\n\n    public nextPage() {\n        this._call_next_page.next(`NEXT_${Date.now()}`);\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.setup_paging.subscribe();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public refresh() {\n        this._loading.next(true);\n        this.timeout('poll', () => this.setFilters(this._filters.getValue()));\n    }\n\n    public addDesks(list: Desk[]) {\n        this._new_desks.next(this._new_desks.getValue().concat(list));\n    }\n\n    public removeNewDesk(desk: Desk) {\n        this._filters.next(this._filters.getValue());\n        this._new_desks.next(\n            this._new_desks.getValue().filter((d) => d.id !== desk.id)\n        );\n    }\n\n    public clearNewDesks() {\n        this._filters.next(this._filters.getValue());\n        this._new_desks.next([]);\n    }\n\n    public async checkinDesk(desk: Booking, state: boolean = true) {\n        console.log('Check-in:', desk);\n        const status: any = await checkinBooking(desk.id, state ?? true)\n            .toPromise()\n            .catch((_) => ({ failed: true, error: _ }));\n        if (status.failed) {\n            notifyError(\n                status.error\n                    ? `Error: ${status.error}`\n                    : `Error checking ${state ? 'in' : 'out'} desk booking`\n            );\n            throw status.error;\n        }\n        notifySuccess(`Checked ${state ? 'in' : 'out'} ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error approving in desk booking');\n        }\n        notifySuccess(\n            `Approved desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = true;\n        (desk as any).rejected = false;\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error rejecting in desk booking');\n        }\n        notifySuccess(\n            `Rejected desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = false;\n        (desk as any).rejected = true;\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n"],"x_google_ignoreList":[]}