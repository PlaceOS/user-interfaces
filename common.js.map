{"version":3,"file":"common.js","mappings":"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","names":["ScheduleStateService","BaseClass","constructor","_settings","super","this","BehaviorSubject","shown_types","Date","now","combineLatest","_date","_poll","pipe","tap","_","_loading","next","_update","switchMap","date","query","period_start","getUnixTime","startOfDay","period_end","endOfDay","get","queryBookings","type","map","i","newCalendarEventFromBooking","catchError","queryEvents","timeout","shareReplay","events","desks","parking","e","d","p","sort","a","b","bookings","_filters","bkns","filters","filter","CalendarEvent","includes","asObservable","startPolling","delay","interval","stopPolling","clearInterval","setDate","toggleType","name","clear","getValue","console","log","i0","factory","start","_options","timer","queryCalendars","debounceTime","mergeMap","options","addDays","calendar","_schedule","timePeriodsIntersect","duration","forkJoin","list","status","unique","setOptions"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/schedule/schedule-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { BaseClass, SettingsService } from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { catchError, map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _poll = new BehaviorSubject(0);\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: ['event', 'desk', 'parking'],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    private _update = combineLatest([this._date, this._poll]).pipe(\n        tap((_) => this._loading.next(true))\n    );\n    /** List of calendar events for the selected date */\n    public readonly events: Observable<CalendarEvent[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const query = {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            };\n            return this._settings.get('app.no_user_calendar')\n                ? queryBookings({ ...query, type: 'room' }).pipe(\n                      map((_) => _.map((i) => newCalendarEventFromBooking(i))),\n                      catchError((_) => [])\n                  )\n                : queryEvents({ ...query }).pipe(catchError((_) => []));\n        }),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'desk',\n            }).pipe(catchError((_) => []))\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n            }).pipe(catchError((_) => []))\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.desks,\n        this.parking,\n    ]).pipe(\n        map(([e, d, p]) => [...e, ...d, ...p].sort((a, b) => a.date - b.date))\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter(\n                (_) =>\n                    (_ instanceof CalendarEvent &&\n                        filters?.shown_types?.includes('event')) ||\n                    filters?.shown_types?.includes(_.type)\n            )\n        )\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters;\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({\n                ...filters,\n                shown_types: shown_types.filter((_) => _ !== name),\n            });\n        } else {\n            this._filters.next({\n                ...filters,\n                shown_types: [...shown_types, name],\n            });\n        }\n        console.log('Filters:', this._filters.getValue());\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    BaseClass,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.no_user_calendar') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n"]}