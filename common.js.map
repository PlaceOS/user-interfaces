{"version":3,"file":"common.js","mappings":"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","names":["DesksStateService","BaseClass","constructor","_org","_dialog","super","this","BehaviorSubject","_new_desks","asObservable","_loading","_filters","pipe","debounceTime","switchMap","filters","zones","o","includes","listChildMetadata","building","id","name","map","m","i","metadata","desks","details","reduce","c","showMetadata","catchError","_","list","Array","sort","a","b","localeCompare","_desks","Desk","qr_code","shareReplay","next","date","Date","filter","z","length","levelsForBuilding","queryBookings","period_start","Math","floor","startOfDay","valueOf","period_end","endOfDay","type","join","_desk_bookings","Booking","extension_data","checkin_qr_code","generateQRCode","encodeURIComponent","asset_id","new_desk_count","getValue","setFilters","lvl","startPolling","delay","interval","stopPolling","clearInterval","addDesks","concat","clearNewDesks","checkinDesk","desk","checkinBooking","toPromise","catch","notifyError","notifySuccess","user_name","approveDesk","approveBooking","format","rejectDesk","rejectBooking","giveAccess","success","saveBooking","access","rejectAllDesks","e","notifyInfo","resp","openConfirmModal","title","content","icon","class","reason","loading","Promise","all","close","i0","factory"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/desks/desks-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay, format, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    BaseClass,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends BaseClass {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _new_desks = new BehaviorSubject<Desk[]>([]);\n    private _desk_bookings: Booking[] = [];\n    private _desks: Desk[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly new_desks = this._new_desks.asObservable();\n\n    public get new_desk_count() {\n        return this._new_desks.getValue()?.length || 0;\n    }\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || [];\n            return !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(map((m) => m.details))\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata.desks.details)\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      )\n                  );\n        }),\n        catchError((_) => []),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name.localeCompare(b.name));\n            this._desks = list.map(\n                (i) =>\n                    new Desk({\n                        ...i,\n                        qr_code: '',\n                    })\n            );\n            return this._desks;\n        }),\n        shareReplay(1)\n    );\n    public readonly bookings = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            let zones = (filters.zones || []).filter(\n                (z: any) => z !== -1 && z !== '-1' && z !== 'All'\n            );\n            if (!zones?.length) {\n                zones = this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((i) => i.id);\n            }\n            return queryBookings({\n                period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                type: 'desk',\n                zones: (zones || []).join(','),\n            });\n        }),\n        map((list) => {\n            list.sort((a, b) => a.date - b.date);\n            this._desk_bookings = list.map(\n                (_) =>\n                    new Booking({\n                        ..._,\n                        extension_data: {\n                            ..._.extension_data,\n                            checkin_qr_code: generateQRCode(\n                                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                                    _.asset_id\n                                )}`\n                            ),\n                        },\n                    })\n            );\n            this._loading.next(false);\n            return list;\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public addDesks(list: Desk[]) {\n        this._new_desks.next(this._new_desks.getValue().concat(list));\n    }\n\n    public clearNewDesks() {\n        this._new_desks.next([]);\n    }\n\n    public async checkinDesk(desk: Booking) {\n        const success = await checkinBooking(desk.id, true)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error checking in desk booking')\n            : notifySuccess(`Checked in ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved desk booking for ${desk.user_name} on ${format(\n                      desk.date,\n                      'MMM do'\n                  )}.`\n              );\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected desk booking for ${desk.user_name} on ${format(\n                      desk.date,\n                      'MMM do'\n                  )}.`\n              );\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason === 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfull rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n"],"x_google_ignoreList":[]}