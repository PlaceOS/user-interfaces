{"version":3,"file":"common.js","mappings":"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","sources":["./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/schedule/schedule-state.service.ts","./libs/calendar/src/index.ts","./libs/calendar/src/lib/calendar.interfaces.ts","./libs/calendar/src/lib/calendar.service.ts","./libs/calendar/src/lib/calendar.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    flatten,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from '@placeos/spaces';\nimport { getModule } from '@placeos/ts-client';\nimport { endOfDay, getUnixTime, isSameDay, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    distinctUntilKeyChanged,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _poll_type = new BehaviorSubject<'api' | 'ws'>('api');\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: ['event', 'desk', 'parking', 'visitor', 'locker'],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    private _update = combineLatest([this._date, this._poll]).pipe(\n        debounceTime(500),\n        tap((_) => this._loading.next(true))\n    );\n\n    private _deleted: string[] = [];\n\n    private _space_bookings: Observable<CalendarEvent[]> =\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n            debounceTime(300),\n            tap((_) => this.unsubWith('bind:')),\n            switchMap(({ id }) => {\n                this._loading.next(true);\n                return requestSpacesForZone(id);\n            }), // Get list of spaces for building\n            distinctUntilChanged(([s1], [s2]) => s1 !== s2),\n            switchMap((list) => {\n                this._loading.next(false);\n                return combineLatest(\n                    (list || []).map((space) => {\n                        const binding = getModule(space.id, 'Bookings').binding(\n                            'bookings'\n                        );\n                        const obs = binding.listen().pipe(\n                            map((event_list) =>\n                                (event_list || []).map(\n                                    (i) =>\n                                        new CalendarEvent({\n                                            ...i,\n                                            resources: i.attendees.filter(\n                                                (_) =>\n                                                    _.email === space.email ||\n                                                    _.resource\n                                            ),\n                                            system: space,\n                                        })\n                                )\n                            ),\n                            catchError((_) => of([]))\n                        );\n                        if (!this.hasSubscription(`bind:${space.id}`)) {\n                            this.subscription(\n                                `bind:${space.id}`,\n                                binding.bind()\n                            );\n                        }\n                        return obs;\n                    })\n                );\n            }),\n            map((_) => flatten<CalendarEvent>(_)),\n            shareReplay(1)\n        );\n\n    public readonly ws_events = combineLatest([\n        this._space_bookings,\n        this._update,\n    ]).pipe(\n        map(([_, [date]]) => {\n            const user = currentUser();\n            return _.filter(\n                (_) =>\n                    isSameDay(_.date, date) &&\n                    (_.host.toLowerCase() === user.email.toLowerCase() ||\n                        _.attendees.find(\n                            (a) =>\n                                a.email.toLowerCase() ===\n                                user.email.toLowerCase()\n                        ))\n            );\n        })\n    );\n    /** List of calendar events for the selected date */\n    public readonly api_events: Observable<CalendarEvent[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const query = {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            };\n            return this._settings.get('app.events.use_bookings')\n                ? queryBookings({ ...query, type: 'room' }).pipe(\n                      map((_) => _.map((i) => newCalendarEventFromBooking(i))),\n                      catchError((_) => of([]))\n                  )\n                : queryEvents({ ...query }).pipe(catchError((_) => of([])));\n        }),\n        shareReplay(1)\n    );\n    /** List of calendar events for the selected date */\n    public readonly events = combineLatest([this._poll_type]).pipe(\n        switchMap(([t]) => (t === 'api' ? this.api_events : this.ws_events)),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly visitors: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'visitor',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                include_checked_out: true,\n                type: 'desk',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n            }).pipe(catchError((_) => of([])))\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly lockers: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const system_id = this._org.binding('area_management');\n            if (!system_id) return of([]);\n            const mod = getModule(system_id, 'Lockers');\n            return mod.execute('lockers_allocated_to_me').catch((_) => []);\n        }),\n        map((_) =>\n            _.map(\n                (i) =>\n                    new Booking({\n                        date: startOfDay(Date.now()).valueOf(),\n                        duration: 24 * 60 - 1,\n                        asset_id: i.locker_id,\n                        asset_name: i.locker_name,\n                        zones: [i.building, i.level],\n                        extension_data: {\n                            map_id: i.locker_id,\n                        },\n                    })\n            )\n        ),\n        catchError(() => of([])),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.visitors,\n        this.desks,\n        this.parking,\n        this.lockers,\n    ]).pipe(\n        map(([e, v, d, p, l]) =>\n            [...e, ...v, ...d, ...p, ...l].sort((a, b) => a.date - b.date)\n        )\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter(\n                (_) =>\n                    (!this._deleted.includes(_.id) &&\n                        _ instanceof CalendarEvent &&\n                        filters?.shown_types?.includes('event')) ||\n                    filters?.shown_types?.includes((_ as any).booking_type)\n            )\n        )\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.subscription(\n            'poll_type',\n            this._org.active_building.subscribe(() =>\n                this._poll_type.next(\n                    this._settings.get('app.schedule.use_websocket')\n                        ? 'ws'\n                        : 'api'\n                )\n            )\n        );\n        this._deleted = JSON.parse(\n            sessionStorage.getItem('PLACEOS.events.deleted') || '[]'\n        );\n    }\n\n    public triggerPoll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay = 60 * 1000) {\n        this.interval(\n            'poll',\n            () => {\n                document.visibilityState === 'visible'\n                    ? this._poll.next(Date.now())\n                    : '';\n            },\n            delay\n        );\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public removeItem(item) {\n        this.setAsDeleted(item.id);\n        this._poll.next(Date.now());\n    }\n\n    public setAsDeleted(id: string) {\n        this._deleted.push(id);\n        sessionStorage.setItem(\n            'PLACEOS.events.deleted',\n            JSON.stringify(this._deleted)\n        );\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters;\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({\n                ...filters,\n                shown_types: shown_types.filter((_) => _ !== name),\n            });\n        } else {\n            this._filters.next({\n                ...filters,\n                shown_types: [...shown_types, name],\n            });\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    AsyncHandler,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.events.use_bookings') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","\nexport * from './lib/calendar';\n","\nexport interface CalendarAvailabilityQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Minimum capacity required */\n    capacity?: number;\n    /** Comma seperated of space features to filter */\n    features?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** ID of a booking to ignore in availability check */\n    ignore?: string;\n}\n\nexport interface CalendarAvailability {\n    duration: number;\n    date: number;\n    status: string;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, tap } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { AsyncHandler } from 'libs/common/src/lib/async-handler.class';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends AsyncHandler {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = queryCalendars().pipe(\n        tap((l) => this._calendars.next(l)),\n        shareReplay(1)\n    );\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        if (this._settings.get('app.events.use_bookings')) return;\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n}\n","export * from './calendar.class';\nexport * from './calendar.interfaces';\nexport * from './calendar.service';\nexport * from './calendar.fn';\n"],"names":["Booking","queryBookings","AsyncHandler","currentUser","flatten","SettingsService","CalendarEvent","newCalendarEventFromBooking","queryEvents","OrganisationService","requestSpacesForZone","getModule","endOfDay","getUnixTime","isSameDay","startOfDay","BehaviorSubject","combineLatest","of","catchError","debounceTime","distinctUntilChanged","distinctUntilKeyChanged","filter","map","shareReplay","switchMap","tap","ScheduleStateService","constructor","_settings","_org","_poll","_poll_type","_loading","_filters","shown_types","_date","Date","now","_update","pipe","_","next","_deleted","_space_bookings","active_building","unsubWith","id","s1","s2","list","space","binding","obs","listen","event_list","i","resources","attendees","email","resource","system","hasSubscription","subscription","bind","ws_events","date","user","host","toLowerCase","find","a","api_events","query","period_start","period_end","get","type","events","t","timeout","visitors","console","error","desks","include_checked_out","parking","lockers","system_id","mod","execute","catch","valueOf","duration","asset_id","locker_id","asset_name","locker_name","zones","building","level","extension_data","map_id","bookings","e","v","d","p","l","sort","b","filtered_bookings","bkns","filters","includes","booking_type","asObservable","loading","subscribe","JSON","parse","sessionStorage","getItem","triggerPoll","startPolling","delay","interval","document","visibilityState","stopPolling","clearInterval","setDate","removeItem","item","setAsDeleted","push","setItem","stringify","toggleType","name","clear","_this","_asyncToGenerator","getValue","i0","ɵɵinject","i1","i2","factory","ɵfac","providedIn","queryCalendars","timePeriodsIntersect","unique","addDays","forkJoin","timer","mergeMap","_options","start","_schedule","options","schedule","calendars","calendar","status","setOptions","first","addMinutes","queryCalendarAvailability","querySpaceFreeBusy","CalendarService","_calendars","calendar_list","freeBusy","q","availability","initialised","init","_initialised","getFreeBusyDate","checkSpacesAvailability","system_ids","old_booking","result","join","toPromise","end","available","every","index","findIndex","block","splice","length"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}