{"version":3,"file":"common.js","mappings":"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","names":["DesksStateService","AsyncHandler","new_desk_count","this","_new_desks","getValue","length","constructor","_org","_dialog","super","_filters","BehaviorSubject","_desk_bookings","_loading","new_desks","asObservable","loading","filters","desks","pipe","debounceTime","switchMap","zones","includes","showMetadata","map","m","details","listChildMetadata","building","id","name","i","metadata","reduce","c","catchError","_","list","Array","sort","a","b","localeCompare","Desk","qr_code","shareReplay","bookings","next","date","Date","filter","z","levelsForBuilding","queryBookings","period_start","Math","floor","startOfDay","valueOf","period_end","endOfDay","type","join","include_checked_out","Booking","extension_data","checkin_qr_code","generateQRCode","encodeURIComponent","asset_id","setFilters","lvl","startPolling","delay","interval","stopPolling","clearInterval","addDesks","concat","clearNewDesks","checkinDesk","desk","_asyncToGenerator","checkinBooking","toPromise","catch","notifyError","notifySuccess","user_name","approveDesk","approveBooking","format","rejectDesk","rejectBooking","giveAccess","_this","success","saveBooking","access","rejectAllDesks","_this2","notifyInfo","resp","openConfirmModal","title","content","icon","class","reason","Promise","all","close","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_15__","Yz7","factory","Éµfac","providedIn"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/desks/desks-state.service.ts"],"sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay, format, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { ExploreDesksService } from '@placeos/explore';\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _new_desks = new BehaviorSubject<Desk[]>([]);\n    private _desk_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly new_desks = this._new_desks.asObservable();\n\n    public get new_desk_count() {\n        return this._new_desks.getValue()?.length || 0;\n    }\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || [];\n            return zones && !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(map((m) => m.details))\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata.desks.details)\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      )\n                  );\n        }),\n        catchError((_) => []),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name?.localeCompare(b.name));\n            return list.map((i) => new Desk({ ...i, qr_code: '' }));\n        }),\n        shareReplay(1)\n    );\n    public readonly bookings = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            let zones = (filters.zones || []).filter(\n                (z: any) => z !== -1 && z !== '-1' && z !== 'All'\n            );\n            if (!zones?.length) {\n                zones = this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((i) => i.id);\n            }\n            return queryBookings({\n                period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                type: 'desk',\n                zones: (zones || []).join(','),\n                include_checked_out: true,\n            });\n        }),\n        map((list) => {\n            list.sort((a, b) => a.date - b.date);\n            this._desk_bookings = list.map(\n                (_) =>\n                    new Booking({\n                        ..._,\n                        extension_data: {\n                            ..._.extension_data,\n                            checkin_qr_code: generateQRCode(\n                                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                                    _.asset_id\n                                )}`\n                            ),\n                        },\n                    })\n            );\n            this._loading.next(false);\n            return list;\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public addDesks(list: Desk[]) {\n        this._new_desks.next(this._new_desks.getValue().concat(list));\n    }\n\n    public clearNewDesks() {\n        this._filters.next(this._filters.getValue());\n        this._new_desks.next([]);\n    }\n\n    public async checkinDesk(desk: Booking) {\n        const success = await checkinBooking(desk.id, true)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error checking in desk booking')\n            : notifySuccess(`Checked in ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved desk booking for ${desk.user_name} on ${format(\n                      desk.date,\n                      'MMM do'\n                  )}.`\n              );\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected desk booking for ${desk.user_name} on ${format(\n                      desk.date,\n                      'MMM do'\n                  )}.`\n              );\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n"],"x_google_ignoreList":[]}