{"version":3,"file":"common.js","mappings":"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","names":["DesksStateService","AsyncHandler","new_desk_count","this","_new_desks","getValue","length","nextPage","_call_next_page","next","Date","now","constructor","_org","_dialog","super","_filters","BehaviorSubject","_desk_bookings","_loading","new_desks","asObservable","loading","filters","desks","pipe","debounceTime","switchMap","zones","includes","showMetadata","map","m","details","listChildMetadata","building","id","name","i","metadata","reduce","c","catchError","_","list","Array","sort","a","b","localeCompare","Desk","qr_code","shareReplay","_next_page","Subject","_all_zones_keys","setup_paging","combineLatest","initialised","tap","loaded","date","some","z","queryPagedBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","join","include_checked_out","paged_bookings","distinctUntilChanged","next_page","action","data","reset","of","total","scan","acc","has_more_pages","bookings","subscribe","setFilters","levelsForBuilding","lvl","refresh","timeout","addDesks","concat","clearNewDesks","checkinDesk","desk","state","_asyncToGenerator","console","log","status","checkinBooking","toPromise","catch","failed","error","notifyError","notifySuccess","user_name","approveDesk","approveBooking","format","approved","rejected","rejectDesk","rejectBooking","giveAccess","_this","success","saveBooking","Booking","access","rejectAllDesks","_this2","notifyInfo","resp","openConfirmModal","title","content","icon","class","reason","Promise","all","close","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_23__","Yz7","factory","Éµfac","providedIn"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/desks/desks-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    scan,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { add, endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryBookings,\n    queryPagedBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport {\n    next,\n    QueryResponse,\n} from '@placeos/ts-client/dist/esm/resources/functions';\n\nfunction addQRCodeToBooking(booking: Booking): Booking {\n    return new Booking({\n        ...booking,\n        extension_data: {\n            ...booking.extension_data,\n            checkin_qr_code: generateQRCode(\n                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                    booking.asset_id\n                )}`\n            ),\n        },\n    });\n}\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _new_desks = new BehaviorSubject<Desk[]>([]);\n    private _desk_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly new_desks = this._new_desks.asObservable();\n\n    public get new_desk_count() {\n        return this._new_desks.getValue()?.length || 0;\n    }\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || [];\n            return zones && !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(map((m) => m.details))\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata.desks.details)\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      )\n                  );\n        }),\n        catchError((_) => []),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name?.localeCompare(b.name));\n            return list.map((i) => new Desk({ ...i, qr_code: '' }));\n        }),\n        shareReplay(1)\n    );\n\n    private _next_page = new Subject<() => QueryResponse<Booking>>();\n    private _call_next_page = new Subject<string>();\n    private _all_zones_keys = ['All', -1, '-1'];\n    public readonly setup_paging = combineLatest([\n        this._filters,\n        this._org.initialised,\n    ]).pipe(\n        debounceTime(500),\n        tap(([filters, loaded]) => {\n            if (!loaded) return;\n            const date = filters.date || Date.now();\n            const zones =\n                !filters.zones ||\n                filters.zones.some((z) => this._all_zones_keys.includes(z))\n                    ? [this._org.building.id]\n                    : filters.zones;\n            this._next_page.next(() =>\n                queryPagedBookings({\n                    period_start: getUnixTime(startOfDay(date)),\n                    period_end: getUnixTime(endOfDay(date)),\n                    type: 'desk',\n                    zones: zones.join(','),\n                    include_checked_out: true,\n                })\n            );\n            this._call_next_page.next(`RESET_${Date.now()}`);\n        })\n    );\n\n    public readonly paged_bookings = combineLatest([\n        this._next_page,\n        this._call_next_page,\n    ]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        switchMap(([next_page, action]) => {\n            this._loading.next(true);\n            if (!next_page) {\n                return of({\n                    data: [],\n                    total: 0,\n                    next: null,\n                    reset: action.includes('RESET'),\n                });\n            }\n            // If reset is true, start over\n            if (action.includes('RESET')) {\n                return next_page().pipe(\n                    map((data: any) => ({ ...data, reset: true }))\n                );\n            }\n            return next_page().pipe(\n                map((data: any) => ({ ...data, reset: false }))\n            );\n        }),\n        scan(\n            (acc, { data, total, next, reset }) => {\n                const list = data;\n                this._next_page.next(next); // Set the next page function\n                if (reset) return { list, total }; // Reset the items array\n                return {\n                    list: [...acc.list, ...list],\n                    total,\n                };\n            },\n            { list: [], total: 0 }\n        ),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly has_more_pages = this.paged_bookings.pipe(\n        map((_) => _.list.length < _.total)\n    );\n    public readonly bookings = this.paged_bookings.pipe(map((i) => i.list));\n\n    public nextPage() {\n        this._call_next_page.next(`NEXT_${Date.now()}`);\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.setup_paging.subscribe();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public refresh() {\n        this._loading.next(true);\n        this.timeout('poll', () => this.setFilters(this._filters.getValue()));\n    }\n\n    public addDesks(list: Desk[]) {\n        this._new_desks.next(this._new_desks.getValue().concat(list));\n    }\n\n    public clearNewDesks() {\n        this._filters.next(this._filters.getValue());\n        this._new_desks.next([]);\n    }\n\n    public async checkinDesk(desk: Booking, state: boolean = true) {\n        console.log('Check-in:', desk);\n        const status: any = await checkinBooking(desk.id, state ?? true)\n            .toPromise()\n            .catch((_) => ({ failed: true, error: _ }));\n        if (status.failed) {\n            notifyError(\n                status.error\n                    ? `Error: ${status.error}`\n                    : `Error checking ${state ? 'in' : 'out'} desk booking`\n            );\n            throw status.error;\n        }\n        notifySuccess(`Checked ${state ? 'in' : 'out'} ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error approving in desk booking');\n        }\n        notifySuccess(\n            `Approved desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = true;\n        (desk as any).rejected = false;\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error rejecting in desk booking');\n        }\n        notifySuccess(\n            `Rejected desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = false;\n        (desk as any).rejected = true;\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n"],"x_google_ignoreList":[]}