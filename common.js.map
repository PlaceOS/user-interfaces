{"version":3,"mappings":"sSAyBO,IAAMA,EAAb,MAAM,gBAAoCC,KAH1CC,kCAIYC,WAAQ,IAAIC,IAAgB,GAC5BD,cAAW,IAAIC,IAAiC,CACpDC,MAAOC,KAAKC,QAERJ,cAAW,IAAIC,IAAwB,IACvCD,eAAY,IAAIC,IAA+B,IAEvCD,aAAUA,KAAKK,SAASC,eACxBN,aAAUA,KAAKO,SAASD,eACxBN,cAAWA,KAAKO,SAASD,eAEzBN,eAAoCQ,MAAc,CAC9DR,KAAKK,SACLL,KAAKS,QACNC,QACCC,KAAa,MACbC,QAAS,EAAEC,MACPb,KAAKO,SAASO,KAAK,uBACnB,MAAMC,EAAa,CACfC,gBAAcC,MAAYC,OAAWL,EAAQX,QAC7CiB,YAAYF,UAAYG,MAAQC,OAASR,EAAQX,OAAQ,KAE7D,OAAIW,EAAQS,WACRP,EAAMO,SAAWT,EAAQS,UAE7BtB,KAAKuB,UAAUT,KACXd,KAAKuB,UACAC,WACAC,OACIC,KACIC,QACwB,IAArBZ,EAAMC,aACa,IAAnBD,EAAMI,WACNO,EAAEE,KACFF,EAAEE,KAAoB,GAAbF,EAAEG,SAAgB,UAIxCC,KAAS,EACZC,QAAWC,iBAAMjB,OACjBkB,MAAaD,+BAAMjB,GAAK,CAAEmB,KAAM,eAGxCC,OAAI,EAAEC,EAAQC,MACV,MAAMC,EAAO,IACNtC,KAAKuB,UAAUC,cACfY,KACAC,EAASZ,OAAOC,GAAkB,aAAbA,EAAEa,SAC5BC,KAAK,CAACC,EAAGC,IAAMD,EAAEb,KAAOc,EAAEd,MAC5B,YAAKL,UAAUT,MAAK6B,QAAOL,EAAM,OAC1BA,KAEXM,OAAYlB,GAAM,KAClBmB,OAAKnB,GAAM1B,KAAKO,SAASO,KAAK,QAC9BgC,KAAY,IAGTC,aAAaC,EAAgB,MAChChD,KAAKiD,SAAS,OAAQ,IAAMjD,KAAKS,MAAMK,KAAKX,KAAKC,OAAQ4C,GAGtDE,cACHlD,KAAKmD,cAAc,QAGhBC,WAAWvC,GACdb,KAAKK,SAASS,KAAIkB,+BAAMhC,KAAKK,SAASmB,YAAeX,+EAnEhDhB,KAAoBwD,GAApBxD,mCAAoByD,QAApBzD,EAAoB,qBAFjB,SAEHA,GAAb","names":["ScheduleStateService","BaseClass","constructor","this","BehaviorSubject","start","Date","now","_options","asObservable","_loading","combineLatest","_poll","pipe","debounceTime","mergeMap","options","next","query","period_start","getUnixTime","startOfDay","period_end","addDays","endOfDay","calendar","_schedule","getValue","filter","_","timePeriodsIntersect","date","duration","forkJoin","queryEvents","Object","queryBookings","type","map","events","bookings","list","status","sort","a","b","unique","catchError","tap","shareReplay","startPolling","delay","interval","stopPolling","clearInterval","setOptions","t","factory"],"sources":["./apps/workplace/src/app/schedule/schedule-state.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { BaseClass, timePeriodsIntersect, unique } from '@placeos/common';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, forkJoin, Observable } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends BaseClass {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n            ]);\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter(_ => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n"],"sourceRoot":"webpack:///","file":"common.js"}