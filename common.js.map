{"version":3,"file":"common.js","mappings":"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","names":["ScheduleStateService","AsyncHandler","constructor","_settings","_org","super","this","_poll","BehaviorSubject","_poll_type","_loading","_filters","shown_types","_date","Date","now","_update","combineLatest","pipe","debounceTime","tap","_","next","_deleted","_space_bookings","active_building","filter","distinctUntilKeyChanged","unsubWith","switchMap","id","requestSpacesForZone","distinctUntilChanged","s1","s2","list","map","space","binding","getModule","obs","listen","event_list","i","CalendarEvent","resources","attendees","email","resource","system","catchError","of","hasSubscription","subscription","bind","flatten","shareReplay","ws_events","date","user","currentUser","isSameDay","host","toLowerCase","find","a","api_events","query","period_start","getUnixTime","startOfDay","period_end","endOfDay","get","queryBookings","type","newCalendarEventFromBooking","queryEvents","events","t","timeout","visitors","console","error","desks","include_checked_out","parking","lockers","bld","system_id","log","execute","catch","Booking","valueOf","duration","asset_id","locker_id","asset_name","locker_name","zones","building","level","extension_data","map_id","e","data","bookings","v","d","p","l","sort","b","filtered_bookings","bkns","filters","includes","booking_type","asObservable","loading","subscribe","JSON","parse","sessionStorage","getItem","triggerPoll","startPolling","delay","interval","document","visibilityState","stopPolling","clearInterval","setDate","removeItem","item","setAsDeleted","push","setItem","stringify","toggleType","name","clear","_this","_asyncToGenerator","getValue","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_23__","Yz7","factory","Éµfac","providedIn","_options","start","_schedule","options","schedule","calendars","timer","queryCalendars","mergeMap","addDays","calendar","timePeriodsIntersect","forkJoin","status","unique","setOptions","_angular_core__WEBPACK_IMPORTED_MODULE_19__","CalendarService","_calendars","calendar_list","freeBusy","q","querySpaceFreeBusy","availability","queryCalendarAvailability","initialised","first","init","_initialised","getFreeBusyDate","checkSpacesAvailability","system_ids","old_booking","result","join","toPromise","end","addMinutes","every","index","findIndex","block","splice","length","core"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/new-schedule/schedule-state.service.ts","./apps/workplace/src/app/schedule/schedule-state.service.ts","./libs/calendar/src/lib/calendar.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    currentUser,\n    flatten,\n    SettingsService,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { requestSpacesForZone } from '@placeos/spaces';\nimport { getModule } from '@placeos/ts-client';\nimport { endOfDay, getUnixTime, isSameDay, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    distinctUntilKeyChanged,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _poll_type = new BehaviorSubject<'api' | 'ws'>('api');\n    private _loading = new BehaviorSubject(false);\n    private _filters = new BehaviorSubject({\n        shown_types: ['event', 'desk', 'parking', 'visitor', 'locker'],\n    });\n    private _date = new BehaviorSubject(Date.now());\n    private _update = combineLatest([this._date, this._poll]).pipe(\n        debounceTime(500),\n        tap((_) => this._loading.next(true))\n    );\n\n    private _deleted: string[] = [];\n\n    private _space_bookings: Observable<CalendarEvent[]> =\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n            debounceTime(300),\n            tap((_) => this.unsubWith('bind:')),\n            switchMap(({ id }) => {\n                this._loading.next(true);\n                return requestSpacesForZone(id);\n            }), // Get list of spaces for building\n            distinctUntilChanged(([s1], [s2]) => s1 !== s2),\n            switchMap((list) => {\n                this._loading.next(false);\n                return combineLatest(\n                    (list || []).map((space) => {\n                        const binding = getModule(space.id, 'Bookings').binding(\n                            'bookings'\n                        );\n                        const obs = binding.listen().pipe(\n                            map((event_list) =>\n                                (event_list || []).map(\n                                    (i) =>\n                                        new CalendarEvent({\n                                            ...i,\n                                            resources: i.attendees.filter(\n                                                (_) =>\n                                                    _.email === space.email ||\n                                                    _.resource\n                                            ),\n                                            system: space,\n                                        })\n                                )\n                            ),\n                            catchError((_) => of([]))\n                        );\n                        if (!this.hasSubscription(`bind:${space.id}`)) {\n                            this.subscription(\n                                `bind:${space.id}`,\n                                binding.bind()\n                            );\n                        }\n                        return obs;\n                    })\n                );\n            }),\n            map((_) => flatten<CalendarEvent>(_)),\n            shareReplay(1)\n        );\n\n    public readonly ws_events = combineLatest([\n        this._space_bookings,\n        this._update,\n    ]).pipe(\n        map(([_, [date]]) => {\n            const user = currentUser();\n            return _.filter(\n                (_) =>\n                    isSameDay(_.date, date) &&\n                    (_.host.toLowerCase() === user.email.toLowerCase() ||\n                        _.attendees.find(\n                            (a) =>\n                                a.email.toLowerCase() ===\n                                user.email.toLowerCase()\n                        ))\n            );\n        })\n    );\n    /** List of calendar events for the selected date */\n    public readonly api_events: Observable<CalendarEvent[]> = this._update.pipe(\n        switchMap(([date]) => {\n            const query = {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n            };\n            return this._settings.get('app.events.use_bookings')\n                ? queryBookings({ ...query, type: 'room' }).pipe(\n                      map((_) => _.map((i) => newCalendarEventFromBooking(i))),\n                      catchError((_) => of([]))\n                  )\n                : queryEvents({ ...query }).pipe(catchError((_) => of([])));\n        }),\n        shareReplay(1)\n    );\n    /** List of calendar events for the selected date */\n    public readonly events = combineLatest([this._poll_type]).pipe(\n        switchMap(([t]) => (t === 'api' ? this.api_events : this.ws_events)),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly visitors: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'visitor',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of desk bookings for the selected date */\n    public readonly desks: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                include_checked_out: true,\n                type: 'desk',\n            }).pipe(\n                catchError((_) => {\n                    console.error(_);\n                    return of([]);\n                })\n            )\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly parking: Observable<Booking[]> = this._update.pipe(\n        switchMap(([date]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'parking',\n            }).pipe(catchError((_) => of([])))\n        ),\n        tap(() => this.timeout('end_loading', () => this._loading.next(false))),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the selected date */\n    public readonly lockers: Observable<Booking[]> =\n        this._org.active_building.pipe(\n            filter((_) => !!_),\n            distinctUntilKeyChanged('id'),\n            debounceTime(300),\n            switchMap((bld) => {\n                const system_id = this._org.binding('lockers');\n                console.log('Lockers:', bld, system_id);\n                if (!system_id) return of([]);\n                const mod = getModule(system_id, 'LockerLocations');\n                return mod.execute('lockers_allocated_to_me').catch((_) => []);\n            }),\n            map((_) =>\n                _.map(\n                    (i) =>\n                        new Booking({\n                            date: startOfDay(Date.now()).valueOf(),\n                            duration: 24 * 60 - 1,\n                            asset_id: i.locker_id,\n                            asset_name: i.locker_name,\n                            zones: [i.building, i.level],\n                            extension_data: {\n                                map_id: i.locker_id,\n                            },\n                        })\n                )\n            ),\n            catchError((e) => {\n                console.error(e);\n                return of([]);\n            }),\n            tap((data) => {\n                console.log('Your Lockers:', data);\n                this.timeout('end_loading', () => this._loading.next(false));\n            }),\n            shareReplay(1)\n        );\n\n    /** List of events and bookings for the selected date */\n    public readonly bookings = combineLatest([\n        this.events,\n        this.visitors,\n        this.desks,\n        this.parking,\n        this.lockers,\n    ]).pipe(\n        map(([e, v, d, p, l]) =>\n            [...e, ...v, ...d, ...p, ...l].sort((a, b) => a.date - b.date)\n        )\n    );\n    /** Filtered list of events and bookings for the selected date */\n    public readonly filtered_bookings = combineLatest([\n        this.bookings,\n        this._filters,\n    ]).pipe(\n        map(([bkns, filters]) =>\n            bkns.filter(\n                (_) =>\n                    (!this._deleted.includes(_.id) &&\n                        _ instanceof CalendarEvent &&\n                        filters?.shown_types?.includes('event')) ||\n                    filters?.shown_types?.includes((_ as any).booking_type)\n            )\n        )\n    );\n    /** Currently selected date */\n    public readonly filters = this._filters.asObservable();\n    /** Currently selected date */\n    public readonly date = this._date.asObservable();\n    /** Whether events and bookings are loading */\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.subscription(\n            'poll_type',\n            this._org.active_building.subscribe(() =>\n                this._poll_type.next(\n                    this._settings.get('app.schedule.use_websocket')\n                        ? 'ws'\n                        : 'api'\n                )\n            )\n        );\n        this._deleted = JSON.parse(\n            sessionStorage.getItem('PLACEOS.events.deleted') || '[]'\n        );\n    }\n\n    public triggerPoll() {\n        this._poll.next(Date.now());\n    }\n\n    public startPolling(delay = 60 * 1000) {\n        this.interval(\n            'poll',\n            () => {\n                document.visibilityState === 'visible'\n                    ? this._poll.next(Date.now())\n                    : '';\n            },\n            delay\n        );\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    public removeItem(item) {\n        this.setAsDeleted(item.id);\n        this._poll.next(Date.now());\n    }\n\n    public setAsDeleted(id: string) {\n        this._deleted.push(id);\n        sessionStorage.setItem(\n            'PLACEOS.events.deleted',\n            JSON.stringify(this._deleted)\n        );\n    }\n\n    public async toggleType(name: string, clear: boolean = false) {\n        const filters = this._filters.getValue() || { shown_types: [] };\n        const { shown_types } = filters;\n        if (shown_types && (shown_types.includes(name) || clear)) {\n            this._filters.next({\n                ...filters,\n                shown_types: shown_types.filter((_) => _ !== name),\n            });\n        } else {\n            this._filters.next({\n                ...filters,\n                shown_types: [...shown_types, name],\n            });\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { queryCalendars } from '@placeos/calendar';\nimport {\n    AsyncHandler,\n    SettingsService,\n    timePeriodsIntersect,\n    unique,\n} from '@placeos/common';\nimport {\n    CalendarEvent,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { addDays, endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    Observable,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    mergeMap,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nexport type BookingLike = CalendarEvent & Booking;\n\nexport interface ScheduleOptions {\n    calendar?: string;\n    start: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ScheduleStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ScheduleOptions>({\n        start: Date.now(),\n    });\n    private _loading = new BehaviorSubject<string>('');\n    private _schedule = new BehaviorSubject<BookingLike[]>([]);\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n    public readonly schedule = this._loading.asObservable();\n\n    public readonly calendars = timer(1000).pipe(\n        switchMap((_) => queryCalendars()),\n        shareReplay(1)\n    );\n\n    public readonly events: Observable<BookingLike[]> = combineLatest([\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(1000),\n        mergeMap(([options]) => {\n            this._loading.next('Loading schedule...');\n            const query: any = {\n                period_start: getUnixTime(startOfDay(options.start)),\n                period_end: getUnixTime(addDays(endOfDay(options.start), 6)),\n            };\n            if (options.calendar) {\n                query.calendar = options.calendar;\n            }\n            this._schedule.next(\n                this._schedule\n                    .getValue()\n                    .filter(\n                        (_) =>\n                            !timePeriodsIntersect(\n                                query.period_start * 1000,\n                                query.period_end * 1000,\n                                _.date,\n                                _.date + _.duration * 60 * 1000\n                            )\n                    )\n            );\n            return forkJoin([\n                this._settings.get('app.events.use_bookings') === true\n                    ? queryBookings({ ...query, type: 'room' }).pipe(\n                          map((_) =>\n                              _.map((i) => newCalendarEventFromBooking(i))\n                          )\n                      )\n                    : queryEvents({ ...query }),\n                queryBookings({ ...query, type: 'desk' }),\n                queryBookings({ ...query, type: 'parking' }),\n            ]).pipe(catchError((_) => []));\n        }),\n        map(([events, bookings]) => {\n            const list = [\n                ...this._schedule.getValue(),\n                ...events,\n                ...bookings.filter((_) => _.status !== 'declined'),\n            ].sort((a, b) => a.date - b.date);\n            this._schedule.next(unique(list, 'id') as any);\n            return list;\n        }),\n        catchError((_) => []),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: Partial<ScheduleOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, tap } from 'rxjs/operators';\nimport { addMinutes, endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nimport { Calendar } from './calendar.class';\n\nimport { AsyncHandler } from 'libs/common/src/lib/async-handler.class';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { CalendarAvailabilityQueryParams } from './calendar.interfaces';\nimport {\n    queryCalendarAvailability,\n    queryCalendars,\n    querySpaceFreeBusy,\n} from './calendar.fn';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalendarService extends AsyncHandler {\n    private readonly _calendars = new BehaviorSubject<Calendar[]>([]);\n\n    /** Observable for the list of calendars */\n    public readonly calendar_list = queryCalendars().pipe(\n        tap((l) => this._calendars.next(l)),\n        shareReplay(1)\n    );\n\n    /* istanbul ignore next */\n    public readonly query = () => queryCalendars();\n    /* istanbul ignore next */\n    public readonly freeBusy = (q: CalendarAvailabilityQueryParams) =>\n        querySpaceFreeBusy(q, this._org);\n    /* istanbul ignore next */\n    public readonly availability = (q: CalendarAvailabilityQueryParams) =>\n        queryCalendarAvailability(q);\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.init());\n    }\n\n    public async init() {\n        if (this._settings.get('app.events.use_bookings')) return;\n        this._initialised.next(true);\n    }\n\n    public get calendars(): Calendar[] {\n        return this._calendars.getValue();\n    }\n\n    /** Get Free busy for the selected day\n     * @param calendars User calendar\n     * @param date Selected day\n     */\n    public getFreeBusyDate(date: number, calendars: string) {\n        return querySpaceFreeBusy(\n            {\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                calendars,\n            },\n            this._org\n        );\n    }\n\n    /** Check rooms availability */\n    public async checkSpacesAvailability(\n        system_ids: string[],\n        period_start: number,\n        period_end: number,\n        old_booking?: CalendarEvent\n    ) {\n        const result = await queryCalendarAvailability({\n            period_start,\n            period_end,\n            system_ids: system_ids.join(','),\n        }).toPromise();\n        const start = new Date(old_booking?.date).valueOf();\n        const end = addMinutes(start, old_booking?.duration).valueOf();\n        const available = result.every((i) => {\n            const availability = i.availability;\n            if (old_booking && i.id === old_booking.system?.email) {\n                const index = availability.findIndex((block) => {\n                    return (\n                        block.date >= start &&\n                        addMinutes(block.date, block.duration).valueOf() <= end\n                    );\n                });\n                if (index !== -1) {\n                    availability.splice(index, 1);\n                }\n            }\n            return !availability.length;\n        });\n        return !!available;\n    }\n}\n"],"x_google_ignoreList":[]}