{"version":3,"sources":["./node_modules/date-fns/toDate/index.js","./libs/events/src/lib/validators.ts","./libs/events/src/lib/utilities.ts","./node_modules/date-fns/esm/setMinutes/index.js","./node_modules/date-fns/esm/setHours/index.js","./libs/events/src/lib/events.fn.ts","./node_modules/date-fns/isBefore/index.js","./node_modules/date-fns/esm/formatDuration/index.js","./node_modules/date-fns/_lib/requiredArgs/index.js","./node_modules/date-fns/isAfter/index.js"],"names":["Object","defineProperty","exports","value","default","argument","_index","arguments","argStr","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","obj","__esModule","module","endInFuture","form","control","controls","date","duration","generateEventForm","event","id","host","required","organiser","creator","calendar","attendees","resources","title","body","private","all_day","recurring","recurrence","recurring_master_id","master","attachments","catering","extension_data","visitor_type","ext","location","needs_space","needs_parking","system","setValidators","valueChanges","subscribe","o","setValue","email","disable","state","add","dirtyDate","dirtyMinutes","requiredArgs","toDate","minutes","toInteger","setMinutes","dirtyHours","hours","setHours","days","EVENTS_ENDPOINT","showEvent","q","query","encodeURIComponent","pipe","map","item","saveEvent","data","method","updateEvent","createEvent","checkinEventGuest","guest_id","dirtyDateToCompare","_index2","dateToCompare","_interopRequireDefault","defaultFormat","formatDuration","options","length","undefined","TypeError","concat","format","locale","zero","delimiter","result","reduce","acc","unit","token","replace","m","toUpperCase","formatDistance","join","args"],"mappings":"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","file":"common.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  (0, _index.default)(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n\nmodule.exports = exports.default;","import { AbstractControl, FormGroup } from '@angular/forms';\n\nimport isAfter from 'date-fns/isAfter';\nimport isBefore from 'date-fns/isBefore';\n\nexport const endInFuture = (form: FormGroup) => (control: AbstractControl) => {\n    if (\n        form.controls.date &&\n        isAfter(\n            new Date(),\n            form.controls.date.value + control.value * 60 * 1000\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(\n    control: AbstractControl\n): { [key: string]: boolean } | null {\n    return control.value && isBefore(control.value, new Date())\n        ? { isFuture: true }\n        : null;\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.ext('visitor_type')),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(event.ext('needs_parking') || false),\n        system: new FormControl(event.system),\n    });\n    form.controls.duration.setValidators([endInFuture(form)]);\n    form.controls.organiser.valueChanges.subscribe((o) => {\n        form.controls.host.setValue(o?.email);\n    });\n    if (event.id) {\n        form.controls.host.disable();\n        form.controls.organiser.disable();\n    }\n    if (event.state === 'started') {\n        form.controls.date.disable();\n    }\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\nimport { toQueryString } from 'libs/common/src/lib/api';\n\nimport { CalendarEvent } from './event.class';\nimport { GuestUser } from '../../../users/src/lib/user.class';\nimport { Observable } from 'rxjs';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${query ? '?' + query : ''}`).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, data).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${query ? '?' + query : ''}`,\n        data\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => (data.id ? updateEvent(data.id, data, q) : createEvent(data));\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(`${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${query ? '?' + query : ''}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/approve?system_id=${encodeURIComponent(\n            system_id\n        )}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/reject?system_id=${encodeURIComponent(\n            system_id\n        )}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${query ? '?' + query : ''}`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests/${guest_id}${query ? '?' + query : ''}`\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBefore;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\nfunction isBefore(dirtyDate, dirtyDateToCompare) {\n  (0, _index2.default)(2, arguments);\n  var date = (0, _index.default)(dirtyDate);\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}\n\nmodule.exports = exports.default;","import defaultLocale from \"../locale/en-US/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should be zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, null, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = options.format || defaultFormat;\n  var locale = options.locale || defaultLocale;\n  var zero = options.zero || false;\n  var delimiter = options.delimiter || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = requiredArgs;\n\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAfter;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nfunction isAfter(dirtyDate, dirtyDateToCompare) {\n  (0, _index2.default)(2, arguments);\n  var date = (0, _index.default)(dirtyDate);\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}\n\nmodule.exports = exports.default;"],"sourceRoot":"webpack:///"}