{"version":3,"sources":["./src/app/schedule/view-event/booking-details/booking-details.component.html","./src/app/schedule/view-event/booking-details/booking-details.component.ts","./src/app/schedule/view-event/event-details/event-details.component.html","./src/app/schedule/view-event/event-details/event-details.component.ts","./src/app/schedule/view-event/view-event.component.html","./src/app/schedule/view-event/view-event.component.ts","./src/app/schedule/event-list/list-item/list-item.component.html","./src/app/schedule/event-list/list-item/list-item.component.ts","./src/app/schedule/event-list/event-list.component.html","./src/app/schedule/event-list/event-list.component.ts","./src/app/schedule/schedule.template.html","./src/app/schedule/schedule.component.ts","./src/app/schedule/schedule.routes.ts","./src/app/schedule/schedule.module.ts"],"names":["BookingDetailsComponent","_dialog","_router","_events","super","loading","this","item","date","end","add","duration","all_day","format","isSame","confirmDelete","space","name","map_id","asset_id","zones","open","width","maxWidth","maxHeight","data","title","content","okText","cancelText","afterClosed","subscribe","evt","deleteBooking","emit","delete","id","then","catch","navigate","EventDetailsComponent","_users","event","last_start","resources","creator","current","email","status","can_edit","now","isBefore","subtract","spaces","reduce","a","v","length","type","checked_in","localStorage","booking","setItem","JSON","stringify","ScheduleViewEventComponent","_bookings","_route","_location","menu","subscription","combineLatest","paramMap","queryParamMap","param","queryParam","has","get","calendar","loadEvent","editing","onChange","back","deleting","show","err","deleteEvent","ScheduleEventListItemComponent","isAfter","is_done","location","has_visitors","query","navigateByUrl","ScheduleEventListComponent","_settings","_spaces","_calendars","event_list","events","shown_offset","date_offset","from","valueOf","legend_list","params","initialised","pipe","first","_","value","calendar_list","calendars","find","i","primary","updateList","interval","start","startOf","endOf","period_start","unix","period_end","user","list","old_events","filter","processEvents","map","timeout","scrollTo","date_str","push","filter_fn","new_items","old_items","concat","sort","b","event_promise","day","diff","Math","max","scroll_to","index","findIndex","document","getElementById","scrollIntoView","behavior","queryParams","queryParamsHandling","trigger","closeMenu","onCalendarChange","updateDate","onScroll","ScheduleComponent","show_menu","post","page","loadEvents","saveEvents","getItem","parse","ROUTES","path","component","redirectTo","ScheduleModule","forChild"],"mappings":"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","file":"schedule-schedule-module.44b88b7552894950484c.js","sourcesContent":["<div class=\"booking-details\" *ngIf=\"item\">\n    <div class=\"header\">\n        <div class=\"title\">{{ item.title || 'No Title' }}</div>\n        <div class=\"icons\">\n            <button mat-fab color=\"primary\" (click)=\"cancel()\">\n                <app-icon\n                    name=\"cancel\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete_forever' }\"\n                >\n                </app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"booking\">\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'perm_identity' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ item.user_name }}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'schedule' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ when }}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"icon\">\n                    <app-icon\n                        [icon]=\"{ type: 'icon', class: 'material-icons', content: 'place' }\"\n                    ></app-icon>\n                </div>\n                <div class=\"value\">{{ item.description }}</div>\n                <button *ngIf=\"item.asset_id\" (click)=\"showSpace()\" mat-button>View</button>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { Booking } from '@user-interfaces/bookings';\nimport { EventsService } from '@user-interfaces/events';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\nimport { Space } from '@user-interfaces/spaces';\n\nimport { ViewRoomModalComponent } from '../../../overlays/view-room-modal/view-room-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'schedule-booking-details',\n    templateUrl: './booking-details.component.html',\n    styleUrls: ['./booking-details.component.scss'],\n})\nexport class BookingDetailsComponent extends BaseClass {\n    /** Booking desk to display */\n    @Input() public item: Booking;\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter();\n\n    constructor(\n        private _dialog: MatDialog,\n        private _router: Router,\n        private _events: EventsService\n    ) {\n        super();\n    }\n\n    /** Display string of when the event will occur */\n    public get when(): string {\n        if (!this.item) {\n            return 'Unable to determine.';\n        }\n        const date = dayjs(this.item.date);\n        const end = date.add(this.item.duration || 60, 'm');\n        if (this.item.all_day || this.item.duration > 23 * 60) {\n            return `${date.format('DD MMM YYYY')} - All Day`;\n        } else {\n            if (date.isSame(end, 'd')) {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format('h:mm A')}`;\n            } else {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format(\n                    'DD MMM YYYY, h:mm A'\n                )}`;\n            }\n        }\n    }\n\n    public cancel() {\n        this.confirmDelete();\n    }\n\n    public showSpace(): void {\n        const space = new Space({\n            name: 'Desk Booking',\n            map_id: this.item.asset_id,\n            zones: this.item.zones,\n        });\n        if (!space.level) {\n            // this._service.notifyInfo('The space cannot be located.');\n        }\n        const dialog_ref = this._dialog.open(ViewRoomModalComponent, {\n            width: '32em',\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: { space },\n        });\n    }\n\n    private confirmDelete() {\n        const dialog_ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Cancel Meeting',\n                content: `Are you sure you want to cancel this desk booking ?`,\n                okText: `I'm sure`,\n                cancelText: 'No',\n            },\n        });\n        dialog_ref.afterClosed().subscribe((evt) => {\n            if (evt) {\n                this.deleteBooking();\n            }\n        });\n    }\n\n    public async deleteBooking() {\n        this.loading.emit('Cancelling booking...');\n        await this._events.delete(this.item.id)\n            .then(() => {\n                // this._service.notifySuccess('Booking was successfuly deleted.');\n            })\n            .catch(() => {\n                // this._service.notifyError('Booking could not be deleted.');\n            });\n        this._router.navigate(['schedule']);\n        this.loading.emit('');\n    }\n}\n","<div class=\"event-details\" *ngIf=\"item\">\n    <div class=\"header\">\n        <div class=\"title\">{{ item.title || 'No Title' }}</div>\n        <div *ngIf=\"can_edit\" class=\"icons\">\n            <button mat-fab color=\"primary\" (click)=\"edit()\">\n                <app-icon\n                    name=\"edit\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'edit' }\"\n                ></app-icon>\n            </button>\n            <button mat-fab *ngIf=\"can_cancel\" color=\"primary\" (click)=\"cancelBooking()\">\n                <app-icon\n                    name=\"cancel\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete_forever' }\"\n                ></app-icon>\n            </button>\n            <button mat-fab color=\"primary\" (click)=\"duplicate()\">\n                <app-icon\n                    name=\"duplicate\"\n                    [icon]=\"{\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'control_point_duplicate'\n                    }\"\n                ></app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"event\">\n        <schedule-event-view [event]=\"item\"></schedule-event-view>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Booking } from '@user-interfaces/bookings';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { CalendarEvent } from '@user-interfaces/events';\nimport { Space } from '@user-interfaces/spaces';\nimport { StaffService } from '@user-interfaces/users';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'schedule-event-details',\n    templateUrl: './event-details.component.html',\n    styleUrls: ['./event-details.component.scss'],\n})\nexport class EventDetailsComponent extends BaseClass {\n    /** Booking to display */\n    @Input() public item: CalendarEvent;\n    /** Emitter for action on the display view */\n    @Output() public event = new EventEmitter();\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter();\n    /** Toggle for activating checkin */\n    public checked_in: boolean;\n    /** Mapping of spaces to last checkin time */\n    public last_start: { [id: string]: number } = {};\n    /** Whether to show full locations list */\n    public show_locations: boolean;\n    /** Whether to show full attendee list */\n    public show_attendees: boolean;\n\n    /** List of spaces associated with the event */\n    public get spaces(): Space[] {\n        return this.item.resources;\n    }\n\n    /** Host of the event */\n    public get organiser(): string {\n        return this.item.creator || this._users.current.name;\n    }\n\n    /** Whether the user is allowed to edit the event */\n    public get can_edit(): boolean {\n        const organiser = this.organiser;\n        const user = this._users.current;\n        return this.item.creator === user.email && this.status !== 'done';\n    }\n\n    /** can the user cancel the meeting */\n    public get can_cancel(): boolean {\n        return this.can_edit && this.status === 'future';\n    }\n\n    /** Status of the event */\n    public get status(): 'future' | 'upcoming' | 'done' | 'started' | 'in_progress' {\n        if (this.item) {\n            const now = dayjs();\n            const date = dayjs(this.item.date);\n            if (now.isBefore(date.subtract(15, 'm'), 'm')) {\n                return 'future';\n            } else if (now.isBefore(date, 'm')) {\n                return 'upcoming';\n            } else if (now.isBefore(date.add(15, 'm'), 'm')) {\n                return 'started';\n            } else if (now.isBefore(date.add(this.item.duration, 'm'), 'm')) {\n                return 'in_progress';\n            }\n        }\n        return 'done';\n    }\n\n    /** Whether the user has checkin to all the spaces in the event */\n    public get is_checked_in(): boolean {\n        return this.spaces.reduce(\n            (a, v) => a && this.item.date <= (this.last_start[v.id] || 0),\n            true\n        );\n    }\n\n    /** Whether the spaces can be controlled */\n    public get can_control(): boolean {\n        return this.spaces.length > 0 && this.status !== 'future' && this.status !== 'done';\n    }\n\n    /** Whether the user is able to checkin to the event */\n    public get can_checkin(): boolean {\n        return this.spaces.length > 0 && (this.status === 'upcoming' || this.status === 'started');\n    }\n\n    constructor(\n        private _users: StaffService,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    /**\n     * Enter edit mode for the booking\n     */\n    public edit(): void {\n        this.event.emit({ type: 'edit' });\n    }\n\n    /**\n     * Checkin the current booking\n     */\n    public checkin(): void {\n        this.checked_in = !this.checked_in;\n    }\n\n    /**\n     * Store the booking data and navigate to the booking form\n     */\n    public duplicate(): void {\n        if (localStorage) {\n            const booking = new Booking({ ...this.item as any, id: '' });\n            localStorage.setItem('STAFF.booking_form', JSON.stringify(booking));\n        }\n        this._router.navigate(['/book']);\n    }\n\n    /**\n     * Cancel the booking\n     */\n    public cancelBooking(): void {\n        this.event.emit({ type: 'cancel_booking' });\n    }\n}\n","<div class=\"event page\">\n    <header class=\"header\">\n        <a-topbar-header (menuChange)=\"menu.emit($event)\"></a-topbar-header>\n    </header>\n    <div class=\"actions\" [class.blank]=\"false\" [class.has-back]=\"true\">\n        <div class=\"back\">\n            <button mat-button (click)=\"back()\">\n                <div class=\"row\">\n                    <app-icon\n                        [icon]=\"{\n                            tye: 'icon',\n                            class: 'material-icons',\n                            content: 'keyboard_backspace'\n                        }\"\n                    ></app-icon>\n                    Back\n                </div>\n            </button>\n        </div>\n        <div class=\"search\"></div>\n    </div>\n    <main class=\"body\">\n        <ng-container *ngIf=\"loading\">\n            <div class=\"no-item center\">\n                <div class=\"icon\">\n                    <mat-spinner diameter=\"100\"></mat-spinner>\n                </div>\n                <div class=\"text\">\n                    {{ loading }}\n                </div>\n            </div>\n        </ng-container>\n        <div [hidden]=\"loading\" *ngIf=\"event\">\n            <ng-container [ngSwitch]=\"type\">\n                <schedule-booking-details\n                    *ngSwitchCase=\"'booking'\"\n                    [item]=\"event\"\n                    (loading)=\"loading = $event\"\n                >\n                </schedule-booking-details>\n                <schedule-event-details\n                    *ngSwitchDefault\n                    [item]=\"event\"\n                    (event)=\"onChange($event)\"\n                    (loading)=\"loading = $event\"\n                ></schedule-event-details>\n            </ng-container>\n        </div>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { combineLatest } from 'rxjs';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { CalendarEvent, EventsService } from '@user-interfaces/events';\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\n\n\n@Component({\n    selector: 'schedule-view-event',\n    templateUrl: './view-event.component.html',\n    styleUrls: ['./view-event.component.scss'],\n})\nexport class ScheduleViewEventComponent extends BaseClass implements OnInit {\n    /** ID of the current booking to display */\n    public id: string;\n    /** Calendar the event belongs to */\n    public calendar: string;\n    /** Type of event to retrieve */\n    public type: string;\n    /** Booking to display */\n    public event: CalendarEvent | Booking;\n    /** Whether booking data is being loaded */\n    public loading: string;\n    /** Whether booking is being edited */\n    public editing: boolean;\n    /** Whether booking is being deleted */\n    public deleting: boolean;\n    /** Menu event */\n    @Output() public menu = new EventEmitter(false);\n\n    constructor(\n        private _bookings: BookingsService,\n        private _events: EventsService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _location: Location\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.params',\n            combineLatest([this._route.paramMap, this._route.queryParamMap]).subscribe(\n                ([param, queryParam]) => {\n                    if (param.has('id')) {\n                        this.id = param.get('id');\n                    }\n                    if (queryParam.has('calendar')) {\n                        this.calendar = queryParam.get('calendar');\n                    }\n                    if (queryParam.has('type')) {\n                        this.type = queryParam.get('type');\n                    }\n                    if (this.id) {\n                        this.loadEvent();\n                    }\n                }\n            )\n        );\n    }\n\n    public back() {\n        if (this.editing) {\n            this.onChange({ type: 'cancel_edit' });\n        } else {\n            this._location.back();\n        }\n    }\n\n    /**\n     * Load the details of the active event\n     */\n    public async loadEvent() {\n        if (this.deleting) {\n            return;\n        }\n        this.loading = 'Loading booking data...';\n        let booking;\n        try {\n            switch (this.type) {\n                case 'booking':\n                    booking = await this._bookings.show(this.id);\n                    break;\n                default:\n                    booking = await this._events.show(this.id, { calendar: this.calendar });\n            }\n            this.loading = '';\n            this.event = booking;\n        } catch (err) {\n            this.loading = '';\n            // this._service.notifyError(`Failed to load booking data\\nID: ${this.id}`);\n            this._router.navigate(['/schedule']);\n        }\n    }\n\n    /**\n     * Delete event\n     */\n    private async deleteEvent() {\n        if (this.event && !this.loading) {\n            this.loading = 'Cancelling meeting...';\n            const { id, title } = this.event;\n            this.deleting = true;\n            await this._events\n                .delete(id, { calendar: (this.event as CalendarEvent).calendar })\n                .catch(() => {\n                    // this._service.notifyError(`Failed to cancel booking \\n ${title}`);\n                });\n            // this._service.notifySuccess(`Booking ${title} was successfully cancelled`);\n            this._router.navigate(['/schedule']);\n            this.event = null;\n            this.loading = '';\n            this.deleting = false;\n        }\n    }\n\n    private confirmDelete() {\n        const dialog_ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Cancel Meeting',\n                content: `Are you sure you want to cancel this meeting: ${this.event.title}`,\n                okText: `I'm sure`,\n                cancelText: 'No',\n            },\n        });\n        dialog_ref.afterClosed().subscribe((evt) => {\n            if (evt) {\n                this.deleteEvent();\n            }\n        });\n    }\n\n    /**\n     * Handle changes to sub-components\n     */\n    public onChange(event: { type: string }): void {\n        if (event.type === 'edit') {\n            if (localStorage) {\n                const booking = new CalendarEvent({ ...this.event as any });\n                localStorage.setItem('STAFF.booking_form', JSON.stringify(booking));\n            }\n            this._router.navigate(['/book', 'spaces']);\n        } else if (event.type === 'view' || event.type === 'cancel_edit') {\n            this.editing = false;\n        } else if (event.type === 'cancel_booking') {\n            this.editing = false;\n            this.confirmDelete();\n        }\n    }\n}\n","<div *ngIf=\"event\" class=\"item\" [ngSwitch]=\"event.type\">\n    <div *ngSwitchCase=\"'date'\" class=\"date\">\n        <app-icon\n            *ngIf=\"!!event.is_today\"\n            [icon]=\"{ type: 'icon', class: 'material-icons', content: 'radio_button_checked' }\"\n        ></app-icon>\n        {{ event.title }}\n    </div>\n    <div *ngSwitchCase=\"'empty'\" class=\"empty\">\n        {{ event.title }}\n    </div>\n    <div *ngSwitchDefault class=\"event\" (click)=\"view(event)\">\n        <div [ngClass]=\"'time ' + status\" [class.done]=\"is_done\">\n            <div class=\"icon\" [ngSwitch]=\"event.status\">\n                <app-icon\n                    *ngSwitchCase=\"'cancelled'\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'cancel' }\"\n                ></app-icon>\n                <app-icon\n                    *ngSwitchDefault\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'forum' }\"\n                ></app-icon>\n            </div>\n            <div>{{ time }}</div>\n            <label *ngIf=\"event.status === 'cancelled'\">(Cancelled)</label>\n        </div>\n        <div class=\"details\">\n            <div class=\"title\">{{ event.title }}</div>\n            <div class=\"location\">\n                <app-icon\n                    *ngIf=\"!!location\"\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'place' }\"\n                ></app-icon>\n                <div class=\"text\">{{ location || 'No location' }}</div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BookingsService } from '@user-interfaces/bookings';\nimport { BaseClass, toQueryString } from '@user-interfaces/common';\n\nimport * as dayjs from 'dayjs';\n\nexport interface BookingLike {\n    /** ID of the item */\n    id: string;\n    /** Sorting weight of the item */\n    order_id?: string;\n    /** Type of item to render */\n    type: 'date' | 'event' | 'empty' | 'desk';\n    /** Date in UTC milliseconds */\n    date: number;\n    /** Current state of the booking */\n    status?: 'confirmed' | 'tentative' | 'cancelled';\n    [key: string]: any;\n}\n\n@Component({\n    selector: 'schedule-event-item',\n    templateUrl: './list-item.component.html',\n    styleUrls: ['./list-item.component.scss'],\n})\nexport class ScheduleEventListItemComponent extends BaseClass {\n    /** Booking to display */\n    @Input() public event: BookingLike;\n\n    constructor(private _bookings: BookingsService, private _router: Router) {\n        super();\n    }\n\n    public get isFuture(): boolean {\n        return dayjs(this.event.date).isAfter(dayjs(), 'm');\n    }\n\n    public get status(): string {\n        return this.event.status;\n    }\n\n    public get is_done(): boolean {\n        return this.event.is_done;\n    }\n\n    /** Display location of the booking event */\n    public get location(): string {\n        if (!this.event || this.event.type === 'date' || this.event.type === 'empty') {\n            return 'No location';\n        }\n        return this.event.location;\n    }\n\n    /** Image name to display for the event */\n    public get type_image(): string {\n        if (!this.event || this.event.type === 'date' || this.event.type === 'empty') {\n            return 'block';\n        }\n        if (this.event.has_visitors) {\n            return 'external';\n        }\n        return 'book_room';\n    }\n\n    public get time(): string {\n        if (!this.event || this.event.type === 'date' || this.event.type === 'empty') {\n            return '';\n        }\n        return this.event.all_day || this.event.duration > 23 * 60\n            ? 'All Day'\n            : dayjs(this.event.date).format('h:mm A');\n    }\n\n    public view() {\n        const query = toQueryString({\n            calendar: this.event.calendar,\n            type: this.event.type,\n        });\n        const url = `/schedule/view/${this.event.id}?${query}`;\n        this._router.navigateByUrl(url);\n    }\n}\n","<div class=\"schedule page\">\n    <header class=\"header\">\n        <a-topbar-header (menuChange)=\"menu.emit($event)\"></a-topbar-header>\n    </header>\n    <div class=\"actions\">\n        <div class=\"calendars\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    name=\"calendars\"\n                    [(ngModel)]=\"calendar\"\n                    (ngModelChange)=\"onCalendarChange()\"\n                >\n                    <mat-option\n                        *ngFor=\"let cal of calendar_list\"\n                        [value]=\"cal.id\"\n                    >\n                        {{ cal.summary }}\n                    </mat-option>\n                    <mat-option value=\"desks\">Desks</mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"legend\">\n            <button mat-button class=\"clear\" [matMenuTriggerFor]=\"legend\">\n                Legend\n            </button>\n            <mat-menu #legend=\"matMenu\">\n                <div class=\"legend\" *ngFor=\"let item of legend_list\">\n                    <div\n                        class=\"color\"\n                        [style.background-color]=\"item.color\"\n                    ></div>\n                    {{ item.name }}\n                </div>\n            </mat-menu>\n        </div>\n        <div class=\"date\">\n            <button mat-icon-button class=\"relative\" #dateMenu>\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'event' }\"\n                ></app-icon>\n                <input\n                    matInput\n                    class=\"opacity-0 absolute inset-0\"\n                    [ngModel]=\"date\"\n                    (ngModelChange)=\"updateDate($event)\"\n                    [matDatepicker]=\"picker\"\n                />\n\n                <mat-datepicker-toggle\n                    class=\"opacity-0 absolute inset-0\"\n                    matSuffix\n                    [for]=\"picker\"\n                ></mat-datepicker-toggle>\n            </button>\n            <mat-datepicker #picker></mat-datepicker>\n        </div>\n    </div>\n    <main class=\"body\">\n        <div class=\"event-list\">\n            <div class=\"progress\">\n                <mat-progress-bar\n                    mode=\"indeterminate\"\n                    *ngIf=\"loading\"\n                ></mat-progress-bar>\n            </div>\n            <div class=\"body\">\n                <a-infinite-scroll (scrolled)=\"onScroll()\">\n                    <schedule-event-item\n                        id=\"{{ i }}\"\n                        *ngFor=\"let item of events; let i = index\"\n                        [event]=\"item\"\n                    ></schedule-event-item>\n                    <mat-progress-bar\n                        mode=\"indeterminate\"\n                        *ngIf=\"loading && events.length > 0\"\n                    ></mat-progress-bar>\n                </a-infinite-scroll>\n            </div>\n        </div>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n","import { Component, Output, EventEmitter, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass, SettingsService, unique } from '@user-interfaces/common';\nimport { Calendar, CalendarService } from '@user-interfaces/calendar';\nimport { EventsService } from '@user-interfaces/events';\nimport { SpacesService } from '@user-interfaces/spaces';\nimport { BookingsService } from '@user-interfaces/bookings';\n\nimport { BookingLike } from './list-item/list-item.component';\n\nimport * as dayjs from 'dayjs';\n\nexport interface EventPair {\n    id: string;\n    date: number;\n}\n\n@Component({\n    selector: 'schedule-event-list',\n    templateUrl: './event-list.component.html',\n    styleUrls: ['./event-list.component.scss'],\n})\nexport class ScheduleEventListComponent extends BaseClass implements OnInit {\n    /** Emitter  */\n    @Output('eventList') public event_list = new EventEmitter<EventPair[]>();\n    /** List of items to display on the event list */\n    public events: BookingLike[] = [];\n    /** Update promise */\n    public event_promise: Promise<void>;\n    /** Whether bookings are being updated */\n    public loading: boolean;\n    /** Number of days to render in the list from the current date */\n    public shown_offset: number = 7;\n    /** Offset of the date to show events for */\n    public date_offset: number = 0;\n    /** Date to scroll to on next update */\n    public scroll_to: string;\n    /** Current UTC epoch */\n    public from: number = dayjs().valueOf();\n    /** Current UTC epoch */\n    public date: number;\n    /** List of user calendars */\n    public calendar_list: Calendar[];\n    /** Selected calendar id to display */\n    public calendar: string;\n    /** Legend */\n    public legend_list = [];\n    /** Menu event */\n    @Output() public menu = new EventEmitter();\n\n    @ViewChild('dateMenu', { read: MatMenuTrigger, static: false })\n    public trigger: MatMenuTrigger;\n\n    constructor(\n        private _settings: SettingsService,\n        private _events: EventsService,\n        private _spaces: SpacesService,\n        private _calendars: CalendarService,\n        private _bookings: BookingsService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('email')) {\n                    this.calendar = params.get('email');\n                }\n            })\n        );\n        this._spaces.initialised.pipe(first((_) => _)).subscribe(() => {\n            this._calendars.initialised.pipe(first((_) => _)).subscribe((value) => {\n                this.calendar_list = this._calendars.calendars;\n                if (!this.calendar) {\n                    this.calendar =\n                        this.calendar_list.find((i) => i.primary)?.id || this.calendar_list[0]?.id;\n                }\n                this.updateList();\n                this.interval('update_events', () => this.updateList(), 100 * 1000);\n            });\n        });\n        this.legend_list = this._settings.get('app.schedule.legend');\n    }\n    /**\n     * Update the list of events for the currently visible period\n     */\n    public async updateList() {\n        this.loading = true;\n        const start = dayjs().add(this.date_offset, 'd').startOf('d');\n        const end = start.add(7, 'd').endOf('d');\n        let events;\n        if (this.calendar === 'desks') {\n            events = await this._bookings.query({\n                period_start: start.unix(),\n                period_end: end.unix(),\n                type: 'desk',\n                user: 'current',\n            });\n        } else {\n            events = await this._events.query({\n                calendars: this.calendar,\n                period_start: start.unix(),\n                period_end: end.unix(),\n            });\n        }\n        const list = events;\n        const old_events = this.events.filter((i) => {\n            const date = dayjs(i.date);\n            return (\n                i.type !== 'date' &&\n                i.type !== 'empty' &&\n                (date.isBefore(start, 's') || date.isAfter(end, 's'))\n            );\n        });\n        this.events = this.processEvents(list, old_events);\n        // Update event list for view listing\n        const event_list = this.events.filter((i) => i.type !== 'date' && i.type !== 'empty');\n        this.event_list.emit(event_list.map((i) => ({ id: i.id, date: i.date })));\n        // Scroll to date if needed\n        this.timeout('scroll_to', () => this.scrollTo());\n        this.loading = false;\n    }\n\n    /**\n     * Process list of new items and merge with the old\n     * @param list List of new bookings to generate event blocks for\n     * @param old_events List of relevant old event blocks\n     */\n    public processEvents(list: any[], old_events: BookingLike[] = []): BookingLike[] {\n        let events: BookingLike[] = [];\n        const now = dayjs();\n        let date = dayjs().startOf('d');\n        const end = date.add(this.date_offset + this.shown_offset, 'd').endOf('d');\n        for (; date.isBefore(end); date = date.add(1, 'd')) {\n            const date_str = date.format('YYYY-MM-DD');\n            // Add date block\n            events.push({\n                id: date_str,\n                type: 'date',\n                title: date.format('dddd, DD MMM'),\n                date: date.valueOf(),\n            });\n            const filter_fn: (_: BookingLike) => boolean = (i) => {\n                const day = dayjs(i.date);\n                return day.isSame(date, 'd');\n            };\n            // Add events for today to list\n            const new_items = list.filter(filter_fn as any);\n            const old_items = old_events.filter(filter_fn as any);\n            if (new_items.length || old_items.length) {\n                events = events.concat(new_items as any).concat(old_items);\n            } else {\n                // Add block for no events if so\n                events.push({\n                    id: `${date_str}-empty`,\n                    type: 'empty',\n                    title: `No items for ${date.format('dddd, DD MMM')}`,\n                    date: date.valueOf() + 1,\n                });\n            }\n        }\n        events.sort((a, b) => a.date - b.date);\n        return unique(events, 'id');\n    }\n\n    /**\n     * Handle scrolling on the event list\n     */\n    public onScroll() {\n        if (!this.event_promise && this.calendar_list) {\n            this.date_offset = this.date_offset + 7;\n            this.updateList();\n        }\n    }\n\n    /**\n     * Update the date offset\n     * @param date UTC milliseconds epoch of new date offset\n     */\n    public updateDate(date: number) {\n        const day = dayjs(date);\n        this.date_offset = day.diff(dayjs(), 'd') - 1;\n        this.shown_offset = Math.max(this.shown_offset, this.date_offset + 3);\n        this.scroll_to = day.format('YYYY-MM-DD');\n        delete this.event_promise;\n        // this.date = dayjs().add(this.date_offset, 'd').valueOf();\n        this.updateList();\n    }\n\n    /**\n     * Scroll to a previously defined date on the event list\n     */\n    private scrollTo() {\n        if (this.scroll_to) {\n            const index = this.events.findIndex((i) => i.id === this.scroll_to);\n            if (index > -1) {\n                document.getElementById(`${index}`).scrollIntoView({ behavior: 'smooth' });\n            }\n            this.scroll_to = '';\n        }\n    }\n\n    /** On calendar change */\n    public onCalendarChange() {\n        this.events = [];\n        this.date_offset = 0;\n        this.date = dayjs().valueOf();\n        this.updateList();\n        this._router.navigate(['/schedule'], {\n            queryParams: {\n                email: this.calendar,\n            },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    /** Close calendar */\n    public closeDatePicker() {\n        this.trigger.closeMenu();\n    }\n}\n","<ng-container [ngSwitch]=\"page\">\n    <ng-container *ngSwitchCase=\"'view'\">\n        <schedule-view-event (menu)=\"show_menu = $event\"></schedule-view-event>\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n        <schedule-event-list\n            (menu)=\"show_menu = $event\"\n            (eventList)=\"updateEvents($event)\"\n        ></schedule-event-list>\n    </ng-container>\n</ng-container>\n<a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { BaseClass, SettingsService } from '@user-interfaces/common';\n\nimport { EventPair } from './event-list/event-list.component';\n\n@Component({\n    selector: 'app-schedule',\n    templateUrl: './schedule.template.html',\n    styleUrls: ['./schedule.styles.scss'],\n})\nexport class ScheduleComponent extends BaseClass implements OnInit {\n    /** Name of the page to render */\n    public page: string;\n    /** Current list of loaded events */\n    public events: EventPair[];\n    /** Whether to show menu */\n    public show_menu = false;\n\n    constructor(private _route: ActivatedRoute, private _settings: SettingsService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.post('navTitle', 'My Day');\n        this.subscription(\n            'route.route',\n            this._route.paramMap.subscribe((params) => {\n                if (params.has('page')) {\n                    this.page = params.get('page');\n                }\n            })\n        );\n        this.loadEvents();\n    }\n\n    /**\n     * Update local event listing\n     * @param event_list New list of events\n     */\n    public updateEvents(event_list: EventPair[]) {\n        this.events = event_list;\n        this.saveEvents();\n    }\n\n    /**\n     * Save the current event listing\n     */\n    public saveEvents() {\n        if (localStorage) {\n            localStorage.setItem('STAFF.events', JSON.stringify(this.events || []));\n        }\n    }\n\n    /**\n     * Load the last saved event listing\n     */\n    public loadEvents() {\n        if (localStorage) {\n            const data = localStorage.getItem('STAFF.events');\n            this.events = JSON.parse(data || '[]');\n        }\n    }\n}\n","import { Routes } from '@angular/router';\n\nimport { ScheduleComponent } from './schedule.component';\n\nexport const ROUTES: Routes = [\n    { path: '', component: ScheduleComponent },\n    { path: ':page', component: ScheduleComponent },\n    { path: ':page/:id', component: ScheduleComponent },\n    { path: '**', redirectTo: '' }\n];\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { RouterModule } from '@angular/router';\n\nimport { ROUTES } from './schedule.routes';\nimport { SharedContentModule } from '../ui/shared.module';\n\nimport { ScheduleComponent } from './schedule.component';\nimport { ScheduleEventListComponent } from './event-list/event-list.component';\nimport { ScheduleViewEventComponent } from './view-event/view-event.component';\nimport { ScheduleEventListItemComponent } from './event-list/list-item/list-item.component';\nimport { EventDetailsComponent } from './view-event/event-details/event-details.component';\nimport { EventEditComponent } from './view-event/event-edit/event-edit.component';\nimport { BookingDetailsComponent } from './view-event/booking-details/booking-details.component';\n\n@NgModule({\n    declarations: [\n        ScheduleComponent,\n        ScheduleViewEventComponent,\n        ScheduleEventListComponent,\n        ScheduleEventListItemComponent,\n        EventDetailsComponent,\n        EventEditComponent,\n        BookingDetailsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n        ScrollingModule,\n    ],\n})\nexport class ScheduleModule {}\n"],"sourceRoot":"webpack:///"}