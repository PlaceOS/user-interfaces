{"version":3,"mappings":"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","names":["CheckinStateService","constructor","this","BehaviorSubject","_event","asObservable","_guest","_error","_form","clear","next","_photo","setPhoto","data","setError","message","loadGuestAndEvent","email","event_id","guest","showGuest","toPromise","event","showEvent","generateGuestForm","host","upcoming","listGuestMeetings","today","Date","todays_events","filter","isSameDay","date","sort","a","b","length","Error","updateGuest","getValue","form","updateMetadata","name","details","Object","value","checkinGuest","checkinEventGuest","id","system_id","n","system","_a","i","resources","_b","printPass","Promise","res","setTimeout","err","notifyError","reject","factory","i0","ctx_r3","CheckinDetailsComponent","_checkin","_router","ngOnInit","pipe","first","subscribe","_","previous","loading","navigate","selectors","CheckinPhotoComponent","handlePhoto","catch","e","RULE_TYPES","$event","set_r2","l","CateringConfigModalComponent","_data","EventEmitter","rulesets","config","map","set","rules","JSON","stringify","new_id","Math","floor","random","saveChanges","parse","emit","reason","metadata","MAT_DIALOG_DATA","ctx","ctx_r15","oxw","ctx_r17","ctx_r19","CateringItemModalComponent","FormGroup","FormControl","item","Validators","description","category","unit_price","tags","accept_points","discount_cap","ENTER","COMMA","SPACE","CateringItem","categories","tag_list","controls","renderPercent","addTag","markAsDirty","input","trim","push","setValue","removeTag","existing_tag","index","indexOf","splice","randomInt","$localize","ctx_r11","CateringItemOptionModalComponent","option","types","group","multiple","new_option","parent","options","concat","u","c","t","_tabFocusChanged","_removeTabBodyWrapperHeight","_setTabBodyWrapperHeight","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","element","left","offsetLeft","width","offsetWidth","MatInkBar","_elementRef","_ngZone","_inkBarPositioner","_animationMode","alignToElement","show","onStable","take","positions","inkBar","nativeElement","style","visibility","hide","ɵfac","ANIMATION_MODULE_TYPE","ɵdir","MAT_TAB_CONTENT","MAT_TAB_LABEL","MAT_TAB","_MatTabBase","mixinDisabled","MAT_TAB_GROUP","MatTab","_viewContainerRef","_closestTabGroup","super","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","templateLabel","_templateLabel","_setTemplateLabelInput","content","ngOnChanges","changes","hasOwnProperty","ngOnDestroy","complete","TemplatePortal","_explicitContent","_implicitContent","_closestTab","ɵcmp","TemplateRef","r","provide","useExisting","ngContentSelectors","encapsulation","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","CdkPortalOutlet","componentFactoryResolver","viewContainerRef","_host","_document","_centeringSub","Subscription","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","forwardRef","MatTabBody","DOCUMENT","_MatTabBodyBase","_dir","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","_onCentered","animationDuration","change","dir","_computePositionAnimationState","markForCheck","distinctUntilChanged","x","y","fromState","toState","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","i1","inputs","elementRef","decls","directives","styles","MAT_TABS_CONFIG","_MatTabLabelWrapperBase","MatTabLabelWrapper","focus","getOffsetLeft","getOffsetWidth","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatPaginatedTabHeader","_changeDetectorRef","_viewportRuler","_platform","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","disablePagination","_selectedIndex","selectFocusedIndex","indexFocused","runOutsideAngular","fromEvent","takeUntil","_stopInterval","selectedIndex","coerceNumberProperty","_keyManager","updateActiveItem","ngAfterViewInit","_previousPaginator","_handlePaginatorPress","_nextPaginator","ngAfterContentInit","dirChange","of","resize","realign","updatePagination","_alignInkBarToSelectedTab","FocusKeyManager","_items","withHorizontalOrientation","withHomeAndEnd","withWrap","merge","run","resolve","then","max","min","_getMaxScrollDistance","newFocusIndex","_setTabFocus","ngAfterContentChecked","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","hasModifierKey","keyCode","focusIndex","_itemSelected","onKeydown","_onContentChanges","textContent","_currentTextContent","_checkPaginationEnabled","activeItemIndex","_isValidIndex","setActiveItem","tab","toArray","disabled","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","round","TRIDENT","EDGE","_scrollTo","_scrollHeader","direction","_handlePaginatorClick","labelIndex","selectedLabel","viewLength","labelBeforePos","labelAfterPos","_tabListInner","beforeVisiblePos","afterVisiblePos","isEnabled","selectedItem","selectedLabelWrapper","_inkBar","mouseEvent","button","timer","maxScrollDistance","distance","i1$1","i3","_MatTabHeaderBase","viewportRuler","ngZone","platform","animationMode","_disableRipple","disableRipple","coerceBooleanProperty","preventDefault","MatTabHeader","Et","St","Ft","qt","Bt","i4","i5","nextId","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","_MatTabGroupBase","defaultConfig","_tabs","QueryList","_indexToSelect","_lastFocusedTabIndex","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","dynamicHeight","contentTabIndex","_dynamicHeight","_animationDuration","test","_contentTabIndex","backgroundColor","_backgroundColor","classList","remove","add","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","wrapper","_tabBodyWrapper","forEach","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","selectedTab","_allTabs","reset","notifyOnChanges","destroy","realignInkBar","_tabHeader","focusTab","header","_focusChanged","MatTabChangeEvent","_getTabLabelId","_getTabContentId","tabHeight","height","offsetHeight","_handleClick","tabHeader","_getTabIndex","focusOrigin","MatTabGroup","jt","Qt","i3$1","i7","i7$1","ctx_r31","ctx_r36","is_available","rule","includes","space","zones","matches","condition","isAfter","setHours","isBefore","duration","stringToMinutes","ext","CateringOrderModalComponent","BaseClass","order","CateringOrder","getCateringConfig","level","_c","parent_id","menu","list","unique","cat","cateringItemAvailable","menu_items","updateMenuQuantities","timeout","addItem","choose_options","old_item","items","find","itm","reduce","o","opt","selectOptions","new_item","options_string","quantity","removeItem","updateItemQuantity","amount","localeCompare","optionsFor","join","saveOrder","confirmOrder","show_order_details","ctx_r9","CateringOrderOptionsModalComponent","groups","group_list","updateGroupOption","option_state","saveOptions","ctx_r4","ctx_r6","CateringImportMenuModalComponent","handleFileEvent","target","files","file","fileReader","FileReader","addEventListener","csvToJson","result","type","toLowerCase","readAsText","downloadTemplate","downloadFile","CateringStateService","_org","_dialog","_menu","_loading","_currency","subscription","active_building","bld","__awaiter","getCateringForZone","currency","manageCateringOrder","ref","open","race","componentInstance","afterClosed","close","findIndex","updateMenu","building","addOption","deleteItem","openConfirmModal","title","icon","class","deleteOption","editConfig","flatten","updateConfig","importMenu","updated_menu","notifySuccess","zone_id","showMetadata","Array","addItemToOrder","match","CheckinPreferencesComponent","_catering","update","beverage","updateEvent","CalendarEvent","extension_data","catering","QrScanner","static","listCameras","cameras","requestLabels","navigator","mediaDevices","openedStream","getUserMedia","audio","video","stream","enumerateDevices","devices","device","kind","deviceId","label","finally","track","getTracks","stop","removeTrack","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","canvasSizeOrCalculateScanRegion","_calculateScanRegion","preferredCamera","$video","$canvas","document","createElement","_onDecode","_legacyCanvasSize","DEFAULT_CANVAS_SIZE","_preferredCamera","_active","_paused","_flashOn","console","warn","_scanRegion","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","requestAnimationFrame","computedStyle","window","getComputedStyle","display","setProperty","opacity","_qrEnginePromise","createQrEngine","hasFlash","srcObject","getVideoTracks","_getCameraStream","getSettings","isFlashOn","toggleFlash","turnFlashOff","turnFlashOn","applyConstraints","advanced","torch","_restartVideoStream","removeEventListener","_postWorkerMessage","start","location","protocol","play","facingMode","_setVideoMirror","pause","stopStreamImmediately","stopStream","tracks","setCamera","facingModeOrDeviceId","imageOrFileOrUrl","scanRegion","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","gotExternalWorker","Worker","promise","all","_loadImage","engine","image","canvasContext","_drawToCanvas","postMessage","onMessage","onError","clearTimeout","N","NO_QR_CODE_FOUND","imageData","getImageData","buffer","detect","scanResults","rawValue","scanImage","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","supportedFormats","formats","_scanFrame","smallestDimension","videoWidth","videoHeight","scanRegionSize","downScaledWidth","downScaledHeight","paused","ended","readyState","error","log","preferenceType","constraintsWithoutCamera","constraint","assign","exact","reduceRight","fallback","_getFacingMode","wasPaused","videoStream","videoTrack","scanRegionX","scanRegionY","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","context","getContext","alpha","imageSmoothingEnabled","drawImage","imageOrFileOrBlobOrUrl","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","Blob","URL","src","createObjectURL","revokeObjectURL","naturalWidth","onLoad","qrEngineOrQrEnginePromise","CheckinQRScanComponent","setupQRReader","_video_el","_reader","checkQRCode","raw_text","chunks","split","handleError","checkEmail","statusText","CheckinResultsComponent","CheckinErrorComponent","CheckinCovidComponent","confirm","symptoms","contact","covid","ROUTES","path","component","_settings","background","get","CheckinComponent","children","redirectTo","VisitorCheckinModule","CommonModule","FormsModule","ReactiveFormsModule","SharedComponentsModule","RouterModule"],"sources":["./apps/visitor-kiosk/src/app/checkin/checkin-state.service.ts","./apps/visitor-kiosk/src/app/checkin/checkin-details.component.ts","./apps/visitor-kiosk/src/app/checkin/checkin-photo.component.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./node_modules/@angular/material/fesm2015/tabs.mjs","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./apps/visitor-kiosk/src/app/checkin/checkin-preferences.component.ts","./node_modules/qr-scanner/src/qr-scanner.js","./apps/visitor-kiosk/src/app/checkin/checkin-qr-scan.component.ts","./apps/visitor-kiosk/src/app/checkin/checkin-result.component.ts","./apps/visitor-kiosk/src/app/checkin/checkin-error.component.ts","./apps/visitor-kiosk/src/app/checkin/checkin-covid.component.ts","./apps/visitor-kiosk/src/app/checkin/checkin.module.ts","./apps/visitor-kiosk/src/app/checkin/checkin.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { HashMap, notifyError } from '@placeos/common';\nimport { CalendarEvent, checkinEventGuest, showEvent } from '@placeos/events';\nimport {\n    GuestUser,\n    generateGuestForm,\n    showGuest,\n    listGuestMeetings,\n} from '@placeos/users';\nimport { isSameDay } from 'date-fns';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CheckinStateService {\n    /** Current event being checked in */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Current guest being checked in */\n    private _guest = new BehaviorSubject<GuestUser>(null);\n    /** Photo of the current guest */\n    private _photo = new BehaviorSubject<string>('');\n    /** Photo of the current guest */\n    private _error = new BehaviorSubject<string>('');\n    /** Form for the current guest details */\n    private _form = new BehaviorSubject<FormGroup>(null);\n\n    public readonly event = this._event.asObservable();\n    public readonly guest = this._guest.asObservable();\n    public readonly error = this._error.asObservable();\n    public readonly form = this._form.asObservable();\n\n    public clear() {\n        this._guest.next(null);\n        this._event.next(null);\n        this._photo.next(null);\n    }\n\n    public setPhoto(data: string) {\n        this._photo.next(data);\n    }\n\n    public setError(message: string) {\n        this._error.next(message);\n    }\n\n    /** Load gie */\n    public async loadGuestAndEvent(email: string, event_id?: string) {\n        const guest = await showGuest(email).toPromise();\n        if (event_id) {\n            const event = await showEvent(event_id).toPromise();\n            this._guest.next(guest);\n            this._event.next(event);\n            this._form.next(generateGuestForm(guest, event.host));\n            return { guest, event };\n        }\n        const upcoming = await listGuestMeetings(email).toPromise();\n        const today = new Date();\n        const todays_events = upcoming.filter((event) =>\n            isSameDay(new Date(event.date), today)\n        );\n        todays_events.sort((a, b) => a.date - b.date);\n        if (todays_events.length <= 0) {\n            throw new Error(`No meetings for with guest \"${email}\" today`);\n        }\n        this._guest.next(guest);\n        this._event.next(todays_events[0]);\n        this._form.next(generateGuestForm(guest, todays_events[0].host));\n        return { guest, event: todays_events[0] };\n    }\n\n    public async updateGuest(data?: HashMap) {\n        const guest = this._guest.getValue();\n        const form = this._form.getValue();\n        if (!guest || !form) return;\n        await updateMetadata(guest.email, {\n            name: 'preferences',\n            details: { ...guest, ...form.value, ...(data || {}) },\n        }).toPromise();\n    }\n\n    public async checkinGuest() {\n        const guest = this._guest.getValue();\n        const event = this._event.getValue();\n        if (!guest || !event) return;\n        await checkinEventGuest(event.id, guest.email, true, {\n            system_id: event.system?.id || event.resources[0]?.id,\n        }).toPromise();\n    }\n\n    public printPass() {\n        try {\n            // TODO: actually trigger print visitor pass\n            return new Promise((res) => setTimeout(() => res(''), 5000));\n        } catch (err) {\n            notifyError('Error printing visitor pass');\n        }\n        return Promise.reject();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: '[checkin-details]',\n    template: `\n        <form\n            *ngIf=\"(form | async) && !loading; else load_state\"\n            [formGroup]=\"form | async\"\n            class=\"bg-white rounded shadow overflow-hidden relative flex flex-col items-center my-4 mx-auto\"\n        >\n            <h3 class=\"text-2xl m-4\">Confirm Details</h3>\n            <div field class=\"flex flex-col\">\n                <label form=\"host\">Host</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"host\"\n                        formControlName=\"host\"\n                        placeholder=\"Host's Email Address\"\n                    />\n                    <mat-error>\n                        The email address of your host is required\n                    </mat-error>\n                </mat-form-field>\n            </div>\n            <div field class=\"flex flex-col\">\n                <label form=\"name\">Name</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        formControlName=\"name\"\n                        placeholder=\"Full Name\"\n                    />\n                    <mat-error>Please enter your full name</mat-error>\n                </mat-form-field>\n            </div>\n            <div field class=\"flex flex-col\">\n                <label form=\"email\">Email</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        formControlName=\"email\"\n                        placeholder=\"Email Address\"\n                    />\n                    <mat-error>A valid email address is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div field class=\"flex flex-col\">\n                <label form=\"email\">Phone Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        formControlName=\"phone\"\n                        placeholder=\"Phone Number\"\n                    />\n                </mat-form-field>\n            </div>\n            <div field class=\"flex flex-col\">\n                <label form=\"email\">Organisation / Company</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        formControlName=\"phone\"\n                        placeholder=\"Organisation / Company\"\n                    />\n                </mat-form-field>\n            </div>\n            <button next mat-button (click)=\"updateGuest()\">Next</button>\n            <a\n                mat-icon-button\n                class=\"absolute top-0 right-0\"\n                [routerLink]=\"['/welcome']\"\n            >\n                <app-icon>close</app-icon>\n            </a>\n        </form>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center m-auto\">\n                <mat-spinner [diameter]=\"48\"></mat-spinner>\n                <div class=\"my-4 text-lg text-white\">\n                    Updating data and checking in...\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: rgba(0, 0, 0, 0.5);\n            }\n\n            form {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n\n            [field] {\n                width: calc(100% - 2rem);\n            }\n\n            .absolute {\n                position: absolute;\n            }\n\n            button {\n                margin-bottom: 1rem;\n                width: 8rem;\n            }\n        `,\n    ],\n})\nexport class CheckinDetailsComponent implements OnInit {\n    public readonly form = this._checkin.form;\n\n    public loading = false;\n\n    constructor(\n        private _checkin: CheckinStateService,\n        private _router: Router\n    ) {}\n\n    public ngOnInit(): void {\n        this.form.pipe(first()).subscribe((_) => (!_ ? this.previous() : ''));\n    }\n\n    public async updateGuest() {\n        this.loading = true;\n        await this._checkin.updateGuest();\n        await this._checkin.checkinGuest();\n        this.loading = false;\n        this._router.navigate(['/checkin', 'covid']);\n    }\n\n    public previous() {\n        this._router.navigate(['/checkin', 'scan']);\n    }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { notifyError } from '@placeos/common';\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: 'checkin-photo',\n    template: `\n        <div class=\"bg-white rounded shadow overflow-hidden relative flex flex-col items-center p-4\" *ngIf=\"!loading; else load_state\">\n            <h3 class=\"text-xl mb-4\">Take a photo to continue</h3>\n            <a-take-photo (photoAccepted)=\"handlePhoto($event)\"></a-take-photo>\n            <a\n                mat-icon-button\n                class=\"absolute top-0 right-0\"\n                [routerLink]=\"['/welcome']\"\n            >\n                <app-icon>close</app-icon>\n            </a>\n        </div>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center m-auto\">\n                <mat-spinner [diameter]=\"48\"></mat-spinner>\n                <div class=\"my-4 text-lg text-white\">\n                    Printing guest pass...\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [`\n        :host {\n            position: absolute;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(0, 0, 0, 0.5);\n        }\n\n        .absolute {\n            position: absolute;\n        }\n    `]\n})\nexport class CheckinPhotoComponent {\n    /** Whether guest pass is being loaded */\n    public loading: boolean;\n\n    constructor(private _checkin: CheckinStateService, private _router: Router) { }\n\n    public async handlePhoto(event: any) {\n        if (!event) {\n            return notifyError('Error saving image, please try again');\n        }\n        this.loading = true;\n        this._checkin.setPhoto(event);\n        await this._checkin.printPass().catch((e) => {\n            this.loading = false;\n            notifyError(e);\n            throw e;\n        });\n        this.loading = false;\n        this._router.navigate(['/checkin', 'results']);\n    }\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import * as i7 from '@angular/cdk/a11y';\nimport { FocusKeyManager, A11yModule } from '@angular/cdk/a11y';\nimport * as i5 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport * as i7$1 from '@angular/cdk/portal';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i3$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, TemplateRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ContentChild, ViewChild, Input, forwardRef, EventEmitter, Output, ContentChildren, QueryList, Attribute, NgModule } from '@angular/core';\nimport * as i4 from '@angular/material/core';\nimport { mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, MAT_RIPPLE_GLOBAL_OPTIONS, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { take, startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject, Subscription, fromEvent, of, merge, timer } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i1$1 from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token for the MatInkBar's Positioner. */\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY,\n});\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n    const method = (element) => ({\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\n    });\n    return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\nclass MatInkBar {\n    constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._inkBarPositioner = _inkBarPositioner;\n        this._animationMode = _animationMode;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param element\n     */\n    alignToElement(element) {\n        this.show();\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            const positions = this._inkBarPositioner(element);\n            const inkBar = this._elementRef.nativeElement;\n            inkBar.style.left = positions.left;\n            inkBar.style.width = positions.width;\n        });\n    }\n    /** Shows the ink bar. */\n    show() {\n        this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /** Hides the ink bar. */\n    hide() {\n        this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n}\nMatInkBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInkBar, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: _MAT_INK_BAR_POSITIONER }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInkBar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatInkBar, selector: \"mat-ink-bar\", host: { properties: { \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-ink-bar\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInkBar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-ink-bar',\n                    host: {\n                        'class': 'mat-ink-bar',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [_MAT_INK_BAR_POSITIONER]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatTabContent`. It serves as\n * alternative token to the actual `MatTabContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_TAB_CONTENT = new InjectionToken('MatTabContent');\n/** Decorates the `ng-template` tags and reads out the template from it. */\nclass MatTabContent {\n    constructor(/** Content for the tab. */ template) {\n        this.template = template;\n    }\n}\nMatTabContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabContent, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatTabContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabContent, selector: \"[matTabContent]\", providers: [{ provide: MAT_TAB_CONTENT, useExisting: MatTabContent }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTabContent]',\n                    providers: [{ provide: MAT_TAB_CONTENT, useExisting: MatTabContent }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatTabLabel`. It serves as\n * alternative token to the actual `MatTabLabel` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_TAB_LABEL = new InjectionToken('MatTabLabel');\n/**\n * Used to provide a tab label to a tab without causing a circular dependency.\n * @docs-private\n */\nconst MAT_TAB = new InjectionToken('MAT_TAB');\n/** Used to flag tab labels for use with the portal directive */\nclass MatTabLabel extends CdkPortal {\n    constructor(templateRef, viewContainerRef, _closestTab) {\n        super(templateRef, viewContainerRef);\n        this._closestTab = _closestTab;\n    }\n}\nMatTabLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabLabel, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: MAT_TAB, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTabLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabLabel, selector: \"[mat-tab-label], [matTabLabel]\", providers: [{ provide: MAT_TAB_LABEL, useExisting: MatTabLabel }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-tab-label], [matTabLabel]',\n                    providers: [{ provide: MAT_TAB_LABEL, useExisting: MatTabLabel }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TAB]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nconst _MatTabBase = mixinDisabled(class {\n});\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * @docs-private\n */\nconst MAT_TAB_GROUP = new InjectionToken('MAT_TAB_GROUP');\nclass MatTab extends _MatTabBase {\n    constructor(_viewContainerRef, _closestTabGroup) {\n        super();\n        this._viewContainerRef = _viewContainerRef;\n        this._closestTabGroup = _closestTabGroup;\n        /** Plain text label for the tab, used when there is no template label. */\n        this.textLabel = '';\n        /** Portal that will be the hosted content of the tab */\n        this._contentPortal = null;\n        /** Emits whenever the internal state of the tab changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        /**\n         * Whether the tab is currently active.\n         */\n        this.isActive = false;\n    }\n    /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n    get templateLabel() {\n        return this._templateLabel;\n    }\n    set templateLabel(value) {\n        this._setTemplateLabelInput(value);\n    }\n    /** @docs-private */\n    get content() {\n        return this._contentPortal;\n    }\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n            this._stateChanges.next();\n        }\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    ngOnInit() {\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setTemplateLabelInput(value) {\n        // Only update the label if the query managed to find one. This works around an issue where a\n        // user may have manually set `templateLabel` during creation mode, which would then get\n        // clobbered by `undefined` when the query resolves. Also note that we check that the closest\n        // tab matches the current one so that we don't pick up labels from nested tabs.\n        if (value && value._closestTab === this) {\n            this._templateLabel = value;\n        }\n    }\n}\nMatTab.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTab, deps: [{ token: i0.ViewContainerRef }, { token: MAT_TAB_GROUP, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatTab.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTab, selector: \"mat-tab\", inputs: { disabled: \"disabled\", textLabel: [\"label\", \"textLabel\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], labelClass: \"labelClass\", bodyClass: \"bodyClass\" }, providers: [{ provide: MAT_TAB, useExisting: MatTab }], queries: [{ propertyName: \"templateLabel\", first: true, predicate: MAT_TAB_LABEL, descendants: true }, { propertyName: \"_explicitContent\", first: true, predicate: MAT_TAB_CONTENT, descendants: true, read: TemplateRef, static: true }], viewQueries: [{ propertyName: \"_implicitContent\", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: [\"matTab\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\", changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTab, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tab', inputs: ['disabled'], changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, exportAs: 'matTab', providers: [{ provide: MAT_TAB, useExisting: MatTab }], template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TAB_GROUP]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { templateLabel: [{\n                type: ContentChild,\n                args: [MAT_TAB_LABEL]\n            }], _explicitContent: [{\n                type: ContentChild,\n                args: [MAT_TAB_CONTENT, { read: TemplateRef, static: true }]\n            }], _implicitContent: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], textLabel: [{\n                type: Input,\n                args: ['label']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], labelClass: [{\n                type: Input\n            }], bodyClass: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nconst matTabsAnimations = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'),\n        ]),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\nclass MatTabBodyPortal extends CdkPortalOutlet {\n    constructor(componentFactoryResolver, viewContainerRef, _host, _document) {\n        super(componentFactoryResolver, viewContainerRef, _document);\n        this._host = _host;\n        /** Subscription to events for when the tab body begins centering. */\n        this._centeringSub = Subscription.EMPTY;\n        /** Subscription to events for when the tab body finishes leaving from center position. */\n        this._leavingSub = Subscription.EMPTY;\n    }\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit() {\n        super.ngOnInit();\n        this._centeringSub = this._host._beforeCentering\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n            .subscribe((isCentering) => {\n            if (isCentering && !this.hasAttached()) {\n                this.attach(this._host._content);\n            }\n        });\n        this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n    /** Clean up centering subscription. */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._centeringSub.unsubscribe();\n        this._leavingSub.unsubscribe();\n    }\n}\nMatTabBodyPortal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabBodyPortal, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: forwardRef(() => MatTabBody) }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTabBodyPortal.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabBodyPortal, selector: \"[matTabBodyHost]\", usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabBodyPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTabBodyHost]',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: MatTabBody, decorators: [{\n                        type: Inject,\n                        args: [forwardRef(() => MatTabBody)]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/**\n * Base class with all of the `MatTabBody` functionality.\n * @docs-private\n */\nclass _MatTabBodyBase {\n    constructor(_elementRef, _dir, changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        /** Subscription to the directionality change observable. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Emits when an animation on the tab is complete. */\n        this._translateTabComplete = new Subject();\n        /** Event emitted when the tab begins to animate towards the center as the active tab. */\n        this._onCentering = new EventEmitter();\n        /** Event emitted before the centering of the tab begins. */\n        this._beforeCentering = new EventEmitter();\n        /** Event emitted before the centering of the tab begins. */\n        this._afterLeavingCenter = new EventEmitter();\n        /** Event emitted when the tab completes its animation towards the center. */\n        this._onCentered = new EventEmitter(true);\n        // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n        // anyway to prevent the animations module from throwing an error if the body is used on its own.\n        /** Duration for the tab's animation. */\n        this.animationDuration = '500ms';\n        if (_dir) {\n            this._dirChangeSubscription = _dir.change.subscribe((dir) => {\n                this._computePositionAnimationState(dir);\n                changeDetectorRef.markForCheck();\n            });\n        }\n        // Ensure that we get unique animation events, because the `.done` callback can get\n        // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n        this._translateTabComplete\n            .pipe(distinctUntilChanged((x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))\n            .subscribe(event => {\n            // If the transition to the center is complete, emit an event.\n            if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n                this._onCentered.emit();\n            }\n            if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n                this._afterLeavingCenter.emit();\n            }\n        });\n    }\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    set position(position) {\n        this._positionIndex = position;\n        this._computePositionAnimationState();\n    }\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this._position == 'center' && this.origin != null) {\n            this._position = this._computePositionFromOrigin(this.origin);\n        }\n    }\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._translateTabComplete.complete();\n    }\n    _onTranslateTabStarted(event) {\n        const isCentering = this._isCenterPosition(event.toState);\n        this._beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    }\n    /** The text direction of the containing app. */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the provided position state is considered center, regardless of origin. */\n    _isCenterPosition(position) {\n        return (position == 'center' || position == 'left-origin-center' || position == 'right-origin-center');\n    }\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\n        if (this._positionIndex < 0) {\n            this._position = dir == 'ltr' ? 'left' : 'right';\n        }\n        else if (this._positionIndex > 0) {\n            this._position = dir == 'ltr' ? 'right' : 'left';\n        }\n        else {\n            this._position = 'center';\n        }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    _computePositionFromOrigin(origin) {\n        const dir = this._getLayoutDirection();\n        if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n            return 'left-origin-center';\n        }\n        return 'right-origin-center';\n    }\n}\n_MatTabBodyBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabBodyBase, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatTabBodyBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTabBodyBase, inputs: { _content: [\"content\", \"_content\"], origin: \"origin\", animationDuration: \"animationDuration\", position: \"position\" }, outputs: { _onCentering: \"_onCentering\", _beforeCentering: \"_beforeCentering\", _afterLeavingCenter: \"_afterLeavingCenter\", _onCentered: \"_onCentered\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabBodyBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { _onCentering: [{\n                type: Output\n            }], _beforeCentering: [{\n                type: Output\n            }], _afterLeavingCenter: [{\n                type: Output\n            }], _onCentered: [{\n                type: Output\n            }], _content: [{\n                type: Input,\n                args: ['content']\n            }], origin: [{\n                type: Input\n            }], animationDuration: [{\n                type: Input\n            }], position: [{\n                type: Input\n            }] } });\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\nclass MatTabBody extends _MatTabBodyBase {\n    constructor(elementRef, dir, changeDetectorRef) {\n        super(elementRef, dir, changeDetectorRef);\n    }\n}\nMatTabBody.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabBody, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatTabBody.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabBody, selector: \"mat-tab-body\", host: { classAttribute: \"mat-tab-body\" }, viewQueries: [{ propertyName: \"_portalHost\", first: true, predicate: CdkPortalOutlet, descendants: true }], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"\\n     cdkScrollable>\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\", styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}.mat-tab-body-content[style*=\\\"visibility: hidden\\\"]{display:none}\\n\"], directives: [{ type: MatTabBodyPortal, selector: \"[matTabBodyHost]\" }], animations: [matTabsAnimations.translateTab], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabBody, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tab-body', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matTabsAnimations.translateTab], host: {\n                        'class': 'mat-tab-body',\n                    }, template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"\\n     cdkScrollable>\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\", styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}.mat-tab-body-content[style*=\\\"visibility: hidden\\\"]{display:none}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { _portalHost: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options the tabs module. */\nconst MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nconst _MatTabLabelWrapperBase = mixinDisabled(class {\n});\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\nclass MatTabLabelWrapper extends _MatTabLabelWrapperBase {\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n    /** Sets focus on the wrapper element */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    getOffsetLeft() {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n    getOffsetWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\nMatTabLabelWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabLabelWrapper, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatTabLabelWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabLabelWrapper, selector: \"[matTabLabelWrapper]\", inputs: { disabled: \"disabled\" }, host: { properties: { \"class.mat-tab-disabled\": \"disabled\", \"attr.aria-disabled\": \"!!disabled\" } }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabLabelWrapper, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTabLabelWrapper]',\n                    inputs: ['disabled'],\n                    host: {\n                        '[class.mat-tab-disabled]': 'disabled',\n                        '[attr.aria-disabled]': '!!disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Config used to bind passive event listeners */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n    passive: true,\n});\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n */\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * @docs-private\n */\nclass MatPaginatedTabHeader {\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._animationMode = _animationMode;\n        /** The distance in pixels that the tab labels should be translated to the left. */\n        this._scrollDistance = 0;\n        /** Whether the header should scroll to the selected index after the view has been checked. */\n        this._selectedIndexChanged = false;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Whether the controls for pagination should be displayed */\n        this._showPaginationControls = false;\n        /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n        this._disableScrollAfter = true;\n        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n        this._disableScrollBefore = true;\n        /** Stream that will stop the automated scrolling. */\n        this._stopScrolling = new Subject();\n        /**\n         * Whether pagination should be disabled. This can be used to avoid unnecessary\n         * layout recalculations if it's known that pagination won't be required.\n         */\n        this.disablePagination = false;\n        this._selectedIndex = 0;\n        /** Event emitted when the option is selected. */\n        this.selectFocusedIndex = new EventEmitter();\n        /** Event emitted when a label is focused. */\n        this.indexFocused = new EventEmitter();\n        // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n        _ngZone.runOutsideAngular(() => {\n            fromEvent(_elementRef.nativeElement, 'mouseleave')\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(() => {\n                this._stopInterval();\n            });\n        });\n    }\n    /** The index of the active tab. */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value) {\n        value = coerceNumberProperty(value);\n        if (this._selectedIndex != value) {\n            this._selectedIndexChanged = true;\n            this._selectedIndex = value;\n            if (this._keyManager) {\n                this._keyManager.updateActiveItem(value);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        // We need to handle these events manually, because we want to bind passive event listeners.\n        fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._handlePaginatorPress('before');\n        });\n        fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._handlePaginatorPress('after');\n        });\n    }\n    ngAfterContentInit() {\n        const dirChange = this._dir ? this._dir.change : of('ltr');\n        const resize = this._viewportRuler.change(150);\n        const realign = () => {\n            this.updatePagination();\n            this._alignInkBarToSelectedTab();\n        };\n        this._keyManager = new FocusKeyManager(this._items)\n            .withHorizontalOrientation(this._getLayoutDirection())\n            .withHomeAndEnd()\n            .withWrap();\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        // Note that we use `onStable` instead of `requestAnimationFrame`, because the latter\n        // can hold up tests that are in a background tab.\n        this._ngZone.onStable.pipe(take(1)).subscribe(realign);\n        // On dir change or window resize, realign the ink bar and update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize, this._items.changes)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            // We need to defer this to give the browser some time to recalculate\n            // the element dimensions. The call has to be wrapped in `NgZone.run`,\n            // because the viewport change handler runs outside of Angular.\n            this._ngZone.run(() => {\n                Promise.resolve().then(() => {\n                    // Clamp the scroll distance, because it can change with the number of tabs.\n                    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), this._scrollDistance));\n                    realign();\n                });\n            });\n            this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n        });\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n            this.indexFocused.emit(newFocusIndex);\n            this._setTabFocus(newFocusIndex);\n        });\n    }\n    ngAfterContentChecked() {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._items.length) {\n            this.updatePagination();\n            this._tabLabelCount = this._items.length;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stopScrolling.complete();\n    }\n    /** Handles keyboard events on the header. */\n    _handleKeydown(event) {\n        // We don't handle any key bindings with a modifier key.\n        if (hasModifierKey(event)) {\n            return;\n        }\n        switch (event.keyCode) {\n            case ENTER:\n            case SPACE:\n                if (this.focusIndex !== this.selectedIndex) {\n                    this.selectFocusedIndex.emit(this.focusIndex);\n                    this._itemSelected(event);\n                }\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    _onContentChanges() {\n        const textContent = this._elementRef.nativeElement.textContent;\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in (see #14249).\n        if (textContent !== this._currentTextContent) {\n            this._currentTextContent = textContent || '';\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            this._ngZone.run(() => {\n                this.updatePagination();\n                this._alignInkBarToSelectedTab();\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    }\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : 0;\n    }\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value) {\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n            return;\n        }\n        this._keyManager.setActiveItem(value);\n    }\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    _isValidIndex(index) {\n        if (!this._items) {\n            return true;\n        }\n        const tab = this._items ? this._items.toArray()[index] : null;\n        return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    _setTabFocus(tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._items && this._items.length) {\n            this._items.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this._tabListContainer.nativeElement;\n            const dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n    /** The layout direction of the containing app. */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    _updateTabScrollPosition() {\n        if (this.disablePagination) {\n            return;\n        }\n        const scrollDistance = this.scrollDistance;\n        const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n        // and ripples will exceed the boundaries of the visible tab bar.\n        // See: https://github.com/angular/components/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n        // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n        if (this._platform.TRIDENT || this._platform.EDGE) {\n            this._tabListContainer.nativeElement.scrollLeft = 0;\n        }\n    }\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance() {\n        return this._scrollDistance;\n    }\n    set scrollDistance(value) {\n        this._scrollTo(value);\n    }\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollHeader(direction) {\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        const scrollAmount = ((direction == 'before' ? -1 : 1) * viewLength) / 3;\n        return this._scrollTo(this._scrollDistance + scrollAmount);\n    }\n    /** Handles click events on the pagination arrows. */\n    _handlePaginatorClick(direction) {\n        this._stopInterval();\n        this._scrollHeader(direction);\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _scrollToLabel(labelIndex) {\n        if (this.disablePagination) {\n            return;\n        }\n        const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        const { offsetLeft, offsetWidth } = selectedLabel.elementRef.nativeElement;\n        let labelBeforePos, labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = offsetLeft;\n            labelAfterPos = labelBeforePos + offsetWidth;\n        }\n        else {\n            labelAfterPos = this._tabListInner.nativeElement.offsetWidth - offsetLeft;\n            labelBeforePos = labelAfterPos - offsetWidth;\n        }\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkPaginationEnabled() {\n        if (this.disablePagination) {\n            this._showPaginationControls = false;\n        }\n        else {\n            const isEnabled = this._tabListInner.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n            if (!isEnabled) {\n                this.scrollDistance = 0;\n            }\n            if (isEnabled !== this._showPaginationControls) {\n                this._changeDetectorRef.markForCheck();\n            }\n            this._showPaginationControls = isEnabled;\n        }\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _checkScrollingControls() {\n        if (this.disablePagination) {\n            this._disableScrollAfter = this._disableScrollBefore = true;\n        }\n        else {\n            // Check if the pagination arrows should be activated.\n            this._disableScrollBefore = this.scrollDistance == 0;\n            this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    _getMaxScrollDistance() {\n        const lengthOfTabList = this._tabListInner.nativeElement.scrollWidth;\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return lengthOfTabList - viewLength || 0;\n    }\n    /** Tells the ink-bar to align itself to the current label wrapper */\n    _alignInkBarToSelectedTab() {\n        const selectedItem = this._items && this._items.length ? this._items.toArray()[this.selectedIndex] : null;\n        const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n        if (selectedLabelWrapper) {\n            this._inkBar.alignToElement(selectedLabelWrapper);\n        }\n        else {\n            this._inkBar.hide();\n        }\n    }\n    /** Stops the currently-running paginator interval.  */\n    _stopInterval() {\n        this._stopScrolling.next();\n    }\n    /**\n     * Handles the user pressing down on one of the paginators.\n     * Starts scrolling the header after a certain amount of time.\n     * @param direction In which direction the paginator should be scrolled.\n     */\n    _handlePaginatorPress(direction, mouseEvent) {\n        // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n        // null check the `button`, but we do it so we don't break tests that use fake events.\n        if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n            return;\n        }\n        // Avoid overlapping timers.\n        this._stopInterval();\n        // Start a timer after the delay and keep firing based on the interval.\n        timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n            // Keep the timer going until something tells it to stop or the component is destroyed.\n            .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n            .subscribe(() => {\n            const { maxScrollDistance, distance } = this._scrollHeader(direction);\n            // Stop the timer if we've reached the start or the end.\n            if (distance === 0 || distance >= maxScrollDistance) {\n                this._stopInterval();\n            }\n        });\n    }\n    /**\n     * Scrolls the header to a given position.\n     * @param position Position to which to scroll.\n     * @returns Information on the current scroll distance and the maximum.\n     */\n    _scrollTo(position) {\n        if (this.disablePagination) {\n            return { maxScrollDistance: 0, distance: 0 };\n        }\n        const maxScrollDistance = this._getMaxScrollDistance();\n        this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this._scrollDistanceChanged = true;\n        this._checkScrollingControls();\n        return { maxScrollDistance, distance: this._scrollDistance };\n    }\n}\nMatPaginatedTabHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatedTabHeader, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.ViewportRuler }, { token: i1.Directionality, optional: true }, { token: i0.NgZone }, { token: i3.Platform }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatPaginatedTabHeader.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatPaginatedTabHeader, inputs: { disablePagination: \"disablePagination\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatPaginatedTabHeader, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.ViewportRuler }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.NgZone }, { type: i3.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { disablePagination: [{\n                type: Input\n            }] } });\n\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * @docs-private\n */\nclass _MatTabHeaderBase extends MatPaginatedTabHeader {\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n    }\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() {\n        return this._disableRipple;\n    }\n    set disableRipple(value) {\n        this._disableRipple = coerceBooleanProperty(value);\n    }\n    _itemSelected(event) {\n        event.preventDefault();\n    }\n}\n_MatTabHeaderBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabHeaderBase, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.ViewportRuler }, { token: i1.Directionality, optional: true }, { token: i0.NgZone }, { token: i3.Platform }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatTabHeaderBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTabHeaderBase, inputs: { disableRipple: \"disableRipple\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabHeaderBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.ViewportRuler }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.NgZone }, { type: i3.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { disableRipple: [{\n                type: Input\n            }] } });\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\nclass MatTabHeader extends _MatTabHeaderBase {\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n    }\n}\nMatTabHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabHeader, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.ViewportRuler }, { token: i1.Directionality, optional: true }, { token: i0.NgZone }, { token: i3.Platform }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatTabHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabHeader, selector: \"mat-tab-header\", inputs: { selectedIndex: \"selectedIndex\" }, outputs: { selectFocusedIndex: \"selectFocusedIndex\", indexFocused: \"indexFocused\" }, host: { properties: { \"class.mat-tab-header-pagination-controls-enabled\": \"_showPaginationControls\", \"class.mat-tab-header-rtl\": \"_getLayoutDirection() == 'rtl'\" }, classAttribute: \"mat-tab-header\" }, queries: [{ propertyName: \"_items\", predicate: MatTabLabelWrapper }], viewQueries: [{ propertyName: \"_inkBar\", first: true, predicate: MatInkBar, descendants: true, static: true }, { propertyName: \"_tabListContainer\", first: true, predicate: [\"tabListContainer\"], descendants: true, static: true }, { propertyName: \"_tabList\", first: true, predicate: [\"tabList\"], descendants: true, static: true }, { propertyName: \"_tabListInner\", first: true, predicate: [\"tabListInner\"], descendants: true, static: true }, { propertyName: \"_nextPaginator\", first: true, predicate: [\"nextPaginator\"], descendants: true }, { propertyName: \"_previousPaginator\", first: true, predicate: [\"previousPaginator\"], descendants: true }], usesInheritance: true, ngImport: i0, template: \"<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     tabindex=\\\"-1\\\"\\n     [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     [disabled]=\\\"_disableScrollBefore || null\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\" #tabListInner>\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     [disabled]=\\\"_disableScrollAfter || null\\\"\\n     tabindex=\\\"-1\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\", styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none;box-sizing:content-box;background:none;border:none;outline:0;padding:0}.mat-tab-header-pagination::-moz-focus-inner{border:0}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"], directives: [{ type: i4.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i5.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }, { type: MatInkBar, selector: \"mat-ink-bar\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tab-header', inputs: ['selectedIndex'], outputs: ['selectFocusedIndex', 'indexFocused'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, host: {\n                        'class': 'mat-tab-header',\n                        '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                        '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                    }, template: \"<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     tabindex=\\\"-1\\\"\\n     [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     [disabled]=\\\"_disableScrollBefore || null\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\" #tabListInner>\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     [disabled]=\\\"_disableScrollAfter || null\\\"\\n     tabindex=\\\"-1\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\", styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none;box-sizing:content-box;background:none;border:none;outline:0;padding:0}.mat-tab-header-pagination::-moz-focus-inner{border:0}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.ViewportRuler }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.NgZone }, { type: i3.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _items: [{\n                type: ContentChildren,\n                args: [MatTabLabelWrapper, { descendants: false }]\n            }], _inkBar: [{\n                type: ViewChild,\n                args: [MatInkBar, { static: true }]\n            }], _tabListContainer: [{\n                type: ViewChild,\n                args: ['tabListContainer', { static: true }]\n            }], _tabList: [{\n                type: ViewChild,\n                args: ['tabList', { static: true }]\n            }], _tabListInner: [{\n                type: ViewChild,\n                args: ['tabListInner', { static: true }]\n            }], _nextPaginator: [{\n                type: ViewChild,\n                args: ['nextPaginator']\n            }], _previousPaginator: [{\n                type: ViewChild,\n                args: ['previousPaginator']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n/** A simple change event emitted on focus or selection changes. */\nclass MatTabChangeEvent {\n}\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}), 'primary');\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * @docs-private\n */\nclass _MatTabGroupBase extends _MatTabGroupMixinBase {\n    constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n        var _a;\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /** All of the tabs that belong to the group. */\n        this._tabs = new QueryList();\n        /** The tab index that should be selected after the content has been checked. */\n        this._indexToSelect = 0;\n        /** Index of the tab that was focused last. */\n        this._lastFocusedTabIndex = null;\n        /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n        this._tabBodyWrapperHeight = 0;\n        /** Subscription to tabs being added/removed. */\n        this._tabsSubscription = Subscription.EMPTY;\n        /** Subscription to changes in the tab labels. */\n        this._tabLabelSubscription = Subscription.EMPTY;\n        this._selectedIndex = null;\n        /** Position of the tab header. */\n        this.headerPosition = 'above';\n        /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n        this.selectedIndexChange = new EventEmitter();\n        /** Event emitted when focus has changed within a tab group. */\n        this.focusChange = new EventEmitter();\n        /** Event emitted when the body animation has completed */\n        this.animationDone = new EventEmitter();\n        /** Event emitted when the tab selection has changed. */\n        this.selectedTabChange = new EventEmitter(true);\n        this._groupId = nextId++;\n        this.animationDuration =\n            defaultConfig && defaultConfig.animationDuration ? defaultConfig.animationDuration : '500ms';\n        this.disablePagination =\n            defaultConfig && defaultConfig.disablePagination != null\n                ? defaultConfig.disablePagination\n                : false;\n        this.dynamicHeight =\n            defaultConfig && defaultConfig.dynamicHeight != null ? defaultConfig.dynamicHeight : false;\n        this.contentTabIndex = (_a = defaultConfig === null || defaultConfig === void 0 ? void 0 : defaultConfig.contentTabIndex) !== null && _a !== void 0 ? _a : null;\n    }\n    /** Whether the tab group should grow to the size of the active tab. */\n    get dynamicHeight() {\n        return this._dynamicHeight;\n    }\n    set dynamicHeight(value) {\n        this._dynamicHeight = coerceBooleanProperty(value);\n    }\n    /** The index of the active tab. */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value) {\n        this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\n    get animationDuration() {\n        return this._animationDuration;\n    }\n    set animationDuration(value) {\n        this._animationDuration = /^\\d+$/.test(value + '') ? value + 'ms' : value;\n    }\n    /**\n     * `tabindex` to be set on the inner element that wraps the tab content. Can be used for improved\n     * accessibility when the tab does not have focusable elements or if it has scrollable content.\n     * The `tabindex` will be removed automatically for inactive tabs.\n     * Read more at https://www.w3.org/TR/wai-aria-practices/examples/tabs/tabs-2/tabs.html\n     */\n    get contentTabIndex() {\n        return this._contentTabIndex;\n    }\n    set contentTabIndex(value) {\n        this._contentTabIndex = coerceNumberProperty(value, null);\n    }\n    /** Background color of the tab group. */\n    get backgroundColor() {\n        return this._backgroundColor;\n    }\n    set backgroundColor(value) {\n        const nativeElement = this._elementRef.nativeElement;\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            nativeElement.classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n                // Preserve the height so page doesn't scroll up during tab change.\n                // Fixes https://stackblitz.com/edit/mat-tabs-scroll-page-top-on-tab-change\n                const wrapper = this._tabBodyWrapper.nativeElement;\n                wrapper.style.minHeight = wrapper.clientHeight + 'px';\n            }\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this._tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                    // Clear the min-height, this was needed during tab change to avoid\n                    // unnecessary scrolling.\n                    this._tabBodyWrapper.nativeElement.style.minHeight = '';\n                }\n            });\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach((tab, index) => {\n            tab.position = index - indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this._lastFocusedTabIndex = null;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    ngAfterContentInit() {\n        this._subscribeToAllTabChanges();\n        this._subscribeToTabLabels();\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this._tabsSubscription = this._tabs.changes.subscribe(() => {\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this._tabs.toArray();\n                let selectedTab;\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this._indexToSelect = this._selectedIndex = i;\n                        this._lastFocusedTabIndex = null;\n                        selectedTab = tabs[i];\n                        break;\n                    }\n                }\n                // If we haven't found an active tab and a tab exists at the selected index, it means\n                // that the active tab was swapped out. Since this won't be picked up by the rendering\n                // loop in `ngAfterContentChecked`, we need to sync it up manually.\n                if (!selectedTab && tabs[indexToSelect]) {\n                    Promise.resolve().then(() => {\n                        tabs[indexToSelect].isActive = true;\n                        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n                    });\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Listens to changes in all of the tabs. */\n    _subscribeToAllTabChanges() {\n        // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n        // some that are inside of nested tab groups. We filter them out manually by checking that\n        // the closest group to the tab is the current one.\n        this._allTabs.changes.pipe(startWith(this._allTabs)).subscribe((tabs) => {\n            this._tabs.reset(tabs.filter(tab => {\n                return tab._closestTabGroup === this || !tab._closestTabGroup;\n            }));\n            this._tabs.notifyOnChanges();\n        });\n    }\n    ngOnDestroy() {\n        this._tabs.destroy();\n        this._tabsSubscription.unsubscribe();\n        this._tabLabelSubscription.unsubscribe();\n    }\n    /** Re-aligns the ink bar to the selected tab element. */\n    realignInkBar() {\n        if (this._tabHeader) {\n            this._tabHeader._alignInkBarToSelectedTab();\n        }\n    }\n    /**\n     * Recalculates the tab group's pagination dimensions.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        if (this._tabHeader) {\n            this._tabHeader.updatePagination();\n        }\n    }\n    /**\n     * Sets focus to a particular tab.\n     * @param index Index of the tab to be focused.\n     */\n    focusTab(index) {\n        const header = this._tabHeader;\n        if (header) {\n            header.focusIndex = index;\n        }\n    }\n    _focusChanged(index) {\n        this._lastFocusedTabIndex = index;\n        this.focusChange.emit(this._createChangeEvent(index));\n    }\n    _createChangeEvent(index) {\n        const event = new MatTabChangeEvent();\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    _subscribeToTabLabels() {\n        if (this._tabLabelSubscription) {\n            this._tabLabelSubscription.unsubscribe();\n        }\n        this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges)).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    _clampTabIndex(index) {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Math.max(NaN, 0) === NaN).\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /** Returns a unique id for each tab label element */\n    _getTabLabelId(i) {\n        return `mat-tab-label-${this._groupId}-${i}`;\n    }\n    /** Returns a unique id for each tab content element */\n    _getTabContentId(i) {\n        return `mat-tab-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    _setTabBodyWrapperHeight(tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = tabHeight + 'px';\n        }\n    }\n    /** Removes the height of the tab body wrapper. */\n    _removeTabBodyWrapperHeight() {\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        this._tabBodyWrapperHeight = wrapper.clientHeight;\n        wrapper.style.height = '';\n        this.animationDone.emit();\n    }\n    /** Handle click events, setting new selected index if appropriate. */\n    _handleClick(tab, tabHeader, index) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n    /** Retrieves the tabindex for the tab. */\n    _getTabIndex(tab, index) {\n        var _a;\n        if (tab.disabled) {\n            return null;\n        }\n        const targetIndex = (_a = this._lastFocusedTabIndex) !== null && _a !== void 0 ? _a : this.selectedIndex;\n        return index === targetIndex ? 0 : -1;\n    }\n    /** Callback for when the focused state of a tab has changed. */\n    _tabFocusChanged(focusOrigin, index) {\n        // Mouse/touch focus happens during the `mousedown`/`touchstart` phase which\n        // can cause the tab to be moved out from under the pointer, interrupting the\n        // click sequence (see #21898). We don't need to scroll the tab into view for\n        // such cases anyway, because it will be done when the tab becomes selected.\n        if (focusOrigin && focusOrigin !== 'mouse' && focusOrigin !== 'touch') {\n            this._tabHeader.focusIndex = index;\n        }\n    }\n}\n_MatTabGroupBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabGroupBase, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MAT_TABS_CONFIG, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatTabGroupBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTabGroupBase, inputs: { dynamicHeight: \"dynamicHeight\", selectedIndex: \"selectedIndex\", headerPosition: \"headerPosition\", animationDuration: \"animationDuration\", contentTabIndex: \"contentTabIndex\", disablePagination: \"disablePagination\", backgroundColor: \"backgroundColor\" }, outputs: { selectedIndexChange: \"selectedIndexChange\", focusChange: \"focusChange\", animationDone: \"animationDone\", selectedTabChange: \"selectedTabChange\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabGroupBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TABS_CONFIG]\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { dynamicHeight: [{\n                type: Input\n            }], selectedIndex: [{\n                type: Input\n            }], headerPosition: [{\n                type: Input\n            }], animationDuration: [{\n                type: Input\n            }], contentTabIndex: [{\n                type: Input\n            }], disablePagination: [{\n                type: Input\n            }], backgroundColor: [{\n                type: Input\n            }], selectedIndexChange: [{\n                type: Output\n            }], focusChange: [{\n                type: Output\n            }], animationDone: [{\n                type: Output\n            }], selectedTabChange: [{\n                type: Output\n            }] } });\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nclass MatTabGroup extends _MatTabGroupBase {\n    constructor(elementRef, changeDetectorRef, defaultConfig, animationMode) {\n        super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n    }\n}\nMatTabGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabGroup, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: MAT_TABS_CONFIG, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatTabGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabGroup, selector: \"mat-tab-group\", inputs: { color: \"color\", disableRipple: \"disableRipple\" }, host: { properties: { \"class.mat-tab-group-dynamic-height\": \"dynamicHeight\", \"class.mat-tab-group-inverted-header\": \"headerPosition === \\\"below\\\"\" }, classAttribute: \"mat-tab-group\" }, providers: [\n        {\n            provide: MAT_TAB_GROUP,\n            useExisting: MatTabGroup,\n        },\n    ], queries: [{ propertyName: \"_allTabs\", predicate: MatTab, descendants: true }], viewQueries: [{ propertyName: \"_tabBodyWrapper\", first: true, predicate: [\"tabBodyWrapper\"], descendants: true }, { propertyName: \"_tabHeader\", first: true, predicate: [\"tabHeader\"], descendants: true }], exportAs: [\"matTabGroup\"], usesInheritance: true, ngImport: i0, template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple\\n       cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex === i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex === i\\\"\\n       [ngClass]=\\\"tab.labelClass\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\"\\n       (cdkFocusChange)=\\\"_tabFocusChanged($event, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\" [ngIfElse]=\\\"tabTextLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.tabindex]=\\\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex === i\\\"\\n               [ngClass]=\\\"tab.bodyClass\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\", styles: [\".mat-tab-group{display:flex;flex-direction:column;max-width:100%}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;outline:0;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"], components: [{ type: MatTabHeader, selector: \"mat-tab-header\", inputs: [\"selectedIndex\"], outputs: [\"selectFocusedIndex\", \"indexFocused\"] }, { type: MatTabBody, selector: \"mat-tab-body\" }], directives: [{ type: i3$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: MatTabLabelWrapper, selector: \"[matTabLabelWrapper]\", inputs: [\"disabled\"] }, { type: i4.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i7.CdkMonitorFocus, selector: \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", outputs: [\"cdkFocusChange\"] }, { type: i3$1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i7$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabGroup, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tab-group', exportAs: 'matTabGroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, inputs: ['color', 'disableRipple'], providers: [\n                        {\n                            provide: MAT_TAB_GROUP,\n                            useExisting: MatTabGroup,\n                        },\n                    ], host: {\n                        'class': 'mat-tab-group',\n                        '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                        '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n                    }, template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple\\n       cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex === i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex === i\\\"\\n       [ngClass]=\\\"tab.labelClass\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\"\\n       (cdkFocusChange)=\\\"_tabFocusChanged($event, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\" [ngIfElse]=\\\"tabTextLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template #tabTextLabel>{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.tabindex]=\\\"(contentTabIndex != null && selectedIndex === i) ? contentTabIndex : null\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex === i\\\"\\n               [ngClass]=\\\"tab.bodyClass\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\", styles: [\".mat-tab-group{display:flex;flex-direction:column;max-width:100%}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;outline:0;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TABS_CONFIG]\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _allTabs: [{\n                type: ContentChildren,\n                args: [MatTab, { descendants: true }]\n            }], _tabBodyWrapper: [{\n                type: ViewChild,\n                args: ['tabBodyWrapper']\n            }], _tabHeader: [{\n                type: ViewChild,\n                args: ['tabHeader']\n            }] } });\n\n// Increasing integer for generating unique ids for tab nav components.\nlet nextUniqueId = 0;\n/**\n * Base class with all of the `MatTabNav` functionality.\n * @docs-private\n */\nclass _MatTabNavBase extends MatPaginatedTabHeader {\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n        /** Theme color of the nav bar. */\n        this.color = 'primary';\n    }\n    /** Background color of the tab nav. */\n    get backgroundColor() {\n        return this._backgroundColor;\n    }\n    set backgroundColor(value) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() {\n        return this._disableRipple;\n    }\n    set disableRipple(value) {\n        this._disableRipple = coerceBooleanProperty(value);\n    }\n    _itemSelected() {\n        // noop\n    }\n    ngAfterContentInit() {\n        // We need this to run before the `changes` subscription in parent to ensure that the\n        // selectedIndex is up-to-date by the time the super class starts looking for it.\n        this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            this.updateActiveLink();\n        });\n        super.ngAfterContentInit();\n    }\n    /** Notifies the component that the active link has been changed. */\n    updateActiveLink() {\n        if (!this._items) {\n            return;\n        }\n        const items = this._items.toArray();\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].active) {\n                this.selectedIndex = i;\n                this._changeDetectorRef.markForCheck();\n                if (this.tabPanel) {\n                    this.tabPanel._activeTabId = items[i].id;\n                }\n                return;\n            }\n        }\n        // The ink bar should hide itself if no items are active.\n        this.selectedIndex = -1;\n        this._inkBar.hide();\n    }\n    _getRole() {\n        return this.tabPanel ? 'tablist' : this._elementRef.nativeElement.getAttribute('role');\n    }\n}\n_MatTabNavBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabNavBase, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1$1.ViewportRuler }, { token: i3.Platform }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatTabNavBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTabNavBase, inputs: { backgroundColor: \"backgroundColor\", disableRipple: \"disableRipple\", color: \"color\", tabPanel: \"tabPanel\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabNavBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1$1.ViewportRuler }, { type: i3.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { backgroundColor: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], tabPanel: [{\n                type: Input\n            }] } });\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nclass MatTabNav extends _MatTabNavBase {\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) {\n        super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n    }\n}\nMatTabNav.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabNav, deps: [{ token: i0.ElementRef }, { token: i1.Directionality, optional: true }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1$1.ViewportRuler }, { token: i3.Platform }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatTabNav.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabNav, selector: \"[mat-tab-nav-bar]\", inputs: { color: \"color\" }, host: { properties: { \"attr.role\": \"_getRole()\", \"class.mat-tab-header-pagination-controls-enabled\": \"_showPaginationControls\", \"class.mat-tab-header-rtl\": \"_getLayoutDirection() == 'rtl'\", \"class.mat-primary\": \"color !== \\\"warn\\\" && color !== \\\"accent\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\" }, classAttribute: \"mat-tab-nav-bar mat-tab-header\" }, queries: [{ propertyName: \"_items\", predicate: i0.forwardRef(function () { return MatTabLink; }), descendants: true }], viewQueries: [{ propertyName: \"_inkBar\", first: true, predicate: MatInkBar, descendants: true, static: true }, { propertyName: \"_tabListContainer\", first: true, predicate: [\"tabListContainer\"], descendants: true, static: true }, { propertyName: \"_tabList\", first: true, predicate: [\"tabList\"], descendants: true, static: true }, { propertyName: \"_tabListInner\", first: true, predicate: [\"tabListInner\"], descendants: true, static: true }, { propertyName: \"_nextPaginator\", first: true, predicate: [\"nextPaginator\"], descendants: true }, { propertyName: \"_previousPaginator\", first: true, predicate: [\"previousPaginator\"], descendants: true }], exportAs: [\"matTabNavBar\", \"matTabNav\"], usesInheritance: true, ngImport: i0, template: \"<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     tabindex=\\\"-1\\\"\\n     [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     [disabled]=\\\"_disableScrollBefore || null\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\\n<div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    #tabList\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-links\\\" #tabListInner>\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     [disabled]=\\\"_disableScrollAfter || null\\\"\\n     tabindex=\\\"-1\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\", styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none;box-sizing:content-box;background:none;border:none;outline:0;padding:0}.mat-tab-header-pagination::-moz-focus-inner{border:0}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"], directives: [{ type: i4.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i5.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }, { type: MatInkBar, selector: \"mat-ink-bar\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabNav, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-tab-nav-bar]', exportAs: 'matTabNavBar, matTabNav', inputs: ['color'], host: {\n                        '[attr.role]': '_getRole()',\n                        'class': 'mat-tab-nav-bar mat-tab-header',\n                        '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                        '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                        '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, template: \"<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     tabindex=\\\"-1\\\"\\n     [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     [disabled]=\\\"_disableScrollBefore || null\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\\n<div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    #tabList\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-links\\\" #tabListInner>\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<button class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     type=\\\"button\\\"\\n     mat-ripple\\n     [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     [disabled]=\\\"_disableScrollAfter || null\\\"\\n     tabindex=\\\"-1\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</button>\\n\", styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none;box-sizing:content-box;background:none;border:none;outline:0;padding:0}.mat-tab-header-pagination::-moz-focus-inner{border:0}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1$1.ViewportRuler }, { type: i3.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _items: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatTabLink), { descendants: true }]\n            }], _inkBar: [{\n                type: ViewChild,\n                args: [MatInkBar, { static: true }]\n            }], _tabListContainer: [{\n                type: ViewChild,\n                args: ['tabListContainer', { static: true }]\n            }], _tabList: [{\n                type: ViewChild,\n                args: ['tabList', { static: true }]\n            }], _tabListInner: [{\n                type: ViewChild,\n                args: ['tabListInner', { static: true }]\n            }], _nextPaginator: [{\n                type: ViewChild,\n                args: ['nextPaginator']\n            }], _previousPaginator: [{\n                type: ViewChild,\n                args: ['previousPaginator']\n            }] } });\n// Boilerplate for applying mixins to MatTabLink.\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(class {\n})));\n/** Base class with all of the `MatTabLink` functionality. */\nclass _MatTabLinkBase extends _MatTabLinkMixinBase {\n    constructor(_tabNavBar, \n    /** @docs-private */ elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\n        super();\n        this._tabNavBar = _tabNavBar;\n        this.elementRef = elementRef;\n        this._focusMonitor = _focusMonitor;\n        /** Whether the tab link is active or not. */\n        this._isActive = false;\n        /** Unique id for the tab. */\n        this.id = `mat-tab-link-${nextUniqueId++}`;\n        this.rippleConfig = globalRippleOptions || {};\n        this.tabIndex = parseInt(tabIndex) || 0;\n        if (animationMode === 'NoopAnimations') {\n            this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };\n        }\n    }\n    /** Whether the link is active. */\n    get active() {\n        return this._isActive;\n    }\n    set active(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._isActive) {\n            this._isActive = newValue;\n            this._tabNavBar.updateActiveLink();\n        }\n    }\n    /**\n     * Whether ripples are disabled on interaction.\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return (this.disabled ||\n            this.disableRipple ||\n            this._tabNavBar.disableRipple ||\n            !!this.rippleConfig.disabled);\n    }\n    /** Focuses the tab link. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this.elementRef);\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef);\n    }\n    _handleFocus() {\n        // Since we allow navigation through tabbing in the nav bar, we\n        // have to update the focused index whenever the link receives focus.\n        this._tabNavBar.focusIndex = this._tabNavBar._items.toArray().indexOf(this);\n    }\n    _handleKeydown(event) {\n        if (this._tabNavBar.tabPanel && event.keyCode === SPACE) {\n            this.elementRef.nativeElement.click();\n        }\n    }\n    _getAriaControls() {\n        var _a;\n        return this._tabNavBar.tabPanel\n            ? (_a = this._tabNavBar.tabPanel) === null || _a === void 0 ? void 0 : _a.id\n            : this.elementRef.nativeElement.getAttribute('aria-controls');\n    }\n    _getAriaSelected() {\n        if (this._tabNavBar.tabPanel) {\n            return this.active ? 'true' : 'false';\n        }\n        else {\n            return this.elementRef.nativeElement.getAttribute('aria-selected');\n        }\n    }\n    _getAriaCurrent() {\n        return this.active && !this._tabNavBar.tabPanel ? 'page' : null;\n    }\n    _getRole() {\n        return this._tabNavBar.tabPanel ? 'tab' : this.elementRef.nativeElement.getAttribute('role');\n    }\n    _getTabIndex() {\n        if (this._tabNavBar.tabPanel) {\n            return this._isActive ? 0 : -1;\n        }\n        else {\n            return this.tabIndex;\n        }\n    }\n}\n_MatTabLinkBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabLinkBase, deps: [{ token: _MatTabNavBase }, { token: i0.ElementRef }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: 'tabindex', attribute: true }, { token: i7.FocusMonitor }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatTabLinkBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTabLinkBase, inputs: { active: \"active\", id: \"id\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTabLinkBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: _MatTabNavBase }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: i7.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { active: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }] } });\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nclass MatTabLink extends _MatTabLinkBase {\n    constructor(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {\n        super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n        this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n        this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._tabLinkRipple._removeTriggerEvents();\n    }\n}\nMatTabLink.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabLink, deps: [{ token: MatTabNav }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i3.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: 'tabindex', attribute: true }, { token: i7.FocusMonitor }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTabLink.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabLink, selector: \"[mat-tab-link], [matTabLink]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { listeners: { \"focus\": \"_handleFocus()\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-controls\": \"_getAriaControls()\", \"attr.aria-current\": \"_getAriaCurrent()\", \"attr.aria-disabled\": \"disabled\", \"attr.aria-selected\": \"_getAriaSelected()\", \"attr.id\": \"id\", \"attr.tabIndex\": \"_getTabIndex()\", \"attr.role\": \"_getRole()\", \"class.mat-tab-disabled\": \"disabled\", \"class.mat-tab-label-active\": \"active\" }, classAttribute: \"mat-tab-link mat-focus-indicator\" }, exportAs: [\"matTabLink\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabLink, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-tab-link], [matTabLink]',\n                    exportAs: 'matTabLink',\n                    inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                    host: {\n                        'class': 'mat-tab-link mat-focus-indicator',\n                        '[attr.aria-controls]': '_getAriaControls()',\n                        '[attr.aria-current]': '_getAriaCurrent()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.aria-selected]': '_getAriaSelected()',\n                        '[attr.id]': 'id',\n                        '[attr.tabIndex]': '_getTabIndex()',\n                        '[attr.role]': '_getRole()',\n                        '[class.mat-tab-disabled]': 'disabled',\n                        '[class.mat-tab-label-active]': 'active',\n                        '(focus)': '_handleFocus()',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: MatTabNav }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: i7.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Tab panel component associated with MatTabNav.\n */\nclass MatTabNavPanel {\n    constructor() {\n        /** Unique id for the tab panel. */\n        this.id = `mat-tab-nav-panel-${nextUniqueId++}`;\n    }\n}\nMatTabNavPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabNavPanel, deps: [], target: i0.ɵɵFactoryTarget.Component });\nMatTabNavPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTabNavPanel, selector: \"mat-tab-nav-panel\", inputs: { id: \"id\" }, host: { attributes: { \"role\": \"tabpanel\" }, properties: { \"attr.aria-labelledby\": \"_activeTabId\", \"attr.id\": \"id\" }, classAttribute: \"mat-tab-nav-panel\" }, exportAs: [\"matTabNavPanel\"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabNavPanel, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-tab-nav-panel',\n                    exportAs: 'matTabNavPanel',\n                    template: '<ng-content></ng-content>',\n                    host: {\n                        '[attr.aria-labelledby]': '_activeTabId',\n                        '[attr.id]': 'id',\n                        'class': 'mat-tab-nav-panel',\n                        'role': 'tabpanel',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTabsModule {\n}\nMatTabsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTabsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabsModule, declarations: [MatTabGroup,\n        MatTabLabel,\n        MatTab,\n        MatInkBar,\n        MatTabLabelWrapper,\n        MatTabNav,\n        MatTabNavPanel,\n        MatTabLink,\n        MatTabBody,\n        MatTabBodyPortal,\n        MatTabHeader,\n        MatTabContent], imports: [CommonModule,\n        MatCommonModule,\n        PortalModule,\n        MatRippleModule,\n        ObserversModule,\n        A11yModule], exports: [MatCommonModule,\n        MatTabGroup,\n        MatTabLabel,\n        MatTab,\n        MatTabNav,\n        MatTabNavPanel,\n        MatTabLink,\n        MatTabContent] });\nMatTabsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabsModule, imports: [[\n            CommonModule,\n            MatCommonModule,\n            PortalModule,\n            MatRippleModule,\n            ObserversModule,\n            A11yModule,\n        ], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTabsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        MatCommonModule,\n                        PortalModule,\n                        MatRippleModule,\n                        ObserversModule,\n                        A11yModule,\n                    ],\n                    // Don't export all components because some are only to be used internally.\n                    exports: [\n                        MatCommonModule,\n                        MatTabGroup,\n                        MatTabLabel,\n                        MatTab,\n                        MatTabNav,\n                        MatTabNavPanel,\n                        MatTabLink,\n                        MatTabContent,\n                    ],\n                    declarations: [\n                        MatTabGroup,\n                        MatTabLabel,\n                        MatTab,\n                        MatInkBar,\n                        MatTabLabelWrapper,\n                        MatTabNav,\n                        MatTabNavPanel,\n                        MatTabLink,\n                        MatTabBody,\n                        MatTabBodyPortal,\n                        MatTabHeader,\n                        MatTabContent,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TAB, MAT_TABS_CONFIG, MAT_TAB_GROUP, MatInkBar, MatTab, MatTabBody, MatTabBodyPortal, MatTabChangeEvent, MatTabContent, MatTabGroup, MatTabHeader, MatTabLabel, MatTabLabelWrapper, MatTabLink, MatTabNav, MatTabNavPanel, MatTabsModule, _MAT_INK_BAR_POSITIONER, _MatTabBodyBase, _MatTabGroupBase, _MatTabHeaderBase, _MatTabLinkBase, _MatTabNavBase, matTabsAnimations };\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, 'catering').toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Calendar } from '@placeos/calendar';\n\nimport {\n    CateringItem,\n    CateringOrder,\n    CateringStateService,\n} from '@placeos/catering';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport { CalendarEvent, updateEvent } from '@placeos/events';\nimport { first, map } from 'rxjs/operators';\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: 'checkin-preferences',\n    template: `\n        <div\n            class=\"bg-white rounded shadow overflow-hidden relative flex flex-col items-center my-4 p-4 mx-auto\"\n        >\n            <h3 class=\"text-xl mb-2 w-full\">Would you like a drink?</h3>\n            <div class=\"w-full\">\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <mat-select\n                        [(ngModel)]=\"beverage\"\n                        placeholder=\"Select beverage\"\n                    >\n                        <mat-option\n                            *ngFor=\"let item of menu | async\"\n                            [value]=\"item\"\n                        >\n                            {{ item.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <button mat-button class=\"w-32\" (click)=\"update()\">\n                {{ beverage ? 'Update' : 'Continue' }}\n            </button>\n            <a\n                mat-icon-button\n                class=\"absolute top-0 right-0\"\n                [routerLink]=\"['/welcome']\"\n            >\n                <app-icon>close</app-icon>\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CheckinPreferencesComponent {\n    public beverage: CateringItem;\n\n    public readonly menu = this._catering.menu.pipe(\n        map((l) => {\n            return l.filter((_) =>\n                _.tags.find((_) => _.toLowerCase() === 'drink')\n            );\n        })\n    );\n\n    constructor(\n        private _router: Router,\n        private _checkin: CheckinStateService,\n        private _catering: CateringStateService\n    ) {}\n\n    public async update() {\n        if (!this.beverage) return this.next();\n        const event = await this._checkin.event\n            .pipe(first((_) => !!_))\n            .toPromise();\n        if (!event) return notifyError('Unable to load event data.');\n        const order =\n            (event.ext('catering') ? event.ext('catering')[0] : null) ||\n            new CateringOrder();\n        await updateEvent(\n            event.id,\n            new CalendarEvent({\n                ...event,\n                extension_data: {\n                    ...event.extension_data,\n                    catering: [\n                        ...(event.extension_data.catering?.filter(\n                            (_) => _.id !== order.id\n                        ) || []),\n                        new CateringOrder({\n                            ...order,\n                            items: [\n                                ...order.items,\n                                new CateringItem({\n                                    ...this.beverage,\n                                    quantity: 1,\n                                }),\n                            ],\n                        }),\n                    ],\n                },\n            })\n        ).toPromise();\n        notifySuccess('Successfully update event.');\n        this.next();\n    }\n\n    public next() {\n        this._router.navigate(['/welcome']);\n    }\n}\n","export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        return QrScanner.listCameras(false)\n            .then(cameras => !!cameras.length)\n            .catch(() => false);\n    }\n\n    /* async */\n    static listCameras(requestLabels = false) {\n        if (!navigator.mediaDevices) return Promise.resolve([]);\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, ask for camera permission by opening a stream, if\n        // labels were requested.\n        let openedStream = null;\n        return (requestLabels\n            ? navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n                .then(stream => openedStream = stream)\n                // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in\n                // use and some browsers disallow a second stream.\n                .catch(() => {})\n            : Promise.resolve()\n        )\n            .then(() => navigator.mediaDevices.enumerateDevices())\n            .then(devices => devices.filter(device => device.kind === 'videoinput').map((device, i) => ({\n                id: device.deviceId,\n                label: device.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            })))\n            .finally(() => {\n                // close the stream we just opened for getting camera access for listing the device labels\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    constructor(\n        video,\n        onDecode,\n        canvasSizeOrOnDecodeError = this._onDecodeError,\n        canvasSizeOrCalculateScanRegion = this._calculateScanRegion,\n        preferredCamera = 'environment'\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._legacyCanvasSize = QrScanner.DEFAULT_CANVAS_SIZE;\n        this._preferredCamera = preferredCamera;\n        this._active = false;\n        this._paused = false;\n        this._flashOn = false;\n\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\n            // legacy function signature where the third argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrOnDecodeError;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._onDecodeError = canvasSizeOrOnDecodeError;\n        }\n\n        if (typeof canvasSizeOrCalculateScanRegion === 'number') {\n            // legacy function signature where the fourth argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrCalculateScanRegion;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._calculateScanRegion = canvasSizeOrCalculateScanRegion;\n        }\n\n        this._scanRegion = this._calculateScanRegion(video);\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const computedStyle = window.getComputedStyle(video);\n            if (computedStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (computedStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = 0;\n                video.style.width = 0;\n                video.style.height = 0;\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    /* async */\n    hasFlash() {\n        let openedStream = null;\n        return (this.$video.srcObject\n            ? Promise.resolve(this.$video.srcObject.getVideoTracks()[0])\n            : this._getCameraStream().then(({ stream }) => {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                openedStream = stream;\n                return stream.getVideoTracks()[0];\n            })\n        )\n            .then((track) => 'torch' in track.getSettings())\n            .catch(() => false)\n            .finally(() => {\n                // close the stream we just opened for detecting whether it supports flash\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    isFlashOn() {\n      return this._flashOn;\n    }\n\n    /* async */\n    toggleFlash() {\n        if (this._flashOn) {\n            return this.turnFlashOff();\n        } else {\n            return this.turnFlashOn();\n        }\n    }\n\n    /* async */\n    turnFlashOn() {\n        if (this._flashOn) return Promise.resolve();\n        this._flashOn = true;\n        if (!this._active || this._paused) return Promise.resolve(); // flash will be turned on later on .start()\n        return this.hasFlash().then((hasFlash) => {\n            if (!hasFlash) return Promise.reject('No flash available');\n            // Note that the video track is guaranteed to exist at this point\n            return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n                advanced: [{ torch: true }],\n            });\n        }).catch(() => {\n            this._flashOn = false;\n            throw e;\n        });\n    }\n\n    /* async */\n    turnFlashOff() {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        return this._restartVideoStream();\n    }\n\n    destroy() {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        return this._getCameraStream()\n            .then(({ stream, facingMode }) => {\n                this.$video.srcObject = stream;\n                this.$video.play();\n                this._setVideoMirror(facingMode);\n\n                // Restart the flash if it was previously on\n                if (this._flashOn) {\n                    this._flashOn = false; // force turnFlashOn to restart the flash\n                    this.turnFlashOn().catch(() => {});\n                }\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    /* async */\n    pause(stopStreamImmediately = false) {\n        this._paused = true;\n        if (!this._active) {\n            return Promise.resolve(true);\n        }\n        this.$video.pause();\n\n        const stopStream = () => {\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n            for (const track of tracks) {\n                track.stop(); //  note that this will also automatically turn the flashlight off\n                this.$video.srcObject.removeTrack(track);\n            }\n            this.$video.srcObject = null;\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return Promise.resolve(true);\n        }\n\n        return new Promise((resolve) => setTimeout(resolve, 300))\n            .then(() => {\n                if (!this._paused) return false;\n                stopStream();\n                return true;\n            });\n    }\n\n    /* async */\n    setCamera(facingModeOrDeviceId) {\n        if (facingModeOrDeviceId === this._preferredCamera) return Promise.resolve();\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        return this._restartVideoStream();\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, scanRegion=null, qrEngine=null, canvas=null, disallowCanvasResizing=false,\n                     alsoTryWithoutScanRegion=false) {\n        const gotExternalWorker = qrEngine instanceof Worker;\n\n        let promise = Promise.all([\n            qrEngine || QrScanner.createQrEngine(),\n            QrScanner._loadImage(imageOrFileOrUrl),\n        ]).then(([engine, image]) => {\n            qrEngine = engine;\n            let canvasContext;\n            [canvas, canvasContext] = this._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n\n            if (qrEngine instanceof Worker) {\n                if (!gotExternalWorker) {\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n                    qrEngine.postMessage({ type: 'inversionMode', data: 'both' });\n                }\n                return new Promise((resolve, reject) => {\n                    let timeout, onMessage, onError;\n                    onMessage = event => {\n                        if (event.data.type !== 'qrResult') {\n                            return;\n                        }\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve(event.data.data);\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (e) => {\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngine.addEventListener('message', onMessage);\n                    qrEngine.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n                    qrEngine.postMessage({\n                        type: 'decode',\n                        data: imageData\n                    }, [imageData.data.buffer]);\n                });\n            } else {\n                return new Promise((resolve, reject) => {\n                    const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\n                    qrEngine.detect(canvas).then(scanResults => {\n                        if (!scanResults.length) {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        } else {\n                            resolve(scanResults[0].rawValue);\n                        }\n                    }).catch((e) => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\n                });\n            }\n        });\n\n        if (scanRegion && alsoTryWithoutScanRegion) {\n            promise = promise.catch(() =>\n                QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, disallowCanvasResizing));\n        }\n\n        promise = promise.finally(() => {\n            if (gotExternalWorker) return;\n            QrScanner._postWorkerMessage(qrEngine, 'close');\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\n        // well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\n        // and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    /* async */\n    static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\n        return ('BarcodeDetector' in window && BarcodeDetector.getSupportedFormats\n            ? BarcodeDetector.getSupportedFormats()\n            : Promise.resolve([])\n        )\n            .then((supportedFormats) => supportedFormats.indexOf('qr_code') !== -1\n                ? new BarcodeDetector({ formats: ['qr_code'] })\n                : new Worker(workerPath)\n            );\n    }\n\n    _onPlay() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._scanFrame();\n    }\n\n    _onLoadedMetaData() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _calculateScanRegion(video) {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n            this._qrEnginePromise\n                .then((qrEngine) => QrScanner.scanImage(this.$video, this._scanRegion, qrEngine, this.$canvas))\n                .then(this._onDecode, (error) => {\n                    if (!this._active) return;\n                    const errorMessage = error.message || error;\n                    if (errorMessage.indexOf('service unavailable') !== -1) {\n                        // When the native BarcodeDetector crashed, create a new one\n                        this._qrEnginePromise = QrScanner.createQrEngine();\n                    }\n                    this._onDecodeError(error);\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _onDecodeError(error) {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    /* async */\n    _getCameraStream() {\n        if (!navigator.mediaDevices) {\n            return Promise.reject('Camera not found.');\n        }\n\n        const preferenceType = this._preferredCamera === 'environment' || this._preferredCamera === 'user'\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        // First try constraints with camera, then without camera. Using reduceRight as the Promise is build in a\n        // bottom up fashion.\n        return [...constraintsWithCamera, ...constraintsWithoutCamera].reduceRight((fallback, constraint) =>\n            () => navigator.mediaDevices.getUserMedia({ video: constraint, audio: false })\n                .then((stream) => ({\n                    stream,\n                    // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                    // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                    // mode, even for exact facingMode constraints.\n                    facingMode: this._getFacingMode(stream)\n                        || (constraint.facingMode\n                            ? this._preferredCamera // _preferredCamera is a facing mode and we are able to fulfill it\n                            : (this._preferredCamera === 'environment'\n                                ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                                : 'environment' // switch from unfulfilled user facingMode or default to environment\n                            )\n                        ),\n                }))\n                .catch(fallback),\n            () => Promise.reject('Camera not found.')\n        )();\n    }\n\n    /* async */\n    _restartVideoStream() {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        return this.pause(true).then((paused) => {\n            if (!paused || wasPaused || !this._active) return;\n            return this.start();\n        });\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    _getFacingMode(videoStream) {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    static _drawToCanvas(image, scanRegion=null, canvas=null, disallowCanvasResizing=false) {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width? scanRegion.width : image.width || image.videoWidth;\n        const scanRegionHeight = scanRegion && scanRegion.height? scanRegion.height : image.height || image.videoHeight;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height\n        );\n        return [canvas, context];\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrBlobOrUrl) {\n        if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof(imageOrFileOrBlobOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n\n    /* async */\n    static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\n        return Promise.resolve(qrEngineOrQrEnginePromise).then((qrEngine) => {\n            if (!(qrEngine instanceof Worker)) return;\n            qrEngine.postMessage({ type, data });\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n","import {\n    Component,\n    ElementRef,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { notifyError } from '@placeos/common';\nimport QrScanner from 'qr-scanner';\n\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: '[checkin-qr-scan]',\n    template: `\n        <div\n            class=\"bg-white rounded shadow overflow-hidden relative flex flex-col items-center\"\n        >\n            <p class=\"mt-6 mb-4\">\n                Please enter your email address or scan your QR code\n            </p>\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    [(ngModel)]=\"email\"\n                    placeholder=\"Enter email...\"\n                    type=\"email\"\n                    autocomplete=\"off\"\n                    (blur)=\"checkEmail(email)\"\n                    (keyup.enter)=\"checkEmail(email)\"\n                />\n                <mat-error>Invalid email format</mat-error>\n            </mat-form-field>\n            <video\n                #video\n                class=\"rounded m-4 bg-gray-200 border border-gray-500\"\n                id=\"qr-stream\"\n                playsinline\n                width=\"640\"\n                height=\"480\"\n                autoplay\n            ></video>\n            <a\n                mat-icon-button\n                class=\"absolute top-0 right-0\"\n                [routerLink]=\"['/welcome']\"\n            >\n                <app-icon>close</app-icon>\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n                height: 100%;\n                width: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n            }\n\n            video {\n                width: 36rem;\n                height: 27rem;\n            }\n\n            mat-form-field {\n                width: 36rem;\n            }\n\n            a {\n                position: absolute;\n            }\n        `,\n    ],\n})\nexport class CheckinQRScanComponent implements OnInit, OnDestroy {\n    /** Email address of the visitor */\n    public email: string;\n    /** Video element to emit camera feed */\n    @ViewChild('video', { static: true })\n    private _video_el: ElementRef<HTMLVideoElement>;\n    /** QR Reader */\n    private _reader;\n\n    constructor(\n        private _checkin: CheckinStateService,\n        private _router: Router\n    ) {}\n\n    public ngOnInit() {\n        this.setupQRReader();\n    }\n\n    public ngOnDestroy() {\n        if (this._video_el.nativeElement.srcObject) {\n            (this._video_el.nativeElement.srcObject as any)\n                .getTracks()\n                .forEach((track) => track?.stop());\n        }\n        this._reader?.stop();\n    }\n\n    public async checkQRCode(raw_text: string) {\n        const chunks = raw_text.split(',');\n        if (chunks.length !== 2) {\n            notifyError('Invalid QRCode');\n            this.setupQRReader();\n            return;\n        } else {\n            await this._checkin\n                .loadGuestAndEvent(chunks[0], chunks[1])\n                .catch((err) => {\n                    this.handleError(err.message || err);\n                    throw err;\n                });\n            this._router.navigate(['/checkin', 'details']);\n        }\n    }\n\n    public async checkEmail(email: string) {\n        if (!email || !email.includes('@') || email.length < 5) return;\n        await this._checkin.loadGuestAndEvent(email).catch((err) => {\n            this.handleError(err.message || err);\n            throw err;\n        });\n        this._router.navigate(['/checkin', 'details']);\n    }\n\n    private setupQRReader() {\n        if (navigator.mediaDevices?.getUserMedia) {\n            navigator.mediaDevices\n                .getUserMedia({ video: true })\n                .then(\n                    (stream) =>\n                        (this._video_el.nativeElement.srcObject = stream)\n                )\n                .catch((e) =>\n                    console.error('Unable to fetch media devices!', e)\n                );\n        }\n        if (!QrScanner) return;\n        this._reader = new QrScanner(this._video_el.nativeElement, (r) =>\n            this.checkQRCode(r)\n        );\n        this._reader.start();\n    }\n\n    private handleError(message: any) {\n        console.error(message);\n        this._checkin.setError(message?.statusText || message);\n        this._router.navigate(['/checkin', 'error']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: 'checkin-results',\n    template: `\n        <div\n            class=\"bg-white rounded shadow overflow-hidden relative flex flex-col items-center my-4 p-4 mx-auto space-y-4\"\n            *ngIf=\"event | async\"\n        >\n            <h3 class=\"text-xl\">You are checked in!</h3>\n            <p class=\"text-center\">\n                Welcome, you have a meeting at\n                {{ (event | async)?.date || '' | date: 'shortDate' }}\n                with {{ (event | async).organiser?.name || '' }}.<br />\n                {{ (event | async).organiser?.name || '' }} has been notified\n                and will be with you shortly.&nbsp;\n            </p>\n            <p *ngIf=\"!(event | async)?.can_access_lift\">\n                Please wait in the lobby.\n            </p>\n            <p *ngIf=\"(event | async)?.can_access_lift\">\n                Please use the vistor access lift over there.\n            </p>\n            <a\n                button\n                mat-button\n                class=\"w-32\"\n                [routerLink]=\"['/checkin', 'preferences']\"\n            >\n                Done\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: rgba(0, 0, 0, 0.5);\n            }\n\n            :host > div {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CheckinResultsComponent implements OnInit {\n    public readonly event = this._checkin.event;\n    public readonly guest = this._checkin.guest;\n\n    constructor(\n        private _checkin: CheckinStateService,\n        private _router: Router\n    ) {}\n\n    public ngOnInit(): void {\n        this.event.pipe(first()).subscribe((_) => (!_ ? this.previous() : ''));\n    }\n\n    public previous(): void {\n        this._router.navigate(['/checkin']);\n    }\n}\n","import { Component } from '@angular/core';\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: 'checkin-error',\n    template: `\n        <div\n            class=\"bg-white rounded shadow overflow-hidden relative flex flex-col items-center my-4 mx-auto p-4\"\n        >\n            <h3 class=\"text-2xl mb-4\">Please see reception.</h3>\n            <p class=\"mb-2\" *ngIf=\"error | async\">{{ error | async }}</p>\n            <p class=\"mb-4\">Our staff at reception will assist you.</p>\n            <a button mat-button class=\"w-32\" [routerLink]=\"['/welcome']\">\n                Back\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: rgba(0, 0, 0, 0.5);\n            }\n\n            :host > div {\n                width: 28rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CheckinErrorComponent {\n    public readonly error = this._checkin.error;\n\n    constructor(private _checkin: CheckinStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { notifyError } from '@placeos/common';\nimport { CheckinStateService } from './checkin-state.service';\n\n@Component({\n    selector: '[checkin-covid]',\n    template: `\n        <div class=\"bg-white rounded p-4 relative overflow-y-auto overflow-x-hidden\">\n            <h3 class=\"text-xl font-medium mb-4\">COVID Disclaimer</h3>\n            <ol class=\"list-decimal list-inside\">\n                <li>\n                    Do you have any of the following symptoms?<br /><br />\n                    <ul class=\"list-disc list-inside px-4 mb-4\">\n                        <li>Fever</li>\n                        <li>Cough</li>\n                        <li>Shortness of breath</li>\n                        <li>Chills</li>\n                        <li>Body aches</li>\n                        <li>Sore or scratchy throat</li>\n                        <li>Headache</li>\n                        <li>Runny nose</li>\n                        <li>Muscle pain</li>\n                        <li>Vomitting</li>\n                        <li>Nausea</li>\n                        <li>Diarrhoa</li>\n                        <li>Loss of taste or smell</li>\n                    </ul>\n                    <mat-radio-group\n                        aria-label=\"Has Symptoms\"\n                        [(ngModel)]=\"symptoms\"\n                    >\n                        <mat-radio-button value=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button value=\"false\" class=\"ml-4\"\n                            >No</mat-radio-button\n                        >\n                    </mat-radio-group>\n                </li>\n                <hr class=\"my-4\" />\n                <li>\n                    Have you been in contact with a COVID-19 case in the last 14\n                    days or been asked to self-isolate by a health offical?<br /><br />\n                    <mat-radio-group\n                        aria-label=\"COVID contact or self-isolated\"\n                        [(ngModel)]=\"contact\"\n                    >\n                        <mat-radio-button value=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button value=\"false\" class=\"ml-4\"\n                            >No</mat-radio-button\n                        >\n                    </mat-radio-group>\n                </li>\n            </ol>\n            <button mat-button (click)=\"confirm()\">Confirm</button>\n            <a\n                mat-icon-button\n                [disabled]=\"!symptoms && !contact\"\n                class=\"absolute top-0 right-0\"\n                [routerLink]=\"['/welcome']\"\n            >\n                <app-icon>close</app-icon>\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background-color: rgba(0, 0, 0, 0.5);\n            }\n\n            :host > div {\n                width: 32rem;\n                max-width: calc(100vw - 2rem);\n                max-height: calc(100% - 2rem);\n            }\n\n            .absolute {\n                position: absolute;\n            }\n\n            button {\n                margin: 1rem 11rem 0;\n                width: 8rem;\n            }\n        `,\n    ],\n})\nexport class CheckinCovidComponent {\n    public contact: string;\n    public symptoms: string;\n\n    constructor(\n        private _router: Router,\n        private _checkin: CheckinStateService\n    ) {}\n\n    public confirm() {\n        if (!this.symptoms || !this.contact)\n            return notifyError('Please select yes or no for each question');\n        this._checkin.updateGuest({\n            covid: this.contact === 'true',\n            symptoms: this.symptoms === 'true',\n        });\n        if (this.symptoms === 'false' && this.contact === 'false') {\n            this._router.navigate(['/checkin', 'results']);\n        } else {\n            this._checkin.setError('Please get tested for COVID-19 and self-isolate at home for 14 days');\n            this._router.navigate(['/checkin', 'error']);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\nimport { SharedComponentsModule } from '../components/shared-components.module';\n\nimport { CheckinDetailsComponent } from './checkin-details.component';\nimport { CheckinPhotoComponent } from './checkin-photo.component';\nimport { CheckinPreferencesComponent } from './checkin-preferences.component';\nimport { CheckinQRScanComponent } from './checkin-qr-scan.component';\nimport { CheckinResultsComponent } from './checkin-result.component';\nimport { CheckinErrorComponent } from './checkin-error.component';\nimport { CheckinCovidComponent } from './checkin-covid.component';\nimport { CheckinComponent } from './checkin.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: CheckinComponent,\n        children: [\n            { path: 'scan', component: CheckinQRScanComponent },\n            { path: 'details', component: CheckinDetailsComponent },\n            { path: 'preferences', component: CheckinPreferencesComponent },\n            { path: 'photo', component: CheckinPhotoComponent },\n            { path: 'results', component: CheckinResultsComponent },\n            { path: 'error', component: CheckinErrorComponent },\n            { path: 'covid', component: CheckinCovidComponent },\n            { path: '**', redirectTo: 'scan' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [\n        CheckinComponent,\n        CheckinResultsComponent,\n        CheckinQRScanComponent,\n        CheckinPreferencesComponent,\n        CheckinPhotoComponent,\n        CheckinDetailsComponent,\n        CheckinErrorComponent,\n        CheckinCovidComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SharedComponentsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class VisitorCheckinModule {}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[app-checkin]',\n    template: `\n        <a-topbar-header class=\"w-full\"></a-topbar-header>\n        <div\n            class=\"flex-1 w-full bg-center bg-cover relative\"\n            [style.background-image]=\"'url(' + background + ')'\"\n        >\n            <router-outlet></router-outlet>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CheckinComponent {\n    public get background() {\n        return this._settings.get('app.home.background');\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n"],"sourceRoot":"webpack:///","file":"apps_visitor-kiosk_src_app_checkin_checkin_module_ts.js"}