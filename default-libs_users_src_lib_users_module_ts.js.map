{"version":3,"file":"default-libs_users_src_lib_users_module_ts.js","mappings":"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","names":["fromUnixTime","unixTime","toDate","i0","ctx_r2","offset_x","hour_r2","user_r5","_r4","$implicit","removeUser","offset_y","name","host","email","date","user_r7","availability","toLowerCase","_c1","FindAvailabilityModalComponent","AsyncHandler","today","isSameDay","this","Date","now","current_hour","getHours","selection_left","getMinutes","selection_width","duration","constructor","_data","_renderer","_dialog_ref","super","users","BehaviorSubject","search","hours","Array","fill","on_change","combineLatest","pipe","debounceTime","switchMap","queryUserFreeBusy","calendars","map","_","join","period_start","getUnixTime","startOfDay","period_end","endOfDay","catchError","of","availability_list","availability_map","item","id","filter","status","block","starts_at","differenceInMinutes","ends_at","start","size","defaultIfEmpty","shareReplay","move_time","_start_time","_move_last","_move_size","next","addUser","user","getValue","u","closeAndUpdate","close","ngAfterViewInit","timeout","el","_container_el","nativeElement","querySelector","rect","getBoundingClientRect","el_rect","scrollTo","left","onScroll","scrollLeft","scrollTop","startMovePeriod","event","preventDefault","stopPropagation","MouseEvent","clientX","touches","subscription","listen","e","_onMovePeriod","_onMoveEnd","startMoveDuration","_onMoveDuration","change_px","change_min","Math","floor","abs","old_date","addMinutes","valueOf","max","unsub","static","__ngFactoryType__","MAT_DIALOG_DATA","i1","core","VBU","selectors","viewQuery","rf","ctx","$event","_r1","FindAvailabilityModalComponent_div_12_Template","FindAvailabilityModalComponent_div_18_Template","FindAvailabilityModalComponent_div_22_Template","FindAvailabilityModalComponent_div_30_Template","FindAvailabilityModalComponent_user_availability_list_36_Template","USER_LIST","EMPTY_USER","User","UserPipe","transform","user_id","_asyncToGenerator","find","showStaff","toPromise","catch","showGuest","push","_angular_core__WEBPACK_IMPORTED_MODULE_4__","EJ8","pure","event_r1","UserAvailabilityComponent","inputs","decls","vars","consts","template","UserAvailabilityComponent_div_1_Template","SharedUsersModule","$C","G2t","CommonModule","FormsModule","ReactiveFormsModule","MatDialogModule","FormFieldsModule","ComponentsModule","MatCheckboxModule","MatProgressSpinnerModule","MatMenuModule","WFHSettingsModalComponent","i2","i3","i4","i5","i6","i7","i8","i9","i10","i11","i12","i13","i14"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/date-fns/fromUnixTime.mjs","./libs/users/src/lib/find-availability-modal/find-availability-modal.component.ts","./libs/users/src/lib/user.pipe.ts","./libs/users/src/lib/find-availability-modal/user-availability.component.ts","./libs/users/src/lib/users.module.ts"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\n *\n * @param unixTime - The given Unix timestamp (in seconds)\n *\n * @returns The date\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * const result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\nexport function fromUnixTime(unixTime) {\n  return toDate(unixTime * 1000);\n}\n\n// Fallback for modularized imports:\nexport default fromUnixTime;\n","import {\n    Component,\n    ElementRef,\n    Inject,\n    Renderer2,\n    ViewChild,\n} from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AsyncHandler } from '@placeos/common';\nimport {\n    addMinutes,\n    differenceInMinutes,\n    endOfDay,\n    fromUnixTime,\n    getUnixTime,\n    isSameDay,\n    startOfDay,\n} from 'date-fns';\nimport { queryUserFreeBusy } from 'libs/calendar/src/lib/calendar.fn';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    defaultIfEmpty,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { User } from '../user.class';\nimport { AvailabilityBlock } from './user-availability.component';\n\nexport interface FindAvailabilityData {\n    host: User;\n    users: User[];\n    date: number;\n    duration: number;\n}\n\n@Component({\n    selector: 'find-availability-modal',\n    template: `\n        <header class=\"relative flex items-center justify-center p-4\">\n            <h2 class=\"text-center\">Find Availability</h2>\n            <button\n                icon\n                matRipple\n                mat-dialog-close\n                class=\"absolute top-1/2 left-1 -translate-y-1/2\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col h-[calc(100vh-7rem)] sm:h-[65vh] overflow-hidden\"\n        >\n            <div\n                class=\"w-full flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2 p-2\"\n            >\n                <a-date-field\n                    [(ngModel)]=\"date\"\n                    class=\"max-h-[3.25rem] flex-1\"\n                    (ngModelChange)=\"on_change.next(on_change.getValue() + 1)\"\n                ></a-date-field>\n                <a-user-search-field\n                    [(ngModel)]=\"user\"\n                    (ngModelChange)=\"addUser($event)\"\n                    class=\"max-h-[3.25rem] flex-1\"\n                ></a-user-search-field>\n            </div>\n            <div\n                class=\"grid flex-1 h-1/2 w-full border-t border-base-200 relative overflow-hidden divide-x divide-y divide-base-200 max-w-[100vw] sm:max-w-[80vw]\"\n            >\n                <div\n                    times\n                    class=\"col-start-2 h-10 flex overflow-hidden border-l border-base-200\"\n                >\n                    <div\n                        hour\n                        *ngFor=\"let _ of hours; let hour = index\"\n                        class=\"relative border-r border-base-200 h-10 min-w-[5rem] p-2\"\n                        [attr.disabled]=\"today && current_hour > hour\"\n                        [style.left]=\"-offset_x + 'px'\"\n                    >\n                        {{ hour % 12 === 0 ? '12' : hour % 12\n                        }}{{ hour >= 12 ? 'pm' : 'am' }}\n                    </div>\n                </div>\n                <div users class=\"row-start-2 w-24 overflow-hidden\">\n                    <div\n                        host\n                        class=\"flex flex-col items-center justify-center h-32 w-24 relative border-b border-base-200 py-2\"\n                        [style.top]=\"-offset_y + 'px'\"\n                    >\n                        <a-user-avatar\n                            class=\"text-2xl\"\n                            [user]=\"host\"\n                        ></a-user-avatar>\n                        <div\n                            class=\"text-xs break-words overflow-hidden max-w-full px-2 text-center\"\n                        >\n                            {{ host.name || host.email }}\n                        </div>\n                    </div>\n                    <div\n                        person\n                        class=\"flex flex-col items-center justify-center h-32 w-24 relative border-b border-base-200 py-2\"\n                        [style.top]=\"-offset_y + 'px'\"\n                        *ngFor=\"let user of users | async\"\n                    >\n                        <a-user-avatar\n                            class=\"text-2xl\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <div\n                            class=\"text-xs break-words max-w-full px-2 text-center\"\n                        >\n                            {{ user.name || host.email }}\n                        </div>\n                        <button\n                            icon\n                            class=\"absolute -top-1 -left-1\"\n                            (click)=\"removeUser(user)\"\n                        >\n                            <app-icon>close</app-icon>\n                        </button>\n                    </div>\n                </div>\n                <div blocks class=\"relative row-start-2 overflow-hidden\">\n                    <div fixed class=\"absolute inset-0 flex overflow-hidden\">\n                        <div\n                            divider\n                            class=\"relative h-full min-w-[5rem] border-l border-base-200\"\n                            [style.left]=\"-(offset_x + 1) + 'px'\"\n                            [attr.disabled]=\"today && current_hour > h\"\n                            *ngFor=\"let _ of hours; let h = index\"\n                        ></div>\n                        <div\n                            selection\n                            class=\"absolute inset-y-0 !border-x-2 !border-info z-20 cursor-grab active:cursor-grabbing\"\n                            [style.left]=\"\n                                'calc(' +\n                                selection_left +\n                                'rem - ' +\n                                offset_x +\n                                'px)'\n                            \"\n                            [style.width]=\"selection_width + 'rem'\"\n                            (mousedown)=\"startMovePeriod($event)\"\n                            (touchstart)=\"startMovePeriod($event)\"\n                        >\n                            <div\n                                class=\"absolute inset-0 bg-info opacity-30\"\n                            ></div>\n                            <div\n                                handle\n                                class=\"absolute top-1/2 -left-px -translate-x-1/2 -translate-y-1/2 h-3 w-3 rounded-full bg-info\"\n                            ></div>\n                            <div\n                                handle\n                                class=\"absolute top-1/2 -right-px translate-x-1/2 -translate-y-1/2 h-3 w-3 rounded-full bg-info hover:h-4 hover:w-4 active:bg-secondary\"\n                                (mousedown)=\"startMoveDuration($event)\"\n                                (touchstart)=\"startMoveDuration($event)\"\n                            ></div>\n                            <div\n                                class=\"bg-base-100 border border-base-200 p-2 absolute top-2 left-1/2 -translate-x-1/2 shadow text-xs whitespace-nowrap rounded\"\n                            >\n                                {{ duration | duration }}\n                            </div>\n                            <div\n                                *ngIf=\"move_time\"\n                                class=\"bg-base-100 border border-base-200 p-2 absolute top-12 left-1/2 -translate-x-1/2 shadow text-xs whitespace-nowrap rounded\"\n                            >\n                                {{ date | date: 'shortTime' }}\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        scroll\n                        #container\n                        class=\"absolute inset-0 overflow-auto\"\n                        (scroll)=\"onScroll()\"\n                    >\n                        <user-availability-list\n                            class=\"pointer-events-none\"\n                            [user]=\"host\"\n                            [date]=\"date\"\n                            [availability]=\"\n                                (availability | async)\n                                    ? (availability | async)[host.email]\n                                    : []\n                            \"\n                        ></user-availability-list>\n                        <user-availability-list\n                            class=\"pointer-events-none\"\n                            *ngFor=\"let user of users | async\"\n                            [user]=\"user\"\n                            [date]=\"date\"\n                            [availability]=\"\n                                (availability | async)\n                                    ? (availability | async)[\n                                          user.email.toLowerCase()\n                                      ]\n                                    : []\n                            \"\n                        ></user-availability-list>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex items-center justify-between p-2 border-t border-base-200 w-full\"\n        >\n            <button\n                btn\n                matRipple\n                [mat-dialog-close]=\"true\"\n                class=\"clear text-secondary\"\n            >\n                <div class=\"flex items-center\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <div class=\"mr-1 underline\">Back to form</div>\n                </div>\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            .grid {\n                grid-template-columns: 6rem 1fr;\n                grid-template-rows: 2.5rem minmax(0, 1fr);\n            }\n            [disabled='true'],\n            [disabled='true'] [header] {\n                background: var(--b3) !important;\n                pointer-events: none;\n            }\n            [disabled='true'] > * {\n                opacity: 0.3;\n            }\n        `,\n    ],\n})\nexport class FindAvailabilityModalComponent extends AsyncHandler {\n    public readonly users = new BehaviorSubject([]);\n    public search = '';\n    public date = this._data.date || Date.now();\n    public duration = this._data.duration || 60;\n    public user?: User;\n    public offset_y = 0;\n    public offset_x = 0;\n\n    public readonly host = this._data.host;\n    public readonly hours = new Array(24).fill(0);\n    public readonly on_change = new BehaviorSubject(0);\n\n    public readonly availability = combineLatest([\n        this.users,\n        this.on_change,\n    ]).pipe(\n        debounceTime(300),\n        switchMap(([users]) => {\n            return queryUserFreeBusy({\n                calendars: [\n                    this.host.email,\n                    ...users.map((_) => _.email.toLowerCase()),\n                ].join(','),\n                period_start: getUnixTime(startOfDay(this.date)),\n                period_end: getUnixTime(endOfDay(this.date)),\n            }).pipe(catchError(() => of([])));\n        }),\n        map((availability_list) => {\n            const availability_map: Record<string, AvailabilityBlock[]> = {};\n            for (const item of availability_list) {\n                availability_map[item.id.toLowerCase()] = item.availability\n                    .filter((_) => _.status === 'busy')\n                    .map((block) => {\n                        const date = fromUnixTime(block.starts_at);\n                        const duration = differenceInMinutes(\n                            fromUnixTime(block.ends_at),\n                            fromUnixTime(block.starts_at)\n                        );\n                        return {\n                            date,\n                            duration,\n                            start:\n                                ((date.getHours() + date.getMinutes() / 60) /\n                                    24) *\n                                100,\n                            size: (duration / 60 / 24) * 100,\n                        };\n                    });\n            }\n            return availability_map;\n        }),\n        defaultIfEmpty({}),\n        shareReplay(1)\n    );\n\n    @ViewChild('container', { static: true })\n    private _container_el!: ElementRef<HTMLDivElement>;\n\n    public get today() {\n        return isSameDay(this.date, Date.now());\n    }\n\n    public get current_hour() {\n        return new Date().getHours();\n    }\n\n    public get selection_left() {\n        const date = new Date(this.date);\n        return (date.getHours() + date.getMinutes() / 60) * 5;\n    }\n\n    public get selection_width() {\n        return (this.duration / 60) * 5;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: FindAvailabilityData,\n        private _renderer: Renderer2,\n        private _dialog_ref: MatDialogRef<FindAvailabilityModalComponent>\n    ) {\n        super();\n        this.users.next([...this._data.users]);\n    }\n\n    public addUser(user: User) {\n        this.users.next([\n            ...this.users.getValue().filter((u) => u.email !== user.email),\n            user,\n        ]);\n        this.user = null;\n    }\n\n    public removeUser(user: User) {\n        this.users.next(\n            this.users.getValue().filter((u) => u.email !== user.email)\n        );\n        this.user = null;\n    }\n\n    public closeAndUpdate() {\n        this._dialog_ref.close(true);\n    }\n\n    public ngAfterViewInit() {\n        const date = new Date(this.date);\n        this.timeout(\n            'init',\n            () => {\n                const el = this._container_el.nativeElement.querySelector(\n                    `[hour=\"${date.getHours()}\"]`\n                );\n                if (el) {\n                    const rect =\n                        this._container_el.nativeElement.getBoundingClientRect();\n                    const el_rect = el.getBoundingClientRect();\n                    this._container_el.nativeElement.scrollTo(\n                        el_rect.left - 128 - rect.left,\n                        0\n                    );\n                }\n                this.onScroll();\n            },\n            300\n        );\n    }\n\n    public onScroll() {\n        this.offset_x = this._container_el.nativeElement.scrollLeft;\n        this.offset_y = this._container_el.nativeElement.scrollTop;\n    }\n\n    public move_time = false;\n    private _start_time = 0;\n    private _move_last = 0;\n    private _move_size = 80 * 24;\n\n    public startMovePeriod(event: MouseEvent | TouchEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._move_last =\n            event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX;\n        this.move_time = true;\n        this._start_time = this.date;\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'mousemove', (e) =>\n                      this._onMovePeriod(e)\n                  )\n              )\n            : this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'touchmove', (e) =>\n                      this._onMovePeriod(e)\n                  )\n              );\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'mouseup', () =>\n                      this._onMoveEnd()\n                  )\n              )\n            : this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'touchend', () =>\n                      this._onMoveEnd()\n                  )\n              );\n    }\n\n    public startMoveDuration(event: MouseEvent | TouchEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        this._move_last =\n            event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX;\n        this._start_time = this.duration;\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'mousemove', (e) =>\n                      this._onMoveDuration(e)\n                  )\n              )\n            : this.subscription(\n                  'on_move',\n                  this._renderer.listen('window', 'touchmove', (e) =>\n                      this._onMoveDuration(e)\n                  )\n              );\n        event instanceof MouseEvent\n            ? this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'mouseup', () =>\n                      this._onMoveEnd()\n                  )\n              )\n            : this.subscription(\n                  'on_move_end',\n                  this._renderer.listen('window', 'touchend', () =>\n                      this._onMoveEnd()\n                  )\n              );\n    }\n\n    private _onMovePeriod(event: MouseEvent | TouchEvent) {\n        const change_px =\n            this._move_last -\n            (event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX);\n        const dir = change_px > 0 ? -1 : 1;\n        const change_min =\n            dir *\n            Math.floor(Math.abs((change_px / this._move_size) * 24 * 60) / 5) *\n            5;\n        if (change_min) {\n            const old_date = this.date;\n            this.date = addMinutes(this._start_time, change_min).valueOf();\n            if (this.date < Date.now()) this.date = old_date;\n        }\n    }\n\n    private _onMoveDuration(event: MouseEvent | TouchEvent) {\n        const change_px =\n            this._move_last -\n            (event instanceof MouseEvent\n                ? event.clientX\n                : event.touches[0].clientX);\n        const dir = change_px > 0 ? -1 : 1;\n        const change_min =\n            dir *\n            Math.floor(Math.abs((change_px / this._move_size) * 24 * 60) / 5) *\n            5;\n        if (change_min) {\n            this.duration = Math.max(30, this._start_time + change_min);\n        }\n    }\n\n    private _onMoveEnd() {\n        this.unsub('on_move');\n        this.unsub('on_move_end');\n        this._move_last = 0;\n        this.move_time = false;\n    }\n}\n","import { Pipe } from '@angular/core';\nimport { showGuest } from './guests.fn';\nimport { showStaff } from './staff.fn';\nimport { User } from './user.class';\n\nconst USER_LIST: User[] = [];\n\nconst EMPTY_USER = new User();\n\n@Pipe({\n    name: 'user',\n})\nexport class UserPipe {\n    /**\n     * Get details of the user with the given ID\n     * @param user_id ID or Email of the user\n     */\n    public async transform(user_id: string): Promise<User> {\n        if (!user_id) return EMPTY_USER;\n        let user = USER_LIST.find(\n            ({ id, email }) => id === user_id || email === user_id\n        );\n        if (user) return user;\n        user = await showStaff(user_id)\n            .toPromise()\n            .catch(() => null);\n        if (user) {\n            USER_LIST.push(user);\n            return user;\n        }\n        user = await showGuest(user_id)\n            .toPromise()\n            .catch(() => null);\n        if (user) {\n            USER_LIST.push(user);\n            return user;\n        }\n        return EMPTY_USER;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { User } from '../user.class';\n\nexport interface AvailabilityBlock {\n    date: number;\n    duration: number;\n    start: number;\n    size: number;\n}\n\n@Component({\n    selector: 'user-availability-list',\n    template: `\n        <div\n            class=\"relative w-[120rem] h-32 inset-y-0 border-b border-base-200 \"\n        >\n            <div\n                event\n                *ngFor=\"let event of availability\"\n                class=\"absolute inset-y-0 bg-error text-white p-2 overflow-hidden border border-red-700 rounded\"\n                [style.left]=\"event.start + '%'\"\n                [style.width]=\"event.size + '%'\"\n            >\n                <div class=\"text-xs max-w-full\">\n                    {{ event.date | date: 'shortTime' }} -\n                    {{\n                        event.date.valueOf() + event.duration * 60 * 1000\n                            | date: 'shortTime'\n                    }}\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class UserAvailabilityComponent {\n    @Input() public user: User;\n    @Input() public availability: AvailabilityBlock[] = [];\n    @Input() public date: number = Date.now();\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\nimport { FormFieldsModule } from 'libs/form-fields/src/lib/form-fields.module';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\nimport { UserPipe } from './user.pipe';\nimport { WFHSettingsModalComponent } from './wfh-settings-modal.component';\nimport { FindAvailabilityModalComponent } from './find-availability-modal/find-availability-modal.component';\nimport { UserAvailabilityComponent } from './find-availability-modal/user-availability.component';\n\nconst COMPONENTS = [\n    NewUserModalComponent,\n    UserFormComponent,\n    WFHSettingsModalComponent,\n    UserPipe,\n    FindAvailabilityModalComponent,\n    UserAvailabilityComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        FormFieldsModule,\n        ComponentsModule,\n        MatCheckboxModule,\n        MatProgressSpinnerModule,\n        MatMenuModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedUsersModule {}\n"],"x_google_ignoreList":[0]}