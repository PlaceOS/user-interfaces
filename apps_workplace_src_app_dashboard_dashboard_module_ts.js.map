{"version":3,"sources":["./apps/workplace/src/app/dashboard/dashboard-state.service.ts","./apps/workplace/src/app/dashboard/dashboard-availability.component.ts","./apps/workplace/src/app/dashboard/dashboard-upcoming.component.ts","./apps/workplace/src/app/dashboard/dashboard-delivery-modal.component.ts","./apps/workplace/src/app/dashboard/dashboard-deliveries.component.ts","./apps/workplace/src/app/dashboard/dashboard-contacts.component.ts","./apps/workplace/src/app/dashboard/dashboard.component.ts","./apps/workplace/src/app/dashboard/dashboard.module.ts"],"names":["DashboardStateService","_calendar","_org","super","_options","BehaviorSubject","_free_spaces","_upcoming_events","_contacts","_level_occupancy","free_spaces","this","asObservable","upcoming_events","contacts","options","search_results","pipe","debounceTime","switchMap","search","of","catchError","_","shareReplay","level_occupancy","init","initialised","first","toPromise","subscription","active_building","filter","bld","subscribe","updateBuildingMetadata","organisation","bindings","area_management","binding","listen","d","updateOccupancy","bind","next","getValue","delay","updateFreeSpaces","interval","clearInterval","updateUpcomingEvents","metadata","id","name","details","Array","map","i","user","users","push","description","u","email","levels","sort","a","b","recommendation","building","period_start","Math","floor","Date","valueOf","period_end","endOfDay","list","freeBusy","zone_ids","space","availability","length","find","status","capacity","events","calendars","occupancy","module","sys","index","_occupancy_binding","unbind","value","Object","keys","key","recommendation_factor","levelWithID","DashboardAvailabilityComponent","_state","space_list","levels_free","pollFreeSpaces","stopPollingFreeSpaces","DashboardUpcomingComponent","_dialog","pollUpcomingEvents","stopPollingUpcomingEvents","open","data","map_id","level","DashboardDeliveryModalComponent","form","sender","priority","markAllAsTouched","valid","emit","reason","register","DashboardDeliveriesComponent","deliveries","received","now","ref","Promise","race","componentInstance","afterClosed","close","DashboardContactsComponent","_settings","addUser","addContact","removeUser","removeContact","updateSearch","s","setOptions","search_str","get","updateContacts","timeout","_input_el","nativeElement","focus","focusInput","clearInput","$event","stopPropagation","preventDefault","DashboardComponent","ROUTES","path","component","DashboardModule"],"mappings":"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","file":"apps_workplace_src_app_dashboard_dashboard_module_ts.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    getModule,\n    PlaceMetadata,\n    PlaceVariableBinding,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay } from 'date-fns';\n\nimport { BaseClass, currentUser, HashMap, unique } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { searchStaff, User } from '@placeos/users';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '@placeos/calendar';\n\nexport interface DashboardOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardStateService extends BaseClass {\n    private _options = new BehaviorSubject<DashboardOptions>({});\n    /**  */\n    private _free_spaces = new BehaviorSubject<Space[]>([]);\n    /**  */\n    private _upcoming_events = new BehaviorSubject<CalendarEvent[]>([]);\n    /**  */\n    private _contacts = new BehaviorSubject<User[]>([]);\n    /**  */\n    private _level_occupancy = new BehaviorSubject<BuildingLevel[]>([]);\n    /**  */\n    private _occupancy_binding: PlaceVariableBinding;\n    /**  */\n    public free_spaces = this._free_spaces.asObservable();\n    /**  */\n    public upcoming_events = this._upcoming_events.asObservable();\n    /**  */\n    public contacts = this._contacts.asObservable();\n    /**  */\n    public options = this._options.asObservable();\n\n    public readonly search_results = this._options.pipe(\n        debounceTime(500),\n        switchMap(({ search }) => (search ? searchStaff(search) : of([]))),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /**  */\n    public level_occupancy = this._level_occupancy.asObservable();\n\n    constructor(\n        private _calendar: CalendarService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'building',\n            this._org.active_building\n                .pipe(filter((bld) => !!bld))\n                .subscribe(() => this.updateBuildingMetadata())\n        );\n        if (!this._org.organisation.bindings.area_management) return;\n        const binding = getModule(\n            this._org.organisation.bindings.area_management,\n            'AreaManagement'\n        ).binding('overview');\n        binding.listen().subscribe((d) => this.updateOccupancy(d || {}));\n        binding.bind();\n    }\n\n    public setOptions(options: Partial<DashboardOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public pollFreeSpaces(delay: number = 10 * 1000) {\n        this.updateFreeSpaces();\n        this.interval('free_spaces', () => this.updateFreeSpaces(), delay);\n    }\n\n    public stopPollingFreeSpaces() {\n        this.clearInterval('free_spaces');\n    }\n\n    public pollUpcomingEvents(delay: number = 10 * 1000) {\n        this.updateUpcomingEvents();\n        this.interval(\n            'upcoming_events',\n            () => this.updateUpcomingEvents(),\n            delay\n        );\n    }\n\n    public stopPollingUpcomingEvents() {\n        this.clearInterval('upcoming_events');\n    }\n\n    public async updateContacts() {\n        const metadata: PlaceMetadata = (await showMetadata(currentUser().id, {\n            name: 'contacts',\n        }).toPromise()) as any;\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async addContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users.push(user);\n        users = unique(users, 'email');\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async removeContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users = users.filter((u) => u.email !== user.email);\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    private async updateOccupancy(map: HashMap<{ recommendation: number }>) {\n        const levels = [...this._org.levels];\n        levels.sort(\n            (a, b) => map[a.id]?.recommendation - map[b.id]?.recommendation\n        );\n        this._level_occupancy.next(levels);\n    }\n\n    private async updateFreeSpaces() {\n        if (!this._org.building) return;\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const list = await this._calendar\n            .freeBusy({\n                period_start,\n                period_end,\n                zone_ids: this._org.building.id,\n            })\n            .pipe(\n                map((_) =>\n                    _.filter(\n                        (space) =>\n                            !space.availability.length ||\n                            space.availability.find((_) => _.status !== 'busy')\n                    )\n                )\n            )\n            .toPromise();\n        list.sort((a, b) => a.capacity - b.capacity);\n        this._free_spaces.next(list);\n    }\n\n    private async updateUpcomingEvents() {\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const events = await queryEvents({\n            period_start,\n            period_end,\n            calendars: currentUser().email,\n        }).toPromise();\n        this._upcoming_events.next(events);\n    }\n\n    private async updateBuildingMetadata() {\n        const building = this._org.building;\n        const metadata = await showMetadata(building.id, {\n            name: 'bindings',\n        }).toPromise();\n        if (!(metadata.details as HashMap).occupancy) return;\n        const details = (metadata.details as HashMap).occupancy;\n        const module = getModule(details.sys, details.module, details.index);\n        if (!module) return;\n        if (this._occupancy_binding) {\n            this._occupancy_binding.unbind();\n        }\n        this._occupancy_binding = module.binding('occupancy');\n        this._occupancy_binding.bind();\n        this.subscription(\n            'occupancy_binding',\n            this._occupancy_binding.listen().subscribe((value) => {\n                const levels = Object.keys(value).map((key) => ({\n                    id: key,\n                    ...value[key],\n                }));\n                levels.sort(\n                    (a, b) => a.recommendation_factor - b.recommendation_factor\n                );\n                this._level_occupancy.next(\n                    levels.map((i) => this._org.levelWithID([i.id]))\n                );\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-availability',\n    template: `\n        <h3 class=\"m-0 font-medium text-xl\">Available Now</h3>\n        <div class=\"flex flex-col items-center p-2 bg-white my-4 rounded-lg\">\n            <div class=\"flex items-center w-full mb-2\">\n                <app-icon\n                    class=\"bg-darken rounded-lg mr-2 text-2xl\"\n                    [icon]=\"{ class: 'material-icons', content: 'crop_free' }\"\n                ></app-icon>\n                <div>Most free space:</div>\n            </div>\n            <div free-levels class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-full\"\n                    *ngFor=\"let lvl of levels_free | async | slice: 0:2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    {{ lvl.display_name || lvl.name }}\n                </a>\n            </div>\n        </div>\n        <div\n            free-spaces\n            class=\"flex items-center flex-col rounded-lg bg-white my-4 p-2\"\n        >\n            <div class=\"flex items-center w-full mb-2\">\n                <app-icon\n                    class=\"bg-darken rounded-lg mr-2 text-2xl\"\n                    [icon]=\"{ class: 'material-icons', content: 'av_timer' }\"\n                ></app-icon>\n                <div>Free rooms now:</div>\n            </div>\n            <div class=\"items space-y-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-full\"\n                    *ngFor=\"let space of space_list | async | slice: 0:3\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.id }\"\n                    >{{ space.display_name || space.name }}\n                </a>\n                <span\n                    *ngIf=\"!(space_list | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                    >No free spaces</span\n                >\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n        `,\n    ],\n})\nexport class DashboardAvailabilityComponent implements OnInit, OnDestroy {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: DashboardStateService) {}\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Space } from '@placeos/spaces';\n\nimport { MapLocateModalComponent } from '../overlays/map-locate-modal.component';\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-upcoming',\n    template: `\n        <h3 class=\"m-0 mb-4 font-medium text-xl\">Today's Events</h3>\n        <div\n            name=\"event\"\n            *ngFor=\"let event of upcoming_events | async | slice: 0:3\"\n            class=\"flex bg-white rounded-lg relative overflow-hidden mb-4\"\n        >\n            <div name=\"status\" class=\"absolute rounded-lg\"></div>\n            <div name=\"details\" class=\"flex-1 mr-2\">\n                <div name=\"time\" class=\"text-sm text-bold mb-2\">\n                    {{ event.date | date: 'shortTime' }}\n                </div>\n                <div name=\"title\" class=\"text-sm text-bold mb-2\">\n                    {{ event.title }}\n                </div>\n                <div name=\"space\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'room' }\"\n                    ></app-icon>\n                    <a\n                        class=\"text-black\"\n                        [class.underline]=\"!!event.space\"\n                        [matTooltip]=\"event.space ? 'Locate Space' : ''\"\n                        (click)=\"event.space ? locateSpace(event.space) : ''\"\n                    >\n                        {{\n                            event.space?.display_name ||\n                                event.space?.name ||\n                                '&lt;No Location&gt;'\n                        }}\n                        {{\n                            event.space?.level?.display_name ||\n                            event.space?.level?.name\n                                ? ', ' + event.space.level.display_name ||\n                                  event.space.level.name\n                                : ''\n                        }}\n                    </a>\n                </div>\n                <div name=\"attendees\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'group' }\"\n                    ></app-icon>\n                    {{ event.guests.length }} Guest{{\n                        event.guests.length === 1 ? '' : 's'\n                    }}\n                </div>\n                <div name=\"guests\" class=\"flex space-x-2 text-sm\">\n                    <a-user-avatar\n                        *ngFor=\"let guest of event.guests\"\n                        [user]=\"guest\"\n                    ></a-user-avatar>\n                </div>\n            </div>\n            <a\n                button\n                mat-button\n                *ngIf=\"event.meeting_link\"\n                class=\"uppercase h-12\"\n                [href]=\"event.meeting_link\"\n                >Join Call</a\n            >\n        </div>\n        <p\n            *ngIf=\"!(upcoming_events | async).length\"\n            class=\"text-dark-fade text-center w-full\"\n        >\n            No upcoming events for today\n        </p>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='time'] {\n                color: #00529b;\n            }\n\n            [name='event'] {\n                padding: 1rem 1rem 1rem 2rem;\n            }\n\n            [name='status'] {\n                top: 1rem;\n                left: -0.8rem;\n                height: 2.5rem;\n                width: 1.6rem;\n                background-color: #00529b;\n            }\n\n            button {\n                height: 3em;\n            }\n\n            app-icon {\n                margin-left: -0.25rem;\n            }\n        `,\n    ],\n})\nexport class DashboardUpcomingComponent implements OnInit, OnDestroy {\n    public readonly upcoming_events = this._state.upcoming_events;\n\n    constructor(\n        private _state: DashboardStateService,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n    }\n\n    public locateSpace(space: Space) {\n        this._dialog.open(MapLocateModalComponent, {\n            data: {\n                id: space.id,\n                name: space.name,\n                map_id: space.map_id,\n                level: space.level,\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent } from '@placeos/common';\n\n@Component({\n    selector: 'dashboard-delivery-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h3>Register Delivery</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-2 w-[24rem]\" [formGroup]=\"form\">\n            <div>\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of items being delivered\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <textarea\n                        matInput\n                        placeholder=\"Description of items being delivered\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Sender:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of sender\"\n                        formControlName=\"sender\"\n                    />\n                    <mat-error>Sender is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Priority:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <mat-select placeholder=\"Low\" formControlName=\"priority\">\n                        <mat-option>Very Low</mat-option>\n                        <mat-option>Low</mat-option>\n                        <mat-option>Normal</mat-option>\n                        <mat-option>High</mat-option>\n                        <mat-option>Very Height</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            class=\"p-2 flex items-center justify-center border-t border-gray-100\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"register()\">\n                Register\n            </button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveryModalComponent {\n    @Output() public events = new EventEmitter<DialogEvent>();\n\n    public readonly form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        sender: new FormControl(''),\n        priority: new FormControl(''),\n    });\n\n    public register() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this.events.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\n\n@Component({\n    selector: 'dashboard-deliveries',\n    template: `\n        <h3 class=\"m-0 my-2 font-medium text-xl\">Deliveries</h3>\n        <div class=\"bg-white shadow p-2 rounded\">\n            <div class=\"divide-y\" *ngIf=\"deliveries?.length; else empty_state\">\n                <div\n                    class=\"flex items-center py-2\"\n                    *ngFor=\"let item of deliveries\"\n                >\n                    <div class=\"flex-1 pl-2\">\n                        <div class=\"\">\n                            {{ item?.name || 'Untitled Delivery' }}\n                        </div>\n                        <div class=\"text-xs opacity-60\">\n                            {{\n                                item && item.received\n                                    ? (item.received | date: 'medium')\n                                    : 'Not received'\n                            }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"m-4 h-2 w-2 rounded-full\"\n                        [class.bg-pending]=\"!item.received\"\n                        [class.bg-success]=\"item.received\"\n                    ></div>\n                </div>\n                <button\n                    mat-button\n                    class=\"w-full mt-2\"\n                    (click)=\"registerDelivery()\"\n                >\n                    Register Delivery\n                </button>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 flex items-center justify-center opacity-40\">\n                No registered deliveries\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveriesComponent {\n    public deliveries = [\n        { name: 'USB-C Cables', received: Date.now() },\n        { name: 'Desk Fan' },\n    ];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async registerDelivery() {\n        const ref = this._dialog.open(DashboardDeliveryModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.events\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details.reason !== 'done') return;\n        this.deliveries.push(details.metadata);\n        ref.close();\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { BaseClass, SettingsService } from '@placeos/common';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-contacts',\n    template: `\n        <h3 class=\"m-0 mb-2 font-medium text-xl\">Contacts</h3>\n        <div\n            name=\"contact-list\"\n            class=\"bg-gray-400 rounded-lg p-2 pl-0 space-y-2 flex flex-wrap\"\n        >\n            <div\n                name=\"contact\"\n                *ngFor=\"let user of contacts | async\"\n                class=\"bg-white rounded-lg flex-1 flex flex-col items-center p-2 relative\"\n            >\n                <a-user-avatar\n                    class=\"text-2xl mb-2\"\n                    [user]=\"user\"\n                ></a-user-avatar>\n                <div name=\"contact-name\" class=\"text-sm mb-2\">\n                    {{ user.name }}\n                </div>\n                <div name=\"location\" class=\"flex items-center text-sm\">\n                    <div name=\"dot\" class=\"mr-2\"></div>\n                    Level 12\n                </div>\n                <button mat-icon-button name=\"close\" (click)=\"removeUser(user)\">\n                    <app-icon\n                        [icon]=\"{ class: 'material-icons', content: 'close' }\"\n                    ></app-icon>\n                </button>\n            </div>\n            <button\n                name=\"contact\"\n                mat-button\n                class=\"rounded-lg flex-1 w-full\"\n                [matMenuTriggerFor]=\"menu\"\n                (menuOpened)=\"focusInput()\"\n                (menuClosed)=\"clearInput()\"\n            >\n                <div class=\"flex flex-col items-center p-4 text-black w-full\">\n                    <app-icon\n                        class=\"text-2xl\"\n                        [icon]=\"{\n                            class: 'material-icons',\n                            content: 'person_add'\n                        }\"\n                    ></app-icon>\n                    <span class=\"w-full leading-tight whitespace-normal\"\n                        >Click to add a person to contacts</span\n                    >\n                </div>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <div\n                mat-menu-item\n                class=\"p-0\"\n                (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n            >\n                <input\n                    #input\n                    class=\"w-full p-2 text-base\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"updateSearch(search_str)\"\n                    placeholder=\"Search for user...\"\n                />\n            </div>\n            <button mat-menu-item *ngIf=\"!(search_results | async)?.length\">\n                {{\n                    !search_str\n                        ? 'Type to search for users...'\n                        : 'No matches for \"' + search_str + '\"'\n                }}\n            </button>\n            <button\n                mat-menu-item\n                *ngFor=\"let user of search_results | async | slice: 0:8\"\n                (click)=\"addUser(user)\"\n            >\n                <div class=\"flex items-center leading-tight\">\n                    <a-user-avatar\n                        class=\"text-xl mr-2\"\n                        [user]=\"user\"\n                    ></a-user-avatar>\n                    <div class=\"flex-1\">\n                        <div>{{ user.name }}</div>\n                        <div class=\"text-xs text-dark-fade\">\n                            {{ user.email }}\n                        </div>\n                    </div>\n                </div>\n            </button>\n        </mat-menu>\n        <dashboard-deliveries *ngIf=\"can_deliver\"></dashboard-deliveries>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='contact-list'] {\n                padding: 0 0.5rem 0.5rem 0;\n            }\n\n            [name='contact'] {\n                min-width: 8rem;\n                width: 8rem;\n                margin-left: 0.5rem;\n                margin-top: 0.5rem;\n            }\n\n            [name='contact-name'] {\n                font-weight: 400;\n            }\n\n            [name='dot'] {\n                height: 8px;\n                width: 8px;\n                border-radius: 8px;\n                background-color: #22992e;\n            }\n\n            button[name='close'] {\n                position: absolute;\n                display: none;\n                top: 0.25rem;\n                right: 0.25rem;\n            }\n\n            [name='contact']:hover button[name='close'] {\n                display: initial;\n            }\n\n            button[name='contact'] {\n                background-color: #f0f0f0;\n                border: none;\n                min-width: calc(100% - 0.5rem) !important;\n            }\n        `,\n    ],\n})\nexport class DashboardContactsComponent extends BaseClass {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.search_results;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.setOptions({ search: s });\n\n    public search_str: string = '';\n\n    @ViewChild('input') private _input_el: ElementRef;\n\n    public get can_deliver() {\n        return !!this._settings.get('app.can_deliver');\n    }\n\n    constructor(\n        private _state: DashboardStateService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.updateContacts();\n    }\n\n    public focusInput() {\n        this.timeout('focus', () => {\n            if (this._input_el) {\n                this._input_el.nativeElement.focus();\n            }\n        });\n    }\n\n    public clearInput() {\n        this.search_str = '';\n        this._state.setOptions({ search: '' });\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[dashboard]',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2 bg-gray-200\">\n            <nav-menu class=\"relative z-10\"></nav-menu>\n            <div\n                class=\"relative z-0 flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <main\n                    class=\"flex flex-1 px-0 sm:px-8 flex-wrap overflow-auto h-px sm:h-auto\"\n                >\n                    <a-dashboard-availability\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-availability>\n                    <a-dashboard-upcoming\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-upcoming>\n                    <a-dashboard-contacts\n                        *ngIf=\"!hide_contacts\"\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-contacts>\n                </main>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n\n            .top {\n                background-color: #007ac8;\n            }\n\n            a[button].tile {\n                flex: 1;\n                border-radius: 0;\n                background-color: #fff;\n                color: rgba(0, 0, 0, 0.85);\n                border: none;\n                border-right: 1px solid #ccc;\n            }\n\n            a[button].tile:last-child {\n                border: none;\n            }\n        `,\n    ],\n})\nexport class DashboardComponent {\n    constructor(private _settings: SettingsService) {}\n\n    public get hide_contacts() {\n        return this._settings.get('app.hide_contacts') !== false;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardAvailabilityComponent } from './dashboard-availability.component';\nimport { DashboardUpcomingComponent } from './dashboard-upcoming.component';\nimport { DashboardContactsComponent } from './dashboard-contacts.component';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { DashboardDeliveriesComponent } from './dashboard-deliveries.component';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        DashboardAvailabilityComponent,\n        DashboardUpcomingComponent,\n        DashboardContactsComponent,\n        DashboardDeliveriesComponent,\n        DashboardDeliveryModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        SharedComponentModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DashboardModule {}\n"],"sourceRoot":"webpack:///"}