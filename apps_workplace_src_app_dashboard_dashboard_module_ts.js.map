{"version":3,"mappings":"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","names":["DashboardStateService","BaseClass","constructor","_calendar","_org","super","this","BehaviorSubject","_free_spaces","asObservable","_upcoming_events","_contacts","_options","pipe","debounceTime","switchMap","search","searchStaff","of","catchError","_","shareReplay","_level_occupancy","init","initialised","first","toPromise","subscription","active_building","filter","bld","subscribe","updateBuildingMetadata","organisation","bindings","area_management","binding","getModule","listen","d","updateOccupancy","bind","setOptions","options","next","Object","getValue","pollFreeSpaces","delay","updateFreeSpaces","interval","stopPollingFreeSpaces","clearInterval","pollUpcomingEvents","updateUpcomingEvents","stopPollingUpcomingEvents","updateContacts","metadata","showMetadata","currentUser","id","details","Array","map","i","User","addContact","user","users","push","unique","updateMetadata","name","description","removeContact","u","email","levels","sort","a","b","c","_a","recommendation","_b","building","period_start","Math","floor","Date","valueOf","period_end","endOfDay","list","freeBusy","zone_ids","space","availability","length","find","status","capacity","events","queryEvents","calendars","occupancy","module","sys","index","_occupancy_binding","unbind","value","keys","key","recommendation_factor","levelWithID","i0","factory","DashboardAvailabilityComponent","_state","free_spaces","level_occupancy","ngOnInit","ngOnDestroy","selectors","DashboardScheduledItemComponent","type","item","Booking","has_ended","isAfter","date","duration","icon","asset_id","booking_type","ctx_r8","DashboardUpcomingComponent","_schedule","_dialog","addMonths","today","upcoming_events","startPolling","stopPolling","locateSpace","open","MapLocateModalComponent","data","level","trackByFn","idx","event","undefined","DashboardDeliveryModalComponent","EventEmitter","FormGroup","FormControl","Validators","sender","priority","register","form","markAllAsTouched","valid","emit","reason","ctx","ctx_r5","DashboardDeliveriesComponent","received","now","registerDelivery","ref","Promise","race","componentInstance","afterClosed","deliveries","close","ctx_r7","ctx_r10","DashboardContactsComponent","_settings","contacts","search_results","s","can_deliver","get","focusInput","timeout","_input_el","nativeElement","focus","clearInput","search_str","$event","ROUTES","path","component","hide_contacts","DashboardComponent","DashboardModule","CommonModule","FormsModule","SharedComponentModule","ReactiveFormsModule","ScrollingModule","RouterModule"],"sources":["./apps/workplace/src/app/dashboard/dashboard-state.service.ts","./apps/workplace/src/app/dashboard/dashboard-availability.component.ts","./apps/workplace/src/app/dashboard/dashboard-schedule-item.component.ts","./apps/workplace/src/app/dashboard/dashboard-upcoming.component.ts","./apps/workplace/src/app/dashboard/dashboard-delivery-modal.component.ts","./apps/workplace/src/app/dashboard/dashboard-deliveries.component.ts","./apps/workplace/src/app/dashboard/dashboard-contacts.component.ts","./apps/workplace/src/app/dashboard/dashboard.component.ts","./apps/workplace/src/app/dashboard/dashboard.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    getModule,\n    PlaceMetadata,\n    PlaceVariableBinding,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay } from 'date-fns';\n\nimport { BaseClass, currentUser, HashMap, unique } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { searchStaff, User } from '@placeos/users';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '@placeos/calendar';\n\nexport interface DashboardOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardStateService extends BaseClass {\n    private _options = new BehaviorSubject<DashboardOptions>({});\n    /**  */\n    private _free_spaces = new BehaviorSubject<Space[]>([]);\n    /**  */\n    private _upcoming_events = new BehaviorSubject<CalendarEvent[]>([]);\n    /**  */\n    private _contacts = new BehaviorSubject<User[]>([]);\n    /**  */\n    private _level_occupancy = new BehaviorSubject<BuildingLevel[]>([]);\n    /**  */\n    private _occupancy_binding: PlaceVariableBinding;\n    /**  */\n    public free_spaces = this._free_spaces.asObservable();\n    /**  */\n    public upcoming_events = this._upcoming_events.asObservable();\n    /**  */\n    public contacts = this._contacts.asObservable();\n    /**  */\n    public options = this._options.asObservable();\n\n    public readonly search_results = this._options.pipe(\n        debounceTime(500),\n        switchMap(({ search }) => (search ? searchStaff(search) : of([]))),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /**  */\n    public level_occupancy = this._level_occupancy.asObservable();\n\n    constructor(\n        private _calendar: CalendarService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'building',\n            this._org.active_building\n                .pipe(filter((bld) => !!bld))\n                .subscribe(() => this.updateBuildingMetadata())\n        );\n        if (!this._org.organisation.bindings.area_management) return;\n        const binding = getModule(\n            this._org.organisation.bindings.area_management,\n            'AreaManagement'\n        ).binding('overview');\n        binding.listen().subscribe((d) => this.updateOccupancy(d || {}));\n        binding.bind();\n    }\n\n    public setOptions(options: Partial<DashboardOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public pollFreeSpaces(delay: number = 10 * 1000) {\n        this.updateFreeSpaces();\n        this.interval('free_spaces', () => this.updateFreeSpaces(), delay);\n    }\n\n    public stopPollingFreeSpaces() {\n        this.clearInterval('free_spaces');\n    }\n\n    public pollUpcomingEvents(delay: number = 10 * 1000) {\n        this.updateUpcomingEvents();\n        this.interval(\n            'upcoming_events',\n            () => this.updateUpcomingEvents(),\n            delay\n        );\n    }\n\n    public stopPollingUpcomingEvents() {\n        this.clearInterval('upcoming_events');\n    }\n\n    public async updateContacts() {\n        const metadata: PlaceMetadata = (await showMetadata(\n            currentUser().id,\n            'contacts'\n        ).toPromise()) as any;\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async addContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users.push(user);\n        users = unique(users, 'email');\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async removeContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users = users.filter((u) => u.email !== user.email);\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    private async updateOccupancy(map: HashMap<{ recommendation: number }>) {\n        const levels = [...this._org.levels];\n        levels.sort(\n            (a, b) => map[a.id]?.recommendation - map[b.id]?.recommendation\n        );\n        this._level_occupancy.next(levels);\n    }\n\n    private async updateFreeSpaces() {\n        if (!this._org.building) return;\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const list = await this._calendar\n            .freeBusy({\n                period_start,\n                period_end,\n                zone_ids: this._org.building.id,\n            })\n            .pipe(\n                map((_) =>\n                    _.filter(\n                        (space) =>\n                            !space.availability.length ||\n                            space.availability.find((_) => _.status !== 'busy')\n                    )\n                )\n            )\n            .toPromise();\n        list.sort((a, b) => a.capacity - b.capacity);\n        this._free_spaces.next(list);\n    }\n\n    private async updateUpcomingEvents() {\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const events = await queryEvents({\n            period_start,\n            period_end,\n            calendars: currentUser().email,\n        }).toPromise();\n        this._upcoming_events.next(events);\n    }\n\n    private async updateBuildingMetadata() {\n        const building = this._org.building;\n        const metadata = await showMetadata(building.id, 'bindings').toPromise();\n        if (!(metadata.details as HashMap).occupancy) return;\n        const details = (metadata.details as HashMap).occupancy;\n        const module = getModule(details.sys, details.module, details.index);\n        if (!module) return;\n        if (this._occupancy_binding) {\n            this._occupancy_binding.unbind();\n        }\n        this._occupancy_binding = module.binding('occupancy');\n        this._occupancy_binding.bind();\n        this.subscription(\n            'occupancy_binding',\n            this._occupancy_binding.listen().subscribe((value) => {\n                const levels = Object.keys(value).map((key) => ({\n                    id: key,\n                    ...value[key],\n                }));\n                levels.sort(\n                    (a, b) => a.recommendation_factor - b.recommendation_factor\n                );\n                this._level_occupancy.next(\n                    levels.map((i) => this._org.levelWithID([i.id]))\n                );\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-availability',\n    template: `\n        <h3 class=\"m-0 font-medium text-xl\">Available Now</h3>\n        <div class=\"flex flex-col items-center p-2 bg-white shadow my-4 rounded-lg\">\n            <div class=\"flex items-center w-full mb-2\">\n                <div>Spaces</div>\n            </div>\n            <div free-levels class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-full\"\n                    *ngFor=\"let lvl of levels_free | async | slice: 0:2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    <div class=\"max-w-full truncate\">\n                        {{ lvl.display_name || lvl.name }}\n</div>\n                </a>\n                <span\n                    *ngIf=\"!(levels_free | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                    >No free spaces</span\n                >\n            </div>\n        </div>\n        <div\n            free-spaces\n            class=\"flex items-center flex-col rounded-lg bg-white shadow my-4 p-2\"\n        >\n            <div class=\"flex items-center w-full mb-2\">\n                <div>Rooms</div>\n            </div>\n            <div class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-full\"\n                    *ngFor=\"let space of space_list | async | slice: 0:3\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.id }\"\n                >\n                    <div class=\"max-w-full truncate\">\n                        {{ space.display_name || space.name }}\n                    </div>\n                </a>\n                <span\n                    *ngIf=\"!(space_list | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                    >No free rooms</span\n                >\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n        `,\n    ],\n})\nexport class DashboardAvailabilityComponent implements OnInit, OnDestroy {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: DashboardStateService) {}\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Booking } from '@placeos/bookings';\nimport { isAfter } from 'date-fns';\nimport { BookingLike } from '../schedule/schedule-state.service';\n\n@Component({\n  selector: '[scheduled-item]',\n  template: `\n    <a\n        mat-button\n        class=\"rounded-none my-1 mx-4 w-[calc(100%-2rem)] h-20 bg-white hover:shadow p-0\"\n        [class.opacity-50]=\"has_ended\"\n        [routerLink]=\"['/schedule', 'view', item?.id, type]\"\n    >\n        <div class=\"flex items-center border border-gray-200 rounded-lg\">\n            <div\n                status\n                class=\"h-20 w-20 flex flex-col items-center justify-center text-white leading-tight\"\n                [class.bg-success]=\"status === 'approved'\"\n                [class.bg-pending]=\"status === 'tentative'\"\n                [class.bg-error]=\"status === 'declined'\"\n            >\n                <app-icon class=\"text-2xl\">{{ icon }}</app-icon>\n                <div class=\"font-normal\">\n                    {{\n                        item?.all_day\n                            ? 'All Day'\n                            : (item?.date | date: 'shortTime')\n                    }}\n                </div>\n                <div class=\"capitalize text-xs font-medium\">\n                    ({{ status }})\n                </div>\n            </div>\n            <div class=\"flex-1 flex flex-col text-left p-2\">\n                <div class=\"text-xl pl-1\">\n                    {{ item?.title || 'Untitled Event' }}\n                </div>\n                <div\n                    class=\"flex items-center font-normal\"\n                    *ngIf=\"item?.location || item?.description\"\n                >\n                    <app-icon class=\"text-lg mr-1\">place</app-icon>\n                    <span>\n                        {{\n                            item?.location || item?.description\n                                | slice: 0:255\n                        }}\n                    </span>\n                </div>\n            </div>\n        </div>\n    </a>\n  `,\n  styles: [\n  ]\n})\nexport class DashboardScheduledItemComponent{\n\n  @Input() public item: BookingLike;\n\n  public get type() {\n      return this.item instanceof Booking ? 'booking' : 'event'; \n  }\n\n  public get has_ended() {\n      return (\n          !this.item ||\n          this.item.id === 'date' ||\n          isAfter(new Date(), this.item.date + this.item.duration * 60 * 1000)\n      );\n  }\n\n  public get icon() {\n      if (this.status === 'declined') return 'cancel';\n      if (this.item.asset_id) {\n          switch ((this.item as Booking).booking_type) {\n              case 'desk':\n                  return 'view_quilt';\n              case 'parking':\n                  return 'local_parking';\n          }\n      }\n      return 'event';\n  }\n\n  public get status() {\n      if (!this.item || this.item.id === 'date') return 'declined';\n      return this.item.status;\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Space } from '@placeos/spaces';\nimport { addDays, addMonths, isSameDay } from 'date-fns';\nimport { map, tap } from 'rxjs/operators';\n\nimport { MapLocateModalComponent } from '../overlays/map-locate-modal.component';\nimport { BookingLike, ScheduleStateService } from '../schedule/schedule-state.service';\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-upcoming',\n    template: `\n        <h3 class=\"m-0 mb-4 font-medium text-xl\">Your Bookings</h3>\n        <div\n            name=\"event\"\n            *ngFor=\"let event of upcoming_events | async | slice: 0:3\"\n            class=\"flex bg-white shadow rounded-lg relative overflow-hidden mb-4\"\n        >\n            <div name=\"status\" class=\"absolute rounded-lg\"></div>\n            <div name=\"details\" class=\"flex-1 mr-2\">\n                <div name=\"time\" class=\"text-sm text-bold mb-2\">\n                    {{ event.date | date: 'shortTime' }}\n                </div>\n                <div name=\"title\" class=\"text-sm text-bold mb-2\">\n                    {{ event.title }}\n                </div>\n                <div name=\"space\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'room' }\"\n                    ></app-icon>\n                    <a\n                        class=\"text-black\"\n                        [class.underline]=\"!!event.space\"\n                        [matTooltip]=\"event.space ? 'Locate Space' : ''\"\n                        (click)=\"event.space ? locateSpace(event.space) : ''\"\n                    >\n                        {{\n                            event.space?.display_name ||\n                                event.space?.name ||\n                                '&lt;No Location&gt;'\n                        }}\n                        {{\n                            event.space?.level?.display_name ||\n                            event.space?.level?.name\n                                ? ', ' + event.space.level.display_name ||\n                                  event.space.level.name\n                                : ''\n                        }}\n                    </a>\n                </div>\n                <div name=\"attendees\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'group' }\"\n                    ></app-icon>\n                    {{ event.guests.length }} Guest{{\n                        event.guests.length === 1 ? '' : 's'\n                    }}\n                </div>\n                <div name=\"guests\" class=\"flex space-x-2 text-sm\">\n                    <a-user-avatar\n                        *ngFor=\"let guest of event.guests\"\n                        [user]=\"guest\"\n                    ></a-user-avatar>\n                </div>\n            </div>\n            <a\n                button\n                mat-button\n                *ngIf=\"event.meeting_link\"\n                class=\"uppercase h-12\"\n                [href]=\"event.meeting_link\"\n                >Join Call</a\n            >\n        </div>\n\n        <!-- Add scheduled Bookings -->\n        <div class=\"w-full flex-1 overflow-hidden\">\n            <div\n                scheduled-item\n                *ngFor=\"\n                    let item of event_list | async;\n                    trackBy: trackByFn\n                \"\n                [item] = \"item\"\n            >\n            </div>\n        </div>\n\n        <p\n            *ngIf=\"!((upcoming_events | async).length + (event_list | async).length)\"\n            class=\"text-dark-fade text-center w-full\"\n        >\n            No upcoming events for today\n        </p>\n\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='time'] {\n                color: #00529b;\n            }\n\n            [name='event'] {\n                padding: 1rem 1rem 1rem 2rem;\n            }\n\n            [name='status'] {\n                top: 1rem;\n                left: -0.8rem;\n                height: 2.5rem;\n                width: 1.6rem;\n                background-color: #00529b;\n            }\n\n            button {\n                height: 3em;\n            }\n\n            app-icon {\n                margin-left: -0.25rem;\n            }\n        `,\n    ],\n})\nexport class DashboardUpcomingComponent implements OnInit, OnDestroy {\n    public readonly today = new Date();\n    public readonly max_date = addMonths(this.today, 4);\n    public readonly upcoming_events = this._state.upcoming_events;\n    public readonly event_list = this._schedule.events;\n\n    constructor(\n        private _state: DashboardStateService,\n        private _schedule: ScheduleStateService,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n        this._schedule.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n        this._schedule.stopPolling();\n    }\n\n    public locateSpace(space: Space) {\n        this._dialog.open(MapLocateModalComponent, {\n            data: { item: { ...space, level: null } },\n        });\n    }\n\n    public trackByFn(idx: number, event: BookingLike) {\n        return event ? `${event.id}|${event.date}` : undefined;\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent } from '@placeos/common';\n\n@Component({\n    selector: 'dashboard-delivery-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h3>Register Delivery</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-2 w-[24rem]\" [formGroup]=\"form\">\n            <div>\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of items being delivered\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <textarea\n                        matInput\n                        placeholder=\"Description of items being delivered\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Sender:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of sender\"\n                        formControlName=\"sender\"\n                    />\n                    <mat-error>Sender is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Priority:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <mat-select placeholder=\"Low\" formControlName=\"priority\">\n                        <mat-option>Very Low</mat-option>\n                        <mat-option>Low</mat-option>\n                        <mat-option>Normal</mat-option>\n                        <mat-option>High</mat-option>\n                        <mat-option>Very Height</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            class=\"p-2 flex items-center justify-center border-t border-gray-100\"\n        >\n            <button mat-button class=\"w-32\" (click)=\"register()\">\n                Register\n            </button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveryModalComponent {\n    @Output() public events = new EventEmitter<DialogEvent>();\n\n    public readonly form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        sender: new FormControl(''),\n        priority: new FormControl(''),\n    });\n\n    public register() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this.events.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\n\n@Component({\n    selector: 'dashboard-deliveries',\n    template: `\n        <h3 class=\"m-0 my-2 font-medium text-xl\">Deliveries</h3>\n        <div class=\"bg-white shadow p-2 rounded\">\n            <div class=\"divide-y\" *ngIf=\"deliveries?.length; else empty_state\">\n                <div\n                    class=\"flex items-center py-2\"\n                    *ngFor=\"let item of deliveries\"\n                >\n                    <div class=\"flex-1 pl-2\">\n                        <div class=\"\">\n                            {{ item?.name || 'Untitled Delivery' }}\n                        </div>\n                        <div class=\"text-xs opacity-60\">\n                            {{\n                                item && item.received\n                                    ? (item.received | date: 'medium')\n                                    : 'Not received'\n                            }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"m-4 h-2 w-2 rounded-full\"\n                        [class.bg-pending]=\"!item.received\"\n                        [class.bg-success]=\"item.received\"\n                    ></div>\n                </div>\n                <button\n                    mat-button\n                    class=\"w-full mt-2\"\n                    (click)=\"registerDelivery()\"\n                >\n                    Register Delivery\n                </button>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 flex items-center justify-center opacity-40\">\n                No registered deliveries\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveriesComponent {\n    public deliveries = [\n        { name: 'USB-C Cables', received: Date.now() },\n        { name: 'Desk Fan' },\n    ];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async registerDelivery() {\n        const ref = this._dialog.open(DashboardDeliveryModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.events\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details.reason !== 'done') return;\n        this.deliveries.push(details.metadata);\n        ref.close();\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { BaseClass, SettingsService } from '@placeos/common';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-contacts',\n    template: `\n        <h3 class=\"m-0 mb-2 font-medium text-xl\">Colleagues</h3>\n        <div\n            name=\"contact-list\"\n            class=\"bg-gray-400 shadow rounded-lg p-2 pl-0 space-y-2 flex flex-wrap\"\n        >\n            <div\n                name=\"contact\"\n                *ngFor=\"let user of contacts | async\"\n                class=\"bg-white rounded-lg flex-1 flex flex-col items-center p-2 relative\"\n            >\n                <a-user-avatar\n                    class=\"text-2xl mb-2\"\n                    [user]=\"user\"\n                ></a-user-avatar>\n                <div name=\"contact-name\" class=\"text-sm mb-2\">\n                    {{ user.name }}\n                </div>\n                <div name=\"location\" class=\"flex items-center text-sm\">\n                    <div name=\"dot\" class=\"mr-2\"></div>\n                    Level 12\n                </div>\n                <button mat-icon-button name=\"close\" (click)=\"removeUser(user)\">\n                    <app-icon\n                        [icon]=\"{ class: 'material-icons', content: 'close' }\"\n                    ></app-icon>\n                </button>\n            </div>\n            <button\n                name=\"contact\"\n                mat-button\n                class=\"rounded-lg flex-1 w-full\"\n                [matMenuTriggerFor]=\"menu\"\n                (menuOpened)=\"focusInput()\"\n                (menuClosed)=\"clearInput()\"\n            >\n                <div class=\"flex flex-col items-center p-4 text-black w-full\">\n                    <app-icon\n                        class=\"text-2xl\"\n                        [icon]=\"{\n                            class: 'material-icons',\n                            content: 'person_add'\n                        }\"\n                    ></app-icon>\n                    <span class=\"w-full leading-tight whitespace-normal\"\n                        >Click to add a person to contacts</span\n                    >\n                </div>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <div\n                mat-menu-item\n                class=\"p-0\"\n                (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n            >\n                <input\n                    #input\n                    class=\"w-full p-2 text-base\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"updateSearch(search_str)\"\n                    placeholder=\"Search for user...\"\n                />\n            </div>\n            <button mat-menu-item *ngIf=\"!(search_results | async)?.length\">\n                {{\n                    !search_str\n                        ? 'Type to search for users...'\n                        : 'No matches for \"' + search_str + '\"'\n                }}\n            </button>\n            <button\n                mat-menu-item\n                *ngFor=\"let user of search_results | async | slice: 0:8\"\n                (click)=\"addUser(user)\"\n            >\n                <div class=\"flex items-center leading-tight\">\n                    <a-user-avatar\n                        class=\"text-xl mr-2\"\n                        [user]=\"user\"\n                    ></a-user-avatar>\n                    <div class=\"flex-1\">\n                        <div>{{ user.name }}</div>\n                        <div class=\"text-xs text-dark-fade\">\n                            {{ user.email }}\n                        </div>\n                    </div>\n                </div>\n            </button>\n        </mat-menu>\n        <dashboard-deliveries *ngIf=\"can_deliver\"></dashboard-deliveries>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='contact-list'] {\n                padding: 0 0.5rem 0.5rem 0;\n            }\n\n            [name='contact'] {\n                min-width: 8rem;\n                width: 8rem;\n                margin-left: 0.5rem;\n                margin-top: 0.5rem;\n            }\n\n            [name='contact-name'] {\n                font-weight: 400;\n            }\n\n            [name='dot'] {\n                height: 8px;\n                width: 8px;\n                border-radius: 8px;\n                background-color: #22992e;\n            }\n\n            button[name='close'] {\n                position: absolute;\n                display: none;\n                top: 0.25rem;\n                right: 0.25rem;\n            }\n\n            [name='contact']:hover button[name='close'] {\n                display: initial;\n            }\n\n            button[name='contact'] {\n                background-color: #f0f0f0;\n                border: none;\n                min-width: calc(100% - 0.5rem) !important;\n            }\n        `,\n    ],\n})\nexport class DashboardContactsComponent extends BaseClass {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.search_results;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.setOptions({ search: s });\n\n    public search_str: string = '';\n\n    @ViewChild('input') private _input_el: ElementRef;\n\n    public get can_deliver() {\n        return !!this._settings.get('app.can_deliver');\n    }\n\n    constructor(\n        private _state: DashboardStateService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.updateContacts();\n    }\n\n    public focusInput() {\n        this.timeout('focus', () => {\n            if (this._input_el) {\n                this._input_el.nativeElement.focus();\n            }\n        });\n    }\n\n    public clearInput() {\n        this.search_str = '';\n        this._state.setOptions({ search: '' });\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[dashboard]',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2 bg-gray-200\">\n            <div\n                class=\"relative z-0 flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <main\n                    class=\"flex flex-1 px-0 sm:px-8 flex-wrap overflow-auto h-px sm:h-auto\"\n                >\n                    <a-dashboard-availability\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-availability>\n                    <a-dashboard-upcoming\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-upcoming>\n                    <a-dashboard-contacts\n                        *ngIf=\"!hide_contacts\"\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-contacts>\n                </main>\n            </div>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n\n            .top {\n                background-color: #007ac8;\n            }\n\n            a[button].tile {\n                flex: 1;\n                border-radius: 0;\n                background-color: #fff;\n                color: rgba(0, 0, 0, 0.85);\n                border: none;\n                border-right: 1px solid #ccc;\n            }\n\n            a[button].tile:last-child {\n                border: none;\n            }\n        `,\n    ],\n})\nexport class DashboardComponent {\n    constructor(private _settings: SettingsService) {}\n\n    public get hide_contacts() {\n        return this._settings.get('app.hide_contacts') !== false;\n    }\n}\n","import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { DashboardAvailabilityComponent } from './dashboard-availability.component';\nimport { DashboardContactsComponent } from './dashboard-contacts.component';\nimport { DashboardDeliveriesComponent } from './dashboard-deliveries.component';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\nimport { DashboardScheduledItemComponent } from './dashboard-schedule-item.component';\nimport { DashboardUpcomingComponent } from './dashboard-upcoming.component';\nimport { DashboardComponent } from './dashboard.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        DashboardAvailabilityComponent,\n        DashboardUpcomingComponent,\n        DashboardContactsComponent,\n        DashboardDeliveriesComponent,\n        DashboardDeliveryModalComponent,\n        DashboardScheduledItemComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        SharedComponentModule,\n        ReactiveFormsModule,\n        ScrollingModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DashboardModule {}\n"],"sourceRoot":"webpack:///","file":"apps_workplace_src_app_dashboard_dashboard_module_ts.js"}