{"version":3,"file":"apps_workplace_src_app_dashboard_dashboard_module_ts.js","mappings":"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","names":["DashboardStateService","AsyncHandler","constructor","_settings","_calendar","_org","_event_form","super","this","_options","BehaviorSubject","_free_spaces","_upcoming_events","_contacts","_level_occupancy","free_spaces","asObservable","upcoming_events","contacts","options","search_results","pipe","debounceTime","switchMap","search","searchStaff","of","catchError","_","shareReplay","level_occupancy","init","_this","_asyncToGenerator","initialised","first","toPromise","subscription","active_building","filter","bld","subscribe","updateBuildingMetadata","sys_id","binding","getModule","listen","d","updateOccupancy","bind","setOptions","next","getValue","pollFreeSpaces","delay","updateFreeSpaces","interval","stopPollingFreeSpaces","clearInterval","pollUpcomingEvents","updateUpcomingEvents","stopPollingUpcomingEvents","updateContacts","_this2","metadata","showMetadata","currentUser","id","details","Array","map","i","User","addContact","user","_this3","users","push","unique","updateMetadata","name","description","removeContact","_this4","u","email","_this5","levels","sort","a","b","recommendation","_this6","building","mins","Math","abs","differenceInMinutes","Date","now","endOfDay","zone_ids","capacity","features","show_fav","form","patchValue","date","duration","list","available_spaces","take","_this7","period_start","floor","valueOf","period_end","event_list","get","queryBookings","type","newCalendarEventFromBooking","queryEvents","calendars","catch","_this8","occupancy","module","sys","index","_occupancy_binding","unbind","value","Object","keys","key","recommendation_factor","levelWithID","static","t","i0","i1","i2","i3","i4","core","Yz7","factory","ɵfac","providedIn","_c0","_c1","lvl_r3","display_name","_c2","space_r6","DashboardAvailabilityComponent_div_12_a_5_Template","DashboardAvailabilityComponent_div_12_span_8_Template","ctx_r2","space_list","length","DashboardAvailabilityComponent","_state","levels_free","ngOnInit","ngOnDestroy","Xpm","selectors","decls","vars","consts","template","rf","ctx","DashboardAvailabilityComponent_a_7_Template","DashboardAvailabilityComponent_span_10_Template","DashboardAvailabilityComponent_div_12_Template","tmp_2_0","event_r1","guests","DashboardUpcomingComponent_div_2_div_14_a_user_avatar_1_Template","meeting_link","_r11","$implicit","ctx_r10","space","asset_id","locateSpace","DashboardUpcomingComponent_div_2_div_13_Template","DashboardUpcomingComponent_div_2_div_14_Template","DashboardUpcomingComponent_div_2_a_15_Template","title","asset_name","level","DashboardUpcomingComponent","_schedule","_dialog","today","max_date","addMonths","events","state","is_done","map_id","zones","startPolling","stopPolling","open","MapLocateModalComponent","data","item","trackByFn","idx","event","undefined","DashboardUpcomingComponent_div_2_Template","DashboardDeliveryModalComponent","EventEmitter","FormGroup","FormControl","Validators","required","sender","priority","register","markAllAsTouched","valid","emit","reason","outputs","item_r4","received","DashboardDeliveriesComponent_div_3_div_1_Template","_r6","ctx_r5","registerDelivery","ctx_r0","deliveries","DashboardDeliveriesComponent","ref","Promise","race","componentInstance","afterClosed","close","DashboardDeliveriesComponent_div_3_Template","DashboardDeliveriesComponent_ng_template_4_Template","_r1","user_r6","_r8","ctx_r7","removeUser","ctx_r3","search_str","user_r9","addUser","DashboardContactsComponent","can_deliver","updateSearch","s","focusInput","timeout","_input_el","nativeElement","focus","clearInput","viewQuery","DashboardContactsComponent_div_3_Template","$event","stopPropagation","preventDefault","DashboardContactsComponent_button_15_Template","DashboardContactsComponent_button_17_Template","DashboardContactsComponent_dashboard_deliveries_20_Template","tmp_4_0","ROUTES","path","component","DashboardComponent","hide_availability","hide_contacts","attrs","DashboardComponent_a_dashboard_availability_4_Template","DashboardComponent_a_dashboard_contacts_6_Template","DashboardModule","oAB","cJS","CommonModule","FormsModule","SharedComponentModule","ReactiveFormsModule","ScrollingModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/dashboard/dashboard-state.service.ts","./apps/workplace/src/app/dashboard/dashboard-availability.component.ts","./apps/workplace/src/app/dashboard/dashboard-upcoming.component.ts","./apps/workplace/src/app/dashboard/dashboard-delivery-modal.component.ts","./apps/workplace/src/app/dashboard/dashboard-deliveries.component.ts","./apps/workplace/src/app/dashboard/dashboard-contacts.component.ts","./apps/workplace/src/app/dashboard/dashboard.component.ts","./apps/workplace/src/app/dashboard/dashboard.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    getModule,\n    PlaceMetadata,\n    PlaceVariableBinding,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n} from 'rxjs/operators';\nimport { differenceInMinutes, endOfDay } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    currentUser,\n    HashMap,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport {\n    CalendarEvent,\n    EventFormService,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { searchStaff, User } from '@placeos/users';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '@placeos/calendar';\nimport { Booking, queryBookings } from '@placeos/bookings';\n\nexport interface DashboardOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardStateService extends AsyncHandler {\n    private _options = new BehaviorSubject<DashboardOptions>({});\n    /**  */\n    private _free_spaces = new BehaviorSubject<Space[]>([]);\n    /**  */\n    private _upcoming_events = new BehaviorSubject<(CalendarEvent | Booking)[]>(\n        []\n    );\n    /**  */\n    private _contacts = new BehaviorSubject<User[]>([]);\n    /**  */\n    private _level_occupancy = new BehaviorSubject<BuildingLevel[]>([]);\n    /**  */\n    private _occupancy_binding: PlaceVariableBinding;\n    /**  */\n    public free_spaces = this._free_spaces.asObservable();\n    /**  */\n    public upcoming_events = this._upcoming_events.asObservable();\n    /**  */\n    public contacts = this._contacts.asObservable();\n    /**  */\n    public options = this._options.asObservable();\n\n    public readonly search_results = this._options.pipe(\n        debounceTime(500),\n        switchMap(({ search }) => (search ? searchStaff(search) : of([]))),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /**  */\n    public level_occupancy = this._level_occupancy.asObservable();\n\n    constructor(\n        private _settings: SettingsService,\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _event_form: EventFormService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'building',\n            this._org.active_building\n                .pipe(filter((bld) => !!bld))\n                .subscribe(() => this.updateBuildingMetadata())\n        );\n        let sys_id = this._org.binding('contact_tracing');\n        if (!sys_id) return;\n        const binding = getModule(sys_id, 'AreaManagement').binding('overview');\n        binding.listen().subscribe((d) => this.updateOccupancy(d || {}));\n        binding.bind();\n    }\n\n    public setOptions(options: Partial<DashboardOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public pollFreeSpaces(delay: number = 10 * 1000) {\n        this.updateFreeSpaces();\n        this.interval('free_spaces', () => this.updateFreeSpaces(), delay);\n    }\n\n    public stopPollingFreeSpaces() {\n        this.clearInterval('free_spaces');\n    }\n\n    public pollUpcomingEvents(delay: number = 10 * 1000) {\n        this.updateUpcomingEvents();\n        this.interval(\n            'upcoming_events',\n            () => this.updateUpcomingEvents(),\n            delay\n        );\n    }\n\n    public stopPollingUpcomingEvents() {\n        this.clearInterval('upcoming_events');\n    }\n\n    public async updateContacts() {\n        const metadata: PlaceMetadata = (await showMetadata(\n            currentUser().id,\n            'contacts'\n        ).toPromise()) as any;\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async addContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users.push(user);\n        users = unique(users, 'email');\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async removeContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users = users.filter((u) => u.email !== user.email);\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    private async updateOccupancy(map: HashMap<{ recommendation: number }>) {\n        const levels = [...this._org.levels];\n        levels.sort(\n            (a, b) => map[a.id]?.recommendation - map[b.id]?.recommendation\n        );\n        this._level_occupancy.next(levels);\n    }\n\n    private async updateFreeSpaces() {\n        if (!this._org.building) return;\n        const mins = Math.abs(\n            differenceInMinutes(Date.now(), endOfDay(Date.now()))\n        );\n        this._event_form.setOptions({\n            zone_ids: [],\n            capacity: 0,\n            features: [],\n            show_fav: false,\n        });\n        this._event_form.form.patchValue({ date: Date.now(), duration: mins });\n        const list = await this._event_form.available_spaces\n            .pipe(take(1))\n            .toPromise();\n        list.sort((a, b) => a.capacity - b.capacity);\n        this._free_spaces.next(list);\n    }\n\n    private async updateUpcomingEvents() {\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const events = await (this._settings.get('app.events.use_bookings')\n            ? queryBookings({\n                  period_start,\n                  period_end,\n                  type: 'room',\n                  email: currentUser().email,\n              }).pipe(map((_) => _.map((i) => newCalendarEventFromBooking(i))))\n            : queryEvents({\n                  period_start,\n                  period_end,\n                  calendars: currentUser().email,\n              })\n        )\n            .toPromise()\n            .catch((_) => []);\n        const bookings = await queryBookings({\n            period_start,\n            period_end,\n            type: 'desk',\n            user: currentUser().email,\n        })\n            .toPromise()\n            .catch((_) => []);\n        const event_list = [...events, ...bookings].sort(\n            (a, b) => a.date - b.date\n        );\n        this._upcoming_events.next(event_list);\n    }\n\n    private async updateBuildingMetadata() {\n        const building = this._org.building;\n        const metadata = await showMetadata(\n            building.id,\n            'bindings'\n        ).toPromise();\n        if (!(metadata.details as HashMap).occupancy) return;\n        const details = (metadata.details as HashMap).occupancy;\n        const module = getModule(details.sys, details.module, details.index);\n        if (!module) return;\n        if (this._occupancy_binding) {\n            this._occupancy_binding.unbind();\n        }\n        this._occupancy_binding = module.binding('occupancy');\n        this._occupancy_binding.bind();\n        this.subscription(\n            'occupancy_binding',\n            this._occupancy_binding.listen().subscribe((value) => {\n                const levels = Object.keys(value).map((key) => ({\n                    id: key,\n                    ...value[key],\n                }));\n                levels.sort(\n                    (a, b) => a.recommendation_factor - b.recommendation_factor\n                );\n                this._level_occupancy.next(\n                    levels.map((i) => this._org.levelWithID([i.id]))\n                );\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-availability',\n    template: `\n        <h3 class=\"m-0 font-medium text-xl\">Available Now</h3>\n        <div\n            class=\"flex flex-col items-center p-2 bg-base-100 shadow my-4 rounded-lg\"\n        >\n            <div class=\"flex items-center w-full mb-2\">\n                <div>Building Levels</div>\n            </div>\n            <div free-levels class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    btn\n                    matRipple\n                    class=\"w-full\"\n                    *ngFor=\"let lvl of levels_free | async | slice: 0:2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    <div class=\"max-w-full truncate\">\n                        {{ lvl.display_name || lvl.name }}\n                    </div>\n                </a>\n                <span\n                    *ngIf=\"!(levels_free | async).length\"\n                    class=\"text-black/30/30 text-sm mb-2\"\n                    >No free spaces in building</span\n                >\n            </div>\n        </div>\n        <div\n            free-spaces\n            class=\"flex items-center flex-col rounded-lg bg-base-100 shadow my-4 p-2\"\n            *ngIf=\"(space_list | async)?.length\"\n        >\n            <div class=\"flex items-center w-full mb-2\">\n                <div>Spaces</div>\n            </div>\n            <div class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    btn\n                    matRipple\n                    class=\"w-full\"\n                    *ngFor=\"let space of space_list | async | slice: 0:3\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.id }\"\n                >\n                    <div class=\"max-w-full truncate\">\n                        {{ space.display_name || space.name }}\n                    </div>\n                </a>\n                <span\n                    *ngIf=\"!(space_list | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                    >No free spaces</span\n                >\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n        `,\n    ],\n})\nexport class DashboardAvailabilityComponent implements OnInit, OnDestroy {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: DashboardStateService) {}\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { Space } from '@placeos/spaces';\nimport { addMonths } from 'date-fns';\nimport { map } from 'rxjs/operators';\n\nimport { MapLocateModalComponent } from '@placeos/components';\nimport {\n    BookingLike,\n    ScheduleStateService,\n} from '../schedule/schedule-state.service';\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-upcoming',\n    template: `\n        <h3 class=\"m-0 mb-4 font-medium text-xl\">Your Bookings</h3>\n        <div\n            name=\"event\"\n            *ngFor=\"let event of event_list | async | slice: 0:3\"\n            class=\"flex bg-base-100 shadow rounded-lg relative overflow-hidden mb-4\"\n        >\n            <div\n                name=\"status\"\n                class=\"absolute rounded-lg\"\n                [class.bg-primary]=\"event.asset_id\"\n            ></div>\n            <div name=\"details\" class=\"flex-1 mr-2\">\n                <div time class=\"text-primary text-sm font-bold mb-2\">\n                    {{ event.date | date: 'shortTime' }}\n                </div>\n                <div name=\"title\" class=\"text-sm font-bold mb-2\">\n                    {{ event.title }}\n                </div>\n                <div name=\"space\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon class=\"mr-2\">room</app-icon>\n                    <a\n                        class=\"text-black\"\n                        [class.underline]=\"!!event.space || !!event.asset_id\"\n                        [matTooltip]=\"event.space ? 'Locate Space' : ''\"\n                        (click)=\"\n                            event.space || event.asset_id\n                                ? locateSpace(event.space || event)\n                                : ''\n                        \"\n                    >\n                        {{\n                            event.space?.display_name ||\n                                event.space?.name ||\n                                event.asset_name ||\n                                '&lt;No Location&gt;'\n                        }}\n                        {{\n                            event.space?.level?.display_name ||\n                            event.space?.level?.name\n                                ? ', ' + event.space.level.display_name ||\n                                  event.space.level.name\n                                : ''\n                        }}\n                    </a>\n                </div>\n                <div\n                    name=\"attendees\"\n                    class=\"text-xs flex items-center mb-2\"\n                    *ngIf=\"event.guests\"\n                >\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'group' }\"\n                    ></app-icon>\n                    {{ event.guests?.length }} Guest{{\n                        event.guests?.length === 1 ? '' : 's'\n                    }}\n                </div>\n                <div\n                    name=\"guests\"\n                    class=\"flex space-x-2 text-sm\"\n                    *ngIf=\"event.guests\"\n                >\n                    <a-user-avatar\n                        *ngFor=\"let guest of event.guests\"\n                        [user]=\"guest\"\n                    ></a-user-avatar>\n                </div>\n            </div>\n            <a\n                button\n                btn\n                matRipple\n                *ngIf=\"event.meeting_link\"\n                class=\"uppercase h-12\"\n                [href]=\"event.meeting_link\"\n                >Join Call</a\n            >\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='event'] {\n                padding: 1rem 1rem 1rem 2rem;\n            }\n\n            [name='status'] {\n                top: 1rem;\n                left: -0.8rem;\n                height: 2.5rem;\n                width: 1.6rem;\n                background-color: #00529b;\n            }\n\n            button {\n                height: 3em;\n            }\n\n            app-icon {\n                margin-left: -0.25rem;\n            }\n        `,\n    ],\n})\nexport class DashboardUpcomingComponent implements OnInit, OnDestroy {\n    public readonly today = new Date();\n    public readonly max_date = addMonths(this.today, 4);\n    public readonly upcoming_events = this._state.upcoming_events;\n    public readonly event_list = this._schedule.events.pipe(\n        map((list) => {\n            const updated_list = list\n                .filter((_) => _.state !== 'done' && _.is_done !== true)\n                .map((_) =>\n                    _.space\n                        ? _\n                        : {\n                              ..._,\n                              space: {\n                                  name: _.asset_name || _.asset_id,\n                                  map_id: _.asset_id,\n                                  level: this._org.levelWithID(_.zones),\n                                  zones: _.zones,\n                              },\n                          }\n                );\n            return updated_list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: DashboardStateService,\n        private _schedule: ScheduleStateService,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n        this._schedule.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n        this._schedule.stopPolling();\n    }\n\n    public locateSpace(space: Space) {\n        this._dialog.open(MapLocateModalComponent, {\n            data: { item: { ...space, level: null } },\n        });\n    }\n\n    public trackByFn(idx: number, event: BookingLike) {\n        return event ? `${event.id}|${event.date}` : undefined;\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent } from '@placeos/common';\n\n@Component({\n    selector: 'dashboard-delivery-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h3>Register Delivery</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-2 w-[24rem]\" [formGroup]=\"form\">\n            <div>\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of items being delivered\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <textarea\n                        matInput\n                        placeholder=\"Description of items being delivered\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Sender:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of sender\"\n                        formControlName=\"sender\"\n                    />\n                    <mat-error>Sender is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Priority:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <mat-select placeholder=\"Low\" formControlName=\"priority\">\n                        <mat-option>Very Low</mat-option>\n                        <mat-option>Low</mat-option>\n                        <mat-option>Normal</mat-option>\n                        <mat-option>High</mat-option>\n                        <mat-option>Very Height</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            class=\"p-2 flex items-center justify-center border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"register()\">\n                Register\n            </button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveryModalComponent {\n    @Output() public events = new EventEmitter<DialogEvent>();\n\n    public readonly form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        sender: new FormControl(''),\n        priority: new FormControl(''),\n    });\n\n    public register() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this.events.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\n\n@Component({\n    selector: 'dashboard-deliveries',\n    template: `\n        <h3 class=\"m-0 my-2 font-medium text-xl\">Deliveries</h3>\n        <div class=\"bg-base-100 shadow p-2 rounded\">\n            <div class=\"divide-y\" *ngIf=\"deliveries?.length; else empty_state\">\n                <div\n                    class=\"flex items-center py-2\"\n                    *ngFor=\"let item of deliveries\"\n                >\n                    <div class=\"flex-1 pl-2\">\n                        <div class=\"\">\n                            {{ item?.name || 'Untitled Delivery' }}\n                        </div>\n                        <div class=\"text-xs opacity-60\">\n                            {{\n                                item && item.received\n                                    ? (item.received | date: 'medium')\n                                    : 'Not received'\n                            }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"m-4 h-2 w-2 rounded-full\"\n                        [class.bg-warning]=\"!item.received\"\n                        [class.bg-success]=\"item.received\"\n                    ></div>\n                </div>\n                <button\n                    matRipple\n                    class=\"w-full mt-2\"\n                    (click)=\"registerDelivery()\"\n                >\n                    Register Delivery\n                </button>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 flex items-center justify-center opacity-40\">\n                No registered deliveries\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveriesComponent {\n    public deliveries = [\n        { name: 'USB-C Cables', received: Date.now() },\n        { name: 'Desk Fan' },\n    ];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async registerDelivery() {\n        const ref = this._dialog.open(DashboardDeliveryModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.events\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details.reason !== 'done') return;\n        this.deliveries.push(details.metadata);\n        ref.close();\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-contacts',\n    template: `\n        <h3 class=\"m-0 mb-2 font-medium text-xl\">Colleagues</h3>\n        <div\n            name=\"contact-list\"\n            class=\"bg-base-300 border border-base-200 shadow rounded-lg p-2 pl-0 space-y-2 flex flex-wrap\"\n        >\n            <div\n                name=\"contact\"\n                *ngFor=\"let user of contacts | async\"\n                class=\"bg-base-100 rounded-lg flex-1 flex flex-col items-center p-2 relative\"\n            >\n                <a-user-avatar\n                    class=\"text-2xl mb-2\"\n                    [user]=\"user\"\n                ></a-user-avatar>\n                <div name=\"contact-name\" class=\"text-sm mb-2\">\n                    {{ user.name }}\n                </div>\n                <!-- <div name=\"location\" class=\"flex items-center text-sm\">\n                    <div name=\"dot\" class=\"mr-2\"></div>\n                    Level 12\n                </div> -->\n                <button icon name=\"close\" (click)=\"removeUser(user)\">\n                    <app-icon\n                        [icon]=\"{ class: 'material-icons', content: 'close' }\"\n                    ></app-icon>\n                </button>\n            </div>\n            <button\n                name=\"contact\"\n                btn\n                matRipple\n                class=\"rounded-lg flex-1 w-full\"\n                [matMenuTriggerFor]=\"menu\"\n                (menuOpened)=\"focusInput()\"\n                (menuClosed)=\"clearInput()\"\n            >\n                <div class=\"flex flex-col items-center p-4 text-black w-full\">\n                    <app-icon\n                        class=\"text-2xl\"\n                        [icon]=\"{\n                            class: 'material-icons',\n                            content: 'person_add'\n                        }\"\n                    ></app-icon>\n                    <span class=\"w-full leading-tight whitespace-normal\"\n                        >Click to add a person to contacts</span\n                    >\n                </div>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <div\n                mat-menu-item\n                class=\"p-0\"\n                (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n            >\n                <input\n                    #input\n                    class=\"w-full p-2 text-base\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"updateSearch(search_str)\"\n                    placeholder=\"Search for user...\"\n                />\n            </div>\n            <button mat-menu-item *ngIf=\"!(search_results | async)?.length\">\n                {{\n                    !search_str\n                        ? 'Type to search for users...'\n                        : 'No matches for \"' + search_str + '\"'\n                }}\n            </button>\n            <button\n                mat-menu-item\n                *ngFor=\"let user of search_results | async | slice: 0:8\"\n                (click)=\"addUser(user)\"\n            >\n                <div class=\"flex items-center leading-tight\">\n                    <a-user-avatar\n                        class=\"text-xl mr-2\"\n                        [user]=\"user\"\n                    ></a-user-avatar>\n                    <div class=\"flex-1\">\n                        <div>{{ user.name }}</div>\n                        <div class=\"text-xs text-dark-fade\">\n                            {{ user.email }}\n                        </div>\n                    </div>\n                </div>\n            </button>\n        </mat-menu>\n        <dashboard-deliveries *ngIf=\"can_deliver\"></dashboard-deliveries>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='contact-list'] {\n                padding: 0 0.5rem 0.5rem 0;\n            }\n\n            [name='contact'] {\n                min-width: 8rem;\n                width: 8rem;\n                margin-left: 0.5rem;\n                margin-top: 0.5rem;\n            }\n\n            [name='contact-name'] {\n                font-weight: 400;\n            }\n\n            [name='dot'] {\n                height: 8px;\n                width: 8px;\n                border-radius: 8px;\n                background-color: #22992e;\n            }\n\n            button[name='close'] {\n                position: absolute;\n                display: none;\n                top: 0.25rem;\n                right: 0.25rem;\n            }\n\n            [name='contact']:hover button[name='close'] {\n                display: initial;\n            }\n\n            button[name='contact'] {\n                background-color: #f0f0f0;\n                border: none;\n                min-width: calc(100% - 0.5rem) !important;\n            }\n        `,\n    ],\n})\nexport class DashboardContactsComponent extends AsyncHandler {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.search_results;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.setOptions({ search: s });\n\n    public search_str: string = '';\n\n    @ViewChild('input') private _input_el: ElementRef;\n\n    public get can_deliver() {\n        return !!this._settings.get('app.can_deliver');\n    }\n\n    constructor(\n        private _state: DashboardStateService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.updateContacts();\n    }\n\n    public focusInput() {\n        this.timeout('focus', () => {\n            if (this._input_el) {\n                this._input_el.nativeElement.focus();\n            }\n        });\n    }\n\n    public clearInput() {\n        this.search_str = '';\n        this._state.setOptions({ search: '' });\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[dashboard]',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2 bg-base-200\">\n            <div\n                class=\"relative z-0 flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <main\n                    class=\"flex flex-1 px-0 sm:px-8 flex-wrap overflow-auto h-px sm:h-auto\"\n                >\n                    <a-dashboard-availability\n                        *ngIf=\"!hide_availability\"\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-availability>\n                    <a-dashboard-upcoming\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-upcoming>\n                    <a-dashboard-contacts\n                        *ngIf=\"!hide_contacts\"\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-contacts>\n                </main>\n            </div>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n\n            .top {\n                background-color: #007ac8;\n            }\n\n            a[button].tile {\n                flex: 1;\n                border-radius: 0;\n                background-color: #fff;\n                color: rgba(0, 0, 0, 0.85);\n                border: none;\n                border-right: 1px solid #ccc;\n            }\n\n            a[button].tile:last-child {\n                border: none;\n            }\n        `,\n    ],\n})\nexport class DashboardComponent {\n    constructor(private _settings: SettingsService) {}\n\n    public get hide_availability() {\n        return this._settings.get('app.hide_availability') !== false;\n    }\n\n    public get hide_contacts() {\n        return this._settings.get('app.hide_contacts') !== false;\n    }\n}\n","import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { DashboardAvailabilityComponent } from './dashboard-availability.component';\nimport { DashboardContactsComponent } from './dashboard-contacts.component';\nimport { DashboardDeliveriesComponent } from './dashboard-deliveries.component';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\nimport { DashboardScheduledItemComponent } from './dashboard-schedule-item.component';\nimport { DashboardUpcomingComponent } from './dashboard-upcoming.component';\nimport { DashboardComponent } from './dashboard.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        DashboardAvailabilityComponent,\n        DashboardUpcomingComponent,\n        DashboardContactsComponent,\n        DashboardDeliveriesComponent,\n        DashboardDeliveryModalComponent,\n        DashboardScheduledItemComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        SharedComponentModule,\n        ReactiveFormsModule,\n        ScrollingModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DashboardModule {}\n"],"x_google_ignoreList":[]}