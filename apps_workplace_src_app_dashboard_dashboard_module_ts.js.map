{"version":3,"file":"apps_workplace_src_app_dashboard_dashboard_module_ts.js","mappings":"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","names":["DashboardStateService","AsyncHandler","constructor","_settings","_calendar","_org","_event_form","super","this","BehaviorSubject","_free_spaces","asObservable","_upcoming_events","_contacts","_options","pipe","debounceTime","switchMap","search","searchStaff","of","catchError","_","shareReplay","_level_occupancy","init","_this","initialised","first","toPromise","subscription","active_building","filter","bld","subscribe","updateBuildingMetadata","sys_id","binding","getModule","listen","d","updateOccupancy","bind","setOptions","options","next","getValue","pollFreeSpaces","delay","updateFreeSpaces","interval","stopPollingFreeSpaces","clearInterval","pollUpcomingEvents","updateUpcomingEvents","stopPollingUpcomingEvents","updateContacts","metadata","showMetadata","currentUser","id","_this2","details","Array","map","i","User","addContact","user","users","_this3","push","unique","updateMetadata","name","description","removeContact","_this4","u","email","levels","_this5","sort","a","b","recommendation","_this6","building","mins","Math","abs","differenceInMinutes","Date","now","endOfDay","zone_ids","capacity","features","show_fav","form","patchValue","date","duration","list","available_spaces","take","period_start","floor","valueOf","period_end","event_list","_this7","get","queryBookings","type","newCalendarEventFromBooking","queryEvents","calendars","catch","_this8","occupancy","module","sys","index","_occupancy_binding","unbind","value","Object","keys","key","recommendation_factor","levelWithID","core","factory","i0","DashboardAvailabilityComponent","_state","free_spaces","level_occupancy","ngOnInit","ngOnDestroy","selectors","ctx_r10","DashboardUpcomingComponent","_schedule","_dialog","addMonths","today","upcoming_events","events","state","is_done","space","asset_name","asset_id","map_id","level","zones","startPolling","stopPolling","locateSpace","open","MapLocateModalComponent","data","item","trackByFn","idx","event","undefined","DashboardDeliveryModalComponent","EventEmitter","FormGroup","FormControl","Validators","sender","priority","register","markAllAsTouched","valid","emit","reason","ctx","DashboardDeliveriesComponent","received","registerDelivery","ref","Promise","race","componentInstance","afterClosed","deliveries","close","DashboardContactsComponent","can_deliver","contacts","search_results","s","focusInput","timeout","_input_el","nativeElement","focus","clearInput","search_str","$event","DashboardComponent","hide_availability","hide_contacts","ROUTES","path","component","DashboardModule","CommonModule","FormsModule","SharedComponentModule","ReactiveFormsModule","ScrollingModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/dashboard/dashboard-state.service.ts","./apps/workplace/src/app/dashboard/dashboard-availability.component.ts","./apps/workplace/src/app/dashboard/dashboard-upcoming.component.ts","./apps/workplace/src/app/dashboard/dashboard-delivery-modal.component.ts","./apps/workplace/src/app/dashboard/dashboard-deliveries.component.ts","./apps/workplace/src/app/dashboard/dashboard-contacts.component.ts","./apps/workplace/src/app/dashboard/dashboard.component.ts","./apps/workplace/src/app/dashboard/dashboard.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    getModule,\n    PlaceMetadata,\n    PlaceVariableBinding,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n} from 'rxjs/operators';\nimport { differenceInMinutes, endOfDay } from 'date-fns';\n\nimport {\n    AsyncHandler,\n    currentUser,\n    HashMap,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport {\n    CalendarEvent,\n    EventFormService,\n    newCalendarEventFromBooking,\n    queryEvents,\n} from '@placeos/events';\nimport { searchStaff, User } from '@placeos/users';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '@placeos/calendar';\nimport { Booking, queryBookings } from '@placeos/bookings';\n\nexport interface DashboardOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DashboardStateService extends AsyncHandler {\n    private _options = new BehaviorSubject<DashboardOptions>({});\n    /**  */\n    private _free_spaces = new BehaviorSubject<Space[]>([]);\n    /**  */\n    private _upcoming_events = new BehaviorSubject<(CalendarEvent | Booking)[]>(\n        []\n    );\n    /**  */\n    private _contacts = new BehaviorSubject<User[]>([]);\n    /**  */\n    private _level_occupancy = new BehaviorSubject<BuildingLevel[]>([]);\n    /**  */\n    private _occupancy_binding: PlaceVariableBinding;\n    /**  */\n    public free_spaces = this._free_spaces.asObservable();\n    /**  */\n    public upcoming_events = this._upcoming_events.asObservable();\n    /**  */\n    public contacts = this._contacts.asObservable();\n    /**  */\n    public options = this._options.asObservable();\n\n    public readonly search_results = this._options.pipe(\n        debounceTime(500),\n        switchMap(({ search }) => (search ? searchStaff(search) : of([]))),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /**  */\n    public level_occupancy = this._level_occupancy.asObservable();\n\n    constructor(\n        private _settings: SettingsService,\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _event_form: EventFormService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'building',\n            this._org.active_building\n                .pipe(filter((bld) => !!bld))\n                .subscribe(() => this.updateBuildingMetadata())\n        );\n        let sys_id = this._org.binding('contact_tracing');\n        if (!sys_id) return;\n        const binding = getModule(sys_id, 'AreaManagement').binding('overview');\n        binding.listen().subscribe((d) => this.updateOccupancy(d || {}));\n        binding.bind();\n    }\n\n    public setOptions(options: Partial<DashboardOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public pollFreeSpaces(delay: number = 10 * 1000) {\n        this.updateFreeSpaces();\n        this.interval('free_spaces', () => this.updateFreeSpaces(), delay);\n    }\n\n    public stopPollingFreeSpaces() {\n        this.clearInterval('free_spaces');\n    }\n\n    public pollUpcomingEvents(delay: number = 10 * 1000) {\n        this.updateUpcomingEvents();\n        this.interval(\n            'upcoming_events',\n            () => this.updateUpcomingEvents(),\n            delay\n        );\n    }\n\n    public stopPollingUpcomingEvents() {\n        this.clearInterval('upcoming_events');\n    }\n\n    public async updateContacts() {\n        const metadata: PlaceMetadata = (await showMetadata(\n            currentUser().id,\n            'contacts'\n        ).toPromise()) as any;\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async addContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users.push(user);\n        users = unique(users, 'email');\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async removeContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users = users.filter((u) => u.email !== user.email);\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    private async updateOccupancy(map: HashMap<{ recommendation: number }>) {\n        const levels = [...this._org.levels];\n        levels.sort(\n            (a, b) => map[a.id]?.recommendation - map[b.id]?.recommendation\n        );\n        this._level_occupancy.next(levels);\n    }\n\n    private async updateFreeSpaces() {\n        if (!this._org.building) return;\n        const mins = Math.abs(\n            differenceInMinutes(Date.now(), endOfDay(Date.now()))\n        );\n        this._event_form.setOptions({\n            zone_ids: [],\n            capacity: 0,\n            features: [],\n            show_fav: false,\n        });\n        this._event_form.form.patchValue({ date: Date.now(), duration: mins });\n        const list = await this._event_form.available_spaces\n            .pipe(take(1))\n            .toPromise();\n        list.sort((a, b) => a.capacity - b.capacity);\n        this._free_spaces.next(list);\n    }\n\n    private async updateUpcomingEvents() {\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const events = await (this._settings.get('app.events.use_bookings')\n            ? queryBookings({\n                  period_start,\n                  period_end,\n                  type: 'room',\n                  email: currentUser().email,\n              }).pipe(map((_) => _.map((i) => newCalendarEventFromBooking(i))))\n            : queryEvents({\n                  period_start,\n                  period_end,\n                  calendars: currentUser().email,\n              })\n        )\n            .toPromise()\n            .catch((_) => []);\n        const bookings = await queryBookings({\n            period_start,\n            period_end,\n            type: 'desk',\n            user: currentUser().email,\n        })\n            .toPromise()\n            .catch((_) => []);\n        const event_list = [...events, ...bookings].sort(\n            (a, b) => a.date - b.date\n        );\n        this._upcoming_events.next(event_list);\n    }\n\n    private async updateBuildingMetadata() {\n        const building = this._org.building;\n        const metadata = await showMetadata(\n            building.id,\n            'bindings'\n        ).toPromise();\n        if (!(metadata.details as HashMap).occupancy) return;\n        const details = (metadata.details as HashMap).occupancy;\n        const module = getModule(details.sys, details.module, details.index);\n        if (!module) return;\n        if (this._occupancy_binding) {\n            this._occupancy_binding.unbind();\n        }\n        this._occupancy_binding = module.binding('occupancy');\n        this._occupancy_binding.bind();\n        this.subscription(\n            'occupancy_binding',\n            this._occupancy_binding.listen().subscribe((value) => {\n                const levels = Object.keys(value).map((key) => ({\n                    id: key,\n                    ...value[key],\n                }));\n                levels.sort(\n                    (a, b) => a.recommendation_factor - b.recommendation_factor\n                );\n                this._level_occupancy.next(\n                    levels.map((i) => this._org.levelWithID([i.id]))\n                );\n            })\n        );\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-availability',\n    template: `\n        <h3 class=\"m-0 font-medium text-xl\">Available Now</h3>\n        <div\n            class=\"flex flex-col items-center p-2 bg-white dark:bg-neutral-600 shadow my-4 rounded-lg\"\n        >\n            <div class=\"flex items-center w-full mb-2\">\n                <div>Building Levels</div>\n            </div>\n            <div free-levels class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    btn\n                    matRipple\n                    class=\"w-full\"\n                    *ngFor=\"let lvl of levels_free | async | slice: 0:2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    <div class=\"max-w-full truncate\">\n                        {{ lvl.display_name || lvl.name }}\n                    </div>\n                </a>\n                <span\n                    *ngIf=\"!(levels_free | async).length\"\n                    class=\"text-black/30 dark:text-white/30 text-sm mb-2\"\n                    >No free spaces in building</span\n                >\n            </div>\n        </div>\n        <div\n            free-spaces\n            class=\"flex items-center flex-col rounded-lg bg-white dark:bg-neutral-600 shadow my-4 p-2\"\n            *ngIf=\"(space_list | async)?.length\"\n        >\n            <div class=\"flex items-center w-full mb-2\">\n                <div>Spaces</div>\n            </div>\n            <div class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    btn\n                    matRipple\n                    class=\"w-full\"\n                    *ngFor=\"let space of space_list | async | slice: 0:3\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.id }\"\n                >\n                    <div class=\"max-w-full truncate\">\n                        {{ space.display_name || space.name }}\n                    </div>\n                </a>\n                <span\n                    *ngIf=\"!(space_list | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                    >No free spaces</span\n                >\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n        `,\n    ],\n})\nexport class DashboardAvailabilityComponent implements OnInit, OnDestroy {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: DashboardStateService) {}\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { Space } from '@placeos/spaces';\nimport { addMonths } from 'date-fns';\nimport { map } from 'rxjs/operators';\n\nimport { MapLocateModalComponent } from '@placeos/components';\nimport {\n    BookingLike,\n    ScheduleStateService,\n} from '../schedule/schedule-state.service';\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-upcoming',\n    template: `\n        <h3 class=\"m-0 mb-4 font-medium text-xl\">Your Bookings</h3>\n        <div\n            name=\"event\"\n            *ngFor=\"let event of event_list | async | slice: 0:3\"\n            class=\"flex bg-white shadow rounded-lg relative overflow-hidden mb-4 dark:bg-neutral-700\"\n        >\n            <div\n                name=\"status\"\n                class=\"absolute rounded-lg\"\n                [class.bg-primary]=\"event.asset_id\"\n            ></div>\n            <div name=\"details\" class=\"flex-1 mr-2\">\n                <div\n                    time\n                    class=\"text-primary dark:text-secondary text-sm font-bold mb-2\"\n                >\n                    {{ event.date | date: 'shortTime' }}\n                </div>\n                <div name=\"title\" class=\"text-sm font-bold mb-2\">\n                    {{ event.title }}\n                </div>\n                <div name=\"space\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon class=\"mr-2\">room</app-icon>\n                    <a\n                        class=\"text-black dark:text-white\"\n                        [class.underline]=\"!!event.space || !!event.asset_id\"\n                        [matTooltip]=\"event.space ? 'Locate Space' : ''\"\n                        (click)=\"\n                            event.space || event.asset_id\n                                ? locateSpace(event.space || event)\n                                : ''\n                        \"\n                    >\n                        {{\n                            event.space?.display_name ||\n                                event.space?.name ||\n                                event.asset_name ||\n                                '&lt;No Location&gt;'\n                        }}\n                        {{\n                            event.space?.level?.display_name ||\n                            event.space?.level?.name\n                                ? ', ' + event.space.level.display_name ||\n                                  event.space.level.name\n                                : ''\n                        }}\n                    </a>\n                </div>\n                <div\n                    name=\"attendees\"\n                    class=\"text-xs flex items-center mb-2\"\n                    *ngIf=\"event.guests\"\n                >\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'group' }\"\n                    ></app-icon>\n                    {{ event.guests?.length }} Guest{{\n                        event.guests?.length === 1 ? '' : 's'\n                    }}\n                </div>\n                <div\n                    name=\"guests\"\n                    class=\"flex space-x-2 text-sm\"\n                    *ngIf=\"event.guests\"\n                >\n                    <a-user-avatar\n                        *ngFor=\"let guest of event.guests\"\n                        [user]=\"guest\"\n                    ></a-user-avatar>\n                </div>\n            </div>\n            <a\n                button\n                btn\n                matRipple\n                *ngIf=\"event.meeting_link\"\n                class=\"uppercase h-12\"\n                [href]=\"event.meeting_link\"\n                >Join Call</a\n            >\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='event'] {\n                padding: 1rem 1rem 1rem 2rem;\n            }\n\n            [name='status'] {\n                top: 1rem;\n                left: -0.8rem;\n                height: 2.5rem;\n                width: 1.6rem;\n                background-color: #00529b;\n            }\n\n            button {\n                height: 3em;\n            }\n\n            app-icon {\n                margin-left: -0.25rem;\n            }\n        `,\n    ],\n})\nexport class DashboardUpcomingComponent implements OnInit, OnDestroy {\n    public readonly today = new Date();\n    public readonly max_date = addMonths(this.today, 4);\n    public readonly upcoming_events = this._state.upcoming_events;\n    public readonly event_list = this._schedule.events.pipe(\n        map((list) => {\n            const updated_list = list\n                .filter((_) => _.state !== 'done' && _.is_done !== true)\n                .map((_) =>\n                    _.space\n                        ? _\n                        : {\n                              ..._,\n                              space: {\n                                  name: _.asset_name || _.asset_id,\n                                  map_id: _.asset_id,\n                                  level: this._org.levelWithID(_.zones),\n                                  zones: _.zones,\n                              },\n                          }\n                );\n            return updated_list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: DashboardStateService,\n        private _schedule: ScheduleStateService,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n        this._schedule.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n        this._schedule.stopPolling();\n    }\n\n    public locateSpace(space: Space) {\n        this._dialog.open(MapLocateModalComponent, {\n            data: { item: { ...space, level: null } },\n        });\n    }\n\n    public trackByFn(idx: number, event: BookingLike) {\n        return event ? `${event.id}|${event.date}` : undefined;\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent } from '@placeos/common';\n\n@Component({\n    selector: 'dashboard-delivery-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h3>Register Delivery</h3>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-2 w-[24rem]\" [formGroup]=\"form\">\n            <div>\n                <label>Name<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of items being delivered\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Description:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <textarea\n                        matInput\n                        placeholder=\"Description of items being delivered\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Sender:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <input\n                        matInput\n                        placeholder=\"Name of sender\"\n                        formControlName=\"sender\"\n                    />\n                    <mat-error>Sender is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <label>Priority:</label>\n                <mat-form-field appearance=\"outline\" class=\"w-full\">\n                    <mat-select placeholder=\"Low\" formControlName=\"priority\">\n                        <mat-option>Very Low</mat-option>\n                        <mat-option>Low</mat-option>\n                        <mat-option>Normal</mat-option>\n                        <mat-option>High</mat-option>\n                        <mat-option>Very Height</mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </main>\n        <footer\n            class=\"p-2 flex items-center justify-center border-t border-gray-100\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"register()\">\n                Register\n            </button>\n        </footer>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveryModalComponent {\n    @Output() public events = new EventEmitter<DialogEvent>();\n\n    public readonly form = new FormGroup({\n        name: new FormControl('', [Validators.required]),\n        description: new FormControl(''),\n        sender: new FormControl(''),\n        priority: new FormControl(''),\n    });\n\n    public register() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this.events.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\n\n@Component({\n    selector: 'dashboard-deliveries',\n    template: `\n        <h3 class=\"m-0 my-2 font-medium text-xl\">Deliveries</h3>\n        <div class=\"bg-white shadow p-2 rounded dark:bg-neutral-700\">\n            <div class=\"divide-y\" *ngIf=\"deliveries?.length; else empty_state\">\n                <div\n                    class=\"flex items-center py-2\"\n                    *ngFor=\"let item of deliveries\"\n                >\n                    <div class=\"flex-1 pl-2\">\n                        <div class=\"\">\n                            {{ item?.name || 'Untitled Delivery' }}\n                        </div>\n                        <div class=\"text-xs opacity-60\">\n                            {{\n                                item && item.received\n                                    ? (item.received | date: 'medium')\n                                    : 'Not received'\n                            }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"m-4 h-2 w-2 rounded-full\"\n                        [class.bg-pending]=\"!item.received\"\n                        [class.bg-success]=\"item.received\"\n                    ></div>\n                </div>\n                <button\n                    matRipple\n                    class=\"w-full mt-2\"\n                    (click)=\"registerDelivery()\"\n                >\n                    Register Delivery\n                </button>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"p-8 flex items-center justify-center opacity-40\">\n                No registered deliveries\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DashboardDeliveriesComponent {\n    public deliveries = [\n        { name: 'USB-C Cables', received: Date.now() },\n        { name: 'Desk Fan' },\n    ];\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async registerDelivery() {\n        const ref = this._dialog.open(DashboardDeliveryModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.events\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details.reason !== 'done') return;\n        this.deliveries.push(details.metadata);\n        ref.close();\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'a-dashboard-contacts',\n    template: `\n        <h3 class=\"m-0 mb-2 font-medium text-xl\">Colleagues</h3>\n        <div\n            name=\"contact-list\"\n            class=\"bg-gray-400 dark:bg-neutral-600 border border-gray-200 dark:border-neutral-500 shadow rounded-lg p-2 pl-0 space-y-2 flex flex-wrap\"\n        >\n            <div\n                name=\"contact\"\n                *ngFor=\"let user of contacts | async\"\n                class=\"bg-white rounded-lg flex-1 flex flex-col items-center p-2 relative dark:bg-neutral-700\"\n            >\n                <a-user-avatar\n                    class=\"text-2xl mb-2\"\n                    [user]=\"user\"\n                ></a-user-avatar>\n                <div name=\"contact-name\" class=\"text-sm mb-2\">\n                    {{ user.name }}\n                </div>\n                <!-- <div name=\"location\" class=\"flex items-center text-sm\">\n                    <div name=\"dot\" class=\"mr-2\"></div>\n                    Level 12\n                </div> -->\n                <button icon name=\"close\" (click)=\"removeUser(user)\">\n                    <app-icon\n                        [icon]=\"{ class: 'material-icons', content: 'close' }\"\n                    ></app-icon>\n                </button>\n            </div>\n            <button\n                name=\"contact\"\n                btn\n                matRipple\n                class=\"rounded-lg flex-1 w-full dark:bg-neutral-800\"\n                [matMenuTriggerFor]=\"menu\"\n                (menuOpened)=\"focusInput()\"\n                (menuClosed)=\"clearInput()\"\n            >\n                <div\n                    class=\"flex flex-col items-center p-4 text-black dark:text-white w-full\"\n                >\n                    <app-icon\n                        class=\"text-2xl\"\n                        [icon]=\"{\n                            class: 'material-icons',\n                            content: 'person_add'\n                        }\"\n                    ></app-icon>\n                    <span class=\"w-full leading-tight whitespace-normal\"\n                        >Click to add a person to contacts</span\n                    >\n                </div>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <div\n                mat-menu-item\n                class=\"p-0\"\n                (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n            >\n                <input\n                    #input\n                    class=\"w-full p-2 text-base\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"updateSearch(search_str)\"\n                    placeholder=\"Search for user...\"\n                />\n            </div>\n            <button mat-menu-item *ngIf=\"!(search_results | async)?.length\">\n                {{\n                    !search_str\n                        ? 'Type to search for users...'\n                        : 'No matches for \"' + search_str + '\"'\n                }}\n            </button>\n            <button\n                mat-menu-item\n                *ngFor=\"let user of search_results | async | slice: 0:8\"\n                (click)=\"addUser(user)\"\n            >\n                <div class=\"flex items-center leading-tight\">\n                    <a-user-avatar\n                        class=\"text-xl mr-2\"\n                        [user]=\"user\"\n                    ></a-user-avatar>\n                    <div class=\"flex-1\">\n                        <div>{{ user.name }}</div>\n                        <div class=\"text-xs text-dark-fade\">\n                            {{ user.email }}\n                        </div>\n                    </div>\n                </div>\n            </button>\n        </mat-menu>\n        <dashboard-deliveries *ngIf=\"can_deliver\"></dashboard-deliveries>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='contact-list'] {\n                padding: 0 0.5rem 0.5rem 0;\n            }\n\n            [name='contact'] {\n                min-width: 8rem;\n                width: 8rem;\n                margin-left: 0.5rem;\n                margin-top: 0.5rem;\n            }\n\n            [name='contact-name'] {\n                font-weight: 400;\n            }\n\n            [name='dot'] {\n                height: 8px;\n                width: 8px;\n                border-radius: 8px;\n                background-color: #22992e;\n            }\n\n            button[name='close'] {\n                position: absolute;\n                display: none;\n                top: 0.25rem;\n                right: 0.25rem;\n            }\n\n            [name='contact']:hover button[name='close'] {\n                display: initial;\n            }\n\n            button[name='contact'] {\n                background-color: #f0f0f0;\n                border: none;\n                min-width: calc(100% - 0.5rem) !important;\n            }\n        `,\n    ],\n})\nexport class DashboardContactsComponent extends AsyncHandler {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.search_results;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.setOptions({ search: s });\n\n    public search_str: string = '';\n\n    @ViewChild('input') private _input_el: ElementRef;\n\n    public get can_deliver() {\n        return !!this._settings.get('app.can_deliver');\n    }\n\n    constructor(\n        private _state: DashboardStateService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.updateContacts();\n    }\n\n    public focusInput() {\n        this.timeout('focus', () => {\n            if (this._input_el) {\n                this._input_el.nativeElement.focus();\n            }\n        });\n    }\n\n    public clearInput() {\n        this.search_str = '';\n        this._state.setOptions({ search: '' });\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[dashboard]',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2 bg-gray-200 dark:bg-neutral-600 dark:text-white\">\n            <div\n                class=\"relative z-0 flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <main\n                    class=\"flex flex-1 px-0 sm:px-8 flex-wrap overflow-auto h-px sm:h-auto\"\n                >\n                    <a-dashboard-availability\n                        *ngIf=\"!hide_availability\"\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-availability>\n                    <a-dashboard-upcoming\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-upcoming>\n                    <a-dashboard-contacts\n                        *ngIf=\"!hide_contacts\"\n                        class=\"flex-1 min-w-64\"\n                    ></a-dashboard-contacts>\n                </main>\n            </div>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n\n            .top {\n                background-color: #007ac8;\n            }\n\n            a[button].tile {\n                flex: 1;\n                border-radius: 0;\n                background-color: #fff;\n                color: rgba(0, 0, 0, 0.85);\n                border: none;\n                border-right: 1px solid #ccc;\n            }\n\n            a[button].tile:last-child {\n                border: none;\n            }\n        `,\n    ],\n})\nexport class DashboardComponent {\n    constructor(private _settings: SettingsService) {}\n\n    public get hide_availability() {\n        return this._settings.get('app.hide_availability') !== false;\n    }\n\n    public get hide_contacts() {\n        return this._settings.get('app.hide_contacts') !== false;\n    }\n}\n","import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { DashboardAvailabilityComponent } from './dashboard-availability.component';\nimport { DashboardContactsComponent } from './dashboard-contacts.component';\nimport { DashboardDeliveriesComponent } from './dashboard-deliveries.component';\nimport { DashboardDeliveryModalComponent } from './dashboard-delivery-modal.component';\nimport { DashboardScheduledItemComponent } from './dashboard-schedule-item.component';\nimport { DashboardUpcomingComponent } from './dashboard-upcoming.component';\nimport { DashboardComponent } from './dashboard.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        DashboardAvailabilityComponent,\n        DashboardUpcomingComponent,\n        DashboardContactsComponent,\n        DashboardDeliveriesComponent,\n        DashboardDeliveryModalComponent,\n        DashboardScheduledItemComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        SharedComponentModule,\n        ReactiveFormsModule,\n        ScrollingModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DashboardModule {}\n"],"x_google_ignoreList":[]}