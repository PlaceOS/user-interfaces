{"version":3,"sources":["./libs/events/src/lib/validators.ts","./libs/events/src/lib/utilities.ts","./node_modules/date-fns/esm/setMinutes/index.js","./libs/events/src/lib/events.fn.ts","./libs/form-fields/src/lib/form-fields.module.ts","./libs/form-fields/src/lib/counter.component.ts","./node_modules/date-fns/esm/formatISO/index.js","./libs/form-fields/src/lib/date-field.component.ts","./node_modules/date-fns/esm/addYears/index.js","./node_modules/date-fns/esm/formatDuration/index.js","./libs/form-fields/src/lib/duration-field.component.ts","./libs/form-fields/src/lib/user-search-field.component.ts","./libs/users/src/lib/new-user-modal.component.ts","./libs/users/src/lib/user-form.component.ts","./libs/users/src/lib/users.module.ts","./libs/users/src/lib/location.class.ts","./libs/users/src/lib/guests.fn.ts","./libs/users/src/lib/staff.fn.ts"],"names":["endInFuture","control","parent","get","isAfter","Date","value","duration","event","form","id","host","organiser","creator","calendar","attendees","resources","title","body","private","date","all_day","recurring","recurrence","recurring_master_id","master","attachments","catering","extension_data","visitor_type","location","needs_space","needs_parking","system","valueChanges","subscribe","o","controls","setValue","email","l","length","disable","state","add","dirtyDate","dirtyMinutes","requiredArgs","arguments","toDate","minutes","toInteger","setMinutes","setHours","days","EVENTS_ENDPOINT","queryEvents","q","query","pipe","list","map","e","showEvent","encodeURIComponent","item","updateEvent","data","method","toJSON","saveEvent","status","createEvent","checkinEventGuest","guest_id","FormFieldsModule","CounterComponent","step","max","min","this","ctrl_key","shift_key","new_value","_onChange","fn","_onTouch","provide","useExisting","multi","remove","formatISO","dirtyOptions","TypeError","concat","originalDate","isValid","RangeError","options","format","String","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","floor","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join","FieldDateAdapter","displayFormat","FIELD_DATE_FORMATS","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","DateFieldComponent","_from","valueOf","position","startOfDay","_to","dirtyAmount","amount","addMonths","addYears","endOfDay","toISOString","old_date","new_date","set","hours","from","show_tooltip","disabled","useClass","useValue","defaultFormat","formatDuration","undefined","locale","zero","delimiter","reduce","acc","unit","token","replace","m","toUpperCase","formatDistance","DurationFieldComponent","specialPreprops","duration_options","generateDurationOptions","changes","blocks","option","push","name","UserSearchFieldComponent","error","query_fn","search$","search_results$","loading","of","guests","_","search","search_str","toLowerCase","filter","cancelReset","clearTimeout","blurInput","timeout","_input_el","nativeElement","blur","subscription","user_list","active_user","split","resetSearchString","NewUserModalComponent","_data","super","user","markAllAsTouched","valid","new_user","type","emit","reason","metadata","UserFormComponent","invalid","touched","MapLocation","map_id","x","map_width","y","map_height","variance","last_seen","getUnixTime","level","building","at_location","coordinates_from","GUEST_ENDPOINT","searchGuests","showGuest","listGuestMeetings","STAFF_ENDPOINT","searchStaff","showStaff"],"mappings":"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","file":"default-libs_events_src_index_ts-libs_form-fields_src_index_ts.js","sourcesContent":["import { AbstractControl } from '@angular/forms';\nimport { addMinutes, isAfter, isBefore } from 'date-fns';\n\nexport const endInFuture = (control: AbstractControl) => {\n    if (\n        control.parent?.get('date') &&\n        isAfter(\n            new Date(),\n            addMinutes(control.parent.get('date').value, control.value)\n        )\n    ) {\n        return { duration: true };\n    }\n    return null;\n};\n\n/** Check that date in unix ms is in the future */\nexport function isFuture(\n    control: AbstractControl\n): { [key: string]: boolean } | null {\n    return control.value && isBefore(control.value, new Date())\n        ? { is_future: true }\n        : null;\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {\n    add,\n    formatDuration,\n    differenceInMinutes,\n    getTime,\n    isSameDay,\n    format,\n    startOfMinute,\n    setHours,\n    setMinutes,\n    addMinutes,\n} from 'date-fns';\nimport { timePeriodsIntersect, unique } from '@placeos/common';\n\nimport { CalendarEvent } from './event.class';\nimport { endInFuture } from './validators';\nimport { getNextFreeTimeSlot } from './helpers';\n\nlet BOOKING_DATE = add(setMinutes(setHours(new Date(), 6), 0), { days: -1 });\n\nexport function generateEventForm(event: CalendarEvent): FormGroup {\n    const form = new FormGroup({\n        id: new FormControl(event.id),\n        host: new FormControl(event.host || '', [Validators.required]),\n        organiser: new FormControl(event.organiser || {}, [\n            Validators.required,\n        ]),\n        creator: new FormControl(event.creator, [Validators.required]),\n        calendar: new FormControl(event.calendar),\n        attendees: new FormControl(event.attendees || []),\n        resources: new FormControl(event.resources || []),\n        title: new FormControl(event.title, [Validators.required]),\n        body: new FormControl(event.body),\n        private: new FormControl(event.private),\n        date: new FormControl(event.date, [Validators.required]),\n        duration: new FormControl(event.duration, [endInFuture]),\n        all_day: new FormControl(event.all_day),\n        recurring: new FormControl(event.recurring),\n        recurrence: new FormControl(event.recurrence),\n        recurring_master_id: new FormControl(event.recurring_master_id),\n        master: new FormControl(event.master),\n        attachments: new FormControl(event.attachments),\n        catering: new FormControl(event.extension_data?.catering || []),\n        // has_catering: new FormControl(event.has_catering || false),\n        visitor_type: new FormControl(event.extension_data?.visitor_type),\n        location: new FormControl(event.location),\n        needs_space: new FormControl(true),\n        needs_parking: new FormControl(\n            event.extension_data?.needs_parking || false\n        ),\n        system: new FormControl(event.system),\n    });\n    form.get('organiser').valueChanges.subscribe((o) =>\n        form.controls.host.setValue(o?.email)\n    );\n    form.get('resources').valueChanges.subscribe((l) =>\n        form.controls.system.setValue(l.length ? l[0] : null)\n    );\n    if (event.id) {\n        form.get('host').disable();\n        form.get('organiser').disable();\n    }\n    if (event.state === 'started') form.get('date').disable();\n    return form;\n}\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = startOfMinute(new Date(time));\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: CalendarEvent[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = getTime(new Date())\n) {\n    const now = new Date(date);\n    const next_free_slot = getNextFreeTimeSlot(bookings, date, 5);\n    const start = new Date(next_free_slot.start);\n    const end = new Date(next_free_slot.end);\n    const currently_free = timePeriodsIntersect(\n        date,\n        date,\n        next_free_slot.start,\n        next_free_slot.end\n    );\n    const time_until_next_block = formatDuration({\n        minutes: currently_free\n            ? differenceInMinutes(end, now)\n            : differenceInMinutes(start, now),\n    });\n    const free_tomorrow = !currently_free && !isSameDay(start, now);\n    const free_today = currently_free && !isSameDay(end, now);\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${format(end, 'h:mm B')}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${format(start, 'h:mm B')}(${time_until_next_block})`,\n    };\n}\n\nexport function replaceBookings(\n    list: CalendarEvent[],\n    new_bookings: CalendarEvent[],\n    filter_options: { space: string; from: number; to: number }\n) {\n    const from = filter_options.from;\n    const to = filter_options.to;\n    const filtered_list = list.filter((booking) => {\n        const start = new Date(booking.date);\n        const end = addMinutes(start, booking.duration);\n        return (\n            !booking.resources.find(\n                (space) => space.email === filter_options.space\n            ) || !timePeriodsIntersect(from, to, start.valueOf(), end.valueOf())\n        );\n    });\n    const updated_list = filtered_list.concat(new_bookings);\n    updated_list.sort((a, b) => a.date - b.date);\n    return unique(updated_list, 'id');\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from 'libs/users/src/lib/user.class';\n\nimport { CalendarEvent } from './event.class';\n\nexport interface CalendarEventQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Comma seperated list of calendar ids to check availability */\n    calendars?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Whether to include cancelled events in the returned list */\n    include_cancelled?: boolean;\n}\n\nexport interface CalendarEventShowParams {\n    /** ID of the personal calendar to grab the events details from */\n    calendar?: string;\n    /** ID of the system/space to get the associated calendar ID */\n    system_id?: string;\n}\n\nconst EVENTS_ENDPOINT = `/api/staff/v1/events`;\n\n/**\n * List events\n * @param q Parameters to pass to the API request\n */\nexport function queryEvents(\n    q: CalendarEventQueryParams\n): Observable<CalendarEvent[]> {\n    const query = toQueryString(q);\n    return get(`${EVENTS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((e) => new CalendarEvent(e)))\n    );\n}\n\n/**\n * Get event details\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function showEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Create new calendar event and add it to the database\n * @param data New calendar event fields\n */\nexport function createEvent(data: Partial<CalendarEvent>) {\n    return post(`${EVENTS_ENDPOINT}`, new CalendarEvent(data).toJSON()).pipe(\n        map((item) => new CalendarEvent(item))\n    );\n}\n\n/**\n * Update an existing calendar event\n * @param id ID of the event to update\n * @param data New values for event fields\n * @param q Parameters to pass to the API request\n * @param method HTTP verb to use with API request\n */\nexport function updateEvent(\n    id: string,\n    data: Partial<CalendarEvent>,\n    q: CalendarEventShowParams = {},\n    method: 'put' | 'patch' = 'patch'\n) {\n    const query = toQueryString(q);\n    return (method === 'patch' ? patch : put)(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        method === 'patch' ? data : new CalendarEvent(data).toJSON()\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Save changes to or create a calendar event\n * @param data State of the calendar event\n * @param q Parameters to pass to the API request\n */\nexport const saveEvent = (\n    data: Partial<CalendarEvent>,\n    q?: CalendarEventShowParams\n) => {\n    delete (data as any)?.status;\n    return data.id ? updateEvent(data.id, data, q) : createEvent(data);\n};\n\n/**\n * Remove calendar event from the database\n * @param id ID of the event to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeEvent(id: string, q: CalendarEventShowParams = {}) {\n    const query = toQueryString(q);\n    return del(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}${\n            query ? '?' + query : ''\n        }`,\n        {\n            response_type: 'void',\n        }\n    );\n}\n\n/**\n * Set the approval state of the event to approved\n * @param id ID of the event to approve\n * @param system_id Associated system to approve\n */\nexport function approveEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/approve?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * Set the approval state of the event to rejected\n * @param id ID of the event to reject\n * @param system_id Associated system to reject\n */\nexport function rejectEvent(id: string, system_id: string) {\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/reject?system_id=${encodeURIComponent(system_id)}`,\n        ''\n    ).pipe(map((item) => new CalendarEvent(item)));\n}\n\n/**\n * List guests for event\n * @param id ID of the event to grab\n * @param q Parameters to pass to the API request\n */\nexport function queryEventGuests(\n    id: string,\n    q: CalendarEventShowParams = {}\n): Observable<GuestUser[]> {\n    const query = toQueryString(q);\n    return get(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(id)}/guests${\n            query ? '?' + query : ''\n        }`\n    ).pipe(map((list) => list.map((item) => new GuestUser(item))));\n}\n\n/**\n * Set the checkin state of an event guest\n * @param id ID of the event to grab\n * @param guest_id ID of the guest to update\n * @param state New checkin state of the guest\n * @param q Parameters to pass to the API request\n */\nexport function checkinEventGuest(\n    id: string,\n    guest_id: string,\n    state: boolean,\n    q: CalendarEventShowParams = {}\n) {\n    const query = toQueryString({ ...q, state });\n    return post(\n        `${EVENTS_ENDPOINT}/${encodeURIComponent(\n            id\n        )}/guests/${guest_id}/checkin${query ? '?' + query : ''}`,\n        ''\n    ).pipe(map((item) => new GuestUser(item)));\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { ComponentsModule } from '@placeos/components';\n\nimport { ActionFieldComponent } from './action-field.component';\nimport { CounterComponent } from './counter.component';\nimport { DateFieldComponent } from './date-field.component';\nimport { DurationFieldComponent } from './duration-field.component';\nimport { TimeFieldComponent } from './time-field.component';\nimport { UserListFieldComponent } from './user-list-field.component';\nimport { UserSearchFieldComponent } from './user-search-field.component';\nimport { ItemListFieldComponent } from './item-list-field.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nexport * from './action-field.component';\nexport * from './counter.component';\nexport * from './date-field.component';\nexport * from './duration-field.component';\nexport * from './time-field.component';\nexport * from './user-list-field.component';\nexport * from './user-search-field.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ActionFieldComponent,\n    CounterComponent,\n    DateFieldComponent,\n    DurationFieldComponent,\n    TimeFieldComponent,\n    UserListFieldComponent,\n    UserSearchFieldComponent,\n    ItemListFieldComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSelectModule,\n        MatAutocompleteModule,\n        MatTooltipModule,\n        MatCheckboxModule,\n        ComponentsModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class FormFieldsModule {}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n    selector: 'a-counter',\n    template: `\n        <div\n            counter\n            class=\"flex items-center text-base\"\n            (window:keydown.shift)=\"shift_key = true\"\n            (window:keydown.control)=\"ctrl_key = true\"\n            (window:keydown.meta)=\"ctrl_key = true\"\n            (window:keyup.shift)=\"shift_key = false\"\n            (window:keyup.control)=\"ctrl_key = false\"\n            (window:keyup.meta)=\"ctrl_key = false\"\n        >\n            <button\n                mat-icon-button\n                name=\"remove\"\n                type=\"button\"\n                [disabled]=\"!value || value === min\"\n                (click)=\"remove()\"\n            >\n                <app-icon>remove</app-icon>\n            </button>\n            <div value class=\"p-1 text-center\">{{ (render_fn ? render_fn(value) : value) || '0' }}</div>\n            <button\n                mat-icon-button\n                name=\"add\"\n                type=\"button\"\n                [disabled]=\"value === max\"\n                (click)=\"add()\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            [value] {\n                min-width: 3em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            /* istanbul ignore next */\n            useExisting: forwardRef(() => CounterComponent),\n            multi: true,\n        },\n    ],\n})\nexport class CounterComponent implements ControlValueAccessor {\n    /** Size of a single step */\n    @Input() public step = 1;\n    /** Maximum amount for the counter */\n    @Input() public max = 10;\n    /** Minimum amount for the counter */\n    @Input() public min = 0;\n    /** Custom function for rendering the counter value */\n    @Input() public render_fn: (v: number) => string;\n    /** Current value of the counter */\n    public value: number;\n    /** Whether shift key is being held by the user */\n    public shift_key: boolean;\n    /** Whether control key is being held by the user */\n    public ctrl_key: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public add() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value += step;\n        if (this.value > this.max) {\n            this.value = this.max || 10;\n        }\n        this.setValue(this.value);\n    }\n\n    /** Remove the `step` from the current value */\n    public remove() {\n        if (!this.value) {\n            this.value = this.min || 0;\n        }\n        const step = this.ctrl_key ? 100 * this.step : this.shift_key ? 10 * this.step : this.step || 1;\n        this.value -= step;\n        if (this.value < this.min) {\n            this.value = this.min || 0;\n        }\n        this.setValue(this.value);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","import {\n    Component,\n\n    forwardRef,\n\n    Injectable, Input, OnInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    DateAdapter,\n    MatDateFormats,\n    MAT_DATE_FORMATS,\n    NativeDateAdapter\n} from '@angular/material/core';\nimport {\n    addYears,\n\n    endOfDay,\n    format,\n    formatISO,\n    set, startOfDay\n} from 'date-fns';\nimport { BaseClass } from 'libs/common/src/lib/base.class';\nimport { HashMap } from 'libs/common/src/lib/types';\n\n@Injectable()\nclass FieldDateAdapter extends NativeDateAdapter {\n    format(date: Date, displayFormat: HashMap | string): string {\n        if (displayFormat === 'input') {\n            return format(date, 'MMMM d, yyyy');\n        }\n        return format(date, 'MMM yyyy');\n    }\n}\nconst FIELD_DATE_FORMATS: MatDateFormats = {\n    parse: {\n        dateInput: 'LL',\n    },\n    display: {\n        dateInput: 'input',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n@Component({\n    selector: 'a-date-field',\n    template: `\n        <mat-form-field appearance=\"outline\" overlay (click)=\"picker.open()\">\n            <input\n                matInput\n                [ngModel]=\"date\"\n                [disabled]=\"disabled\"\n                [min]=\"from\"\n                [max]=\"until\"\n                (ngModelChange)=\"setValue($event)\"\n                [matDatepicker]=\"picker\"\n            />\n            <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n            <mat-error><ng-content></ng-content></mat-error>\n        </mat-form-field>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        { provide: DateAdapter, useClass: FieldDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: FIELD_DATE_FORMATS },\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DateFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = new Date().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: string;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** First allowed date on the calendar */\n    public get from(): Date {\n        return new Date(this._from) || startOfDay(new Date());\n    }\n    /** Current date value */\n    public get until(): Date {\n        return new Date(this._to) || addYears(endOfDay(new Date()), 1);\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return format(new Date(this.date), 'DD MMM YYYY');\n    }\n\n    public ngOnInit() {\n        this.date = new Date().toISOString();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        // Keep hours and minutes of the old date\n        const old_date = new Date(this.date);\n        let new_date = set(new_value, {\n            hours: old_date.getHours(),\n            minutes: old_date.getMinutes(),\n        }).valueOf();\n        // Check that new date is before from\n        if (new_date < this.from.valueOf()) {\n            new_date = this.from.valueOf();\n        }\n        this.date = formatISO(new_date || new Date());\n        if (this._onChange) {\n            this._onChange(new_date);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = formatISO(value || new Date());\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n}\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the years added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\n\nexport default function addYears(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, amount * 12);\n}","import defaultLocale from \"../locale/en-US/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should be zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, null, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = options.format || defaultFormat;\n  var locale = options.locale || defaultLocale;\n  var zero = options.zero || false;\n  var delimiter = options.delimiter || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","import { Component, forwardRef, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Identity } from '@placeos/common';\nimport { formatDuration } from 'date-fns';\nimport * as dayjs from 'dayjs';\n\n\n\n@Component({\n    selector: 'a-duration-field',\n    template: `\n        <div class=\"duration-field\" [attr.disabled]=\"disabled\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    #select\n                    [value]=\"duration\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"duration + ' minutes'\"\n                    (valueChange)=\"setValue($event)\"\n                >\n                    <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                        {{ option.name }}\n                    </mat-option>\n                </mat-select>\n                <mat-error><ng-content></ng-content></mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DurationFieldComponent implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max = 240;\n    /** Minimum duration option available */\n    @Input() public min = 30;\n    /** Step value between options */\n    @Input() public step = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Special case prepopulation i.e. out of step options */\n    @Input() public specialPreprops: Array<number> = [];\n\n    public duration = 60;\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        const date = this.time ? dayjs(this.time) : null;\n\n        // Add special case for 10min duration/prepropulation\n        for (const option of this.specialPreprops) {\n            blocks.push({\n                id: option,\n                name: date\n                    ? `${date.add(option, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(option / 60),\n                          minutes: option % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(option / 60), minutes: option % 60 })}`,\n            });\n        }\n\n        while (time <= max) {\n            blocks.push({\n                id: time,\n                name: date\n                    ? `${date.add(time, 'm').format('h:mm A')} (${formatDuration({\n                          hours: Math.floor(time / 60),\n                          minutes: time % 60,\n                      })})`\n                    : `${formatDuration({ hours: Math.floor(time / 60), minutes: time % 60 })}`,\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","/* eslint-disable @typescript-eslint/member-ordering */\nimport {\n    Component,\n    OnInit,\n    forwardRef,\n    Input,\n    ViewChild,\n    ElementRef,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of, forkJoin } from 'rxjs';\nimport {\n    switchMap,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    catchError,\n} from 'rxjs/operators';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { searchGuests, searchStaff, User } from '@placeos/users';\n\n@Component({\n    selector: 'a-user-search-field',\n    template: `\n        <div class=\"user-search-field text-black\" form-field>\n            <mat-form-field overlay appearance=\"outline\">\n                <input\n                    #input\n                    matInput\n                    keyboard\n                    name=\"user-search\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event || '')\"\n                    [disabled]=\"disabled\"\n                    [placeholder]=\"placeholder || 'Search for user...'\"\n                    [matAutocomplete]=\"auto\"\n                    (keyup.enter)=\"\n                        validate && validate(search_str)\n                            ? setValue(search_str)\n                            : ''\n                    \"\n                    (blur)=\"resetSearchString()\"\n                    (focus)=\"cancelReset()\"\n                />\n                <app-icon matPrefix class=\"text-2xl relative\">search</app-icon>\n                <mat-spinner\n                    *ngIf=\"loading\"\n                    matSuffix\n                    diameter=\"16\"\n                ></mat-spinner>\n            </mat-form-field>\n            <mat-autocomplete\n                #auto=\"matAutocomplete\"\n                (optionSelected)=\"setValue($event.option.value)\"\n            >\n                <mat-option\n                    *ngFor=\"let option of user_list\"\n                    (click)=\"setValue(option); blurInput()\"\n                >\n                    <div class=\"leading-tight\">{{ option.name }}</div>\n                    <div class=\"text-xs text-black opacity-60\">\n                        {{ option.email }}\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"search_str && validate && validate(search_str)\"\n                    class=\"relative pointer-events-none\"\n                >\n                    <div\n                        class=\"absolute inset-0 px-4 pointer-events-auto\"\n                        (mousedown)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (touchstart)=\"\n                            $event.stopPropagation(); $event.preventDefault()\n                        \"\n                        (click)=\"\n                            setValue(search_str);\n                            $event.stopPropagation();\n                            $event.preventDefault()\n                        \"\n                    >\n                        <div class=\"pointer-events-none\">\n                            Add external attendee \"{{ search_str }}\"\n                        </div>\n                    </div>\n                </mat-option>\n                <mat-option\n                    *ngIf=\"!user_list?.length && (search_str || error)\"\n                    [disabled]=\"!empty_fn\"\n                    (click)=\"empty_fn()\"\n                >\n                    {{ search_str ? 'No users found.' : '' }} {{ error }}\n                </mat-option>\n            </mat-autocomplete>\n        </div>\n    `,\n    styles: [\n        `\n            :host,\n            mat-form-field {\n                width: 100%;\n            }\n\n            app-icon {\n                top: 0.15em;\n                left: -0.15em;\n            }\n        `,\n    ],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserSearchFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserSearchFieldComponent\n    extends BaseClass\n    implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Placeholder text to display */\n    @Input() public placeholder: string;\n    /** Limit available options to these */\n    @Input() public options: User[];\n    /** Whether guests should also show when searching for users */\n    @Input() public guests: boolean;\n    /** Message to display when no user matches have been found */\n    @Input() public error = '';\n    /** Function to validate the search string */\n    @Input() public validate: (s: string) => boolean;\n    /** Function to call when empty list option is clicked */\n    @Input() public empty_fn: () => void;\n    /** Function for filtering the results of the user list */\n    @Input() public filter: (_: any, s?: string) => boolean;\n\n    @Input() public query_fn: (_: string) => Observable<User[]> = (q) =>\n        searchStaff(q);\n    /** Currently selected user */\n    public active_user: User;\n    /** User list to display */\n    public user_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n    /** List of users from an API search */\n    public search_results$: Observable<User[]> = this.search$.pipe(\n        debounceTime(400),\n        distinctUntilChanged(),\n        switchMap((query) => {\n            this.loading = true;\n            return this.options && this.options.length > 0\n                ? of(this.options)\n                : query.length >= 3\n                ? !this.guests\n                    ? this.query_fn(query)\n                    : forkJoin([searchStaff(query), searchGuests(query)])\n                : of([]);\n        }),\n        catchError((_) => of([])),\n        map((list: User[]) => {\n            this.loading = false;\n            list = flatten(list);\n            const search = (this.search_str || '').toLowerCase();\n            return list.filter(\n                (item) => !this.filter || this.filter(item, search)\n            );\n        })\n    );\n\n    /** Form control on change handler */\n    private _onChange: (_: User) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User) => void;\n\n    @ViewChild('input', { read: ElementRef })\n    private _input_el: ElementRef<HTMLInputElement>;\n\n    public cancelReset = () => this.clearTimeout('reset');\n\n    public blurInput = () => {\n        this.timeout('blur', () => this._input_el?.nativeElement?.blur());\n    };\n\n    public ngOnInit(): void {\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => (this.user_list = list))\n        );\n    }\n\n    /**\n     * Reset the search string back to the name of the active user\n     */\n    public resetSearchString() {\n        this.timeout(\n            'reset',\n            () => (this.search_str = this.active_user?.name || ''),\n            100\n        );\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User | string, email?: string): void {\n        if (\n            typeof new_value === 'string' &&\n            (new_value as any) === this.search_str\n        ) {\n            new_value = new User({\n                name: (this.search_str || email || '').split('@')[0],\n                email: this.search_str || email || '',\n            });\n        }\n        if (!(new_value instanceof User)) return;\n        this.active_user = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User) {\n        this.active_user = value;\n        this.resetSearchString();\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User) => void): void {\n        this._onTouch = fn;\n    }\n}\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@placeos/common';\n\nimport { User } from './user.class';\nimport { generateUserForm } from './user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    template: `\n        <header>\n            <div class=\"heading\" mat-dialog-title>\n                {{ user?.id ? 'Edit' : 'Add' }} External Attendee\n            </div>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"flex flex-col items-center w-full p-2\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <user-form [form]=\"form\"></user-form>\n        </main>\n        <footer\n            class=\"flex items-center justify-center w-full p-2 border-t border-gray-300 space-x-2\"\n            *ngIf=\"!loading\"\n        >\n            <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n            <button mat-button (click)=\"saveChanges()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"flex flex-col items-center w-full p-2 space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving attendee...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 20em !important;\n                width: 100%;\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n        `,\n    ],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'user-form',\n    template: `\n        <form user-form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label for=\"name\" [class.error]=\"hasError('name')\">\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.email\">\n                <label for=\"email\" [class.error]=\"hasError('email')\">\n                    Email<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"email\"\n                        placeholder=\"Email Address\"\n                        formControlName=\"email\"\n                    />\n                    <mat-error>A valid email is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.organisation\">\n                <label for=\"org\" [class.error]=\"hasError('organisation')\">\n                    Organisation<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"org\"\n                        placeholder=\"Organisation\"\n                        formControlName=\"organisation\"\n                    />\n                    <mat-error>Organisation is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.phone\">\n                <label for=\"phone\" [class.error]=\"hasError('phone')\">\n                    Phone:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Phone\"\n                        formControlName=\"phone\"\n                    />\n                    <mat-error>Phone format is invalid</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n                <mat-checkbox\n                    name=\"assistance-required\"\n                    color=\"primary\"\n                    formControlName=\"assistance_required\"\n                >\n                    Assistance required\n                </mat-checkbox>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n                <mat-checkbox\n                    name=\"visit-expected\"\n                    color=\"primary\"\n                    formControlName=\"visit_expected\"\n                >\n                    Visit expected\n                </mat-checkbox>\n            </div>\n        </form>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n\n    public hasError(name: string) {\n        return (\n            this.form.controls[name].invalid && this.form.controls[name].touched\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { NewUserModalComponent } from './new-user-modal.component';\nimport { UserFormComponent } from './user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { Point } from '@placeos/svg-viewer';\nimport { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n","import { del, get, patch } from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '../../../events/src/lib/event.class';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { GuestUser } from './user.class';\nimport { Observable } from 'rxjs';\n\nconst GUEST_ENDPOINT = '/api/staff/v1/guests';\n\nexport interface GuestsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zone_ids?: string;\n    /** Comma seperated list of system(space) ids to check availability */\n    system_ids?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n}\n\n/**\n * Search guests\n * @param q Search string for filtering guests\n */\nexport function searchGuests(q: string): Observable<GuestUser[]> {\n    const query = toQueryString({ q });\n    return get(`${GUEST_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * List guests\n * @param q Parameters to pass to the API request\n */\nexport function queryGuests(q: GuestsQueryParams): Observable<GuestUser[]> {\n    const query = toQueryString({ ...q });\n    return get(`${GUEST_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new GuestUser(item)))\n    );\n}\n\n/**\n * Get guest details\n * @param id ID of the guest\n */\nexport function showGuest(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Update guest metadata\n * @param id ID of the guest\n * @param data New metadata state\n */\nexport function updateGuest(id: string, data: Partial<GuestUser>) {\n    return patch(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, data).pipe(\n        map((item) => new GuestUser(item))\n    );\n}\n\n/**\n * Remove a guest\n * @param id ID of the guest to remove\n */\nexport function removeGuest(id: string) {\n    return del(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * List upcoming meetings for a guest\n * @param id ID of the guest\n */\nexport function listGuestMeetings(id: string) {\n    return get(`${GUEST_ENDPOINT}/${encodeURIComponent(id)}/meetings`).pipe(\n        map((list) => list.map((item) => new CalendarEvent(item)))\n    );\n}\n","import { get } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { StaffUser } from './user.class';\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${q ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n"],"sourceRoot":"webpack:///"}