{"version":3,"file":"default-libs_bookings_src_lib_bookings_module_ts.js","mappings":"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","names":["i0","ctx_r0","day","BookingCardComponent_h4_0_span_1_Template","show_day","booking","date","time_format","type","location","status","_r2","viewDetails","BookingCardComponent_a_1_app_icon_9_Template","BookingCardComponent_a_1_div_12_Template","BookingCardComponent_a_1_div_15_Template","BookingCardComponent_a_1_div_16_Template","BookingCardComponent_a_1_div_17_Template","_c0","_c1","id","title","period","desk_icon_r3","raw_description","asset_name","asset_id","for_current_user","booking_type","is_reserved_parking_space","BookingCardComponent","AsyncHandler","this","user_email","toLowerCase","currentUser","email","_settings","is_done","constructor","_dialog","_route","_org","_parking","super","edit","EventEmitter","remove","end","assigned_space","pipe","map","space","ngOnInit","subscription","queryParamMap","subscribe","params","has","get","ngOnChanges","changes","removeHtmlTags","description","Date","now","isSameDay","format","level","levelWithID","zones","display_name","name","is_all_day","start","duration","addMinutes","dur","formatDuration","hours","Math","floor","minutes","replace","html","DOMParser","parseFromString","body","textContent","timeout","ref","open","GroupEventDetailsModalComponent","BookingDetailsModalComponent","data","concierge","componentInstance","emit","static","__ngFactoryType__","i1","i2","i3","i4","i5","_angular_core__WEBPACK_IMPORTED_MODULE_6__","VBU","selectors","inputs","outputs","features","decls","vars","consts","template","rf","ctx","BookingCardComponent_h4_0_Template","BookingCardComponent_a_1_Template","BookingCardComponent_ng_template_2_Template","ctx_r1","extension_data","images","checked_in","_r3","toggleCheckedIn","BookingDetailsModalComponent_div_10_button_1_div_1_Template","BookingDetailsModalComponent_div_10_button_1_ng_template_2_Template","checking_in","loading_state_r4","BookingDetailsModalComponent_div_10_button_1_Template","checked_out_at","checked_out","auto_checkin","state","menu_r5","item_r8","quantity","request_r7","_r6","$implicit","show_request","BookingDetailsModalComponent_ng_container_36_div_5_div_13_Template","deliver_at","items","BookingDetailsModalComponent_ng_container_36_div_5_Template","valid_assets","length","map_id","_r9","_r10","setDeskHeight","_r11","_r12","_r13","building","buildings","find","bld","includes","region","regions","parent_id","can_edit","is_checked_in","desk_height_enabled","is_in_progress","ts","booking_start","booking_end","all_day","booking_status","_booking","hide_map","content","MapPinComponent","has_assets","console","log","_this","_asyncToGenerator","bkn","instance","checkinBookingInstance","checkinBooking","toPromise","catch","_","notifyError","notifySuccess","linked_bookings","approved","rejected","viewLocation","MapLocateModalComponent","maxWidth","maxHeight","item","afterClosed","DeskSettingsModalComponent","asset_ids","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_8__","i18n_0","$localize","BookingDetailsModalComponent_div_2_Template","BookingDetailsModalComponent_div_3_Template","BookingDetailsModalComponent_div_10_Template","BookingDetailsModalComponent_ng_container_36_Template","_r1","BookingDetailsModalComponent_ng_container_38_Template","BookingDetailsModalComponent_button_44_Template","BookingDetailsModalComponent_button_45_Template","BookingDetailsModalComponent_button_46_Template","BookingDetailsModalComponent_button_47_Template","BookingDetailsModalComponent_button_48_Template","address","ANIMATION_SHOW_CONTRACT_EXPAND","BOOKING_TYPES","BookingFormService","view","_view","getValue","resourceUserName","_resource_use","newForm","Booking","form","reset","patchValue","cleanObject","undefined","valueChanges","getRawValue","_assets","setOptions","storeForm","next","_options","_router","_payments","BehaviorSubject","_loading","last_success","JSON","parse","sessionStorage","getItem","loading","asObservable","options","shareReplay","generateBookingForm","resources","combineLatest","active_building","distinctUntilKeyChanged","debounceTime","switchMap","of","loadResourceList","tap","resource","list","Array","forEach","push","unique","sort","a","b","localeCompare","booking_rules","building_list","Promise","all","showMetadata","building_rules","mapping","rules","details","available_resources","merge","timer","filter","restrictions","user","startOfDay","valueOf","bookedResourceList","period_start","getUnixTime","period_end","zone_id","organisation","booked_ids","available","asset","rulesForResource","host","zone","hidden","groups","some","grp","bookable","every","catchError","grouped_availability","asset_list","members","group","pop","events","NavigationEnd","url","clearForm","initialised","first","setView","value","setFeature","feature","enable","splice","findIndex","e","resetForm","booked_by","removeItem","setItem","stringify","loadForm","booking_data","clearOldState","openBookingLinkModal","force","markAllAsTouched","valid","event","BookingLinkModalComponent","confirmPost","checkQuestions","openConfirmModal","icon","reason","postFormForGroup","close","postForm","ignore_check","_this2","getInvalidFields","join","checkResourceAvailable","payment_module","receipt","makePayment","resource_name","success","invoice","invoice_id","booking_asset","event_id","Object","q","ical_uid","booking_id","update_master","start_time","result","saveBooking","user_name","assets","toJSON","phone","department","error","requests","validateAssetRequestsForResource","from_booking","booked_by_email","_this3","extra_members","take","active_resource","_getNearbyResources","group_members","idx","unavailable","group_name","i","user_id","notifyWarn","_this4","DeskQuestionsModalComponent","race","key","_this5","active_bookings","queryBookings","limit","allowed_bookings","current","use_region","map_metadata","metadata","d","lockers","locker","bank_id","forkJoin","listChildMetadata","flatten","map_url","count","nearby_resources","findNearbyFeature","i6","_angular_core__WEBPACK_IMPORTED_MODULE_33__","jDH","factory","ɵfac","providedIn","_event","outlook_link","generateMicrosoftCalendarLink","google_link","generateGoogleCalendarLink","ical_link","generateCalendarFileLink","_angular_core__WEBPACK_IMPORTED_MODULE_4__","SharedBookingsModule","fesm2022_core","$C","G2t","ReactiveFormsModule","imports","CommonModule","FormsModule","MatRadioModule","MatInputModule","MatFormFieldModule","MatDatepickerModule","MatButtonModule","MatDialogModule","MatProgressSpinnerModule","MatCheckboxModule","MatAutocompleteModule","FormFieldsModule","ComponentsModule","MatRippleModule","MatTooltipModule","SharedSpacesModule","SharedEventsModule","SharedUsersModule","$event","ctx_r2","_r4","_r5","DeskConfirmModalComponent_ng_container_5_div_2_Template","DeskConfirmModalComponent_ng_container_5_div_6_Template","DeskConfirmModalComponent_ng_container_5_a_date_field_7_Template","DeskConfirmModalComponent_ng_container_5_div_8_Template","confirm","can_set_host","can_set_date","hide_reason","desks","desk_list","DeskConfirmModalComponent","_data","_angular_core__WEBPACK_IMPORTED_MODULE_3__","DeskConfirmModalComponent_button_4_Template","DeskConfirmModalComponent_ng_container_5_Template","DeskConfirmModalComponent_ng_template_6_Template","load_state_r6","opt_r3","ctx_r3","selected_features","DeskListFieldComponent_div_1_div_1_mat_checkbox_4_Template","item_r5","DeskListFieldComponent_div_1_div_1_Template","DeskListFieldComponent_div_1_img_3_Template","DeskListFieldComponent_div_1_ng_template_4_Template","changeResources","removeResource","toggleFavourite","placeholder_r6","favorites","EMPTY_FAVS","DeskListFieldComponent","FAV_DESK_KEY","room_size","disabled","registerOnChange","fn","_onChange","registerOnTouched","_onTouch","setDisabledState","s","DeskSelectModalComponent","capacity","selected","setValue","new_value","writeValue","fav_list","saveUserSetting","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","DeskListFieldComponent_div_1_Template","submit","FormGroup","travelled","FormControl","unwell","contact","keys","failure","_angular_core__WEBPACK_IMPORTED_MODULE_1__","DeskQuestionsModalComponent_div_0_Template","DeskQuestionsModalComponent_ng_template_1_Template","fail_state_r3","desk","feat_r3","DeskDetailsComponent_ng_container_0_section_31_div_3_Template","DeskDetailsComponent_ng_container_0_image_carousel_2_Template","toggleFav","DeskDetailsComponent_ng_container_0_section_31_Template","DeskDetailsComponent_ng_container_0_section_32_Template","active","activeChange","fav","DeskDetailsComponent","updateFeature","_angular_core__WEBPACK_IMPORTED_MODULE_2__","i18n_1","DeskDetailsComponent_ng_container_0_Template","DeskDetailsComponent_ng_template_1_Template","emptyState_r4","show_fav","DeskFiltersDisplayComponent","_state","endOfDay","_bsheet","viewChange","o","f","editFilter","DeskFiltersComponent","DeskFiltersDisplayComponent_ng_container_13_Template","DeskFiltersDisplayComponent_ng_container_14_Template","DeskFiltersDisplayComponent_div_15_Template","DeskFiltersDisplayComponent_div_17_Template","tmp_5_0","tmp_6_0","reg_r4","setRegion","DeskFiltersComponent_mat_form_field_13_mat_option_2_Template","bld_r6","setBuilding","DeskFiltersComponent_mat_form_field_15_mat_option_5_Template","tmp_3_0","tmp_4_0","lvl_r8","DeskFiltersComponent_mat_form_field_17_mat_option_3_div_2_Template","_r7","DeskFiltersComponent_mat_form_field_17_mat_option_3_Template","tmp_1_0","levels","use_24hr","timezone","feat_r11","DeskFiltersComponent_section_36_div_3_Template","reg","allow_time_changes","allow_all_day","end_date","addDays","_bsheet_ref","can_close","active_buildings","region_list","active_region","levelsForRegion","levelsForBuilding","lvl","tags","dismiss","setLevel","l","r","_angular_core__WEBPACK_IMPORTED_MODULE_7__","hide_levels","DeskFiltersComponent_button_2_Template","DeskFiltersComponent_mat_form_field_13_Template","DeskFiltersComponent_mat_form_field_15_Template","DeskFiltersComponent_mat_form_field_17_Template","DeskFiltersComponent_div_24_Template","DeskFiltersComponent_div_25_Template","DeskFiltersComponent_section_36_Template","DeskFiltersComponent_div_38_Template","tmp_2_0","tmp_16_0","tmp_18_0","desk_r2","selectDesk","DeskListComponent_ng_container_5_ul_1_li_1_div_3_Template","DeskListComponent_ng_container_5_ul_1_li_1_img_4_Template","DeskListComponent_ng_container_5_ul_1_li_1_ng_template_5_Template","placeholder_r4","isFavourite","DeskListComponent_ng_container_5_ul_1_li_1_Template","DeskListComponent_ng_container_5_ul_1_Template","empty_state_r5","DeskListComponent","onSelect","desk_id","DeskListComponent_ng_container_5_Template","DeskListComponent_ng_template_7_Template","DeskListComponent_ng_template_9_Template","lvl_r3","DeskMapComponent_mat_form_field_1_mat_option_2_div_2_Template","zone_ids","DeskMapComponent_mat_form_field_1_mat_option_2_Template","DeskMapComponent","is_displayed","zoom","center","x","y","coordinates","_change","actions","action","callback","ExploreDeskInfoComponent","full_size","no_scale","z_index","styles","free_desks","reduce","colours","fill","DEFAULT_COLOURS","latitude","longitude","split","parseFloat","setZoom","new_zoom","max","min","resetMap","DeskMapComponent_mat_form_field_1_Template","tmp_0_0","displayed","selected_ids","_dialog_ref","_event_form","isSelected","setSelected","setTimeout","DeskSelectModalComponent_desk_list_16_Template","DeskSelectModalComponent_button_19_Template","DeskSelectModalComponent_ng_template_37_Template","map_view_r6","preset","setPreset","edit_presets","height","updatePreset","formatLabel","toFixed","sitting_height","standing_height","last_height","parseInt","localStorage","new_height","sys_id","binding","getModule","execute","DeskSettingsModalComponent_div_0_Template","DeskSettingsModalComponent_ng_template_1_Template","desk_height_tooltip_r4","bld_r5","InviteVisitorFormComponent_ng_container_0_div_1_form_4_div_1_mat_option_6_Template","setVisitor","company","item_r10","filterVisitors","InviteVisitorFormComponent_ng_container_0_div_1_form_4_ng_container_19_mat_option_9_Template","InviteVisitorFormComponent_ng_container_0_div_1_form_4_ng_container_19_mat_option_20_Template","name_auto_r11","filtered_visitors","email_auto_r12","InviteVisitorFormComponent_ng_container_0_div_1_form_4_div_1_Template","InviteVisitorFormComponent_ng_container_0_div_1_form_4_div_18_Template","InviteVisitorFormComponent_ng_container_0_div_1_form_4_ng_container_19_Template","can_book_for_others","multiple","multi_state_r13","InviteVisitorFormComponent_ng_container_0_div_1_form_4_Template","sendInvite","InviteVisitorFormComponent_ng_container_0_div_1_Template","loading_many","load_state_r14","last_count","InviteVisitorFormComponent_ng_template_1_ng_container_4_Template","InviteVisitorFormComponent_ng_template_1_ng_container_5_Template","InviteVisitorFormComponent_ng_template_1_ng_container_10_Template","InviteVisitorFormComponent_ng_template_1_ng_container_11_Template","_r15","onDone","sent","InviteVisitorFormComponent","_service","done","visitors","initFormZone","setValidators","Validators","required","visitor_details","old_visitors","_bookForMany","_bookForOne","attendees","User","randomString","_angular_core__WEBPACK_IMPORTED_MODULE_10__","InviteVisitorFormComponent_ng_container_0_Template","InviteVisitorFormComponent_ng_template_1_Template","InviteVisitorFormComponent_ng_template_3_Template","InviteVisitorFormComponent_ng_template_5_Template","send_state_r16","locker_r2","clicked","position","size","LockerGridComponent","columns","bank","bank_status","LockerGridComponent_button_3_Template","LockersService","_level","lockers_banks$","PlaceMetadata","lockers$","bank_list","level_id","filtered_lockers$","saveLockers","updateMetadata","_angular_core__WEBPACK_IMPORTED_MODULE_12__","ParkingSpaceDetailsComponent_ng_container_0_image_carousel_2_Template","ParkingSpaceDetailsComponent","_updateFeature","ParkingSpaceDetailsComponent_ng_container_0_Template","ParkingSpaceDetailsComponent_ng_template_1_Template","empty_state_r3","removeFeature","ParkingSpaceFiltersDisplayComponent","editFilters","ParkingSpaceFiltersComponent","_updateLocation","feat","ParkingSpaceFiltersDisplayComponent_div_9_Template","ParkingSpaceFiltersDisplayComponent_div_20_Template","capcaity","tmp_7_0","bld_r4","ParkingSpaceFiltersComponent_ng_container_13_mat_form_field_1_mat_option_5_Template","lvl_r6","ParkingSpaceFiltersComponent_ng_container_13_mat_form_field_3_mat_option_3_Template","ParkingSpaceFiltersComponent_ng_container_13_mat_form_field_1_Template","ParkingSpaceFiltersComponent_ng_container_13_mat_form_field_3_Template","reg_r8","ParkingSpaceFiltersComponent_ng_container_14_mat_form_field_1_mat_option_2_Template","level_r10","ParkingSpaceFiltersComponent_ng_container_14_mat_form_field_3_mat_optgroup_5_mat_option_1_Template","bld_r11","ParkingSpaceFiltersComponent_ng_container_14_mat_form_field_3_mat_optgroup_5_Template","region_levels","ParkingSpaceFiltersComponent_ng_container_14_mat_form_field_1_Template","ParkingSpaceFiltersComponent_ng_container_14_mat_form_field_3_Template","max_duration","feat_r14","toggleFeature","ParkingSpaceFiltersComponent_section_30_div_3_Template","_form","active_levels","new_list","ParkingSpaceFiltersComponent_button_2_Template","ParkingSpaceFiltersComponent_ng_container_13_Template","ParkingSpaceFiltersComponent_ng_container_14_Template","ParkingSpaceFiltersComponent_div_21_Template","ParkingSpaceFiltersComponent_section_30_Template","ParkingSpaceFiltersComponent_div_32_Template","tmp_8_0","tmp_10_0","space_r2","selectSpace","ParkingSpaceListComponent_ng_container_5_ul_1_li_1_div_3_Template","ParkingSpaceListComponent_ng_container_5_ul_1_li_1_img_4_Template","ParkingSpaceListComponent_ng_container_5_ul_1_li_1_ng_template_5_Template","ParkingSpaceListComponent_ng_container_5_ul_1_li_1_Template","ParkingSpaceListComponent_ng_container_5_ul_1_Template","ParkingSpaceListComponent","space_id","ParkingSpaceListComponent_ng_container_5_Template","ParkingSpaceListComponent_ng_template_7_Template","ParkingSpaceListComponent_ng_template_9_Template","ParkingSpaceLocationPinComponent","MAP_FEATURE_DATA","ParkingSpaceLocationPinComponent_div_15_Template","ParkingSpaceLocationPinComponent_app_icon_16_Template","ParkingSpaceSelectMapComponent","_maps_people","_seletedSpace","available_spaces","setCustomZone","_angular_core__WEBPACK_IMPORTED_MODULE_5__","ParkingSpaceSelectMapComponent_ng_container_0_Template","ParkingSpaceSelectMapComponent_mat_option_4_Template","FAV_PARKING_KEY","ParkingSpaceSelectModalComponent","spaces","ParkingSpaceSelectModalComponent_parking_space_list_11_Template","ParkingSpaceSelectModalComponent_button_14_Template","ParkingSpaceSelectModalComponent_ng_template_32_Template","ParkingSpaceListFieldComponent_div_1_img_2_Template","ParkingSpaceListFieldComponent_div_1_ng_template_3_Template","ParkingSpaceListFieldComponent","disable_date","ParkingSpaceListFieldComponent_div_1_Template","ParkingService","level_list","blds","buildingsForRegion","bld_ids","lvls","users","assigned_to","user_details","deny_parking_access","deny","booked_space","booking_list","_angular_core__WEBPACK_IMPORTED_MODULE_17__","ExploreDeskInfoComponent_ng_template_1_p_5_Template","ExploreDeskInfoComponent_ng_template_1_p_6_Template","ExploreDeskInfoComponent_ng_template_1_p_7_Template","x_pos","y_pos","_details","_element","tries","parent","nativeElement","parentElement","style","top","left","available_until","ExploreDeskInfoComponent_ng_template_1_Template","desk_tooltip_r2","in_use_count","ExploreLockerBankInfoComponent","openBankModal","ExploreLockerBankModalComponent","ExploreLockerBankInfoComponent_ng_template_2_Template","desk_tooltip_r3"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/booking-card.component.ts","./libs/bookings/src/lib/booking-details-modal.component.ts","./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/booking-link-modal.component.ts","./libs/bookings/src/lib/bookings.module.ts","./libs/bookings/src/lib/desk-confirm-modal.component.ts","./libs/bookings/src/lib/desk-list-field.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/desk-select-modal/desk-details.component.ts","./libs/bookings/src/lib/desk-select-modal/desk-filters-display.component.ts","./libs/bookings/src/lib/desk-select-modal/desk-filters.component.ts","./libs/bookings/src/lib/desk-select-modal/desk-list.component.ts","./libs/bookings/src/lib/desk-select-modal/desk-map.component.ts","./libs/bookings/src/lib/desk-select-modal/desk-select-modal.component.ts","./libs/bookings/src/lib/desk-settings-modal.component.ts","./libs/bookings/src/lib/invite-visitor-form.component.ts","./libs/bookings/src/lib/locker-grid.component.ts","./libs/bookings/src/lib/lockers.service.ts","./libs/bookings/src/lib/parking-select-modal/parking-details.component.ts","./libs/bookings/src/lib/parking-select-modal/parking-filters-display.component.ts","./libs/bookings/src/lib/parking-select-modal/parking-filters.component.ts","./libs/bookings/src/lib/parking-select-modal/parking-list.component.ts","./libs/bookings/src/lib/parking-select-modal/parking-location-pin.component.ts","./libs/bookings/src/lib/parking-select-modal/parking-map.component.ts","./libs/bookings/src/lib/parking-select-modal/parking-select-modal.component.ts","./libs/bookings/src/lib/parking-space-list-field.component.ts","./libs/bookings/src/lib/parking.service.ts","./libs/explore/src/lib/explore-desk-info.component.ts","./libs/explore/src/lib/explore-locker-bank-info.component.ts","./libs/explore/src/lib/explore-locker-bank-modal.component.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport { SettingsService, currentUser } from '@placeos/common';\nimport { addMinutes, format, formatDuration, isSameDay } from 'date-fns';\nimport { map } from 'rxjs/operators';\n\nimport { Booking } from './booking.class';\nimport { BookingDetailsModalComponent } from './booking-details-modal.component';\nimport { AsyncHandler } from 'libs/common/src/lib/async-handler.class';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { ParkingService } from './parking.service';\nimport { GroupEventDetailsModalComponent } from '../../../events/src/lib/group-event-details-modal.component';\n\n@Component({\n    selector: 'booking-card',\n    template: `\n        <h4 class=\"mb-2 flex items-center\" *ngIf=\"booking\">\n            <span *ngIf=\"show_day\" day>{{ day }},&nbsp;</span>\n            {{ booking?.date | date: time_format }}\n            <span class=\"text-xs px-2\">({{ booking?.date | date: 'z' }})</span>\n        </h4>\n        <a\n            name=\"view-booking-details\"\n            class=\"w-full cursor-pointer overflow-hidden relative\"\n            [routerLink]=\"['./']\"\n            [queryParams]=\"{ booking: booking?.id }\"\n            (click)=\"viewDetails()\"\n            *ngIf=\"booking\"\n        >\n            <div\n                class=\"w-full bg-base-100 border border-base-300 rounded-xl shadow py-4 relative\"\n            >\n                <h4 class=\"px-4 text-lg\">{{ booking?.title }}</h4>\n                <div class=\"flex mx-4 my-2\">\n                    <status-pill [status]=\"status\">{{ period }}</status-pill>\n                </div>\n                <div\n                    class=\"flex flex-wrap flex-col sm:flex-row sm:divide-x divide-base-200-500 py-2 space-y-2 sm:space-y-0\"\n                >\n                    <div class=\"flex items-center px-4 max-w-[33%]\">\n                        <app-icon *ngIf=\"type !== 'desk'; else desk_icon\">{{\n                            type\n                        }}</app-icon>\n                        <div class=\"mx-2 truncate flex-1 w-1/2\">\n                            {{\n                                raw_description ||\n                                    booking?.asset_name ||\n                                    booking?.asset_id\n                            }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center px-4\" *ngIf=\"location\">\n                        <app-icon>place</app-icon>\n                        <div class=\"mx-2 truncate\">{{ location }}</div>\n                    </div>\n                </div>\n                <app-icon\n                    class=\"absolute top-1/2 right-1 text-4xl -translate-y-1/2\"\n                >\n                    chevron_right\n                </app-icon>\n                <div\n                    class=\"absolute top-2 right-2 bg-warning/50 rounded-xl px-2 py-1 text-xs\"\n                    *ngIf=\"\n                        !for_current_user &&\n                        booking?.booking_type !== 'group-event'\n                    \"\n                >\n                    Associate\n                </div>\n                <div\n                    class=\"absolute top-2 right-2 bg-warning/50 rounded-xl px-2 py-1 text-xs\"\n                    *ngIf=\"booking?.booking_type === 'group-event'\"\n                >\n                    Event\n                </div>\n                <div\n                    class=\"absolute top-2 right-2 bg-warning/50 rounded-xl px-2 py-1 text-xs\"\n                    *ngIf=\"is_reserved_parking_space | async\"\n                >\n                    {{\n                        booking.status !== 'declined' ? 'RESERVED' : 'RELEASED'\n                    }}\n                </div>\n            </div>\n        </a>\n        <ng-template #desk_icon>\n            <img src=\"assets/icons/desk-outline.svg\" class=\"w-5 h-5\" />\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                position: relative;\n            }\n        `,\n    ],\n})\nexport class BookingCardComponent extends AsyncHandler {\n    @Input() public booking: Booking;\n    @Input() public show_day: boolean = false;\n    @Output() public edit = new EventEmitter();\n    @Output() public remove = new EventEmitter();\n    @Output() public end = new EventEmitter();\n\n    public raw_description = '';\n\n    public readonly is_reserved_parking_space =\n        this._parking.assigned_space.pipe(\n            map(\n                (space) =>\n                    this.booking.booking_type === 'parking' &&\n                    space &&\n                    this.booking.asset_id === space.id,\n            ),\n        );\n\n    public get for_current_user() {\n        return (\n            this.booking?.user_email.toLowerCase() ===\n            currentUser()?.email.toLowerCase()\n        );\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    public get status() {\n        if (this.booking?.is_done) return 'neutral';\n        if (this.booking?.status === 'approved') return 'success';\n        if (this.booking?.status === 'declined') return 'error';\n        if (this.booking?.status === 'cancelled') return 'error';\n        if (this.booking?.status === 'tentative') return 'warning';\n        return 'warning';\n    }\n\n    constructor(\n        private _dialog: MatDialog,\n        private _route: ActivatedRoute,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _parking: ParkingService,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) =>\n                params.has('booking') &&\n                this.booking?.id === params.get('event')\n                    ? this.viewDetails()\n                    : '',\n            ),\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.booking) {\n            this.raw_description = this.removeHtmlTags(\n                this.booking?.description,\n            );\n        }\n    }\n\n    public get type() {\n        if (this.booking?.type === 'desk') return 'desk';\n        if (this.booking?.type === 'parking') return 'drive_eta';\n        return 'book';\n    }\n\n    public get day() {\n        const date = this.booking?.date || Date.now();\n        const is_today = isSameDay(Date.now(), date);\n        return `${is_today ? 'Today' : format(date, 'EEEE')}`;\n    }\n\n    public get location() {\n        const level = this._org.levelWithID(this.booking?.zones || []);\n        return `${level?.display_name || level?.name || ''}`;\n    }\n\n    public get period() {\n        if (this.booking?.is_all_day) return 'All Day';\n        const start = this.booking?.date || Date.now();\n        const duration = this.booking?.duration || 60;\n        const end = addMinutes(start, duration);\n        const dur = formatDuration({\n            hours: Math.floor(duration / 60),\n            minutes: duration % 60,\n        })\n            .replace(' hour', 'hr')\n            .replace(' minute', 'min');\n        return `${format(start, this.time_format)} - ${format(\n            end,\n            this.time_format,\n        )} (${dur})`;\n    }\n\n    public removeHtmlTags(html: string) {\n        const doc = new DOMParser().parseFromString(html, 'text/html');\n        return doc.body.textContent || '';\n    }\n\n    public viewDetails() {\n        if (!this.booking) return;\n        this.timeout('open', () => {\n            const view_component: any =\n                this.booking.booking_type === 'group-event'\n                    ? GroupEventDetailsModalComponent\n                    : BookingDetailsModalComponent;\n            const data =\n                this.booking.booking_type === 'group-event'\n                    ? { booking: this.booking, concierge: false }\n                    : this.booking;\n            const ref: any = this._dialog.open(view_component, { data });\n            this.subscription(\n                'edit',\n                ref.componentInstance.edit?.subscribe(() => this.edit.emit()),\n            );\n            this.subscription(\n                'remove',\n                ref.componentInstance.remove?.subscribe(() =>\n                    this.remove.emit(),\n                ),\n            );\n            this.subscription(\n                'end',\n                ref.componentInstance.end?.subscribe(() => this.end.emit()),\n            );\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    ANIMATION_SHOW_CONTRACT_EXPAND,\n    notifyError,\n    notifySuccess,\n    SettingsService,\n} from '@placeos/common';\nimport { addMinutes, format, formatDuration } from 'date-fns';\n\nimport { MapLocateModalComponent } from 'libs/components/src/lib/map-locate-modal.component';\nimport { MapPinComponent } from 'libs/components/src/lib/map-pin.component';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Booking } from './booking.class';\nimport { checkinBooking, checkinBookingInstance } from './bookings.fn';\n\nimport { DeskSettingsModalComponent } from './desk-settings-modal.component';\n\n@Component({\n    selector: 'booking-details-modal',\n    template: `\n        <div\n            class=\"w-[100vw] h-[100vh] sm:relative sm:inset-auto sm:w-[51rem] sm:h-auto sm:max-h-[80vh] bg-base-100 sm:bg-base-200 sm:rounded overflow-auto space-y-2 pb-2\"\n        >\n            <div\n                class=\"sm:flex flex-col items-center pb-4 max-h-screen sm:max-h-[80vh] sm:px-16 sm:border-b bg-base-100 border-base-200\"\n            >\n                <div\n                    class=\"h-8 w-full sm:hidden block\"\n                    *ngIf=\"!booking?.extension_data?.images?.length\"\n                ></div>\n                <div\n                    class=\"bg-neutral w-full h-64 sm:rounded-b overflow-hidden\"\n                    *ngIf=\"booking?.extension_data?.images?.length\"\n                >\n                    <image-carousel\n                        [images]=\"booking?.extension_data?.images\"\n                        class=\"w-full h-64\"\n                    ></image-carousel>\n                </div>\n                <h3\n                    title\n                    class=\"px-3 mt-2 text-xl font-medium w-full\"\n                    [class.pt-4]=\"!booking?.extension_data?.images\"\n                >\n                    {{ booking.title }}\n                </h3>\n                <div class=\"sm:flex items-center justify-between w-full\">\n                    <div class=\"flex m-2\">\n                        <status-pill [status]=\"booking_status\">\n                            {{ period }}\n                        </status-pill>\n                    </div>\n                    <div\n                        actions\n                        class=\"flex items-center space-x-2 px-2\"\n                        *ngIf=\"!booking.is_done\"\n                    >\n                        <button\n                            btn\n                            matRipple\n                            class=\"flex-1 h-10 border-none\"\n                            [class.bg-success]=\"booking.checked_in\"\n                            [class.text-success-content]=\"booking.checked_in\"\n                            [disabled]=\"checking_in\"\n                            *ngIf=\"\n                                !booking.checked_out_at &&\n                                !checked_out &&\n                                !auto_checkin &&\n                                (booking.state === 'upcoming' ||\n                                    booking.state === 'in_progress') &&\n                                booking.status !== 'declined'\n                            \"\n                            (click)=\"toggleCheckedIn()\"\n                        >\n                            <div\n                                class=\"flex items-center space-x-2 justify-center\"\n                                *ngIf=\"!checking_in; else loading_state\"\n                            >\n                                <app-icon>{{\n                                    booking.checked_in ? 'done' : 'arrow_back'\n                                }}</app-icon>\n                                <div class=\"mr-4\">\n                                    {{\n                                        booking.checked_in\n                                            ? 'Checked in'\n                                            : 'Check in'\n                                    }}\n                                </div>\n                            </div>\n                            <ng-template #loading_state>\n                                <mat-spinner\n                                    class=\"mx-auto\"\n                                    [diameter]=\"32\"\n                                ></mat-spinner>\n                            </ng-template>\n                        </button>\n                        <button\n                            icon\n                            matRipple\n                            [matMenuTriggerFor]=\"menu\"\n                            class=\"bg-secondary rounded text-white h-12 w-12\"\n                        >\n                            <app-icon>more_horiz</app-icon>\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"sm:flex flex-wrap sm:px-12\">\n                <div\n                    class=\"sm:p-4 sm:bg-base-100 rounded sm:m-2 sm:border border-base-200 flex-grow-[4] min-w-1/3 sm:w-[16rem]\"\n                >\n                    <h3 class=\"px-3 mt-2 text-lg font-medium mb-2\" i18n>\n                        Details\n                    </h3>\n                    <div class=\"flex items-center px-2 space-x-2\">\n                        <app-icon>event</app-icon>\n                        <div>{{ booking.date | date: 'EEEE, dd LLLL y' }}</div>\n                    </div>\n                    <div class=\"flex items-center px-2 space-x-2\">\n                        <app-icon>schedule</app-icon>\n                        <div>{{ period }}</div>\n                    </div>\n                    <div class=\"flex items-center px-2 space-x-2\">\n                        <app-icon>map</app-icon>\n                        <div>\n                            {{ level?.display_name || level?.name }},\n                            {{ booking.asset_name || booking.asset_id }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center px-2 space-x-2\">\n                        <app-icon>place</app-icon>\n                        <div>\n                            {{ building?.display_name || building?.name }}\n                            {{\n                                building?.address ? ', ' + building.address : ''\n                            }}\n                        </div>\n                    </div>\n                </div>\n                <ng-container *ngIf=\"has_assets\">\n                    <div\n                        class=\"mt-4 sm:p-4 sm:bg-base-100 rounded sm:m-2 sm:border border-base-200 flex-grow-[3] min-w-1/3 sm:w-[16rem]\"\n                    >\n                        <h3 class=\"mx-3 py-2 text-lg font-medium\" i18n>\n                            Assets ({{ booking.valid_assets?.length || 0 }})\n                        </h3>\n                        <div class=\"flex flex-col space-y-2\">\n                            <div\n                                request\n                                *ngFor=\"let request of booking.valid_assets\"\n                                class=\"border border-base-300 bg-base-100 rounded-xl overflow-hidden\"\n                            >\n                                <button\n                                    matRipple\n                                    class=\"flex items-center space-x-2 p-3 w-full\"\n                                    (click)=\"\n                                        show_request[request.id] =\n                                            !show_request[request.id]\n                                    \"\n                                >\n                                    <div class=\"flex-1 text-left\">\n                                        <div class=\"text-sm\">\n                                            Requested for\n                                            {{\n                                                request.deliver_at\n                                                    | date\n                                                        : 'MMM d, ' +\n                                                              time_format\n                                            }}\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"flex items-center justify-center rounded-full w-8 h-8\"\n                                        [class.bg-success]=\"\n                                            request.state === 'approved'\n                                        \"\n                                        [class.text-success-content]=\"\n                                            request.state === 'approved'\n                                        \"\n                                        [class.bg-warning]=\"\n                                            request.state !== 'approved' &&\n                                            request.state !== 'rejected'\n                                        \"\n                                        [class.text-warning-content]=\"\n                                            request.state !== 'approved' &&\n                                            request.state !== 'rejected'\n                                        \"\n                                        [class.bg-error]=\"\n                                            request.state === 'rejected'\n                                        \"\n                                        [class.text-error-content]=\"\n                                            request.state === 'rejected'\n                                        \"\n                                        [matTooltip]=\"\n                                            request.state || 'Tentative'\n                                        \"\n                                    >\n                                        <app-icon>\n                                            {{\n                                                request.state === 'approved'\n                                                    ? 'done'\n                                                    : request.state ===\n                                                        'rejected'\n                                                      ? 'close'\n                                                      : 'schedule'\n                                            }}\n                                        </app-icon>\n                                    </div>\n                                    <div\n                                        class=\"flex items-center justify-center rounded-full w-8 h-8\"\n                                    >\n                                        <app-icon class=\"text-2xl\">\n                                            {{\n                                                show_request[request.id]\n                                                    ? 'expand_less'\n                                                    : 'expand_more'\n                                            }}\n                                        </app-icon>\n                                    </div>\n                                </button>\n                                <div\n                                    class=\"flex flex-col bg-base-200 divide-y divide-base-100\"\n                                    [@show]=\"\n                                        show_request[request.id]\n                                            ? 'show'\n                                            : 'hide'\n                                    \"\n                                >\n                                    <div\n                                        class=\"flex items-center px-3 py-1 space-x-2 hover:opacity-90\"\n                                        *ngFor=\"let item of request.items\"\n                                    >\n                                        <div class=\"flex items-center flex-1\">\n                                            <span class=\"text-sm\">{{\n                                                item.name || 'Item'\n                                            }}</span>\n                                        </div>\n                                        <div\n                                            class=\"rounded bg-success text-success-content text-xs px-2 py-1\"\n                                        >\n                                            x{{ item.quantity }}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n                <button\n                    map\n                    class=\"mt-4 sm:my-2 h-64 sm:h-48 relative border border-base-200 overflow-hidden rounded sm:bg-base-100 m-2 flex-grow-[3] min-w-1/3 w-[calc(100%-1rem)] p-2 sm:w-[16rem]\"\n                    (click)=\"viewLocation()\"\n                >\n                    <ng-container *ngIf=\"!hide_map\">\n                        <interactive-map\n                            class=\"pointer-events-none\"\n                            [src]=\"level?.map_id\"\n                            [features]=\"features\"\n                            [options]=\"{\n                                disable_pan: true,\n                                disable_zoom: true,\n                            }\"\n                        ></interactive-map>\n                    </ng-container>\n                </button>\n            </div>\n            <button\n                icon\n                matRipple\n                mat-dialog-close\n                class=\"absolute top-0 left-2 bg-neutral text-white\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <button\n                mat-menu-item\n                mat-dialog-close\n                *ngIf=\"can_edit\"\n                (click)=\"edit.emit()\"\n            >\n                <div class=\"flex items-center space-x-2 text-base\">\n                    <app-icon>edit</app-icon>\n                    <div i18n>Edit booking</div>\n                </div>\n            </button>\n            <button\n                mat-menu-item\n                *ngIf=\"is_checked_in && desk_height_enabled\"\n                (click)=\"setDeskHeight()\"\n            >\n                <div class=\"flex items-center space-x-2 text-base\">\n                    <app-icon className=\"material-symbols-rounded\">\n                        height\n                    </app-icon>\n                    <div i18n>Set Desk Height</div>\n                </div>\n            </button>\n            <button\n                mat-menu-item\n                *ngIf=\"!is_in_progress\"\n                (click)=\"remove.emit()\"\n            >\n                <div class=\"flex items-center space-x-2 text-base\">\n                    <app-icon class=\"text-error\">delete</app-icon>\n                    <div i18n>Delete booking</div>\n                </div>\n            </button>\n            <button\n                mat-menu-item\n                *ngIf=\"booking.instance && booking.booking_type !== 'parking'\"\n                (click)=\"remove.emit(true)\"\n            >\n                <div class=\"flex items-center space-x-2 text-base\">\n                    <app-icon class=\"text-error\">delete</app-icon>\n                    <div i18n>Delete Series</div>\n                </div>\n            </button>\n            <button mat-menu-item *ngIf=\"is_in_progress\" (click)=\"end.emit()\">\n                <div class=\"flex items-center space-x-2 text-base\">\n                    <app-icon class=\"text-error\">delete</app-icon>\n                    <div i18n>End booking</div>\n                </div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [``],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class BookingDetailsModalComponent {\n    @Output() public edit = new EventEmitter();\n    @Output() public remove = new EventEmitter<boolean>();\n    @Output() public end = new EventEmitter();\n    public readonly booking = this._booking;\n    public hide_map = false;\n    public show_request = {};\n    public checked_out = false;\n    public checking_in = false;\n    public readonly features = [\n        {\n            location:\n                this.booking?.extension_data?.map_id || this.booking?.asset_id,\n            content: MapPinComponent,\n        },\n    ];\n    public readonly has_assets = !!this.booking?.valid_assets.length;\n\n    public get level() {\n        return this._org.levelWithID(this.booking?.zones || []);\n    }\n\n    public get building() {\n        const building = this._org.buildings.find((bld) =>\n            (this.booking?.zones || []).includes(bld.id),\n        );\n        if (this._settings.get('app.use_region')) {\n            const region = this._org.regions.find(\n                (region) =>\n                    (this.booking?.zones || []).includes(region.id) ||\n                    region.id === building?.parent_id,\n            );\n            if (region) return region;\n        }\n        return building;\n    }\n\n    public get can_edit() {\n        return (\n            this.booking.booking_type !== 'visitor' &&\n            this.booking.booking_type !== 'parking'\n        );\n    }\n\n    public get auto_checkin() {\n        return this._settings.get(\n            `app.${this.booking?.type || 'bookings'}.auto_checkin`,\n        );\n    }\n\n    public get is_checked_in() {\n        return this.booking.checked_in;\n    }\n\n    public get desk_height_enabled() {\n        return (\n            this.booking?.type === 'desk' &&\n            this._settings.get('app.desks.height_enabled')\n        );\n    }\n\n    public get is_in_progress() {\n        const ts = Date.now();\n        const start = this.booking?.booking_start * 1000;\n        const end = this.booking?.booking_end * 1000;\n        if (this.booking?.all_day) return start <= ts;\n        return start <= ts && ts <= end;\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    public get booking_status() {\n        if (this.booking?.is_done) return 'neutral';\n        if (this.booking?.status === 'approved') return 'success';\n        if (this.booking?.status === 'declined') return 'error';\n        if (this.booking?.status === 'tentative') return 'warning';\n        return 'warning';\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _booking: Booking,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n    ) {\n        console.log('Valid assets:', this.booking?.valid_assets);\n    }\n\n    public get period() {\n        if (this.booking?.is_all_day) return 'All Day';\n        const start = this.booking?.date || Date.now();\n        const duration = this.booking?.duration || 60;\n        const end = addMinutes(start, duration);\n        const dur = formatDuration({\n            hours: Math.floor(duration / 60),\n            minutes: duration % 60,\n        })\n            .replace(' hour', 'hr')\n            .replace(' minute', 'min');\n        return `${format(start, this.time_format)} - ${format(\n            end,\n            this.time_format,\n        )} (${dur})`;\n    }\n\n    public async toggleCheckedIn() {\n        this.checking_in = true;\n        const bkn = this.booking;\n        const promise = (\n            bkn.instance\n                ? checkinBookingInstance(\n                      bkn.id,\n                      bkn.instance,\n                      !this.booking.checked_in,\n                  )\n                : checkinBooking(this.booking.id, !this.booking.checked_in)\n        )\n            .toPromise()\n            .catch((_) => {\n                notifyError('Error checking in booking');\n                this.checking_in = false;\n                throw _;\n            });\n        await promise;\n        (this.booking as any).checked_in = !this.booking.checked_in;\n        this.checked_out = !this.booking.checked_in;\n        notifySuccess(\n            `Successfully ${\n                this.booking.checked_in ? 'checked in' : 'ended booking'\n            }`,\n        );\n        this.checking_in = false;\n    }\n\n    public status(id: string): string {\n        const booking = this.booking.linked_bookings.find(\n            (_) => _.asset_id === id,\n        );\n        if (booking.status) return booking.status;\n        return booking\n            ? booking.approved\n                ? 'approved'\n                : booking.rejected\n                  ? 'rejected'\n                  : 'pending'\n            : 'pending';\n    }\n\n    public viewLocation() {\n        this.hide_map = true;\n        const ref = this._dialog.open(MapLocateModalComponent, {\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: {\n                item: {\n                    id: this._booking.asset_id,\n                    name: this._booking.asset_name,\n                    map_id:\n                        this._booking.extension_data.map_id ||\n                        this.booking.asset_id,\n                    level: this.level,\n                },\n            },\n        });\n        ref.afterClosed().subscribe(() => (this.hide_map = false));\n    }\n\n    public setDeskHeight() {\n        this._dialog.open(DeskSettingsModalComponent, {\n            data: { id: this.booking.asset_ids[0] || this.booking.asset_id },\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    BookingRuleset,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    notifyWarn,\n    openConfirmModal,\n    rulesForResource,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport {\n    cleanObject,\n    listChildMetadata,\n    PlaceZone,\n    showMetadata,\n} from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, startOfDay } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    forkJoin,\n    merge,\n    Observable,\n    of,\n    timer,\n} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { bookedResourceList, queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from './booking.utilities';\nimport { PaymentsService } from 'libs/payments/src/lib/payments.service';\nimport { BookingLinkModalComponent } from './booking-link-modal.component';\nimport { validateAssetRequestsForResource } from 'libs/assets/src/lib/assets.fn';\nimport { AssetStateService } from 'libs/assets/src/lib/asset-state.service';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_TYPES = ['desk', 'parking', 'locker', 'catering'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: BookingType;\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n    /** Whether to group bookings */\n    disable_date?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    groups?: string[];\n    assigned_to?: string;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends AsyncHandler {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _resource_use: Record<string, string> = {};\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}',\n        ),\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n    public readonly form = generateBookingForm();\n\n    public readonly resources: Observable<BookingAsset[]> = combineLatest([\n        this._org.active_building,\n        this.options.pipe(distinctUntilKeyChanged('type')),\n    ]).pipe(\n        debounceTime(300),\n        switchMap(([bld, { type }]) => {\n            if (!bld) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return this.loadResourceList('desks' as any);\n                case 'parking':\n                    this._loading.next(`Loading parking spaces...`);\n                    return this.loadResourceList('parking-spaces' as any);\n                case 'locker':\n                    this._loading.next(`Loading lockers...`);\n                    return this.loadResourceList('lockers' as any);\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1),\n    );\n\n    public readonly features: Observable<string[]> = this.resources.pipe(\n        map((resource) => {\n            const list: string[] = [];\n            for (const { features } of resource) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1),\n    );\n\n    public readonly booking_rules: Observable<\n        Record<string, BookingRuleset[]>\n    > = combineLatest([this._org.building_list, this._options]).pipe(\n        switchMap(([list, { type }]) =>\n            Promise.all(\n                list.map((bld) =>\n                    showMetadata(bld.id, `${type}_booking_rules`).toPromise(),\n                ),\n            ),\n        ),\n        map((building_rules) => {\n            const mapping = {};\n            for (const rules of building_rules) {\n                mapping[rules.id] =\n                    rules.details instanceof Array ? rules.details : [];\n            }\n            return mapping;\n        }),\n        shareReplay(1),\n    );\n\n    public readonly available_resources = combineLatest([\n        this.options,\n        this.resources,\n        this.booking_rules,\n        merge(this.form.get('date').valueChanges, timer(1000)),\n        merge(this.form.get('duration').valueChanges, timer(1000)),\n    ]).pipe(\n        filter(\n            () =>\n                this.form.getRawValue().date > 0 &&\n                this.form.getRawValue().duration > 0,\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`),\n        ),\n        switchMap(([options, resources, restrictions]) => {\n            var { all_day, date, duration, user } = this.form.getRawValue();\n            if (all_day) {\n                date = startOfDay(date).valueOf();\n                duration = 24 * 60 - 1;\n            }\n            return bookedResourceList({\n                period_start: getUnixTime(date),\n                period_end: getUnixTime(addMinutes(date, duration)),\n                type: options.type,\n                zones:\n                    options.zone_id ||\n                    (this._settings.get('app.use_region')\n                        ? this._org.region?.id\n                        : this._org.building?.id) ||\n                    this._org.organisation.id,\n            }).pipe(\n                map(\n                    (booked_ids) => {\n                        const start = this.form.getRawValue().date;\n                        const end = addMinutes(\n                            start,\n                            this.form.getRawValue().duration,\n                        ).valueOf();\n                        this._resource_use = {};\n                        for (const id of booked_ids) {\n                            this._resource_use[id] = ' ';\n                        }\n                        const available = resources.filter((asset) => {\n                            const is_restricted = rulesForResource(\n                                {\n                                    date,\n                                    duration,\n                                    resource: asset,\n                                    host: user || currentUser(),\n                                },\n                                restrictions[asset.zone?.id] ||\n                                    restrictions[asset.zone?.parent_id] ||\n                                    restrictions[this._org.building.id] ||\n                                    [],\n                            ).hidden;\n                            return (\n                                !is_restricted &&\n                                (!asset.groups?.length ||\n                                    asset.groups.some((grp) =>\n                                        currentUser().groups.includes(grp),\n                                    )) &&\n                                asset.bookable !== false &&\n                                (!options.features ||\n                                    options.features?.every((_) =>\n                                        asset.features.includes(_),\n                                    )) &&\n                                (!options.zone_id ||\n                                    options.zone_id === asset.zone?.id ||\n                                    options.zone_id ===\n                                        asset.zone?.parent_id) &&\n                                !booked_ids.includes(asset.id)\n                            );\n                        });\n                        console.log('Resources:', resources, available);\n                        return available;\n                    },\n                    catchError((_) => of([])),\n                ),\n            );\n        }),\n        tap((_) => this._loading.next('')),\n        shareReplay(1),\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_resources,\n    ]).pipe(\n        map(([options, resource]) => {\n            const groups = [];\n            const asset_list = [...resource].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id),\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        }),\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public resourceUserName(id: string) {\n        return this._resource_use[id];\n    }\n\n    public newForm(\n        booking: Booking = new Booking({\n            all_day: this._settings.get('app.bookings.all_day_default'),\n        }),\n    ) {\n        this.form.reset();\n        this.form.patchValue(\n            cleanObject(\n                {\n                    ...booking,\n                    ...booking.extension_data,\n                },\n                [null, undefined, ''],\n            ),\n        );\n        this.subscription(\n            'form_change',\n            this.form.valueChanges.subscribe(() => {\n                const { date, duration } = this.form.getRawValue();\n                this._assets.setOptions({ date, duration });\n                this.storeForm();\n            }),\n        );\n        this.timeout('date', () => {\n            this.form.patchValue({\n                date: booking.date,\n                duration: booking.duration,\n            });\n        });\n        this._booking.next(new Booking(booking));\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _payments: PaymentsService,\n        private _assets: AssetStateService,\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !booking.url.includes('book') &&\n                    !BOOKING_TYPES.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            }),\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1,\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        if (!sessionStorage.getItem('PLACEOS.booking_form')) {\n            return this.newForm();\n        }\n        const booking = this._booking.getValue();\n        this.form.reset({ user: currentUser(), booked_by: currentUser() });\n        this.form.patchValue(\n            cleanObject(\n                {\n                    ...(booking || {}),\n                    ...(booking?.extension_data || {}),\n                },\n                [null, undefined, ''],\n            ),\n        );\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify({\n                ...this._booking.getValue(),\n                ...cleanObject(this.form.getRawValue() || {}, [\n                    null,\n                    undefined,\n                    '',\n                ]),\n            }),\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {}),\n        );\n    }\n\n    public loadForm() {\n        this.form.reset({ user: currentUser(), booked_by: currentUser() });\n        const data = JSON.parse(\n            sessionStorage.getItem('PLACEOS.booking_form') || '{}',\n        );\n        const booking = new Booking(data);\n        this._booking.next(booking);\n        const booking_data = cleanObject(\n            {\n                ...data,\n                ...(booking || {}),\n                ...(booking?.extension_data || {}),\n            },\n            [null, undefined, ''],\n        );\n        this.form.patchValue(booking_data);\n        this.setOptions({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}',\n            ),\n        });\n    }\n\n    public clearOldState() {\n        sessionStorage.removeItem('PLACEOS.last_booked_booking');\n        this.last_success = new Booking();\n    }\n\n    public openBookingLinkModal(force: boolean = false) {\n        this.form.markAllAsTouched();\n        if (!this.form.valid && !force) return;\n        const event = new Booking({\n            ...this.booking,\n            ...this.form.getRawValue(),\n        });\n        this._dialog.open(BookingLinkModalComponent, { data: event });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const value = this.form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog,\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(JSON.stringify(_));\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(JSON.stringify(_));\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        if (!this.form) throw 'No form for booking';\n        if (!this.form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(\n                this.form,\n            ).join(', ')}]`;\n        this.form.patchValue({\n            booking_type:\n                this.form.getRawValue().booking_type ||\n                this._options.getValue().type,\n        });\n        let value = this.form.getRawValue();\n        let booking = this._booking.getValue() || new Booking();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                {\n                    ...booking,\n                    ...value,\n                    user_email:\n                        value.user?.email ||\n                        value.user_email ||\n                        currentUser()?.email,\n                },\n                this._options.getValue().type,\n            );\n        }\n        if (this._payments.payment_module) {\n            const receipt = await this._payments.makePayment({\n                type: this._options.getValue().type,\n                resource_name: value.asset_name,\n                date: value.date,\n                duration: value.duration,\n                all_day: value.all_day,\n            });\n            if (!receipt?.success) return;\n            (value as any).extension_data = {\n                invoice: receipt,\n                invoice_id: receipt.invoice_id,\n            };\n        }\n        if (!value.zones?.length && this._booking.getValue().zones?.length) {\n            value.zones = this._booking.getValue().zones;\n        }\n        this._loading.next('Saving booking');\n        delete value.booking_asset;\n        if (value.all_day) {\n            value.date = startOfDay(value.date).valueOf();\n            value.duration = 24 * 60 - 1;\n        }\n        const { event_id, parent_id } = value;\n        delete value.event_id;\n        delete value.parent_id;\n        const resources = value.resources || [];\n        const zone =\n            this._org.levelWithID(resources[0]?.zone_id) || resources[0]?.zone;\n        const zones =\n            zone && zone instanceof Object\n                ? unique([\n                      this._org.organisation.id,\n                      this._org.region?.id,\n                      zone.parent_id,\n                      zone.id,\n                  ])\n                : [this._org.organisation.id, this._org.region?.id];\n        const q: any = event_id\n            ? { ical_uid: value.ical_uid, event_id: event_id }\n            : parent_id\n              ? { booking_id: parent_id }\n              : {};\n        if (booking.instance && !value.update_master) {\n            q.instance = true;\n            q.start_time = booking.booking_start;\n        }\n        const result = await saveBooking(\n            new Booking({\n                ...this._options.getValue(),\n                ...value,\n                description: value.asset_name || value.description,\n                user_name: value.user?.name || value.user_name,\n                user_email: value.user?.email || value.user_email,\n                extension_data: {\n                    ...((value as any).extension_data || {}),\n                    assets: value.assets.map((_) => _.toJSON()),\n                    group: value.group,\n                    phone: value.phone,\n                    department:\n                        value.user?.department || currentUser()?.department,\n                },\n                approved: !this._settings.get('app.bookings.no_approval'),\n                zones: unique([...zones, ...(value.zones || [])]).filter(\n                    (_) => _,\n                ),\n            }),\n            q,\n        )\n            .toPromise()\n            .catch((e) => {\n                this._loading.next('');\n                throw e?.error || e;\n            });\n        if (value.assets?.length || booking.extension_data.assets?.length) {\n            const requests = await validateAssetRequestsForResource(\n                { ...result, from_booking: true },\n                {\n                    date: value.date,\n                    duration: value.duration,\n                    all_day: value.all_day,\n                    host: value.booked_by_email,\n                    zones: unique([...zones, ...(value.zones || [])]).filter(\n                        (_) => _,\n                    ),\n                },\n                value.assets,\n            ).catch((e) => {\n                console.error(\"Couldn't update asset requests\", e);\n                if (e?.status === 409) {\n                    notifyError(\n                        'Some assets are already booked for the selected time',\n                    );\n                }\n                this._loading.next('');\n                throw e?.error || e;\n            });\n            if (!requests) throw 'Unable to validate asset requests';\n            await requests();\n        }\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        this.form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result),\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email,\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this.form.getRawValue();\n        const asset_list = await this.available_resources\n            .pipe(take(1))\n            .toPromise();\n        const active_resource = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id,\n        );\n        const level = this._org.levelWithID([active_resource.zone?.id]);\n        const resources = [\n            active_resource,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length,\n            )),\n        ];\n        const group_members = unique(\n            [currentUser(), ...extra_members],\n            'email',\n        );\n        const available = await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: resources[idx].map_id || resources[idx].id,\n                        user_email: _.email,\n                    },\n                    type,\n                ),\n            ),\n        );\n        const unavailable = group_members.filter((_, idx) => !available[idx]);\n        const group_name = `${currentUser().email}[${format(\n            Date.now(),\n            'yyyy-MM-dd',\n        )}]`;\n        let id = '';\n        for (let i = 0; i < group_members.length; i++) {\n            if (!available[i]) continue;\n            const user = group_members[i];\n            const asset = resources[i];\n            this.form.patchValue({\n                ...form,\n                parent_id: id,\n                user: user as any,\n                user_email: user.email,\n                user_id: user.id,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                description: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                group: group_name,\n                zones: (asset.zone\n                    ? unique([\n                          this._org.organisation.id,\n                          this._org.region?.id,\n                          asset?.zone?.parent_id,\n                          asset?.zone?.id,\n                      ])\n                    : [this._org.organisation.id, this._org.region?.id]\n                ).filter((_) => _),\n            });\n            const bkn = await this.postForm(true);\n            if (bkn.id && !id) id = bkn.id;\n        }\n        if (unavailable.length) {\n            notifyWarn(\n                `Some members of your group already have a desk booking. [${unavailable\n                    .map((_) => _.name || _.email)\n                    ?.join(', ')}]`,\n            );\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { id, asset_id, date, duration, user_email }: Partial<Booking>,\n        type: BookingType,\n    ) {\n        if (!user_email) throw 'No user was selected to book for';\n        if (type === 'group-event') return true;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n            email: user_email,\n            limit: 1000,\n        }).toPromise();\n        let active_bookings = bookings.filter(\n            (_) =>\n                _.status !== 'declined' &&\n                _.status !== 'cancelled' &&\n                !_.rejected,\n        );\n        if (\n            active_bookings.find((_) => _.asset_id === asset_id && id !== _.id)\n        ) {\n            if (asset_id.includes('@')) {\n                throw `${asset_id} already has an invite for the selected time`;\n            } else {\n                throw `${asset_id} is not available at the selected time`;\n            }\n        }\n        const allowed_bookings =\n            this._settings.get(`app.bookings.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            active_bookings.filter(\n                (_) =>\n                    _.user_email.toLowerCase() ===\n                        (user_email || currentUser()?.email).toLowerCase() &&\n                    _.id !== id,\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a booking at the selected time`;\n        }\n        return true;\n    }\n\n    public loadResourceList(type: BookingType) {\n        const use_region = this._settings.get('app.use_region');\n        const map_metadata = (_) =>\n            (_?.metadata[type]?.details instanceof Array\n                ? _.metadata[type]?.details\n                : []\n            ).map((d) =>\n                (type as any) !== 'lockers'\n                    ? {\n                          ...d,\n                          id: d.id || d.map_id,\n                          zone: _.zone,\n                      }\n                    : d.lockers?.map((locker) => ({\n                          ...locker,\n                          bank_id: d.id,\n                          zone: _.zone,\n                      })) || [],\n            );\n        const id = use_region\n            ? this._org.building.parent_id\n            : this._org.building.id;\n        if (use_region) {\n            const id = this._org.building.parent_id;\n            const buildings = this._org.buildings.filter(\n                (_) => _.parent_id === id,\n            );\n            return forkJoin(\n                buildings.map((_) =>\n                    listChildMetadata(_.id, { name: type }).pipe(\n                        map((data) => flatten(data.map(map_metadata))),\n                    ),\n                ),\n            ).pipe(map((_) => flatten(_)));\n        }\n        return listChildMetadata(id, {\n            name: type,\n        }).pipe(map((data) => flatten(data.map(map_metadata))));\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        resources: BookingAsset[],\n        count: number,\n    ): Promise<BookingAsset[]> {\n        const nearby_resources = [];\n        let asset_list = resources.filter(\n            (_) => _.id !== id && _.map_id !== id,\n        );\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id),\n            );\n            if (item) {\n                nearby_resources.push(\n                    resources.find((_) => _.id === item || _.map_id === item),\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item,\n                );\n            }\n        }\n        return nearby_resources;\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport {\n    generateCalendarFileLink,\n    generateGoogleCalendarLink,\n    generateMicrosoftCalendarLink,\n} from 'libs/common/src/lib/calendar-links';\nimport { Booking } from './booking.class';\n\n@Component({\n    selector: 'booking-link-modal',\n    template: `\n        <div class=\"p-4 w-full pb-2\">Add event to your calendar</div>\n        <div class=\"flex flex-col items-center space-y-4 p-4 relative\">\n            <a\n                btn\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"outlook_link | sanitize: 'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/outlook.svg\" class=\"w-6\" />\n                <span i18n>Create in Outlook</span>\n            </a>\n            <a\n                btn\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"google_link | sanitize: 'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/gcal.svg\" class=\"w-6\" />\n                <span i18n>Create in Google Calendar</span>\n            </a>\n            <a\n                btn\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"ical_link | safe: 'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <app-icon class=\"text-xl\">download</app-icon>\n                <span i18n>Download iCal File</span>\n            </a>\n        </div>\n        <button icon mat-dialog-close class=\"absolute top-2 right-0\">\n            <app-icon>close</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n        `,\n    ],\n})\nexport class BookingLinkModalComponent {\n    public readonly outlook_link = generateMicrosoftCalendarLink(\n        this._event as any\n    );\n    public readonly google_link = generateGoogleCalendarLink(\n        this._event as any\n    );\n    public readonly ical_link = generateCalendarFileLink(this._event as any);\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _event: Booking,\n        private _settings: SettingsService\n    ) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\n\nimport { ComponentsModule } from 'libs/components/src/lib/components.module';\nimport { FormFieldsModule } from 'libs/form-fields/src/lib/form-fields.module';\nimport { SharedEventsModule } from 'libs/events/src/lib/events.module';\nimport { SharedSpacesModule } from 'libs/spaces/src/lib/spaces.module';\nimport { SharedUsersModule } from 'libs/users/src/lib/users.module';\n\nimport { BookingCardComponent } from './booking-card.component';\nimport { BookingDetailsModalComponent } from './booking-details-modal.component';\n\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { DeskDetailsComponent } from './desk-select-modal/desk-details.component';\nimport { DeskFiltersDisplayComponent } from './desk-select-modal/desk-filters-display.component';\nimport { DeskFiltersComponent } from './desk-select-modal/desk-filters.component';\nimport { DeskListComponent } from './desk-select-modal/desk-list.component';\nimport { DeskMapComponent } from './desk-select-modal/desk-map.component';\nimport { DeskSelectModalComponent } from './desk-select-modal/desk-select-modal.component';\nimport { InviteVisitorFormComponent } from './invite-visitor-form.component';\nimport { ParkingSpaceDetailsComponent } from './parking-select-modal/parking-details.component';\nimport { ParkingSpaceFiltersDisplayComponent } from './parking-select-modal/parking-filters-display.component';\nimport { ParkingSpaceFiltersComponent } from './parking-select-modal/parking-filters.component';\nimport { ParkingSpaceListComponent } from './parking-select-modal/parking-list.component';\nimport { ParkingSpaceLocationPinComponent } from './parking-select-modal/parking-location-pin.component';\nimport { ParkingSpaceSelectMapComponent } from './parking-select-modal/parking-map.component';\nimport { ParkingSpaceSelectModalComponent } from './parking-select-modal/parking-select-modal.component';\nimport { ParkingSpaceListFieldComponent } from './parking-space-list-field.component';\nimport { DeskListFieldComponent } from './desk-list-field.component';\nimport { BookingLinkModalComponent } from './booking-link-modal.component';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatRippleModule } from '@angular/material/core';\nimport { LockerGridComponent } from './locker-grid.component';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { LockerSelectModalComponent } from './locker-select-modal/locker-select-modal.component';\nimport { LockerListFieldComponent } from './locker-list-field.component';\nimport { LockerFiltersComponent } from './locker-select-modal/locker-filters.component';\nimport { LockerFiltersDisplayComponent } from './locker-select-modal/locker-filters-display.component';\nimport { LockerBankListComponent } from './locker-select-modal/locker-bank-list.component';\nimport { LockerMapComponent } from './locker-select-modal/locker-map.component';\nimport { DeskSettingsModalComponent } from './desk-settings-modal.component';\n\nconst COMPONENTS = [\n    DeskQuestionsModalComponent,\n    DeskConfirmModalComponent,\n    InviteVisitorFormComponent,\n    BookingDetailsModalComponent,\n    BookingCardComponent,\n    BookingLinkModalComponent,\n\n    ParkingSpaceSelectModalComponent,\n    ParkingSpaceFiltersComponent,\n    ParkingSpaceFiltersDisplayComponent,\n    ParkingSpaceListComponent,\n    ParkingSpaceLocationPinComponent,\n    ParkingSpaceSelectMapComponent,\n    ParkingSpaceDetailsComponent,\n    ParkingSpaceListFieldComponent,\n\n    DeskSelectModalComponent,\n    DeskDetailsComponent,\n    DeskFiltersComponent,\n    DeskFiltersDisplayComponent,\n    DeskListComponent,\n    DeskMapComponent,\n    DeskListFieldComponent,\n    DeskSettingsModalComponent,\n\n    LockerGridComponent,\n    LockerListFieldComponent,\n    LockerSelectModalComponent,\n    LockerFiltersComponent,\n    LockerFiltersDisplayComponent,\n    LockerBankListComponent,\n    LockerMapComponent,\n];\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatRadioModule,\n        MatInputModule,\n        MatFormFieldModule,\n        MatDatepickerModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatAutocompleteModule,\n        FormFieldsModule,\n        ComponentsModule,\n        MatRippleModule,\n        MatTooltipModule,\n        SharedSpacesModule,\n        SharedEventsModule,\n        SharedUsersModule,\n    ],\n    providers: [ReactiveFormsModule],\n    exports: [...COMPONENTS],\n})\nexport class SharedBookingsModule {}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, SettingsService } from '@placeos/common';\n\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { BuildingLevel } from 'libs/organisation/src/lib/level.class';\nimport { User } from 'libs/users/src/lib/user.class';\n\nexport interface DeskConfirmModalData {\n    host: User;\n    desks: Desk[];\n    date: number;\n    reason: string;\n    level: BuildingLevel;\n    can_set_date: boolean;\n}\n\n@Component({\n    selector: 'desk-flow-confirm-modal-component',\n    template: `\n        <header>\n            <h2 i18n>Confirm Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <i class=\"material-icons\">close</i>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"p-4\">\n                <div host class=\"flex flex-col\" *ngIf=\"can_set_host\">\n                    <label i18n>Host</label>\n                    <a-user-search-field\n                        [(ngModel)]=\"host\"\n                        class=\"mb-4\"\n                    ></a-user-search-field>\n                </div>\n                <div date class=\"mb-4\">\n                    <label i18n>Date</label>\n                    <div *ngIf=\"!can_set_date\">\n                        {{ date | date: 'mediumDate' }}\n                    </div>\n                    <a-date-field\n                        *ngIf=\"can_set_date\"\n                        [(ngModel)]=\"date\"\n                    ></a-date-field>\n                </div>\n                <div reason class=\"flex flex-col mb-4\" *ngIf=\"!hide_reason\">\n                    <label i18n>Reason</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"reason\"\n                            placeholder=\"Reason\"\n                        />\n                    </mat-form-field>\n                </div>\n                <p i18n>\n                    Your desk{{ desks.length === 1 ? '' : 's' }} will be\n                    {{ desk_list }} on\n                    {{ level?.display_name || level?.name }}\n                </p>\n            </main>\n            <footer class=\"flex items-center justify-center p-2\">\n                <button btn matRipple (click)=\"confirm()\" i18n>Confirm</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main load class=\"flex flex-col p-12 items-center justify-center\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n        `,\n    ],\n})\nexport class DeskConfirmModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly desks = this._data.desks || [];\n\n    public date = this._data.date;\n    public host = this._data.host;\n\n    public readonly can_set_date = this._data.can_set_date;\n\n    public reason = this._data.reason;\n\n    public readonly level = this._data.level;\n\n    public loading: string;\n\n    public get desk_list() {\n        return this.desks.map((_) => _.name).join(', ');\n    }\n\n    public get hide_reason() {\n        return !!this._settings.get('app.desks.hide_reason');\n    }\n\n    public get can_set_host() {\n        return !!this._settings.get('app.desks.can_book_for_others');\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskConfirmModalData,\n        private _settings: SettingsService\n    ) {}\n\n    public confirm() {\n        this.loading = 'Requesting desk booking...';\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { BookingAsset } from './booking-form.service';\nimport {\n    DeskSelectModalComponent,\n    FAV_DESK_KEY,\n} from './desk-select-modal/desk-select-modal.component';\n\nconst EMPTY_FAVS: string[] = [];\n\n@Component({\n    selector: `desk-list-field`,\n    template: `\n        <div list class=\"space-y-2\">\n            <div\n                desk\n                class=\"relative p-2 rounded-lg w-full flex items-center shadow border border-base-200\"\n                *ngFor=\"let item of items\"\n            >\n                <div *ngIf=\"features?.length\" class=\"flex flex-col\">\n                    <label for=\"title\">Type</label>\n                    <div features class=\"flex items-center flex-wrap space-x-2\">\n                        <mat-checkbox\n                            *ngFor=\"let opt of features\"\n                            [ngModel]=\"(selected_features || []).includes(opt)\"\n                            (ngModelChange)=\"setFeature(opt, $event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            {{ opt }}\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div\n                    class=\"w-20 h-20 rounded-xl bg-base-200 mr-4 overflow-hidden flex items-center justify-center\"\n                >\n                    <img\n                        auth\n                        *ngIf=\"item.images?.length; else placeholder\"\n                        [source]=\"item.images[0]\"\n                        class=\"min-h-full object-cover\"\n                    />\n                    <ng-template #placeholder>\n                        <img\n                            class=\"m-auto\"\n                            src=\"assets/icons/desk-placeholder.svg\"\n                        />\n                    </ng-template>\n                </div>\n                <div class=\"space-y-2 pb-4\">\n                    <div class=\"font-medium\">\n                        {{ item.name || item.id || item.map_id || 'Desk' }}\n                    </div>\n                    <div class=\"flex items-center text-sm space-x-2\">\n                        <app-icon class=\"text-blue-500\">place</app-icon>\n                        <p>{{ item.zone?.display_name || item.zone?.name }}</p>\n                    </div>\n                    <div\n                        class=\"absolute bottom-0 right-0 flex items-center justify-end text-xs\"\n                    >\n                        <button\n                            btn\n                            matRipple\n                            name=\"edit-desk\"\n                            class=\"clear\"\n                            (click)=\"changeResources(item)\"\n                        >\n                            <div class=\"flex items-center space-x-2\" i18n>\n                                <app-icon>edit</app-icon>\n                                Change\n                            </div>\n                        </button>\n                        <button\n                            btn\n                            matRipple\n                            name=\"remove-desk\"\n                            class=\"clear\"\n                            (click)=\"removeResource(item)\"\n                        >\n                            <div class=\"flex items-center space-x-2\" i18n>\n                                <app-icon>close</app-icon>\n                                Remove\n                            </div>\n                        </button>\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    name=\"toggle-desk-favourite\"\n                    class=\"absolute top-1 right-1\"\n                    [class.text-blue-400]=\"favorites.includes(item?.id)\"\n                    (click)=\"toggleFavourite(item)\"\n                >\n                    <app-icon>{{\n                        favorites.includes(item?.id)\n                            ? 'favorite'\n                            : 'favorite_border'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <button\n            btn\n            matRipple\n            name=\"add-desk\"\n            class=\"w-full inverse mt-2\"\n            (click)=\"changeResources()\"\n        >\n            <div class=\"flex items-center justify-center space-x-2\">\n                <app-icon>search</app-icon>\n                <span i18n>Add Desk</span>\n            </div>\n        </button>\n        <div class=\"flex items-center flex-wrap sm:space-x-2 mb-2\">\n            <div class=\"flex-1 min-w-[256px] space-y-2\"></div>\n        </div>\n    `,\n    styles: [``],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DeskListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class DeskListFieldComponent implements ControlValueAccessor {\n    @Input() public features: string[] = [];\n    public room_size = 3;\n    public items: BookingAsset[] = [];\n    public disabled = false;\n    public selected_features: string[] = [];\n\n    private _onChange: (_: BookingAsset[]) => void;\n    private _onTouch: (_: BookingAsset[]) => void;\n\n    public get favorites() {\n        return this._settings.get<string[]>(FAV_DESK_KEY) || EMPTY_FAVS;\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {}\n\n    /** Add or edit selected items */\n    public changeResources() {\n        const ref = this._dialog.open(DeskSelectModalComponent, {\n            data: {\n                items: this.items,\n                options: { capacity: this.room_size },\n            },\n        });\n        ref.afterClosed().subscribe((items?: BookingAsset[]) => {\n            if (!items) items = ref.componentInstance.selected;\n            this.setValue(items);\n        });\n    }\n\n    /** Remove the selected space from the list */\n    public removeResource(space: BookingAsset) {\n        this.setValue(this.items.filter((_) => _.id !== space.id));\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: BookingAsset[]) {\n        this.items = new_value;\n        if (this._onChange) this._onChange(this.items);\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: BookingAsset[]) {\n        this.items = value || [];\n    }\n\n    /* istanbul ignore next */\n    public readonly registerOnChange = (fn: (_: BookingAsset[]) => void) =>\n        (this._onChange = fn);\n    /* istanbul ignore next */\n    public readonly registerOnTouched = (fn: (_: BookingAsset[]) => void) =>\n        (this._onTouch = fn);\n    public readonly setDisabledState = (s: boolean) => (this.disabled = s);\n\n    public toggleFavourite(space: BookingAsset) {\n        if (!space?.id) return;\n        const fav_list = this.favorites;\n        const new_state = !fav_list.includes(space.id);\n        if (new_state) {\n            this._settings.saveUserSetting(FAV_DESK_KEY, [\n                ...fav_list,\n                space.id,\n            ]);\n        } else {\n            this._settings.saveUserSetting(\n                FAV_DESK_KEY,\n                fav_list.filter((_) => _ !== space.id)\n            );\n        }\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\" i18n>COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label i18n>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label i18n>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label i18n>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button btn matRipple (click)=\"submit()\" i18n>Submit</button>\n            </footer>\n            <button close icon matRipple mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\" i18n>\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close icon matRipple mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { ViewerFeature } from '@placeos/svg-viewer';\n\nimport { MapPinComponent } from 'libs/components/src/lib/map-pin.component';\nimport { BookingAsset } from '../booking-form.service';\n\n@Component({\n    selector: 'desk-details',\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 30%;\n                min-width: 20rem;\n                height: 100%;\n                min-height: 65vh;\n                background: white;\n            }\n        `,\n    ],\n    template: `\n        <ng-container *ngIf=\"desk; else emptyState\">\n            <section\n                image\n                class=\"relative w-full bg-base-300\"\n                [class.sm:h-64]=\"desk.images?.length\"\n                [class.h-40]=\"desk.images?.length\"\n                [class.sm:h-0]=\"!desk.images?.length\"\n                [class.h-12]=\"!desk.images?.length\"\n                [class.!bg-transparent]=\"!desk.images?.length\"\n            >\n                <image-carousel\n                    [images]=\"desk.images\"\n                    *ngIf=\"desk.images?.length\"\n                    class=\"absolute inset-0\"\n                ></image-carousel>\n                <button\n                    icon\n                    matRipple\n                    name=\"close-desk-details\"\n                    (click)=\"close.emit()\"\n                    class=\"absolute top-2 left-2 bg-base-200 sm:hidden text-base-content\"\n                >\n                    <app-icon>arrow_back</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    name=\"toggle-desk-favourite-details\"\n                    [class.text-info-content]=\"fav\"\n                    [class.!bg-info]=\"fav\"\n                    (click)=\"toggleFav.emit()\"\n                    class=\"absolute top-2 right-2 bg-base-200\"\n                >\n                    <app-icon>{{\n                        fav ? 'favorite' : 'favorite_border'\n                    }}</app-icon>\n                </button>\n            </section>\n            <div\n                class=\"p-2 space-y-2 flex-1 h-[calc(100%-19.75rem)] overflow-auto\"\n            >\n                <section actions class=\"z-0 pb-2 border-b\">\n                    <h2 class=\"text-xl font-medium mb-2 mt-4\">\n                        {{ desk.display_name || desk.name || desk.id }}\n                    </h2>\n                </section>\n                <section details class=\"space-y-2 pb-2 border-b\">\n                    <h2 class=\"text-xl font-medium\">Details</h2>\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon>person</app-icon>\n                        <p i18n>Single desk</p>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon>desk</app-icon>\n                        <p>\n                            {{ desk.display_name || desk.name || desk.id }}\n                        </p>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon>place</app-icon>\n                        <p>{{ desk.zone?.display_name || desk.zone?.name }}</p>\n                    </div>\n                </section>\n                <section\n                    facilities\n                    *ngIf=\"desk.features?.length\"\n                    class=\"space-y-2 pb-2 border-b\"\n                >\n                    <h2 class=\"text-xl font-medium\" i18n>Facilities</h2>\n                    <div\n                        *ngFor=\"let feat of desk.features || []\"\n                        class=\"flex items-center flex-wrap space-x-2\"\n                    >\n                        <div for=\"feat\" class=\"flex-1 w-1/2\">{{ feat }}</div>\n                    </div>\n                </section>\n                <section\n                    map\n                    class=\"w-full mx-auto h-64 sm:h-48 relative border border-base-200 overflow-hidden rounded\"\n                    *ngIf=\"!hide_map\"\n                >\n                    <interactive-map\n                        class=\"pointer-events-none\"\n                        [src]=\"map_url\"\n                        [focus]=\"desk.map_id || desk.id\"\n                        [features]=\"features\"\n                        [options]=\"{ disable_pan: true, disable_zoom: true }\"\n                    ></interactive-map>\n                </section>\n            </div>\n            <div\n                class=\"px-2 pt-2 pb-[5.5rem] border-t border-base-200 shadow sm:hidden\"\n            >\n                <button\n                    btn\n                    matRipple\n                    name=\"toggle-desk-details\"\n                    [class.inverse]=\"active\"\n                    class=\"w-full\"\n                    (click)=\"active = !active; activeChange.emit(active)\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-2xl\">{{\n                            active ? 'remove' : 'add'\n                        }}</app-icon>\n                        <p i18n>\n                            { active, select, true { Remove from booking } false\n                            { Add to booking } }\n                        </p>\n                    </div>\n                </button>\n            </div>\n        </ng-container>\n        <ng-template #emptyState>\n            <div\n                empty\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-30 text-center\" i18n>\n                    Select a desk to view it's details\n                </p>\n            </div>\n        </ng-template>\n    `,\n})\nexport class DeskDetailsComponent {\n    @Input() public desk?: BookingAsset;\n    @Input() public fav: boolean = false;\n    @Input() public active: boolean = false;\n    @Input() public hide_map: boolean = false;\n\n    @Output() public close = new EventEmitter<void>();\n    @Output() public toggleFav = new EventEmitter<void>();\n    @Output() public activeChange = new EventEmitter<void>();\n\n    public map_url = '';\n    public features: ViewerFeature[] = [];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.desk && this.desk) {\n            this.updateFeature();\n        }\n    }\n\n    private updateFeature() {\n        this.map_url = this.desk.zone.map_id;\n        this.features = [\n            {\n                location: this.desk.map_id || this.desk.id,\n                content: MapPinComponent,\n            },\n        ];\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\n\nimport { DeskFiltersComponent } from './desk-filters.component';\nimport { BookingFormService } from '../booking-form.service';\nimport { endOfDay } from 'date-fns';\n\n@Component({\n    selector: 'desk-filters-display',\n    styles: [\n        `\n            [filter-item] {\n                display: flex;\n                align-items: center;\n                padding: 0 1rem;\n                height: 2rem;\n                font-size: 0.875rem;\n                border: 1px solid rgba(0, 0, 0, 0.2);\n                border-radius: 1.25rem;\n                margin-right: 0.5rem;\n                margin-bottom: 0.5rem;\n            }\n\n            [filter-item]:hover {\n                background: rgba(0, 0, 0, 0.1);\n            }\n\n            [filter-item] > * + * {\n                margin-left: 0.5rem;\n            }\n        `,\n    ],\n    template: `\n        <section\n            actions\n            class=\"sm:hidden space-x-2 flex flex-row items-center p-2\"\n        >\n            <button\n                btn\n                matRipple\n                name=\"edit-desk-filters\"\n                class=\"flex-1 w-1/2\"\n                (click)=\"editFilter()\"\n                i18n\n            >\n                Filters\n            </button>\n            <div class=\"flex items-center\">\n                <button\n                    btn\n                    matRipple\n                    name=\"view-desk-map\"\n                    class=\"rounded-l rounded-r-none\"\n                    [class.inverse]=\"view !== 'map'\"\n                    (click)=\"view = 'map'; viewChange.emit(view)\"\n                    i18n\n                >\n                    Map\n                </button>\n                <button\n                    btn\n                    matRipple\n                    name=\"view-desk-list\"\n                    class=\"rounded-r rounded-l-none\"\n                    [class.inverse]=\"view !== 'list'\"\n                    (click)=\"view = 'list'; viewChange.emit(view)\"\n                    i18n\n                >\n                    List\n                </button>\n            </div>\n        </section>\n        <section\n            filters\n            class=\"flex items-center flex-wrap p-2 w-[35rem] max-w-full sm:max-w-[35rem]\"\n        >\n            <!-- TODO: filter chips -->\n            <div filter-item date>{{ start | date: 'mediumDate' }}</div>\n            <div filter-item time>\n                <ng-container *ngIf=\"!all_day\">\n                    {{ start | date: time_format }} &mdash;\n                    {{ end | date: time_format }}\n                </ng-container>\n                <ng-container *ngIf=\"all_day\">All Day</ng-container>\n            </div>\n            <div\n                filter-item\n                features\n                *ngFor=\"let feat of (options | async)?.features || []\"\n            >\n                <p>{{ feat }}</p>\n                <button\n                    icon\n                    matRipple\n                    name=\"remove-desk-filter\"\n                    class=\"-mr-4\"\n                    (click)=\"setFeature(feat, false)\"\n                >\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n            <div filter-item *ngIf=\"(options | async)?.show_fav\">\n                <span i18n>Favourites Only</span>\n                <button\n                    icon\n                    matRipple\n                    name=\"remove-desk-favs-filter\"\n                    class=\"-mr-4\"\n                    (click)=\"setOptions({ show_fav: false })\"\n                >\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n        </section>\n    `,\n})\nexport class DeskFiltersDisplayComponent extends AsyncHandler {\n    @Input() public view: 'map' | 'list' = 'list';\n    @Output() public viewChange = new EventEmitter<'map' | 'list'>();\n    public readonly options = this._state.options;\n    public readonly setOptions = (o) => this._state.setOptions(o);\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n\n    public get all_day() {\n        return this._state.form.value.all_day;\n    }\n\n    public get start() {\n        return this._state.form.value.date;\n    }\n\n    public get end() {\n        const { date, duration, all_day } = this._state.form.value;\n        if (all_day) return endOfDay(date);\n        return date + duration * 60 * 1000;\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    public readonly editFilter = () => this._bsheet.open(DeskFiltersComponent);\n\n    constructor(\n        private _bsheet: MatBottomSheet,\n        private _state: BookingFormService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n}\n","import { Component, Input, Optional } from '@angular/core';\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport { SettingsService } from '@placeos/common';\nimport { addDays, endOfDay, set } from 'date-fns';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { BookingFormService } from '../booking-form.service';\nimport { map } from 'rxjs/operators';\nimport { combineLatest } from 'rxjs';\nimport { Region } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-filters',\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                max-width: 100vw;\n            }\n        `,\n    ],\n    template: `\n        <div\n            class=\"flex rounded-t-md items-center border-b border-base-200 pb-2 sm:hidden\"\n        >\n            <div class=\"flex-1 pl-2\">\n                <button\n                    icon\n                    matRipple\n                    name=\"close-desk-filters\"\n                    class=\"sm:hidden\"\n                    *ngIf=\"can_close\"\n                    (click)=\"close()\"\n                >\n                    <app-icon>keyboard_arrow_left</app-icon>\n                </button>\n            </div>\n            <h3 class=\"font-medium flex-2 text-center\" i18n>Desk Filters</h3>\n            <div class=\"flex-1\"></div>\n        </div>\n        <form\n            class=\"max-h-[65vh] p-2 overflow-y-auto overflow-x-hidden divide-y divide-base-200 w-full max-w-[100vw] sm:max-w-[30vw]\"\n            [formGroup]=\"form\"\n        >\n            <section details>\n                <h2 class=\"text-lg font-medium mb-1\" i18n>Details</h2>\n                <div class=\"flex-1 min-w-[8rem] flex flex-col\">\n                    <label for=\"location\" i18n>Location</label>\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"w-full\"\n                        *ngIf=\"use_region && (regions | async)?.length\"\n                    >\n                        <mat-select\n                            name=\"region\"\n                            [ngModel]=\"region\"\n                            (ngModelChange)=\"setRegion($event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Any Region\"\n                            i18n-placeholder\n                        >\n                            <mat-option\n                                *ngFor=\"let reg of regions | async\"\n                                [value]=\"reg\"\n                            >\n                                {{ reg.display_name || reg.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"w-full\"\n                        *ngIf=\"!use_region && (buildings | async)?.length > 1\"\n                    >\n                        <mat-select\n                            name=\"building\"\n                            [ngModel]=\"building | async\"\n                            (ngModelChange)=\"setBuilding($event)\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [placeholder]=\"\n                                (building | async)?.display_name ||\n                                (building | async)?.name\n                            \"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"w-full\"\n                        *ngIf=\"!hide_levels\"\n                    >\n                        <mat-select\n                            name=\"location\"\n                            [ngModel]=\"(options | async)?.zone_id\"\n                            (ngModelChange)=\"setOptions({ zone_id: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Any Level\"\n                            i18n-placeholder\n                        >\n                            <mat-option\n                                *ngFor=\"let lvl of levels | async\"\n                                [value]=\"lvl.id\"\n                            >\n                                <div class=\"flex flex-col-reverse\">\n                                    <div\n                                        class=\"opacity-30 text-xs\"\n                                        *ngIf=\"use_region\"\n                                    >\n                                        {{\n                                            (lvl.parent_id | building)\n                                                ?.display_name\n                                        }}\n                                        <span class=\"opacity-0\"> - </span>\n                                    </div>\n                                    <div>\n                                        {{ lvl.display_name || lvl.name }}\n                                    </div>\n                                </div>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n\n                <!-- Date -->\n                <div class=\"flex-1 min-w-[256px]\">\n                    <label i18n>Date</label>\n                    <a-date-field\n                        name=\"date\"\n                        [ngModel]=\"form.value.date\"\n                        (ngModelChange)=\"form.patchValue({ date: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        [to]=\"end_date\"\n                        [timezone]=\"timezone\"\n                    >\n                        {{ 'FORM.DATE_ERROR' | translate }}\n                    </a-date-field>\n                </div>\n                <!-- All Day -->\n                <div *ngIf=\"allow_all_day\" class=\"flex justify-end -mt-2 mb-2\">\n                    <mat-checkbox formControlName=\"all_day\" i18n>\n                        All Day\n                    </mat-checkbox>\n                </div>\n                <!-- Start End -->\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"!form.value.all_day\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <label i18n>Start Time</label>\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [use_24hr]=\"use_24hr\"\n                            [timezone]=\"timezone\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label i18n>End Time</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"10 * 60\"\n                            [min]=\"60\"\n                            [step]=\"60\"\n                            [use_24hr]=\"use_24hr\"\n                            [timezone]=\"timezone\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n            </section>\n            <section favs class=\"space-y-2 pb-4\">\n                <h2 class=\"text-lg font-medium\" i18n>\n                    {{ 'COMMON.FAVOURITES' | translate }}\n                </h2>\n                <div class=\"flex items-center\">\n                    <div for=\"fav\" class=\"flex-1 w-1/2\" i18n>\n                        {{ 'DESKS.SHOW_FAVOURITES' | translate }}\n                    </div>\n                    <mat-checkbox\n                        name=\"fav\"\n                        [ngModel]=\"(options | async)?.show_fav\"\n                        (ngModelChange)=\"setOptions({ show_fav: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    >\n                    </mat-checkbox>\n                </div>\n            </section>\n            <section\n                class=\"space-y-2\"\n                features\n                *ngIf=\"(features | async)?.length\"\n            >\n                <h2 class=\"text-lg font-medium\" i18n>Type</h2>\n                <div\n                    *ngFor=\"let feat of features | async\"\n                    class=\"flex items-center flex-wrap space-x-2\"\n                >\n                    <div for=\"feat\" class=\"flex-1 w-1/2\">{{ feat }}</div>\n                    <mat-checkbox\n                        [ngModel]=\"\n                            ((options | async)?.features || []).includes(feat)\n                        \"\n                        (ngModelChange)=\"setFeature(feat, $event)\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></mat-checkbox>\n                </div>\n            </section>\n        </form>\n        <div\n            class=\"px-2 py-2 w-full border-t border-base-200\"\n            *ngIf=\"can_close\"\n        >\n            <button\n                btn\n                matRipple\n                name=\"apply-desk-filters\"\n                class=\"w-full\"\n                (click)=\"close()\"\n                i18n\n            >\n                Apply Filters\n            </button>\n        </div>\n    `,\n})\nexport class DeskFiltersComponent {\n    @Input() public hide_levels: boolean;\n\n    public can_close = false;\n    public readonly options = this._state.options;\n    public readonly features = this._state.features;\n    public readonly buildings = this._org.active_buildings;\n    public readonly form = this._state.form;\n    public readonly regions = this._org.region_list;\n\n    public readonly levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([region, bld]) => {\n            const level_list = this.use_region\n                ? this._org.levelsForRegion(region)\n                : this._org.levelsForBuilding(bld);\n            const viewable_levels = level_list.filter(\n                (lvl) => !lvl.tags.includes('parking'),\n            );\n            return viewable_levels.sort(\n                (a, b) =>\n                    a.parent_id.localeCompare(b.parent_id) ||\n                    (a.display_name || '').localeCompare(b.display_name || ''),\n            );\n        }),\n    );\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public get region() {\n        return this._org.region;\n    }\n    public set region(reg) {\n        this._org.region = reg;\n    }\n\n    public readonly close = () => this._bsheet_ref.dismiss();\n    public readonly setOptions = (o) => this._state.setOptions(o);\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n    public readonly setLevel = (l) => {};\n\n    public readonly setRegion = (r) => (this._org.region = r);\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n    public get allow_all_day() {\n        return (\n            this.allow_time_changes &&\n            !!this._settings.get('app.desks.allow_all_day')\n        );\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.desks.available_period') || 90,\n            ),\n        );\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    public get use_region() {\n        return this._settings.get('app.use_region');\n    }\n\n    public get timezone() {\n        return this._settings.get('app.events.use_building_timezone')\n            ? this._org.building.timezone\n            : '';\n    }\n\n    constructor(\n        @Optional()\n        private _bsheet_ref: MatBottomSheetRef<DeskFiltersComponent>,\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {\n        this.can_close = !!this._bsheet_ref;\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BookingFormService, BookingAsset } from '../booking-form.service';\n\n@Component({\n    selector: 'desk-list',\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n                padding: 0.5rem;\n                background: rgba(0, 0, 0, 0.05);\n                overflow-y: auto;\n            }\n        `,\n    ],\n    template: `\n        <h3 class=\"font-bold\" i18n>Results</h3>\n        <p count class=\"text-sm opacity-60 mb-4\" i18n>\n            {{ (desks | async)?.length || 0 }} result(s) found\n        </p>\n        <ng-container *ngIf=\"!(loading | async)?.length; else load_state\">\n            <ul\n                class=\"list-style-none space-y-2\"\n                *ngIf=\"(desks | async)?.length; else empty_state\"\n            >\n                <li\n                    desk\n                    *ngFor=\"let desk of desks | async\"\n                    class=\"relative rounded-lg w-full shadow border bg-base-100 border-base-200 overflow-hidden\"\n                    [class.!border-info]=\"active === desk.id\"\n                >\n                    <button\n                        name=\"select-desk\"\n                        matRipple\n                        class=\"w-full h-full flex p-2\"\n                        (click)=\"selectDesk(desk)\"\n                    >\n                        <div\n                            class=\"relative w-20 h-20 rounded-xl bg-base-200 mr-4 flex items-center justify-center\"\n                        >\n                            <div\n                                class=\"absolute top-1 left-1 border border-neutral bg-base-200 rounded-full h-6 w-6 flex items-center justify-center text-white\"\n                                *ngIf=\"selected.includes(desk.id)\"\n                            >\n                                <app-icon>done</app-icon>\n                            </div>\n                            <img\n                                auth\n                                *ngIf=\"desk.images?.length; else placeholder\"\n                                class=\"object-cover h-full\"\n                                [source]=\"desk.images[0]\"\n                            />\n                            <ng-template #placeholder>\n                                <img\n                                    class=\"m-auto\"\n                                    src=\"assets/icons/desk-placeholder.svg\"\n                                />\n                            </ng-template>\n                        </div>\n                        <div class=\"space-y-2 pt-2 flex-1 text-left\">\n                            <span class=\"font-medium\">\n                                {{ desk.name || desk.id || 'Desk' }}\n                            </span>\n                            <div class=\"flex items-center text-sm space-x-2\">\n                                <app-icon class=\"text-info\">place</app-icon>\n                                <p class=\"text-xs\">\n                                    {{\n                                        desk.zone?.display_name ||\n                                            desk.zone?.name ||\n                                            '&lt;No Level&gt;'\n                                    }}\n                                </p>\n                            </div>\n                        </div>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        name=\"toggle-desk-favourite\"\n                        class=\"absolute top-1 right-1\"\n                        [class.text-info]=\"isFavourite(desk.id)\"\n                        (click)=\"toggleFav.emit(desk)\"\n                    >\n                        <app-icon>{{\n                            isFavourite(desk.id)\n                                ? 'favorite'\n                                : 'favorite_border'\n                        }}</app-icon>\n                    </button>\n                </li>\n            </ul>\n        </ng-container>\n        <ng-template #load_state>\n            <div\n                loading\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p class=\"opacity-30\">Finding available desks...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div\n                empty\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-30 text-center\">\n                    No available desk for selected time and/or filters\n                </p>\n            </div>\n        </ng-template>\n    `,\n})\nexport class DeskListComponent {\n    @Input() public active: string = '';\n    @Input() public selected: string = '';\n    @Input() public favorites: string[] = [];\n    @Output() public onSelect = new EventEmitter<BookingAsset>();\n    @Output() public toggleFav = new EventEmitter<BookingAsset>();\n\n    public readonly desks = combineLatest([\n        this._state.options,\n        this._state.available_resources,\n    ]).pipe(\n        map(([{ show_fav }, _]) =>\n            _.filter((i) => !show_fav || this.isFavourite(i.id))\n        )\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: BookingFormService) {}\n\n    public isFavourite(desk_id: string) {\n        return this.favorites.includes(desk_id);\n    }\n\n    public selectDesk(desk: BookingAsset) {\n        this.onSelect.emit(desk);\n    }\n}\n","import {\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { map } from 'rxjs/operators';\n\nimport { BookingAsset, BookingFormService } from '../booking-form.service';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { DEFAULT_COLOURS } from 'libs/explore/src/lib/explore-spaces.service';\nimport { ExploreDeskInfoComponent } from 'libs/explore/src/lib/explore-desk-info.component';\nimport { BuildingLevel } from 'libs/organisation/src/lib/level.class';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map',\n    template: `\n        <div class=\"bg-base-100 p-2 border-b border-base-200 w-full\">\n            <mat-form-field\n                levels\n                appearance=\"outline\"\n                class=\"w-full\"\n                *ngIf=\"(levels | async)?.length\"\n            >\n                <mat-select\n                    name=\"location\"\n                    [(ngModel)]=\"level\"\n                    (ngModelChange)=\"setOptions({ zone_ids: [$event.id] })\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                    placeholder=\"Any Level\"\n                    i18n-placeholder\n                >\n                    <mat-option\n                        *ngFor=\"let lvl of levels | async\"\n                        [value]=\"lvl\"\n                    >\n                        <div class=\"flex flex-col-reverse\">\n                            <div class=\"opacity-30 text-xs\" *ngIf=\"use_region\">\n                                {{ (lvl.parent_id | building)?.display_name }}\n                                <span class=\"opacity-0\"> - </span>\n                            </div>\n                            <div>\n                                {{ lvl.display_name || lvl.name }}\n                            </div>\n                        </div>\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"relative flex-1 w-full\">\n            <interactive-map\n                [src]=\"map_url\"\n                [(zoom)]=\"zoom\"\n                [(center)]=\"center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n                [options]=\"{ controls: true }\"\n            ></interactive-map>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                background: rgba(0, 0, 0, 0.05);\n                display: flex;\n                flex-direction: column;\n            }\n\n            button {\n                border-radius: 0;\n            }\n        `,\n    ],\n})\nexport class DeskMapComponent extends AsyncHandler implements OnInit {\n    @Input() public is_displayed: boolean = false;\n    @Input() public active = '';\n    @Output() public onSelect = new EventEmitter<BookingAsset>();\n\n    public readonly desks = this._state.available_resources;\n    public readonly loading = this._state.loading;\n\n    public zoom = 1;\n    public center = { x: 0.5, y: 0.5 };\n    public level?: BuildingLevel;\n    public coordinates = undefined;\n\n    private _change = new BehaviorSubject(0);\n\n    public readonly levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([region, bld]) => {\n            const level_list = this.use_region\n                ? this._org.levelsForRegion(region)\n                : this._org.levelsForBuilding(bld);\n            const viewable_levels = level_list.filter(\n                (lvl) => !lvl.tags.includes('parking')\n            );\n            return viewable_levels.sort(\n                (a, b) =>\n                    a.parent_id.localeCompare(b.parent_id) ||\n                    (a.display_name || '').localeCompare(b.display_name || '')\n            );\n        })\n    );\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get map_url() {\n        return this.level?.map_id || '';\n    }\n\n    public readonly actions = this._state.available_resources.pipe(\n        map((desks) =>\n            desks.map((desk) => ({\n                id: desk.map_id || desk.id,\n                action: ['touchend', 'mouseup'],\n                callback: () => this.selectDesk(desk as any),\n            }))\n        )\n    );\n\n    public readonly features = combineLatest([\n        this._state.resources,\n        this._state.available_resources,\n    ]).pipe(\n        map(([desks]) => {\n            return this._settings.get('app.desks.hide_user')\n                ? []\n                : desks.map((desk) => ({\n                      location: desk.id,\n                      content: ExploreDeskInfoComponent,\n                      full_size: true,\n                      no_scale: true,\n                      data: {\n                          id: desk.map_id || desk.id,\n                          map_id: desk.name,\n                          name: desk.name || desk.map_id,\n                          user: this._state.resourceUserName(desk.id),\n                      },\n                      z_index: 20,\n                  }));\n        })\n    );\n\n    public readonly styles = combineLatest([\n        this._state.resources,\n        this._state.available_resources,\n        this._change,\n    ]).pipe(\n        map(([desks, free_desks]) =>\n            desks.reduce((styles, desk) => {\n                const colours = this._settings.get('app.explore.colors') || {};\n                const status =\n                    this.active === desk.id\n                        ? 'active'\n                        : free_desks.find((_) => _.id === desk.id)\n                        ? 'free'\n                        : this._state.resourceUserName(desk.id)\n                        ? 'busy'\n                        : 'not-bookable';\n                styles[`#${desk.map_id || desk.id}`] = {\n                    fill:\n                        status === 'active'\n                            ? '#512DA8'\n                            : colours[`desk-${status}`] ||\n                              colours[`${status}`] ||\n                              DEFAULT_COLOURS[`${status}`],\n                };\n                return styles;\n            }, {})\n        )\n    );\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _settings: SettingsService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'levels_update',\n            this._state.options.subscribe(({ zone_id }) => {\n                const level = this._org.levelWithID([zone_id]);\n                if (level) this.level = level;\n            })\n        );\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.active) this._change.next(Date.now());\n    }\n\n    public selectDesk(desk: BookingAsset) {\n        this.onSelect.emit(desk);\n    }\n\n    public setLevel(level: BuildingLevel) {\n        this.setOptions({ zone_id: level?.id });\n        const bld = this._org.buildings.find((_) => _.id === level?.parent_id);\n        if (bld) {\n            const [latitude, longitude] = bld.location\n                .split(',')\n                .map((_) => parseFloat(_));\n            this.coordinates = { latitude, longitude };\n        }\n        this.level = level;\n    }\n\n    public setZoom(new_zoom: number) {\n        this.zoom = Math.max(0.5, Math.min(10, new_zoom));\n    }\n\n    public resetMap() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from '@placeos/common';\nimport {\n    BookingAsset,\n    BookingFlowOptions,\n    BookingFormService,\n} from '../booking-form.service';\n\nexport const FAV_DESK_KEY = 'favourite_desks';\n\n@Component({\n    selector: 'desk-select-modal',\n    styles: [],\n    template: `\n        <div\n            class=\"w-[100vw] h-[100vh] sm:relative sm:w-auto sm:h-auto flex flex-col bg-base-100\"\n        >\n            <header class=\"flex items-center space-x-4 w-full\">\n                <button icon mat-dialog-close class=\"bg-base-200\">\n                    <app-icon>close</app-icon>\n                </button>\n                <h3 i18n>Find Desk</h3>\n                <div class=\"hidden sm:flex items-center justify-end flex-1\">\n                    <button\n                        btn\n                        matRipple\n                        name=\"view-desk-map\"\n                        class=\"rounded-l rounded-r-none\"\n                        [class.inverse]=\"view !== 'map'\"\n                        (click)=\"view = 'map'\"\n                    >\n                        Map\n                    </button>\n                    <button\n                        btn\n                        matRipple\n                        name=\"view-desk-list\"\n                        class=\"rounded-r rounded-l-none\"\n                        [class.inverse]=\"view !== 'list'\"\n                        (click)=\"view = 'list'\"\n                    >\n                        List\n                    </button>\n                </div>\n            </header>\n            <main\n                class=\"flex items-center divide-x divide-base-200 h-[65vh] w-[calc(100vw-4rem)] overflow-hidden\"\n            >\n                <desk-filters\n                    class=\"h-full hidden sm:flex max-w-[20rem] sm:h-[65vh] sm:max-h-full\"\n                    [hide_levels]=\"view !== 'list'\"\n                ></desk-filters>\n                <div\n                    class=\"flex flex-col items-center flex-1 w-1/2 h-full sm:h-[65vh]\"\n                >\n                    <desk-filters-display\n                        class=\"w-full border-b border-base-200\"\n                        [(view)]=\"view\"\n                    ></desk-filters-display>\n                    <desk-list\n                        *ngIf=\"view === 'list'; else map_view\"\n                        [active]=\"displayed?.id\"\n                        [selected]=\"selected_ids\"\n                        [favorites]=\"favorites\"\n                        (toggleFav)=\"toggleFavourite($event)\"\n                        (onSelect)=\"displayed = $event\"\n                        class=\"flex-1 h-1/2 bg-base-200\"\n                    ></desk-list>\n                </div>\n                <desk-details\n                    [desk]=\"displayed\"\n                    class=\"h-full w-full sm:h-[65vh] absolute sm:relative sm:flex sm:max-w-[20rem] z-20 bg-base-100 block\"\n                    [class.hidden]=\"!displayed\"\n                    [class.inset-0]=\"displayed\"\n                    [active]=\"selected_ids.includes(displayed?.id)\"\n                    [hide_map]=\"view === 'map'\"\n                    (activeChange)=\"setSelected(displayed, $event)\"\n                    [fav]=\"displayed && this.favorites.includes(displayed?.id)\"\n                    (toggleFav)=\"toggleFavourite(displayed)\"\n                    (close)=\"displayed = null\"\n                ></desk-details>\n            </main>\n            <footer\n                class=\"flex sm:hidden flex-col-reverse items-center justify-end px-2 pt-2 pb-[5.5rem] border-t border-base-200 w-full\"\n            >\n                <button\n                    btn\n                    matRipple\n                    name=\"desk-return\"\n                    class=\"inverse sm:hidden w-full\"\n                    *ngIf=\"displayed\"\n                    (click)=\"displayed = null\"\n                    i18n\n                >\n                    Back\n                </button>\n                <button\n                    btn\n                    matRipple\n                    name=\"save-desks\"\n                    [mat-dialog-close]=\"selected\"\n                    [class.mb-2]=\"displayed\"\n                    class=\"w-full sm:w-32 sm:mb-0\"\n                    i18n\n                >\n                    View List\n                </button>\n            </footer>\n            <footer\n                class=\"hidden sm:flex items-center justify-between p-2 border-t border-base-200 w-full\"\n            >\n                <button\n                    btn\n                    matRipple\n                    name=\"desk-return\"\n                    [mat-dialog-close]=\"selected\"\n                    class=\"clear text-secondary\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">arrow_back</app-icon>\n                        <div class=\"mr-1 underline\" i18n>Back to form</div>\n                    </div>\n                </button>\n                <p class=\"opacity-60 text-sm\" i18n>\n                    {{ selected.length }} desk(s) added\n                </p>\n                <button\n                    btn\n                    matRipple\n                    name=\"toggle-desk\"\n                    [disabled]=\"!displayed\"\n                    [class.inverse]=\"isSelected(displayed?.id)\"\n                    (click)=\"setSelected(displayed, !isSelected(displayed?.id))\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">{{\n                            isSelected(displayed?.id) ? 'remove' : 'add'\n                        }}</app-icon>\n                        <div class=\"mr-1\" i18n>\n                            {{\n                                isSelected(displayed?.id)\n                                    ? 'Remove from Booking'\n                                    : 'Add to booking'\n                            }}\n                        </div>\n                    </div>\n                </button>\n            </footer>\n        </div>\n        <ng-template #map_view>\n            <desk-map\n                class=\"flex-1 h-1/2 w-full\"\n                [is_displayed]=\"!!displayed\"\n                [active]=\"displayed?.id\"\n                (onSelect)=\"displayed = $event\"\n            >\n            </desk-map>\n        </ng-template>\n    `,\n})\nexport class DeskSelectModalComponent {\n    public displayed?: BookingAsset;\n    public selected: BookingAsset[] = [];\n    public view = 'list';\n\n    public get selected_ids() {\n        return this.selected.map((_) => _.id).join(',');\n    }\n\n    public get favorites() {\n        return this._settings.get<string[]>(FAV_DESK_KEY) || [];\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<DeskSelectModalComponent>,\n        private _settings: SettingsService,\n        private _event_form: BookingFormService,\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            items: BookingAsset[];\n            options: Partial<BookingFlowOptions>;\n        },\n    ) {\n        this.selected = [...(_data.items || [])];\n        this._event_form.setOptions(_data.options);\n    }\n\n    public isSelected(id: string) {\n        return id && this.selected_ids.includes(id);\n    }\n\n    public setSelected(item: BookingAsset, state: boolean) {\n        const list = this.selected.filter((_) => _.id !== item.id);\n        if (state) list.push(item);\n        this.selected = list;\n        if (!this._data.options.group && state) {\n            this.displayed = null;\n            setTimeout(() => this._dialog_ref.close([item]), 50);\n        }\n    }\n\n    public toggleFavourite(item: BookingAsset) {\n        const fav_list = this.favorites;\n        const new_state = !fav_list.includes(item.id);\n        if (new_state) {\n            this._settings.saveUserSetting(FAV_DESK_KEY, [\n                ...fav_list,\n                item.id,\n            ]);\n        } else {\n            this._settings.saveUserSetting(\n                FAV_DESK_KEY,\n                fav_list.filter((_) => _ !== item.id),\n            );\n        }\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { SettingsService, notifyError, notifySuccess } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { getModule } from '@placeos/ts-client';\n\n@Component({\n    selector: 'desk-settings-modal',\n    template: `\n        <div\n            class=\"relative p-4 bg-base-100 rounded shadow w-[20rem]\"\n            *ngIf=\"!edit_presets; else desk_height_tooltip\"\n        >\n            <div class=\"text-lg\" i18n>Desk Height</div>\n            <div class=\"text-xs opacity-60 mb-4\" i18n>\n                Set your desk height for the best experience\n            </div>\n            <div class=\"flex flex-col mt-2 mb-4\">\n                <label>Presets</label>\n                <div class=\"flex items-center space-x-2 pb-4\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"no-subscript flex-1 w-1/2\"\n                    >\n                        <mat-select\n                            placeholder=\"No selected preset\"\n                            [(ngModel)]=\"preset\"\n                            (ngModelChange)=\"setPreset($event)\"\n                        >\n                            <mat-option value=\"\">None</mat-option>\n                            <mat-option value=\"standing\">Standing</mat-option>\n                            <mat-option value=\"sitting\">Seated</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <button\n                        icon\n                        matRipple\n                        (click)=\"edit_presets = true\"\n                        class=\"rounded h-12 w-12 bg-secondary text-secondary-content\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                </div>\n                <label>Current Height</label>\n                <div class=\"flex items-center space-x-2\">\n                    <mat-slider\n                        min=\"60\"\n                        max=\"120\"\n                        step=\"0.5\"\n                        discrete\n                        class=\"flex-1\"\n                        [displayWith]=\"formatLabel\"\n                    >\n                        <input\n                            matSliderThumb\n                            [(ngModel)]=\"height\"\n                            (ngModelChange)=\"updatePreset(height)\"\n                        />\n                    </mat-slider>\n                    <div class=\"text-sm w-12 text-right\">\n                        {{ height.toFixed(1) }}cm\n                    </div>\n                </div>\n            </div>\n            <button btn matRipple (click)=\"setDeskHeight()\" class=\"w-full\">\n                Apply Settings\n            </button>\n            <button\n                icon\n                matRipple\n                mat-dialog-close\n                class=\"absolute top-0 right-0\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n        <ng-template #desk_height_tooltip>\n            <desk-height-presets\n                [show_close]=\"true\"\n                (close)=\"edit_presets = false\"\n            ></desk-height-presets>\n        </ng-template>\n    `,\n    styles: [],\n})\nexport class DeskSettingsModalComponent {\n    public readonly desk_id = this._data.id;\n    public edit_presets = false;\n    public preset: string;\n    public height = 71;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { id: string },\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _dialog_ref: MatDialogRef<DeskSettingsModalComponent>,\n    ) {}\n\n    public ngOnInit() {\n        const sitting_height = this._settings.get('desk_sitting_height');\n        const standing_height = this._settings.get('desk_standing_height');\n        if (!sitting_height && !standing_height) {\n            this.edit_presets = true;\n        }\n        const last_height = parseInt(\n            localStorage.getItem('PLACEOS.last_desk_height'),\n            10,\n        );\n        this.height = last_height || sitting_height || 71;\n        if (this.height === sitting_height) {\n            this.preset = 'sitting';\n        } else if (this.height === standing_height) {\n            this.preset = 'standing';\n        }\n    }\n\n    public updatePreset(new_height: number) {\n        const sitting_height = this._settings.get('desk_sitting_height') || 71;\n        const standing_height =\n            this._settings.get('desk_standing_height') || 102;\n        if (new_height === sitting_height) {\n            this.preset = 'sitting';\n        } else if (new_height === standing_height) {\n            this.preset = 'standing';\n        } else {\n            this.preset = null;\n        }\n    }\n\n    public setPreset(value: string) {\n        switch (value) {\n            case 'standing':\n                this.height = this._settings.get('desk_standing_height') || 102;\n                break;\n            case 'sitting':\n                this.height = this._settings.get('desk_sitting_height') || 71;\n                break;\n            default:\n                this.height = 70;\n                break;\n        }\n    }\n\n    public async setDeskHeight() {\n        const sys_id = this._org.binding('desks');\n        localStorage.setItem('PLACEOS.last_desk_height', `${this.height}`);\n        if (!sys_id) return this._dialog_ref.close();\n        const module = getModule(sys_id, 'DeskControl');\n        await module\n            .execute('set_desk_height', [this.desk_id, this.height])\n            .catch((_) => {\n                notifyError('Error setting desk height.' + _);\n                throw _;\n            });\n        notifySuccess('Successfully set desk height');\n        this._dialog_ref.close();\n    }\n\n    public formatLabel(value: number) {\n        return `${value.toFixed(1)}cm`;\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler, SettingsService, currentUser } from '@placeos/common';\nimport { notifyError } from 'libs/common/src/lib/notifications';\nimport { getInvalidFields, randomString } from 'libs/common/src/lib/general';\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { BookingFormService } from './booking-form.service';\nimport { Booking } from './booking.class';\nimport { User } from 'libs/users/src/lib/user.class';\n\n@Component({\n    selector: `invite-visitor-form`,\n    template: `\n        <ng-container *ngIf=\"!sent; else send_state\">\n            <div\n                class=\"relative flex flex-col bg-base-100 overflow-auto max-h-full\"\n                *ngIf=\"!(loading | async) && !loading_many; else load_state\"\n            >\n                <div class=\"w-full border-b border-base-200 sm:px-16 px-4 py-4\">\n                    <h2 class=\"text-2xl font-medium\" i18n>Invite Visitor</h2>\n                </div>\n                <form\n                    *ngIf=\"form\"\n                    [formGroup]=\"form\"\n                    class=\"sm:px-16 px-4 py-4\"\n                >\n                    <div class=\"flex flex-col\" *ngIf=\"buildings?.length > 1\">\n                        <label for=\"building\" i18n>\n                            Building<span>*</span>\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-select\n                                [ngModel]=\"form.value.zones[0]\"\n                                (ngModelChange)=\"\n                                    form.patchValue({ zones: [$event] })\n                                \"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                name=\"building\"\n                                placeholder=\"Select building\"\n                                i18n-placeholder\n                            >\n                                <mat-option\n                                    *ngFor=\"let bld of buildings | async\"\n                                    [value]=\"bld.id\"\n                                >\n                                    {{ bld.display_name || bld.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col\">\n                        <label for=\"date\" i18n>Date<span>*</span></label>\n                        <a-date-field\n                            name=\"date\"\n                            formControlName=\"date\"\n                        ></a-date-field>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <div class=\"flex-1 flex flex-col w-1/3\">\n                            <label for=\"start-time\" i18n>\n                                Start Time<span>*</span>\n                            </label>\n                            <a-time-field\n                                name=\"start-time\"\n                                [ngModel]=\"form.value.date\"\n                                (ngModelChange)=\"\n                                    form.patchValue({ date: $event })\n                                \"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                [disabled]=\"form.value.all_day\"\n                                [use_24hr]=\"use_24hr\"\n                            ></a-time-field>\n                        </div>\n                        <div class=\"flex-1 flex flex-col w-1/3\">\n                            <label for=\"end-time\" i18n\n                                >End Time<span>*</span></label\n                            >\n                            <a-duration-field\n                                name=\"end-time\"\n                                formControlName=\"duration\"\n                                [time]=\"form.value.date\"\n                                [use_24hr]=\"use_24hr\"\n                            ></a-duration-field>\n                        </div>\n                    </div>\n                    <div\n                        *ngIf=\"can_book_for_others\"\n                        class=\"w-full flex flex-col\"\n                    >\n                        <label for=\"host\">\n                            {{ 'FORM.HOST' | translate }}<span>*</span>\n                        </label>\n                        <a-user-search-field\n                            name=\"host\"\n                            class=\"mb-4\"\n                            formControlName=\"user\"\n                        ></a-user-search-field>\n                    </div>\n                    <ng-container *ngIf=\"!multiple; else multi_state\">\n                        <div class=\"flex flex-col\">\n                            <label for=\"visitor-name\" i18n\n                                >Visitor Name<span>*</span></label\n                            >\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    matInput\n                                    name=\"visitor-name\"\n                                    formControlName=\"asset_name\"\n                                    placeholder=\"Name of the visitor\"\n                                    (focus)=\"\n                                        filterVisitors(form.value.asset_name)\n                                    \"\n                                    [matAutocomplete]=\"name_auto\"\n                                />\n                            </mat-form-field>\n                            <mat-autocomplete #name_auto=\"matAutocomplete\">\n                                <mat-option\n                                    *ngFor=\"let item of filtered_visitors\"\n                                    [value]=\"item.name\"\n                                    (click)=\"setVisitor(item)\"\n                                >\n                                    <div class=\"flex flex-col leading-tight\">\n                                        <div>{{ item.name }}</div>\n                                        <div class=\"text-xs opacity-60\">\n                                            {{ item.email }}\n                                            {{\n                                                item.company\n                                                    ? '| ' + item.company\n                                                    : ''\n                                            }}\n                                        </div>\n                                    </div>\n                                </mat-option>\n                            </mat-autocomplete>\n                        </div>\n                        <div class=\"flex flex-col\">\n                            <label for=\"visitor-email\" i18n>\n                                Visitor Email<span>*</span>\n                            </label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    matInput\n                                    name=\"visitor-email\"\n                                    type=\"email\"\n                                    formControlName=\"asset_id\"\n                                    placeholder=\"Email of the visitor\"\n                                    (focus)=\"\n                                        filterVisitors(form.value.asset_id)\n                                    \"\n                                    [matAutocomplete]=\"email_auto\"\n                                />\n                                <mat-error i18n>\n                                    A valid email is required\n                                </mat-error>\n                            </mat-form-field>\n                            <mat-autocomplete #email_auto=\"matAutocomplete\">\n                                <mat-option\n                                    *ngFor=\"let item of filtered_visitors\"\n                                    [value]=\"item.email\"\n                                    (click)=\"setVisitor(item)\"\n                                >\n                                    <div class=\"flex flex-col leading-tight\">\n                                        <div>{{ item.name }}</div>\n                                        <div class=\"text-xs opacity-60\">\n                                            {{ item.email }}\n                                            {{\n                                                item.company\n                                                    ? '| ' + item.company\n                                                    : ''\n                                            }}\n                                        </div>\n                                    </div>\n                                </mat-option>\n                            </mat-autocomplete>\n                        </div>\n                        <div class=\"flex flex-col\">\n                            <label for=\"visitor-name\" i18n>Company</label>\n                            <mat-form-field appearance=\"outline\">\n                                <input\n                                    matInput\n                                    name=\"company\"\n                                    formControlName=\"company\"\n                                    placeholder=\"Company of the visitor\"\n                                />\n                            </mat-form-field>\n                        </div>\n                    </ng-container>\n                    <div class=\"flex flex-col\">\n                        <label for=\"reason\" i18n>Reason for visit</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                name=\"reason\"\n                                matInput\n                                formControlName=\"description\"\n                                placeholder=\"e.g. Meeting Catchup\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </form>\n                <div\n                    class=\"sticky sm:px-16 px-4 py-4 border-t bg-base-100 border-base-200 bottom-0\"\n                >\n                    <button\n                        btn\n                        matRipple\n                        send\n                        class=\"w-full sm:w-auto\"\n                        (click)=\"sendInvite()\"\n                        i18n\n                    >\n                        Send Visitor Invite\n                    </button>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #send_state>\n            <div\n                sent\n                class=\"absolute inset-0 bg-base-100 flex flex-col items-center justify-center text-center\"\n            >\n                <div class=\"w-full max-w-[32rem] flex-1 h-1/2 space-y-2 m-8\">\n                    <h2 class=\"text-3xl\" i18n>\n                        Visitor invite sent to\n                        <ng-container *ngIf=\"!multiple\">\n                            {{\n                                last_success?.asset_name ||\n                                    last_success?.asset_id\n                            }}\n                        </ng-container>\n                        <ng-container *ngIf=\"multiple\">\n                            {{ last_count }} visitor{{\n                                last_count == 1 ? '' : 's'\n                            }}\n                        </ng-container>\n                    </h2>\n                    <img class=\"mx-auto\" src=\"assets/icons/sent.svg\" />\n                    <p i18n>\n                        Invite has been sent to\n                        <i>\n                            <ng-container *ngIf=\"!multiple\">\n                                {{\n                                    last_success?.asset_name ||\n                                        last_success?.asset_id\n                                }}\n                            </ng-container>\n                            <ng-container *ngIf=\"multiple\">\n                                {{ last_count }} visitor{{\n                                    last_count == 1 ? '' : 's'\n                                }}\n                            </ng-container>\n                        </i>\n                        to attend\n                        {{ building?.display_name || building?.name }} from\n                        {{ last_success?.date | date: 'mediumDate' }} at\n                        {{ last_success?.date | date: time_format }}\n                    </p>\n                </div>\n                <div class=\"w-full p-2 border-t border-base-200\">\n                    <div\n                        class=\"mx-auto flex items-center space-x-2 w-full max-w-[32rem]\"\n                    >\n                        <button\n                            btn\n                            matRipple\n                            class=\"flex-1\"\n                            (click)=\"onDone()\"\n                            i18n\n                        >\n                            Great, thanks\n                        </button>\n                        <button\n                            btn\n                            matRipple\n                            class=\"flex-1\"\n                            (click)=\"sent = false\"\n                            i18n\n                        >\n                            Book Another Visitor\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                loading\n                class=\"relative flex flex-col items-center justify-center rounded overflow-hidden w-full h-full min-h-[18rem]\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p i18n>Sending invitation...</p>\n            </div>\n        </ng-template>\n        <ng-template #multi_state>\n            <div class=\"flex flex-col\" [formGroup]=\"form\">\n                <label for=\"visitor-name\" i18n>Visitors<span>*</span></label>\n                <a-user-list-field\n                    formControlName=\"assets\"\n                    [guests_only]=\"true\"\n                ></a-user-list-field>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class InviteVisitorFormComponent extends AsyncHandler {\n    @Output() public done = new EventEmitter<void>();\n\n    public sent = false;\n    public booking?: Booking;\n    public readonly loading = this._service.loading;\n    public loading_many = false;\n    public readonly buildings = this._org.active_buildings;\n    public last_success = this._service.last_success;\n    public last_count = 0;\n    public visitors = [];\n    public filtered_visitors = [];\n\n    public get multiple() {\n        return this._settings.get('app.bookings.multiple_visitors');\n    }\n\n    public get can_book_for_others() {\n        return this._settings.get('app.bookings.can_book_for_others');\n    }\n\n    public get building() {\n        return this._settings.get('app.use_region')\n            ? this._org.region\n            : this._org.building;\n    }\n\n    public get form() {\n        return this._service.form;\n    }\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    constructor(\n        private _service: BookingFormService,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        this.sent = false;\n        this._service.clearOldState();\n        await this.initFormZone();\n        this.form\n            .get('asset_id')\n            .setValidators([Validators.required, Validators.email]);\n        const visitors = this._settings.get('visitor-invitees') || [];\n        for (const item of visitors) {\n            const [email, name, company] = item.split('|');\n            this.visitors.push({ email, name, company });\n        }\n        this.filterVisitors('');\n        this.subscription(\n            'email',\n            this.form\n                .get('asset_id')\n                .valueChanges.subscribe((_) => this.filterVisitors(_)),\n        );\n        this.subscription(\n            'name',\n            this.form\n                .get('asset_name')\n                .valueChanges.subscribe((_) => this.filterVisitors(_)),\n        );\n        if (this.multiple)\n            this.form.patchValue({ asset_id: 'multiple@place.tech' });\n    }\n\n    public setVisitor(item) {\n        this.form.patchValue({\n            asset_id: item.email,\n            asset_name: item.name,\n            company: item.company,\n            phone: item.phone,\n        });\n    }\n\n    public filterVisitors(filter: string) {\n        const s = (filter || '').toLowerCase();\n        this.filtered_visitors = this.visitors.filter(\n            ({ email, name, company }) =>\n                email.toLowerCase().includes(s) ||\n                name.toLowerCase().includes(s) ||\n                company.toLowerCase().includes(s),\n        );\n    }\n\n    public onDone() {\n        this.done.emit();\n        this.sent = false;\n    }\n\n    public async sendInvite() {\n        this.form.markAllAsTouched();\n        if (\n            !this.form.valid ||\n            (this.multiple && !this.form.value.assets.length)\n        ) {\n            return notifyError(\n                `Some fields are invalid. [${\n                    getInvalidFields(this.form).join(', ') || 'visitors'\n                }]`,\n            );\n        }\n        if (!this.form.value.user_email || !this.can_book_for_others) {\n            this.form.patchValue({ user: currentUser() });\n        }\n        const { asset_id, asset_name, company, assets } = this.form.value;\n        const visitor_details = `${asset_id}|${asset_name}|${company}`;\n        const old_visitors = this._settings.get('visitor-invitees') || [];\n        this._settings.saveUserSetting('visitor-invitees', [\n            ...old_visitors.filter((_) => !_.includes(asset_id)),\n            visitor_details,\n        ]);\n        await (this.multiple ? this._bookForMany() : this._bookForOne());\n        this.last_success = this._service.last_success;\n        await this.initFormZone();\n        this.sent = true;\n    }\n\n    private async initFormZone() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._service.setOptions({ type: 'visitor' });\n        this.form.patchValue({\n            booking_type: 'visitor',\n            zones: [this._org.building?.id],\n        });\n        if (this.multiple)\n            this.form.patchValue({ asset_id: 'multiple@place.tech' });\n    }\n\n    private async _bookForOne() {\n        const value = this.form.value;\n        this.form.patchValue({\n            name: value.asset_name,\n            attendees: [\n                new User({\n                    name: value.asset_name,\n                    email: value.asset_id,\n                    organisation: value.company,\n                    phone: value.phone,\n                }),\n            ],\n        });\n        await this._service.postForm().catch((e) => {\n            notifyError(e);\n            throw e;\n        });\n    }\n\n    private async _bookForMany() {\n        this.loading_many = true;\n        const group = `grp-${randomString(8)}`;\n        const value = this.form.value;\n        const assets = value.assets;\n        this.last_count = assets.length;\n        for (const user of assets) {\n            if (!user.email) continue;\n            this.form.patchValue({\n                ...value,\n                booking_type: 'visitor',\n                asset_id: user.email,\n                asset_name: user.name,\n                user: currentUser(),\n                description: group,\n                name: user.name,\n                assets: [],\n                attendees: [\n                    new User({\n                        name: user.name,\n                        email: user.email,\n                        organisation: user.company || user.organisation,\n                        phone: user.phone,\n                    }),\n                ],\n            });\n            await this._service.postForm().catch((e) => {\n                notifyError(e);\n                this.loading_many = false;\n                throw e;\n            });\n        }\n        this.loading_many = false;\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Locker, LockerBank } from './lockers.service';\nimport { SettingsService } from '@placeos/common';\nimport { DEFAULT_COLOURS } from 'libs/explore/src/lib/explore-spaces.service';\n\n@Component({\n    selector: 'locker-grid',\n    template: `\n        <div class=\"p-4 text-xl font-medium\">\n            {{ bank?.name }}\n        </div>\n        <div\n            class=\"flex-1 grid gap-2 overflow-hidden max-h-full h-[75vh] min-w-[60vw] p-2\"\n            [style.width]=\"columns * 2.5 + 'rem'\"\n            [style.grid-template-columns]=\"'repeat(' + columns + ', 1fr)'\"\n            [style.grid-template-rows]=\"'repeat(' + bank?.height + ', 1fr)'\"\n        >\n            <button\n                *ngFor=\"let locker of bank?.lockers || []\"\n                matRipple\n                class=\"relative border border-base-200 rounded bg-teal-300 overflow-hidden\"\n                [class.opacity-60]=\"selected && selected !== locker.id\"\n                [style.grid-column-start]=\"locker.position[0] + 1\"\n                [style.grid-row-start]=\"locker.position[1] + 1\"\n                [style.grid-column-end]=\"\n                    locker.position[0] + (locker.size[0] + 1)\n                \"\n                [style.background-color]=\"status(locker)\"\n                [style.grid-row-end]=\"locker.position[1] + (locker.size[1] + 1)\"\n                [matTooltip]=\"locker.name\"\n                [disabled]=\"locker.bookable === false\"\n                (click)=\"clicked.emit(locker)\"\n            >\n                <div\n                    handle\n                    class=\"absolute top-1/2 -translate-y-1/2 left-2 w-1 h-6 bg-neutral rounded\"\n                ></div>\n                <div\n                    vent\n                    class=\"absolute left-1/2 -translate-x-1/2 top-2 w-3/5 h-1 bg-neutral rounded-t\"\n                ></div>\n                <div\n                    vent\n                    class=\"absolute left-1/2 -translate-x-1/2 top-4 w-3/5 h-1 bg-neutral rounded-t\"\n                ></div>\n                <div\n                    vent\n                    class=\"absolute left-1/2 -translate-x-1/2 top-6 w-3/5 h-1 bg-neutral rounded-t\"\n                ></div>\n                <div\n                    class=\"absolute left-1/2 -translate-x-1/2 top-8 text-[0.6rem] font-medium text-black/60\"\n                >\n                    {{ locker.name }}\n                </div>\n\n                <div class=\"absolute inset-0 hover:bg-neutral\"></div>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n            }\n            button[disabled] {\n                pointer-events: none;\n                opacity: 0.75;\n                background-color: #ccc !important;\n            }\n        `,\n    ],\n})\nexport class LockerGridComponent {\n    @Input() public bank: LockerBank;\n    @Input() public bank_status: Record<string, string> = {\n        '10': 'busy',\n        '7': 'pending',\n    };\n    @Input() public selected = '';\n    @Output() public clicked = new EventEmitter<Locker>();\n\n    public get columns() {\n        let columns = 1;\n        for (const locker of this.bank?.lockers || []) {\n            const x = locker.position[0] + locker.size[0];\n            if (x > columns) columns = x;\n        }\n        return columns;\n    }\n\n    constructor(private _settings: SettingsService) {}\n\n    public status(locker: Locker) {\n        const colours = this._settings.get('app.explore.colors') || {};\n        const value = this.bank_status[locker.id] || 'free';\n        return (\n            colours[`lockers-${value}`] ||\n            colours[`${value}`] ||\n            DEFAULT_COLOURS[`${value}`]\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { flatten } from '@placeos/common';\nimport {\n    PlaceMetadata,\n    PlaceZone,\n    PlaceZoneMetadata,\n    listChildMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, Observable, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\n\nexport interface LockerBank {\n    id: string;\n    map_id: string;\n    level_id: string;\n    name: string;\n    height: number;\n    lockers: Locker[];\n    zone?: PlaceZone;\n}\n\nexport interface Locker {\n    id: string;\n    bank_id: string;\n    level_id?: string;\n    map_id?: string;\n    name: string;\n    accessible: boolean;\n    bookable: boolean;\n    position: [number, number];\n    size: [number, number];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LockersService {\n    private _level = new BehaviorSubject('');\n    private _change = new BehaviorSubject(0);\n    public readonly lockers_banks$: Observable<LockerBank[]> = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) =>\n            listChildMetadata(bld.id, { name: 'lockers' }).pipe(\n                catchError(() => of(new PlaceMetadata()))\n            )\n        ),\n        map((_: PlaceZoneMetadata[]) =>\n            flatten(\n                _.map((_) =>\n                    _.metadata.lockers?.details instanceof Array\n                        ? _.metadata.lockers?.details.map((bank) => ({\n                              ...bank,\n                              zone: _.zone,\n                          }))\n                        : []\n                )\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly lockers$ = this.lockers_banks$.pipe(\n        map((bank_list) => {\n            const lockers: Locker[] = [];\n            for (const bank of bank_list) {\n                lockers.push(\n                    ...bank.lockers.map(\n                        (_) =>\n                            ({\n                                ..._,\n                                bank_id: bank.id,\n                                map_id: bank.map_id,\n                                level_id: bank.zone.id,\n                            } as Locker)\n                    )\n                );\n            }\n            return lockers;\n        })\n    );\n\n    public readonly filtered_lockers$ = combineLatest([\n        this._level,\n        this.lockers$,\n    ]).pipe(\n        map(([level, lockers]) =>\n            lockers.filter(\n                (_) => (!level || _.level_id === level) && _.bookable\n            )\n        )\n    );\n\n    public setLevel(level: string) {\n        this._level.next(level);\n    }\n\n    constructor(private _org: OrganisationService) {}\n\n    public async saveLockers(lockers: LockerBank[]) {\n        await updateMetadata(this._org.building.id, {\n            name: 'lockers',\n            description: '',\n            details: lockers,\n        });\n        this._change.next(Date.now());\n    }\n}\n","import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { MapPinComponent } from '@placeos/components';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ViewerFeature } from '@placeos/svg-viewer';\nimport { BookingAsset } from '../booking-form.service';\n\n@Component({\n    selector: `parking-space-details`,\n    template: `\n        <ng-container *ngIf=\"space; else empty_state\">\n            <section\n                image\n                class=\"relative w-full bg-base-200\"\n                [class.sm:h-40]=\"space.images?.length\"\n                [class.h-64]=\"space.images?.length\"\n                [class.sm:h-0]=\"!space.images?.length\"\n                [class.h-12]=\"!space.images?.length\"\n                [class.!bg-transparent]=\"!space.images?.length\"\n            >\n                <image-carousel\n                    [images]=\"space.images\"\n                    *ngIf=\"space.images?.length\"\n                    class=\"absolute inset-0\"\n                ></image-carousel>\n                <button\n                    icon\n                    matRipple\n                    close\n                    (click)=\"close.emit()\"\n                    class=\"absolute top-2 left-2 bg-base-200 sm:hidden\"\n                >\n                    <app-icon>arrow_back</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    fav\n                    [class.text-info-content]=\"fav\"\n                    [class.!bg-info]=\"fav\"\n                    (click)=\"toggleFav.emit()\"\n                    class=\"absolute top-2 right-2 bg-base-200\"\n                >\n                    <app-icon>{{\n                        fav ? 'favorite' : 'favorite_border'\n                    }}</app-icon>\n                </button>\n            </section>\n            <div class=\"p-2 space-y-2 flex-1 h-1/2 overflow-auto\">\n                <section actions class=\"z-0\">\n                    <h2 class=\"text-xl font-medium mb-2 mt-4\">\n                        {{ space.display_name || space.name }}\n                    </h2>\n                </section>\n                <hr />\n                <section details class=\"space-y-2\">\n                    <h2 class=\"text-xl font-medium\" i18n>Details</h2>\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon>people</app-icon>\n                        <p i18n>{{ space.capacity }} People</p>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon>meeting_room</app-icon>\n                        <p>\n                            {{ level?.display_name || level?.name }}\n                        </p>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon>place</app-icon>\n                        <p>\n                            {{\n                                building?.address ||\n                                    building?.display_name ||\n                                    building?.name\n                            }}\n                        </p>\n                    </div>\n                </section>\n                <hr />\n                <section\n                    map\n                    class=\"w-full mx-auto h-64 sm:h-48 relative border border-base-200 overflow-hidden rounded\"\n                >\n                    <interactive-map\n                        class=\"pointer-events-none\"\n                        [src]=\"map_url\"\n                        [focus]=\"space.map_id\"\n                        [features]=\"features\"\n                        [options]=\"{ disable_pan: true, disable_zoom: true }\"\n                    ></interactive-map>\n                </section>\n            </div>\n            <div class=\"p-2 border-t border-base-200 shadow sm:hidden\">\n                <button\n                    btn\n                    matRipple\n                    [class.inverse]=\"active\"\n                    class=\"w-full\"\n                    (click)=\"active = !active; activeChange.emit(active)\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-2xl\">{{\n                            active ? 'remove' : 'add'\n                        }}</app-icon>\n                        <p>\n                            {{ active ? 'Remove this room' : 'Add this room' }}\n                        </p>\n                    </div>\n                </button>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                empty\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-30 text-center\" i18n>\n                    Select a space to view it's details\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 30%;\n                min-width: 20rem;\n                height: 100%;\n                min-height: 65vh;\n            }\n        `,\n    ],\n})\nexport class ParkingSpaceDetailsComponent {\n    @Input() public space?: BookingAsset;\n    @Input() public fav: boolean = false;\n    @Input() public active: boolean = false;\n\n    @Output() public activeChange = new EventEmitter<boolean>();\n    @Output() public close = new EventEmitter<void>();\n    @Output() public toggleFav = new EventEmitter<void>();\n\n    public map_url = '';\n    public features: ViewerFeature[] = [];\n\n    public get level() {\n        return this._org.levelWithID([this.space?.zone.id]) || this.space?.zone;\n    }\n\n    public get building() {\n        return this._org.buildings.find(\n            (_) =>\n                this.space?.zone.id === _.id ||\n                this.space?.zone.parent_id === _.id\n        );\n    }\n\n    constructor(private _org: OrganisationService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.space && this.space) {\n            this._updateFeature();\n        }\n    }\n\n    private _updateFeature() {\n        this.map_url = this.level?.map_id;\n        this.features = [\n            {\n                location: this.space?.map_id,\n                content: MapPinComponent,\n            },\n        ];\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { take } from 'rxjs/operators';\nimport { ParkingSpaceFiltersComponent } from './parking-filters.component';\nimport { BookingFormService } from '../booking-form.service';\n\n@Component({\n    selector: `parking-space-filters-display`,\n    template: `\n        <section actions class=\"sm:hidden space-x-2 flex items-center p-2\">\n            <button\n                matRipple\n                filters\n                class=\"flex-1 w-1/2\"\n                (click)=\"editFilters()\"\n                i18n\n            >\n                Filters\n            </button>\n            <div class=\"flex items-center\">\n                <button\n                    matRipple\n                    map\n                    class=\"rounded-l rounded-r-none\"\n                    [class.inverse]=\"view !== 'map'\"\n                    (click)=\"view = 'map'; viewChange.emit(view)\"\n                    i18n\n                >\n                    Map\n                </button>\n                <button\n                    matRipple\n                    list\n                    class=\"rounded-r rounded-l-none\"\n                    [class.inverse]=\"view !== 'list'\"\n                    (click)=\"view = 'list'; viewChange.emit(view)\"\n                    i18n\n                >\n                    List\n                </button>\n            </div>\n        </section>\n        <section\n            filters\n            class=\"flex items-center flex-wrap p-2 w-[35rem] max-w-full sm:max-w-[35rem]\"\n        >\n            <div filter-item zone *ngIf=\"location\">\n                {{ location }}\n            </div>\n            <div filter-item date>\n                {{ start | date: 'mediumDate' }}\n            </div>\n            <div filter-item time>\n                {{ start | date: time_format }} &mdash;\n                {{ end | date: time_format }}\n            </div>\n            <div filter-item count i18n>\n                Min. {{ (options | async)?.capcaity || 2 }} People\n            </div>\n            <div filter-item *ngFor=\"let feat of (options | async)?.features\">\n                <p>{{ feat }}</p>\n                <button\n                    icon\n                    matRipple\n                    class=\"-mr-4\"\n                    (click)=\"removeFeature(feat)\"\n                >\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            [filter-item] {\n                display: flex;\n                align-items: center;\n                padding: 0 1rem;\n                height: 2rem;\n                font-size: 0.875rem;\n                border: 1px solid rgba(0, 0, 0, 0.2);\n                border-radius: 1.25rem;\n                margin-right: 0.5rem;\n                margin-bottom: 0.5rem;\n            }\n\n            [filter-item]:hover {\n                background: rgba(0, 0, 0, 0.1);\n            }\n\n            [filter-item] > * + * {\n                margin-left: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class ParkingSpaceFiltersDisplayComponent extends AsyncHandler {\n    @Input() public view: 'map' | 'list' = 'list';\n    @Output() public viewChange = new EventEmitter<'map' | 'list'>();\n    public readonly options = this._event_form.options;\n    public location: string = '';\n\n    public get start() {\n        return this._event_form.form.value.date;\n    }\n\n    public get end() {\n        const { date, duration } = this._event_form.form.value;\n        return date + duration * 60 * 1000;\n    }\n\n    public readonly editFilters = () =>\n        this._bsheet.open(ParkingSpaceFiltersComponent);\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _bsheet: MatBottomSheet,\n        private _event_form: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'opts',\n            this.options.subscribe(({ zone_id }) =>\n                this._updateLocation([zone_id]),\n            ),\n        );\n    }\n\n    public async removeFeature(feat: string) {\n        const value = await this._event_form.options.pipe(take(1)).toPromise();\n        this._event_form.setOptions({\n            ...value,\n            features: (value.features || []).filter((_) => _ !== feat),\n        });\n    }\n\n    private _updateLocation(zone_ids: string[] = []) {\n        const level = this._org.levelWithID(zone_ids);\n        const item = level || this._org.building;\n        this.location = item?.display_name || item?.name || '';\n    }\n}\n","import { Component, Input, Optional } from '@angular/core';\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\nimport { SettingsService } from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\nimport { map, take } from 'rxjs/operators';\nimport { BookingFormService } from '../booking-form.service';\nimport { addDays, endOfDay } from 'date-fns';\n\n@Component({\n    selector: `parking-space-filters`,\n    template: `\n        <div class=\"flex items-center border-b border-base-200 pb-2 sm:hidden\">\n            <div class=\"flex-1 pl-2\">\n                <button\n                    icon\n                    matRipple\n                    close\n                    *ngIf=\"can_close\"\n                    (click)=\"close()\"\n                >\n                    <app-icon>keyboard_arrow_left</app-icon>\n                </button>\n            </div>\n            <h3 class=\"font-medium flex-2 text-center\" i18n>Space Filters</h3>\n            <div class=\"flex-1\"></div>\n        </div>\n        <form\n            class=\"max-h-[65vh] p-2 overflow-y-auto overflow-x-hidden divide-y divide-base-200 w-full max-w-[100vw]\"\n            [formGroup]=\"form\"\n        >\n            <section details>\n                <h2 class=\"text-lg font-medium\" i18n>Details</h2>\n                <div class=\"flex-1 min-w-[256px] flex flex-col\">\n                    <label for=\"location\" i18n>Location</label>\n                    <ng-container *ngIf=\"!use_region\">\n                        <mat-form-field\n                            appearance=\"outline\"\n                            class=\"w-full\"\n                            *ngIf=\"(buildings | async)?.length > 1\"\n                        >\n                            <mat-select\n                                name=\"building\"\n                                [ngModel]=\"building | async\"\n                                (ngModelChange)=\"setBuilding($event)\"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                [placeholder]=\"\n                                    (building | async)?.display_name ||\n                                    (building | async)?.name\n                                \"\n                            >\n                                <mat-option\n                                    *ngFor=\"let bld of buildings | async\"\n                                    [value]=\"bld\"\n                                >\n                                    {{ bld.display_name || bld.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field\n                            appearance=\"outline\"\n                            class=\"w-full\"\n                            *ngIf=\"!hide_levels\"\n                        >\n                            <mat-select\n                                name=\"location\"\n                                [ngModel]=\"(options | async)?.zone_id\"\n                                (ngModelChange)=\"\n                                    setOptions({ zone_id: $event })\n                                \"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                placeholder=\"Any Level\"\n                                i18n-placeholder\n                            >\n                                <mat-option\n                                    *ngFor=\"let lvl of levels | async\"\n                                    [value]=\"lvl.id\"\n                                >\n                                    {{ lvl.display_name || lvl.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </ng-container>\n                    <ng-container *ngIf=\"use_region\">\n                        <mat-form-field\n                            appearance=\"outline\"\n                            class=\"w-full\"\n                            *ngIf=\"(regions | async)?.length\"\n                        >\n                            <mat-select\n                                name=\"region\"\n                                [ngModel]=\"region\"\n                                (ngModelChange)=\"setRegion($event)\"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                placeholder=\"Any Region\"\n                                i18n-placeholder\n                            >\n                                <mat-option\n                                    *ngFor=\"let reg of regions | async\"\n                                    [value]=\"reg\"\n                                >\n                                    {{ reg.display_name || reg.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field\n                            appearance=\"outline\"\n                            class=\"w-full\"\n                            *ngIf=\"!hide_levels\"\n                        >\n                            <mat-select\n                                name=\"location\"\n                                [ngModel]=\"(options | async)?.zone_id\"\n                                (ngModelChange)=\"\n                                    setOptions({ zone_id: $event })\n                                \"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                placeholder=\"Any Level\"\n                                i18n-placeholder\n                            >\n                                <mat-option [value]=\"\">Any Level</mat-option>\n                                <mat-optgroup\n                                    *ngFor=\"let bld of region_levels | async\"\n                                    [label]=\"bld.name\"\n                                >\n                                    <mat-option\n                                        [value]=\"level.id\"\n                                        *ngFor=\"let level of bld.levels\"\n                                    >\n                                        {{ level.display_name || level.name }}\n                                    </mat-option>\n                                </mat-optgroup>\n                            </mat-select>\n                        </mat-form-field>\n                    </ng-container>\n                </div>\n                <div class=\"flex-1 min-w-[256px]\">\n                    <label for=\"date\" i18n>Date<span>*</span></label>\n                    <a-date-field\n                        name=\"date\"\n                        [ngModel]=\"form.value.date\"\n                        (ngModelChange)=\"form.patchValue({ date: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        [to]=\"end_date\"\n                    >\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n                <div class=\"flex items-center space-x-2\" *ngIf=\"false\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n\n                            >Start Time<span>*</span></label\n                        >\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [use_24hr]=\"use_24hr\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"end-time\" i18n\n                            >End Time<span>*</span></label\n                        >\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form?.value?.date\"\n                            [max]=\"max_duration\"\n                            [use_24hr]=\"use_24hr\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n            </section>\n            <section favs class=\"space-y-2 pb-4\">\n                <h2 class=\"text-lg font-medium\" i18n>Favourites</h2>\n                <div class=\"flex items-center\">\n                    <div for=\"fav\" class=\"flex-1 w-1/2\" i18n>\n                        Only show favourite spaces\n                    </div>\n                    <mat-checkbox\n                        name=\"fav\"\n                        [ngModel]=\"(options | async)?.show_fav\"\n                        (ngModelChange)=\"setOptions({ show_fav: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    >\n                    </mat-checkbox>\n                </div>\n            </section>\n            <section\n                features\n                class=\"space-y-2\"\n                *ngIf=\"(features | async)?.length\"\n            >\n                <h2 class=\"text-lg font-medium\" i18n>Facilities</h2>\n                <div\n                    class=\"flex items-center\"\n                    *ngFor=\"let feat of features | async\"\n                >\n                    <div for=\"feat\" class=\"flex-1 w-1/2\">{{ feat }}</div>\n                    <mat-checkbox\n                        name=\"feat\"\n                        [ngModel]=\"(options | async)?.features?.includes(feat)\"\n                        (ngModelChange)=\"toggleFeature(feat, $event)\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></mat-checkbox>\n                </div>\n            </section>\n        </form>\n        <div\n            class=\"px-2 pt-2 w-full border-t border-base-200\"\n            *ngIf=\"can_close\"\n        >\n            <button btn matRipple close class=\"w-full\" (click)=\"close()\" i18n>\n                Apply Filters\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                max-width: 100vw;\n            }\n        `,\n    ],\n})\nexport class ParkingSpaceFiltersComponent {\n    @Input() public hide_levels: boolean;\n\n    public can_close = false;\n    public readonly options = this._form.options;\n\n    public readonly levels = this._org.active_levels.pipe(\n        map((l) => {\n            for (const lvl of l) {\n                const bld = this._org.buildings.find(\n                    (_) => _.id === lvl.parent_id,\n                );\n                (lvl as any).bld = bld?.display_name || bld?.name || '';\n            }\n            return l.filter((_) => _.tags.includes('parking'));\n        }),\n    );\n    public readonly buildings = this._org.active_buildings;\n    public readonly regions = this._org.region_list;\n    public readonly region_levels = this._org.active_region.pipe(\n        map((_) => {\n            const region_buildings = this._org.buildings.filter(\n                (b) => !_ || b.parent_id === _.id,\n            );\n            const region_levels = region_buildings.map((b) => ({\n                id: b.id,\n                name: b.display_name || b.name,\n                levels: this._org.levels.filter(\n                    (l) => l.parent_id === b.id && l.tags.includes('parking'),\n                ),\n            }));\n            return region_levels.filter((_) => _.levels.length);\n        }),\n    );\n    public readonly features = this._form.features;\n\n    public readonly close = () => this._bsheet_ref.dismiss();\n    public readonly setOptions = (o) => this._form.setOptions(o);\n    public readonly setRegion = (r) => (this._org.region = r);\n\n    public setBuilding(bld: Building) {\n        this._org.building = bld;\n    }\n\n    public get bld() {\n        return this._org.building;\n    }\n\n    public get form() {\n        return this._form.form;\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.parking.available_period') || 7,\n            ),\n        );\n    }\n\n    public get max_duration() {\n        return this._settings.get('app.events.max_duration') || 480;\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    constructor(\n        @Optional()\n        private _bsheet_ref: MatBottomSheetRef<ParkingSpaceFiltersComponent>,\n        private _settings: SettingsService,\n        private _form: BookingFormService,\n        private _org: OrganisationService,\n    ) {\n        this.can_close = !!this._bsheet_ref;\n    }\n\n    public async toggleFeature(feat: string, state: boolean) {\n        const { features } = await this.options.pipe(take(1)).toPromise();\n        const new_list = (features || []).filter((_) => feat !== _);\n        if (state) new_list.push(feat);\n        this.setOptions({ features: new_list });\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { EventFormService } from '@placeos/events';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BookingAsset, BookingFormService } from '../booking-form.service';\n\n@Component({\n    selector: `parking-space-list`,\n    template: `\n        <h3 class=\"font-bold\" i18n>Results</h3>\n        <p count class=\"text-sm opacity-60 mb-4\" i18n>\n            {{ (assets | async)?.length || 0 }} result(s) found\n        </p>\n        <ng-container *ngIf=\"!(loading | async); else load_state\">\n            <ul\n                class=\"list-style-none space-y-2\"\n                *ngIf=\"(assets | async)?.length; else empty_state\"\n            >\n                <li\n                    space\n                    *ngFor=\"let space of assets | async\"\n                    [class.!border-info]=\"active === space.id\"\n                    class=\"relative p-2 rounded-lg w-full shadow border bg-base-100 border-base-200\"\n                >\n                    <button\n                        matRipple\n                        select\n                        class=\"w-full h-full flex items-center\"\n                        (click)=\"selectSpace(space)\"\n                    >\n                        <div\n                            class=\"relative w-20 h-20 rounded-xl bg-base-200 mr-4 overflow-hidden flex items-center justify-center\"\n                        >\n                            <div\n                                class=\"absolute top-1 left-1 border border-neutral bg-base-200 rounded-full h-6 w-6 flex items-center justify-center text-white\"\n                                *ngIf=\"selected.includes(space.id)\"\n                            >\n                                <app-icon>done</app-icon>\n                            </div>\n                            <img\n                                auth\n                                *ngIf=\"space.images?.length; else placeholder\"\n                                class=\"object-cover h-full\"\n                                [source]=\"space.images[0]\"\n                            />\n                            <ng-template #placeholder>\n                                <img\n                                    class=\"m-auto\"\n                                    src=\"assets/icons/car-placeholder.svg\"\n                                />\n                            </ng-template>\n                        </div>\n                        <div class=\"space-y-2\">\n                            <div class=\"font-medium truncate mr-10\">\n                                {{ space.name || 'Meeting Space' }}\n                            </div>\n                            <div class=\"flex items-center text-sm space-x-2\">\n                                <app-icon class=\"text-info\">place</app-icon>\n                                <p>\n                                    {{\n                                        space.location ||\n                                            space.level?.display_name ||\n                                            space.level?.name ||\n                                            space.zone?.display_name ||\n                                            space.zone?.name\n                                    }}\n                                </p>\n                            </div>\n                            <div class=\"flex items-center text-sm space-x-2\">\n                                <app-icon class=\"text-info\">people</app-icon>\n                                <p i18n>\n                                    {{\n                                        space.capacity < 1 ? 2 : space.capacity\n                                    }}\n                                    People\n                                </p>\n                            </div>\n                        </div>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        fav\n                        class=\"absolute top-1 right-1\"\n                        [class.text-info]=\"isFavourite(space.id)\"\n                        (click)=\"toggleFav.emit(space)\"\n                    >\n                        <app-icon>{{\n                            isFavourite(space.id)\n                                ? 'favorite'\n                                : 'favorite_border'\n                        }}</app-icon>\n                    </button>\n                </li>\n            </ul>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                empty\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-30 text-center\" i18n>\n                    No available spaces for selected time and/or filters\n                </p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                loading\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p class=\"opacity-30\" i18n>Finding available spaces...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n                padding: 0.5rem;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class ParkingSpaceListComponent {\n    @Input() public active: string = '';\n    @Input() public selected: string = '';\n    @Input() public favorites: string[] = [];\n    @Output() public onSelect = new EventEmitter<BookingAsset>();\n    @Output() public toggleFav = new EventEmitter<BookingAsset>();\n\n    public readonly assets = combineLatest([\n        this._form.options,\n        this._form.available_resources,\n    ]).pipe(\n        map(([{ show_fav }, _]) =>\n            _.filter((i) => !show_fav || this.isFavourite(i.id))\n        )\n    );\n    public readonly loading = this._form.loading;\n\n    constructor(private _form: BookingFormService) {}\n\n    public isFavourite(space_id: string) {\n        return this.favorites.includes(space_id);\n    }\n\n    public selectSpace(space: BookingAsset) {\n        this.onSelect.emit(space);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\n\n@Component({\n    selector: 'parking-space-location-pin',\n    template: `\n        <div class=\"absolute bottom-0 left-1/2 -translate-x-1/2\">\n            <svg\n                width=\"66\"\n                height=\"80\"\n                viewBox=\"0 0 66 80\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <g filter=\"url(#filter0_d_1065_10313)\">\n                    <path\n                        d=\"M19.724 53.0408C25.0871 60.3435 30.5582 65.8583 31.0184 66.3178C31.4558 66.755 32.0489 67.0007 32.6674 67.0008H32.6678C33.2863 67.0007 33.8795 66.755 34.3169 66.3178C34.7771 65.8583 40.2481 60.3435 45.6112 53.0408C48.2928 49.3894 50.963 45.2701 52.9663 41.0957C54.9629 36.935 56.3331 32.6459 56.3342 28.6724C56.364 25.5564 55.7725 22.4657 54.5941 19.5809C53.415 16.6946 51.6722 14.0724 49.4675 11.8677C47.2629 9.66308 44.6407 7.92024 41.7544 6.74121C38.8711 5.5634 35.782 4.97184 32.6676 5.00103C29.5533 4.97184 26.4642 5.5634 23.5809 6.74121C20.6946 7.92024 18.0724 9.66308 15.8677 11.8677C13.6631 14.0724 11.9202 16.6946 10.7412 19.5809C9.56278 22.4657 8.97122 25.5565 9.00108 28.6726C9.0022 32.646 10.3724 36.9351 12.369 41.0957C14.3723 45.2701 17.0425 49.3894 19.724 53.0408Z\"\n                        fill=\"#309251\"\n                        stroke=\"#0B421D\"\n                        stroke-width=\"2\"\n                    />\n                </g>\n                <defs>\n                    <filter\n                        id=\"filter0_d_1065_10313\"\n                        x=\"0\"\n                        y=\"0\"\n                        width=\"65.3353\"\n                        height=\"80.001\"\n                        filterUnits=\"userSpaceOnUse\"\n                        color-interpolation-filters=\"sRGB\"\n                    >\n                        <feFlood\n                            flood-opacity=\"0\"\n                            result=\"BackgroundImageFix\"\n                        />\n                        <feColorMatrix\n                            in=\"SourceAlpha\"\n                            type=\"matrix\"\n                            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n                            result=\"hardAlpha\"\n                        />\n                        <feOffset dy=\"4\" />\n                        <feGaussianBlur stdDeviation=\"4\" />\n                        <feComposite in2=\"hardAlpha\" operator=\"out\" />\n                        <feColorMatrix\n                            type=\"matrix\"\n                            values=\"0 0 0 0 0.0196078 0 0 0 0 0.109804 0 0 0 0 0.172549 0 0 0 0.2 0\"\n                        />\n                        <feBlend\n                            mode=\"normal\"\n                            in2=\"BackgroundImageFix\"\n                            result=\"effect1_dropShadow_1065_10313\"\n                        />\n                        <feBlend\n                            mode=\"normal\"\n                            in=\"SourceGraphic\"\n                            in2=\"effect1_dropShadow_1065_10313\"\n                            result=\"shape\"\n                        />\n                    </filter>\n                </defs>\n            </svg>\n            <div\n                class=\"absolute top-0 left-0 w-full h-3/4 flex items-center justify-center\"\n            >\n                <div\n                    class=\"relative z-10 h-4 w-4 rounded-full bg-base-100 border-2 border-[#0B421D]\"\n                    *ngIf=\"!selected\"\n                ></div>\n                <app-icon\n                    class=\"relative text-white z-10 text-2xl\"\n                    *ngIf=\"selected\"\n                >\n                    done\n                </app-icon>\n            </div>\n        </div>\n    `,\n    styles: [],\n})\nexport class ParkingSpaceLocationPinComponent {\n    public get selected() {\n        return this._data.selected === true;\n    }\n    constructor(@Inject(MAP_FEATURE_DATA) private _data: any) {}\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AsyncHandler, unique } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\nimport { BuildingLevel } from '@placeos/organisation';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { BookingAsset } from '../booking-form.service';\nimport { ParkingSpaceLocationPinComponent } from './parking-location-pin.component';\nimport { MapsPeopleService } from 'libs/common/src/lib/mapspeople.service';\n\n@Component({\n    selector: `parking-space-map`,\n    template: `\n        <ng-container *ngIf=\"is_displayed\">\n            <interactive-map\n                [src]=\"map_url\"\n                [(zoom)]=\"zoom\"\n                [(center)]=\"center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n                [options]=\"{ controls: true }\"\n            ></interactive-map>\n        </ng-container>\n        <div\n            class=\"absolute inset-x-0 top-0 bg-base-100 p-2 border-b border-base-200\"\n        >\n            <mat-form-field\n                levels\n                appearance=\"outline\"\n                class=\"w-full h-[3.25rem]\"\n            >\n                <mat-select\n                    [(ngModel)]=\"level\"\n                    (ngModelChange)=\"setLevel($event)\"\n                >\n                    <mat-option\n                        *ngFor=\"let opt of levels | async\"\n                        [value]=\"opt\"\n                    >\n                        {{ opt.display_name || opt.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                background: rgba(0, 0, 0, 0.05);\n                padding-top: 4rem;\n            }\n\n            button {\n                border-radius: 0;\n            }\n        `,\n    ],\n})\nexport class ParkingSpaceSelectMapComponent extends AsyncHandler {\n    @Input() public selected: string[] = [];\n    @Input() public is_displayed: boolean = false;\n    @Output() public onSelect = new EventEmitter<BookingAsset>();\n\n    public zoom = 1;\n    public center = { x: 0.5, y: 0.5 };\n\n    private _seletedSpace = (s) => () => this.onSelect.emit(s);\n    public level: BuildingLevel = null;\n\n    public get map_url() {\n        return this.level?.map_id || '';\n    }\n\n    public readonly levels = this._event_form.available_spaces.pipe(\n        map((_) => unique(_.map(({ level }) => level)))\n    );\n\n    public readonly features = this._event_form.available_spaces.pipe(\n        debounceTime(1000),\n        map((l) =>\n            l.map((space) => ({\n                location: space.map_id,\n                content: ParkingSpaceLocationPinComponent,\n                data: {\n                    ...space,\n                    selected: this.selected.includes(space.id),\n                },\n            }))\n        )\n    );\n\n    public readonly actions = this._event_form.available_spaces.pipe(\n        map((l) =>\n            l.map((space) => ({\n                id: space.map_id,\n                action: ['touchend', 'mouseup'],\n                callback: this._seletedSpace(space),\n            }))\n        )\n    );\n\n    constructor(\n        private _event_form: EventFormService,\n        private _maps_people: MapsPeopleService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'spaces',\n            this._event_form.available_spaces.subscribe((_) => {\n                if (!this.level && _.length) this.level = _[0].level;\n            })\n        );\n    }\n\n    public setLevel(level: BuildingLevel) {\n        this.level = level;\n        this._maps_people.setCustomZone(level.parent_id);\n    }\n\n    public setZoom(new_zoom: number) {\n        this.zoom = Math.max(0.5, Math.min(10, new_zoom));\n    }\n\n    public resetMap() {\n        this.zoom = 1;\n        this.center = { x: 0.5, y: 0.5 };\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from '@placeos/common';\nimport {\n    BookingAsset,\n    BookingFlowOptions,\n    BookingFormService,\n} from '../booking-form.service';\n\nexport const FAV_PARKING_KEY = 'favourite_parking_spaces';\n\n@Component({\n    selector: 'parking-space-select-modal',\n    template: `\n        <div\n            class=\"w-[100vw] h-[100vh] sm:relative sm:w-auto sm:h-auto flex flex-col bg-base-100\"\n        >\n            <header class=\"flex items-center space-x-4 w-full\">\n                <button icon matRipple mat-dialog-close class=\"bg-base-200\">\n                    <app-icon>close</app-icon>\n                </button>\n                <h3 i18n>Find Parking Space</h3>\n            </header>\n            <main\n                class=\"flex-1 flex items-center divide-x divide-base-200 min-h-[65vh] h-[65vh] sm:max-h-[65vh] sm:max-w-[95vw] w-full overflow-hidden\"\n            >\n                <parking-space-filters\n                    class=\"h-full hidden sm:flex max-w-[20rem] sm:h-[65vh] sm:max-h-full\"\n                    [hide_levels]=\"view !== 'list'\"\n                ></parking-space-filters>\n                <div\n                    class=\"flex flex-col items-center flex-1 w-1/2 h-full sm:h-[65vh]\"\n                >\n                    <parking-space-filters-display\n                        class=\"w-full border-b border-base-200\"\n                        [(view)]=\"view\"\n                    ></parking-space-filters-display>\n                    <parking-space-list\n                        *ngIf=\"view === 'list'; else map_view\"\n                        [active]=\"displayed?.id\"\n                        [selected]=\"selected_ids\"\n                        [favorites]=\"favorites\"\n                        (toggleFav)=\"toggleFavourite($event)\"\n                        (onSelect)=\"displayed = $event\"\n                        class=\"flex-1 h-1/2 bg-base-200\"\n                    ></parking-space-list>\n                </div>\n                <parking-space-details\n                    [space]=\"displayed\"\n                    class=\"h-full w-full sm:h-[65vh] absolute sm:relative sm:flex sm:max-w-[20rem] z-20 bg-base-100 block\"\n                    [class.hidden]=\"!displayed\"\n                    [class.inset-0]=\"displayed\"\n                    [active]=\"selected_ids.includes(displayed?.id)\"\n                    (activeChange)=\"setSelected(displayed, $event)\"\n                    [fav]=\"displayed && this.favorites.includes(displayed?.id)\"\n                    (toggleFav)=\"toggleFavourite(displayed)\"\n                    (close)=\"displayed = null\"\n                ></parking-space-details>\n            </main>\n            <footer\n                class=\"flex sm:hidden flex-col-reverse items-center justify-end p-2 border-t border-base-200 w-full\"\n            >\n                <button\n                    btn\n                    matRipple\n                    return\n                    class=\"inverse sm:hidden w-full\"\n                    *ngIf=\"displayed\"\n                    (click)=\"displayed = null\"\n                    i18n\n                >\n                    Back\n                </button>\n                <button\n                    btn\n                    matRipple\n                    save\n                    [mat-dialog-close]=\"selected\"\n                    [class.mb-2]=\"displayed\"\n                    class=\"w-full sm:w-32 sm:mb-0\"\n                    i18n\n                >\n                    View List\n                </button>\n            </footer>\n            <footer\n                class=\"hidden sm:flex items-center justify-between p-2 border-t border-base-200 w-full\"\n            >\n                <button\n                    btn\n                    matRipple\n                    [mat-dialog-close]=\"selected\"\n                    class=\"clear text-secondary\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">arrow_back</app-icon>\n                        <div class=\"mr-1 underline\" i18n>Back to form</div>\n                    </div>\n                </button>\n                <p class=\"opacity-60 text-sm\" i18n>\n                    {{ selected.length }} bay(s) added\n                </p>\n                <button\n                    btn\n                    matRipple\n                    [disabled]=\"!displayed\"\n                    [class.inverse]=\"isSelected(displayed?.id)\"\n                    (click)=\"setSelected(displayed, !isSelected(displayed?.id))\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">{{\n                            isSelected(displayed?.id) ? 'remove' : 'add'\n                        }}</app-icon>\n                        <div class=\"mr-1\">\n                            {{\n                                isSelected(displayed?.id)\n                                    ? 'Remove from Booking'\n                                    : 'Add to booking'\n                            }}\n                        </div>\n                    </div>\n                </button>\n            </footer>\n        </div>\n        <ng-template #map_view>\n            <parking-space-map\n                class=\"flex-1 h-1/2 w-full\"\n                [selected]=\"selected_ids\"\n                [is_displayed]=\"!!displayed\"\n                (onSelect)=\"displayed = $event\"\n            >\n            </parking-space-map>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceSelectModalComponent {\n    public displayed?: BookingAsset;\n    public selected: BookingAsset[] = [];\n    public view = 'list';\n\n    public get selected_ids() {\n        return this.selected.map((_) => _.id).join(',');\n    }\n\n    public get favorites() {\n        return this._settings.get<string[]>(FAV_PARKING_KEY) || [];\n    }\n\n    constructor(\n        private _dialog_ref: MatDialogRef<ParkingSpaceSelectModalComponent>,\n        private _settings: SettingsService,\n        private _event_form: BookingFormService,\n        @Inject(MAT_DIALOG_DATA)\n        private _data: {\n            spaces: BookingAsset[];\n            options: Partial<BookingFlowOptions>;\n        }\n    ) {\n        this.selected = [...(_data.spaces || [])];\n        this._event_form.setOptions(_data.options);\n    }\n\n    public isSelected(id: string) {\n        return id && this.selected_ids.includes(id);\n    }\n\n    public setSelected(item: BookingAsset, state: boolean) {\n        const list = this.selected.filter((_) => _.id !== item.id);\n        if (state) list.push(item);\n        this.selected = list;\n        if (!this._data.options.group && state) this._dialog_ref.close([item]);\n    }\n\n    public toggleFavourite(item: BookingAsset) {\n        const fav_list = this.favorites;\n        const new_state = !fav_list.includes(item.id);\n        if (new_state) {\n            this._settings.saveUserSetting(FAV_PARKING_KEY, [\n                ...fav_list,\n                item.id,\n            ]);\n        } else {\n            this._settings.saveUserSetting(\n                FAV_PARKING_KEY,\n                fav_list.filter((_) => _ !== item.id)\n            );\n        }\n    }\n}\n","import { Component, Input, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport { BookingAsset } from './booking-form.service';\nimport {\n    FAV_PARKING_KEY,\n    ParkingSpaceSelectModalComponent,\n} from './parking-select-modal/parking-select-modal.component';\n\nconst EMPTY_FAVS: string[] = [];\n\n@Component({\n    selector: `parking-space-list-field`,\n    template: `\n        <div list class=\"space-y-2\">\n            <div\n                space\n                class=\"relative p-2 rounded-lg w-full flex items-center shadow border border-base-200\"\n                *ngFor=\"let space of spaces\"\n            >\n                <div\n                    class=\"w-24 h-24 rounded-xl bg-base-200 mr-4 overflow-hidden flex items-center justify-center\"\n                >\n                    <img\n                        auth\n                        *ngIf=\"space.images?.length; else placeholder\"\n                        class=\"object-cover h-full\"\n                        [source]=\"space.images[0]\"\n                    />\n                    <ng-template #placeholder>\n                        <img\n                            class=\"m-auto\"\n                            src=\"assets/icons/car-placeholder.svg\"\n                        />\n                    </ng-template>\n                </div>\n                <div class=\"space-y-2 pb-4\">\n                    <div class=\"font-medium\">\n                        {{ space.name || 'Meeting Resource' }}\n                    </div>\n                    <div class=\"flex items-center text-sm space-x-2\">\n                        <app-icon class=\"text-blue-500\">place</app-icon>\n                        <p>\n                            {{\n                                space.location ||\n                                    space.level?.display_name ||\n                                    space.level?.name ||\n                                    space.zone?.display_name ||\n                                    space.zone?.name\n                            }}\n                        </p>\n                    </div>\n                    <div class=\"flex items-center text-sm space-x-2\">\n                        <app-icon class=\"text-blue-500\">people</app-icon>\n                        <p i18n>\n                            {{ space.capacity < 1 ? 2 : space.capacity || 1 }} {\n                            (space.capacity < 1 ? 2 : space.capacity || 1),\n                            plural, =1 { Person } other { People } }\n                        </p>\n                    </div>\n                    <div\n                        class=\"absolute bottom-0 right-0 flex items-center justify-end text-xs\"\n                    >\n                        <button\n                            btn\n                            matRipple\n                            edit-space\n                            class=\"clear\"\n                            (click)=\"changeResources(space)\"\n                        >\n                            <div class=\"flex items-center space-x-2\" i18n>\n                                <app-icon class=\"text-2xl\">edit</app-icon>\n                                <div>Change</div>\n                            </div>\n                        </button>\n                        <button\n                            btn\n                            matRipple\n                            remove-space\n                            class=\"clear\"\n                            (click)=\"removeResource(space)\"\n                        >\n                            <div class=\"flex items-center space-x-2\" i18n>\n                                <app-icon class=\"text-2xl\">close</app-icon>\n                                <div>Remove</div>\n                            </div>\n                        </button>\n                    </div>\n                </div>\n                <button\n                    icon\n                    matRipple\n                    fav\n                    class=\"absolute top-1 right-1\"\n                    [class.text-blue-400]=\"favorites.includes(asset?.id)\"\n                    (click)=\"toggleFavourite(asset)\"\n                >\n                    <app-icon>{{\n                        favorites.includes(asset?.id)\n                            ? 'favorite'\n                            : 'favorite_border'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <button\n            btn\n            matRipple\n            add-space\n            class=\"w-full inverse mt-2\"\n            (click)=\"changeResources()\"\n        >\n            <div class=\"flex items-center justify-center space-x-2\">\n                <app-icon class=\"text-2xl\">search</app-icon>\n                <span i18n>Add Parking Resource</span>\n            </div>\n        </button>\n        <div class=\"flex items-center flex-wrap sm:space-x-2 mb-2\">\n            <div class=\"flex-1 min-w-[256px] space-y-2\"></div>\n        </div>\n    `,\n    styles: [``],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ParkingSpaceListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class ParkingSpaceListFieldComponent implements ControlValueAccessor {\n    @Input() public disable_date = false;\n    public room_size = 3;\n    public spaces: BookingAsset[] = [];\n    public disabled = false;\n\n    private _onChange: (_: BookingAsset[]) => void;\n    private _onTouch: (_: BookingAsset[]) => void;\n\n    public get favorites() {\n        return this._settings.get<string[]>('favourite_spaces') || EMPTY_FAVS;\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {}\n\n    /** Add or edit selected spaces */\n    public changeResources() {\n        const ref = this._dialog.open(ParkingSpaceSelectModalComponent, {\n            data: {\n                spaces: this.spaces,\n                options: {\n                    capacity: this.room_size,\n                    disable_date: this.disable_date,\n                },\n            },\n        });\n        ref.afterClosed().subscribe((spaces?: BookingAsset[]) => {\n            if (!spaces) return;\n            this.setValue(spaces);\n        });\n    }\n\n    /** Remove the selected space from the list */\n    public removeResource(space: BookingAsset) {\n        this.setValue(this.spaces.filter((_) => _.id !== space.id));\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: BookingAsset[]) {\n        this.spaces = new_value;\n        if (this._onChange) this._onChange(this.spaces);\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: BookingAsset[]) {\n        this.spaces = value || [];\n    }\n\n    /* istanbul ignore next */\n    public readonly registerOnChange = (fn: (_: BookingAsset[]) => void) =>\n        (this._onChange = fn);\n    /* istanbul ignore next */\n    public readonly registerOnTouched = (fn: (_: BookingAsset[]) => void) =>\n        (this._onTouch = fn);\n    public readonly setDisabledState = (s: boolean) => (this.disabled = s);\n\n    public toggleFavourite(space: BookingAsset) {\n        const fav_list = this.favorites;\n        const new_state = !fav_list.includes(space.id);\n        if (new_state) {\n            this._settings.saveUserSetting(FAV_PARKING_KEY, [\n                ...fav_list,\n                space.id,\n            ]);\n        } else {\n            this._settings.saveUserSetting(\n                FAV_PARKING_KEY,\n                fav_list.filter((_) => _ !== space.id)\n            );\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    AsyncHandler,\n    SettingsService,\n    currentUser,\n    flatten,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, forkJoin, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { queryBookings } from './bookings.fn';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    name: string;\n    email: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n    deny: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingService extends AsyncHandler {\n    private _loading = new BehaviorSubject<string[]>([]);\n\n    public readonly loading =\n        this._loading.asObservable(); /** List of available parking levels for the current building */\n    public levels = this._org.level_list.pipe(\n        map((_) => {\n            if (!this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = _.filter(\n                    (lvl) =>\n                        bld_ids.includes(lvl.parent_id) &&\n                        lvl.tags.includes('parking'),\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return _.filter(\n                (lvl) =>\n                    lvl.parent_id === this._org.building.id &&\n                    lvl.tags.includes('parking'),\n            );\n        }),\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([this.levels]).pipe(\n        filter(([lvls]) => !!lvls[0]?.id),\n        switchMap(([levels]) => {\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return forkJoin(\n                levels.map((lvl) =>\n                    showMetadata(lvl.id, 'parking-spaces').pipe(\n                        map(\n                            (d) =>\n                                (d.details instanceof Array\n                                    ? d.details\n                                    : []\n                                ).map((s) => ({\n                                    ...s,\n                                    zone_id: lvl.id,\n                                })) as ParkingSpace[],\n                        ),\n                    ),\n                ),\n            );\n        }),\n        map((list) => flatten<ParkingSpace>(list)),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([this._org.active_building]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[],\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users'),\n            ),\n        ),\n        shareReplay(1),\n    );\n\n    public readonly assigned_space = this.spaces.pipe(\n        map((list) =>\n            list.find(\n                (_) =>\n                    _.assigned_to?.toLowerCase() ===\n                    currentUser().email?.toLowerCase(),\n            ),\n        ),\n    );\n\n    public readonly user_details = this.users.pipe(\n        map((list) =>\n            list.find(\n                (_) =>\n                    _.email?.toLowerCase() ===\n                    currentUser().email?.toLowerCase(),\n            ),\n        ),\n    );\n\n    public readonly deny_parking_access = this.user_details.pipe(\n        map((details) => !!details?.deny),\n    );\n\n    public readonly booked_space = combineLatest([\n        this._org.active_building,\n        this.spaces,\n    ]).pipe(\n        map(([_, spaces]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'parking',\n            }).pipe(\n                catchError(() => of([])),\n                map((booking_list) =>\n                    booking_list\n                        .map((booking) =>\n                            spaces.find(\n                                (space) => space.id === booking.asset_id,\n                            ),\n                        )\n                        .filter((space) => !!space),\n                ),\n            ),\n        ),\n        map((_) => _[0]),\n        shareReplay(1),\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {\n        super();\n        this.subscription('spaces', this.assigned_space.subscribe());\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\n\nimport { MAP_FEATURE_DATA } from 'libs/components/src/lib/interactive-map.component';\n\nexport interface DeskInfoData {\n    id: string;\n    map_id: string;\n    user: string;\n    name: string;\n    start?: number;\n    end?: number;\n    department?: string;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            customTooltip\n            [content]=\"desk_tooltip\"\n            [backdrop]=\"false\"\n            [xPosition]=\"'center'\"\n            [yPosition]=\"'center'\"\n            [hover]=\"true\"\n            [delay]=\"3000\"\n            class=\"h-full w-full pointer-events-auto relative z-20\"\n            [attr.id]=\"id\"\n            [attr.map_id]=\"map_id\"\n        ></div>\n        <ng-template #desk_tooltip>\n            <div\n                name=\"space-info\"\n                [id]=\"map_id\"\n                [class]=\"\n                    'absolute rounded bg-base-100 p-4 top-0 left-0 shadow pointer-events-none ' +\n                    x_pos +\n                    ' ' +\n                    y_pos\n                \"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <h4 map-id class=\"m-0 font-medium\">\n                        {{ name || map_id || id }}\n                    </h4>\n                    <p user class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                    <p user class=\"mt-1 text-sm\" *ngIf=\"user && department\">\n                        {{ department }}\n                    </p>\n                    <p start class=\"mt-1 text-sm\" *ngIf=\"start\">\n                        {{ start | date: 'shortTime' }} &ndash;\n                        {{ end | date: 'shortTime' }}\n                    </p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly id = this._details.id;\n    public readonly map_id = this._details.map_id;\n    public readonly name = this._details.name;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n    public readonly status = this._details.status;\n    public readonly department = this._details.department;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeskInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent =\n                this._element.nativeElement.parentElement?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Component, ElementRef, Inject } from '@angular/core';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { Locker, LockerBank } from 'libs/bookings/src/lib/lockers.service';\nimport { ExploreLockerBankModalComponent } from './explore-locker-bank-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface LockerBankInfoData {\n    bank: LockerBank;\n    lockers: Locker[];\n    in_use_count: number;\n    locker_count: number;\n}\n\n@Component({\n    selector: 'explore-locker-bank-info',\n    template: `\n        <button\n            class=\"h-full w-full pointer-events-auto relative\"\n            (click)=\"openBankModal()\"\n        >\n            <div\n                customTooltip\n                [content]=\"desk_tooltip\"\n                [backdrop]=\"false\"\n                [xPosition]=\"'center'\"\n                [yPosition]=\"'center'\"\n                [hover]=\"true\"\n                [delay]=\"3000\"\n                class=\"h-full w-full pointer-events-auto relative\"\n            ></div>\n        </button>\n        <ng-template #desk_tooltip>\n            <div\n                name=\"space-info\"\n                [id]=\"map_id\"\n                [class]=\"\n                    'absolute rounded bg-base-100 p-4 top-0 left-0 shadow pointer-events-none ' +\n                    x_pos +\n                    ' ' +\n                    y_pos\n                \"\n            >\n                <h3 class=\"font-medium\">{{ bank.name }}</h3>\n                <p class=\"whitespace-nowrap text-sm\">\n                    {{ in_use_count }} lockers in use of\n                    {{ bank.lockers.length || 1 }}\n                </p>\n            </div></ng-template\n        >\n    `,\n    styles: [``],\n})\nexport class ExploreLockerBankInfoComponent {\n    public bank: LockerBank = this._details.bank;\n    public in_use_count: number = this._details.in_use_count;\n    public y_pos: 'top' | 'bottom';\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: LockerBankInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent =\n                this._element.nativeElement.parentElement?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public openBankModal() {\n        this._dialog.open(ExploreLockerBankModalComponent, {\n            data: { ...this._details },\n        });\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    Locker,\n    LockerBank,\n    LockersService,\n} from 'libs/bookings/src/lib/lockers.service';\n\nexport interface LockerBankModalData {\n    bank: LockerBank;\n    lockers: Locker[];\n}\n\n@Component({\n    selector: 'explore-locker-bank-modal',\n    template: `\n        <header>\n            <h2 class=\"text-xl font-medium\">{{ bank.name }}</h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"h-[65vh] overflow-hidden\">\n            <locker-grid [bank]=\"bank\" [bank_status]=\"lockers\"></locker-grid>\n        </main>\n    `,\n    styles: [``],\n})\nexport class ExploreLockerBankModalComponent {\n    public readonly bank = this._data.bank;\n    public readonly lockers = this._data.lockers.reduce((map, l) => {\n        map[l.id] = 'busy';\n        return map;\n    }, {});\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: LockerBankModalData) {}\n}\n"],"x_google_ignoreList":[]}