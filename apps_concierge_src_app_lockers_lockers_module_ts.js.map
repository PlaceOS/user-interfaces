{"version":3,"file":"apps_concierge_src_app_lockers_lockers_module_ts.js","mappings":"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","names":["LockersStateService","AsyncHandler","nextPage","this","_call_next_page","next","Date","now","constructor","_org","_dialog","super","_filters","BehaviorSubject","_locker_bookings","_loading","loading","asObservable","filters","_next_page","Subject","_all_zones_keys","setup_paging","combineLatest","initialised","pipe","debounceTime","tap","loaded","date","zones","some","z","includes","building","id","queryPagedBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","join","include_checked_out","paged_bookings","distinctUntilChanged","a","b","switchMap","next_page","action","map","data","reset","of","total","scan","acc","list","_","shareReplay","has_more_pages","length","bookings","i","subscribe","setFilters","levelsForBuilding","lvl","getValue","refresh","timeout","checkinLocker","locker","state","_asyncToGenerator","console","log","status","checkinBooking","toPromise","catch","failed","error","notifyError","notifySuccess","user_name","approveLocker","approveBooking","format","approved","rejected","rejectLocker","rejectBooking","giveAccess","_this","success","saveBooking","Booking","access","rejectAllLockers","_this2","notifyInfo","resp","openConfirmModal","title","content","icon","class","reason","Promise","all","close","static","t","i0","i1","i2","core","Yz7","factory","ɵfac","providedIn","level_r3","display_name","name","_r5","ctx_r4","manageRestrictions","LockersTopbarComponent","_lockers","_route","_router","levels","active_levels","manage","is_map","setDate","o","updateZones","navigate","relativeTo","queryParams","zone_ids","queryParamsHandling","ngOnInit","first","subscription","queryParamMap","params","has","get","split","level","levelWithID","buildings","find","bld","parent_id","approve","reject","url","events","_ref","take","filter","zone","push","_x","apply","arguments","open","BookingRulesModalComponent","booking","showBooking","_this3","i3","i4","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","LockersTopbarComponent_mat_option_5_Template","LockersTopbarComponent_mat_option_6_Template","LockersTopbarComponent_button_8_Template","search","tmp_4_0","LockersComponent","_state","e","NavigationEnd","url_parts","path","parts","ngOnDestroy","attrs","_c0","LockersComponent_mat_progress_bar_13_Template","_c1","_c2","_c3","date_r14","row_r15","ctx_r18","time_format","end","LockerBookingsComponent_ng_template_7_ng_container_0_ng_container_1_Template","LockerBookingsComponent_ng_template_7_ng_container_0_ng_container_2_Template","all_day","LockerBookingsComponent_ng_template_7_ng_container_0_Template","LockerBookingsComponent_ng_template_7_ng_container_1_Template","deleted","row_r22","asset_name","asset_id","row_r23","user_email","LockerBookingsComponent_ng_template_11_div_3_Template","booked_by_name","booked_by_email","row_r26","_r29","row","ctx_r28","ctx_r30","_r27","row_r32","_r35","ctx_r34","checkin","ctx_r36","data_r31","_r33","_r38","ctx_r37","loadMore","LockerBookingsComponent","_settings","duration","rejectAll","d","s","runMethod","checked_in","fn","LockerBookingsComponent_ng_template_5_Template","LockerBookingsComponent_ng_template_7_Template","LockerBookingsComponent_ng_template_9_Template","LockerBookingsComponent_ng_template_11_Template","LockerBookingsComponent_ng_template_13_Template","LockerBookingsComponent_ng_template_15_Template","LockerBookingsComponent_button_17_Template","tmp_1_0","_r7","_r1","_r3","_r9","_r11","tmp_6_0","_r13","level_r4","_r6","ctx_r5","ctx_r7","ctx_r1","ctx_r8","ROUTES","component","NewLockersComponent","NewLockersComponent_mat_option_14_Template","NewLockersComponent_ng_container_18_Template","NewLockersComponent_ng_container_19_Template","NewLockersComponent_mat_progress_bar_22_Template","tmp_0_0","children","redirectTo","LockersModule","oAB","cJS","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","SharedBookingsModule","FormFieldsModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/lockers/locker-state.service.ts","./apps/concierge/src/app/lockers/locker-topbar.component.ts","./apps/concierge/src/app/lockers/lockers.component.ts","./apps/concierge/src/app/lockers/locker-bookings.component.ts","./apps/concierge/src/app/lockers/new-lockers.component.ts","./apps/concierge/src/app/lockers/lockers.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n    scan,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\nimport { add, endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryBookings,\n    queryPagedBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport {\n    next,\n    QueryResponse,\n} from '@placeos/ts-client/dist/esm/resources/functions';\n\nfunction addQRCodeToBooking(booking: Booking): Booking {\n    return new Booking({\n        ...booking,\n        extension_data: {\n            ...booking.extension_data,\n            checkin_qr_code: generateQRCode(\n                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                    booking.asset_id\n                )}`\n            ),\n        },\n    });\n}\n\nexport interface LockerFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LockersStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<LockerFilters>({});\n    // private _new_lockers = new BehaviorSubject<Locker[]>([]);\n    private _locker_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    // public readonly new_lockers = this._new_lockers.asObservable();\n\n    // public get new_locker_count() {\n    //     return this._new_lockers.getValue()?.length || 0;\n    // }\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    // public readonly lockers: Observable<Locker[]> = this._filters.pipe(\n    //     debounceTime(500),\n    //     switchMap((filters) => {\n    //         const zones = filters.zones || [];\n    //         return zones && !zones.includes('All')\n    //             ? showMetadata(zones[0], 'lockers').pipe(map((m) => m.details))\n    //             : listChildMetadata(this._org.building?.id, {\n    //                   name: 'lockers',\n    //               }).pipe(\n    //                   map((m) =>\n    //                       m\n    //                           .map((i) => i.metadata.lockers.details)\n    //                           .reduce((c: any[], i: any[]) => [...c, ...i], [])\n    //                   )\n    //               );\n    //     }),\n    //     catchError((_) => []),\n    //     map((list) => {\n    //         if (!(list instanceof Array)) list = [];\n    //         list.sort((a, b) => a.name?.localeCompare(b.name));\n    //         return list.map((i) => new Locker({ ...i, qr_code: '' }));\n    //     }),\n    //     shareReplay(1)\n    // );\n\n    private _next_page = new Subject<() => QueryResponse<Booking>>();\n    private _call_next_page = new Subject<string>();\n    private _all_zones_keys = ['All', -1, '-1'];\n    public readonly setup_paging = combineLatest([\n        this._filters,\n        this._org.initialised,\n    ]).pipe(\n        debounceTime(500),\n        tap(([filters, loaded]) => {\n            if (!loaded) return;\n            const date = filters.date || Date.now();\n            const zones =\n                !filters.zones ||\n                filters.zones.some((z) => this._all_zones_keys.includes(z))\n                    ? [this._org.building.id]\n                    : filters.zones;\n            this._next_page.next(() =>\n                queryPagedBookings({\n                    period_start: getUnixTime(startOfDay(date)),\n                    period_end: getUnixTime(endOfDay(date)),\n                    type: 'locker',\n                    zones: zones.join(','),\n                    include_checked_out: true,\n                })\n            );\n            this._call_next_page.next(`RESET_${Date.now()}`);\n        })\n    );\n\n    public readonly paged_bookings = combineLatest([\n        this._next_page,\n        this._call_next_page,\n    ]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        switchMap(([next_page, action]) => {\n            this._loading.next(true);\n            if (!next_page) {\n                return of({\n                    data: [],\n                    total: 0,\n                    next: null,\n                    reset: action.includes('RESET'),\n                });\n            }\n            // If reset is true, start over\n            if (action.includes('RESET')) {\n                return next_page().pipe(\n                    map((data: any) => ({ ...data, reset: true }))\n                );\n            }\n            return next_page().pipe(\n                map((data: any) => ({ ...data, reset: false }))\n            );\n        }),\n        scan(\n            (acc, { data, total, next, reset }) => {\n                const list = data;\n                this._next_page.next(next); // Set the next page function\n                if (reset) return { list, total }; // Reset the items array\n                return {\n                    list: [...acc.list, ...list],\n                    total,\n                };\n            },\n            { list: [], total: 0 }\n        ),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly has_more_pages = this.paged_bookings.pipe(\n        map((_) => _.list.length < _.total)\n    );\n    public readonly bookings = this.paged_bookings.pipe(map((i) => i.list));\n\n    public nextPage() {\n        this._call_next_page.next(`NEXT_${Date.now()}`);\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.setup_paging.subscribe();\n    }\n\n    public setFilters(filters: LockerFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public refresh() {\n        this._loading.next(true);\n        this.timeout('poll', () => this.setFilters(this._filters.getValue()));\n    }\n\n    // public addLockers(list: Locker[]) {\n    //     this._new_lockers.next(this._new_lockers.getValue().concat(list));\n    // }\n\n    // public clearNewLockers() {\n    //     this._filters.next(this._filters.getValue());\n    //     this._new_lockers.next([]);\n    // }\n\n    public async checkinLocker(locker: Booking, state: boolean = true) {\n        console.log('Check-in:', locker);\n        const status: any = await checkinBooking(locker.id, state ?? true)\n            .toPromise()\n            .catch((_) => ({ failed: true, error: _ }));\n        if (status.failed) {\n            notifyError(\n                status.error\n                    ? `Error: ${status.error}`\n                    : `Error checking ${state ? 'in' : 'out'} locker booking`\n            );\n            throw status.error;\n        }\n        notifySuccess(`Checked ${state ? 'in' : 'out'} ${locker.user_name}.`);\n    }\n\n    public async approveLocker(locker: Booking) {\n        const success = await approveBooking(locker.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error approving in locker booking');\n        }\n        notifySuccess(\n            `Approved locker booking for ${locker.user_name} on ${format(\n                locker.date,\n                'MMM do'\n            )}.`\n        );\n        (locker as any).approved = true;\n        (locker as any).rejected = false;\n    }\n\n    public async rejectLocker(locker: Booking) {\n        const success = await rejectBooking(locker.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error rejecting in locker booking');\n        }\n        notifySuccess(\n            `Rejected locker booking for ${locker.user_name} on ${format(\n                locker.date,\n                'MMM do'\n            )}.`\n        );\n        (locker as any).approved = false;\n        (locker as any).rejected = true;\n    }\n\n    public async giveAccess(locker: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...locker, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${locker.user_name} for locker booking.`\n        );\n        this._locker_bookings = [...this._locker_bookings, success] as any;\n    }\n\n    public async rejectAllLockers() {\n        const list = this._locker_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No lockers to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all locker bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all lockers for selected date...');\n        await Promise.all(\n            list.map((locker) => rejectBooking(locker.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all locker bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { LockersStateService } from './locker-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\n\n@Component({\n    selector: 'lockers-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\"\n                        >All Levels</mat-option\n                    >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <!-- <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"mx-2 w-36\"\n                matTooltip=\"New Locker Booking\"\n                (click)=\"newLockerBooking()\"\n            >\n                New Booking\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"newLocker()\"\n                matTooltip=\"New Locker\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary relative text-white rounded\"\n                matTooltip=\"Upload Lockers CSV\"\n            >\n                <app-icon>cloud_upload</app-icon>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"downloadTemplate()\"\n                matTooltip=\"Download Template Locker CSV\"\n            >\n                <app-icon>download</app-icon>\n            </button> -->\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Locker Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class LockersTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._lockers.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._lockers.setFilters({ date });\n    public readonly setFilters = (o) => this._lockers.setFilters(o);\n    /** Update active zones for lockers */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._lockers.setFilters({ zones });\n    };\n\n    constructor(\n        private _lockers: LockersStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe(() => {\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    // public newLocker() {\n    //     this._lockers.addLockers([\n    //         new Locker({ id: `locker-${randomInt(999_999)}` }),\n    //     ]);\n    //     notifySuccess(\n    //         'New locker added to local data. Make sure to save the locker before using it.'\n    //     );\n    // }\n\n    // public newLockerBooking() {\n    //     this._dialog.open(LockerBookModalComponent, {});\n    // }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'locker' },\n        });\n    }\n\n    // public async loadCSVData(event: InputEvent) {\n    //     const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n    //         notifyError(m);\n    //         throw e;\n    //     });\n    //     try {\n    //         const list = csvToJson(data) || [];\n    //         this._lockers.addLockers(\n    //             list.map(\n    //                 (_) =>\n    //                     new Locker({\n    //                         ..._,\n    //                         id: _.id || `locker-${randomInt(999_999)}`,\n    //                     })\n    //             )\n    //         );\n    //     } catch (e) {\n    //         console.error(e);\n    //     }\n    // }\n\n    // public downloadTemplate() {\n    //     const locker: any = new Locker({\n    //         id: 'locker-123',\n    //         name: 'Test Locker',\n    //         bookable: true,\n    //         groups: ['test-locker-group', 'locker-bookers'],\n    //         features: ['Standing Locker', 'Dual Monitor'],\n    //     }).toJSON();\n    //     const data = jsonToCsv([locker]);\n    //     downloadFile('locker-template.csv', data);\n    // }\n\n    /**\n     * Aprrove a locker booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._lockers.approveLocker(booking);\n        }\n    }\n\n    /**\n     * Reject a locker booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._lockers.rejectLocker(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { LockersStateService } from './locker-state.service';\n\n@Component({\n    selector: '[app-lockers]',\n    template: `\n        <sidebar></sidebar>\n        <main\n            class=\"flex-1 relative w-1/2 flex flex-col bg-base-200 overflow-hidden\"\n        >\n            <lockers-topbar class=\"w-full\"></lockers-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'lockers', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'lockers', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'lockers', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Lockers\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class LockersComponent\n    extends AsyncHandler\n    implements OnInit, OnDestroy\n{\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: LockersStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { LockersStateService } from './locker-state.service';\nimport { map } from 'rxjs/operators';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'locker-bookings',\n    template: `\n        <div class=\"w-full h-4\"></div>\n        <div class=\"overflow-auto h-full w-full px-4 pb-4\">\n            <custom-table\n                class=\"min-w-[76rem] block\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'date',\n                    'period',\n                    'user_name',\n                    'group',\n                    'asset_name',\n                    'approver_name',\n                    'status',\n                    'checked_in'\n                ]\"\n                [display_column]=\"[\n                    'Date',\n                    'Period',\n                    'Person',\n                    'Group',\n                    'Locker',\n                    'Approver',\n                    'Status',\n                    'Checked In'\n                ]\"\n                [column_size]=\"[\n                    '4r',\n                    '10r',\n                    'flex',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '8r',\n                    '7r'\n                ]\"\n                [template]=\"{\n                    user_name: user_template,\n                    asset_name: locker_template,\n                    date: date_template,\n                    period: period_template,\n                    status: status_template,\n                    checked_in: option_template,\n                    access: option_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching locker bookings'\n                        : 'There are no locker booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-date=\"data\">\n                <div class=\"flex flex-col items-center justify-center w-full\">\n                    <div class=\"opacity-60\">{{ date | date: 'MMM' }}</div>\n                    <div class=\"text-xl\">{{ date | date: 'dd' }}</div>\n                </div>\n            </ng-template>\n            <ng-template #period_template let-row=\"row\">\n                <ng-container *ngIf=\"row.status !== 'declined' && !row.deleted\">\n                    <ng-container *ngIf=\"!row.all_day\">\n                        {{ row.date | date: time_format }} &ndash;\n                        {{ row.end | date: time_format }}\n                    </ng-container>\n                    <ng-container *ngIf=\"row.all_day\">All Day</ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"row.status === 'declined' || row.deleted\">\n                    <div\n                        class=\"text-xs py-1 px-2 bg-error rounded-2xl text-white\"\n                    >\n                        Expired\n                    </div>\n                </ng-container>\n            </ng-template>\n            <ng-template #locker_template let-row=\"row\">\n                {{ row.asset_name || row.asset_id }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                <div class=\"flex flex-col justify-center\">\n                    <div class=\"select-all\">\n                        {{\n                            row.user_name ||\n                                row.user_email ||\n                                row.booked_by_name ||\n                                row.booked_by_email\n                        }}\n                    </div>\n                    <div\n                        *ngIf=\"row.user_name\"\n                        class=\"text-xs opacity-30 select-all\"\n                    >\n                        {{ row.user_email }}\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #status_template let-row=\"row\">\n                <button\n                    matRipple\n                    [matMenuTriggerFor]=\"statusMenu\"\n                    class=\"rounded-3xl px-2 py-1 flex items-center space-x-2 capitalize\"\n                    [class.bg-success]=\"row.approved\"\n                    [class.text-white]=\"row.approved || row.rejected\"\n                    [class.bg-warning]=\"!row.approved && !row.rejected\"\n                    [class.text-black]=\"!row.approved && !row.rejected\"\n                    [class.bg-error]=\"row.rejected\"\n                >\n                    <div class=\"ml-2\">\n                        {{\n                            row.approved\n                                ? 'Approved'\n                                : row.rejected\n                                ? 'Declined'\n                                : 'Tentative'\n                        }}\n                    </div>\n                    <app-icon class=\"text-xl\">arrow_drop_down</app-icon>\n                </button>\n                <mat-menu #statusMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"approve(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\"\n                                >event_available</app-icon\n                            >\n                            <div>Approve Locker</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"reject(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">event_busy</app-icon>\n                            <div>Decline Locker</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n            <ng-template #option_template let-data=\"data\" let-row=\"row\">\n                <button\n                    matRipple\n                    class=\"rounded-3xl px-2 py-1 text-white flex items-center space-x-2\"\n                    [matMenuTriggerFor]=\"checkinMenu\"\n                    [class.bg-neutral-600]=\"!data\"\n                    [class.bg-success]=\"data\"\n                    [class.opacity-30]=\"row.status === 'ended'\"\n                    [disabled]=\"row.status === 'ended'\"\n                    [matTooltip]=\"\n                        row.status === 'ended'\n                            ? 'Locker booking has ended'\n                            : 'Check-in or check-out locker'\n                    \"\n                >\n                    <div class=\"ml-2\">{{ data ? 'Yes' : 'No' }}</div>\n                    <app-icon class=\"text-xl\">arrow_drop_down</app-icon>\n                </button>\n                <mat-menu #checkinMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"checkin(row, true)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">check</app-icon>\n                            <div>Check-in</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"checkin(row, false)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">cancel</app-icon>\n                            <div>Check-out</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n        </div>\n\n        <button\n            btn\n            matRipple\n            class=\"absolute bottom-2 left-2 w-32 mx-auto my-4\"\n            *ngIf=\"!loading && (has_more_pages | async)\"\n            (click)=\"loadMore()\"\n        >\n            Load More\n        </button>\n        <button\n            icon\n            matRipple\n            class=\"absolute bottom-2 right-2 bg-base-100 shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class LockerBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly has_more_pages = this._state.has_more_pages;\n    public readonly bookings = this._state.bookings.pipe(\n        map((i) =>\n            i.map((booking) => ({\n                ...booking,\n                end: booking.date + booking.duration * 60 * 1000,\n            }))\n        )\n    );\n\n    public readonly rejectAll = () => this._state.rejectAllLockers();\n    public readonly loadMore = () => this._state.nextPage();\n\n    public readonly checkin = (d, s?) =>\n        this.runMethod('checkin', async () => {\n            await this._state.checkinLocker(d, s);\n            d.checked_in = s ?? true;\n        });\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveLocker(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectLocker(d));\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: LockersStateService,\n        private _settings: SettingsService\n    ) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    randomInt,\n} from '@placeos/common';\nimport { LockersStateService } from './locker-state.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { take } from 'rxjs/operators';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\n\n@Component({\n    selector: '[app-new-lockers]',\n    template: `\n        <app-topbar class=\" print:hidden\"></app-topbar>\n        <div class=\"flex flex-1 h-px print:hidden\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center w-full py-4 px-8 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Locker Bookings</h2>\n                    <div class=\"flex-1 w-px\"></div>\n                    <searchbar\n                        class=\"mr-2\"\n                        [model]=\"(filters | async)?.search\"\n                        (modelChange)=\"setFilters({ search: $event })\"\n                    ></searchbar>\n                    <!-- <button\n                        btn\n                        matRipple\n                        class=\"space-x-2\"\n                        (click)=\"newLockerBooking()\"\n                    >\n                        <div>New Booking</div>\n                        <app-icon>add</app-icon>\n                    </button> -->\n                </div>\n                <div class=\"w-full flex items-center px-8 space-x-2\">\n                    <mat-form-field appearance=\"outline\" class=\"h-[3.5rem]\">\n                        <mat-select\n                            multiple\n                            [ngModel]=\"(filters | async)?.zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"border-l h-full !ml-8 !mr-4\"></div>\n                    <div class=\"flex-1 w-px\"></div>\n                    <ng-container *ngIf=\"path === 'events'\">\n                        <date-options\n                            (dateChange)=\"setDate($event)\"\n                        ></date-options>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            matTooltip=\"Refresh List\"\n                            class=\"ml-2 rounded border border-base-200\"\n                            (click)=\"refresh()\"\n                            [disabled]=\"loading | async\"\n                        >\n                            <app-icon>refresh</app-icon>\n                        </button>\n                    </ng-container>\n                    <ng-container *ngIf=\"path === 'manage'\">\n                        <!-- <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary text-white rounded\"\n                            (click)=\"newLocker()\"\n                            matTooltip=\"New Locker\"\n                        >\n                            <app-icon>add</app-icon>\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary relative text-white rounded\"\n                            matTooltip=\"Upload Lockers CSV\"\n                        >\n                            <app-icon>cloud_upload</app-icon>\n                            <input\n                                type=\"file\"\n                                class=\"absolute inset-0 opacity-0\"\n                                (change)=\"loadCSVData($event)\"\n                            />\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary text-white rounded\"\n                            (click)=\"downloadTemplate()\"\n                            matTooltip=\"Download Template Locker CSV\"\n                        >\n                            <app-icon>download</app-icon>\n                        </button> -->\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary text-white rounded\"\n                            (click)=\"manageRestrictions()\"\n                            matTooltip=\"Locker Restrictions\"\n                        >\n                            <app-icon>lock_open</app-icon>\n                        </button>\n                    </ng-container>\n                </div>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-4\">\n                    <router-outlet></router-outlet>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"(loading | async) && path === 'events'\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewLockersComponent\n    extends AsyncHandler\n    implements OnInit, OnDestroy\n{\n    public readonly loading = this._state.loading;\n    public path: string;\n    /** List of levels for the active building */\n    public readonly filters = this._state.filters;\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    public readonly setFilters = (o) => this._state.setFilters(o);\n    public readonly refresh = () => this._state.refresh();\n    /** Update active zones for lockers */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: LockersStateService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                    console.log('Path:', this.path);\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n\n    // public newLockerBooking() {\n    //     const ref = this._dialog.open(LockerBookModalComponent, {});\n    //     ref.afterClosed().subscribe((_) => {\n    //         this._state.refresh();\n    //     });\n    // }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'locker' },\n        });\n    }\n\n    // public newLocker() {\n    //     this._state.addLockers([\n    //         new Locker({ id: `locker-${randomInt(999_999)}` }),\n    //     ]);\n    //     notifySuccess(\n    //         'New locker added to local data. Make sure to save the locker before using it.'\n    //     );\n    // }\n\n    // public downloadTemplate() {\n    //     const locker: any = new Locker({\n    //         id: 'locker-123',\n    //         name: 'Test Locker',\n    //         bookable: true,\n    //         groups: ['test-locker-group', 'locker-bookers'],\n    //         features: ['Standing Locker', 'Dual Monitor'],\n    //     }).toJSON();\n    //     const data = jsonToCsv([locker]);\n    //     downloadFile('locker-template.csv', data);\n    // }\n\n    // public async loadCSVData(event: InputEvent) {\n    //     const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n    //         notifyError(m);\n    //         throw e;\n    //     });\n    //     try {\n    //         const list = csvToJson(data) || [];\n    //         this._state.addLockers(\n    //             list.map(\n    //                 (_) =>\n    //                     new Locker({\n    //                         ..._,\n    //                         id: _.id || `locker-${randomInt(999_999)}`,\n    //                     })\n    //             )\n    //         );\n    //     } catch (e) {\n    //         console.error(e);\n    //     }\n    // }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { LockersComponent } from './lockers.component';\nimport { LockerBookingsComponent } from './locker-bookings.component';\nimport { LockersTopbarComponent } from './locker-topbar.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { NewLockersComponent } from './new-lockers.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewLockersComponent,\n        children: [\n            { path: 'events', component: LockerBookingsComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: LockersComponent,\n        children: [\n            { path: 'events', component: LockerBookingsComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        NewLockersComponent,\n        LockersComponent,\n        LockerBookingsComponent,\n        LockersTopbarComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class LockersModule {}\n"],"x_google_ignoreList":[]}