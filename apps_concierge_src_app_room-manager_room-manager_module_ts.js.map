{"version":3,"file":"apps_concierge_src_app_room-manager_room-manager_module_ts.js","mappings":"oiBA2BYA,MAAA,aAAAA,CAAmD,cACrCA,MAAA,WAAKA,qCA6BHA,MAAA,mBAIIA,MAAA,GACJA,kCAHIA,MAAA,QAAAC,EAAAC,IAEAF,MAAA,GAAAA,MAAA,IAAAC,EAAAE,cAAAF,EAAAG,KAAA,gCApBhBJ,MAAA,WAAAA,CAAsD,cAClDA,MAAA,MAQSA,MAAA,UACTA,gBACAA,MAAA,sBAAAA,CAAqC,mBAK7BA,MAAA,EAAAK,GAAA,sCAMJL,QACAA,MAAA,eAAWA,MAAA,uBAAiBA,mCApB5BA,MAAA,GAAAA,MAAA,QAAAM,EAAAC,KAAAC,SAAAC,KAAAC,SAAAJ,EAAAC,KAAAC,SAAAC,KAAAE,SAc0BX,MAAA,GAAAA,MAAA,UAAAA,MAAA,IAAAM,EAAAM,QAAA,yBAiCtBZ,MAAA,eAAAA,MAAA,MAG0BA,mCA1BlCA,MAAA,WAAAA,CAGC,cACGA,MAAA,MAQQA,MAAA,UACRA,gBACAA,MAAA,uBACIA,MAAA,cAQAA,MAAA,EAAAa,GAAA,oBAKJb,iCAtBIA,MAAA,GAAAA,MAAA,QAAAc,EAAAP,KAAAC,SAAAJ,KAAAM,SAAAI,EAAAP,KAAAC,SAAAJ,KAAAO,SAkBKX,MAAA,GAAAA,MAAA,OAAAc,EAAAP,KAAAC,SAAAJ,KAAAM,QAAA,yBA4BLV,MAAA,eAAAA,MAAA,MAG8BA,mCAzBtCA,MAAA,WAAAA,CAGC,cACGA,MAAA,MASAA,QACAA,MAAA,uBACIA,MAAA,cAOAA,MAAA,EAAAe,GAAA,oBAKJf,iCArBIA,MAAA,GAAAA,MAAA,QAAAgB,EAAAT,KAAAC,SAAAS,MAAAP,SAAAM,EAAAT,KAAAC,SAAAS,MAAAN,SAiBKX,MAAA,GAAAA,MAAA,OAAAgB,EAAAT,KAAAC,SAAAS,MAAAP,QAAA,yBAQbV,MAAA,WAAAA,CAGC,cACGA,MAAA,MAEAA,QACAA,MAAA,uBACIA,MAAA,cAOJA,kCAEJA,MAAA,WAAAA,CAGC,cACGA,MAAA,MAEAA,QACAA,MAAA,uBACIA,MAAA,cAOJA,kCA2BIA,MAAA,eAAAA,MAAA,MAKAA,mCA5BRA,MAAA,WAAAA,CAGC,cACGA,MAAA,MASAA,QACAA,MAAA,uBACIA,MAAA,cAQAA,MAAA,EAAAkB,GAAA,oBAMJlB,iCAvBIA,MAAA,GAAAA,MAAA,QAAAmB,EAAAZ,KAAAC,SAAAY,SAAAV,SAAAS,EAAAZ,KAAAC,SAAAY,SAAAT,SAkBKX,MAAA,GAAAA,MAAA,OAAAmB,EAAAZ,KAAAC,SAAAY,SAAAV,QAAA,yBAObV,MAAA,WAAAA,CAA0D,qBACtDA,MAAA,MAMAA,kCAGRA,MAAA,WAAAA,CAA6D,cACzDA,MAAA,MACiBA,QAEjBA,MAAA,uBACIA,MAAA,iBAOJA,oDAcQA,MAAA,qBAIIA,MAAA,2BAAAqB,EAAArB,MAAAsB,GAAAC,UAAAC,EAAAxB,MAAA,UAAWA,MAAAwB,EAAAC,cAAAJ,GAAsB,GAEjCrB,MAAA,GACAA,MAAA,iBAAwBA,MAAA,WAAKA,SAAW,6BALxCA,MAAA,gBAAAA,CAAmB,gBAInBA,MAAA,GAAAA,MAAA,IAAAqB,EAAA,+CAlBhBrB,MAAA,WAAAA,CAA0D,WACtDA,MAAA,MAQAA,QACAA,MAAA,sBAAAA,CAAqC,yBAE7BA,MAAA,EAAA0B,GAAA,uBASA1B,MAAA,cAKIA,MAAA,gCAAA2B,GAAA3B,MAAA4B,GAAA,MAAAC,EAAA7B,MAAA,UAAwBA,MAAA6B,EAAAC,WAAAH,GAAkB,GAL9C3B,aAME,qCAzBNA,MAAA,GAAAA,MAAA,QAAA+B,EAAAxB,KAAAC,SAAAwB,SAAAtB,SAAAqB,EAAAxB,KAAAC,SAAAwB,SAAArB,SAW4BX,MAAA,GAAAA,MAAA,UAAA+B,EAAAE,cAUpBjC,MAAA,GAAAA,MAAA,kBAAAkC,EAAAlC,CAA4B,gCAAA+B,EAAAI,WAA5BnC,CAA4B,oDAQ5CA,MAAA,WAAAA,CAAwD,cACpDA,MAAA,MAA+CA,QAC/CA,MAAA,uBACIA,MAAA,cAOJA,qCAcIA,MAAA,mBAGKA,MAAA,GAAQA,kCADTA,MAAA,QAAAoC,GACCpC,MAAA,GAAAA,MAAAoC,EAAA,yBAELpC,MAAA,mBACIA,MAAA,6BACJA,cAFsCA,MAAA,sCAK9CA,MAAA,WAAAA,CAAwD,cACpDA,MAAA,MAAgDA,QAChDA,MAAA,yBAIJA,mCAhQJA,MAAA,YAMIA,MAAA,EAAAqC,GAAA,cA0BArC,MAAA,WACIA,MAAA,EAAAsC,GAAA,cA8BAtC,MAAA,EAAAuC,GAAA,cA6BJvC,QACAA,MAAA,WACIA,MAAA,EAAAwC,GAAA,cAiBAxC,MAAA,EAAAyC,GAAA,cAiBJzC,QACAA,MAAA,WACIA,MAAA,EAAA0C,GAAA,cA+BA1C,MAAA,GAAA2C,GAAA,aASJ3C,QACAA,MAAA,GAAA4C,GAAA,aAcA5C,MAAA,GAAA6C,GAAA,aA+BA7C,MAAA,GAAA8C,GAAA,aAYA9C,MAAA,YAAAA,CAA2B,eACDA,MAAA,eAAQA,QAC9BA,MAAA,uBAAAA,CAAqC,kBACIA,MAAA,aAAMA,QAC3CA,MAAA,eAMJA,QACAA,MAAA,+BACIA,MAAA,GAAA+C,GAAA,qBAKA/C,MAAA,GAAAgD,GAAA,qBAGJhD,UAEJA,MAAA,GAAAiD,GAAA,aAOJjD,2CA7PIA,MAAA,YAAAkD,EAAA3C,MAE4BP,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAC,MA6BnBT,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAJ,MA8BAJ,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAS,OA+BAjB,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAL,cAiBAH,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAL,cAmBAH,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAY,UA6BuBpB,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAA2C,UAUJnD,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAA4C,aAcApD,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAwB,UA+BAhC,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAA6C,QAoBhBrD,MAAA,GAAAA,MAAA,kBAAAsD,GAKetD,MAAA,GAAAA,MAAA,UAAAkD,EAAAK,oBAINvD,MAAA,GAAAA,MAAA,QAAAkD,EAAAM,UAAAC,QAKOzD,MAAA,GAAAA,MAAA,OAAAkD,EAAA3C,KAAAC,SAAAkD,OAAA,4BA9PpC1D,MAAA,YAIIA,MAAA,EAAA2D,GAAA,gBAkQJ3D,8BA/PSA,MAAA,GAAAA,MAAA,OAAA4D,EAAArD,KAAA,2CAgQTP,MAAA,cAAAA,CAGC,eAC4BA,MAAA,mBAAAA,MAAA6D,GAAA,MAAAC,EAAA9D,QAAA,OAASA,MAAA8D,EAAAC,OAAM,GAAE/D,MAAA,UAAIA,SAAS,yBAGvDA,MAAA,YACIA,MAAA,oBACAA,MAAA,UAAgBA,MAAA,oBAAcA,eAmBjCgE,GAAmB,MA5ShC,MA4SaA,UAA2BC,KAqBzBhC,mBACP,OAAOiC,KAAK3D,KAAKC,SAASwB,SAASmC,KACvC,CAEAC,YACqCC,EACzBC,EACAC,GAERC,QAJiCN,KAAAG,QACzBH,KAAAI,cACAJ,KAAAK,OA3BLL,KAAAO,SAAU,EACVP,KAAAV,UAAsB,GACtBU,KAAAX,mBAA+B,GAEtBW,KAAAtD,OAASsD,KAAKK,KAAKG,cAE5BR,KAAA3D,QAAOoE,MAA0BT,KAAKG,MAAMO,MAE5CV,KAAAW,kBAA2B,CAC9B,CAAE3E,GAAI4E,WAAsB1E,KAAM,QAClC,CAAEF,GAAI4E,cAAyB1E,KAAM,WACrC,CAAEF,GAAI4E,YAAuB1E,KAAM,SACnC,CAAEF,GAAI4E,mBAA8B1E,KAAM,kBAG9B8D,KAAAa,SAAYC,MACxBC,OAAW,CAAEC,EAAGF,IAAKG,QAAKC,KAAKC,GAASA,EAAKC,OAEjCpB,KAAA/B,WAAuB,CAACoD,KAAOC,KAAOC,KAYtD,CAEOC,YAAYC,GACXA,EAAQpF,OACR2D,KAAK0B,qBACL1B,KAAK2B,aACD,YACA3B,KAAK3D,KAAKuF,aAAaC,UACnB,EAAGC,cACE9B,KAAKX,mBAAqBW,KAAKV,UAAUyC,OAAQjB,GAC9CA,EAAEkB,cAAcC,SAASH,EAASE,kBAK1D,CAMOpE,WAAWsE,GACd,IAAKlC,KAAK3D,OAAS2D,KAAK3D,KAAKC,SAASwB,SAAU,OAChD,MAAMqE,EAAQD,EAAMC,MACdlC,EAAQiC,EAAMjC,MACdlC,EAAeiC,KAAKjC,cACrBkC,GAAS,IAAImC,SACdrE,EAAasE,KAAKpC,GAClBD,KAAK3D,KAAKC,SAASwB,SAASwE,SAASvE,IAIrCoE,IACAA,EAAMlC,MAAQ,GAEtB,CAMO1C,cAAcgF,GACjB,IAAKvC,KAAK3D,OAAS2D,KAAK3D,KAAKC,SAASwB,SAAU,OAChD,MAAMC,EAAeiC,KAAKjC,aACpByE,EAAQzE,EAAa0E,QAAQF,GAE/BC,GAAS,IACTzE,EAAa2E,OAAOF,EAAO,GAC3BxC,KAAK3D,KAAKC,SAASwB,SAASwE,SAASvE,GAE7C,CAEO2D,qBACH,MAAMI,EAAW9B,KAAK3D,MAAM4D,OAAO6B,UAAY,GAC/C9B,KAAKV,UAAYqD,KACjB3C,KAAKX,mBAAqBW,KAAKV,UAAUyC,OAAQjB,GAC7CA,EAAEkB,cAAcC,SAASH,EAASE,eAE1C,CAEanC,OAAI,IAAA+C,EAAA5C,KAAA,SAAA6C,KAAA,YACb,IAAKD,EAAKvG,KAAKyG,MACX,SAAOC,MACH,qCAAkCC,MAC9BJ,EAAKvG,MACP4G,KAAK,UAEfC,QAAQC,IAAI,QAASP,EAAKvG,KAAK4D,OAC1B2C,EAAKvG,KAAK4D,MAAMjE,IACjB4G,EAAKvG,KAAK+G,WAAW,CACjBnH,aACI2G,EAAKvG,KAAK4D,MAAMhE,cAAgB2G,EAAKvG,KAAK4D,MAAM/D,KACpDmH,SAAOC,MAAO,CACVV,EAAKvC,KAAKkD,aAAavH,GACvB4G,EAAKvC,KAAKmD,SAASC,UACnBb,EAAKvC,KAAKmD,SAASxH,GACnB,GAAG4G,EAAKvG,KAAK4D,MAAM1D,MAAMP,IAAM4G,EAAKvG,KAAK4D,MAAM1D,MAAQ,OACxDwF,OAAQjB,GAAMA,KAGzB8B,EAAKrC,SAAU,EACfqC,EAAKxC,YAAYsD,cAAe,EAChC,MAAMtC,EAAOwB,EAAKvG,KAAKsH,oBAChBvC,EAAKpF,MACN4H,OAAaxC,EAAKpF,GAAIoF,IAAI,EAC1ByC,OAAUzC,IACd0C,YACFlB,EAAKxC,YAAYsD,cAAe,EAChCd,EAAKxC,YAAY2D,OAAM,GACvBnB,EAAKrC,SAAU,CAAM,EA7BR,EA8BjB,EAzHST,SAAmB,mBAAAkE,iBAAnBlE,GAAkBhE,MA0BfmI,MAAenI,MAAAoI,MAAApI,MAAAqI,MAAA,EA1BlBrE,EAAmB,UAAAsE,EAAAC,IAAA,MAAnBvE,EAAkBwE,UAAA,sBAAAxG,SAAA,CAAAhC,aAAAyI,MAAA,EAAAC,KAAA,EAAAC,OAAA,eAAAC,iDAjRVC,4FACQ,oCAAO,wCA6BXA,0FACO,oCAAO,wCAMMA,6GAQZA,mHAeRA,iGAOoBA,+GAOZA,kHAWJA,6GAMgBA,iHAWhBA,kGAMgBA,sGAmBpBA,sGAQoBA,0GAOhBA,iIAUJA,qGAOAA,2GAmBJA,uGAyBuCA,gGAMnBA,wIA4BoBA,69EArQrD7I,MAAA,WAAAA,CAAQ,QACAA,MAAA,GAAyCA,QAC7CA,MAAA,EAAA8I,GAAA,gBAGJ9I,QACAA,MAAA,EAAA+I,GAAA,cAuQA/I,MAAA,EAAAgJ,GAAA,gBAMAhJ,MAAA,EAAAiJ,GAAA,yBAAAjJ,8BAlRQA,MAAA,GAAAA,MAAA,GAAAkJ,EAAA3I,KAAA4D,MAAAjE,GAAA,sBAC+BF,MAAA,GAAAA,MAAA,QAAAkJ,EAAAzE,SAMlCzE,MAAA,GAAAA,MAAA,QAAAkJ,EAAAzE,QAAAzE,CAAgB,WAAAmJ,GAuQhBnJ,MAAA,GAAAA,MAAA,QAAAkJ,EAAAzE,QAAA,gZA0BAT,CAAmB,KC5SnBoF,EAAqB,MAHlC,MAGaA,EA0CThF,YACYG,EACA8E,GADAnF,KAAAK,OACAL,KAAAmF,UA3CJnF,KAAAoF,SAAW,IAAIC,IAAiC,IAChDrF,KAAAsF,QAAU,IAAID,IAAgB,GAE/BrF,KAAAuF,QAAUvF,KAAKoF,SAASI,eAEfxF,KAAAyF,aAAYC,MAAc,CACtC1F,KAAKK,KAAKsF,gBACV3F,KAAKsF,UACNrE,QACCc,KAAO,EAAEjB,OAASA,GAAG9E,KAAE,EACvB4J,KAAU,EAAEC,MAAG,EACXC,OAAa,CAAEC,QAASF,EAAI7J,KAAMiF,QAC9BC,KAAI,EAAGE,UAAWA,IAAI,EACtB4E,KAAW,OAAMC,MAAG,QACvB,EAEL/E,KAAKgF,GACDA,EACKnE,OAAQjB,GAAMd,KAAKK,KAAK8F,YAAYrF,EAAEuC,QACtC+C,KAAK,CAACC,EAAGC,IAAMD,EAAEnK,KAAKqK,cAAcD,EAAEpK,SAAM,EAErDsK,KAAY,IAGAxG,KAAAyG,kBAAiBf,MAAc,CAC3C1F,KAAKyF,UACLzF,KAAKoF,WACNnE,QACCC,KAAI,EAAEgF,EAAMX,MACJA,EAAQhJ,OACR2J,EAAOA,EAAKnE,OAAQjB,GAAMA,EAAEuC,MAAMpB,SAASsD,EAAQhJ,QAEnDgJ,EAAQmB,SACRR,EAAOA,EAAKnE,OAAQjB,GAChBA,EAAE5E,KAAK8F,cAAcC,SAASsD,EAAQmB,OAAO1E,iBAG9CkE,IAOZ,CAEIS,WAAWpB,GACdvF,KAAKoF,SAASwB,KAAK,IAAK5G,KAAKoF,SAASyB,cAAetB,GACzD,CAEOuB,gBAAgBJ,GACnB1G,KAAKoF,SAASwB,KAAK,IAAK5G,KAAKoF,SAASyB,WAAYH,UACtD,CAEOK,SAASrG,EAAoB,IAAIsG,OACxBhH,KAAKmF,QAAQ8B,KAAKnH,GAAoB,CAAEsB,KAAM,CAAEV,UACxDwG,cAAcrF,UAAWT,IACrBA,GAAM+F,WAAW,IAAMnH,KAAKsF,QAAQsB,KAAKQ,KAAKC,OAAQ,IAAG,EAErE,EA5DSnC,SAAqB,mBAAAlB,iBAArBkB,GAAqBpJ,MAAAoI,MAAApI,MAAAqI,MAAA,EAArBe,EAAqB,WAAAd,EAAAkD,IAAA,OAArBpC,EAAqBqC,QAArBrC,EAAqBsC,UAAAC,WAFlB,SAEHvC,CAAqB,yDCHlBpJ,MAAA,kBAIIA,MAAA,GACJA,kCAHIA,MAAA,QAAA4L,EAAA1L,IAEAF,MAAA,GAAAA,MAAA,IAAA4L,EAAAzL,cAAAyL,EAAAxL,KAAA,UAgBPyL,GAA2B,MAhCxC,MAgCaA,UAAmC5H,KAoBjCyD,eACP,OAAOxD,KAAKK,KAAKmD,QACrB,CAEAtD,YACY0H,EACAvH,EACAwH,EACAC,GAERxH,QALQN,KAAA4H,WACA5H,KAAAK,OACAL,KAAA6H,SACA7H,KAAA8H,UA1BI9H,KAAAtD,OAASsD,KAAKK,KAAKG,cAEnBR,KAAA+H,QAAU/H,KAAK4H,SAASrC,QAExBvF,KAAA2G,WAAcoB,GAAY/H,KAAK4H,SAASjB,WAAWoB,GAEnD/H,KAAAgI,UAAaC,GAAQjI,KAAK4H,SAASd,gBAAgBmB,GAEnDjI,KAAAkI,YAAe3L,IAC3ByD,KAAK8H,QAAQK,SAAS,GAAI,CACtBC,WAAYpI,KAAK6H,OACjBQ,YAAa,CAAEtC,QAASxJ,KAE5ByD,KAAK4H,SAASjB,WAAW,CAAEpK,QAAM,EAGrByD,KAAAsI,QAAU,IAAMtI,KAAK4H,SAASb,UAa9C,CAEawB,WAAQ,IAAA3F,EAAA5C,KAAA,SAAA6C,KAAA,kBACXD,EAAKvC,KAAKmI,YAAYvH,QAAKwH,MAAO3H,GAAMA,IAAIgD,YAClDlB,EAAKjB,aACD,cACAiB,EAAKiF,OAAOa,cAAc7G,UAAW8G,IACjC,GAAIA,EAAOC,IAAI,WAAY,CACvB,MAAMrM,EAAOoM,EAAOE,IAAI,WACxB,GAAItM,EAAKgD,OAAQ,CACb,MAAMuJ,EAAQlG,EAAKvC,KAAK8F,YAAY,CAAC5J,IACrC,IAAKuM,EAAO,OACZlG,EAAKvC,KAAKmD,SAAWZ,EAAKvC,KAAK0I,UAAUC,KACpCnD,GAAQA,EAAI7J,KAAO8M,EAAMrF,WAE9Bb,EAAK+D,WAAW,CAAEpK,QAAM,MAKxCqG,EAAKjB,aACD,SACAiB,EAAKvC,KAAKG,cAAcqB,UAAWnF,IAC/B,IAAIH,EAAOG,EAAOsM,KAAMC,GAAQA,EAAIjN,KAAOO,IACtCA,GAAQG,EAAO6C,SAAQhD,EAAOG,EAAO,GAAGV,IAC7C4G,EAAKsF,YAAY3L,EAAI,IAG7BqG,EAAKoF,UAAU,GAAI,EA1BF,EA2BrB,EA5DSL,SAA2B,mBAAA3D,iBAA3B2D,GAA0B7L,MAAAoI,GAAApI,MAAAqI,MAAArI,MAAAoN,MAAApN,MAAAoN,MAAA,EAA1BvB,EAA2B,UAAAvD,EAAAC,IAAA,MAA3BsD,EAA0BrD,UAAA,0BAAAxG,SAAA,CAAAhC,OAAAyI,MAAA,GAAAC,KAAA,EAAAC,OAAA,wVAAA0E,SAAA,SAAAC,EAAApE,MAAA,EAAAoE,IA9BvBtN,MAAA,UAAAA,CAEX,qBAFWA,CAEX,kBAIWA,MAAA,yBAAA2B,GAAA,OAAiBuH,EAAAkD,YAAAzK,EAAmB,oBAGpC3B,MAAA,kBAAmCA,MAAA,gBAAUA,QAC7CA,MAAA,EAAAuN,GAAA,qCAMJvN,UAEJA,MAAA,cAAYA,MAAA,0BAASkJ,EAAAsD,SAAS,GAAexM,MAAA,cAAQA,QACrDA,MAAA,YACAA,MAAA,kBAAwBA,MAAA,uBAAA2B,GAAA,OAAeuH,EAAAgD,UAAAvK,EAAiB,GAAE3B,sBAflDA,MAAA,GAAAA,MAAA,iBAAAwN,EAAAxN,MAAA,IAAAkJ,EAAA+C,UAAA,KAAAuB,EAAA/M,MAIYT,MAAA,GAAAA,MAAA,cAAAkJ,EAAAxB,SAAA,KAAAwB,EAAAxB,SAAAxH,IAEUF,MAAA,GAAAA,MAAA,UAAAA,MAAA,IAAAkJ,EAAAtI,QAAA,8MAmBzBiL,CAA2B,oECH5B7L,MAAA,gEAAAA,MAAA,YAAAwN,EAAAxN,MAAA,IAAAyN,IAAA,KAAAD,EAAArN,gBAAA,OAAAqN,EAAAxN,MAAA,IAAAyN,IAAA,KAAAD,EAAApN,MAAA,gCAGAJ,MAAA,UAAAA,CAIC,cACaA,MAAA,GAA6BA,+BAJvCA,MAAA,cAAA0N,EAAA1N,CAA0B,eAAA0N,GAIhB1N,MAAA,GAAAA,MAAA0N,EAAA,0DAId1N,MAAA,UAAAA,CAA+C,cACHA,MAAA,yBAAA2N,EAAA3N,MAAA4N,GAAAC,IAAAC,EAAA9N,QAAA,OAASA,MAAA8N,EAAA7C,SAAA0C,GAAa,GAC1D3N,MAAA,cAAUA,MAAA,UAAIA,WAAW,mSAOhC+N,GAAiB,MAtD9B,MAsDaA,EAKT3J,YAAoB0H,GAAA5H,KAAA4H,WAJJ5H,KAAA8J,MAAQ9J,KAAK4H,SAASnB,eAEtBzG,KAAA+G,SAAYrG,GAASV,KAAK4H,SAASb,SAASrG,EAEN,EAL7CmJ,SAAiB,mBAAA7F,iBAAjB6F,GAAiB/N,MAAAoI,GAAA,EAAjB2F,EAAiB,UAAAzF,EAAAC,IAAA,MAAjBwF,EAAiBvF,UAAA,gBAAAC,MAAA,EAAAC,KAAA,GAAAC,OAAA,ydAAA0E,SAAA,SAAAC,EAAApE,MAAA,EAAAoE,IAnDtBtN,MAAA,WACIA,MAAA,oBA2BJA,QACAA,MAAA,EAAAiO,GAAA,yBAAAjO,OAGAA,MAAA,EAAAkO,GAAA,yBAAAlO,OASAA,MAAA,EAAAmO,GAAA,yBAAAnO,oDAtCQA,MAAA,GAAAA,MAAA,aAAAkJ,EAAA8E,MAAAhO,CAAoB,UAAAA,MAAA,EAAAoO,IAApBpO,CAAoB,iBAAAA,MAAA,EAAAqO,IAApBrO,CAAoB,cAAAA,MAAA,EAAAsO,IAApBtO,CAAoB,WAAAA,MAAA,EAAAuO,GAAAC,EAAAC,EAAAC,GAAA,wCAgDvBX,CAAiB,kCCzCxBY,GAAkB,CAAC,CAAEC,KAAM,GAAIC,UCkBJ,MAhCjC,MAgCaC,YAAoB,mBAAA5G,iBAApB4G,EAAoB,EAApBA,EAAoB,UAAAxG,EAAAC,IAAA,MAApBuG,EAAoBtG,UAAA,yBAAAuG,MAAAX,GAAA3F,MAAA,EAAAC,KAAA,EAAAC,OAAA,2HAAA0E,SAAA,SAAAC,EAAApE,GAAA,EAAAoE,IA7BzBtN,MAAA,aACAA,MAAA,YACIA,MAAA,0BAAAA,CAAgE,iBAEpEA,4UAyBK8O,CAAoB,ODlBuC,IAmB3DE,GAAiB,MAjB9B,MAiBaA,YAAiB,mBAAA9G,iBAAjB8G,EAAiB,EAAjBA,EAAiB,UAAA1G,EAAA2G,IAAA,MAAjBD,MAAiB,UAAA1G,EAAA4G,IAAA,UATtBC,KACAC,KACAC,IACAC,KACAC,KACAC,KACAC,cAAsBd,OAGjBK,CAAiB","names":["i0","level_r21","id","display_name","name","RoomModalComponent_main_4_form_1_div_1_mat_option_6_Template","ctx_r6","form","controls","zone","invalid","touched","levels","RoomModalComponent_main_4_form_1_div_3_mat_error_6_Template","ctx_r7","RoomModalComponent_main_4_form_1_div_4_mat_error_5_Template","ctx_r8","email","RoomModalComponent_main_4_form_1_div_9_mat_error_5_Template","ctx_r11","capacity","feature_r27","_r29","$implicit","ctx_r28","removeFeature","RoomModalComponent_main_4_form_1_div_12_mat_chip_row_6_Template","$event","_r31","ctx_r30","addFeature","ctx_r14","features","feature_list","_r25","separators","tz_r32","RoomModalComponent_main_4_form_1_div_1_Template","RoomModalComponent_main_4_form_1_div_3_Template","RoomModalComponent_main_4_form_1_div_4_Template","RoomModalComponent_main_4_form_1_div_6_Template","RoomModalComponent_main_4_form_1_div_7_Template","RoomModalComponent_main_4_form_1_div_9_Template","RoomModalComponent_main_4_form_1_div_10_Template","RoomModalComponent_main_4_form_1_div_11_Template","RoomModalComponent_main_4_form_1_div_12_Template","RoomModalComponent_main_4_form_1_div_13_Template","RoomModalComponent_main_4_form_1_mat_option_23_Template","RoomModalComponent_main_4_form_1_mat_option_24_Template","RoomModalComponent_main_4_form_1_div_25_Template","ctx_r5","bookable","description","map_id","_r16","filtered_timezones","timezones","length","images","RoomModalComponent_main_4_form_1_Template","ctx_r1","_r34","ctx_r33","save","RoomModalComponent","AsyncHandler","this","value","constructor","_data","_dialog_ref","_org","super","loading","active_levels","generateSystemsFormFields","room","encryption_levels","EncryptionLevel","query_fn","_","queryZones","q","pipe","map","resp","data","ENTER","COMMA","SPACE","ngOnChanges","changes","updateTimezoneList","subscription","valueChanges","subscribe","timezone","filter","toLowerCase","includes","event","input","trim","push","setValue","existing_feature","index","indexOf","splice","TIMEZONES_IANA","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","console","log","patchValue","zones","unique","organisation","building","parent_id","disableClose","getRawValue","updateSystem","addSystem","toPromise","close","t","MAT_DIALOG_DATA","i1","i2","core","Xpm","selectors","decls","vars","consts","i18n_0","$localize","RoomModalComponent_button_3_Template","RoomModalComponent_main_4_Template","RoomModalComponent_footer_5_Template","RoomModalComponent_ng_template_6_Template","ctx","_r3","RoomManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","room_list","combineLatest","active_building","switchMap","bld","querySystems","zone_id","catchError","of","list","levelWithID","sort","a","b","localeCompare","shareReplay","filtered_rooms","search","setFilters","next","getValue","setSearchString","editRoom","PlaceSystem","open","afterClosed","setTimeout","Date","now","Yz7","factory","ɵfac","providedIn","level_r1","RoomManagerTopbarComponent","_manager","_route","_router","filters","setSearch","str","updateZones","navigate","relativeTo","queryParams","newRoom","ngOnInit","initialised","first","queryParamMap","params","has","get","level","buildings","find","lvl","i3","template","rf","RoomManagerTopbarComponent_mat_option_6_Template","tmp_0_0","data_r6","data_r7","row_r8","_r10","row","ctx_r9","RoomListComponent","rooms","RoomListComponent_ng_template_2_Template","RoomListComponent_ng_template_4_Template","RoomListComponent_ng_template_6_Template","_c0","_c1","_c2","_c3","_r2","_r0","_r4","ROUTES","path","component","RoomManagerComponent","attrs","RoomManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/room-manager/room-modal.component.ts","./apps/concierge/src/app/room-manager/room-management.service.ts","./apps/concierge/src/app/room-manager/room-manager-topbar.component.ts","./apps/concierge/src/app/room-manager/room-list.component.ts","./apps/concierge/src/app/room-manager/room-manager.module.ts","./apps/concierge/src/app/room-manager/room-manager.component.ts"],"sourcesContent":["import { Component, Inject, SimpleChanges } from '@angular/core';\nimport { SPACE, ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport {\n    EncryptionLevel,\n    addSystem,\n    queryZones,\n    updateSystem,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n    unique,\n} from '@placeos/common';\nimport { Space, generateSystemsFormFields } from '@placeos/spaces';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'room-form-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Room</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.zone\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.zone.invalid &&\n                            form.controls.zone.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Level<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"zone\"\n                            placeholder=\"Select Level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Level is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.name\"\n                    >\n                        <label\n                            for=\"system-name\"\n                            [class.error]=\"\n                                form.controls.name.invalid &&\n                                form.controls.name.touched\n                            \"\n                            i18n=\"@@nameLabel\"\n                        >\n                            Name<span>*</span>:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-name\"\n                                placeholder=\"Room Name\"\n                                i18n-placeholder=\"@@systemNamePlaceholder\"\n                                formControlName=\"name\"\n                                required\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.name.invalid\"\n                                i18n=\"@@systemNameError\"\n                                >Room name is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.email\"\n                    >\n                        <label\n                            for=\"system-email\"\n                            [class.error]=\"\n                                form.controls.email.invalid &&\n                                form.controls.email.touched\n                            \"\n                            i18n=\"@@emailLabel\"\n                        >\n                            Email:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-email\"\n                                placeholder=\"Room Email\"\n                                i18n-placeholder=\"@@systemEmailPlaceholder\"\n                                formControlName=\"email\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.email.invalid\"\n                                i18n=\"@@emailError\"\n                                >A valid email is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"display-name\" i18n=\"@@displayNameLabel\"\n                            >Display Name:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"display-name\"\n                                placeholder=\"Display Name\"\n                                i18n-placeholder=\"@@displayNamePlaceholder\"\n                                formControlName=\"display_name\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"code-name\" i18n=\"@@codeNameLabel\"\n                            >Code:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"code-name\"\n                                placeholder=\"Code\"\n                                i18n-placeholder=\"@@codeNamePlaceholder\"\n                                formControlName=\"code\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.capacity\"\n                    >\n                        <label\n                            for=\"capacity\"\n                            [class.error]=\"\n                                form.controls.capacity.invalid &&\n                                form.controls.capacity.touched\n                            \"\n                            i18n=\"@@capacityLabel\"\n                        >\n                            Capacity:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"capacity\"\n                                type=\"number\"\n                                placeholder=\"Capacity\"\n                                i18n-placeholder=\"@@capacityPlaceholder\"\n                                formControlName=\"capacity\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.capacity.invalid\"\n                                i18n=\"@@capacityError\"\n                            >\n                                A valid positive number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.bookable\">\n                        <mat-checkbox\n                            name=\"bookable\"\n                            formControlName=\"bookable\"\n                            i18n=\"@@bookableLabel\"\n                        >\n                            Bookable\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                    <label for=\"description\" i18n=\"@@descriptionLabel\"\n                        >Description:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"description\"\n                            placeholder=\"Description\"\n                            i18n=\"@@descriptionPlaceholder\"\n                            formControlName=\"description\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.features\">\n                    <label\n                        [class.error]=\"\n                            form.controls.features.invalid &&\n                            form.controls.features.touched\n                        \"\n                        i18n=\"@@featuresLabel\"\n                    >\n                        Features:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-chip-grid #chipList aria-label=\"Room features\">\n                            <mat-chip-row\n                                *ngFor=\"let feature of feature_list\"\n                                [selectable]=\"true\"\n                                [removable]=\"true\"\n                                (removed)=\"removeFeature(feature)\"\n                            >\n                                {{ feature }}\n                                <app-icon matChipRemove>close</app-icon>\n                            </mat-chip-row>\n                            <input\n                                placeholder=\"New feature...\"\n                                [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separators\"\n                                [matChipInputAddOnBlur]=\"true\"\n                                (matChipInputTokenEnd)=\"addFeature($event)\"\n                            />\n                        </mat-chip-grid>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.map_id\">\n                    <label for=\"map_id\" i18n=\"@@mapIdLabel\">Map ID:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"map_id\"\n                            i18n-placeholder=\"@@mapIdPlaceholder\"\n                            placeholder=\"Map SVG ID selector e.g. area-01.10-status\"\n                            formControlName=\"map_id\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"timezone\">Timezone</label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Room timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                    <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                    <image-list-field\n                        name=\"images\"\n                        formControlName=\"images\"\n                    ></image-list-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving room...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            mat-checkbox {\n                margin-top: 2.5em;\n                margin-bottom: 1.5em;\n            }\n\n            @media screen and (max-width: 640px) {\n                mat-checkbox {\n                    margin-top: 0;\n                }\n            }\n        `,\n    ],\n})\nexport class RoomModalComponent extends AsyncHandler {\n    public loading = false;\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Group of form fields used for creating the system */\n    public form = generateSystemsFormFields(this._data.room as any);\n    /** Levels of encyption available for the system's settings */\n    public encryption_levels: any[] = [\n        { id: EncryptionLevel.None, name: 'None' },\n        { id: EncryptionLevel.Support, name: 'Support' },\n        { id: EncryptionLevel.Admin, name: 'Admin' },\n        { id: EncryptionLevel.NeverDisplay, name: 'Never Display' },\n    ];\n    /** Function for querying zones */\n    public readonly query_fn = (_: string) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n    /** List of separator characters for features */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public get feature_list(): string[] {\n        return this.form.controls.features.value;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { room: Space },\n        private _dialog_ref: MatDialogRef<RoomModalComponent>,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.updateTimezoneList();\n            this.subscription(\n                'tz-change',\n                this.form.valueChanges.subscribe(\n                    ({ timezone }) =>\n                        (this.filtered_timezones = this.timezones.filter((_) =>\n                            _.toLowerCase().includes(timezone.toLowerCase())\n                        ))\n                )\n            );\n        }\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addFeature(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.features) return;\n        const input = event.input;\n        const value = event.value;\n        const feature_list = this.feature_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.features.setValue(feature_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove feature from the list\n     * @param existing_feature Feature to remove\n     */\n    public removeFeature(existing_feature: string): void {\n        if (!this.form || !this.form.controls.features) return;\n        const feature_list = this.feature_list;\n        const index = feature_list.indexOf(existing_feature);\n\n        if (index >= 0) {\n            feature_list.splice(index, 1);\n            this.form.controls.features.setValue(feature_list);\n        }\n    }\n\n    public updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid)\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        console.log('Form:', this.form.value);\n        if (!this.form.value.id) {\n            this.form.patchValue({\n                display_name:\n                    this.form.value.display_name || this.form.value.name,\n                zones: unique([\n                    this._org.organisation.id,\n                    this._org.building.parent_id,\n                    this._org.building.id,\n                    `${this.form.value.zone?.id || this.form.value.zone || ''}`,\n                ]).filter((_) => _),\n            });\n        }\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data = this.form.getRawValue();\n        await (data.id\n            ? updateSystem(data.id, data)\n            : addSystem(data)\n        ).toPromise();\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close(true);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { RoomModalComponent } from './room-modal.component';\n\nexport interface RoomListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoomManagementService {\n    private _options = new BehaviorSubject<RoomListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly room_list = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_?.id),\n        switchMap(([bld]) =>\n            querySystems({ zone_id: bld.id }).pipe(\n                map(({ data }) => data),\n                catchError(() => of([]))\n            )\n        ),\n        map((list) =>\n            list\n                .filter((_) => this._org.levelWithID(_.zones as any))\n                .sort((a, b) => a.name.localeCompare(b.name))\n        ),\n        shareReplay(1)\n    );\n\n    public readonly filtered_rooms = combineLatest([\n        this.room_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.zones.includes(options.zone));\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RoomListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRoom(room: PlaceSystem = new PlaceSystem()) {\n        const ref = this._dialog.open(RoomModalComponent, { data: { room } });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'room-manager-topbar',\n    template: ` <div\n        class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n    >\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                [ngModel]=\"(this.filters | async)?.zone\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option [value]=\"building?.id\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button btn (click)=\"newRoom()\" class=\"w-32\">New Room</button>\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar class=\"mr-2\" (modelChange)=\"setSearch($event)\"></searchbar>\n    </div>`,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25rem;\n            }\n        `,\n    ],\n})\nexport class RoomManagerTopbarComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._manager.options;\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._manager.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._manager.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zone) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_id: zone },\n        });\n        this._manager.setFilters({ zone });\n    };\n\n    public readonly newRoom = () => this._manager.editRoom();\n\n    public get building() {\n        return this._org.building;\n    }\n\n    constructor(\n        private _manager: RoomManagementService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_id')) {\n                    const zone = params.get('zone_id');\n                    if (zone.length) {\n                        const level = this._org.levelWithID([zone]);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.setFilters({ zone });\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                var zone = levels.find((lvl) => lvl.id === zone);\n                if (!zone && levels.length) zone = levels[0].id;\n                this.updateZones(zone);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\n\n@Component({\n    selector: 'room-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <custom-table\n                class=\"block min-w-[56rem] w-full h-full\"\n                [dataSource]=\"rooms\"\n                [columns]=\"[\n                    'display_name',\n                    'zones',\n                    'capacity',\n                    'type',\n                    'bookable',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Room Name',\n                    'Level',\n                    'Capacity',\n                    'Room Type',\n                    'Bookable',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '8r', '6r', '8r', '6r', '12r']\"\n                [template]=\"{\n                    bookable: bool_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No rooms for selected level or building\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #bool_template let-data=\"data\">\n            <div\n                [class.bg-red-500]=\"!data\"\n                [class.bg-green-500]=\"data\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n            >\n                <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matTooltip=\"Edit Room\" (click)=\"editRoom(row)\">\n                    <app-icon>edit</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoomListComponent {\n    public readonly rooms = this._manager.filtered_rooms;\n\n    public readonly editRoom = (room) => this._manager.editRoom(room);\n\n    constructor(private _manager: RoomManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RoomManagerComponent } from './room-manager.component';\nimport { RoomManagerTopbarComponent } from './room-manager-topbar.component';\nimport { RoomListComponent } from './room-list.component';\nimport { RoomModalComponent } from './room-modal.component';\nimport { MatChipsModule } from '@angular/material/chips';\n\nconst ROUTES: Route[] = [{ path: '', component: RoomManagerComponent }];\n\n@NgModule({\n    declarations: [\n        RoomManagerComponent,\n        RoomManagerTopbarComponent,\n        RoomListComponent,\n        RoomModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RoomManagerModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-weekview]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col\">\n            <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n            <room-list class=\"block w-full relative flex-1 h-1/2\"></room-list>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RoomManagerComponent {}\n"],"x_google_ignoreList":[]}