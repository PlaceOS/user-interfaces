{"version":3,"file":"apps_concierge_src_app_room-manager_room-manager_module_ts.js","mappings":"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","names":["i0","level_r1","id","display_name","name","RoomModalComponent_main_4_form_1_div_1_mat_option_6_Template","ctx_r1","form","controls","zone","invalid","touched","levels","RoomModalComponent_main_4_form_1_div_3_mat_error_6_Template","RoomModalComponent_main_4_form_1_div_4_mat_error_5_Template","email","RoomModalComponent_main_4_form_1_div_22_mat_error_5_Template","capacity","feature_r5","_r4","$implicit","removeFeature","RoomModalComponent_main_4_form_1_div_25_mat_chip_row_6_Template","$event","_r3","addFeature","features","feature_list","chipList_r6","separators","tz_r7","RoomModalComponent_main_4_form_1_div_1_Template","RoomModalComponent_main_4_form_1_div_3_Template","RoomModalComponent_main_4_form_1_div_4_Template","RoomModalComponent_main_4_form_1_div_6_Template","RoomModalComponent_main_4_form_1_div_7_Template","RoomModalComponent_main_4_form_1_div_22_Template","RoomModalComponent_main_4_form_1_div_23_Template","RoomModalComponent_main_4_form_1_div_24_Template","RoomModalComponent_main_4_form_1_div_25_Template","RoomModalComponent_main_4_form_1_div_26_Template","RoomModalComponent_main_4_form_1_mat_option_36_Template","RoomModalComponent_main_4_form_1_mat_option_37_Template","RoomModalComponent_main_4_form_1_div_38_Template","settings_form","bookable","description","map_id","auto_r8","filtered_timezones","timezones","length","images","RoomModalComponent_main_4_form_1_Template","_r9","save","RoomModalComponent","AsyncHandler","this","value","constructor","_data","_dialog_ref","_org","super","loading","active_levels","generateSystemsFormFields","room","FormGroup","setup","FormControl","breakdown","encryption_levels","EncryptionLevel","None","Support","Admin","NeverDisplay","query_fn","_","queryZones","q","pipe","map","resp","data","ENTER","COMMA","SPACE","ngOnInit","_this","_asyncToGenerator","details","showMetadata","organisation","toPromise","overflow","getItemWithKeys","patchValue","ngOnChanges","changes","updateTimezoneList","subscription","valueChanges","subscribe","timezone","filter","toLowerCase","includes","event","input","trim","push","setValue","existing_feature","index","indexOf","splice","TIMEZONES_IANA","_this2","valid","notifyError","getInvalidFields","join","zones","unique","building","parent_id","disableClose","getRawValue","updateMetadata","events","catch","e","notifyWarn","updateSystem","addSystem","close","static","t","MAT_DIALOG_DATA","i1","i2","core","VBU","selectors","decls","vars","consts","i18n_0","$localize","RoomModalComponent_button_3_Template","RoomModalComponent_main_4_Template","RoomModalComponent_footer_5_Template","RoomModalComponent_ng_template_6_Template","ctx","load_state_r10","RoomManagementService","_dialog","_settings","_options","BehaviorSubject","_change","options","asObservable","room_list","combineLatest","active_building","active_region","b","r","switchMap","bld","region","querySystems","zone_id","get","catchError","of","list","levelWithID","sort","a","localeCompare","shareReplay","filtered_rooms","find","z","search","setFilters","next","getValue","setSearchString","editRoom","PlaceSystem","open","afterClosed","setTimeout","Date","now","i3","jDH","factory","ɵfac","providedIn","tmp_3_0","RoomManagerTopbarComponent_mat_option_11_div_2_Template","use_region","RoomManagerTopbarComponent","root_zone","_manager","_route","_router","levelsForRegion","levelsForBuilding","filters","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","newRoom","manageRestrictions","BookingRulesModalComponent","type","initialised","first","queryParamMap","_ref","params","has","split","_x","apply","arguments","i4","i5","template","rf","RoomManagerTopbarComponent_mat_option_11_Template","tmp_0_0","row_r2","_r1","row","ctx_r2","copyToClipboard","data_r4","tmp_6_0","data_r5","data_r6","row_r8","_r7","RoomListComponent","_clipboard","rooms","copy","notifySuccess","RoomListComponent_ng_template_2_Template","RoomListComponent_ng_template_4_Template","RoomListComponent_ng_template_6_Template","RoomListComponent_ng_template_8_Template","_c0","_c1","_c2","_c3","name_template_r9","bool_template_r11","level_template_r10","action_template_r12","RoomManagerComponent","attrs","ROUTES","path","component","NewRoomManagerComponent","RoomManagerModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild","MapLocation","location","position","asset_id","x","map_width","y","map_height","variance","last_seen","getUnixTime","level","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/room-manager/room-modal.component.ts","./apps/concierge/src/app/room-manager/room-management.service.ts","./apps/concierge/src/app/room-manager/room-manager-topbar.component.ts","./apps/concierge/src/app/room-manager/room-list.component.ts","./apps/concierge/src/app/room-manager/room-manager.component.ts","./apps/concierge/src/app/room-manager/room-manager.module.ts","./apps/concierge/src/app/room-manager/new-room-manager.component.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Component, Inject, SimpleChanges } from '@angular/core';\nimport { SPACE, ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport {\n    EncryptionLevel,\n    addSystem,\n    queryZones,\n    showMetadata,\n    updateMetadata,\n    updateSystem,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    getItemWithKeys,\n    notifyError,\n    notifyInfo,\n    notifyWarn,\n    unique,\n} from '@placeos/common';\nimport { Space, generateSystemsFormFields } from '@placeos/spaces';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'room-form-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Room</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.zone\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.zone.invalid &&\n                            form.controls.zone.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Level<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"zone\"\n                            placeholder=\"Select Level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Level is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.name\"\n                    >\n                        <label\n                            for=\"system-name\"\n                            [class.error]=\"\n                                form.controls.name.invalid &&\n                                form.controls.name.touched\n                            \"\n                            i18n=\"@@nameLabel\"\n                        >\n                            Name<span>*</span>:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-name\"\n                                placeholder=\"Room Name\"\n                                i18n-placeholder=\"@@systemNamePlaceholder\"\n                                formControlName=\"name\"\n                                required\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.name.invalid\"\n                                i18n=\"@@systemNameError\"\n                                >Room name is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.email\"\n                    >\n                        <label\n                            for=\"system-email\"\n                            [class.error]=\"\n                                form.controls.email.invalid &&\n                                form.controls.email.touched\n                            \"\n                            i18n=\"@@emailLabel\"\n                        >\n                            Email:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-email\"\n                                placeholder=\"Room Email\"\n                                i18n-placeholder=\"@@systemEmailPlaceholder\"\n                                formControlName=\"email\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.email.invalid\"\n                                i18n=\"@@emailError\"\n                                >A valid email is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"display-name\" i18n=\"@@displayNameLabel\"\n                            >Display Name:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"display-name\"\n                                placeholder=\"Display Name\"\n                                i18n-placeholder=\"@@displayNamePlaceholder\"\n                                formControlName=\"display_name\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"code-name\" i18n=\"@@codeNameLabel\"\n                            >Code:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"code-name\"\n                                placeholder=\"Code\"\n                                i18n-placeholder=\"@@codeNamePlaceholder\"\n                                formControlName=\"code\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\" [formGroup]=\"settings_form\">\n                    <div class=\"flex-1 flex flex-col space-y-2\">\n                        <label for=\"setup\" class=\"flex items-center\">\n                            Default Setup Duration\n                            <app-icon\n                                class=\"ml-2\"\n                                matTooltip=\"Time before a meeting needed for setup and preparation for the upcoming meeting\"\n                            >\n                                info_outline\n                            </app-icon>\n                        </label>\n                        <a-duration-field\n                            name=\"setup\"\n                            formControlName=\"setup\"\n                            [min]=\"0\"\n                        ></a-duration-field>\n                    </div>\n                    <div class=\"flex-1 flex flex-col space-y-2\">\n                        <label for=\"breakdown\" class=\"flex items-center\">\n                            Default Breakdown Duration\n                            <app-icon\n                                class=\"ml-2\"\n                                matTooltip=\"Time after a meeting needed for cleaning and preparation for next meeting\"\n                            >\n                                info_outline\n                            </app-icon>\n                        </label>\n                        <a-duration-field\n                            name=\"breakdown\"\n                            [min]=\"0\"\n                            formControlName=\"breakdown\"\n                        ></a-duration-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.capacity\"\n                    >\n                        <label\n                            for=\"capacity\"\n                            [class.error]=\"\n                                form.controls.capacity.invalid &&\n                                form.controls.capacity.touched\n                            \"\n                            i18n=\"@@capacityLabel\"\n                        >\n                            Capacity:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"capacity\"\n                                type=\"number\"\n                                placeholder=\"Capacity\"\n                                i18n-placeholder=\"@@capacityPlaceholder\"\n                                formControlName=\"capacity\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.capacity.invalid\"\n                                i18n=\"@@capacityError\"\n                            >\n                                A valid positive number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.bookable\">\n                        <mat-checkbox\n                            name=\"bookable\"\n                            formControlName=\"bookable\"\n                            i18n=\"@@bookableLabel\"\n                        >\n                            Bookable\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                    <label for=\"description\" i18n=\"@@descriptionLabel\"\n                        >Description:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"description\"\n                            placeholder=\"Description\"\n                            i18n=\"@@descriptionPlaceholder\"\n                            formControlName=\"description\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.features\">\n                    <label\n                        [class.error]=\"\n                            form.controls.features.invalid &&\n                            form.controls.features.touched\n                        \"\n                        i18n=\"@@featuresLabel\"\n                    >\n                        Features:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-chip-grid #chipList aria-label=\"Room features\">\n                            <mat-chip-row\n                                *ngFor=\"let feature of feature_list\"\n                                [selectable]=\"true\"\n                                [removable]=\"true\"\n                                (removed)=\"removeFeature(feature)\"\n                            >\n                                {{ feature }}\n                                <app-icon matChipRemove>close</app-icon>\n                            </mat-chip-row>\n                            <input\n                                placeholder=\"New feature...\"\n                                [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separators\"\n                                [matChipInputAddOnBlur]=\"true\"\n                                (matChipInputTokenEnd)=\"addFeature($event)\"\n                            />\n                        </mat-chip-grid>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.map_id\">\n                    <label for=\"map_id\" i18n=\"@@mapIdLabel\">Map ID:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"map_id\"\n                            i18n-placeholder=\"@@mapIdPlaceholder\"\n                            placeholder=\"Map SVG ID selector e.g. area-01.10-status\"\n                            formControlName=\"map_id\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"timezone\">Timezone</label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Room timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                    <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                    <image-list-field\n                        name=\"images\"\n                        formControlName=\"images\"\n                    ></image-list-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving room...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            mat-checkbox {\n                margin-top: 2.5em;\n                margin-bottom: 1.5em;\n            }\n\n            @media screen and (max-width: 640px) {\n                mat-checkbox {\n                    margin-top: 0;\n                }\n            }\n        `,\n    ],\n})\nexport class RoomModalComponent extends AsyncHandler {\n    public loading = false;\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Group of form fields used for creating the system */\n    public form = generateSystemsFormFields(this._data.room as any);\n    public settings_form = new FormGroup({\n        setup: new FormControl(0),\n        breakdown: new FormControl(0),\n    });\n    /** Levels of encyption available for the system's settings */\n    public encryption_levels: any[] = [\n        { id: EncryptionLevel.None, name: 'None' },\n        { id: EncryptionLevel.Support, name: 'Support' },\n        { id: EncryptionLevel.Admin, name: 'Admin' },\n        { id: EncryptionLevel.NeverDisplay, name: 'Never Display' },\n    ];\n    /** Function for querying zones */\n    public readonly query_fn = (_: string) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n    /** List of separator characters for features */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public get feature_list(): string[] {\n        return this.form.controls.features.value;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { room: Space },\n        private _dialog_ref: MatDialogRef<RoomModalComponent>,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        const { details } = await showMetadata(\n            this._org.organisation.id,\n            'settings'\n        ).toPromise();\n        const overflow = getItemWithKeys(['events', 'overflow'], details) || {};\n        if (this._data.room.id && overflow[this._data.room.id]) {\n            this.settings_form.patchValue(overflow[this._data.room.id]);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.updateTimezoneList();\n            this.subscription(\n                'tz-change',\n                this.form.valueChanges.subscribe(\n                    ({ timezone }) =>\n                        (this.filtered_timezones = this.timezones.filter((_) =>\n                            _.toLowerCase().includes(timezone.toLowerCase())\n                        ))\n                )\n            );\n        }\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addFeature(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.features) return;\n        const input = event.input;\n        const value = event.value;\n        const feature_list = this.feature_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.features.setValue(feature_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove feature from the list\n     * @param existing_feature Feature to remove\n     */\n    public removeFeature(existing_feature: string): void {\n        if (!this.form || !this.form.controls.features) return;\n        const feature_list = this.feature_list;\n        const index = feature_list.indexOf(existing_feature);\n\n        if (index >= 0) {\n            feature_list.splice(index, 1);\n            this.form.controls.features.setValue(feature_list);\n        }\n    }\n\n    public updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid)\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        if (!this.form.value.id) {\n            this.form.patchValue({\n                display_name:\n                    this.form.value.display_name || this.form.value.name,\n                zones: unique([\n                    this._org.organisation.id,\n                    this._org.building.parent_id,\n                    this._org.building.id,\n                    `${this.form.value.zone?.id || this.form.value.zone || ''}`,\n                ]).filter((_) => _),\n            });\n        }\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data = this.form.getRawValue();\n        const { details } = (await showMetadata(\n            this._org.organisation.id,\n            'settings'\n        ).toPromise()) as any;\n        const overflow = getItemWithKeys(['events', 'overflow'], details) || {};\n        overflow[data.id] = this.settings_form.value;\n        await updateMetadata(this._org.organisation.id, {\n            name: 'settings',\n            details: {\n                ...details,\n                events: { ...(details.events || {}), overflow },\n            },\n            description: '',\n        })\n            .toPromise()\n            .catch((e) =>\n                notifyWarn('Unable to save room setup and breakdown times')\n            );\n        await (data.id\n            ? updateSystem(data.id, data)\n            : addSystem(data)\n        ).toPromise();\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close(true);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { RoomModalComponent } from './room-modal.component';\nimport { SettingsService } from '@placeos/common';\n\nexport interface RoomListOptions {\n    zones?: string[];\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoomManagementService {\n    private _options = new BehaviorSubject<RoomListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly room_list = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n        this._change,\n    ]).pipe(\n        filter(([b, r]) => !!b?.id),\n        switchMap(([bld, region]) =>\n            querySystems({\n                zone_id:\n                    (this._settings.get('use_region') ? region.id : '') ||\n                    bld.id,\n            }).pipe(\n                map(({ data }) => data),\n                catchError(() => of([]))\n            )\n        ),\n        map((list) =>\n            list\n                .filter((_) => this._org.levelWithID(_.zones as any))\n                .sort((a, b) => a.name.localeCompare(b.name))\n        ),\n        shareReplay(1)\n    );\n\n    public readonly filtered_rooms = combineLatest([\n        this.room_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zones?.length) {\n                list = list.filter((_) =>\n                    options.zones.find((z) => _.zones.includes(z))\n                );\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {}\n\n    public setFilters(options: Partial<RoomListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRoom(room: PlaceSystem = new PlaceSystem()) {\n        const ref = this._dialog.open(RoomModalComponent, { data: { room } });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { first, map, take } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\nimport { combineLatest } from 'rxjs';\n\n@Component({\n    selector: 'room-manager-topbar',\n    template: `\n        <div class=\"flex items-center px-8 pt-4 space-x-2\">\n            <h2 class=\"text-2xl font-medium\">Room Management</h2>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar (modelChange)=\"setSearch($event)\"></searchbar>\n            <button btn (click)=\"newRoom()\" class=\"w-40\">New Room</button>\n        </div>\n        <div class=\"flex items-center bg-base-100 h-20 px-8 space-x-2\">\n            <mat-form-field appearance=\"outline\" class=\"no-subscript w-60\">\n                <mat-select\n                    [ngModel]=\"(filters | async)?.zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                    multiple\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        <div class=\"flex flex-col-reverse\">\n                            <div class=\"text-xs opacity-30\" *ngIf=\"use_region\">\n                                {{ (level.parent_id | building)?.display_name }}\n                                <span class=\"opacity-0\"> - </span>\n                            </div>\n                            <div>\n                                {{ level.display_name || level.name }}\n                            </div>\n                        </div>\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <button\n                btn\n                icon\n                matRipple\n                class=\"bg-secondary text-secondary-content rounded h-12 w-12\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Room Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25rem;\n            }\n        `,\n    ],\n})\nexport class RoomManagerTopbarComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n    ]).pipe(\n        map(([bld, region]) =>\n            this.use_region\n                ? this._org.levelsForRegion(region)\n                : this._org.levelsForBuilding(bld)\n        )\n    );\n\n    public readonly filters = this._manager.options;\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._manager.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._manager.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n    };\n\n    public readonly newRoom = () => this._manager.editRoom();\n\n    public get building() {\n        return this._org.building;\n    }\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    public get root_zone() {\n        return (\n            (this.use_region ? this._org.region.id : '') ||\n            this._org.building.id\n        );\n    }\n\n    constructor(\n        private _manager: RoomManagementService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'room' },\n        });\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe(async (params) => {\n                if (params.has('zone_ids')) {\n                    const zone_list = (params.get('zone_ids') || '').split(',');\n                    const zones = zone_list.filter((z) => z);\n                    this._manager.setFilters({ zones });\n                }\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\nimport { Clipboard } from '@angular/cdk/clipboard';\nimport { notifySuccess } from '@placeos/common';\n\n@Component({\n    selector: 'room-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-8\">\n            <custom-table\n                class=\"block min-w-[48rem] w-full h-full\"\n                [dataSource]=\"rooms\"\n                [columns]=\"[\n                    'display_name',\n                    'zones',\n                    'capacity',\n                    'type',\n                    'bookable',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Room Name',\n                    'Level',\n                    'Capacity',\n                    'Room Type',\n                    'Bookable',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '8r', '6r', '8r', '6r', '3.75r']\"\n                [template]=\"{\n                    display_name: name_template,\n                    bookable: bool_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No rooms for selected level or building\"\n            ></custom-table>\n        </div>\n        <ng-template #name_template let-row=\"row\" let-data=\"data\">\n            <span\n                [matTooltip]=\"row.id\"\n                class=\"underline\"\n                (click)=\"copyToClipboard(row.id)\"\n                >{{ data }}</span\n            >\n        </ng-template>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #bool_template let-data=\"data\">\n            <div\n                [class.bg-error]=\"!data\"\n                [class.bg-success]=\"data\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n            >\n                <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    btn\n                    icon\n                    matRipple\n                    matTooltip=\"Edit Room\"\n                    (click)=\"editRoom(row)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoomListComponent {\n    public readonly rooms = this._manager.filtered_rooms;\n\n    public readonly editRoom = (room) => this._manager.editRoom(room);\n\n    public readonly copyToClipboard = (id: string) => {\n        const success = this._clipboard.copy(id);\n        if (success) notifySuccess('Room ID copied to clipboard.');\n    };\n\n    constructor(\n        private _manager: RoomManagementService,\n        private _clipboard: Clipboard\n    ) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-room-manager]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col\">\n            <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n            <room-list class=\"block w-full relative flex-1 h-1/2\"></room-list>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RoomManagerComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RoomManagerComponent } from './room-manager.component';\nimport { RoomManagerTopbarComponent } from './room-manager-topbar.component';\nimport { RoomListComponent } from './room-list.component';\nimport { RoomModalComponent } from './room-modal.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { NewRoomManagerComponent } from './new-room-manager.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: RoomManagerComponent },\n    { path: 'new', component: NewRoomManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewRoomManagerComponent,\n        RoomManagerComponent,\n        RoomManagerTopbarComponent,\n        RoomListComponent,\n        RoomModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RoomManagerModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-new-room-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n                <room-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></room-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class NewRoomManagerComponent {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}