{"version":3,"file":"apps_concierge_src_app_room-manager_room-manager_module_ts.js","mappings":"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","names":["i0","level_r21","id","display_name","name","RoomModalComponent_main_4_form_1_div_1_mat_option_6_Template","ctx_r6","form","controls","zone","invalid","touched","levels","RoomModalComponent_main_4_form_1_div_3_mat_error_6_Template","ctx_r7","RoomModalComponent_main_4_form_1_div_4_mat_error_5_Template","ctx_r8","email","RoomModalComponent_main_4_form_1_div_22_mat_error_5_Template","ctx_r11","capacity","feature_r27","_r29","$implicit","ctx_r28","removeFeature","RoomModalComponent_main_4_form_1_div_25_mat_chip_row_6_Template","$event","_r31","ctx_r30","addFeature","ctx_r14","features","feature_list","_r25","separators","tz_r32","RoomModalComponent_main_4_form_1_div_1_Template","RoomModalComponent_main_4_form_1_div_3_Template","RoomModalComponent_main_4_form_1_div_4_Template","RoomModalComponent_main_4_form_1_div_6_Template","RoomModalComponent_main_4_form_1_div_7_Template","RoomModalComponent_main_4_form_1_div_22_Template","RoomModalComponent_main_4_form_1_div_23_Template","RoomModalComponent_main_4_form_1_div_24_Template","RoomModalComponent_main_4_form_1_div_25_Template","RoomModalComponent_main_4_form_1_div_26_Template","RoomModalComponent_main_4_form_1_mat_option_36_Template","RoomModalComponent_main_4_form_1_mat_option_37_Template","RoomModalComponent_main_4_form_1_div_38_Template","ctx_r5","settings_form","bookable","description","map_id","_r16","filtered_timezones","timezones","length","images","RoomModalComponent_main_4_form_1_Template","ctx_r1","_r34","ctx_r33","save","RoomModalComponent","AsyncHandler","this","value","constructor","_data","_dialog_ref","_org","super","loading","active_levels","generateSystemsFormFields","room","FormGroup","setup","FormControl","breakdown","encryption_levels","EncryptionLevel","query_fn","_","queryZones","q","pipe","map","resp","data","ENTER","COMMA","SPACE","ngOnInit","_this","_asyncToGenerator","details","showMetadata","organisation","toPromise","overflow","getItemWithKeys","patchValue","ngOnChanges","changes","updateTimezoneList","subscription","valueChanges","subscribe","timezone","filter","toLowerCase","includes","event","input","trim","push","setValue","existing_feature","index","indexOf","splice","TIMEZONES_IANA","_this2","valid","notifyError","getInvalidFields","join","zones","unique","building","parent_id","disableClose","getRawValue","updateMetadata","events","updateSystem","addSystem","close","t","MAT_DIALOG_DATA","i1","i2","core","Xpm","selectors","decls","vars","consts","i18n_0","$localize","RoomModalComponent_button_3_Template","RoomModalComponent_main_4_Template","RoomModalComponent_footer_5_Template","RoomModalComponent_ng_template_6_Template","ctx","_r3","RoomManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","room_list","combineLatest","active_building","switchMap","bld","querySystems","zone_id","catchError","of","list","levelWithID","sort","a","b","localeCompare","shareReplay","filtered_rooms","search","setFilters","next","getValue","setSearchString","editRoom","PlaceSystem","open","afterClosed","setTimeout","Date","now","Yz7","factory","ɵfac","providedIn","data_r14","ctx_r9","time_format","data_r15","_r20","row_r16","row","ctx_r18","edit","RoomRestrictionModalComponent_ng_container_7_main_1_ng_template_6_button_1_Template","_r22","ctx_r21","remove","RoomRestrictionModalComponent_ng_container_7_main_1_ng_template_2_Template","RoomRestrictionModalComponent_ng_container_7_main_1_ng_template_4_Template","RoomRestrictionModalComponent_ng_container_7_main_1_ng_template_6_Template","restrictions","_c0","_c1","_c2","_c3","_r8","_r10","_r12","_r24","ctx_r23","add","ctx_r25","RoomRestrictionModalComponent_ng_container_7_main_1_Template","RoomRestrictionModalComponent_ng_container_7_footer_2_Template","adding","_r4","row_r29","selected","_r33","ctx_r32","start_date","ctx_r34","setEndDate","ctx_r35","ctx_r36","setStart","ctx_r37","setEnd","RoomRestrictionModalComponent_ng_template_10_ng_template_23_Template","ctx_r38","ctx_r39","addRestriction","_r26","end_date","valueOf","_c4","_c5","_c6","_c7","_r27","RoomRestrictionModalComponent","_settings","_rooms","startOfDay","endOfDay","end","start","initialised","first","Array","item","items","reduce","restriction","rooms","take","randomInt","_this3","isBefore","catch","notifySuccess","i3","i4","template","rf","RoomRestrictionModalComponent_ng_container_2_Template","RoomRestrictionModalComponent_ng_container_7_Template","RoomRestrictionModalComponent_ng_template_8_Template","RoomRestrictionModalComponent_ng_template_10_Template","_r2","level_r1","RoomManagerTopbarComponent","_manager","_route","_router","filters","setSearch","str","updateZones","navigate","relativeTo","queryParams","newRoom","manageRestrictions","queryParamMap","_ref","params","has","new_zone","get","level","buildings","find","_x","apply","arguments","lvl","RoomManagerTopbarComponent_mat_option_11_Template","tmp_0_0","data_r6","data_r7","row_r8","RoomListComponent","RoomListComponent_ng_template_2_Template","RoomListComponent_ng_template_4_Template","RoomListComponent_ng_template_6_Template","_r0","RoomManagerComponent","attrs","ROUTES","path","component","NewRoomManagerComponent","RoomManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/room-manager/room-modal.component.ts","./apps/concierge/src/app/room-manager/room-management.service.ts","./apps/concierge/src/app/room-manager/room-restriction-modal.component.ts","./apps/concierge/src/app/room-manager/room-manager-topbar.component.ts","./apps/concierge/src/app/room-manager/room-list.component.ts","./apps/concierge/src/app/room-manager/room-manager.component.ts","./apps/concierge/src/app/room-manager/room-manager.module.ts","./apps/concierge/src/app/room-manager/new-room-manager.component.ts"],"sourcesContent":["import { Component, Inject, SimpleChanges } from '@angular/core';\nimport { SPACE, ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport {\n    EncryptionLevel,\n    addSystem,\n    queryZones,\n    showMetadata,\n    updateMetadata,\n    updateSystem,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    getItemWithKeys,\n    notifyError,\n    unique,\n} from '@placeos/common';\nimport { Space, generateSystemsFormFields } from '@placeos/spaces';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'room-form-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Room</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.zone\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.zone.invalid &&\n                            form.controls.zone.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Level<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"zone\"\n                            placeholder=\"Select Level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Level is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.name\"\n                    >\n                        <label\n                            for=\"system-name\"\n                            [class.error]=\"\n                                form.controls.name.invalid &&\n                                form.controls.name.touched\n                            \"\n                            i18n=\"@@nameLabel\"\n                        >\n                            Name<span>*</span>:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-name\"\n                                placeholder=\"Room Name\"\n                                i18n-placeholder=\"@@systemNamePlaceholder\"\n                                formControlName=\"name\"\n                                required\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.name.invalid\"\n                                i18n=\"@@systemNameError\"\n                                >Room name is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.email\"\n                    >\n                        <label\n                            for=\"system-email\"\n                            [class.error]=\"\n                                form.controls.email.invalid &&\n                                form.controls.email.touched\n                            \"\n                            i18n=\"@@emailLabel\"\n                        >\n                            Email:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-email\"\n                                placeholder=\"Room Email\"\n                                i18n-placeholder=\"@@systemEmailPlaceholder\"\n                                formControlName=\"email\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.email.invalid\"\n                                i18n=\"@@emailError\"\n                                >A valid email is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"display-name\" i18n=\"@@displayNameLabel\"\n                            >Display Name:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"display-name\"\n                                placeholder=\"Display Name\"\n                                i18n-placeholder=\"@@displayNamePlaceholder\"\n                                formControlName=\"display_name\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"code-name\" i18n=\"@@codeNameLabel\"\n                            >Code:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"code-name\"\n                                placeholder=\"Code\"\n                                i18n-placeholder=\"@@codeNamePlaceholder\"\n                                formControlName=\"code\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\" [formGroup]=\"settings_form\">\n                    <div class=\"flex-1 flex flex-col space-y-2\">\n                        <label for=\"setup\" class=\"flex items-center\">\n                            Default Setup Duration\n                            <app-icon\n                                class=\"ml-2\"\n                                matTooltip=\"Time before a meeting needed for setup and preparation for the upcoming meeting\"\n                            >\n                                info_outline\n                            </app-icon>\n                        </label>\n                        <a-duration-field\n                            name=\"setup\"\n                            formControlName=\"setup\"\n                            [min]=\"0\"\n                        ></a-duration-field>\n                    </div>\n                    <div class=\"flex-1 flex flex-col space-y-2\">\n                        <label for=\"breakdown\" class=\"flex items-center\">\n                            Default Breakdown Duration\n                            <app-icon\n                                class=\"ml-2\"\n                                matTooltip=\"Time after a meeting needed for cleaning and preparation for next meeting\"\n                            >\n                                info_outline\n                            </app-icon>\n                        </label>\n                        <a-duration-field\n                            name=\"breakdown\"\n                            [min]=\"0\"\n                            formControlName=\"breakdown\"\n                        ></a-duration-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.capacity\"\n                    >\n                        <label\n                            for=\"capacity\"\n                            [class.error]=\"\n                                form.controls.capacity.invalid &&\n                                form.controls.capacity.touched\n                            \"\n                            i18n=\"@@capacityLabel\"\n                        >\n                            Capacity:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"capacity\"\n                                type=\"number\"\n                                placeholder=\"Capacity\"\n                                i18n-placeholder=\"@@capacityPlaceholder\"\n                                formControlName=\"capacity\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.capacity.invalid\"\n                                i18n=\"@@capacityError\"\n                            >\n                                A valid positive number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.bookable\">\n                        <mat-checkbox\n                            name=\"bookable\"\n                            formControlName=\"bookable\"\n                            i18n=\"@@bookableLabel\"\n                        >\n                            Bookable\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                    <label for=\"description\" i18n=\"@@descriptionLabel\"\n                        >Description:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"description\"\n                            placeholder=\"Description\"\n                            i18n=\"@@descriptionPlaceholder\"\n                            formControlName=\"description\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.features\">\n                    <label\n                        [class.error]=\"\n                            form.controls.features.invalid &&\n                            form.controls.features.touched\n                        \"\n                        i18n=\"@@featuresLabel\"\n                    >\n                        Features:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-chip-grid #chipList aria-label=\"Room features\">\n                            <mat-chip-row\n                                *ngFor=\"let feature of feature_list\"\n                                [selectable]=\"true\"\n                                [removable]=\"true\"\n                                (removed)=\"removeFeature(feature)\"\n                            >\n                                {{ feature }}\n                                <app-icon matChipRemove>close</app-icon>\n                            </mat-chip-row>\n                            <input\n                                placeholder=\"New feature...\"\n                                [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separators\"\n                                [matChipInputAddOnBlur]=\"true\"\n                                (matChipInputTokenEnd)=\"addFeature($event)\"\n                            />\n                        </mat-chip-grid>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.map_id\">\n                    <label for=\"map_id\" i18n=\"@@mapIdLabel\">Map ID:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"map_id\"\n                            i18n-placeholder=\"@@mapIdPlaceholder\"\n                            placeholder=\"Map SVG ID selector e.g. area-01.10-status\"\n                            formControlName=\"map_id\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"timezone\">Timezone</label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Room timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                    <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                    <image-list-field\n                        name=\"images\"\n                        formControlName=\"images\"\n                    ></image-list-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving room...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            mat-checkbox {\n                margin-top: 2.5em;\n                margin-bottom: 1.5em;\n            }\n\n            @media screen and (max-width: 640px) {\n                mat-checkbox {\n                    margin-top: 0;\n                }\n            }\n        `,\n    ],\n})\nexport class RoomModalComponent extends AsyncHandler {\n    public loading = false;\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Group of form fields used for creating the system */\n    public form = generateSystemsFormFields(this._data.room as any);\n    public settings_form = new FormGroup({\n        setup: new FormControl(0),\n        breakdown: new FormControl(0),\n    });\n    /** Levels of encyption available for the system's settings */\n    public encryption_levels: any[] = [\n        { id: EncryptionLevel.None, name: 'None' },\n        { id: EncryptionLevel.Support, name: 'Support' },\n        { id: EncryptionLevel.Admin, name: 'Admin' },\n        { id: EncryptionLevel.NeverDisplay, name: 'Never Display' },\n    ];\n    /** Function for querying zones */\n    public readonly query_fn = (_: string) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n    /** List of separator characters for features */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public get feature_list(): string[] {\n        return this.form.controls.features.value;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { room: Space },\n        private _dialog_ref: MatDialogRef<RoomModalComponent>,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        const { details } = await showMetadata(\n            this._org.organisation.id,\n            'settings'\n        ).toPromise();\n        const overflow = getItemWithKeys(['events', 'overflow'], details) || {};\n        if (this._data.room.id && overflow[this._data.room.id]) {\n            this.settings_form.patchValue(overflow[this._data.room.id]);\n        }\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.updateTimezoneList();\n            this.subscription(\n                'tz-change',\n                this.form.valueChanges.subscribe(\n                    ({ timezone }) =>\n                        (this.filtered_timezones = this.timezones.filter((_) =>\n                            _.toLowerCase().includes(timezone.toLowerCase())\n                        ))\n                )\n            );\n        }\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addFeature(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.features) return;\n        const input = event.input;\n        const value = event.value;\n        const feature_list = this.feature_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.features.setValue(feature_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove feature from the list\n     * @param existing_feature Feature to remove\n     */\n    public removeFeature(existing_feature: string): void {\n        if (!this.form || !this.form.controls.features) return;\n        const feature_list = this.feature_list;\n        const index = feature_list.indexOf(existing_feature);\n\n        if (index >= 0) {\n            feature_list.splice(index, 1);\n            this.form.controls.features.setValue(feature_list);\n        }\n    }\n\n    public updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid)\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        if (!this.form.value.id) {\n            this.form.patchValue({\n                display_name:\n                    this.form.value.display_name || this.form.value.name,\n                zones: unique([\n                    this._org.organisation.id,\n                    this._org.building.parent_id,\n                    this._org.building.id,\n                    `${this.form.value.zone?.id || this.form.value.zone || ''}`,\n                ]).filter((_) => _),\n            });\n        }\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data = this.form.getRawValue();\n        const { details } = (await showMetadata(\n            this._org.organisation.id,\n            'settings'\n        ).toPromise()) as any;\n        const overflow = getItemWithKeys(['events', 'overflow'], details) || {};\n        overflow[data.id] = this.settings_form.value;\n        await updateMetadata(this._org.organisation.id, {\n            name: 'settings',\n            details: {\n                ...details,\n                events: { ...(details.events || {}), overflow },\n            },\n            description: '',\n        }).toPromise();\n        await (data.id\n            ? updateSystem(data.id, data)\n            : addSystem(data)\n        ).toPromise();\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close(true);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { RoomModalComponent } from './room-modal.component';\n\nexport interface RoomListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoomManagementService {\n    private _options = new BehaviorSubject<RoomListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly room_list = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_?.id),\n        switchMap(([bld]) =>\n            querySystems({ zone_id: bld.id }).pipe(\n                map(({ data }) => data),\n                catchError(() => of([]))\n            )\n        ),\n        map((list) =>\n            list\n                .filter((_) => this._org.levelWithID(_.zones as any))\n                .sort((a, b) => a.name.localeCompare(b.name))\n        ),\n        shareReplay(1)\n    );\n\n    public readonly filtered_rooms = combineLatest([\n        this.room_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.zones.includes(options.zone));\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RoomListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRoom(room: PlaceSystem = new PlaceSystem()) {\n        const ref = this._dialog.open(RoomModalComponent, { data: { room } });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {\n    ResourceRestriction,\n    SettingsService,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { endOfDay, isBefore, startOfDay } from 'date-fns';\nimport { first, take } from 'rxjs/operators';\n\nimport { RoomManagementService } from './room-management.service';\nimport { randomInt } from '@placeos/common';\n\n@Component({\n    selector: 'room-restriction-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h2>\n                <ng-container *ngIf=\"adding\">Add</ng-container> Room\n                Restrictions\n            </h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main\n                class=\"h-[65vh] overflow-auto\"\n                *ngIf=\"!adding; else add_state\"\n            >\n                <custom-table\n                    class=\"block w-[36rem] max-w-[80vw]\"\n                    [dataSource]=\"restrictions\"\n                    [columns]=\"['start', 'end', 'items', 'actions']\"\n                    [display_column]=\"['Start', 'End', 'No. of Rooms', ' ']\"\n                    [column_size]=\"['10r', '10r', 'flex', '7r']\"\n                    [template]=\"{\n                        start: date_template,\n                        end: date_template,\n                        items: count_template,\n                        actions: actions_template\n                    }\"\n                    empty=\"No room restrictions set\"\n                ></custom-table>\n                <ng-template #date_template let-data=\"data\">\n                    {{ data | date: 'mediumDate' }}\n                    {{ data | date: time_format }}\n                </ng-template>\n                <ng-template #count_template let-data=\"data\">\n                    {{ data?.length || '0' }} room(s)\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <div class=\"flex items-center justify-end space-x-2 w-full\">\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            *ngIf=\"row.id\"\n                            (click)=\"edit(row)\"\n                        >\n                            <app-icon>edit</app-icon>\n                        </button>\n                        <button btn icon matRipple (click)=\"remove(row)\">\n                            <app-icon>delete</app-icon>\n                        </button>\n                    </div>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n                *ngIf=\"!adding\"\n            >\n                <button btn matRipple class=\"inverse w-40\" (click)=\"add()\">\n                    Add Restriction\n                </button>\n                <button btn matRipple (click)=\"save()\" class=\"w-40\">\n                    Save Restrictions\n                </button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div\n                class=\"flex flex-col items-center justify-center w-[20rem] h-[16rem] space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Saving room restriction changes...</p>\n            </div>\n        </ng-template>\n        <ng-template #add_state>\n            <main class=\"flex flex-col h-[65vh] overflow-auto\">\n                <div class=\"flex items-center space-x-2 px-2 pt-2\">\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <mat-date-range-input [rangePicker]=\"picker\">\n                            <input\n                                matStartDate\n                                placeholder=\"Start date\"\n                                [(ngModel)]=\"start_date\"\n                            />\n                            <input\n                                matEndDate\n                                placeholder=\"End date\"\n                                [ngModel]=\"end_date\"\n                                (ngModelChange)=\"setEndDate($event)\"\n                            />\n                        </mat-date-range-input>\n                        <mat-datepicker-toggle\n                            matIconSuffix\n                            [for]=\"picker\"\n                        ></mat-datepicker-toggle>\n                        <mat-date-range-picker #picker></mat-date-range-picker>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <app-icon matPrefix>search</app-icon>\n                        <input\n                            matInput\n                            [(ngModel)]=\"search\"\n                            placeholder=\"Filter rooms\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex items-center space-x-2 px-2 -mt-4\">\n                    <div class=\"\">\n                        <label for=\"start-time\">Start Time</label>\n                        <a-time-field\n                            name=\"start-time\"\n                            [no_past_times]=\"false\"\n                            [ngModel]=\"start_date.valueOf()\"\n                            (ngModelChange)=\"setStart($event)\"\n                            class=\"flex-1\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"\">\n                        <label for=\"end-time\">End Time</label>\n                        <a-time-field\n                            name=\"end-time\"\n                            [no_past_times]=\"false\"\n                            [ngModel]=\"end_date.valueOf()\"\n                            (ngModelChange)=\"setEnd($event)\"\n                            class=\"flex-1\"\n                        ></a-time-field>\n                    </div>\n                </div>\n                <custom-table\n                    class=\"block w-[36rem] max-w-[80vw]\"\n                    [dataSource]=\"room_list\"\n                    [filter]=\"search\"\n                    [columns]=\"['toggle', 'display_name', 'map_id']\"\n                    [display_column]=\"[' ', 'Name', 'Map ID']\"\n                    [column_size]=\"['4r', 'flex', '12r']\"\n                    [template]=\"{\n                        toggle: toggle_template\n                    }\"\n                    empty=\"No room restrictions set\"\n                ></custom-table>\n                <ng-template #toggle_template let-row=\"row\">\n                    <mat-checkbox\n                        [(ngModel)]=\"selected[row.id || row.map_id]\"\n                    ></mat-checkbox>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n            >\n                <button\n                    btn\n                    matRipple\n                    class=\"inverse w-32\"\n                    (click)=\"adding = false\"\n                >\n                    Back\n                </button>\n                <button btn matRipple (click)=\"addRestriction()\" class=\"w-48\">\n                    Add to Restrictions\n                </button>\n            </footer>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoomRestrictionModalComponent {\n    public loading = false;\n    public adding = false;\n    public search = '';\n    public id = '';\n    public selected: Record<string, boolean> = {};\n    public start_date = startOfDay(Date.now());\n    public end_date = endOfDay(Date.now());\n    public restrictions: ResourceRestriction[] = [];\n    public readonly room_list = this._rooms.room_list;\n\n    public readonly setEndDate = (end: Date) => (this.end_date = endOfDay(end));\n    public readonly setStart = (start: number) =>\n        (this.start_date = new Date(start));\n    public readonly setEnd = (end: number) => (this.end_date = new Date(end));\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _rooms: RoomManagementService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _dialog_ref: MatDialogRef<RoomRestrictionModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        showMetadata(this._org.building.id, 'room_restrictions').subscribe(\n            ({ details }) => {\n                this.restrictions = details instanceof Array ? details : [];\n            }\n        );\n    }\n\n    public add() {\n        this.search = '';\n        this.id = '';\n        this.start_date = startOfDay(Date.now());\n        this.end_date = endOfDay(Date.now());\n        this.selected = {};\n        this.adding = true;\n    }\n\n    public edit(item: ResourceRestriction) {\n        this.search = '';\n        this.id = item.id;\n        this.start_date = new Date(item.start);\n        this.end_date = new Date(item.end);\n        this.selected = item.items.reduce(\n            (map, id) => ({ ...map, [id]: true }),\n            {}\n        );\n        this.adding = true;\n    }\n\n    public remove(restriction: ResourceRestriction) {\n        this.restrictions = this.restrictions.filter((_) => _ !== restriction);\n    }\n\n    public async addRestriction() {\n        const rooms = await this.room_list.pipe(take(1)).toPromise();\n        if (this.id) {\n            this.restrictions = this.restrictions.filter(\n                (_) => _.id !== this.id\n            );\n        }\n        this.restrictions.push({\n            id: this.id || `restriction-${randomInt(999_999, 9_999_999)}`,\n            start: this.start_date.valueOf(),\n            end: this.end_date.valueOf(),\n            items: rooms.filter((_) => this.selected[_.id]).map((_) => _.id),\n        });\n        this.adding = false;\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        await updateMetadata(this._org.building.id, {\n            name: 'room_restrictions',\n            description: 'Room restrictions',\n            details: this.restrictions.filter((_) =>\n                isBefore(Date.now(), _.end)\n            ),\n        })\n            .toPromise()\n            .catch((_) => {\n                this.loading = false;\n                this._dialog_ref.disableClose = false;\n                notifyError('Failed to update room restrictions');\n                throw _;\n            });\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close();\n        notifySuccess('Successfully updated room restrictions');\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { first, take } from 'rxjs/operators';\nimport { RoomRestrictionModalComponent } from './room-restriction-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n    selector: 'room-manager-topbar',\n    template: `\n        <div class=\"flex items-center justify-between p-4\">\n            <h2 class=\"text-2xl font-medium\">Room Management</h2>\n            <button btn (click)=\"newRoom()\" class=\"w-32\">New Room</button>\n        </div>\n        <div\n            class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"(this.filters | async)?.zone\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option [value]=\"building?.id\">All Levels</mat-option>\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-2\"></div>\n            <button\n                btn\n                icon\n                matRipple\n                class=\"bg-primary text-white rounded\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Room Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25rem;\n            }\n        `,\n    ],\n})\nexport class RoomManagerTopbarComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._manager.options;\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._manager.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._manager.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zone) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_id: zone },\n        });\n        this._manager.setFilters({ zone });\n    };\n\n    public readonly newRoom = () => this._manager.editRoom();\n\n    public get building() {\n        return this._org.building;\n    }\n\n    constructor(\n        private _manager: RoomManagementService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(RoomRestrictionModalComponent, {});\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe(async (params) => {\n                if (params.has('zone_id')) {\n                    const new_zone = params.get('zone_id');\n                    const { zone } = await this._manager.options\n                        .pipe(take(1))\n                        .toPromise();\n                    if (new_zone && new_zone !== zone) {\n                        const level = this._org.levelWithID([new_zone]);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.setFilters({ zone: new_zone });\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                var zone = levels.find((lvl) => lvl.id === zone);\n                if (!zone && levels.length) zone = levels[0].id;\n                this.updateZones(zone);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\n\n@Component({\n    selector: 'room-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[48rem] w-full h-full\"\n                [dataSource]=\"rooms\"\n                [columns]=\"[\n                    'display_name',\n                    'zones',\n                    'capacity',\n                    'type',\n                    'bookable',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Room Name',\n                    'Level',\n                    'Capacity',\n                    'Room Type',\n                    'Bookable',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '8r', '6r', '8r', '6r', '3.75r']\"\n                [template]=\"{\n                    bookable: bool_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No rooms for selected level or building\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #bool_template let-data=\"data\">\n            <div\n                [class.bg-red-500]=\"!data\"\n                [class.bg-green-500]=\"data\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n            >\n                <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    btn\n                    icon\n                    matRipple\n                    matTooltip=\"Edit Room\"\n                    (click)=\"editRoom(row)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoomListComponent {\n    public readonly rooms = this._manager.filtered_rooms;\n\n    public readonly editRoom = (room) => this._manager.editRoom(room);\n\n    constructor(private _manager: RoomManagementService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-room-manager]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col\">\n            <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n            <room-list class=\"block w-full relative flex-1 h-1/2\"></room-list>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RoomManagerComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RoomManagerComponent } from './room-manager.component';\nimport { RoomManagerTopbarComponent } from './room-manager-topbar.component';\nimport { RoomListComponent } from './room-list.component';\nimport { RoomModalComponent } from './room-modal.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { NewRoomManagerComponent } from './new-room-manager.component';\nimport { RoomRestrictionModalComponent } from './room-restriction-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: RoomManagerComponent },\n    { path: 'new', component: NewRoomManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        NewRoomManagerComponent,\n        RoomManagerComponent,\n        RoomManagerTopbarComponent,\n        RoomListComponent,\n        RoomModalComponent,\n        RoomRestrictionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RoomManagerModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-new-room-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n                <room-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></room-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class NewRoomManagerComponent {}\n"],"x_google_ignoreList":[]}