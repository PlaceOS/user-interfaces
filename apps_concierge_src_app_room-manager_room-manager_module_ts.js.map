{"version":3,"file":"apps_concierge_src_app_room-manager_room-manager_module_ts.js","mappings":"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","names":["RoomModalComponent","selectors","RoomManagementService","constructor","_org","_dialog","this","BehaviorSubject","_options","asObservable","active_building","pipe","filter","_","id","switchMap","bld","querySystems","zone_id","map","data","catchError","of","list","levelWithID","zones","sort","a","b","name","localeCompare","shareReplay","combineLatest","room_list","options","zone","includes","search","toLowerCase","setFilters","next","getValue","setSearchString","editRoom","room","PlaceSystem","open","core","factory","i0","RoomManagerTopbarComponent","AsyncHandler","building","_manager","_route","_router","super","active_levels","filters","str","navigate","relativeTo","queryParams","ngOnInit","_this","initialised","first","toPromise","subscription","queryParamMap","subscribe","params","has","get","length","level","buildings","find","parent_id","levels","lvl","updateZones","setSearch","ctx","RoomListComponent","filtered_rooms","RoomManagerComponent","ROUTES","path","component","RoomManagerModule","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/room-manager/room-modal.component.ts","./apps/concierge/src/app/room-manager/room-management.service.ts","./apps/concierge/src/app/room-manager/room-manager-topbar.component.ts","./apps/concierge/src/app/room-manager/room-list.component.ts","./apps/concierge/src/app/room-manager/room-manager.component.ts","./apps/concierge/src/app/room-manager/room-manager.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n    selector: 'room-modal',\n    template: ``,\n    styles: [``],\n})\nexport class RoomModalComponent {}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { RoomModalComponent } from './room-modal.component';\n\nexport interface RoomListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoomManagementService {\n    private _options = new BehaviorSubject<RoomListOptions>({});\n\n    public options = this._options.asObservable();\n\n    public readonly room_list = this._org.active_building.pipe(\n        filter((_) => !!_?.id),\n        switchMap((bld) =>\n            querySystems({ zone_id: bld.id }).pipe(\n                map(({ data }) => data),\n                catchError(() => of([]))\n            )\n        ),\n        map((list) =>\n            list\n                .filter((_) => this._org.levelWithID(_.zones))\n                .sort((a, b) => a.name.localeCompare(b.name))\n        ),\n        shareReplay(1)\n    );\n\n    public readonly filtered_rooms = combineLatest([\n        this.room_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.zones.includes(options.zone));\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RoomListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRoom(room: PlaceSystem = new PlaceSystem()) {\n        const ref = this._dialog.open(RoomModalComponent, { data: { room } });\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'room-manager-topbar',\n    template: ` <div\n        class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n    >\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                [ngModel]=\"(this.filters | async)?.zone\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option [value]=\"building.id\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar class=\"mr-2\" (modelChange)=\"setSearch($event)\"></searchbar>\n    </div>`,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25rem;\n            }\n        `,\n    ],\n})\nexport class RoomManagerTopbarComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._manager.options;\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._manager.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._manager.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zone) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_id: zone },\n        });\n        this._manager.setFilters({ zone });\n    };\n\n    public get building() {\n        return this._org.building;\n    }\n\n    constructor(\n        private _manager: RoomManagementService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_id')) {\n                    const zone = params.get('zone_id');\n                    if (zone.length) {\n                        const level = this._org.levelWithID([zone]);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.setFilters({ zone });\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                var zone = levels.find((lvl) => lvl.id === zone);\n                if (!zone && levels.length) zone = levels[0].id;\n                this.updateZones(zone);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\n\n@Component({\n    selector: 'room-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <custom-table\n                class=\"block min-w-[56rem] w-full h-full\"\n                [dataSource]=\"rooms\"\n                [columns]=\"[\n                    'display_name',\n                    'zones',\n                    'capacity',\n                    'type',\n                    'bookable',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Room Name',\n                    'Level',\n                    'Capacity',\n                    'Room Type',\n                    'Bookable',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '8r', '6r', '8r', '6r', '12r']\"\n                [template]=\"{\n                    bookable: bool_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No rooms for selected level or building\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #bool_template let-data=\"data\">\n            <div\n                [class.bg-red-500]=\"!data\"\n                [class.bg-green-500]=\"data\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n            >\n                <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #action_template>\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matTooltip=\"Edit Room\">\n                    <app-icon>edit</app-icon>\n                </button>\n                <button btn icon matTooltip=\"Room Details\">\n                    <app-icon>more_horiz</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoomListComponent {\n    public readonly rooms = this._manager.filtered_rooms;\n\n    constructor(private _manager: RoomManagementService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-weekview]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col\">\n            <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n            <room-list class=\"block w-full relative flex-1 h-1/2\"></room-list>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RoomManagerComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RoomManagerComponent } from './room-manager.component';\nimport { RoomManagerTopbarComponent } from './room-manager-topbar.component';\nimport { RoomListComponent } from './room-list.component';\n\nconst ROUTES: Route[] = [{ path: '', component: RoomManagerComponent }];\n\n@NgModule({\n    declarations: [\n        RoomManagerComponent,\n        RoomManagerTopbarComponent,\n        RoomListComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RoomManagerModule {}\n"],"x_google_ignoreList":[]}