{"version":3,"file":"apps_concierge_src_app_room-manager_room-manager_module_ts.js","mappings":"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","names":["i0","RoomModalComponent","AsyncHandler","feature_list","this","form","controls","features","value","constructor","_data","_dialog_ref","_org","super","active_levels","generateSystemsFormFields","room","id","EncryptionLevel","name","_","queryZones","q","pipe","map","resp","data","ENTER","COMMA","SPACE","ngOnChanges","changes","updateTimezoneList","subscription","valueChanges","subscribe","timezone","filtered_timezones","timezones","filter","toLowerCase","includes","addFeature","event","input","trim","push","setValue","removeFeature","existing_feature","index","indexOf","splice","TIMEZONES_IANA","save","_this","valid","notifyError","getInvalidFields","join","console","log","patchValue","display_name","zones","unique","organisation","building","parent_id","zone","loading","disableClose","getRawValue","updateSystem","addSystem","toPromise","close","core","MAT_DIALOG_DATA","selectors","$localize","RoomManagementService","_dialog","BehaviorSubject","_options","asObservable","combineLatest","active_building","_change","switchMap","bld","querySystems","zone_id","catchError","of","list","levelWithID","sort","a","b","localeCompare","shareReplay","room_list","options","search","setFilters","next","getValue","setSearchString","editRoom","PlaceSystem","open","afterClosed","setTimeout","Date","now","factory","RoomManagerTopbarComponent","_manager","_route","_router","filters","str","navigate","relativeTo","queryParams","ngOnInit","initialised","first","queryParamMap","params","has","get","length","level","buildings","find","levels","lvl","updateZones","setSearch","ctx","RoomListComponent","filtered_rooms","RoomManagerComponent","ROUTES","path","component","RoomManagerModule","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/room-manager/room-modal.component.ts","./apps/concierge/src/app/room-manager/room-management.service.ts","./apps/concierge/src/app/room-manager/room-manager-topbar.component.ts","./apps/concierge/src/app/room-manager/room-list.component.ts","./apps/concierge/src/app/room-manager/room-manager.component.ts","./apps/concierge/src/app/room-manager/room-manager.module.ts"],"sourcesContent":["import { Component, Inject, SimpleChanges } from '@angular/core';\nimport { SPACE, ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport {\n    EncryptionLevel,\n    addSystem,\n    queryZones,\n    updateSystem,\n} from '@placeos/ts-client';\nimport { map } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n    unique,\n} from '@placeos/common';\nimport { Space, generateSystemsFormFields } from '@placeos/spaces';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'room-form-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Room</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.zone\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.zone.invalid &&\n                            form.controls.zone.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Level<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"zone\"\n                            placeholder=\"Select Level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Level is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.name\"\n                    >\n                        <label\n                            for=\"system-name\"\n                            [class.error]=\"\n                                form.controls.name.invalid &&\n                                form.controls.name.touched\n                            \"\n                            i18n=\"@@nameLabel\"\n                        >\n                            Name<span>*</span>:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-name\"\n                                placeholder=\"Room Name\"\n                                i18n-placeholder=\"@@systemNamePlaceholder\"\n                                formControlName=\"name\"\n                                required\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.name.invalid\"\n                                i18n=\"@@systemNameError\"\n                                >Room name is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.email\"\n                    >\n                        <label\n                            for=\"system-email\"\n                            [class.error]=\"\n                                form.controls.email.invalid &&\n                                form.controls.email.touched\n                            \"\n                            i18n=\"@@emailLabel\"\n                        >\n                            Email:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"system-email\"\n                                placeholder=\"Room Email\"\n                                i18n-placeholder=\"@@systemEmailPlaceholder\"\n                                formControlName=\"email\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.email.invalid\"\n                                i18n=\"@@emailError\"\n                                >A valid email is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"display-name\" i18n=\"@@displayNameLabel\"\n                            >Display Name:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"display-name\"\n                                placeholder=\"Display Name\"\n                                i18n-placeholder=\"@@displayNamePlaceholder\"\n                                formControlName=\"display_name\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.display_name\"\n                    >\n                        <label for=\"code-name\" i18n=\"@@codeNameLabel\"\n                            >Code:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"code-name\"\n                                placeholder=\"Code\"\n                                i18n-placeholder=\"@@codeNamePlaceholder\"\n                                formControlName=\"code\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex space-x-2\">\n                    <div\n                        class=\"flex flex-col flex-1\"\n                        *ngIf=\"form.controls.capacity\"\n                    >\n                        <label\n                            for=\"capacity\"\n                            [class.error]=\"\n                                form.controls.capacity.invalid &&\n                                form.controls.capacity.touched\n                            \"\n                            i18n=\"@@capacityLabel\"\n                        >\n                            Capacity:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"capacity\"\n                                type=\"number\"\n                                placeholder=\"Capacity\"\n                                i18n-placeholder=\"@@capacityPlaceholder\"\n                                formControlName=\"capacity\"\n                            />\n                            <mat-error\n                                *ngIf=\"form.controls.capacity.invalid\"\n                                i18n=\"@@capacityError\"\n                            >\n                                A valid positive number is required\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.bookable\">\n                        <mat-checkbox\n                            name=\"bookable\"\n                            formControlName=\"bookable\"\n                            i18n=\"@@bookableLabel\"\n                        >\n                            Bookable\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.description\">\n                    <label for=\"description\" i18n=\"@@descriptionLabel\"\n                        >Description:</label\n                    >\n                    <mat-form-field appearance=\"outline\">\n                        <textarea\n                            matInput\n                            name=\"description\"\n                            placeholder=\"Description\"\n                            i18n=\"@@descriptionPlaceholder\"\n                            formControlName=\"description\"\n                        ></textarea>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.features\">\n                    <label\n                        [class.error]=\"\n                            form.controls.features.invalid &&\n                            form.controls.features.touched\n                        \"\n                        i18n=\"@@featuresLabel\"\n                    >\n                        Features:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-chip-grid #chipList aria-label=\"Room features\">\n                            <mat-chip-row\n                                *ngFor=\"let feature of feature_list\"\n                                [selectable]=\"true\"\n                                [removable]=\"true\"\n                                (removed)=\"removeFeature(feature)\"\n                            >\n                                {{ feature }}\n                                <app-icon matChipRemove>close</app-icon>\n                            </mat-chip-row>\n                            <input\n                                placeholder=\"New feature...\"\n                                [matChipInputFor]=\"chipList\"\n                                [matChipInputSeparatorKeyCodes]=\"separators\"\n                                [matChipInputAddOnBlur]=\"true\"\n                                (matChipInputTokenEnd)=\"addFeature($event)\"\n                            />\n                        </mat-chip-grid>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.map_id\">\n                    <label for=\"map_id\" i18n=\"@@mapIdLabel\">Map ID:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"map_id\"\n                            i18n-placeholder=\"@@mapIdPlaceholder\"\n                            placeholder=\"Map SVG ID selector e.g. area-01.10-status\"\n                            formControlName=\"map_id\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"timezone\">Timezone</label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Room timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.images\">\n                    <label for=\"images\" i18n=\"@@imagesLabel\">Images:</label>\n                    <image-list-field\n                        name=\"images\"\n                        formControlName=\"images\"\n                    ></image-list-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving room...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            mat-checkbox {\n                margin-top: 2.5em;\n                margin-bottom: 1.5em;\n            }\n\n            @media screen and (max-width: 640px) {\n                mat-checkbox {\n                    margin-top: 0;\n                }\n            }\n        `,\n    ],\n})\nexport class RoomModalComponent extends AsyncHandler {\n    public loading = false;\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Group of form fields used for creating the system */\n    public form = generateSystemsFormFields(this._data.room as any);\n    /** Levels of encyption available for the system's settings */\n    public encryption_levels: any[] = [\n        { id: EncryptionLevel.None, name: 'None' },\n        { id: EncryptionLevel.Support, name: 'Support' },\n        { id: EncryptionLevel.Admin, name: 'Admin' },\n        { id: EncryptionLevel.NeverDisplay, name: 'Never Display' },\n    ];\n    /** Function for querying zones */\n    public readonly query_fn = (_: string) =>\n        queryZones({ q: _ }).pipe(map((resp) => resp.data));\n    /** List of separator characters for features */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    public get feature_list(): string[] {\n        return this.form.controls.features.value;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { room: Space },\n        private _dialog_ref: MatDialogRef<RoomModalComponent>,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.form) {\n            this.updateTimezoneList();\n            this.subscription(\n                'tz-change',\n                this.form.valueChanges.subscribe(\n                    ({ timezone }) =>\n                        (this.filtered_timezones = this.timezones.filter((_) =>\n                            _.toLowerCase().includes(timezone.toLowerCase())\n                        ))\n                )\n            );\n        }\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addFeature(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.features) return;\n        const input = event.input;\n        const value = event.value;\n        const feature_list = this.feature_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.features.setValue(feature_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove feature from the list\n     * @param existing_feature Feature to remove\n     */\n    public removeFeature(existing_feature: string): void {\n        if (!this.form || !this.form.controls.features) return;\n        const feature_list = this.feature_list;\n        const index = feature_list.indexOf(existing_feature);\n\n        if (index >= 0) {\n            feature_list.splice(index, 1);\n            this.form.controls.features.setValue(feature_list);\n        }\n    }\n\n    public updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid)\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        console.log('Form:', this.form.value);\n        if (!this.form.value.id) {\n            this.form.patchValue({\n                display_name:\n                    this.form.value.display_name || this.form.value.name,\n                zones: unique([\n                    this._org.organisation.id,\n                    this._org.building.parent_id,\n                    this._org.building.id,\n                    `${this.form.value.zone?.id || this.form.value.zone || ''}`,\n                ]).filter((_) => _),\n            });\n        }\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data = this.form.getRawValue();\n        await (data.id\n            ? updateSystem(data.id, data)\n            : addSystem(data)\n        ).toPromise();\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close(true);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceSystem, querySystems } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { RoomModalComponent } from './room-modal.component';\n\nexport interface RoomListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RoomManagementService {\n    private _options = new BehaviorSubject<RoomListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly room_list = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([_]) => !!_?.id),\n        switchMap(([bld]) =>\n            querySystems({ zone_id: bld.id }).pipe(\n                map(({ data }) => data),\n                catchError(() => of([]))\n            )\n        ),\n        map((list) =>\n            list\n                .filter((_) => this._org.levelWithID(_.zones as any))\n                .sort((a, b) => a.name.localeCompare(b.name))\n        ),\n        shareReplay(1)\n    );\n\n    public readonly filtered_rooms = combineLatest([\n        this.room_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.zones.includes(options.zone));\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RoomListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRoom(room: PlaceSystem = new PlaceSystem()) {\n        const ref = this._dialog.open(RoomModalComponent, { data: { room } });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'room-manager-topbar',\n    template: ` <div\n        class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n    >\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                [ngModel]=\"(this.filters | async)?.zone\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option [value]=\"building?.id\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button btn (click)=\"newRoom()\" class=\"w-32\">New Room</button>\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar class=\"mr-2\" (modelChange)=\"setSearch($event)\"></searchbar>\n    </div>`,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25rem;\n            }\n        `,\n    ],\n})\nexport class RoomManagerTopbarComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._manager.options;\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._manager.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._manager.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zone) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_id: zone },\n        });\n        this._manager.setFilters({ zone });\n    };\n\n    public readonly newRoom = () => this._manager.editRoom();\n\n    public get building() {\n        return this._org.building;\n    }\n\n    constructor(\n        private _manager: RoomManagementService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_id')) {\n                    const zone = params.get('zone_id');\n                    if (zone.length) {\n                        const level = this._org.levelWithID([zone]);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.setFilters({ zone });\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                var zone = levels.find((lvl) => lvl.id === zone);\n                if (!zone && levels.length) zone = levels[0].id;\n                this.updateZones(zone);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component } from '@angular/core';\nimport { RoomManagementService } from './room-management.service';\n\n@Component({\n    selector: 'room-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <custom-table\n                class=\"block min-w-[56rem] w-full h-full\"\n                [dataSource]=\"rooms\"\n                [columns]=\"[\n                    'display_name',\n                    'zones',\n                    'capacity',\n                    'type',\n                    'bookable',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Room Name',\n                    'Level',\n                    'Capacity',\n                    'Room Type',\n                    'Bookable',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '8r', '6r', '8r', '6r', '12r']\"\n                [template]=\"{\n                    bookable: bool_template,\n                    zones: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No rooms for selected level or building\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-data=\"data\">\n            {{ (data | level)?.display_name || (data | level)?.name }}\n        </ng-template>\n        <ng-template #bool_template let-data=\"data\">\n            <div\n                [class.bg-red-500]=\"!data\"\n                [class.bg-green-500]=\"data\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n            >\n                <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matTooltip=\"Edit Room\" (click)=\"editRoom(row)\">\n                    <app-icon>edit</app-icon>\n                </button>\n                <button btn icon matTooltip=\"Room Details\">\n                    <app-icon>more_horiz</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoomListComponent {\n    public readonly rooms = this._manager.filtered_rooms;\n\n    public readonly editRoom = (room) => this._manager.editRoom(room);\n\n    constructor(private _manager: RoomManagementService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-weekview]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col\">\n            <room-manager-topbar class=\"block w-full\"></room-manager-topbar>\n            <room-list class=\"block w-full relative flex-1 h-1/2\"></room-list>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RoomManagerComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RoomManagerComponent } from './room-manager.component';\nimport { RoomManagerTopbarComponent } from './room-manager-topbar.component';\nimport { RoomListComponent } from './room-list.component';\nimport { RoomModalComponent } from './room-modal.component';\nimport { MatChipsModule } from '@angular/material/chips';\n\nconst ROUTES: Route[] = [{ path: '', component: RoomManagerComponent }];\n\n@NgModule({\n    declarations: [\n        RoomManagerComponent,\n        RoomManagerTopbarComponent,\n        RoomListComponent,\n        RoomModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RoomManagerModule {}\n"],"x_google_ignoreList":[]}