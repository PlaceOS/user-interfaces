{"version":3,"file":"apps_concierge_src_app_events_events_module_ts.js","mappings":"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","names":["EventsComponent","static","this","t","core","VBU","selectors","attrs","_c0","decls","vars","consts","template","rf","ctx","i0","EventStateService","AsyncHandler","changed","_changed","next","Date","now","period","_options","getValue","constructor","_settings","_org","_dialog","_router","super","BehaviorSubject","event_list","combineLatest","active_building","pipe","filter","bld","switchMap","options","queryBookings","period_start","getUnixTime","startOfDay","Math","max","date","period_end","endOfDay","end","type","zones","zone_ids","join","id","map","list","sort","a","b","shareReplay","asObservable","setOptions","value","viewEvent","event","_this","ref","open","GroupEventDetailsModalComponent","data","booking","concierge","subscription","componentInstance","edit","subscribe","navigate","remove","_asyncToGenerator","removeEvent","close","_this2","result","openConfirmModal","title","content","icon","confirm_text","reason","loading","removeBooking","toPromise","catch","e","notifyError","notifySuccess","i1","i2","i3","i4","jDH","factory","ɵfac","providedIn","item_r1","images","EventListingComponent_ng_template_2_img_9_Template","length","ctx_r1","time_format","duration","tmp_15_0","linked_event","system_id","address","EventListingComponent_ng_template_4_span_5_Template","tmp_10_0","item_r3","display_name","EventListingComponent_ng_template_6_span_4_Template","item_r4","item_r5","attendees","user_email","EventListingComponent_ng_template_8_ng_template_2_Template","view_attendees_r6","checkedInList","item_r7","EventListingComponent_ng_template_10_ng_template_2_Template","view_attendees_r8","checkedInCount","EventListingComponent_ng_template_12_div_0_Template","row_r9","permission","item_r10","state","row_r12","_r11","row","menu_r13","_c9","EventListingComponent","_state","user","checked_in","EventListingComponent_ng_template_2_Template","EventListingComponent_ng_template_4_Template","EventListingComponent_ng_template_6_Template","EventListingComponent_ng_template_8_Template","EventListingComponent_ng_template_10_Template","EventListingComponent_ng_template_12_Template","EventListingComponent_ng_template_14_Template","EventListingComponent_ng_template_16_Template","_c8","event_template_r14","_c1","level_template_r15","_c2","room_template_r16","_c3","interested_template_r17","_c4","attending_template_r18","_c5","status_template_r20","_c6","published_template_r19","_c7","actions_template_r21","hour_r1","i_r2","date_r3","event_r5","_r4","$implicit","ctx_r5","EventWeekViewComponent_div_12_button_1_ng_template_6_Template","offset","event_card_r7","now_offset","EventWeekViewComponent_div_12_button_1_Template","EventWeekViewComponent_div_12_div_3_Template","i_r9","event_day_map","dateString","date_r8","isCurrentDay","EventWeekViewComponent","format","startOfMinute","valueOf","getHours","getMinutes","days","Array","fill","_","idx","hours","start","push","startWith","ngOnInit","addDays","features","EventWeekViewComponent_div_7_Template","EventWeekViewComponent_div_10_Template","EventWeekViewComponent_div_11_Template","EventWeekViewComponent_div_12_Template","weekday_r1","event_r3","_r2","ctx_r3","EventMonthViewComponent_div_3_button_4_ng_template_6_Template","event_card_r5","menu_r7","day_r6","event_r9","_r8","EventMonthViewComponent_div_3_button_4_Template","EventMonthViewComponent_div_3_button_7_Template","EventMonthViewComponent_div_3_button_11_Template","is_month","is_today","EventMonthViewComponent","offset_weekday","get","month","weekdays","month_days","_setMonthDays","_setWeekdays","startOfWeek","startOfMonth","weekStartsOn","from","keys","i","isSameDay","isSameMonth","EventMonthViewComponent_div_2_Template","EventMonthViewComponent_div_3_Template","EventCalendarComponent","_route","setPeriod","relativeTo","queryParams","queryParamsHandling","nextPeriod","take","range","addWeeks","addMonths","previousPeriod","EventCalendarComponent_span_2_Template","_r1","EventCalendarComponent_event_week_view_24_Template","EventCalendarComponent_ng_template_26_Template","tmp_2_0","month_calendar_r3","range_r1","display","EventsListComponent","distinctUntilChanged","view","period_list","_generatePeriods","_initPeriod","queryParamMap","q","has","setPeriodType","timeout","parseInt","item","find","selected_range","setView","set_route","periods","period_type","end_date","week_offset","$event","EventsListComponent_mat_option_33_Template","EventsListComponent_div_35_Template","EventsListComponent_event_calendar_36_Template","tag_r3","removeTag","_r5","form","patchValue","date_end","getRawValue","use_24hr","tmp_12_0","duration_info","tz_r6","building_r8","name","level_r9","room_r10","_r7","controls","setValue","parent_id","setBuilding","EventManageComponent_div_0_ng_container_90_mat_option_5_Template","setLevel","EventManageComponent_div_0_ng_container_90_mat_option_13_Template","EventManageComponent_div_0_ng_container_90_mat_option_24_Template","building_zone","building_list","level_zone","active_levels","tmp_11_0","available_spaces","EventManageComponent_div_0_mat_chip_row_28_Template","addTag","EventManageComponent_div_0_div_58_Template","EventManageComponent_div_0_mat_option_68_Template","EventManageComponent_div_0_mat_option_69_Template","attendance_type","EventManageComponent_div_0_ng_container_90_Template","save","tag_list","chipList_r11","separators","start_date","all_day","auto_r12","filtered_timezones","timezones","EMPTY","EventManageComponent","tags","max_duration","buildings","includes","building","levelWithID","_form_state","_event_form","ENTER","COMMA","SPACE","time","diff","differenceInMinutes","formatDuration","floor","minutes","initialised","first","booking_type","asset_id","currentUser","email","randomString","unique","organisation","location","paramMap","_ref","params","showBooking","newForm","console","log","CalendarEvent","secondary_resource","StaffUser","user_id","user_name","_x","apply","arguments","valueChanges","value_name","_updateTimezoneList","level","new_zones","input","chipInput","inputElement","feature_list","trim","existing_tag","index","indexOf","splice","markAllAsTouched","valid","getInvalidFields","event_id","space","s","resources","postForm","ical_uid","asset_name","description","res","_ref2","_x2","timezone","TIMEZONES_IANA","toLowerCase","i5","i6","i18n_0","$localize","EventManageComponent_div_0_Template","EventManageComponent_ng_template_1_Template","load_state_r13","ROUTES","path","component","children","redirectTo","EventsModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedBookingsModule","SharedEventsModule","FormFieldsModule","RouterModule","forChild","MapLocation","_data","position","map_id","x","map_width","y","map_height","variance","last_seen","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/events/events.component.ts","./apps/concierge/src/app/events/event-state.service.ts","./apps/concierge/src/app/events/event-listing.component.ts","./apps/concierge/src/app/events/event-week-view.component.ts","./apps/concierge/src/app/events/event-month-view.component.ts","./apps/concierge/src/app/events/event-calendar.component.ts","./apps/concierge/src/app/events/events-list.component.ts","./apps/concierge/src/app/events/event-manage.component.ts","./apps/concierge/src/app/events/events.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n    selector: '[app-events]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"relative flex flex-col flex-1 w-1/2 h-full\">\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EventsComponent {}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport {\n    Booking,\n    GroupEventDetailsModalComponent,\n    queryBookings,\n    removeBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    SettingsService,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap } from 'rxjs/operators';\n\nexport interface GroupEventOptions {\n    period: 'week' | 'month';\n    date?: number;\n    end?: number;\n    zone_ids?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventStateService extends AsyncHandler {\n    private _options = new BehaviorSubject<GroupEventOptions>({\n        period: 'week',\n    });\n    private _changed = new BehaviorSubject(0);\n\n    public readonly event_list = combineLatest([\n        this._org.active_building,\n        this._options,\n        this._changed,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld, options]) =>\n            queryBookings({\n                period_start: getUnixTime(\n                    startOfDay(Math.max(Date.now(), options.date))\n                ),\n                period_end: getUnixTime(\n                    endOfDay(options.end || options.date || Date.now())\n                ),\n                type: 'group-event',\n                zones: options.zone_ids?.join(',') || bld.id,\n            })\n        ),\n        map((list) => list.sort((a, b) => a.date - b.date)),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public changed() {\n        this._changed.next(Date.now());\n    }\n\n    public get period() {\n        return this._options.getValue()?.period;\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<GroupEventOptions>) {\n        this._options.next({ ...this._options.value, ...options });\n    }\n\n    public viewEvent(event: Booking) {\n        const ref = this._dialog.open(GroupEventDetailsModalComponent, {\n            data: { booking: event, concierge: true },\n        });\n        this.subscription(\n            `edit:${event.id}`,\n            ref.componentInstance.edit.subscribe(() => {\n                this._router.navigate([\n                    '/entertainment',\n                    'events',\n                    'manage',\n                    event.id,\n                ]);\n            })\n        );\n        this.subscription(\n            `remove:${event.id}`,\n            ref.componentInstance.remove.subscribe(async () => {\n                await this.removeEvent(event);\n                ref.close();\n            })\n        );\n    }\n\n    public async removeEvent(event: Booking) {\n        const result = await openConfirmModal(\n            {\n                title: 'Delete Event',\n                content: `Are you sure you want to delete the event \"${event.title}\"?`,\n                icon: { content: 'delete' },\n                confirm_text: 'Delete',\n            },\n            this._dialog\n        );\n        if (result.reason !== 'done') return;\n        result.loading('Deleting event...');\n        await removeBooking(event.id)\n            .toPromise()\n            .catch((e) => {\n                notifyError(e);\n                result.close();\n                throw e;\n            });\n        result.close();\n        notifySuccess('Successfully deleted event.');\n        this._changed.next(Date.now());\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { EventStateService } from './event-state.service';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'event-listing',\n    template: `\n        <simple-table\n            class=\"min-w-[80rem] block text-sm\"\n            [data]=\"event_list\"\n            empty_message=\"No Regions\"\n            [columns]=\"[\n                { key: 'date', name: 'Event', content: event_template },\n                {\n                    key: 'level',\n                    name: 'Level',\n                    content: level_template,\n                    size: '12rem'\n                },\n                {\n                    key: 'room',\n                    name: 'Room',\n                    content: room_template,\n                    size: '12rem'\n                },\n                {\n                    key: 'interested',\n                    name: 'Interested',\n                    content: interested_template,\n                    size: '6rem'\n                },\n                {\n                    key: 'attending',\n                    name: 'Attending',\n                    content: attending_template,\n                    size: '6rem'\n                },\n                {\n                    key: 'status',\n                    name: 'Status',\n                    content: status_template,\n                    size: '8rem'\n                },\n                {\n                    key: 'permissions',\n                    name: 'Published',\n                    content: published_template,\n                    size: '6rem'\n                },\n                {\n                    key: 'actions',\n                    name: ' ',\n                    content: actions_template,\n                    size: '4rem',\n                    sortable: false\n                }\n            ]\"\n            [sortable]=\"true\"\n        ></simple-table>\n        <div class=\"w-full h-20\"></div>\n        <ng-template #event_template let-item=\"row\">\n            <div class=\"flex items-center space-x-2 px-3 py-2\">\n                <div date class=\"flex flex-col items-center leading-tight w-8\">\n                    <div\n                        month\n                        class=\"text-sm font-medium relative top-0.5 opacity-60\"\n                    >\n                        {{ item.date | date: 'MMM' }}\n                    </div>\n                    <div day class=\"text-2xl font-light relative -top-0.5\">\n                        {{ item.date | date: 'd' }}\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center justify-center h-12 w-12 rounded overflow-hidden bg-base-200 border border-base-200\"\n                >\n                    <img\n                        *ngIf=\"item.images?.length\"\n                        auth\n                        [source]=\"item.images[0]\"\n                        class=\"min-h-full min-w-full object-cover\"\n                    />\n                </div>\n                <div details class=\"flex flex-col\">\n                    <div class=\"text-sm\">{{ item.title }}</div>\n                    <div class=\"text-xs opacity-40\">\n                        {{ item.date | date: 'EEEE, ' + time_format }} &ndash;\n                        {{\n                            item.date + item.duration * 60 * 1000\n                                | date: time_format + ' (z)'\n                        }}\n                    </div>\n                    <div class=\"text-xs\">\n                        {{\n                            (\n                                (item.linked_event?.system_id | space | async)\n                                    ?.zones | building\n                            )?.address\n                        }}\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #level_template let-item=\"row\">\n            <div class=\"p-4\">\n                {{\n                    (\n                        (item.linked_event?.system_id | space | async)?.zones\n                        | level\n                    )?.display_name\n                }}\n                <span *ngIf=\"!item.linked_event?.system_id\" class=\"opacity-30\">\n                    No Level\n                </span>\n            </div>\n        </ng-template>\n        <ng-template #room_template let-item=\"row\">\n            <div class=\"p-4\">\n                {{\n                    (item.linked_event?.system_id | space | async)?.display_name\n                }}\n                <span *ngIf=\"!item.linked_event?.system_id\" class=\"opacity-30\">\n                    No Room\n                </span>\n            </div>\n        </ng-template>\n        <ng-template #interested_template let-item=\"row\">\n            <button\n                icon\n                matRipple\n                customTooltip\n                [content]=\"view_attendees\"\n                class=\"rounded h-12 w-12 mx-auto\"\n                [disabled]=\"!item.attendees?.length\"\n            >\n                {{ item.attendees?.length || 0 }}\n            </button>\n            <ng-template #view_attendees>\n                <div\n                    class=\"relative w-[20rem] h-[28rem] overflow-auto bg-white rounded shadow\"\n                >\n                    <attendee-list\n                        [list]=\"item.attendees\"\n                        [host]=\"item.user_email\"\n                        [hide_close]=\"true\"\n                        [custom_title]=\"'Interested'\"\n                    ></attendee-list>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #attending_template let-item=\"row\">\n            <button\n                icon\n                matRipple\n                customTooltip\n                [content]=\"view_attendees\"\n                class=\"rounded h-12 w-12 mx-auto\"\n                [disabled]=\"!checkedInCount(item.attendees)\"\n            >\n                {{ checkedInCount(item.attendees) }}\n            </button>\n            <ng-template #view_attendees>\n                <div\n                    class=\"relative w-[20rem] h-[28rem] overflow-auto bg-white rounded shadow\"\n                >\n                    <attendee-list\n                        [list]=\"checkedInList(item.attendees)\"\n                        [host]=\"item.user_email\"\n                        [hide_close]=\"true\"\n                    ></attendee-list>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #published_template let-row=\"row\">\n            <div\n                *ngIf=\"row.permission === 'OPEN' || row.permission === 'open'\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #status_template let-item=\"row\">\n            <div class=\"p-4\">\n                <div\n                    class=\"px-4 py-1 rounded-full\"\n                    [class.bg-success]=\"\n                        item.state !== 'done' && item.state !== 'in_progress'\n                    \"\n                    [class.text-success-content]=\"\n                        item.state !== 'done' && item.state !== 'in_progress'\n                    \"\n                    [class.bg-warning]=\"item.state === 'in_progress'\"\n                    [class.text-warning-content]=\"item.state === 'in_progress'\"\n                    [class.bg-base-200]=\"item.state === 'done'\"\n                    [class.text-base-content]=\"item.state === 'done'\"\n                >\n                    {{\n                        item.state === 'done'\n                            ? 'Done'\n                            : item.state === 'in_progress'\n                            ? 'In Progress'\n                            : 'Active'\n                    }}\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #actions_template let-row=\"row\">\n            <button\n                icon\n                matRipple\n                class=\"h-12 w-12 rounded mx-2\"\n                [matMenuTriggerFor]=\"menu\"\n                [disabled]=\"row.state === 'done'\"\n            >\n                <app-icon>more_vert</app-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n                <button mat-menu-item [disabled]=\"true\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">\n                            confirmation_number\n                        </app-icon>\n                        <div class=\"mr-2\">Promote Event</div>\n                    </div>\n                </button>\n                <button mat-menu-item (click)=\"viewEvent(row)\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">visibility</app-icon>\n                        <div class=\"mr-2\">View Event</div>\n                    </div>\n                </button>\n                <a\n                    mat-menu-item\n                    [routerLink]=\"[\n                        '/entertainment',\n                        'events',\n                        'manage',\n                        row?.id\n                    ]\"\n                >\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">edit</app-icon>\n                        <div class=\"mr-2\">Edit Event</div>\n                    </div>\n                </a>\n                <button mat-menu-item [disabled]=\"true\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl\">content_copy</app-icon>\n                        <div class=\"mr-2\">Copy URL</div>\n                    </div>\n                </button>\n                <button mat-menu-item (click)=\"removeEvent(row)\">\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-2xl text-error\">delete</app-icon>\n                        <div class=\"mr-2\">Delete Event</div>\n                    </div>\n                </button>\n            </mat-menu>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EventListingComponent {\n    public readonly event_list = this._state.event_list;\n\n    public readonly viewEvent = (event: any) => this._state.viewEvent(event);\n    public readonly removeEvent = (event: any) =>\n        this._state.removeEvent(event);\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: EventStateService\n    ) {}\n\n    public checkedInCount(attendees: User[]) {\n        if (!attendees?.length) return 0;\n        return attendees.filter((user: User) => user.checked_in).length;\n    }\n\n    public checkedInList(attendees: User[]) {\n        if (!attendees?.length) return [];\n        return attendees.filter((user: User) => user.checked_in);\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler } from '@placeos/common';\nimport { EventStateService } from './event-state.service';\nimport { addDays, format, startOfMinute } from 'date-fns';\nimport { map, shareReplay, startWith } from 'rxjs/operators';\nimport { Booking, GroupEventDetailsModalComponent } from '@placeos/bookings';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'event-week-view',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto flex\">\n            <div\n                class=\"sticky left-0 w-24 min-h-full flex flex-col items-end z-20 bg-base-100\"\n            >\n                <div\n                    header\n                    class=\"sticky top-0 h-16 min-h-16 flex justify-end z-10\"\n                >\n                    <div class=\"bg-base-100 pt-6 h-10\">\n                        <div class=\"opacity-30 text-xs px-2\">\n                            {{ now | date: 'zzzz' }}\n                        </div>\n                    </div>\n                </div>\n                <div\n                    *ngFor=\"let hour of hours; let i = index\"\n                    class=\"relative min-h-10 w-full flex-1 bg-base-100\"\n                >\n                    <div\n                        hour\n                        class=\"absolute top-0 right-1 -translate-y-1/2 whitespace-nowrap text-xs opacity-60\"\n                    >\n                        {{ hour }} {{ i >= 12 ? 'PM' : 'AM' }}\n                    </div>\n                </div>\n            </div>\n            <div class=\"relative min-w-[84rem] min-h-full z-10\">\n                <div\n                    header\n                    class=\"sticky flex top-0 h-16 min-h-16 border-b border-base-200 bg-base-100 z-10\"\n                >\n                    <div\n                        *ngFor=\"let date of days\"\n                        date\n                        class=\"flex flex-col items-center justify-center p-4 min-w-48 flex-1 border-r border-base-200\"\n                    >\n                        <div class=\"text-sm opacity-60\">\n                            {{ date | date: 'EEEE' }}\n                        </div>\n                        <div>{{ date | date: 'd' }}</div>\n                    </div>\n                </div>\n                <div\n                    *ngFor=\"let hour of hours; let i = index\"\n                    class=\"relative flex min-h-10 min-w-[84rem] flex-1 border-x border-b border-base-200 pointer-events-none\"\n                ></div>\n                <div\n                    *ngFor=\"let date of days; let i = index\"\n                    date\n                    class=\"absolute top-16 left-0 w-[calc(100%/7)] h-[60rem] flex-1 border-r border-base-200 pointer-events-none\"\n                    [style.transform]=\"'translateX(' + i * 100 + '%)'\"\n                >\n                    <button\n                        *ngFor=\"\n                            let event of (event_day_map | async)[\n                                dateString(date)\n                            ] || []\n                        \"\n                        matRipple\n                        class=\"absolute inset-x-1 bg-base-100 rounded border border-base-200 hover:border-info shadow pl-3 pr-2 py-1 overflow-hidden pointer-events-auto\"\n                        [style.top]=\"event.offset * 100 + '%'\"\n                        [style.height]=\"event.length * 100 + '%'\"\n                        (click)=\"viewEvent(event)\"\n                    >\n                        <div\n                            class=\"absolute left-0 inset-y-0 bg-info w-1.5\"\n                        ></div>\n                        <div class=\"text-sm opacity-60 h-full text-left\">\n                            {{ event.date | date: 'shortTime' }} &mdash;\n                            {{ event.title }}\n                        </div>\n                        <div\n                            class=\"absolute inset-0\"\n                            customTooltip\n                            [content]=\"event_card\"\n                            xPosition=\"center\"\n                            yPosition=\"bottom\"\n                            [hover]=\"true\"\n                        ></div>\n                        <ng-template #event_card>\n                            <div class=\"p-2 pointer-events-none\">\n                                <group-event-card\n                                    [event]=\"event\"\n                                ></group-event-card>\n                            </div>\n                        </ng-template>\n                    </button>\n                    <div\n                        now\n                        *ngIf=\"isCurrentDay(date)\"\n                        class=\"absolute inset-x-0 h-0 border-y-2 border-base-content\"\n                        [style.top]=\"now_offset * 100 + '%'\"\n                    >\n                        <div\n                            class=\"absolute left-0 top-0 -translate-x-1/2 -translate-y-1/2 h-4 w-4 rounded-full bg-base-content\"\n                        ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class EventWeekViewComponent extends AsyncHandler {\n    public days = new Array(7).fill(0).map((_, idx) => idx + 1);\n    public readonly hours = new Array(24)\n        .fill(0)\n        .map((_, idx) => (idx % 12 ? idx % 12 : 12));\n    public readonly event_list = this._state.event_list;\n    public readonly event_day_map = this.event_list.pipe(\n        map((list) => {\n            const map = {};\n            for (const event of list) {\n                const date = format(event.date, 'yyyy-MM-dd');\n                if (!map[date]) map[date] = [];\n                const start = new Date(event.date);\n                map[date].push({\n                    ...event,\n                    offset:\n                        (start.getHours() * 60 + start.getMinutes()) /\n                        (24 * 60),\n                    length: event.duration / (24 * 60),\n                });\n            }\n            return map;\n        }),\n        startWith({}),\n        shareReplay(1)\n    );\n\n    public readonly viewEvent = (event: any) => this._state.viewEvent(event);\n\n    public dateString(date: number) {\n        if (!date) return '';\n        return format(date, 'yyyy-MM-dd');\n    }\n\n    public isCurrentDay(date: number) {\n        if (!date) return false;\n        return format(Date.now(), 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd');\n    }\n\n    public get now() {\n        return startOfMinute(Date.now()).valueOf();\n    }\n\n    public get now_offset() {\n        const now = new Date(this.now);\n        return (now.getHours() * 60 + now.getMinutes()) / (24 * 60);\n    }\n\n    constructor(\n        private _state: EventStateService,\n        private _dialog: MatDialog,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'date',\n            this._state.options.subscribe(({ date }) => {\n                if (!date) return;\n                this.days = this.days.map((_, idx) =>\n                    addDays(date, idx).valueOf()\n                );\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { EventStateService } from './event-state.service';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport {\n    format,\n    addDays,\n    isSameDay,\n    isSameMonth,\n    startOfDay,\n    startOfMonth,\n    startOfWeek,\n} from 'date-fns';\nimport { map, shareReplay, startWith } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'event-month-view',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <div\n                class=\"grid grid-cols-7 min-w-full w-[80rem] min-h-full h-[56rem] m-2 border-b border-base-200 \"\n            >\n                <div\n                    weekday\n                    *ngFor=\"let weekday of weekdays\"\n                    class=\"relative flex items-center justify-center text-sm opacity-60 p-2 h-12\"\n                >\n                    {{ weekday | date: 'EEEE' }}\n                </div>\n                <div\n                    monthday\n                    *ngFor=\"let day of month_days\"\n                    class=\"relative border border-base-200 flex flex-col space-y-1\"\n                >\n                    <div\n                        class=\"rounded-full w-8 h-8 flex items-center justify-center mt-1 ml-1\"\n                        [class.opacity-30]=\"!day.is_month\"\n                        [class.bg-secondary]=\"day.is_today\"\n                        [class.text-secondary-content]=\"day.is_today\"\n                    >\n                        {{ day.id | date: 'd' }}\n                    </div>\n                    <button\n                        matRipple\n                        *ngFor=\"\n                            let event of (event_day_map | async)[\n                                dateString(day.id)\n                            ] || [] | slice: 0:3\n                        \"\n                        (click)=\"viewEvent(event)\"\n                        class=\"relative w-[calc(100%-0.5rem)] h-7 bg-base-100 rounded border border-base-200 hover:border-info shadow pl-3 pr-2 py-1 overflow-hidden mx-1\"\n                    >\n                        <div\n                            class=\"absolute left-0 inset-y-0 bg-info w-1.5\"\n                        ></div>\n                        <div\n                            class=\"text-sm opacity-60 h-full text-left truncate\"\n                        >\n                            {{ event.date | date: 'shortTime' }} &mdash;\n                            {{ event.title }}\n                        </div>\n                        <div\n                            class=\"absolute inset-0\"\n                            customTooltip\n                            [content]=\"event_card\"\n                            xPosition=\"center\"\n                            yPosition=\"bottom\"\n                            [hover]=\"true\"\n                        ></div>\n                        <ng-template #event_card>\n                            <div class=\"p-2 pointer-events-none\">\n                                <group-event-card\n                                    [event]=\"event\"\n                                ></group-event-card>\n                            </div>\n                        </ng-template>\n                    </button>\n                    <button\n                        matRipple\n                        *ngIf=\"\n                            ((event_day_map | async)[dateString(day.id)] || [])\n                                .length > 3\n                        \"\n                        matTooltip=\"More events\"\n                        class=\"relative w-[calc(100%-0.5rem)] h-7 rounded pl-3 pr-2 py-1 overflow-hidden mx-1 underline text-sm\"\n                        [matMenuTriggerFor]=\"menu\"\n                    >\n                        {{\n                            ((event_day_map | async)[dateString(day.id)] || [])\n                                .length - 3\n                        }}\n                        more event(s)\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <button\n                            mat-menu-item\n                            *ngFor=\"\n                                let event of (event_day_map | async)[\n                                    dateString(day.id)\n                                ] || [] | slice: 3\n                            \"\n                            (click)=\"viewEvent(event)\"\n                        >\n                            <div class=\"flex items-center space-x-4\">\n                                <div class=\"flex-1\">{{ event.title }}</div>\n                                <div\n                                    class=\"text-xs opacity-60 py-1 px-2 rounded bg-base-200 text-base-content\"\n                                >\n                                    {{ event.date | date: 'shortTime' }}\n                                </div>\n                            </div>\n                        </button>\n                    </mat-menu>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            .grid {\n                grid-template-rows: 3rem repeat(6, minmax(0, 1fr));\n            }\n        `,\n    ],\n})\nexport class EventMonthViewComponent extends AsyncHandler {\n    public month = startOfDay(Date.now()).valueOf();\n    public weekdays = [];\n\n    public month_days = [];\n    public readonly event_list = this._state.event_list;\n    public readonly event_day_map = this.event_list.pipe(\n        map((list) => {\n            const map = {};\n            for (const event of list) {\n                const date = format(event.date, 'yyyy-MM-dd');\n                if (!map[date]) map[date] = [];\n                const start = new Date(event.date);\n                map[date].push({\n                    ...event,\n                    offset:\n                        (start.getHours() * 60 + start.getMinutes()) /\n                        (24 * 60),\n                    length: event.duration / (24 * 60),\n                });\n            }\n            return map;\n        }),\n        startWith({}),\n        shareReplay(1)\n    );\n\n    public readonly viewEvent = (event: any) => this._state.viewEvent(event);\n\n    public dateString(date: number) {\n        if (!date) return '';\n        return format(date, 'yyyy-MM-dd');\n    }\n\n    public get offset_weekday() {\n        return this._settings.get('app.week_start') || 0;\n    }\n\n    constructor(\n        private _state: EventStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'date',\n            this._state.options.subscribe(({ date }) => {\n                this.month = date;\n                this._setMonthDays();\n                this._setWeekdays();\n            })\n        );\n        this._setMonthDays();\n        this._setWeekdays();\n    }\n\n    private _setMonthDays() {\n        const start = startOfWeek(startOfMonth(this.month), {\n            weekStartsOn: this.offset_weekday as any,\n        });\n        this.month_days = Array.from(Array(7 * 6).keys()).map((i) => {\n            const date = addDays(start, i).valueOf();\n            return {\n                id: date,\n                is_today: isSameDay(date, Date.now()),\n                is_month: isSameMonth(date, this.month),\n            };\n        });\n    }\n\n    private _setWeekdays() {\n        const start = startOfWeek(Date.now(), {\n            weekStartsOn: this.offset_weekday as any,\n        });\n        this.weekdays = Array.from(Array(7).keys()).map((i) =>\n            addDays(start, i)\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { EventStateService } from './event-state.service';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { addMonths, addWeeks, format } from 'date-fns';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n    selector: 'event-calendar',\n    template: `\n        <div class=\"flex items-center border-y border-base-200 w-full\">\n            <div class=\"flex-1 px-2 py-4\">\n                <span *ngIf=\"is_today | async\" class=\"text-info text-xs\">{{\n                    (period | async) === 'week' ? 'This Week' : 'This Month'\n                }}</span>\n            </div>\n            <div class=\"flex-2 flex items-center justify-center space-x-2\">\n                <div class=\"font-medium pl-4\">\n                    {{ (options | async)?.date | date: 'MMM yyyy' }}\n                </div>\n                <button icon matRipple (click)=\"previousPeriod()\">\n                    <app-icon>chevron_left</app-icon>\n                </button>\n                <button icon matRipple (click)=\"nextPeriod()\">\n                    <app-icon>chevron_right</app-icon>\n                </button>\n            </div>\n            <div class=\"flex-1 flex items-center justify-end space-x-2 py-2\">\n                <button\n                    btn\n                    matRipple\n                    class=\"rounded-3xl\"\n                    [class.inverse]=\"(period | async) !== 'week'\"\n                    (click)=\"setPeriod('week')\"\n                >\n                    Week\n                </button>\n                <button\n                    btn\n                    matRipple\n                    class=\"rounded-3xl\"\n                    [class.inverse]=\"(period | async) !== 'month'\"\n                    (click)=\"setPeriod('month')\"\n                >\n                    Month\n                </button>\n            </div>\n        </div>\n        <div class=\"w-full h-4\"></div>\n        <div class=\"relative flex-1 h-1/2 w-full overflow-auto\">\n            <event-week-view\n                *ngIf=\"(period | async) !== 'month'; else month_calendar\"\n            ></event-week-view>\n            <ng-template #month_calendar>\n                <event-month-view></event-month-view>\n            </ng-template>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class EventCalendarComponent {\n    public readonly period = this._state.options.pipe(map((_) => _.period));\n\n    public readonly options = this._state.options;\n    public readonly is_today = this.options.pipe(\n        map((_) => _.date <= Date.now() && _.end > Date.now())\n    );\n    public readonly event_list = this._state.event_list;\n    public readonly event_day_map = this.event_list.pipe(\n        map((list) => {\n            const map = {};\n            for (const event of list) {\n                const date = format(event.date, 'yyyy-MM-dd');\n                if (!map[date]) map[date] = [];\n                map[date].push(event);\n            }\n            return map;\n        }),\n        shareReplay(1)\n    );\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: EventStateService,\n        private _router: Router,\n        private _route: ActivatedRoute\n    ) {}\n\n    public setPeriod(period: 'week' | 'month') {\n        this._state.setOptions({ period });\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { period },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    public async nextPeriod() {\n        const { date, period } = await this.options.pipe(take(1)).toPromise();\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: {\n                range:\n                    period === 'week'\n                        ? addWeeks(date, 1).valueOf()\n                        : addMonths(date, 1).valueOf(),\n            },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    public async previousPeriod() {\n        const { date, period } = await this.options.pipe(take(1)).toPromise();\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: {\n                range:\n                    period === 'week'\n                        ? addWeeks(date, -1).valueOf()\n                        : addMonths(date, -1).valueOf(),\n            },\n            queryParamsHandling: 'merge',\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { EventStateService } from './event-state.service';\nimport {\n    addDays,\n    addMonths,\n    endOfDay,\n    startOfMonth,\n    startOfWeek,\n    format,\n    addWeeks,\n} from 'date-fns';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { distinctUntilChanged, map, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'app-event-list',\n    template: `\n        <div class=\"absolute inset-0 flex flex-col\">\n            <div class=\"flex items-center justify-between p-8\">\n                <h2 class=\"text-2xl font-medium\">Events</h2>\n                <a\n                    btn\n                    matRipple\n                    [routerLink]=\"['/entertainment', 'events', 'manage']\"\n                >\n                    <div class=\"ml-2\">Create Event</div>\n                    <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                </a>\n            </div>\n            <div filters class=\"flex items-center px-8 space-x-2 pb-4\">\n                <button\n                    btn\n                    matRipple\n                    class=\"rounded-3xl\"\n                    [class.inverse]=\"view !== 'list'\"\n                    (click)=\"setView('list')\"\n                >\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-xl\">list</app-icon>\n                        <div class=\"pr-2\">List</div>\n                    </div>\n                </button>\n                <button\n                    btn\n                    matRipple\n                    class=\"rounded-3xl\"\n                    [class.inverse]=\"view !== 'calendar'\"\n                    (click)=\"setView('calendar')\"\n                >\n                    <div class=\"flex items-center space-x-2\">\n                        <app-icon class=\"text-xl\">event</app-icon>\n                        <div class=\"pr-2\">Calendar</div>\n                    </div>\n                </button>\n                <div class=\"h-full px-2\">\n                    <div class=\"w-px h-full bg-base-300\"></div>\n                </div>\n                <mat-form-field appearance=\"outline\" class=\"w-32 no-subscript\">\n                    <mat-select\n                        [ngModel]=\"period | async\"\n                        (ngModelChange)=\"setPeriodType($event)\"\n                    >\n                        <mat-option value=\"week\">Week</mat-option>\n                        <mat-option value=\"month\">Month</mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" class=\"w-64 no-subscript\">\n                    <mat-select\n                        [(ngModel)]=\"selected_range\"\n                        (ngModelChange)=\"setPeriod($event)\"\n                    >\n                        <mat-option\n                            [value]=\"range.id\"\n                            *ngFor=\"let range of period_list\"\n                        >\n                            {{ range.display }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"h-1/2 flex-1 w-full px-8 overflow-y-auto relative\">\n                <div\n                    class=\"w-full min-h-full overflow-x-auto\"\n                    *ngIf=\"view === 'list'\"\n                >\n                    <event-listing class=\"block\"></event-listing>\n                </div>\n                <event-calendar\n                    *ngIf=\"view === 'calendar'\"\n                    [period]=\"period | async\"\n                ></event-calendar>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                flex: 1;\n            }\n        `,\n    ],\n})\nexport class EventsListComponent extends AsyncHandler {\n    public readonly period = this._state.options.pipe(\n        map((_) => _.period),\n        distinctUntilChanged()\n    );\n\n    public view: 'list' | 'calendar' = 'list';\n    public period_list = [];\n    public selected_range: number;\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: EventStateService,\n        private _router: Router,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'period',\n            this.period.subscribe(() => {\n                this._generatePeriods();\n                this._initPeriod();\n            })\n        );\n        this._generatePeriods();\n        this._initPeriod();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((q) => {\n                if (q.has('view')) {\n                    this.view = q.get('view') as 'list' | 'calendar';\n                }\n                if (q.has('period') && q.get('period') !== this._state.period) {\n                    this.setPeriodType(\n                        q.get('period') as 'week' | 'month',\n                        false\n                    );\n                }\n                this._generatePeriods();\n\n                if (q.has('range')) {\n                    this.timeout('update', () => {\n                        const id = parseInt(q.get('range'), 10);\n                        const item = this.period_list.find(\n                            (_) => id >= _.start && id < _.end\n                        ) ||\n                            this.period_list[0] || {\n                                start: id,\n                                end:\n                                    this._state.period === 'week'\n                                        ? addWeeks(id, 1).valueOf()\n                                        : addMonths(id, 1).valueOf(),\n                            };\n                        this.selected_range = item.id || id;\n                        this._state.setOptions({\n                            date: item.start,\n                            end: item.end,\n                        });\n                        this.setPeriod(this.selected_range);\n                    });\n                }\n            })\n        );\n    }\n\n    public setView(view: 'list' | 'calendar') {\n        this.view = view;\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { view: view },\n            queryParamsHandling: 'merge',\n        });\n    }\n\n    public setPeriodType(type: 'week' | 'month', set_route = true) {\n        this._state.setOptions({ period: type });\n        if (set_route) {\n            this._router.navigate([], {\n                relativeTo: this._route,\n                queryParams: { period: type },\n                queryParamsHandling: 'merge',\n            });\n        }\n    }\n\n    public setPeriod(id: number) {\n        this.timeout('set_period', () => {\n            const item =\n                this.period_list.find((_) => id >= _.start && id < _.end) ||\n                this.period_list[0];\n            if (!item) return;\n            this.selected_range = item.id;\n            const { start, end } = item;\n            this._state.setOptions({ date: start, end });\n            this._router.navigate([], {\n                relativeTo: this._route,\n                queryParams: { range: id },\n                queryParamsHandling: 'merge',\n            });\n        });\n    }\n\n    private _generatePeriods() {\n        this.timeout('generate_periods', async () => {\n            const periods = [];\n            const period_type = await this.period.pipe(take(1)).toPromise();\n            let date = Date.now();\n            const end_date = addDays(date, 12 * 30).valueOf();\n            const week_offset = this._settings.get('app.week_start') || 0;\n            if (period_type === 'month') {\n                date = startOfMonth(date).valueOf();\n            } else if (period_type === 'week') {\n                date = startOfWeek(date, {\n                    weekStartsOn: week_offset,\n                }).valueOf();\n            }\n            while (date < end_date) {\n                if (period_type === 'week') {\n                    const end = endOfDay(addDays(date, 6)).valueOf();\n                    periods.push({\n                        id: date,\n                        start: date,\n                        end,\n                        display: `${format(\n                            Math.max(Date.now(), date),\n                            'EEE, do MMM'\n                        )} – ${format(end, 'do MMM')}`,\n                    });\n                    date = addDays(date, 7).valueOf();\n                } else if (period_type === 'month') {\n                    const end = addDays(addMonths(date, 1), -1).valueOf();\n                    periods.push({\n                        id: date,\n                        start: date,\n                        end,\n                        display: `${format(date, 'MMMM yyyy')}`,\n                    });\n                    date = addMonths(date, 1).valueOf();\n                } else break;\n            }\n            this.period_list = periods;\n        });\n    }\n\n    private _initPeriod() {\n        this.timeout(\n            'update',\n            () => {\n                if (this.period_list.length) {\n                    this.setPeriod(this.period_list[0].id);\n                    this.selected_range = this.period_list[0].id;\n                }\n            },\n            350\n        );\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component } from '@angular/core';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n    BookingFormService,\n    removeBooking,\n    showBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    SettingsService,\n    TIMEZONES_IANA,\n    currentUser,\n    getInvalidFields,\n    notifyError,\n    randomString,\n    unique,\n} from '@placeos/common';\nimport {\n    Building,\n    BuildingLevel,\n    OrganisationService,\n} from '@placeos/organisation';\nimport { first, startWith, take } from 'rxjs/operators';\nimport { EventStateService } from './event-state.service';\nimport {\n    differenceInMinutes,\n    format,\n    formatDuration,\n    startOfDay,\n} from 'date-fns';\nimport { CalendarEvent, EventFormService, removeEvent } from '@placeos/events';\nimport { StaffUser, User } from '@placeos/users';\n\nconst EMPTY = [];\n\n@Component({\n    selector: 'app-event-manage',\n    template: `\n        <div\n            class=\"absolute inset-0 bg-base-100 overflow-auto\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <a\n                icon\n                matRipple\n                class=\"sticky top-2 right-2 ml-auto\"\n                [routerLink]=\"['/entertainment', 'events']\"\n            >\n                <app-icon>close</app-icon>\n            </a>\n            <form\n                class=\"flex flex-col w-[40rem] max-w-full mx-auto px-4\"\n                [formGroup]=\"form\"\n            >\n                <h3 class=\"py-4 text-2xl font-medium\">\n                    {{ form.value.id ? 'Edit' : 'New' }} Group Event\n                </h3>\n                <section class=\"flex flex-col space-y-2\">\n                    <label for=\"title\">Event Title<span>*</span></label>\n                    <ng-container>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"title\"\n                                formControlName=\"title\"\n                                placeholder=\"e.g. Team Meeting\"\n                            />\n                            <mat-error>\n                                {{ 'FORM.TITLE_ERROR' | translate }}\n                            </mat-error>\n                        </mat-form-field>\n                        <label for=\"host\">Organiser<span>*</span></label>\n                        <a-user-search-field\n                            class=\"block mb-4\"\n                            name=\"host\"\n                            formControlName=\"user\"\n                        ></a-user-search-field>\n                        <label for=\"tags\">Tags</label>\n                        <mat-form-field\n                            appearance=\"outline\"\n                            class=\"no-subscript\"\n                        >\n                            <mat-chip-grid #chipList aria-label=\"Event Tags\">\n                                <mat-chip-row\n                                    *ngFor=\"let tag of tag_list\"\n                                    [selectable]=\"true\"\n                                    [removable]=\"true\"\n                                    (removed)=\"removeTag(tag)\"\n                                >\n                                    {{ tag }}\n                                    <app-icon matChipRemove>close</app-icon>\n                                </mat-chip-row>\n                                <input\n                                    placeholder=\"Add new tags relevant to this event...\"\n                                    [matChipInputFor]=\"chipList\"\n                                    [matChipInputSeparatorKeyCodes]=\"separators\"\n                                    [matChipInputAddOnBlur]=\"true\"\n                                    (matChipInputTokenEnd)=\"addTag($event)\"\n                                />\n                            </mat-chip-grid>\n                        </mat-form-field>\n                        <div class=\"py-4 flex items-center space-x-8\">\n                            <mat-checkbox formControlName=\"featured\">\n                                Featured\n                            </mat-checkbox>\n                            <mat-checkbox\n                                [ngModel]=\"form.value.permission === 'OPEN'\"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                                (ngModelChange)=\"\n                                    form.patchValue({\n                                        permission: $event ? 'OPEN' : 'PRIVATE'\n                                    })\n                                \"\n                            >\n                                Publish\n                            </mat-checkbox>\n                        </div>\n                    </ng-container>\n                    <!-- END BASIC DETAILS -->\n                    <div class=\"w-full h-px bg-base-200\"></div>\n                    <h3 class=\"py-4 text-2xl font-medium\">Date and Time</h3>\n                    <ng-container>\n                        <div class=\"flex items-center flex-wrap sm:space-x-2\">\n                            <div class=\"flex-1 min-w-[256px] relative\">\n                                <label for=\"date\">\n                                    {{ 'FORM.DATE' | translate }}<span>*</span>\n                                </label>\n                                <a-date-field\n                                    name=\"date\"\n                                    formControlName=\"date\"\n                                    [to]=\"end_date\"\n                                >\n                                    {{ 'FORM.DATE_ERROR' | translate }}\n                                </a-date-field>\n                            </div>\n                            <div class=\"flex-1 min-w-[256px] relative\">\n                                <label for=\"date\">\n                                    {{ 'FORM.END_DATE' | translate\n                                    }}<span>*</span>\n                                </label>\n                                <a-date-field\n                                    name=\"date\"\n                                    formControlName=\"date_end\"\n                                    [from]=\"start_date\"\n                                    [to]=\"end_date\"\n                                >\n                                    {{ 'FORM.DATE_ERROR' | translate }}\n                                </a-date-field>\n                            </div>\n                        </div>\n                        <div\n                            class=\"flex items-center space-x-2\"\n                            *ngIf=\"!form.value.all_day\"\n                        >\n                            <div class=\"flex-1 w-1/3\">\n                                <label for=\"start-time\">\n                                    {{ 'FORM.START_TIME' | translate }}\n                                    <span>*</span>\n                                </label>\n                                <a-time-field\n                                    name=\"start-time\"\n                                    [ngModel]=\"form.getRawValue().date\"\n                                    (ngModelChange)=\"\n                                        form.patchValue({ date: $event })\n                                    \"\n                                    [ngModelOptions]=\"{ standalone: true }\"\n                                    [use_24hr]=\"use_24hr\"\n                                ></a-time-field>\n                            </div>\n                            <div class=\"flex-1 w-1/3\">\n                                <label for=\"end-time\">\n                                    {{ 'FORM.END_TIME' | translate\n                                    }}<span>*</span>\n                                </label>\n                                <a-time-field\n                                    name=\"end-time\"\n                                    [ngModel]=\"\n                                        form.value.date_end ||\n                                        form.value.date +\n                                            form.value.duration * 60 * 1000\n                                    \"\n                                    (ngModelChange)=\"\n                                        form.patchValue({ date_end: $event })\n                                    \"\n                                    [ngModelOptions]=\"{ standalone: true }\"\n                                    [from]=\"\n                                        form?.getRawValue()?.date +\n                                        30 * 60 * 1000\n                                    \"\n                                    [use_24hr]=\"use_24hr\"\n                                    [extra_info_fn]=\"duration_info\"\n                                ></a-time-field>\n                            </div>\n                        </div>\n                        <div class=\"flex flex-col\">\n                            <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                                Timezone:\n                            </label>\n                            <mat-form-field appearance=\"outline\">\n                                <app-icon matPrefix class=\"text-2xl\">\n                                    search\n                                </app-icon>\n                                <input\n                                    matInput\n                                    formControlName=\"timezone\"\n                                    placeholder=\"Timezone\"\n                                    [matAutocomplete]=\"auto\"\n                                />\n                            </mat-form-field>\n                            <mat-autocomplete #auto=\"matAutocomplete\">\n                                <mat-option\n                                    *ngFor=\"let tz of filtered_timezones\"\n                                    [value]=\"tz\"\n                                >\n                                    {{ tz }}\n                                </mat-option>\n                                <mat-option\n                                    *ngIf=\"!timezones.length\"\n                                    [disabled]=\"true\"\n                                >\n                                    No matching timezones\n                                </mat-option>\n                            </mat-autocomplete>\n                        </div>\n                    </ng-container>\n                    <!-- END DATE TIME -->\n                    <div class=\"w-full h-px bg-base-200\"></div>\n                    <h3 class=\"py-4 text-2xl font-medium\">Location</h3>\n                    <ng-container>\n                        <div class=\"flex items-center space-x-2 pb-2\">\n                            <button\n                                btn\n                                matRipple\n                                class=\"flex-1\"\n                                [class.inverse]=\"false\"\n                                [class.inverse]=\"\n                                    form.value.attendance_type !== 'ONSITE'\n                                \"\n                                (click)=\"\n                                    form.patchValue({\n                                        attendance_type: 'ONSITE'\n                                    })\n                                \"\n                            >\n                                <app-icon class=\"text-2xl\">domain</app-icon>\n                                <div class=\"mx-2\">On Premise</div>\n                            </button>\n                            <button\n                                btn\n                                matRipple\n                                class=\"flex-1\"\n                                [class.inverse]=\"\n                                    form.value.attendance_type !== 'ONLINE'\n                                \"\n                                (click)=\"\n                                    form.patchValue({\n                                        attendance_type: 'ONLINE'\n                                    })\n                                \"\n                            >\n                                <app-icon class=\"text-2xl\">laptop_mac</app-icon>\n                                <div class=\"mx-2\">Online Only</div>\n                            </button>\n                            <button\n                                btn\n                                matRipple\n                                class=\"flex-1\"\n                                [class.inverse]=\"\n                                    form.value.attendance_type !== 'ANY'\n                                \"\n                                (click)=\"\n                                    form.patchValue({ attendance_type: 'ANY' })\n                                \"\n                            >\n                                <app-icon class=\"text-2xl\">add</app-icon>\n                                <div class=\"mx-2\">Both</div>\n                            </button>\n                        </div>\n                        <ng-container\n                            *ngIf=\"form.value.attendance_type !== 'ONLINE'\"\n                        >\n                            <label for=\"location\">Building Location</label>\n                            <mat-form-field appearance=\"outline\">\n                                <mat-select\n                                    [ngModel]=\"building_zone\"\n                                    [ngModelOptions]=\"{ standalone: true }\"\n                                    (ngModelChange)=\"\n                                        form.controls.zones.setValue([\n                                            $event.parent_id,\n                                            $event.id\n                                        ]);\n                                        setBuilding($event)\n                                    \"\n                                    placeholder=\"Select Building\"\n                                >\n                                    <mat-option\n                                        *ngFor=\"\n                                            let building of building_list\n                                                | async\n                                        \"\n                                        [value]=\"building\"\n                                    >\n                                        {{\n                                            building.display_name ||\n                                                building.name\n                                        }}\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                            <div class=\"flex space-x-2\">\n                                <div class=\"flex flex-col flex-[2]\">\n                                    <label for=\"level\">Level</label>\n                                    <mat-form-field appearance=\"outline\">\n                                        <mat-select\n                                            [ngModel]=\"level_zone\"\n                                            [ngModelOptions]=\"{\n                                                standalone: true\n                                            }\"\n                                            (ngModelChange)=\"setLevel($event)\"\n                                            placeholder=\"Select Level\"\n                                        >\n                                            <mat-option\n                                                *ngFor=\"\n                                                    let level of active_levels\n                                                        | async\n                                                \"\n                                                [value]=\"level\"\n                                            >\n                                                {{\n                                                    level.display_name ||\n                                                        level.name\n                                                }}\n                                            </mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"flex flex-col flex-[3]\">\n                                    <label for=\"level\">Room</label>\n                                    <mat-form-field appearance=\"outline\">\n                                        <mat-select\n                                            formControlName=\"secondary_resource\"\n                                            [disabled]=\"\n                                                (available_spaces | async)\n                                                    ?.length === 0\n                                            \"\n                                            placeholder=\"Select Room\"\n                                        >\n                                            <mat-option><i>None</i></mat-option>\n                                            <mat-option\n                                                *ngFor=\"\n                                                    let room of available_spaces\n                                                        | async\n                                                \"\n                                                [value]=\"room.id\"\n                                            >\n                                                {{\n                                                    room.display_name ||\n                                                        room.name\n                                                }}\n                                            </mat-option>\n                                        </mat-select>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                        </ng-container>\n                    </ng-container>\n                    <!-- END LOCATION -->\n                    <div class=\"w-full h-px bg-base-200\"></div>\n                    <h3 class=\"py-4 text-2xl font-medium\">Event Information</h3>\n                    <ng-container>\n                        <label for=\"title\">Event Description</label>\n                        <rich-text-input\n                            formControlName=\"description\"\n                        ></rich-text-input>\n                        <label for=\"tags\">Images</label>\n                        <image-list-field\n                            formControlName=\"images\"\n                        ></image-list-field>\n                    </ng-container>\n                </section>\n                <div\n                    class=\"flex justify-end space-x-2 sticky bottom-0 w-full bg-base-100 py-4\"\n                >\n                    <a\n                        btn\n                        matRipple\n                        class=\"inverse w-32\"\n                        [routerLink]=\"['/entertainment', 'events']\"\n                    >\n                        Cancel\n                    </a>\n                    <button btn matRipple class=\"w-32\" (click)=\"save()\">\n                        Save\n                    </button>\n                </div>\n            </form>\n        </div>\n        <ng-template #load_state>\n            <div\n                class=\"absolute inset-0 bg-base-100 flex flex-col items-center justify-center space-y-4\"\n            >\n                <mat-spinner diameter=\"48\"></mat-spinner>\n                <p>Saving event...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EventManageComponent extends AsyncHandler {\n    public loading = false;\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n\n    public readonly form = this._form_state.form;\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n    public readonly building_list = this._org.building_list;\n    public readonly active_levels = this._org.active_levels;\n    public readonly available_spaces = this._event_form.available_spaces;\n\n    public get tag_list() {\n        return this.form.getRawValue().tags || EMPTY;\n    }\n\n    public get max_duration() {\n        return this._settings.get('app.events.max_duration') || 480;\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    public get building_zone() {\n        const zones = this.form.getRawValue().zones || [];\n        const building = this._org.buildings.find((b) => zones.includes(b.id));\n        return building || this._org.building;\n    }\n\n    public get level_zone() {\n        const zones = this.form.getRawValue().zones;\n        const level = this._org.levelWithID(zones);\n        return level;\n    }\n\n    public readonly duration_info = (time: number) => {\n        const date = this.form.getRawValue().date;\n        if (format(date, 'yyyy-MM-dd') !== format(time, 'yyyy-MM-dd'))\n            return '';\n        const diff = differenceInMinutes(time, date);\n        return ` (${formatDuration({\n            hours: Math.floor(diff / 60),\n            minutes: diff % 60,\n        })})`;\n    };\n\n    constructor(\n        private _form_state: BookingFormService,\n        private _event_form: EventFormService,\n        private _state: EventStateService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._form_state.setOptions({ type: 'group-event' });\n        this.form.patchValue({\n            booking_type: 'group-event',\n            asset_id: `${\n                currentUser()?.name || currentUser()?.email\n            } [${randomString(4)}]`,\n            permission: 'OPEN',\n            zones: unique([\n                this._org.organisation.id,\n                this._org.building.id,\n                this._org.building.parent_id,\n            ]),\n            location:\n                this._org.building.address || this._org.building.display_name,\n            user: currentUser(),\n            attendance_type: 'ONSITE',\n        });\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(async (params) => {\n                if (params.has('id')) {\n                    const booking = await showBooking(\n                        params.get('id')\n                    ).toPromise();\n                    if (!booking)\n                        return this._router.navigate([\n                            '/entertainment',\n                            'events',\n                        ]);\n                    this._form_state.newForm(booking);\n                    console.log('Booking:', booking.tags);\n                    if (booking.linked_event) {\n                        this._event_form.newForm(\n                            new CalendarEvent(booking.linked_event)\n                        );\n                        this.form.patchValue({\n                            secondary_resource: booking.linked_event.system_id,\n                        });\n                    }\n                    this.form.patchValue({\n                        tags: booking.tags,\n                        user: new StaffUser({\n                            id: booking.user_id,\n                            email: booking.user_email,\n                            name: booking.user_name,\n                        }),\n                    });\n                }\n            })\n        );\n        this.subscription(\n            'form_change',\n            this.form.valueChanges\n                .pipe(startWith(this.form.value))\n                .subscribe(() => {\n                    this._event_form.form.patchValue(this.form.value);\n                    this._event_form.setOptions({\n                        zone_ids: [\n                            this.level_zone?.id || this.building_zone?.id,\n                        ],\n                    });\n                })\n        );\n        this.subscription(\n            'organiser_change',\n            this.form.controls.user.valueChanges.subscribe((value) => {\n                const name = value?.name || value?.email;\n                const value_name =\n                    (name ? `${name} [${randomString(4)}]` : '') ||\n                    this.form.getRawValue().asset_id;\n                this.form.patchValue({ asset_id: value_name });\n            })\n        );\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(() => this._updateTimezoneList())\n        );\n    }\n\n    public setBuilding(bld: Building) {\n        this._org.building = bld;\n    }\n\n    public setLevel(level: BuildingLevel) {\n        const new_zones = unique([\n            this._org.organisation.id,\n            this._org.building.parent_id,\n            this._org.building.id,\n            level.id,\n        ]);\n        this.form.controls.zones.setValue(new_zones);\n    }\n\n    /**\n     * Add a feature to the list of features for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const input = event.chipInput.inputElement;\n        const value = event.value;\n        const feature_list = this.tag_list;\n        if ((value || '').trim()) {\n            feature_list.push(value);\n            this.form.controls.tags.setValue(feature_list);\n        }\n        if (input) input.value = '';\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Feature to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(this.form)}]`\n            );\n        }\n        this.loading = true;\n        const booking = this._form_state.booking;\n        // Remove Old Event if linked\n        if (\n            booking?.id &&\n            (booking.linked_event || this.form.getRawValue().secondary_resource)\n        ) {\n            if (booking.linked_event) {\n                await removeEvent(booking.linked_event.event_id)\n                    .toPromise()\n                    .catch((e) => {\n                        notifyError(e);\n                        this.loading = false;\n                        throw e;\n                    });\n            }\n            await removeBooking(booking.id)\n                .toPromise()\n                .catch((e) => {\n                    notifyError(e);\n                    this.loading = false;\n                    throw e;\n                });\n            this._form_state.form.patchValue({ id: null });\n        }\n        // Create event if linked to a space\n        if (this.form.getRawValue().secondary_resource) {\n            const spaces = await this.available_spaces\n                .pipe(take(1))\n                .toPromise();\n            const space = spaces.find(\n                (s) => s.id === this.form.getRawValue().secondary_resource\n            );\n            const value = { ...this.form.getRawValue() };\n            delete value.id;\n            console.log('Event value:', value);\n            this._event_form.form.patchValue({\n                ...value,\n                id: null,\n                resources: [space],\n            });\n            const event = await this._event_form.postForm().catch((e) => {\n                notifyError(e);\n                this.loading = false;\n                throw e;\n            });\n            console.log('Event:', event);\n            if (!event) return;\n            this.form.patchValue({\n                ical_uid: event.ical_uid,\n                event_id: event.id,\n                location: space.display_name || space.name,\n            });\n        }\n        this.form.patchValue({ asset_name: '' });\n        if (!this.form.getRawValue().description)\n            this.form.patchValue({ description: ' ' });\n        const date = this.form.getRawValue().date;\n        const res = await this._form_state.postForm().catch(async (e) => {\n            notifyError(e);\n            if (this.form.getRawValue().event_id) {\n                await removeEvent(this.form.getRawValue().event_id).toPromise();\n            }\n        });\n        this._state.changed();\n        this.loading = false;\n        if (res) {\n            this._router.navigate(['/entertainment', 'events'], {\n                queryParams: { range: startOfDay(date).valueOf() },\n            });\n        }\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { EventsComponent } from './events.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\nimport { EventsListComponent } from './events-list.component';\nimport { EventManageComponent } from './event-manage.component';\nimport { SharedSpacesModule } from '@placeos/spaces';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { EventListingComponent } from './event-listing.component';\nimport { EventWeekViewComponent } from './event-week-view.component';\nimport { EventMonthViewComponent } from './event-month-view.component';\nimport { EventCalendarComponent } from './event-calendar.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { SharedEventsModule } from '@placeos/events';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: EventsComponent,\n        children: [{ path: '', component: EventsListComponent }],\n    },\n    { path: 'manage', component: EventManageComponent },\n    { path: 'manage/:id', component: EventManageComponent },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [\n        EventsComponent,\n        EventsListComponent,\n        EventManageComponent,\n        EventListingComponent,\n        EventCalendarComponent,\n        EventWeekViewComponent,\n        EventMonthViewComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedBookingsModule,\n        SharedEventsModule,\n        FormFieldsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class EventsModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}