{"version":3,"sources":["./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./libs/catering/src/lib/catering-menu-item.component.ts","./libs/catering/src/lib/catering-menu.component.ts","./libs/catering/src/lib/catering-order-item.component.ts","./libs/catering/src/lib/catering-orders.service.ts","./libs/catering/src/lib/catering.vars.ts","./libs/catering/src/lib/catering-order.component.ts","./libs/catering/src/lib/catering-order-list.component.ts","./libs/catering/src/lib/catering.module.ts","./apps/concierge/src/app/catering/catering-topbar.component.ts","./apps/concierge/src/app/catering/catering.component.ts","./apps/concierge/src/app/catering/catering.module.ts"],"names":["RULE_TYPES","id","name","CateringConfigModalComponent","_data","event","loading","rule_types","this","rulesets","config","map","set","rules","i","JSON","stringify","Math","floor","random","value","parse","e","emit","reason","metadata","saveChanges","CateringItemModalComponent","form","item","description","category","unit_price","tags","accept_points","discount_cap","separators","console","log","categories","controls","markAsDirty","input","tag_list","trim","push","setValue","existing_tag","index","indexOf","splice","CateringItemOptionModalComponent","option","types","group","multiple","new_option","parent","options","filter","concat","cateringItemAvailable","is_available","rule","includes","space","zones","matches","condition","date","Date","isAfter","setHours","isBefore","duration","ext","length","CateringOrderModalComponent","super","menu_items$","menu","pipe","list","cat","order","charge_code","subscription","valueChanges","subscribe","state","timeout","getCateringConfig","level","parent_id","choose_options","old_item","items","find","itm","reduce","c","o","opt","selectOptions","then","new_item","addItem","quantity","amount","sort","a","b","localeCompare","join","markAllAsTouched","valid","CateringOrderOptionsModalComponent","option_state","groups","group_list","saveOptions","CateringStateService","_org","_dialog","_menu","BehaviorSubject","_loading","_currency","asObservable","currency","active_building","bld","getCateringForZone","next","getValue","ref","open","data","_","details","Promise","race","componentInstance","first","toPromise","afterClosed","findIndex","updateMenu","building","close","title","content","icon","type","class","updateConfig","zone_id","Array","match","CateringMenuItemComponent","_catering","show_options","addOption","editOption","removeOption","deleteOption","editItem","removeItem","deleteItem","CateringMenuComponent","shown_tab","tab_menu","menu_map","CateringOrderItemComponent","active","CateringOrdersService","_poll","_filters","orders","combineLatest","debounceTime","switchMap","filters","start","getUnixTime","startOfDay","now","end","endOfDay","zone_ids","period_start","period_end","events","tap","shareReplay","filtered","s","search","toLowerCase","checkOrder","delay","interval","valueOf","clearInterval","status","updated_order","catering","CATERING_STATUSES","colour","CateringOrderComponent","_orders","show_items","statuses","updateStatus","CateringOrderListComponent","order_list","startPolling","stopPolling","undefined","SharedCateringModule","CateringTopbarComponent","_route","_router","setDate","levels","active_levels","updateZones","z","navigate","relativeTo","queryParams","editConfig","initialised","queryParamMap","params","has","get","split","levelWithID","buildings","paramMap","page","zone","lvl","CateringComponent","ROUTES","path","component","CateringModule"],"mappings":"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","file":"apps_concierge_src_app_catering_catering_module_ts.js","sourcesContent":["import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {\n        console.log('Form:', this.form);\n    }\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories | async\">\n                        <mat-tab\n                            *ngIf=\"((menu_items$ | async) || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-50\"\n                                    *ngFor=\"\n                                        let item of ((menu_items$ | async) ||\n                                            {})[cat]\n                                    \"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"info no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <button\n                                        mat-icon-button\n                                        (click)=\"addItem(item)\"\n                                    >\n                                        <app-icon\n                                            [icon]=\"{\n                                                class: 'material-icons',\n                                                content: 'add'\n                                            }\"\n                                        ></app-icon>\n                                    </button>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer *ngIf=\"!loading\">\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 24em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 8em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public readonly menu_items$: Observable<HashMap<CateringItem[]>>;\n    /** List of categories for the active menu */\n    public get categories(): Observable<string[]> {\n        return this._data.menu.pipe(\n            map((list) => unique(list.map((item) => item.category)))\n        );\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n        this.menu_items$ = this._data.menu.pipe(\n            map((list) => {\n                const categories = unique(list.map((item) => item.category));\n                const map = {};\n                for (const cat of categories) {\n                    map[cat] = list.filter(\n                        (item) =>\n                            item.category === cat &&\n                            cateringItemAvailable(\n                                item,\n                                this.rules as any,\n                                this.order.event\n                            )\n                    );\n                }\n                return map;\n            })\n        );\n        this.order = new CateringOrder(this._data.order);\n        this.form = new FormGroup({\n            charge_code: new FormControl(this.order.charge_code, [\n                Validators.required,\n            ]),\n        });\n        this.subscription(\n            'charge_code',\n            this.form.controls.charge_code.valueChanges.subscribe(\n                (value) =>\n                    (this.order = new CateringOrder({\n                        ...this.order,\n                        charge_code: value,\n                    }))\n            )\n        );\n        this.subscription(\n            'loading',\n            this._data.loading.subscribe(\n                (state) => (this.loading = state ? 'Loading menu...' : '')\n            )\n        );\n        this.loading = 'Loading menu...';\n        this.timeout('loading', () => (this.loading = ''), 1000);\n    }\n\n    public async ngOnInit() {\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            i !== old_item &&\n                            i.options.length === old_item.options.length\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                item.options.length ===\n                    item.options.reduce(\n                        (c, o) =>\n                            c +\n                            (itm.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter((i) => i.id !== item.id)\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            this.event.emit({\n                reason: 'done',\n                metadata: { order: this.order },\n            });\n        }\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                None\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer>\n            <button mat-button (click)=\"saveOptions()\">Save</button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass, flatten, openConfirmModal, unique } from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, { name: 'catering' }).toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, { name: 'catering_config' }).toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringStateService } from './catering-state.service';\nimport { CateringOption } from './catering.interfaces';\n\n@Component({\n    selector: '[catering-menu-item]',\n    template: `\n        <div item class=\"flex items-center px-2\" *ngIf=\"item\">\n            <div class=\"flex items-center p-2 flex-1\">\n                <div class=\"flex-1\">\n                    <div>{{ item.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">\n                        {{ item.category }}\n                    </div>\n                </div>\n                <div\n                    class=\"p-2 m-2 text-xs font-bold text-white rounded bg-primary\"\n                >\n                    {{ item.unit_price / 100 | currency: (symbol | async) }}\n                </div>\n            </div>\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                <app-icon>more_vert</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                [disabled]=\"!item.options.length\"\n                (click)=\"show_options = !show_options\"\n            >\n                <app-icon>expand_more</app-icon>\n            </button>\n        </div>\n        <div\n            options\n            *ngIf=\"item\"\n            class=\"bg-gray-100 overflow-hidden\"\n            [style.height]=\"\n                show_options ? item.options.length * 3.5 + 'rem' : '0'\n            \"\n        >\n            <div\n                class=\"flex p-2 items-center border-none border-t border-solid border-gray-300\"\n                *ngFor=\"let option of item.options\"\n            >\n                <div class=\"flex-1 px-2\">\n                    <div class=\"text\">{{ option.name }}</div>\n                    <div class=\"text-xs text-dark-fade\">{{ option.group }}</div>\n                </div>\n                <button\n                    edit\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"editOption(option)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    remove\n                    mat-icon-button\n                    class=\"mx-2\"\n                    (click)=\"removeOption(option)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </div>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"addOption()\"\n            >\n                <app-icon>add</app-icon>\n                <div class=\"ml-2\">Add Option</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"editItem()\"\n            >\n                <app-icon>edit</app-icon>\n                <div class=\"ml-2\">Edit Item</div>\n            </button>\n            <button\n                mat-menu-item\n                class=\"flex items-center\"\n                (click)=\"removeItem()\"\n            >\n                <app-icon>delete</app-icon>\n                <div class=\"ml-2\">Remove Item</div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                background-color: #fff;\n                border: 1px solid #ccc;\n                border-radius: 0.25rem;\n                overflow: hidden;\n                width: 768px;\n                margin: 0.5rem auto;\n                max-width: calc(100vw - 1rem);\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            [options] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class CateringMenuItemComponent {\n    /** Item to display */\n    @Input() public item: CateringItem;\n    /** Whether to show item options */\n    public show_options = false;\n\n    public readonly addOption = () => this._catering.addOption(this.item);\n\n    public readonly editOption = (option: CateringOption) =>\n        this._catering.addOption(this.item, option);\n\n    public readonly removeOption = (option: CateringOption) =>\n        this._catering.deleteOption(this.item, option);\n\n    public readonly editItem = () => this._catering.addItem(this.item);\n\n    public readonly removeItem = () => this._catering.deleteItem(this.item);\n\n    /** Currency symbol for active menu */\n    public get symbol() {\n        return this._catering.currency;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CateringStateService } from './catering-state.service';\n\n@Component({\n    selector: 'catering-menu',\n    template: `\n        <mat-tab-group\n            class=\"h-full\"\n            (selectedIndexChange)=\"\n                shown_tab.next($event === 0 ? '' : categories[$event - 1])\n            \"\n        >\n            <mat-tab label=\"All Items\">\n                <ng-container *ngIf=\"(menu | async)?.length; else empty_state\">\n                    <ng-container *ngFor=\"let item of menu | async\">\n                        <div catering-menu-item [item]=\"item\"></div>\n                    </ng-container>\n                </ng-container>\n            </mat-tab>\n            <mat-tab *ngFor=\"let group of categories\" [label]=\"group\">\n                <ng-container *ngFor=\"let item of (tab_menu | async)[group]\">\n                    <div catering-menu-item [item]=\"item\"></div>\n                </ng-container>\n            </mat-tab>\n        </mat-tab-group>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2\">\n                <app-icon>close</app-icon>\n                <p>No items in menu</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 90%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringMenuComponent {\n    /** Observable for the currently active menu */\n    public readonly menu = this._catering.menu;\n    /** Store for the currently selected tab */\n    public readonly shown_tab = new BehaviorSubject<string>('');\n    /** Observable for the menu list for the selected tab */\n    public readonly tab_menu = this.menu.pipe(\n        map((menu) => {\n            const menu_map = {};\n            for (const group of this.categories) {\n                menu_map[group] = menu.filter(\n                    (item) => item.category === group\n                );\n            }\n            return menu_map;\n        })\n    );\n\n    public get categories() {\n        return this._catering.categories;\n    }\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: '[catering-order-item]',\n    template: `\n        <div class=\"w-20 text-right\">\n            <div name=\"item-bar\" class=\"bg-gray-300\"></div>\n        </div>\n        <div class=\"w-12 mr-4\">\n            <button\n                mat-icon-button\n                class=\"border border-gray-300 border-dashed text-2xl text-dark-fade\"\n                [class.bg-success]=\"active\"\n                [class.text-white]=\"active\"\n                [class.border-solid]=\"active\"\n            >\n                <app-icon>{{ active ? 'done' : 'local_pizza' }}</app-icon>\n            </button>\n        </div>\n        <div class=\"flex-1 border-b border-gray-300 border-solid py-4\">\n            {{ item?.name }}\n        </div>\n    `,\n    styles: [\n        `\n            :host:last-child > div {\n                border: none !important;\n            }\n\n            [name='item-bar'] {\n                height: 2px;\n                margin-left: auto;\n                margin-right: 1rem;\n                width: calc(50% - 0.9375rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderItemComponent {\n    @Input() public item: CateringItem;\n\n    public active = false;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, debounceTime, tap, shareReplay } from 'rxjs/operators';\nimport { startOfDay, endOfDay, getUnixTime } from 'date-fns';\n\nimport { BaseClass, flatten } from '@placeos/common';\nimport { queryEvents, saveEvent } from 'libs/events/src/lib/events.fn';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\n\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOrderStatus } from './catering.interfaces';\n\nexport interface CateringOrderFilters {\n    /** UTC epoch of the date to get catering orders for */\n    date?: number;\n    /** List of zones to filter catering order bookings */\n    zones?: string[];\n    /** Search string to filter orders on */\n    search?: string;\n}\n\nfunction checkOrder(\n    order: CateringOrder,\n    filters: CateringOrderFilters\n): boolean {\n    const s = (filters.search || '').toLowerCase();\n    return !!order.items.find(\n        (item) =>\n            item.name.toLowerCase().includes(s) ||\n            !!item.options.find((option) =>\n                option.name.toLowerCase().includes(s)\n            )\n    );\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringOrdersService extends BaseClass {\n    private _poll = new BehaviorSubject<number>(0);\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _filters = new BehaviorSubject<CateringOrderFilters>({});\n\n    /** Observable for list of orders */\n    public readonly orders: Observable<CateringOrder[]> = combineLatest([\n        this._filters,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            this._loading.next(true);\n            const start = getUnixTime(startOfDay(filters.date || Date.now()));\n            const end = getUnixTime(endOfDay(filters.date || Date.now()));\n            return queryEvents({\n                zone_ids: (filters.zones || []).join(','),\n                period_start: start,\n                period_end: end,\n            });\n        }),\n        map((events) => flatten(events.map((event) => event.ext('catering')))),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    );\n    /** Observable for loading status of orders */\n    public readonly loading = this._loading.asObservable();\n    /** Order filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n    /** Order filters */\n    public set filters(filters: CateringOrderFilters) {\n        this._filters.next(filters);\n    }\n    /** Filtered list of catering orders */\n    public readonly filtered = this.orders.pipe(\n        map((list) =>\n            list.filter((order) => checkOrder(order, this._filters.getValue()))\n        )\n    );\n\n    constructor() {\n        super();\n        this.subscription('changes', this.orders.subscribe());\n    }\n\n    /** Start polling for catering orders */\n    public startPolling(delay: number = 15 * 1000) {\n        this.interval(\n            'polling',\n            () => this._poll.next(new Date().valueOf()),\n            delay\n        );\n    }\n\n    /** Stop polling for new catering orders */\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    /**\n     * Update the status of the order\n     * @param order Order to update\n     * @param status New order status\n     */\n    public updateStatus(order: CateringOrder, status: CateringOrderStatus) {\n        const updated_order = new CateringOrder({ ...order, status });\n        const event = new CalendarEvent({\n            ...order.event,\n            catering: [\n                ...order.event.ext('catering').filter((o) => o.id !== order.id),\n                updated_order,\n            ].map((i) => new CateringOrder({ ...i })),\n        });\n        return saveEvent(event);\n    }\n}\n","import { Identity } from '@placeos/common';\n\nexport const CATERING_STATUSES: Identity[] = [\n    { id: 'pending', name: 'Pending', icon: { class: 'custom-pending' }, colour: '#ccc' },\n    { id: 'accepted', name: 'Accepted', icon: { class: 'custom-accepted' }, colour: '#3996B6' },\n    {\n        id: 'preparing',\n        name: 'Preparing',\n        icon: { class: 'custom-preparing' },\n        colour: '#E7536B',\n    },\n    { id: 'ready', name: 'Ready', icon: { class: 'custom-ready' }, colour: '#FFD028' },\n    {\n        id: 'delivered',\n        name: 'Delivered',\n        icon: { class: 'custom-delivered' },\n        colour: '#75BB43',\n    },\n    {\n        id: 'cancelled',\n        name: 'Cancelled',\n        icon: { class: 'custom-cancelled' },\n        colour: '#747474',\n    },\n];\n","import { Component, Input } from '@angular/core';\n\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from '@placeos/common';\n\nimport { CateringOrdersService } from './catering-orders.service';\nimport { CateringOrder } from './catering-order.class';\nimport { CATERING_STATUSES } from './catering.vars';\n\n@Component({\n    selector: 'catering-order',\n    template: `\n        <div\n            class=\"w-full flex items-center py-2 bg-gray-100\"\n            [class.shown]=\"show_items\"\n            *ngIf=\"order\"\n        >\n            <div class=\"w-20 flex items-center justify-center\">\n                <div\n                    class=\"rounded-full bg-gray-300  p-2 text-2xl text-dark-fade flex items-center justify-center\"\n                >\n                    <app-icon>room_service</app-icon>\n                </div>\n            </div>\n            <div class=\"w-24\">{{ order.deliver_at | date: 'shortTime' }}</div>\n            <div class=\"flex-1\">\n                {{\n                    order.event?.space.display_name ||\n                        order.event?.space.name ||\n                        '~ No Location ~'\n                }}\n            </div>\n            <div class=\"w-56\">\n                {{\n                    order.event?.organiser?.name ||\n                        order.event?.host ||\n                        '~ Unknown Host ~'\n                }}\n            </div>\n            <div class=\"w-24\">{{ order.charge_code || '~ No Code ~' }}</div>\n            <div class=\"w-28\">\n                {{ order.invoice_number || '~ No Invoice ~' }}\n            </div>\n            <div class=\"w-36\">\n                <button\n                    name=\"status\"\n                    class=\"text-base border-none h-10 px-4 flex items-center text-white w-36\"\n                    matRipple\n                    [style.background]=\"status?.colour\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <div class=\"flex text-center capitalize mx-2\">\n                        {{ status?.name }}\n                    </div>\n                    <app-icon class=\"pl-2\">arrow_drop_down</app-icon>\n                </button>\n            </div>\n            <div class=\"w-12\">\n                <button mat-icon-button (click)=\"show_items = !show_items\">\n                    <app-icon>{{\n                        show_items\n                            ? 'keyboard_arrow_down'\n                            : 'keyboard_arrow_right'\n                    }}</app-icon>\n                </button>\n            </div>\n        </div>\n        <ul\n            *ngIf=\"order?.items.length\"\n            class=\"list-none p-0 m-0 w-full relative\"\n            [class.shown]=\"show_items\"\n            [@show]=\"show_items ? 'show' : 'hide'\"\n        >\n            <div\n                name=\"bar\"\n                class=\"absolute top-0 bg-gray-300\"\n                [style.height]=\"3.125 * order.items.length - 1 + 'rem'\"\n            ></div>\n            <li\n                catering-order-item\n                class=\"flex items-center\"\n                *ngFor=\"let item of order.items; let i = index\"\n                [item]=\"item\"\n            ></li>\n        </ul>\n        <mat-menu #menu=\"matMenu\">\n            <button\n                mat-menu-item\n                *ngFor=\"let status of statuses\"\n                class=\"flex items-center\"\n                (click)=\"updateStatus(status.id)\"\n            >\n                <div\n                    class=\"rounded-full h-4 w-4 mr-2\"\n                    [style.background-color]=\"status.colour\"\n                ></div>\n                <span class=\"mr-2 w-20\">{{ status.name }}</span>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            [name='status'] {\n                border-radius: 1.55rem;\n            }\n\n            button[mat-menu-item] {\n                display: flex;\n            }\n\n            .shown {\n                background-color: #eee;\n            }\n\n            [name='bar'] {\n                width: 2px;\n                top: -0.5rem;\n                left: calc(2.5rem - 1px);\n            }\n        `,\n    ],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringOrderComponent {\n    @Input() public order: CateringOrder;\n    /** Whether to show the items in the catering order */\n    public show_items = false;\n    /** List of status available to select */\n    public readonly statuses = CATERING_STATUSES;\n\n    public readonly updateStatus = (s) =>\n        this._orders.updateStatus(this.order, s);\n\n    public get status() {\n        return this.statuses.find((i) => i.id === this.order.status);\n    }\n\n    constructor(private _orders: CateringOrdersService) {}\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CateringOrder } from './catering-order.class';\n\nimport { CateringOrdersService } from './catering-orders.service';\n\n@Component({\n    selector: 'catering-order-list',\n    template: `\n        <div\n            class=\"w-full text-sm font-medium flex items-center py-4 border-solid border-b border-gray-300 bg-white\"\n        >\n            <div class=\"w-20\"></div>\n            <div class=\"w-24\">Time</div>\n            <div class=\"flex-1\">Location</div>\n            <div class=\"w-56\">Host</div>\n            <div class=\"w-24\">Charge Code</div>\n            <div class=\"w-28\">Invoice No.</div>\n            <div class=\"w-36\">Status</div>\n            <div class=\"w-12\"></div>\n        </div>\n        <ul class=\"list-none p-0 m-0 w-full flex-1 overflow-auto\">\n            <li\n                class=\"border-solid border-b border-gray-300\"\n                *ngFor=\"let order of order_list | async; trackBy: trackByFn\"\n            >\n                <catering-order [order]=\"order\"></catering-order>\n            </li>\n            <div\n                empty\n                class=\"info-block text-dark-fade\"\n                *ngIf=\"!(order_list | async)?.length\"\n            >\n                <p>No Catering Orders</p>\n            </div>\n        </ul>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            class=\"w-full\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class CateringOrderListComponent implements OnInit, OnDestroy {\n    /** List of filtered orders */\n    public readonly order_list = this._orders.filtered;\n    /** Whether order list is loading */\n    public readonly loading = this._orders.loading;\n\n    constructor(private _orders: CateringOrdersService) {}\n\n    public ngOnInit() {\n        this._orders.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._orders.stopPolling();\n    }\n\n    /* istanbul ignore next */\n    public trackByFn(index: number, order: CateringOrder) {\n        return order ? order.id : undefined;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { ComponentsModule } from '@placeos/components';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { CateringConfigModalComponent } from './catering-config-modal.component';\nimport { CateringItemModalComponent } from './catering-item-modal.component';\nimport { CateringMenuItemComponent } from './catering-menu-item.component';\nimport { CateringMenuComponent } from './catering-menu.component';\nimport { CateringItemOptionModalComponent } from './catering-option-modal.component';\nimport { CateringOrderItemComponent } from './catering-order-item.component';\nimport { CateringOrderListComponent } from './catering-order-list.component';\nimport { CateringOrderModalComponent } from './catering-order-modal.component';\nimport { CateringOrderOptionsModalComponent } from './catering-order-options-modal.component';\nimport { CateringOrderComponent } from './catering-order.component';\n\n\nconst COMPONENTS: Type<any>[] = [\n    CateringOrderOptionsModalComponent,\n    CateringOrderModalComponent,\n    CateringConfigModalComponent,\n    CateringItemModalComponent,\n    CateringMenuComponent,\n    CateringMenuItemComponent,\n    CateringItemOptionModalComponent,\n    CateringOrderListComponent,\n    CateringOrderComponent,\n    CateringOrderItemComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        MatMenuModule,\n        MatTabsModule,\n        MatAutocompleteModule,\n        MatDialogModule,\n        MatCheckboxModule,\n        FormsModule,\n        ReactiveFormsModule,\n        ComponentsModule,\n        FormFieldsModule\n    ],\n    providers: [],\n    exports: [...COMPONENTS],\n})\nexport class SharedCateringModule {}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CateringOrdersService, CateringStateService } from '@placeos/catering';\n\n@Component({\n    selector: 'catering-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option *ngFor=\"let level of levels | async\" [value]=\"level.id\">\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button *ngIf=\"page === 'menu'\" mat-button (click)=\"addItem()\">Add Item</button>\n        <button *ngIf=\"page === 'menu'\" mat-button (click)=\"editConfig()\">Edit Config</button>\n        <div class=\"flex-1 w-2\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: .5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class CateringTopbarComponent extends BaseClass {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** Currently active page */\n    public page: string;\n    /** Set filtered date */\n    public readonly setDate = (date) => (this._orders.filters = { ...this._orders.filters, date });\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._orders.filters = { ...this._orders.filters, zones: [z] };\n    };\n\n    public readonly addItem = () => this._catering.addItem();\n    public readonly editConfig = () => this._catering.editConfig();\n\n    constructor(\n        private _orders: CateringOrdersService,\n        private _catering: CateringStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(\n                (params) => (this.page = params.has('view') ? params.get('view') : '')\n            )\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) => levels.find((lvl) => lvl.id === zone));\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\n\n\n@Component({\n    selector: '[app-catering]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col\">\n            <catering-topbar class=\"relative z-10\"></catering-topbar>\n            <ng-container [ngSwitch]=\"page\">\n                <catering-order-list\n                    *ngSwitchCase=\"'orders'\"\n                    class=\"flex-1\"\n                ></catering-order-list>\n                <catering-menu *ngSwitchCase=\"'menu'\" class=\"flex-1\"></catering-menu>\n                <div *ngSwitchDefault class=\"flex flex-1 items-center justify-center\">\n                    <a\n                        matRipple\n                        class=\"rounded flex flex-col items-center bg-white shadow text-black\"\n                        [routerLink]=\"['/catering', 'menu']\"\n                    >\n                        <div\n                            name=\"img\"\n                            class=\"relative w-full flex flex-1 items-center justify-center text-2xl text-white bg-center bg-cover\"\n                            [style.background-image]=\"'url(assets/menus.jpg)'\"\n                        >\n                            <div class=\"absolute inset-0 bg-black opacity-60 z-0\"></div>\n                            <span class=\"z-10\">Menus and Pricing</span>\n                        </div>\n                        <div\n                            class=\"p-2 h-14 w-full text-sm text-center flex items-center justify-center\"\n                        >\n                            View and Edit Menus and Pricing\n                        </div>\n                    </a>\n                    <a\n                        matRipple\n                        class=\"rounded flex flex-col items-center bg-white shadow text-black\"\n                        [routerLink]=\"['/catering', 'orders']\"\n                    >\n                        <div\n                            name=\"img\"\n                            class=\"relative w-full flex flex-1 items-center justify-center text-2xl text-white bg-center bg-cover\"\n                            [style.background-image]=\"'url(assets/orders.jpg)'\"\n                        >\n                            <div class=\"absolute inset-0 bg-black opacity-60 z-0\"></div>\n                            <span class=\"z-10\">Today's Orders</span>\n                        </div>\n                        <div\n                            class=\"p-2 h-14 w-full text-sm text-center flex items-center justify-center\"\n                        >\n                            View Catering Orders and their statuses upon arrival\n                        </div>\n                    </a>\n                </div>\n            </ng-container>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            a {\n                width: 28rem;\n                height: 16rem;\n                margin-left: 0.5rem;\n                text-decoration: none;\n                transition: background 200ms;\n            }\n\n            a:hover {\n                background-color: #00000001 !important;\n            }\n\n            a:first-child {\n                margin: 0;\n            }\n        `,\n    ],\n})\nexport class CateringComponent extends BaseClass {\n    /** Page being displayed */\n    public page: string;\n\n    constructor(private _route: ActivatedRoute) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe(\n                (params) => (this.page = params.has('view') ? params.get('view') : '')\n            )\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatChipsModule } from '@angular/material/chips';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { CateringComponent } from './catering.component';\nimport { CateringTopbarComponent } from './catering-topbar.component';\nimport { SharedCateringModule } from '@placeos/catering';\n\nconst ROUTES: Route[] = [\n    { path: '', component: CateringComponent },\n    { path: ':view', component: CateringComponent },\n];\n\n@NgModule({\n    declarations: [CateringComponent, CateringTopbarComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        MatTabsModule,\n        MatChipsModule,\n        SharedCateringModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class CateringModule {}\n"],"sourceRoot":"webpack:///"}