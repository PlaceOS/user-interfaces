{"version":3,"sources":["./libs/explore/src/lib/explore-zones.service.ts","./libs/explore/src/lib/explore-booking-modal.component.ts","./libs/explore/src/lib/explore-map-control.component.ts","./libs/explore/src/lib/explore-desk-info.component.ts","./libs/explore/src/lib/explore-space-info.component.ts","./libs/explore/src/lib/explore-device-info.component.ts","./libs/explore/src/lib/explore-map-view.component.ts","./libs/explore/src/lib/explore-desks.service.ts","./libs/explore/src/lib/explore-zoom-control.component.ts","./node_modules/@angular/material/fesm2015/slide-toggle.js","./libs/explore/src/lib/explore-spaces.service.ts","./libs/explore/src/lib/explore-state.service.ts","./apps/workplace/src/app/bookings/space-flow/space-flow.service.ts","./libs/explore/src/lib/explore.module.ts"],"names":["ExploreZonesService","_state","_org","_settings","super","_level","_bindings","_statuses","_labels","_location","_capacity","this","init","initialised","pipe","_","toPromise","zone_metadata","Promise","all","levels","map","bld","id","name","zone","areas","details","area","properties","capacity","label_location","x","y","subscription","level","subscribe","clearBindings","bindToZones","unsub","forEach","b","unbind","buildings","find","parent_id","system_id","organisation","bindings","area_management","binding","listen","d","parseData","bind","push","value","labels","filled","count","area_id","location","content","setLabels","timeout","updateStatus","style_map","colours","get","zone_id","hasOwnProperty","fill","opacity","setStyles","ExploreBookingModalComponent","_data","_calendars","_dialog_ref","booking","attendees","space","resource","form","markAllAsTouched","on_error","msg","loading","disableClose","valid","list","key","controls","invalid","reject","join","availability","system_ids","resources","s","period_start","Math","floor","date","period_end","duration","catch","e","length","display_name","close","ExploreMapControlComponent","_router","_route","building_list","building","active_building","active_levels","setLevel","lvl","setFeatures","navigate","relativeTo","queryParams","setBuilding","queryParamMap","params","has","ExploreDeskInfoComponent","_details","_element","map_id","user","start","end","tries","setTimeout","parent","nativeElement","parentElement","ngOnInit","position","parseInt","style","top","left","y_pos","x_pos","ExploreSpaceInfoComponent","events","status","ExploreDeviceInfoComponent","_overlay","username","mac","manufacturer","os","ssid","variance","toFixed","diameter","bg_color","distance_color","overlay_ref","onEnter","loadUser","onLeave","onClick","onTouch","Date","last_seen","addSuffix","abs","distance","open","mod","system","execute","assigned_to","_portal","create","positionStrategy","flexibleConnectedTo","_dot","withPositions","originX","originY","overlayX","overlayY","attach","dispose","ExploreMapViewComponent","_s","_desks","_zones","_spaces","url","map_url","styles","map_styles","positions","map_positions","features","map_features","actions","map_actions","map_labels","options","message","setOptions","o","locateSpace","email","locateUser","Array","levelWithID","zones","feature","data","locate_details","location_services","module","locations","i","sort","a","priority","indexOf","type","pos","coordinates_from","includes","radius","ExploreDesksService","_desks_service","_in_use","_options","_reserved","_stats","free","occupied","total","_poll","_desk_bookings","desk_list","j","enable_booking","bindToDesks","desks","in_use","reserved","bookable","is_used","some","is_reserved","processDesks","next","asset_id","ngOnDestroy","delay","interval","valueOf","clearInterval","getValue","startPolling","devices","filter","v","at_location","processDevices","desk_id","device","map_width","map_height","sqrt","pow","desk","hover","action","callback","bookDesk","host","setActions","ExploreZoomControlComponent","zoomIn","setPositions","min","zoom","center","zoomOut","max","reset","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_elementRef","_MatSlideToggleMixinBase","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_animationMode","_onChange","_onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","markForCheck","monitor","focusOrigin","_inputElement","focus","resolve","then","stopMonitoring","event","stopPropagation","emit","_emitChangeEvent","fn","isDisabled","disabled","origin","focusVia","detectChanges","ɵfac","t","ɵcmp","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","inputs","disableRipple","color","required","outputs","exportAs","ngContentSelectors","decls","vars","consts","template","$event","_onChangeEvent","_onInputClick","_onLabelTextChange","_r0","_r4","inputId","textContent","trim","toString","directives","encapsulation","changeDetection","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","DEFAULT_COLOURS","pending","busy","unknown","ExploreSpacesService","_dialog","_bookings","spaces","bindToSpaces","handleBookingsChange","handleStatusChange","updateActions","updateHoverElements","bookings","clearTimeout","bookSpace","ExploreStateService","_positions","_styles","_features","_actions","_message","asObservable","show_zones","show_devices","concat","show_contacts","Object","values","reduce","style_mappings","keys","h","display","level_list","levelsForBuilding","feature_map","actions_map","labels_map","clearEventFormState","sessionStorage","removeItem","localStorage","SpaceFlowService","_calendar","_event","_form","_filters","_loading_spaces","_loading_event","filters","loading_spaces","loading_event","freeBusy","zone_ids","clearState","setEvent","nearestTo","storeState","setValue","ref","width","height","componentInstance","reason","metadata","setItem","JSON","stringify","toJSON","event_data","getItem","parse","form_data","patchValue","filter_data","organiser","title","SharedExploreModule"],"mappings":"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","file":"default~bookings-bookings-module~explore-explore-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { getModule, showMetadata } from '@placeos/ts-client';\nimport { ViewerLabel, Point } from '@placeos/svg-viewer';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport {\n    BuildingLevel,\n    OrganisationService,\n} from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport { first } from 'rxjs/operators';\n\nconst EMPTY_LABEL = { location: { x: -10, y: -10 }, content: '0% Usage' };\n\n@Injectable()\nexport class ExploreZonesService extends BaseClass {\n    private _level: BuildingLevel = null;\n    private _bindings: any[] = [];\n    private _statuses: HashMap<string> = {};\n    private _labels: HashMap<ViewerLabel> = {};\n    private _location: HashMap<Point> = {};\n    private _capacity: HashMap<number> = {};\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first(_ => _)).toPromise();\n        const zone_metadata = await Promise.all(this._org.levels.map(bld => showMetadata(bld.id, { name: 'map_regions' }).toPromise()));\n        for (const zone of zone_metadata) {\n            const areas = (zone?.details as any)?.areas;\n            if (areas) {\n                for (const area of areas) {\n                    this._capacity[area.id] = area.properties?.capacity || 100;\n                    this._location[area.id] = area.properties?.label_location || { x: .5, y: .5 };\n                }\n            }\n        }\n        this.subscription(\n            'spaces',\n            this._state.level.subscribe((level) => {\n                this.clearBindings();\n                this._level = level;\n                this.bindToZones();\n            })\n        );\n    }\n\n    public clearBindings() {\n        if (!this._level) return;\n        this.unsub('zones');\n        this._bindings.forEach(b => b.unbind());\n        this._bindings = [];\n        this._statuses = {};\n    }\n\n    public bindToZones() {\n        if (!this._level) return;\n        const building = this._org.buildings.find(\n            (bld) => bld.id === this._level.parent_id\n        );\n        if (!building) return;\n        const system_id = this._org.organisation.bindings.area_management;\n        if (!system_id) return;\n        const binding = getModule(system_id, 'AreaManagement').binding(`${this._level.id}:areas`);\n        this.subscription(\n            `zones`,\n            binding.listen().subscribe((d) => this.parseData(d))\n        );\n        binding.bind();\n        this._bindings.push(binding);\n    }\n\n    public parseData(d) {\n        const value = d?.value || [];\n        const labels = [];\n        for (const zone of value) {\n            const filled = zone.count / (this._capacity[zone.area_id] || 100);\n            this._statuses[zone.area_id] =\n                filled < .4 ? 'free' : filled < .75 ? 'pending' : 'busy';\n            this._labels[zone.area_id] = {\n                location: this._location[zone.area_id],\n                content: `${zone.count} ${zone.count === 1 ? 'Device' : 'Devices'}`\n            };\n            labels.push(this._labels[zone.area_id]);\n        }\n        this._state.setLabels('zones', labels);\n        this.timeout('update', () => this.updateStatus(), 100);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours =\n            this._settings.get('app.explore.colors') || {};\n        for (const zone_id in this._statuses) {\n            if (!this._statuses.hasOwnProperty(zone_id)) continue;\n            style_map[`#${zone_id}`] = {\n                fill:\n                    colours[`zone-${this._statuses[zone_id]}`] ||\n                    colours[`${this._statuses[zone_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[zone_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('zones', style_map);\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport {\n    CalendarEvent,\n    generateEventForm,\n    saveEvent,\n} from '@placeos/events';\nimport { Space } from '@placeos/spaces';\nimport { CalendarService } from '@placeos/calendar';\n\nexport interface ExploreBookingModalData {\n    space: Space;\n}\n\n@Component({\n    selector: 'explore-booking-modal',\n    template: `\n        <header>\n            <h2>New Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button *ngIf=\"!loading\" mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main [formGroup]=\"form\" class=\"p-4\">\n                <div class=\"flex flex-col\">\n                    <label>Title<span>*</span>:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"title\"\n                            placeholder=\"Booking Title\"\n                        />\n                        <mat-error>Booking title is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>Space:</label>\n                    <div class=\"sm:mt-4 mb-4\">\n                        {{\n                            form.controls.resources?.value[0].display_name ||\n                                form.controls.resources?.value[0].name\n                        }}\n                    </div>\n                </div>\n                <div class=\"flex sm:space-x-4 flex-wrap\">\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.date\">\n                        <label>Date:</label>\n                        <div class=\"sm:mt-4 mb-4\">\n                            {{ form.controls.date?.value | date: 'medium' }}\n                        </div>\n                    </div>\n                    <div class=\"flex flex-col\" *ngIf=\"form.controls.duration\">\n                        <label>Duration:</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                        ></a-duration-field>\n                    </div>\n                </div>\n            </main>\n            <footer class=\"flex justify-center p-2 border-t border-gray-200\">\n                <button mat-button (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"w-full h-64 flex flex-col items-center justify-center\">\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            header {\n                max-width: calc(100vw + 100%);\n            }\n        `,\n    ],\n})\nexport class ExploreBookingModalComponent {\n    public booking: CalendarEvent;\n    public form: FormGroup;\n    public loading: string;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ExploreBookingModalData,\n        private _calendars: CalendarService,\n        private _dialog_ref: MatDialogRef<ExploreBookingModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.booking = new CalendarEvent({\n            attendees: [{ ...this._data.space, resource: true } as any],\n        });\n        this.form = generateEventForm(this.booking);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        const on_error = (msg) => {\n            this.loading = '';\n            notifyError(msg);\n            this._dialog_ref.disableClose = false;\n        };\n        if (!this.form.valid) {\n            const list = [];\n            for (const key in this.form.controls) {\n                if (this.form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return Promise.reject(\n                on_error(`Some form fields are not valid: [${list.join(', ')}]`)\n            );\n        }\n        this._dialog_ref.disableClose = true;\n        this.loading = 'Checking space availability...';\n        const spaces = await this._calendars\n            .availability({\n                system_ids: this.form.controls.resources.value\n                    ?.map((s) => s.id)\n                    .join(','),\n                period_start: Math.floor(this.form.value.date / 1000),\n                period_end:\n                    Math.floor(this.form.value.date / 1000) +\n                    this.form.value.duration * 60,\n            })\n            .toPromise()\n            .catch((e) => {\n                on_error(\n                    'Space is unavailble for the selected time and duration'\n                );\n                throw e;\n            });\n        if (spaces.length <= 0) {\n            return on_error(\n                'Space is unavailble for the selected time and duration'\n            );\n        }\n        this.loading = 'Creating booking...';\n        await saveEvent(new CalendarEvent(this.form.value))\n            .toPromise()\n            .catch((e) => {\n                on_error('Error creating booking.');\n                throw e;\n            });\n        notifySuccess(\n            `Successfully created booking in ${\n                this._data.space.display_name || this._data.space.name\n            }`\n        );\n        this._dialog_ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: 'explore-map-controls',\n    template: `\n        <div class=\"flex space-x-2\">\n            <mat-form-field\n                overlay\n                class=\"flex-1\"\n                has-bld=\"true\"\n                *ngIf=\"(buildings | async)?.length > 1\"\n                appearance=\"outline\"\n            >\n                <mat-select\n                    placeholder=\"Select Building...\"\n                    [ngModel]=\"building | async\"\n                    (ngModelChange)=\"setBuilding($event)\"\n                >\n                    <mat-option\n                        *ngFor=\"let bld of buildings | async\"\n                        [value]=\"bld\"\n                    >\n                        {{ bld.display_name || bld.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field\n                overlay\n                class=\"flex-1\"\n                [attr.has-bld]=\"(buildings | async)?.length > 1\"\n                *ngIf=\"(levels | async)?.length\"\n                appearance=\"outline\"\n            >\n                <mat-select\n                    placeholder=\"Select Level...\"\n                    [ngModel]=\"level | async\"\n                    (ngModelChange)=\"setLevel($event)\"\n                >\n                    <mat-option\n                        *ngFor=\"let lvl of levels | async\"\n                        [value]=\"lvl\"\n                    >\n                        {{ lvl.display_name || lvl.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 0.5rem;\n            }\n\n            mat-form-field {\n                min-width: 10rem;\n            }\n\n            mat-form-field[has-bld=\"true\"] {\n                max-width: calc(50vw - 2.5rem);\n            }\n\n            :host[full] mat-form-field {\n                max-width: calc(50% - 2.5rem);\n            }\n        `,\n    ],\n})\nexport class ExploreMapControlComponent extends BaseClass {\n    /** List of available buildings */\n    public readonly buildings = this._org.building_list;\n    /** Currently active building */\n    public readonly building = this._org.active_building;\n    /** List of availabel levels */\n    public readonly levels = this._org.active_levels;\n    /** Currently active level */\n    public readonly level = this._state.level;\n    /** Set the currently active level */\n    public readonly setLevel = (lvl) => {\n        this._state.setFeatures('_located', []);\n        this.timeout(\n            'set_level',\n            () => {\n                this._router.navigate([], {\n                    relativeTo: this._route,\n                    queryParams: { zone: lvl.id },\n                });\n            },\n            201\n        );\n    };\n    /** Set the currenly active building */\n    public readonly setBuilding = (bld) => (this._org.building = bld);\n\n    constructor(\n        private _org: OrganisationService,\n        private _state: ExploreStateService,\n        private _router: Router,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) =>\n                params.has('zone')\n                    ? this._state.setLevel(params.get('zone'))\n                    : ''\n            )\n        );\n    }\n}\n","import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@placeos/components';\n\nexport interface SpaceInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: SpaceInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Component, ElementRef, Inject } from '@angular/core';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { CalendarEvent } from '@placeos/events';\nimport { Space } from '@placeos/spaces';\nimport { getViewer, coordinatesForElement } from '@placeos/svg-viewer';\n\nexport interface SpaceInfoData {\n    space: Space;\n    events: CalendarEvent[];\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-space-info',\n    template: `\n        <div\n            *ngIf=\"space\"\n            name=\"space-info\"\n            [id]=\"space.id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 class=\"m-0 mb-2\">{{ space.display_name || space.name }}</h4>\n                <div class=\"text-sm\" *ngIf=\"space.capacity >= 0\">\n                    <span>Capacity: </span>{{ space.capacity }}\n                    {{ space.capacity === 1 ? 'person' : 'people' }}\n                </div>\n                <div class=\"flex flex-wrap my-2 text-sm\">\n                    <div\n                        name=\"status\"\n                        [class]=\"\n                            'capitalize rounded p-1 px-2 text-light ' + status\n                        \"\n                    >\n                        {{ status }}\n                    </div>\n                    <div\n                        name=\"available-until\"\n                        *ngIf=\"status !== 'not-bookable'\"\n                    >\n                        {{ available_until }}\n                    </div>\n                </div>\n                <div class=\"features\" *ngIf=\"space.features?.length > 0\">\n                    <h4 class=\"m-0 mb-2\">Room Features</h4>\n                    <ul class=\"pl-2\">\n                        <li\n                            class=\"text-sm\"\n                            *ngFor=\"let feature of space.features\"\n                        >\n                            {{ feature }}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreSpaceInfoComponent {\n    /** Space to display details for */\n    public readonly space = this._details.space;\n    /** List of upcoming events for space */\n    public readonly events = this._details.events;\n    /** Current status of the space */\n    public readonly status = this._details.status;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: SpaceInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { CdkPortal } from '@angular/cdk/portal';\nimport {\n    Component,\n    ElementRef,\n    HostListener,\n    Inject,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\nexport interface DeviceInfoData {\n    mac: string;\n    variance: number;\n    last_seen: number;\n    system: string;\n    manufacturer?: string;\n    os?: string;\n    ssid?: string;\n    user?: any;\n    bg_color?: string;\n}\n\n@Component({\n    selector: '[explore-device-info]',\n    template: `\n        <div\n            name=\"radius\"\n            (mouseenter)=\"loadUser()\"\n            class=\"radius absolute center bg-blue-600 bg-opacity-25 border-4 border-dashed border-blue-600 rounded-full\"\n            [style]=\"'height: ' + diameter + '%; width: ' + diameter + '%;'\"\n        ></div>\n        <div\n            name=\"dot\"\n            #dot\n            class=\"h-2 w-2 absolute center rounded-full pointer-events-auto\"\n            [style.background-color]=\"bg_color\"\n        ></div>\n\n        <ng-template cdk-portal>\n            <div\n                name=\"device-info\"\n                class=\"rounded bg-white p-4 top-0 left-0 shadow pointer-events-none\"\n                (mouseleave)=\"close()\"\n            >\n                <div class=\"arrow\"></div>\n                <div class=\"details\">\n                    <p><label>MAC:</label> {{ mac }}</p>\n                    <p><label>Accuracy:</label> {{ variance }}m</p>\n                    <p><label>Last Seen:</label> {{ last_seen }}</p>\n                    <p *ngIf=\"manufacturer\">\n                        <label>Manufacturer:</label> {{ manufacturer }}\n                    </p>\n                    <p *ngIf=\"os\"><label>OS:</label> {{ os }}</p>\n                    <p *ngIf=\"ssid\"><label>SSID:</label> {{ ssid }}</p>\n                    <p *ngIf=\"username\">\n                        <label>Username:</label>\n                        {{ user?.name || user?.username || username }}\n                    </p>\n                    <p *ngIf=\"user\"><label>Type:</label> {{ user.type }}</p>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                pointer-events: auto;\n            }\n\n            :host > [name='dot'] {\n                box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.35);\n                background-color: #616161;\n            }\n\n            :host:hover > [name='radius'] {\n                opacity: 1;\n            }\n\n            [name='radius'] {\n                opacity: 0;\n                transition: opacity 200ms;\n                pointer-events: none;\n            }\n\n            [name='device-info'] {\n                width: 16rem;\n                pointer-events: none;\n            }\n        `,\n    ],\n})\nexport class ExploreDeviceInfoComponent implements OnInit {\n    /** Name of the user associated with the mac address */\n    public username = '';\n    /** User details associated with device */\n    public readonly user = this._details.user;\n    /** Mac Address of the device */\n    public readonly mac = this._details.mac;\n    /** Mac Address of the device */\n    public readonly manufacturer = this._details.manufacturer;\n    /** Mac Address of the device */\n    public readonly os = this._details.os;\n    /** Mac Address of the device */\n    public readonly ssid = this._details.ssid;\n    /** Accuracy of the location data */\n    public readonly variance = this._details.variance.toFixed(2);\n    /** Diameter of the radius circle */\n    public readonly diameter = this._details.variance * 100;\n    /** Background color for the dot */\n    public readonly bg_color = this._details.bg_color || this.distance_color;\n\n    public overlay_ref: OverlayRef = null;\n    /** Time of the last update */\n    public get last_seen() {\n        return formatDistanceToNow(new Date(this._details.last_seen * 1000), {\n            addSuffix: true,\n        });\n    }\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'end' | 'start';\n    public get distance() {\n        return Math.abs(\n            differenceInMinutes(this._details.last_seen * 1000, new Date())\n        );\n    }\n\n    public get distance_color() {\n        return this.distance < 10\n            ? '#43a047'\n            : this.distance < 20\n            ? '#ffb300'\n            : '#e53935';\n    }\n\n    @HostListener('mouseenter') public onEnter = () => this.loadUser();\n    @HostListener('mouseleave') public onLeave = () => this.close();\n    @HostListener('click') public onClick = () => this.loadUser();\n    @HostListener('touchend') public onTouch = () => this.loadUser();\n\n    @ViewChild(CdkPortal) private _portal: CdkPortal;\n    @ViewChild('dot') private _dot: ElementRef<HTMLDivElement>;\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: DeviceInfoData,\n        private _element: ElementRef<HTMLElement>,\n        private _overlay: Overlay\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'end' : 'start';\n        }, 200);\n    }\n\n    public async loadUser() {\n        this.open();\n        if (this.username) return;\n        const mod = getModule(this._details.system, 'LocationServices');\n        if (mod) {\n            this.username = 'Loading...';\n            const details = await mod\n                .execute('check_ownership_of', [this.mac])\n                .catch((_) => null);\n            this.username =\n                details && details.assigned_to ? details.assigned_to : '';\n        }\n    }\n\n    public open() {\n        if (this.overlay_ref) this.close();\n        if (!this._portal) return;\n        this.overlay_ref = this._overlay.create({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._dot)\n                .withPositions([\n                    {\n                        originX: this.x_pos === 'start' ? 'end' : 'start',\n                        originY: this.y_pos === 'top' ? 'bottom' : 'top',\n                        overlayX: this.x_pos || 'end',\n                        overlayY: this.y_pos || 'bottom',\n                    },\n                ]),\n        });\n        this.overlay_ref.attach(this._portal);\n    }\n\n    public close() {\n        if (this.overlay_ref) {\n            this.overlay_ref.dispose();\n            this.overlay_ref = null;\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { getModule } from '@placeos/ts-client';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    notifyError,\n    SettingsService,\n} from '@placeos/common';\nimport { Space, SpacesService } from '@placeos/spaces';\nimport { MapLocation, showStaff, User } from '@placeos/users';\nimport {\n    MapPinComponent,\n    MapRadiusComponent,\n} from '@placeos/components';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpacesService } from './explore-spaces.service';\nimport { ExploreZonesService } from './explore-zones.service';\nimport { ExploreDesksService } from './explore-desks.service';\n\n@Component({\n    selector: 'explore-map-view',\n    template: `\n        <i-map\n            [src]=\"url | async\"\n            [zoom]=\"(positions | async).zoom\"\n            [center]=\"(positions | async).center\"\n            [styles]=\"styles | async\"\n            [features]=\"features | async\"\n            [actions]=\"actions | async\"\n            [labels]=\"labels | async\"\n        ></i-map>\n        <explore-zoom-controls\n            class=\"absolute bottom-0 right-0\"\n        ></explore-zoom-controls>\n        <explore-map-controls\n            class=\"absolute top-0 left-0\"\n        ></explore-map-controls>\n        <!-- <explore-search class=\"absolute top-0 right-0\"></explore-search> -->\n        <div\n            name=\"zones\"\n            class=\"p-2 bg-white border border-gray-400 absolute left-0 m-2 rounded flex items-center\"\n        >\n            Zones\n            <mat-slide-toggle\n                class=\"ml-2\"\n                [ngModel]=\"(options | async)?.show_zones\"\n                (ngModelChange)=\"setOptions({ show_zones: $event })\"\n            ></mat-slide-toggle>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n\n            [name='zones'] {\n                top: 3.5rem;\n            }\n        `,\n    ],\n    providers: [ExploreSpacesService, ExploreDesksService, ExploreZonesService],\n})\nexport class ExploreMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._state.map_labels;\n    /** Observable for the active map */\n    public readonly options = this._state.options;\n    /** Observable for user messages */\n    public readonly message = this._state.message;\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    constructor(\n        private _state: ExploreStateService,\n        private _s: ExploreSpacesService,\n        private _desks: ExploreDesksService,\n        private _zones: ExploreZonesService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _spaces: SpacesService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._spaces.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe(async (params) => {\n                if (params.has('level')) {\n                    this._state.setLevel(params.get('level'));\n                }\n                this._state.setFeatures('_located', []);\n                if (params.has('space')) {\n                    const space = this._spaces.find(params.get('space'));\n                    if (!space) return;\n                    this.locateSpace(space);\n                } else if (params.has('user')) {\n                    let user = this._settings.value('last_search');\n                    if (!user || params.get('user') !== user.email) {\n                        user = null;\n                        user = await showStaff(params.get('user')).toPromise();\n                    }\n                    if (!user)\n                        return notifyError(`Unable to user details for ${params.get('user')}`);\n                    this.locateUser(user instanceof Array ? user[0] : user).catch((_) => {\n                        notifyError(`Unable to locate ${params.get('user')}`);\n                        this._router.navigate([], { relativeTo: this._route, queryParams: {} });\n                    });\n                } else {\n                    this.timeout('update_location', () => {\n                        this._state.setFeatures('_located', []);\n                    });\n                }\n            })\n        );\n    }\n\n    private locateSpace(space: Space) {\n        this._state.setLevel(this._org.levelWithID(space.zones).id);\n        const feature: any = {\n            location: space.map_id,\n            content: MapPinComponent,\n            data: {\n                message: `${space.display_name || space.name} is here`,\n            },\n        };\n        this.timeout('update_location', () => {\n            this._state.setFeatures('_located', [feature]);\n        });\n    }\n\n    private async locateUser(user: User) {\n        let locate_details: any = this._org.organisation.bindings.location_services;\n        if (!locate_details) return;\n        if (typeof locate_details === 'string') {\n            locate_details = {\n                system_id: locate_details,\n                module: 'LocationServices',\n            };\n        }\n        const mod = getModule(locate_details.system_id, locate_details.module);\n        const locations: MapLocation[] = (\n            await mod.execute('locate_user', [user.email, user.id])\n        ).map((i) => new MapLocation(i));\n        locations.sort(\n            (a, b) =>\n                locate_details.priority.indexOf(a.type) - locate_details.priority.indexOf(b.type)\n        );\n        if (!locations?.length) {\n            throw 'No locations for the given user';\n        }\n        this._state.setLevel(this._org.levelWithID([locations[0]?.level]).id);\n        const pos = locations[0].position;\n        const { coordinates_from } = locations[0];\n        const feature: any = {\n            location: location[0].type === 'wireless' ? {\n                x: coordinates_from?.includes('right') ? 1 - pos.x : pos.x,\n                y: coordinates_from?.includes('bottom') ? 1 - pos.y : pos.y,\n            } : pos,\n            content: locations[0].type === 'wireless' ? MapRadiusComponent : MapPinComponent,\n            data: {\n                message: `${user.name} is here`,\n                radius: locations[0].variance,\n                last_seen: locations[0].last_seen,\n            },\n        };\n        this.timeout('update_location', () => {\n            this._state.setFeatures('_located', [feature]);\n        });\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule, PlaceVariableBinding, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\n\nimport { DesksService, queryBookings } from '@placeos/bookings';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { DEFAULT_COLOURS } from './explore-spaces.service';\nimport {\n    BuildingLevel,\n    Desk,\n    OrganisationService,\n} from '@placeos/organisation';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\nimport { catchError, first, map, switchMap } from 'rxjs/operators';\nimport { StaffUser } from '@placeos/users';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nexport interface DeskOptions {\n    enable_booking?: boolean;\n    date?: number | Date;\n    zones?: string[];\n    host?: StaffUser;\n}\nexport interface DesksStats {\n    free: number;\n    occupied: number;\n    total: number;\n}\n\n@Injectable()\nexport class ExploreDesksService extends BaseClass implements OnDestroy {\n    private _level: BuildingLevel = null;\n    private _in_use = new BehaviorSubject<string[]>([]);\n    private _options = new BehaviorSubject<DeskOptions>({});\n    private _desks = new BehaviorSubject<string[]>([]);\n    private _reserved = new BehaviorSubject<string[]>([]);\n    private _statuses: HashMap<string> = {};\n    private _bindings: PlaceVariableBinding[] = [];\n    private _stats = new BehaviorSubject<DesksStats>({\n        free: 0,\n        occupied: 0,\n        total: 0,\n    });\n    private _poll = new BehaviorSubject<number>(0);\n\n    private _desk_bookings = combineLatest([\n        this._state.level,\n        this._poll,\n    ]).pipe(\n        switchMap(([lvl]) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(new Date())),\n                period_end: getUnixTime(endOfDay(new Date())),\n                type: 'desk',\n                zones: lvl.id,\n            })\n        )\n    );\n\n    public readonly desk_list = this._state.level.pipe(\n        switchMap((lvl) =>\n            showMetadata(lvl.id, { name: 'desks' }).pipe(\n                map((i) => i.details.map((j: HashMap) => new Desk({ ...j, zone: lvl })))\n            )\n        ),\n        catchError(() => [])\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _desks_service: DesksService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.setOptions({\n            enable_booking: this._settings.get('app.desks.enabled') !== false,\n        });\n        this.subscription(\n            'spaces',\n            this._state.level.subscribe((level) => {\n                this.clearBindings();\n                this._level = level;\n                this.bindToDesks();\n            })\n        );\n        this.subscription(\n            'changes',\n            combineLatest([\n                this.desk_list,\n                this._in_use,\n                this._reserved,\n                this._options,\n            ]).subscribe(([desks, in_use, reserved]) => {\n                this._statuses = {};\n                for (const { id, bookable } of desks) {\n                    const is_used = in_use.some((i) => id === i);\n                    const is_reserved = reserved.some((i) => id === i);\n                    this._statuses[id] = bookable\n                        ? !is_used\n                            ? 'free'\n                            : is_reserved\n                            ? 'reserved'\n                            : 'busy'\n                        : 'not-bookable';\n                }\n                this.processDesks(desks);\n                this.timeout('update', () => this.updateStatus(), 100);\n            })\n        );\n        this.subscription(\n            'desks',\n            this.desk_list.subscribe((desks) => this.processDesks(desks))\n        );\n        this.subscription(\n            'desks_in_use_bookings',\n            this._desk_bookings.subscribe((_) =>\n                this._in_use.next(_.map((i) => i.asset_id))\n            )\n        );\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.clearBindings();\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval('poll', () => this._poll.next(new Date().valueOf()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(options: DeskOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public clearBindings() {\n        const bindings = ['desks_in_use', 'desk_list'];\n        for (const id of bindings) {\n            this.unsub(id);\n        }\n        this._bindings.forEach((b) => b.unbind());\n        this._bindings = [];\n        this._statuses = {};\n    }\n\n    public bindToDesks() {\n        if (!this._level) return;\n        const building = this._org.buildings.find(\n            (bld) => bld.id === this._level.parent_id\n        );\n        if (!building) return;\n        const system_id =\n            this._org.building.bindings.area_management ||\n            this._org.organisation.bindings.area_management;\n        if (!system_id) {\n            this.startPolling();\n            return;\n        }\n        let binding = getModule(system_id, 'AreaManagement').binding(\n            this._level.id\n        );\n        this.subscription(\n            `desks_in_use`,\n            binding.listen().subscribe((d) => {\n                const devices = (d?.value || []).filter(\n                    (v) => v.location !== 'desk'\n                );\n                const desks = (d?.value || []).filter(\n                    (v) => v.location === 'desk' || (v.location === 'booking' && v.type === 'desk')\n                );\n                this._in_use.next(desks.map((v) => v.map_id));\n                this._reserved.next(\n                    desks.filter((v) => !v.at_location).map((v) => v.map_id)\n                );\n                this.processDevices(devices, system_id);\n            })\n        );\n        binding.bind();\n        this._bindings.push(binding);\n        binding = getModule(system_id, 'AreaManagement').binding(\n            `${this._level.id}:desk_ids`\n        );\n        this.subscription(\n            `desks_list`,\n            binding.listen().subscribe((d) => this._desks.next(d || []))\n        );\n        binding.bind();\n        this._bindings.push(binding);\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk_id in this._statuses) {\n            if (!this._statuses[desk_id]) continue;\n            style_map[`#${desk_id}`] = {\n                fill:\n                    colours[`desk-${this._statuses[desk_id]}`] ||\n                    colours[`${this._statuses[desk_id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[desk_id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('desks', style_map);\n    }\n\n    private processDevices(devices: HashMap[], system_id: string) {\n        const list = [];\n        for (const device of devices) {\n            const x = device.x / device.map_width;\n            const y = device.y / device.map_height;\n            list.push({\n                location: {\n                    x: device.coordinates_from?.includes('right') ? 1 - x : x,\n                    y: device.coordinates_from?.includes('bottom') ? 1 - y : y,\n                },\n                content: ExploreDeviceInfoComponent,\n                data: { ...device, system: system_id },\n            });\n        }\n        list.sort((a, b) => {\n            const dist_a =\n                1 - Math.sqrt(Math.pow(a.x - 0.5, 2) + Math.pow(a.x - 0.5, 2));\n            const dist_b =\n                1 - Math.sqrt(Math.pow(b.x - 0.5, 2) + Math.pow(b.x - 0.5, 2));\n            return dist_a - dist_b;\n        });\n        this._state.setFeatures('devices', list);\n    }\n\n    private processDesks(desks: HashMap[]) {\n        const list = [];\n        const actions = [];\n        const options = this._options.getValue();\n        for (const desk of desks) {\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    status: this._statuses[desk.map_id],\n                },\n            });\n            actions.push({\n                id: desk.id,\n                action: 'click',\n                callback: () =>\n                    this._desks_service.bookDesk({\n                        desks: [desk as Desk],\n                        host: options.host,\n                        date: options.date as Date,\n                    }),\n            });\n            actions.push({\n                id: desk.id,\n                action: 'touchend',\n                callback: () =>\n                    this._desks_service.bookDesk({\n                        desks: [desk as Desk],\n                        host: options.host,\n                        date: options.date as Date,\n                    }),\n            });\n        }\n        this._state.setActions(\n            'desks',\n            this._options.getValue().enable_booking ? actions : []\n        );\n        this._state.setFeatures('desks', list);\n    }\n}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon>add</app-icon>\n        </button>\n        <button mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon>remove</app-icon>\n        </button>\n        <button mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon>autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: .5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () => this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n        ɵngcc0.ɵɵviewQuery(_c1, 1);\n        ɵngcc0.ɵɵviewQuery(_c2, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵfac = function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); };\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵfac = function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); };\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@placeos/svg-viewer';\n\nimport { BaseClass, HashMap, notifyError, SettingsService } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent } from '@placeos/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#e65100',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _spaces: Space[] = [];\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _bindings: any[] = [];\n    private _statuses: HashMap<string> = {};\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'spaces',\n            this._state.spaces.subscribe((list) => {\n                this.clearBindings();\n                this._spaces = list;\n                this.bindToSpaces();\n            })\n        );\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.clearBindings();\n    }\n\n    public clearBindings() {\n        if (!this._spaces) return;\n        for (const space of this._spaces) {\n            this.unsub(`bookings-${space.id}`);\n            this.unsub(`status-${space.id}`);\n        }\n        this._bindings.forEach((b) => b.unbind());\n        this._bindings = [];\n        this._statuses = {};\n    }\n\n    public bindToSpaces() {\n        if (!this._spaces) return;\n        for (const space of this._spaces) {\n            let binding = getModule(space.id, 'Bookings').binding('bookings');\n            this.subscription(\n                `bookings-${space.id}`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.handleBookingsChange(space, d))\n            );\n            binding.bind();\n            this._bindings.push(binding);\n            binding = getModule(space.id, 'Bookings').binding('status');\n            this.subscription(\n                `status-${space.id}`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.handleStatusChange(space, d))\n            );\n            binding.bind();\n            this._bindings.push(binding);\n        }\n        this.updateActions();\n        this.updateHoverElements();\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy') {\n            return notifyError(`${space.display_name || space.name} is unavailable at the current time`);\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space }\n        });\n    }\n\n    private handleBookingsChange(space: Space, bookings: HashMap[]) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout('update_hover_els', () => this.updateHoverElements(), 100);\n    }\n\n    private handleStatusChange(space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus();\n                this.updateHoverElements();\n            },\n            100\n        );\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours =\n            this._settings.get('app.explore.colors') || {};\n        for (const space of this._spaces) {\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${this._statuses[space.id]}`] ||\n                    colours[`${this._statuses[space.id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[space.id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements() {\n        const features: ViewerFeature[] = [];\n        for (const space of this._spaces) {\n            features.push({\n                location: space.map_id,\n                hover: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions() {\n        const actions: ViewAction[] = [];\n        for (const space of this._spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    Point,\n    ViewAction,\n    ViewerFeature,\n    ViewerLabel,\n    ViewerStyles,\n} from '@placeos/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@placeos/common';\nimport {\n    BuildingLevel,\n    OrganisationService,\n} from '@placeos/organisation';\nimport { SpacesService } from '@placeos/spaces';\n\nexport interface MapOptions {\n    show_zones?: boolean;\n    show_devices?: boolean;\n    show_contacts?: boolean;\n    show_levels?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({});\n\n    private _message = new BehaviorSubject<string>('');\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Currently active level */\n    public readonly message = this._message.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([\n        this._level,\n        this._spaces.list,\n    ]).pipe(\n        map(([level, spaces]) =>\n            spaces.filter((space) => space.zones.includes(level.id))\n        )\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(\n        map((lvl) => (lvl ? lvl.map_id : '') || '')\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map((details) => {\n            const [features, options] = details;\n            let list = [];\n            for (const key in features) {\n                switch (key) {\n                    case 'devices':\n                        options.show_zones && options.show_devices\n                            ? (list = list.concat(features[key]))\n                            : '';\n                        break;\n                    case 'contacts':\n                        options.show_contacts\n                            ? (list = list.concat(features[key]))\n                            : '';\n                        break;\n                    default:\n                        list = list.concat(features[key]);\n                }\n            }\n            return list;\n        })\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = this._actions.pipe(\n        debounceTime(200),\n        map((i) => Object.values(i).reduce((list, a) => list.concat(a), []))\n    );\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([\n        this._labels,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map((details) => {\n            const [labels, options] = details;\n            let list = [];\n            for (const key in labels) {\n                if (key !== 'zones' || options.show_zones) {\n                    list = list.concat(labels[key]);\n                }\n            }\n            return list;\n        })\n    );\n    /** Current map styles */\n    public readonly map_styles = combineLatest([\n        this._styles,\n        this._options,\n    ]).pipe(\n        debounceTime(200),\n        map((details) => {\n            const [styles, options] = details;\n            const style_mappings = Object.keys(styles).reduce(\n                (a, h) => ({ ...a, ...styles[h] }),\n                {}\n            );\n            if (!options.show_zones) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            style_mappings['text'] = { display: 'none' };\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    public get active_level() {\n        return this._level.getValue();\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _settings: SettingsService\n    ) {\n        super();\n        this._org.initialised.pipe(first((_) => _)).subscribe(() => {\n            this.subscription(\n                'building',\n                this._org.active_building\n                    .pipe(filter((_) => !!_))\n                    .subscribe((bld) => {\n                        const level = this._level.getValue();\n                        const level_list = this._org.levelsForBuilding(bld);\n                        const has_level = level_list.find(\n                            (lvl) => level?.id === lvl.id\n                        );\n                        if (!has_level && level_list.length) {\n                            this.setLevel(level_list[0].id);\n                        }\n                        this.setOptions({\n                            show_devices:\n                                this._settings.get(\n                                    'app.explore.display_devices'\n                                ) !== false,\n                        });\n                    })\n            );\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, switchMap } from 'rxjs/operators';\nimport { addMinutes, roundToNearestMinutes, isAfter, endOfDay } from 'date-fns';\n\nimport { BaseClass, currentUser, notifyError, unique } from '@placeos/common';\nimport {\n    CalendarEvent,\n    generateEventForm,\n    saveEvent,\n} from '@placeos/events';\nimport { CalendarService } from '@placeos/calendar';\nimport { OrganisationService } from '@placeos/organisation';\nimport { NewUserModalComponent } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface EventFormFilters {\n    capacity?: number;\n    zones?: string[];\n}\n\nexport function clearEventFormState(): void {\n    sessionStorage.removeItem('PLACEOS.event');\n    sessionStorage.removeItem('PLACEOS.event_form');\n    localStorage.removeItem('PLACEOS.event_filters');\n}\n\n@Injectable()\nexport class SpaceFlowService extends BaseClass {\n    /** Active event being worked on */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Form fields for the current flow */\n    private _form = new BehaviorSubject<FormGroup>(null);\n    /** Form fields for the current flow */\n    private _filters = new BehaviorSubject<EventFormFilters>({});\n    /** Whether space listing is being retrieved */\n    private _loading_spaces = new BehaviorSubject<boolean>(false);\n    /** Whether changes to event are being saved */\n    private _loading_event = new BehaviorSubject<boolean>(false);\n\n    public readonly event = this._event.asObservable();\n    public readonly form = this._form.asObservable();\n    public get event_form() {\n        return this._form.getValue();\n    }\n    public readonly filters = this._filters.asObservable();\n    public readonly loading_spaces = this._loading_spaces.asObservable();\n    public readonly loading_event = this._loading_event.asObservable();\n    public get event_filters() {\n        return this._filters.getValue();\n    }\n    public readonly spaces = this._filters.pipe(\n        switchMap((filters) => {\n            this._loading_spaces.next(true);\n            const form = this._form.getValue().value;\n            if (!form.date) form.date = new Date().valueOf();\n            const period_start = Math.floor(\n                new Date(form.date).valueOf() / 1000\n            );\n            const period_end = Math.floor(\n                addMinutes(new Date(form.date), form.duration || 60).valueOf() /\n                    1000\n            );\n            const zones = filters?.zones?.length\n                ? filters.zones\n                : [this._org.building?.id];\n            return this._calendar\n                .freeBusy({\n                    zone_ids: zones.join(','),\n                    period_start,\n                    period_end,\n                }).toPromise()\n                .then((list) => {\n                    this._loading_spaces.next(false);\n                    return list.filter(\n                        (space) =>\n                            !filters.capacity ||\n                            filters.capacity >= space.capacity\n                    );\n                });\n        }),\n        shareReplay()\n    );\n\n    public get is_future_date() {\n        const date = this._form.getValue()?.controls?.date.value || new Date().valueOf();\n        return isAfter(new Date(date), endOfDay(new Date()));\n    }\n\n    public readonly clearState = () => clearEventFormState();\n\n    constructor(\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.setEvent(\n            new CalendarEvent({\n                date: roundToNearestMinutes(addMinutes(new Date(), 2), {\n                    nearestTo: 5,\n                }).valueOf(),\n            })\n        );\n    }\n\n    /** Set the event being worked on */\n    public setEvent(event: CalendarEvent): void {\n        this._event.next(event);\n        const form = generateEventForm(event);\n        this._form.next(form);\n        this.subscription('form_change', () => this.storeState());\n    }\n\n    /** Set the value of the form control */\n    public setValue<T = any>(name: string, value: T): void {\n        const form = this._form.getValue();\n        if (form && form.controls[name]) {\n            form.controls[name].setValue(value);\n        }\n    }\n\n    public newAttendee() {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {},\n            }\n        );\n        const form = this._form.getValue();\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                const attendees = form.controls.attendees.value || [];\n                attendees.push(event.metadata);\n                form.controls.attendees.setValue(unique(attendees, 'email'));\n                ref.close();\n            });\n    }\n\n    /** Reset the form fields for the active event */\n    public clearForm(): void {\n        this.setEvent(this._event.getValue());\n        this._filters.next({});\n    }\n\n    /** Update the current form filters */\n    public updateFilters(filters: EventFormFilters) {\n        this._filters.next(filters);\n    }\n\n    /** Store current event details and form values */\n    public storeState(): void {\n        const form = this._form.getValue();\n        sessionStorage.setItem(\n            'PLACEOS.event',\n            JSON.stringify(this._event.getValue().toJSON())\n        );\n        sessionStorage.setItem('PLACEOS.event_form', JSON.stringify(form.value));\n        localStorage.setItem(\n            'PLACEOS.event_filters',\n            JSON.stringify(this._filters.getValue())\n        );\n    }\n\n    /** Load old event details and form values */\n    public loadState(): void {\n        const event_data = sessionStorage.getItem('PLACEOS.event') || '{}';\n        if (event_data) {\n            this._event.next(new CalendarEvent(JSON.parse(event_data)));\n        }\n        const form_data = sessionStorage.getItem('PLACEOS.event_form');\n        if (form_data) {\n            const form = generateEventForm(this._event.getValue());\n            form.patchValue(JSON.parse(form_data));\n            this._form.next(form);\n        }\n        const filter_data = localStorage.getItem('PLACEOS.event_filters');\n        if (filter_data) {\n            this._filters.next(JSON.parse(filter_data));\n        }\n    }\n\n    /** Save changes to event to the server */\n    public save(): Promise<void> {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.controls.organiser.value || !form.controls.host.value)\n            form.patchValue({\n                organiser: currentUser(),\n                host: currentUser().email,\n            });\n        if (!form.controls.title.value) {\n            form.patchValue({\n                title: currentUser().email\n            });\n        }\n        if (!form.valid) {\n            const list = [];\n            for (const key in form.controls) {\n                if (form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return Promise.reject(\n                notifyError(\n                    `Some form fields are not valid: [${list.join(', ')}]`\n                )\n            );\n        }\n        this._loading_event.next(true);\n        const values = new CalendarEvent({\n            ...this._event.getValue(),\n            ...this._form.getValue().value,\n        });\n        return saveEvent(values).toPromise().then(\n            () => this._loading_event.next(false),\n            () => this._loading_event.next(false)\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@placeos/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n        OverlayModule,\n        PortalModule,\n        FormFieldsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n"],"sourceRoot":"webpack:///"}