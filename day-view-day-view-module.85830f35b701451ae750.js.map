{"version":3,"sources":["./src/app/day-view/dayview-topbar.component.ts","./src/app/day-view/dayview-event.component.ts","./src/app/day-view/dayview-space.component.ts","./src/app/day-view/dayview-timeline.component.ts","./src/app/day-view/day-view.component.ts","./src/app/day-view/day-view.module.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/new-user-modal/new-user-modal.component.html","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/new-user-modal/new-user-modal.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.html","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/location.class.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/users.module.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/staff.fn.ts"],"names":["DayviewTopbarComponent","_state","_org","_route","_router","super","zones","types","id","name","type_list","this","map","i","setDate","d","newBooking","levels","active_levels","ui_options","options","updateZones","z","navigate","relativeTo","queryParams","zone_ids","join","setZones","updateTypes","setFilters","hide_type","reduce","list","item","includes","push","setUIOptions","initialised","pipe","first","_","toPromise","subscription","queryParamMap","subscribe","params","has","get","split","length","level","levelWithID","building","buildings","find","bld","parent_id","filter","zone","lvl","updateUIOptions","DayviewEventComponent","top","height","overflow_top","overflow_height","view","e","setEvent","date","Date","event","format","addMinutes","duration","has_visitors","status","changes","start","startOfDay","diff","differenceInMinutes","setup","breakdown","DayviewSpaceComponent","events","filtered","bookings","bkn","resources","space","email","HOUR_BLOCKS","Array","fill","idx","DayviewTimelineComponent","_spaces","blocks","scroll","x","y","loading","space_list","combineLatest","active_building","details","spaces","startPolling","stopPolling","box","_ref_el","nativeElement","getBoundingClientRect","requestAnimationFrame","srcElement","scrollLeft","scrollTop","onScroll","DayViewComponent","ROUTES","path","component","DayViewModule","forChild","NewUserModalComponent","_data","user","form","markAllAsTouched","valid","new_user","value","type","visit_expected","endsWith","emit","reason","metadata","UserFormComponent","MapLocation","location","position","map_id","map_width","map_height","variance","last_seen","Math","floor","valueOf","at_location","SharedUsersModule","STAFF_ENDPOINT","searchStaff","q","query","showStaff","encodeURIComponent"],"mappings":"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","file":"day-view-day-view-module.85830f35b701451ae750.js","sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass, Identity } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { BookingUIOptions, EventsStateService } from './events-state.service';\n\n@Component({\n    selector: 'dayview-topbar',\n    template: `\n        <button mat-button class=\"w-12 xl:w-auto\" (click)=\"newBooking()\">\n            <div class=\"flex items-center\">\n                <app-icon\n                    class=\"mr-2\"\n                    [icon]=\"{ class: 'material-icons', content: 'add' }\"\n                ></app-icon>\n                <div class=\"hidden xl:block\">New Booking</div>\n            </div>\n        </button>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option *ngFor=\"let level of levels | async\" [value]=\"level.id\">\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"type_list\"\n                (ngModelChange)=\"updateTypes($event)\"\n                placeholder=\"No Events\"\n            >\n                <mat-select-trigger>Legend</mat-select-trigger>\n                <mat-option *ngFor=\"let type of types\" [value]=\"type.id\">\n                    {{ type.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-slide-toggle\n            class=\"m-2\"\n            [ngModel]=\"(ui_options | async)?.show_overflow\"\n            (ngModelChange)=\"updateUIOptions({ show_overflow: $event })\"\n            ><div class=\"text-xs\">Setup / Breakdown</div></mat-slide-toggle\n        >\n        <mat-slide-toggle\n            class=\"m-2\"\n            [ngModel]=\"(ui_options | async)?.show_cleaning\"\n            (ngModelChange)=\"updateUIOptions({ show_cleaning: $event })\"\n            ><div class=\"text-xs\">Cleaners View</div></mat-slide-toggle\n        >\n        <div class=\"flex-1 w-0\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n            }\n\n            button {\n                min-width: 0;\n                padding: 0 .85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n                margin-left: 1em;\n            }\n\n            mat-slide-toggle div {\n                width: 5.5em;\n                white-space: initial;\n                line-height: 1.2em\n            }\n        `,\n    ],\n})\nexport class DayviewTopbarComponent extends BaseClass {\n    /** List of selected levels */\n    public zones: string[] = [];\n\n    public readonly types: Identity[] = [\n        { id: 'internal', name: 'Internal' },\n        { id: 'external', name: 'External' },\n        { id: 'cancelled', name: 'Cancelled' },\n    ];\n    /** List of selected types */\n    public type_list: string[] = this.types.map((i) => `${i.id}`);\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setDate(d);\n    /**  */\n    public readonly newBooking = (d?) => this._state.newBooking(d);\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly ui_options = this._state.options;\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setZones(z);\n    };\n    /** List of levels for the active building */\n    public readonly updateTypes = (types) =>\n        this._state.setFilters({\n            hide_type: this.types.reduce((list, item) => {\n                !types.includes(item.id) ? list.push(item) : '';\n                return list;\n            }, []),\n        });\n\n    public updateUIOptions(options: BookingUIOptions) {\n        this._state.setUIOptions(options);\n    }\n\n    constructor(\n        private _state: EventsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) => levels.find((lvl) => lvl.id === zone));\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.updateTypes(this.type_list);\n    }\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { startOfDay, differenceInMinutes, format, addMinutes } from 'date-fns';\n\nimport { CalendarEvent } from '@user-interfaces/events';\nimport { EventsStateService } from './events-state.service';\n\n@Component({\n    selector: 'dayview-event',\n    template: `\n        <div\n            *ngIf=\"(ui_options | async)?.show_overflow\"\n            [class]=\"'overflow-block absolute rounded overflow-hidden w-full ' + type\"\n            [style.top]=\"overflow_top * 100 + '%'\"\n            [style.height]=\"overflow_height * 100 + '%'\"\n        ></div>\n        <div\n            name=\"event\"\n            matRipple\n            [class]=\"'absolute rounded overflow-hidden text-sm ' + type\"\n            *ngIf=\"event\"\n            [style.top]=\"top * 100 + '%'\"\n            [style.height]=\"height * 100 + '%'\"\n            (click)=\"view(event)\"\n        >\n            <div class=\"info\">{{ event.organiser?.name }}</div>\n            <div class=\"info flex items-center\" *ngIf=\"event.duration > 30\">\n                <app-icon class=\"mx-2\" [icon]=\"{ class: 'material-icons', content: 'title' }\"></app-icon>\n                {{ event.title }}\n            </div>\n            <div class=\"info flex items-center\" *ngIf=\"event.duration > 60\">\n                <app-icon class=\"mx-2\" [icon]=\"{ class: 'material-icons', content: 'schedule' }\"></app-icon>\n                {{ time }}\n            </div>\n            <div class=\"info flex items-center\" *ngIf=\"event.duration > 90\">\n                <app-icon class=\"mx-2\" [icon]=\"{ class: 'material-icons', content: 'user' }\"></app-icon>\n                {{ event.attendees.length }} Attendee{{ event.attendees.length === 1 ? '' : 's' }}\n            </div>\n        </div>\n        <div\n            *ngIf=\"(ui_options | async)?.show_cleaning\"\n            class=\"catering-block absolute rounded overflow-hidden flex w-full shadow p-2\"\n            [style.top]=\"overflow_top * 100 + '%'\"\n            [style.height]=\"overflow_height * 100 + '%'\"\n        >\n            <div [class]=\"'icon flex mr-2 text-3xl rounded ' + event.cleaning_status\">\n                <app-icon [icon]=\"{ class: 'material-icons', content: event.cleaning_status === 'done' ? 'done' : 'warning' }\"></app-icon>\n            </div>\n            <div class=\"text\">{{ event.cleaning_status === 'done' ? 'Finished' : 'Scheduled to' }} clean at {{ event.cleaning_time }}</div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                border-right: 1px solid rgba(0, 0, 0, 0.1);\n            }\n\n            [name='event'] {\n                background-color: #ccc;\n                width: 12rem;\n                z-index: 100;\n                transition: box-shadow 200ms;\n            }\n\n            [name='event']:hover {\n                box-shadow: 0 1px 3px 1px rgba(0, 0, 0, 0.2), 0 1px 1px 0 rgba(0, 0, 0, 0.14),\n                    0 2px 1px -1px rgba(0, 0, 0, 0.12);\n                cursor: pointer;\n                z-index: 999;\n            }\n\n            .overflow-block {\n                opacity: .3;\n                width: 12rem;\n            }\n\n            .catering-block {\n                background-color: #fff;\n                width: 12rem;\n                z-index: 999;\n            }\n\n            .internal {\n                background-color: #00a4c7;\n                color: #fff;\n            }\n\n            .icon {\n                height: 1.5em;\n                width: 1.5em;\n                color: #ffbf1f;\n                background-color: #f0f0f0;\n            }\n\n            .icon.done {\n                color: #21a453;\n            }\n\n            .external {\n                background-color: #d85be0;\n                color: #fff;\n            }\n\n            .cancelled {\n                background-color: #eee;\n            }\n\n            .info:first-child {\n                padding: 0.75em 0.5em;\n            }\n\n            .info {\n                padding: 0.25em 0.5em;\n            }\n        `,\n    ],\n})\nexport class DayviewEventComponent implements OnChanges {\n    /** Event to display */\n    @Input() public event: CalendarEvent;\n    /** Top position for the event */\n    public top: number = -999;\n    /** Height of the event on the calendar */\n    public height: number = 0;\n    /** Top position for the event */\n    public overflow_top: number = -999;\n    /** Height of the event on the calendar */\n    public overflow_height: number = 0;\n\n    public readonly view = (e) => this._state.setEvent(e);\n\n    public readonly ui_options = this._state.options;\n\n    public get time() {\n        const date = new Date(this.event.date);\n        return (\n            format(date, 'h:mm a') + ' - ' + format(addMinutes(date, this.event.duration), 'h:mm a')\n        );\n    }\n\n    public get type() {\n        return this.event.has_visitors\n            ? 'external'\n            : this.event.status === 'cancelled'\n            ? 'cancelled'\n            : 'internal';\n    }\n\n    constructor(private _state: EventsStateService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.event && this.event) {\n            const start = startOfDay(new Date(this.event.date));\n            const diff = differenceInMinutes(new Date(this.event.date), start);\n            this.top = diff / (24 * 60);\n            this.height = this.event.duration / (24 * 60);\n            this.overflow_top = (diff - this.event.setup) / (24 * 60);\n            this.overflow_height =\n                (this.event.duration + this.event.setup + this.event.breakdown) / (24 * 60);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { CalendarEvent } from '@user-interfaces/events';\nimport { Space } from '@user-interfaces/spaces';\nimport { EventsStateService } from './events-state.service';\n\n@Component({\n    selector: 'dayview-space',\n    template: `\n        <dayview-event *ngFor=\"let event of events | async\" [event]=\"event\"></dayview-event>\n        `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                border-right: 1px solid rgba(0, 0, 0, 0.1);\n            }\n        `,\n    ],\n})\nexport class DayviewSpaceComponent {\n    /** Space to display events for */\n    @Input() public space: Space;\n\n    public shown_event: CalendarEvent;\n    /** List of events for the selected space */\n    public readonly events = this._state.filtered.pipe(\n        map((bookings) =>\n            bookings.filter((bkn) =>\n                bkn.resources.find((space) => this.space.email === space.email)\n            )\n        )\n    );\n\n    constructor(private _state: EventsStateService) {}\n\n    ngOnInit() {\n        this._state.filtered.subscribe((events) => {\n\n        });\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { SpacesService } from '@user-interfaces/spaces';\nimport { EventsStateService } from './events-state.service';\n\nconst HOUR_BLOCKS = new Array(24).fill(0).map((_, idx) => {\n    return (idx % 12 === 0 ? 12 : idx % 12) + (idx >= 12 ? ' PM' : ' AM');\n});\n\n@Component({\n    selector: 'dayview-timeline',\n    template: `\n        <div class=\"time h-full overflow-hidden\">\n            <div class=\"headers relative\">\n                <div class=\"white-space absolute inset-0\" style=\"bottom: 1em\"></div>\n            </div>\n            <div *ngFor=\"let time of blocks\" name=\"change-transform\" class=\"relative\" [style.transform]=\"'translateY(-' + scroll.y + 'px)'\">\n                <div class=\"text absolute w-full text-xs\">{{ time }}</div>\n                <div class=\"bar absolute\"></div>\n            </div>\n        </div>\n        <div class=\"h-full flex-1 flex flex-col\">\n            <div class=\"headers flex relative overflow-hidden\">\n                <div class=\"bar absolute\"></div>\n                <div\n                    *ngFor=\"let space of space_list | async\"\n                    name=\"change-transform\"\n                    class=\"relative w\"\n                    [style.transform]=\"'translateX(-' + scroll.x + 'px)'\"\n                >\n                    <div class=\"bar absolute\"></div>\n                    <div class=\"name m-2 text-center\">{{ space.display_name || space.name }}</div>\n                </div>\n            </div>\n            <div\n                #scroll_el\n                class=\"content relative flex flex-1 overflow-auto\"\n                (scroll)=\"onScroll($event)\"\n            >\n                <div #ref class=\"ref absolute\"></div>\n                <dayview-space\n                    *ngFor=\"let space of space_list | async\"\n                    [space]=\"space\"\n                ></dayview-space>\n                <div\n                    *ngFor=\"let time of blocks; let i = index\"\n                    class=\"block absolute w-full\"\n                    [style.width]=\"(space_list | async).length * 12 + 'em'\"\n                    [style.top]=\"i * 4 + 'em'\"\n                ></div>\n            </div>\n        </div>\n        <mat-progress-bar *ngIf=\"loading | async\" mode=\"indeterminate\"></mat-progress-bar>\n        <dayview-event-details *ngIf=\"event | async\" [event]=\"event | async\"></dayview-event-details>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                flex: 1;\n                min-height: 50%;\n            }\n\n            .time {\n                width: 6em;\n            }\n\n            .time > div:not(.headers) {\n                height: 4em;\n            }\n\n            .bar {\n                width: 1em;\n                top: 0;\n                right: 0;\n                height: 1px;\n                background-color: rgba(0, 0, 0, 0.1);\n                z-index: 0;\n            }\n\n            .headers {\n                height: 4em;\n                max-width: calc(100vw - 12em);\n            }\n\n            .white-space {\n                background-color: #f0f0f0;\n                z-index: 999;\n            }\n\n            .headers .bar {\n                width: 1px;\n                bottom: 0;\n                right: -1px;\n                height: 2em;\n                background-color: rgba(0, 0, 0, 0.1);\n                top: auto;\n            }\n\n            .headers > .bar:first-child {\n                width: 1px;\n                bottom: 0;\n                right: auto;\n                left: 0;\n                height: 2em;\n                background-color: rgba(0, 0, 0, 0.1);\n                top: auto;\n            }\n\n            .w,\n            dayview-space {\n                width: 12em;\n                min-width: 12em;\n            }\n\n            dayview-space {\n                height: 96em;\n            }\n\n            .block {\n                height: 4em;\n                border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n                pointer-events: none;\n                min-width: 100%;\n                z-index: 0;\n            }\n\n            .text {\n                text-align: center;\n                transform: translateY(-50%);\n                padding: 0 2.5em;\n                opacity: 0.65;\n            }\n\n            .ref {\n                top: 0;\n                left: 0;\n                height: 1px;\n                width: 1px;\n                height: 96em;\n            }\n\n            .content {\n                max-width: calc(100vw - 12em);\n                border-top: 1px solid rgba(0, 0, 0, 0.1);\n                border-left: 1px solid rgba(0, 0, 0, 0.1);\n            }\n\n            mat-progress-bar {\n                position: absolute;\n                left: 0;\n                right: 0;\n                bottom: 0;\n            }\n\n            [name=\"change-transform\"] {\n                will-change: transform;\n            }\n        `,\n    ],\n})\nexport class DayviewTimelineComponent extends BaseClass {\n    /** Time blocks to display */\n    public readonly blocks: string[] = HOUR_BLOCKS;\n    /** Current scroll position of the content */\n    public scroll: { x: number; y: number } = { x: 0, y: 0 };\n    /** Reference Box */\n    public box: ClientRect;\n    /** Whether event data is loading */\n    public readonly loading = this._state.loading;\n    /** Whether event data is loading */\n    public readonly event = this._state.event;\n    /** List of spaces to display */\n    public readonly space_list = combineLatest([\n        this._org.active_building,\n        this._spaces.list,\n        this._state.zones,\n    ]).pipe(\n        map((details) => {\n            const [bld, spaces, zones] = details;\n            return (\n                spaces.filter(\n                    (space) =>\n                        space.zones.includes(bld.id) &&\n                        (!zones?.length || space.zones.find((z) => zones.includes(z)))\n                ) || []\n            );\n        })\n    );\n\n    @ViewChild('ref') private _ref_el: ElementRef;\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _state: EventsStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n\n    public ngAfterViewInit() {\n        this.box = this._ref_el.nativeElement.getBoundingClientRect();\n    }\n\n    public onScroll(e) {\n        if (this._ref_el) {\n            requestAnimationFrame(() =>\n                this.scroll = {\n                    x: e.srcElement.scrollLeft,\n                    y: e.srcElement.scrollTop\n                }\n            );\n        }\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-dayview',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden\">\n            <dayview-topbar></dayview-topbar>\n            <dayview-timeline></dayview-timeline>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `\n    ],\n})\nexport class DayViewComponent {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { DayViewComponent } from './day-view.component';\nimport { DayviewTopbarComponent } from './dayview-topbar.component';\nimport { DayviewTimelineComponent } from './dayview-timeline.component';\nimport { DayviewSpaceComponent } from './dayview-space.component';\nimport { DayviewEventComponent } from './dayview-event.component';\n\nimport { BookingModalComponent } from './booking-modal.component';\nimport { EventFormComponent } from './event-form.component';\nimport { SharedSpacesModule } from '@user-interfaces/spaces';\nimport { SharedUsersModule } from '@user-interfaces/users';\n\nconst ROUTES: Route[] = [{ path: '', component: DayViewComponent }];\n\n@NgModule({\n    declarations: [\n        DayViewComponent,\n        DayviewTopbarComponent,\n        DayviewTimelineComponent,\n        DayviewSpaceComponent,\n        DayviewEventComponent,\n\n        BookingModalComponent,\n        EventFormComponent\n    ],\n    imports: [CommonModule, FormsModule, UIModule, SharedSpacesModule, SharedUsersModule, RouterModule.forChild(ROUTES)],\n})\nexport class DayViewModule {}\n","<header>\n    <div class=\"heading\" mat-dialog-title>{{ user?.id ? 'Edit' : 'Add' }} External Attendee</div>\n    <div class=\"flex-1\"></div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <user-form [form]=\"form\"></user-form>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer *ngIf=\"!loading\">\n        <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n        <button mat-button (click)=\"saveChanges()\">Save</button>\n    </footer>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">Saving attendee...</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { BaseClass, DialogEvent } from '@user-interfaces/common';\n\nimport { User } from '../user.class';\nimport { generateUserForm } from '../user.utilities';\n\n@Component({\n    selector: 'new-user-modal',\n    templateUrl: './new-user-modal.component.html',\n    styleUrls: ['./new-user-modal.component.scss'],\n})\nexport class NewUserModalComponent extends BaseClass implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: any) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = this._data.user || {};\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                type: 'external',\n                visit_expected: !this.form.value.email.endsWith('place.tech'),\n            });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n}\n","<div class=\"user form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"name\" placeholder=\"Name\" formControlName=\"name\" />\n                <mat-error *ngIf=\"form.controls.name.invalid\">Name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.email\">\n            <label\n                for=\"email\"\n                [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                >Email<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" placeholder=\"Email Address\" formControlName=\"email\" />\n                <mat-error *ngIf=\"form.controls.email.invalid\">A valid email is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.organisation\">\n            <label\n                for=\"organisation\"\n                [class.error]=\"\n                    form.controls.organisation.invalid && form.controls.organisation.touched\n                \"\n                >Organisation<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"organisation\"\n                    placeholder=\"Organisation\"\n                    formControlName=\"organisation\"\n                />\n                <mat-error *ngIf=\"form.controls.organisation.invalid\"\n                    >Organisation is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.phone\">\n            <label\n                for=\"phone\"\n                [class.error]=\"form.controls.phone.invalid && form.controls.phone.touched\"\n                >Phone:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"phone\" placeholder=\"Phone\" formControlName=\"phone\" />\n                <mat-error *ngIf=\"form.controls.phone.invalid\">Phone format is invalid</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n            <mat-checkbox color=\"primary\" formControlName=\"assistance_required\"\n                >Assistance required</mat-checkbox\n            >\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n            <mat-checkbox color=\"primary\" formControlName=\"visit_expected\"\n                >Visit expected</mat-checkbox\n            >\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","import { Point } from '@yuion/svg-viewer';\nimport { HashMap } from '@user-interfaces/common';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n\n    constructor(_data: HashMap) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width,\n                y: _data.y / _data.map_height,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen =\n            _data.last_seen || Math.floor(new Date().valueOf() / 1000);\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { NewUserModalComponent } from './new-user-modal/new-user-modal.component';\nimport { UserFormComponent } from './user-form/user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { get } from \"@placeos/ts-client\";\nimport { toQueryString } from \"libs/common/src/lib/api\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { StaffUser } from \"./user.class\";\n\nconst STAFF_ENDPOINT = '/api/staff/v1/people';\n\n/**\n * Search staff members\n * @param q Search string for filtering staff\n */\nexport function searchStaff(q: string): Observable<StaffUser[]> {\n    const query = toQueryString({ q });\n    return get(`${STAFF_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new StaffUser(item)))\n    );\n}\n\n/**\n * Get user details\n * @param id User ID or email\n */\nexport function showStaff(id: string) {\n    return get(`${STAFF_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n\n\n/**\n * Get user with their location details\n * @param email User email\n */\nexport function locateStaff(email: string) {\n    return get(`${STAFF_ENDPOINT}/${email}`).pipe(\n        map((item) => new StaffUser(item))\n    );\n}\n"],"sourceRoot":"webpack:///"}