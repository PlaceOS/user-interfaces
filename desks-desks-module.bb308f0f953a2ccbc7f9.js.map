{"version":3,"sources":["/home/runner/work/user-interfaces/user-interfaces/node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js","./src/app/desks/desk-list-modal.component.ts","./src/app/desks/desks-state.service.ts","./src/app/desks/desks-topbar.component.ts","./src/app/desks/desk-details.component.ts","../workplace/src/app/bookings/desk-flow/desk-flow-confirm-modal.component.ts","../workplace/src/app/bookings/desk-flow/desk-flow-questions-modal.component.ts","../workplace/src/app/bookings/desk-flow/desk-flow-state.service.ts","./src/app/desks/desk-map-view.component.ts","./src/app/desks/desk-listings.component.ts","./src/app/desks/desks.component.ts","./src/app/desks/desks.module.ts"],"names":["_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","multi","MatRadioChange","source","value","this","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","_radios","forEach","radio","name","_markForCheck","emit","markForCheck","fn","isDisabled","disabled","ɵfac","t","ɵdir","type","inputs","labelPosition","required","outputs","MatRadioGroup","ɵMatRadioGroup_BaseFactory","selectors","contentQueries","rf","ctx","dirIndex","_t","hostAttrs","exportAs","features","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","super","_uniqueId","id","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","options","focusVia","_inputElement","monitor","subscribe","focusOrigin","_touch","stopMonitoring","disableRipple","event","stopPropagation","groupValueChanged","_emitChangeEvent","String","undefined","viewQuery","first","ariaLabel","ariaLabelledby","ariaDescribedby","MatRadioButton","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","ɵcmp","hostVars","hostBindings","nativeElement","focus","ngContentSelectors","decls","vars","consts","template","$event","_onInputChange","_onInputClick","_r0","inputId","_isRippleDisabled","directives","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports","filter$","DeskListModalComponent","_data","_dialog_ref","building","level","desks$","BehaviorSubject","desks","desk_list","combineLatest","pipe","map","details","filter","desk","toLowerCase","includes","data","getValue","i","format","csv","display_name","split","join","target","file","files","loading","reader","FileReader","readAsText","onload","processCSV","result","onerror","evt","description","toPromise","catch","e","message","close","next","DesksStateService","_bookings","_org","_dialog","_filters","_desk_bookings","_desks","_loading","asObservable","filters","debounceTime","distinctUntilChanged","switchMap","zones","length","m","list","Array","sort","a","b","localeCompare","share","bookings","date","Date","query","period_start","Math","floor","startOfDay","valueOf","period_end","endOfDay","shareReplay","delay","interval","setFilters","clearInterval","checkIn","_","user_name","approve","reject","ref","open","title","content","icon","class","Promise","resolve","success","componentInstance","reason","all","afterClosed","levelWithID","level_list","DesksTopbarComponent","_route","_router","levels","active_levels","toggleMapShow","show_map","setDate","updateZones","navigate","relativeTo","queryParams","zone_ids","queryParamsHandling","initialised","subscription","queryParamMap","params","has","get","buildings","find","bld","parent_id","zone","lvl","push","DeskDetailsComponent","_state","checkin","runMethod","checkinDesk","approveDesk","rejectDesk","DeskFlowConfirmModalComponent","DeskFlowQuestionsModalComponent","form","travelled","unwell","contact","markAllAsTouched","valid","Object","keys","key","failure","DeskFlowStateService","_staff","_settings","_options","opts","d","reduce","l","concat","metadata","desk_availability","active_bookings","bkn","status","user_groups","current","groups","bookable_desks","bookable","group","processDeskBookings","asset_id","setOptions","handleDeskAvailability","state","host","_host","race","makeDeskBooking","location","booking_data","booking_start","user_id","user_email","email","booking_end","booking_type","extension_data","save","available","style_map","actions","colours","fill","opacity","action","callback","bookDesk","console","log","setStyles","setActions","booking","hover","map_id","user","start","end","duration","setFeatures","DeskMapViewComponent","_desk","_flow","url","map_url","map_styles","positions","map_positions","map_actions","setHost","u","DeskListingsComponent","rejectAll","rejectAllDesks","updateDesks","ROUTES","path","component","DesksComponent","startPolling","stopPolling","DesksModule","forChild"],"mappings":";;;;;;;;AAoBA,MAAMA,EAAM,CAAC,SACPC,EAAM,WAAc,MAAO,CAAEC,cAAe,MAC5CC,EAAM,CAAC,KACPC,EAA4B,IAAI,IAAe,4BAA6B,CAC9EC,WAAY,OACZC,QAEJ,WACI,MAAO,CACHC,MAAO,aAIf,IAAIC,EAAe,EAMnB,MAAMC,EAAyC,CAC3CC,QAAS,IACTC,YAAa,YAAW,IAAM,GAC9BC,OAAO,GAGX,MAAMC,EACF,YAEAC,EAEAC,GACIC,KAAKF,OAASA,EACdE,KAAKD,MAAQA,GAQrB,MAAME,EAAkB,IAAI,IAAe,iB,kBAKrCC,EACF,YAAYC,GACRH,KAAKG,gBAAkBA,EAEvBH,KAAKI,OAAS,KAEdJ,KAAKK,MAAQ,mBAAmBb,IAEhCQ,KAAKM,UAAY,KAEjBN,KAAKO,gBAAiB,EAEtBP,KAAKQ,eAAiB,QAEtBR,KAAKS,WAAY,EAEjBT,KAAKU,WAAY,EAEjBV,KAAKW,8BAAgC,OAKrCX,KAAKY,UAAY,OAMjBZ,KAAKa,OAAS,IAAI,IAGtB,WAAa,OAAOb,KAAKK,MACzB,SAASN,GACLC,KAAKK,MAAQN,EACbC,KAAKc,0BAGT,oBACI,OAAOd,KAAKQ,eAEhB,kBAAkBO,GACdf,KAAKQ,eAAuB,WAANO,EAAiB,SAAW,QAClDf,KAAKgB,sBAQT,YAAc,OAAOhB,KAAKI,OAC1B,UAAUa,GACFjB,KAAKI,SAAWa,IAEhBjB,KAAKI,OAASa,EACdjB,KAAKkB,gCACLlB,KAAKmB,6BAGb,4BACQnB,KAAKM,YAAcN,KAAKM,UAAUc,UAClCpB,KAAKM,UAAUc,SAAU,GAOjC,eAAiB,OAAOpB,KAAKM,UAC7B,aAAae,GACTrB,KAAKM,UAAYe,EACjBrB,KAAKD,MAAQsB,EAAWA,EAAStB,MAAQ,KACzCC,KAAKmB,4BAGT,eAAiB,OAAOnB,KAAKS,UAC7B,aAAaV,GACTC,KAAKS,UAAY,YAAsBV,GACvCC,KAAKgB,sBAGT,eAAiB,OAAOhB,KAAKU,UAC7B,aAAaX,GACTC,KAAKU,UAAY,YAAsBX,GACvCC,KAAKgB,sBAMT,qBAIIhB,KAAKO,gBAAiB,EAM1B,SACQP,KAAKY,WACLZ,KAAKY,YAGb,0BACQZ,KAAKsB,SACLtB,KAAKsB,QAAQC,QAAQC,IACjBA,EAAMC,KAAOzB,KAAKyB,KAClBD,EAAME,kBAKlB,gCAGQ1B,KAAKsB,UADoC,OAAnBtB,KAAKM,WAAsBN,KAAKM,UAAUP,QAAUC,KAAKI,UAE/EJ,KAAKM,UAAY,KACjBN,KAAKsB,QAAQC,QAAQC,IACjBA,EAAMJ,QAAUpB,KAAKD,QAAUyB,EAAMzB,MACjCyB,EAAMJ,UACNpB,KAAKM,UAAYkB,MAMjC,mBACQxB,KAAKO,gBACLP,KAAKa,OAAOc,KAAK,IAAI9B,EAAeG,KAAKM,UAAWN,KAAKI,SAGjE,sBACQJ,KAAKsB,SACLtB,KAAKsB,QAAQC,QAAQC,GAASA,EAAME,iBAO5C,WAAW3B,GACPC,KAAKD,MAAQA,EACbC,KAAKG,gBAAgByB,eAOzB,iBAAiBC,GACb7B,KAAKW,8BAAgCkB,EAOzC,kBAAkBA,GACd7B,KAAKY,UAAYiB,EAMrB,iBAAiBC,GACb9B,KAAK+B,SAAWD,EAChB9B,KAAKG,gBAAgByB,gB,OAG7B1B,EAAmB8B,UAAO,SAAoCC,GAAK,OAAO,IAAKA,GAAK/B,GAAoB,KAAyB,OACjIA,EAAmBgC,UAAO,KAAyB,CAAEC,KAAMjC,EAAoBkC,OAAQ,CAAEX,KAAM,OAAQY,cAAe,gBAAiBtC,MAAO,QAASsB,SAAU,WAAYU,SAAU,WAAYO,SAAU,WAAY/C,MAAO,SAAWgD,QAAS,CAAE1B,OAAQ,Y,oBAoCxP2B,UAAsB,G,OAE5BA,EAAcR,UAAO,SAA+BC,GAAK,OAAOQ,EAA2BR,GAAKO,IAChGA,EAAcN,UAAO,KAAyB,CAAEC,KAAMK,EAAeE,UAAW,CAAC,CAAC,oBAAqBC,eAAgB,SAAsCC,EAAIC,EAAKC,GAEhK,GAFqL,EAALF,GAC9K,KAAsBE,EAAU,GAAgB,GACzC,EAALF,EAAQ,CACV,IAAIG,EACJ,KAAsBA,EAAK,UAA0BF,EAAIvB,QAAUyB,KAClEC,UAAW,CAAC,OAAQ,aAAc,EAAG,mBAAoBC,SAAU,CAAC,iBAAkBC,SAAU,CAAC,KAA0B,CACxHzD,EACA,CAAEC,QAASO,EAAiBN,YAAa6C,KACzC,Q,MAIZ,MAAMC,EAA2C,KAA6B,GAqB9E,MAAMU,EACF,YAAYC,GACRpD,KAAKoD,YAAcA,GAK3B,MAAMC,EAA2B,YAAmB,YAAcF,I,kBAK5DG,UAA4BD,EAC9B,YAAYE,EAAYC,EAAYrD,EAAiBsD,EAAeC,EAAkBC,EAAgBC,EAAmBC,GACrHC,MAAMN,GACNxD,KAAKG,gBAAkBA,EACvBH,KAAKyD,cAAgBA,EACrBzD,KAAK0D,iBAAmBA,EACxB1D,KAAK2D,eAAiBA,EACtB3D,KAAK4D,kBAAoBA,EACzB5D,KAAK+D,UAAY,gBAAevE,EAEhCQ,KAAKgE,GAAKhE,KAAK+D,UAMf/D,KAAKa,OAAS,IAAI,IAElBb,KAAKiE,UAAW,EAEhBjE,KAAKI,OAAS,KAEdJ,KAAKkE,+BAAiC,OAGtClE,KAAKuD,WAAaA,EACdM,IACA7D,KAAK6D,SAAW,YAAqBA,EAAU,IAEnD7D,KAAKkE,+BACDR,EAAiBS,OAAO,CAACH,EAAIvC,KACrBuC,IAAOhE,KAAKgE,IAAMvC,IAASzB,KAAKyB,OAChCzB,KAAKoB,SAAU,KAK/B,cAAgB,OAAOpB,KAAKiE,SAC5B,YAAYlE,GACR,MAAMqE,EAAkB,YAAsBrE,GAC1CC,KAAKiE,WAAaG,IAClBpE,KAAKiE,SAAWG,EACZA,GAAmBpE,KAAKuD,YAAcvD,KAAKuD,WAAWxD,QAAUC,KAAKD,MACrEC,KAAKuD,WAAWlC,SAAWrB,MAErBoE,GAAmBpE,KAAKuD,YAAcvD,KAAKuD,WAAWxD,QAAUC,KAAKD,QAG3EC,KAAKuD,WAAWlC,SAAW,MAE3B+C,GAEApE,KAAK0D,iBAAiBW,OAAOrE,KAAKgE,GAAIhE,KAAKyB,MAE/CzB,KAAKG,gBAAgByB,gBAI7B,YAAc,OAAO5B,KAAKI,OAC1B,UAAUL,GACFC,KAAKI,SAAWL,IAChBC,KAAKI,OAASL,EACU,OAApBC,KAAKuD,aACAvD,KAAKoB,UAENpB,KAAKoB,QAAUpB,KAAKuD,WAAWxD,QAAUA,GAEzCC,KAAKoB,UACLpB,KAAKuD,WAAWlC,SAAWrB,QAM3C,oBACI,OAAOA,KAAKQ,gBAAmBR,KAAKuD,YAAcvD,KAAKuD,WAAWlB,eAAkB,QAExF,kBAAkBtC,GACdC,KAAKQ,eAAiBT,EAG1B,eACI,OAAOC,KAAKS,WAAkC,OAApBT,KAAKuD,YAAuBvD,KAAKuD,WAAWxB,SAE1E,aAAahC,GACTC,KAAKsE,aAAa,YAAsBvE,IAG5C,eACI,OAAOC,KAAKU,WAAcV,KAAKuD,YAAcvD,KAAKuD,WAAWjB,SAEjE,aAAavC,GACTC,KAAKU,UAAY,YAAsBX,GAG3C,YACI,OAAOC,KAAKuE,QACPvE,KAAKuD,YAAcvD,KAAKuD,WAAWhE,OACpCS,KAAK4D,mBAAqB5D,KAAK4D,kBAAkBrE,OAAS,SAElE,UAAU0B,GAAYjB,KAAKuE,OAAStD,EAEpC,cAAgB,OAAUjB,KAAKgE,IAAMhE,KAAK+D,WAAnB,SAEvB,MAAMS,GACFxE,KAAKyD,cAAcgB,SAASzE,KAAK0E,cAAe,WAAYF,GAOhE,gBAGIxE,KAAKG,gBAAgByB,eAEzB,WACQ5B,KAAKuD,aAELvD,KAAKoB,QAAUpB,KAAKuD,WAAWxD,QAAUC,KAAKI,OAE9CJ,KAAKyB,KAAOzB,KAAKuD,WAAW9B,MAGpC,kBACIzB,KAAKyD,cACAkB,QAAQ3E,KAAKoD,aAAa,GAC1BwB,UAAUC,KACNA,GAAe7E,KAAKuD,YACrBvD,KAAKuD,WAAWuB,WAI5B,cACI9E,KAAKyD,cAAcsB,eAAe/E,KAAKoD,aACvCpD,KAAKkE,iCAGT,mBACIlE,KAAKa,OAAOc,KAAK,IAAI9B,EAAeG,KAAMA,KAAKI,SAEnD,oBACI,OAAOJ,KAAKgF,eAAiBhF,KAAK+B,SAEtC,cAAckD,GAQVA,EAAMC,kBAMV,eAAeD,GAIXA,EAAMC,kBACN,MAAMC,EAAoBnF,KAAKuD,YAAcvD,KAAKD,QAAUC,KAAKuD,WAAWxD,MAC5EC,KAAKoB,SAAU,EACfpB,KAAKoF,mBACDpF,KAAKuD,aACLvD,KAAKuD,WAAW5C,8BAA8BX,KAAKD,OAC/CoF,GACAnF,KAAKuD,WAAW6B,oBAK5B,aAAarF,GACLC,KAAKS,YAAcV,IACnBC,KAAKS,UAAYV,EACjBC,KAAKG,gBAAgByB,iB,OAIjC0B,EAAoBtB,UAAO,SAAqCC,GAAK,OAAO,IAAKA,GAAKqB,GAAqB,KAAyB,GAAqB,KAAyB,KAAoB,KAAyB,KAA2B,KAAyB,KAAsB,KAAyB,KAAmC,KAAyB+B,QAAS,UAAyBC,GAAY,KAAyBD,UACrc/B,EAAoBpB,UAAO,KAAyB,CAAEC,KAAMmB,EAAqBiC,UAAW,SAAmC3C,EAAIC,GAE7H,GAF6I,EAALD,GACtI,KAAmB5D,GAAK,GACjB,EAAL4D,EAAQ,CACV,IAAIG,EACJ,KAAsBA,EAAK,UAA0BF,EAAI6B,cAAgB3B,EAAGyC,SAC3EpD,OAAQ,CAAE4B,GAAI,KAAM5C,QAAS,UAAWrB,MAAO,QAASsC,cAAe,gBAAiBN,SAAU,WAAYO,SAAU,WAAY/C,MAAO,QAASkC,KAAM,OAAQgE,UAAW,CAAC,aAAc,aAAcC,eAAgB,CAAC,kBAAmB,kBAAmBC,gBAAiB,CAAC,mBAAoB,oBAAsBpD,QAAS,CAAE1B,OAAQ,UAAYqC,SAAU,CAAC,Q,oBA8D1W0C,UAAuB,EACzB,YAAYrC,EAAYC,EAAYqC,EAAgBC,EAAcC,EAAiBC,EAAeC,EAAkBpC,GAChHC,MAAMP,EAAYC,EAAYqC,EAAgBC,EAAcC,EAAiBC,EAAeC,EAAkBpC,I,OAGtH+B,EAAe5D,UAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAK2D,GAAgB,KAAyB3F,EAAiB,GAAI,KAAyB,KAAoB,KAAyB,KAA2B,KAAyB,KAAsB,KAAyB,KAAmC,KAAyB,IAAuB,GAAI,KAAyBb,EAA2B,GAAI,KAAyB,cAC3dwG,EAAeM,UAAO,KAAyB,CAAE/D,KAAMyD,EAAgBlD,UAAW,CAAC,CAAC,qBAAsBM,UAAW,CAAC,EAAG,oBAAqBmD,SAAU,GAAIC,aAAc,SAAqCxD,EAAIC,GAAgB,EAALD,GACtN,KAAkB,SAAS,WAAqD,OAAOC,EAAI6B,cAAc2B,cAAcC,WAChH,EAAL1D,IACF,KAAmB,YAAa,EAAhC,CAAmC,KAAMC,EAAImB,GAA7C,CAAiD,aAAc,KAA/D,CAAqE,kBAAmB,KAAxF,CAA8F,mBAAoB,MAClH,KAAmB,oBAAqBnB,EAAIzB,QAA5C,CAAqD,qBAAsByB,EAAId,SAA/E,CAAyF,0BAAkD,mBAAvBc,EAAIc,eAAxH,CAA6J,cAA6B,YAAdd,EAAItD,MAAhL,CAAqM,aAA4B,WAAdsD,EAAItD,MAAvN,CAA2O,WAA0B,SAAdsD,EAAItD,SAC1P6C,OAAQ,CAAE4C,cAAe,gBAAiBnB,SAAU,YAAcZ,SAAU,CAAC,kBAAmBC,SAAU,CAAC,MAAoCqD,mBAAoBpH,EAAKqH,MAAO,GAAIC,KAAM,GAAIC,OAAQ,CAAC,CAAC,EAAG,mBAAoB,CAAC,QAAS,IAAK,CAAC,EAAG,uBAAwB,CAAC,EAAG,0BAA2B,CAAC,EAAG,0BAA2B,CAAC,OAAQ,QAAS,EAAG,kBAAmB,sBAAuB,EAAG,KAAM,UAAW,WAAY,WAAY,WAAY,SAAU,SAAU,CAAC,QAAS,IAAK,CAAC,aAAc,GAAI,EAAG,mBAAoB,sBAAuB,EAAG,mBAAoB,oBAAqB,oBAAqB,kBAAmB,sBAAuB,CAAC,EAAG,qBAAsB,+BAAgC,CAAC,EAAG,2BAA4B,CAAC,EAAG,UAAW,SAAUC,SAAU,SAAiC/D,EAAIC,GAoBlzB,GApBk0B,EAALD,IAC3zB,OACA,KAAsB,EAAG,QAAS,EAAG,GACrC,KAAsB,EAAG,OAAQ,GACjC,KAAiB,EAAG,OAAQ,GAC5B,KAAiB,EAAG,OAAQ,GAC5B,KAAsB,EAAG,QAAS,EAAG,GACrC,KAAkB,UAAU,SAAyDgE,GAAU,OAAO/D,EAAIgE,eAAeD,KAAzH,CAAqI,SAAS,SAAwDA,GAAU,OAAO/D,EAAIiE,cAAcF,MACzO,OACA,KAAsB,EAAG,OAAQ,GACjC,KAAiB,EAAG,OAAQ,GAC5B,OACA,OACA,KAAsB,EAAG,OAAQ,GACjC,KAAsB,GAAI,OAAQ,IAClC,KAAc,GAAI,QAClB,OACA,KAAoB,IACpB,OACA,QACO,EAALhE,EAAQ,CACV,MAAMmE,EAAM,KAAmB,GAC/B,KAAmB,MAAOlE,EAAImE,SAC9B,KAAiB,GACjB,KAAkB,KAAMnE,EAAImE,QAA5B,CAAqC,UAAWnE,EAAIzB,QAApD,CAA6D,WAAYyB,EAAId,SAA7E,CAAuF,WAAYc,EAAIgB,SAAvG,CAAiH,WAAYhB,EAAIP,UACjI,KAAmB,OAAQO,EAAIpB,KAA/B,CAAqC,QAASoB,EAAI9C,MAAlD,CAAyD,aAAc8C,EAAI4C,UAA3E,CAAsF,kBAAmB5C,EAAI6C,eAA7G,CAA6H,mBAAoB7C,EAAI8C,iBACrJ,KAAiB,GACjB,KAAkB,mBAAoBoB,EAAtC,CAA2C,oBAAqBlE,EAAIoE,oBAApE,CAAyF,qBAAqB,EAA9G,CAAoH,kBAAmB,GAAvI,CAA2I,qBAAsB,KAAuB,GAAIhI,IAC5L,KAAiB,GACjB,KAAmB,yBAA+C,UAArB4D,EAAIR,iBAChD6E,WAAY,CAAC,KAAmBC,OAAQ,CAAC,m9EAAo9EC,cAAe,EAAGC,gBAAiB,I,oBAoEniFC,G,OAENA,EAAeC,UAAO,KAAwB,CAAEpF,KAAMmF,IACtDA,EAAeE,UAAO,KAAwB,CAAElI,QAAS,SAAgC2C,GAAK,OAAO,IAAKA,GAAKqF,IAAsBG,QAAS,CAAC,CAAC,IAAiB,KAAkB,O;;;;;;;;iTC9mB3J,iBAII,iBACI,QACJ,OACA,iBAAsB,QAAe,OACrC,iBACI,0BACI,mEACH,OACL,OACA,iBACI,mBAEI,gEAFJ,OAIJ,OACJ,Q,yBAdQ,2BAEkB,qBAGd,mCAMA,iC,uCA7C5B,QACI,iBACI,gBAGI,sBAAqC,sDAAeC,QAAA,W,gBAAsB,OAC1E,gBACA,oBACI,wBACA,mBAGI,8DAHJ,OAKJ,OACA,oBAAmB,6DACf,2BACJ,OACJ,OACA,kBACI,kBAGI,kBAAkC,cAAE,OACpC,kBAAsB,gBAAI,OAC1B,kBAAsB,gBAAI,OAC1B,kBAAsB,eAAG,OAC7B,OACA,kBACI,wB,iBAoBJ,OACJ,OACJ,OACA,qBAGI,qBAAgC,yDAAiB,gBAAI,OACzD,OACJ,O,uBApDuB,0CA0Bc,iD,yBA4BjC,kBAGI,yBACA,YAAG,QAAa,OACpB,Q,oBAF6B,4BACtB,yBAiBZ,a,MAAMC,EAmBT,YAA6CC,EAAkCC,GAAlC,KAAAD,QAAkC,KAAAC,cAlB/D,KAAAC,SAAW9H,KAAK4H,MAAME,SACtB,KAAAC,MAAQ/H,KAAK4H,MAAMG,MACnB,KAAAC,OAAS,IAAIC,EAAA,EAAgBjI,KAAK4H,MAAMM,OACxC,KAAAR,QAAU,IAAIO,EAAA,EAAgB,IAIvC,KAAAE,UAAY,OAAAC,EAAA,GAAc,CAACpI,KAAK0H,QAAS1H,KAAKgI,SAASK,KAC1D,OAAAC,EAAA,GAAKC,IACD,MAAOC,EAAQN,GAASK,EACxB,OAAOL,EAAMM,OACRC,GACGA,EAAKhH,KAAKiH,cAAcC,SAASH,EAAOE,gBACxCD,EAAKzE,GAAG0E,cAAcC,SAASH,EAAOE,mBAQ/C,WACH,MAAME,EAAO5I,KAAKgI,OAAOa,WAAWP,IAAKQ,GAAMA,EAAEC,UAC3CC,EAAM,YAAUJ,GAChBnH,EAAOzB,KAAK+H,MAAMkB,aAAaC,MAAM,KAAKC,KAAK,KAAKT,cAC1D,YAAa,SAASjH,QAAYuH,GAI/B,OAAO/D,GACV,GAAIA,EAAMmE,OAAQ,CACd,MAAMC,EAAOpE,EAAMmE,OAAOE,MAAM,GAChC,GAAID,EAAM,CACNrJ,KAAKuJ,QAAU,eACf,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWL,EAAM,SACxBG,EAAOG,OAAS,KACZ3J,KAAK4J,WAAWJ,EAAOK,QACvB7J,KAAKuJ,QAAU,IAEnBC,EAAOM,QAAWC,IACd/J,KAAKuJ,QAAU,GACf,YAAY,0BAMf,O,mDACTvJ,KAAKuJ,QAAU,mCACT,YAAevJ,KAAK+H,MAAM/D,GAAI,CAChCvC,KAAM,QACNuI,YAAa,QACbzB,QAASvI,KAAKgI,OAAOa,aACtBoB,YAAYC,MAAMC,IAGjB,MAFAnK,KAAKuJ,QAAU,GACf,YAAY,mCAAkCY,EAAEC,SAAWD,IACrDA,IAEV,YACI,8BAEJnK,KAAKuJ,QAAU,GACfvJ,KAAK6H,YAAYwC,WAIb,WAAWrB,GACf,MAAMJ,EAAO,YAAUI,GACvBhJ,KAAKgI,OAAOsC,KAAK1B,EAAKN,IAAKQ,GAAM,IAAI,IAAKA,KAC1C,YACI,gE,6CAxECnB,GAAsB,KAmBX,KAAe,Y,uBAnB1BA,EAAsB,orC,GAAA,MA1F3B,mBACI,eACI,iBAAQ,wBAAa,OAAU,QAGnC,OACA,mBACI,qBAAqC,gBAAK,OAC9C,OACJ,OACA,gCA0DA,yC,sBAlEuC,yGAQxB,gCAAgB,gB,6RAgFhC,G,iBCnFA,a,MAAM4C,UAA0B,IAmDnC,YACYC,EACAC,EACAC,GAER5G,QAJQ,KAAA0G,YACA,KAAAC,OACA,KAAAC,UArDJ,KAAAC,SAAW,IAAI1C,EAAA,EAA6B,IAC5C,KAAA2C,eAA4B,GAC5B,KAAAC,OAAiB,GACjB,KAAAC,SAAW,IAAI7C,EAAA,GAAyB,GAEhC,KAAAsB,QAAUvJ,KAAK8K,SAASC,eAExB,KAAAC,QAAUhL,KAAK2K,SAASI,eAExB,KAAA7C,MAA4B,OAAAE,EAAA,GAAc,CAACpI,KAAK2K,WAAWtC,KACvE,OAAA4C,EAAA,GAAa,KACb,OAAAC,EAAA,KACA,OAAAC,EAAA,GAAW5C,I,MACP,MAAOyC,GAAWzC,EAClB,OAAkB,QAAd,EAACyC,EAAQI,aAAK,eAAEC,QACb,YAAaL,EAAQI,MAAM,IAAMpL,KAAKyK,KAAK3C,SAAS9D,GAAI,CAC3DvC,KAAM,UACP4G,KAAK,OAAAC,EAAA,GAAKgD,GAAMA,EAAE/C,UAHc,KAKvC,OAAAD,EAAA,GAAIiD,IACMA,aAAgBC,QAAQD,EAAO,IACrCA,EAAKE,KAAK,CAACC,EAAGC,IAAMD,EAAEjK,KAAKmK,cAAcD,EAAElK,OAC3CzB,KAAK6K,OAASU,EAAKjD,IAAIQ,GAAK,IAAI,IAAKA,IAC9ByC,IAEX,OAAAM,EAAA,MAGY,KAAAC,SAAW,OAAA1D,EAAA,GAAc,CAACpI,KAAK2K,WAAWtC,KACtD,OAAA4C,EAAA,GAAa,KACb,OAAAE,EAAA,GAAW5C,IACPvI,KAAK8K,SAASR,MAAK,GACnB,MAAOU,GAAWzC,EACZwD,EAAOf,EAAQe,KAAO,IAAIC,KAAKhB,EAAQe,MAAQ,IAAIC,KACzD,OAAOhM,KAAKwK,UAAUyB,MAAM,CACxBC,aAAcC,KAAKC,MAAM,OAAAC,EAAA,GAAWN,GAAMO,UAAY,KACtDC,WAAYJ,KAAKC,MAAM,OAAAI,EAAA,GAAST,GAAMO,UAAY,KAClDnK,KAAM,OACNiJ,OAAQJ,EAAQI,OAAS,IAAIjC,KAAK,SAG1C,OAAAb,EAAA,GAAIiD,IACAA,EAAKE,KAAK,CAACC,EAAGC,IAAMD,EAAEK,KAAOJ,EAAEI,MAC/B/L,KAAK4K,eAAiBW,EACtBvL,KAAK8K,SAASR,MAAK,GACZiB,IAEX,OAAAkB,EAAA,MAWG,WAAWzB,GACdhL,KAAK2K,SAASL,KAAK,OAAD,wBAAMtK,KAAK2K,SAAS9B,YAAemC,IAGlD,aAAa0B,EAAgB,KAChC1M,KAAK2M,SACD,OACA,IAAM3M,KAAK4M,WAAW5M,KAAK2K,SAAS9B,YACpC6D,GAID,cACH1M,KAAK6M,cAAc,QAGV,YAAYpE,G,mDAET,kBADUzI,KAAKwK,UAAUsC,QAAQrE,GAAM,GAAMyB,MAAM6C,GAAK,WAE9D,YAAY,kCACZ,YAAc,cAActE,EAAKuE,iBAG9B,YAAYvE,G,mDAET,kBADUzI,KAAKwK,UAAUyC,QAAQxE,EAAKzE,IAAIkG,MAAM6C,GAAK,WAE3D,YAAY,mCACZ,YAAc,6BAA6BtE,EAAKuE,iBAG7C,WAAWvE,G,mDAER,kBADUzI,KAAKwK,UAAU0C,OAAOzE,EAAKzE,IAAIkG,MAAM6C,GAAK,WAE1D,YAAY,mCACZ,YAAc,6BAA6BtE,EAAKuE,iBAG7C,iB,mDACT,MAAMzB,EAAOvL,KAAK4K,gBAAkB,GACpC,GAAIW,EAAKF,OAAS,EAAG,CACjB,MAAM8B,EAAMnN,KAAK0K,QAAQ0C,KAAK,IAAuB,CACjDxE,KAAM,CACFyE,MAAO,2BACPC,QAAS,sEACTC,KAAM,CACFpL,KAAM,OACNqL,MAAO,iBACPF,QAAS,aAIrB,OAAO,IAAIG,QAAQ,CAAOC,EAASR,IAAW,YAAD,gCACzC,IAAIS,GAAU,EACdR,EAAIS,kBAAkB3I,MAAMoD,KAAK,OAAA7C,EAAA,GAAMuH,GAAkB,SAAbA,EAAEc,SAAoBjJ,UAAU,IAAW,YAAD,gCAClFuI,EAAIS,kBAAkBrE,QAAU,2CAChCoE,GAAU,QACJF,QAAQK,IAAIvC,EAAKjD,IAAIG,GAAQzI,KAAKwK,UAAU0C,OAAOzE,EAAKzE,MAC9D0J,IACA,YAAc,6DACdP,EAAI9C,kBAEF8C,EAAIY,cAAc9D,YACnB0D,GACDT,QAIR,YAAW,+CAIN,c,mDACT,MAAMC,EAAMnN,KAAK0K,QAAQ0C,KAAK,GAAwB,CAClDxE,KAAM,CACFb,MAAO/H,KAAKyK,KAAKuD,YAAYhO,KAAK2K,SAAS9B,WAAWuC,QAAUpL,KAAKyK,KAAKwD,WAAW,GACrFnG,SAAU9H,KAAKyK,KAAK3C,SACpBI,MAAOlI,KAAK6K,gBAGdsC,EAAIY,cAAc9D,YACxBjK,KAAK6K,OAASsC,EAAIS,kBAAkB5F,OAAOa,e,6CA3ItC0B,GAAiB,iC,yBAAjBA,EAAiB,QAAjBA,EAAiB,qBAFd,S,GAET,G,kFCbS,uBAII,QACJ,Q,yBAHI,mBAEA,8C,yEA0Cb,a,MAAM2D,UAA6B,IA0BtC,YACYrD,EACAJ,EACA0D,EACAC,GAERtK,QALQ,KAAA+G,SACA,KAAAJ,OACA,KAAA0D,SACA,KAAAC,UA5BL,KAAAhD,MAAkB,GAET,KAAAiD,OAASrO,KAAKyK,KAAK6D,cAEnB,KAAAtD,QAAUhL,KAAK6K,OAAOG,QAEtB,KAAAuD,cAAgB,KAC5BvO,KAAK6K,OAAO+B,WAAW,CAAE4B,UAAWxO,KAAKwO,WACzCxO,KAAKwO,UAAYxO,KAAKwO,UAGV,KAAAC,QAAW1C,GAAS/L,KAAK6K,OAAO+B,WAAW,CAAEb,SAE7C,KAAA2C,YAAetD,IAC3BpL,KAAKoO,QAAQO,SAAS,GAAI,CACtBC,WAAY5O,KAAKmO,OACjBU,YAAa,CAAEC,SAAU1D,EAAMjC,KAAK,MACpC4F,oBAAqB,UAEzB/O,KAAK6K,OAAO+B,WAAW,CAAExB,WAchB,W,yDACHpL,KAAKyK,KAAKuE,YAAY3G,KAAK,OAAA7C,EAAA,GAAOuH,GAAMA,IAAI9C,YAClDjK,KAAKiP,aACD,cACAjP,KAAKmO,OAAOe,cAActK,UAAWuK,IACjC,GAAIA,EAAOC,IAAI,YAAa,CACxB,MAAMhE,EAAQ+D,EAAOE,IAAI,YAAYnG,MAAM,KAC3C,GAAIkC,EAAMC,OAAQ,CACd,MAAMtD,EAAQ/H,KAAKyK,KAAKuD,YAAY5C,GACpC,IAAKrD,EACD,OAEJ/H,KAAKyK,KAAK3C,SAAW9H,KAAKyK,KAAK6E,UAAUC,KACpCC,GAAQA,EAAIxL,KAAO+D,EAAM0H,WAE9BzP,KAAKoL,MAAQA,GAGrBpL,KAAKwO,SACDW,EAAOC,IAAI,aAA0C,SAA3BD,EAAOE,IAAI,YACzCrP,KAAK6K,OAAO+B,WAAW,CAAE4B,SAAUxO,KAAKwO,cAGhDxO,KAAKiP,aACD,SACAjP,KAAKyK,KAAK6D,cAAc1J,UAAWyJ,IAC/BrO,KAAKoL,MAAQpL,KAAKoL,MAAM5C,OAAQkH,GAC5BrB,EAAOkB,KAAMI,GAAQA,EAAI3L,KAAO0L,KAE/B1P,KAAKoL,MAAMC,QAAUgD,EAAOhD,QAC7BrL,KAAKoL,MAAMwE,KAAKvB,EAAO,GAAGrK,IAE9BhE,KAAK0O,YAAY1O,KAAKoL,c,6CAnEzB8C,GAAoB,yC,uBAApBA,EAAoB,iW,GAAA,MApDzB,2BACI,uBAEI,kCAAwC,OAAvB,EAAAQ,YAAA,KAAqB,eAGtC,8B,gBAMJ,OACJ,OACA,cAMI,gCAAS,EAAAH,mB,gBAET,Q,gBAGJ,OACA,gBAEA,yBAAc,sCAAc,EAAAE,QAAA,MAAiB,Q,uBA1BrC,mCAKsB,2CAU1B,uCAAyB,wEAKzB,mG,2lBA8BL,G,8BCSA,a,MAAMoB,EAkBT,YAAoBC,GAAA,KAAAA,SAbJ,KAAAC,QAAU,IACtB/P,KAAKgQ,UAAU,UAAW,IAAW,4CACjC,OAAAhQ,KAAK8P,OAAOG,YAAYjQ,KAAKyI,UAErB,KAAAwE,QAAU,IACtBjN,KAAKgQ,UAAU,UAAW,IAAW,4CACjC,OAAAhQ,KAAK8P,OAAOI,YAAYlQ,KAAKyI,UAErB,KAAAyE,OAAS,IACrBlN,KAAKgQ,UAAU,SAAU,IAAW,4CAChC,OAAAhQ,KAAK8P,OAAOK,WAAWnQ,KAAKyI,UAKtB,UAAUhH,EAAcI,G,mDAClC7B,KAAKuJ,QAAU9H,QACTI,IAAKqI,MAAOpB,GAAM,MACxB9I,KAAKuJ,QAAU,O,6CAvBVsG,GAAoB,W,uBAApBA,EAAoB,0iBA7DzB,gBAAyB,QAAqB,OAC9C,gBAAsB,QAAe,OACrC,gBAAsB,Q,eAAmC,OACzD,gBAAsC,QAAuB,OAC7D,cACI,SACJ,OACA,iBAAsB,SAAyB,OAC/C,iBAAsB,SAAqC,OAC3D,iBACI,yBAGI,gCAAS,EAAAE,aAIZ,OACD,yBAGI,gCAAS,EAAA9C,aAIZ,OACD,yBAGI,gCAAS,EAAAC,YAIZ,OACL,Q,MAlCyB,iDACH,2CACA,iDACgB,mDACjC,oFACD,sDAEkB,qDACA,yDAMd,8CAAiC,sDAQjC,8CAAiC,oDAQjC,6CAAgC,uE,olBA+BzC,G,qDCtDK,mBACI,qBAAqC,gBAAK,OAC9C,Q,wCAEJ,QACI,iBACI,gBACI,gBAAO,eAAI,OACX,cAAK,Q,eAA+B,OACxC,OACA,gBACI,gBAAO,kBAAM,OACb,eAAK,SAAiC,OAC1C,OACA,aACI,SAEJ,OACJ,OACA,oBACI,oBAAmB,4DAAoB,mBAAO,OAClD,OACJ,O,uBAdiB,4CAIA,0CAGL,2J,0BASR,kBACI,yBACA,YAAG,QAAa,OACpB,Q,oBAFiB,4BACV,yBAaZ,a,MAAMkD,EAaT,YACqCxI,GAAA,KAAAA,QAbpB,KAAA3C,MAAQ,IAAI,IAEb,KAAAwD,KAAOzI,KAAK4H,MAAMa,KAElB,KAAAsD,KAAO/L,KAAK4H,MAAMmE,KAElB,KAAA8B,OAAS7N,KAAK4H,MAAMiG,OAEpB,KAAA9F,MAAQ/H,KAAK4H,MAAMG,MAQ5B,UACH/H,KAAKuJ,QAAU,6BACfvJ,KAAKiF,MAAMtD,KAAK,CAAEkM,OAAQ,U,6CAnBrBuC,GAA6B,KAc1B,O,uBAdHA,EAA6B,ue,GAAA,MA1ClC,iBACI,aAAI,0BAAe,OACnB,gBACA,0BAGJ,OACA,iCAmBA,0C,qBAvB8C,gCAI/B,gCAAgB,gB,uLAmChC,G,wCClDC,gBACI,eAAwB,iCAAsB,OAC9C,iBACI,gBACI,gBACI,iEACJ,OACA,4BAII,6BAAiC,cAAG,OACpC,8BAAkC,cAAE,OACxC,OACJ,OACA,iBACI,iBACI,2EAEJ,OACA,6BACI,8BAAiC,eAAG,OACpC,8BAAkC,cAAE,OACxC,OACJ,OACA,iBACI,iBACI,uEAEJ,OACA,8BAII,8BAAiC,eAAG,OACpC,8BAAkC,cAAE,OACxC,OACJ,OACJ,OACA,qBACI,qBAAmB,2DAAmB,kBAAM,OAChD,OACA,qBACI,uBAAqC,iBAAK,OAC9C,OACJ,O,uBA3CsB,iCASY,yBACA,yBASA,yBACA,yBAYA,yBACA,0B,uBAY9B,kBACI,eACI,uPAIJ,OACA,oBACI,sBAAqC,gBAAK,OAC9C,OACJ,QAkBL,a,MAAMC,EA9Eb,cA+EqB,KAAApL,MAAQ,IAAI,IAKtB,WACHjF,KAAKsQ,KAAO,IAAI,IAAU,CACtBC,UAAW,IAAI,IAAY,GAAI,CAAC,IAAWjO,WAC3CkO,OAAQ,IAAI,IAAY,GAAI,CAAC,IAAWlO,WACxCmO,QAAS,IAAI,IAAY,GAAI,CAAC,IAAWnO,aAI1C,SACHtC,KAAKsQ,KAAKI,mBACL1Q,KAAKsQ,KAAKK,MAIXC,OAAOC,KAAK7Q,KAAKsQ,KAAKvQ,OAAOwP,KACxBuB,IAC4B,IAAzB9Q,KAAKsQ,KAAKvQ,MAAM+Q,IACS,SAAzB9Q,KAAKsQ,KAAKvQ,MAAM+Q,IAGxB9Q,KAAK+Q,SAAU,EAGnB/Q,KAAKiF,MAAMtD,KAAK,CAAEkM,OAAQ,SAZtB,YAAY,uC,6CAjBXwC,I,uBAAAA,EAA+B,wmB,GAAA,MA3EpC,wBA8CA,0C,qBA9CM,wBAAgB,gB,yVA2EvB,G,iBC9CA,a,MAAMW,UAA6B,IAoGtC,YACYlB,EACAtF,EACAyG,EACAC,EACAzG,EACAC,GAER5G,QAPQ,KAAAgM,SACA,KAAAtF,YACA,KAAAyG,SACA,KAAAC,YACA,KAAAzG,OACA,KAAAC,UAzGJ,KAAAyG,SAAW,IAAIlJ,EAAA,EAA+B,CAClD8D,MAAM,IAAIC,MAAOM,UACjBlB,MAAO,KAGH,KAAAN,SAAW,IAAI7C,EAAA,GAAyB,GAIhC,KAAAzD,QAAUxE,KAAKmR,SAASpG,eACxB,KAAAxB,QAAUvJ,KAAK8K,SAASC,eAExB,KAAA5C,UAAYnI,KAAKmR,SAAS9I,KACtC,OAAA4C,EAAA,GAAa,KACb,OAAAC,EAAA,KACA,OAAAC,EAAA,GAAWiG,IACP,MAAM,MAAEhG,GAAUgG,EAClB,GAAIhG,EAAMC,OAAQ,CACd,MAAMtD,EAAQ/H,KAAKyK,KAAKuD,YAAY5C,GACpC,OAAIrD,EACO,YAAaA,EAAM/D,GAAI,CAAEvC,KAAM,UAAW4G,KAC7C,OAAAC,EAAA,GAAKgD,GACDA,EAAE/C,QAAQD,IACLQ,GAAM,IAAI,IAAK,OAAD,wBAAMA,GAAC,CAAE4G,KAAM3H,QAKvC,YAAkBqD,EAAM,GAAI,CAAE3J,KAAM,UAAW4G,KAClD,OAAAC,EAAA,GAAK+I,GACDA,EAAEC,OACE,CAACC,EAAGjG,IACAiG,EAAEC,OACElG,EAAEmG,SAASvJ,MAAMK,mBAAmBiD,MAC9BF,EAAEmG,SAASvJ,MAAMK,QAAQD,IACpBQ,GACG,IAAI,IAAK,OAAD,wBACDA,GAAC,CACJ4G,KAAMpE,EAAEoE,SAGpB,IAEd,MAKhB,OAAOjC,QAAQC,QAAQ,MAE3B,OAAAjB,EAAA,MAGY,KAAAiF,kBAAoB,OAAAtJ,EAAA,GAAc,CAC9CpI,KAAKmR,SACLnR,KAAKmI,YACNE,KACC,OAAA4C,EAAA,GAAa,KACb,OAAAC,EAAA,KACA,OAAAC,EAAA,GAAiB5C,GAAY,YAAD,gCACxBvI,KAAK8K,SAASR,MAAK,GACnB,MAAO9F,EAAS0D,GAASK,EACnBwD,EAAO,OAAAM,EAAA,GACT7H,EAAQuH,KAAO,IAAIC,KAAKxH,EAAQuH,MAAQ,IAAIC,MAEhD,MAAO,CACH9D,QACMlI,KAAKwK,UACNyB,MAAM,CACHC,aAAcC,KAAKC,MAAML,EAAKO,UAAY,KAC1CC,WAAYJ,KAAKC,MAAM,OAAAI,EAAA,GAAST,GAAMO,UAAY,KAClDnK,KAAM,OACNiJ,OAAQ5G,EAAQ4G,OAAS,IAAI,KAEhClB,MAAO6C,GAAM,SAG1B,OAAAzE,EAAA,GAAKC,IACD,MAAOL,EAAO4D,GAAYvD,EACpBoJ,EAAkB7F,EAAStD,OAC5BoJ,GAAuB,aAAfA,EAAIC,QAEXC,EAAc9R,KAAKiR,OAAOc,QAAQC,OAClCC,EAAiB/J,EAAMM,OACxBM,GACGA,EAAEoJ,YACApJ,EAAEqJ,OACAL,EAAYnJ,UAAUG,EAAEqJ,OAAS,IAAIzJ,iBAIjD,OAFA1I,KAAKoS,oBAAoB7J,GACzBvI,KAAK8K,SAASR,MAAK,GACZ2H,EAAezJ,OACjBC,IACIkJ,EAAgBpC,KAAMqC,GAAQA,EAAIS,WAAa5J,EAAKzE,OAGjE,OAAAyI,EAAA,MAYAzM,KAAKiP,aACD,QACAjP,KAAK8P,OAAO/H,MAAMnD,UAAW+K,GACzBA,EAAM3P,KAAKsS,WAAW,CAAElH,MAAO,CAACuE,EAAI3L,MAAS,KAGrDhE,KAAKiP,aACD,eACA,OAAA7G,EAAA,GAAc,CAACpI,KAAK0R,kBAAmB1R,KAAKmI,YACvCE,KAAK,OAAA4C,EAAA,GAAa,MAClBrG,UAAW2D,GAAYvI,KAAKuS,uBAAuBhK,KAIzD,aAAamE,EAAgB,KAChC1M,KAAK2M,SACD,OACA,IAAM3M,KAAKmR,SAAS7G,KAAK,OAAD,UAAMtK,KAAKmR,SAAStI,aAC5C6D,GAID,cACH1M,KAAK6M,cAAc,QAGhB,WAAW2F,GACdxS,KAAKmR,SAAS7G,KAAK,OAAD,wBAAMtK,KAAKmR,SAAStI,YAAe2J,IAGlD,QAAQC,GACXzS,KAAK0S,MAAQD,EAGJ,QAAQzO,G,mDACjB,MAKM4N,SALiB5R,KAAKwK,UAAUyB,MAAM,CACxCC,aAAcC,KAAKC,MAAM,OAAAC,EAAA,GAAW,IAAIL,MAAQM,UAAY,KAC5DC,WAAYJ,KAAKC,MAAM,OAAAI,EAAA,GAAS,IAAIR,MAAQM,UAAY,KACxDnK,KAAM,UAEWoN,KAAK5D,GAAKA,EAAE0G,WAAarO,GAC9C,QAAK4N,UACc5R,KAAKwK,UAAUsC,QAAQ8E,IACnC,MAGE,SAASnJ,EAAYoF,EAAiB,I,yDAC/C,IAAK7N,KAAK0S,MACN,OAAO,YAAY,iDAEvB,MAAM3K,EAAQ/H,KAAKyK,KAAKuD,YACpBvF,EAAKiH,gBAAgBlE,MAAQ/C,EAAKiH,KAAO,CAAU,QAAV,EAACjH,EAAKiH,YAAI,eAAE1L,KAEzD,IAAImJ,EAAyBnN,KAAK0K,QAAQ0C,KACtC,IAEAO,QAAgBF,QAAQkF,KAAK,CAC7BxF,EAAIS,kBAAkB3I,MACjBoD,KAAK,OAAA7C,EAAA,GAAOuH,GAAgC,SAAbA,EAAEc,SACjC5D,YACLkD,EACKY,cACA1F,KAAK,OAAAC,EAAA,GAAKyE,GAAM,OAChB9C,cAET,IAAK0D,EAAS,OACdR,EAAI9C,QACJ,MAAM7F,EAAUxE,KAAKmR,SAAStI,WAkB9B,GAjBAsE,EAAMnN,KAAK0K,QAAQ0C,KAAK,GAA+B,CACnDxE,KAAM,CACFH,OACAsD,KAAMvH,EAAQuH,OAAQ,IAAIC,MAAOM,UACjCuB,SACA9F,WAGR4F,QAAgBF,QAAQkF,KAAK,CACzBxF,EAAIS,kBAAkB3I,MACjBoD,KAAK,OAAA7C,EAAA,GAAOuH,GAAgC,SAAbA,EAAEc,SACjC5D,YACLkD,EACKY,cACA1F,KAAK,OAAAC,EAAA,GAAKyE,GAAM,OAChB9C,eAEJ0D,EAAS,OACdR,EAAIS,kBAAkBrE,QAAU,yCAChC,MAAMrB,QAAclI,KAAKwK,UAAUyB,MAAM,CACrC9J,KAAM,OACN+J,aAAcC,KAAKC,MAAM,OAAAC,EAAA,GAAW7H,EAAQuH,MAAQ,IAAIC,MAAQM,UAAY,KAC5EC,WAAYJ,KAAKC,MAAM,OAAAI,EAAA,GAAShI,EAAQuH,MAAQ,IAAIC,MAAQM,UAAY,OAE5E,KAAKpE,aAAK,EAALA,EAAOmD,QAAQ,OAAO,YAAY,mEACvC8B,EAAIS,kBAAkBrE,QAAU,wBAC1BvJ,KAAK4S,gBACPnK,EACAjE,EAAQuH,OAAQ,IAAIC,MAAOM,UAC3BuB,GAEJ,YAAc,4BACdV,EAAI9C,WAGM,gBAAgB5B,EAAYsD,EAAc8B,G,+DACpD,MAAMgF,EAAW,GAAY,QAAT,EAAApK,EAAKiH,YAAI,eAAEjO,QAAQgH,EAAKzE,KACtCQ,EAAUxE,KAAKmR,SAAStI,WACxBd,EAAQ/H,KAAKyK,KAAKuD,YACpBvF,EAAKiH,gBAAgBlE,MAAQ/C,EAAKiH,KAAO,CAAU,QAAV,EAACjH,EAAKiH,YAAI,eAAE1L,KAEnDoH,GAAiB,QAAT,EAAA3C,EAAKiH,YAAI,eAAE1L,IACnB,CAAU,QAAV,EAACyE,EAAKiH,YAAI,eAAE1L,IAAI+D,aAAK,EAALA,EAAO0H,YAAajL,EAAQ4G,MAAM,IAClD,EAACrD,aAAK,EAALA,EAAO0H,YAAajL,EAAQ4G,MAAM,IACnC0H,EAAe,CACjBC,cAAe5G,KAAKC,MAChB,OAAAC,EAAA,GAAW7H,EAAQuH,MAAMO,UAAY,KAEzC0G,QAAShT,KAAK0S,MAAM1O,GACpBgJ,UAAWhN,KAAK0S,MAAMjR,KACtBwR,WAAYjT,KAAK0S,MAAMQ,MACvBC,YAAahH,KAAKC,MAAM,OAAAI,EAAA,GAAShI,EAAQuH,MAAMO,UAAY,KAC3D+F,SAAU5J,EAAKzE,GACfqJ,MAAOQ,EACP7D,YAAa6I,EACbzH,QACAgI,aAAc,OACdC,eAAgB,CACZlB,MAAO1J,EAAK0J,QAGpB,OAAOnS,KAAKwK,UAAU8I,KAAKR,MAGvB,uBAAuBvK,GAC3B,MAAOgL,EAAWrL,GAASK,EACrBiL,EAAY,GACZC,EAAU,GACV3B,EAAc9R,KAAKiR,OAAOc,QAAQC,OAClC0B,EAAU1T,KAAKkR,UAAU7B,IAAI,uBAAyB,GAC5D,IAAK,MAAM5G,KAAQP,EAAO,CACtB,MAAM2J,GACDpJ,EAAKyJ,UACLzJ,EAAK0J,OACFL,EAAYnJ,UAAUF,EAAK0J,OAAS,IAAIzJ,eACtC,eACA6K,EAAUhE,KAAM8B,GAAMA,EAAErN,KAAOyE,EAAKzE,IACpC,OACA,OACVwP,EAAU,IAAI/K,EAAKzE,IAAQ,CACvB2P,KACID,EAAQ,QAAQ7B,IAChB6B,EAAQ,GAAG7B,IACX,KAAgB,GAAGA,GACvB+B,QAAS,IAEE,SAAX/B,IACA4B,EAAQ7D,KAAK,CACT5L,GAAIyE,EAAKzE,GACT6P,OAAQ,QACRnE,MAAM,EACNoE,SAAU,IAAM9T,KAAK+T,SAAStL,KAElCgL,EAAQ7D,KAAK,CACT5L,GAAIyE,EAAKzE,GACT6P,OAAQ,WACRnE,MAAM,EACNoE,SAAU,IAAM9T,KAAK+T,SAAStL,MAI1CuL,QAAQC,IAAI,UAAWT,EAAWD,EAAWrL,GAC7ClI,KAAK8P,OAAOoE,UAAU,QAASV,GAC/BxT,KAAK8P,OAAOqE,WAAW,QAASV,GAG5B,oBAAoBlL,GACxB,MAAOL,EAAO4D,GAAYvD,EACpBgD,EAAO,GACb,IAAK,MAAM9C,KAAQP,EAAO,CACtB,MAAMkM,EAAmBtI,EAASyD,KAC7BqC,GAAQA,EAAIS,WAAa5J,EAAKzE,IAEnCuH,EAAKqE,KAAK,CACNiD,SAAUpK,EAAKzE,GACfsJ,QAAS,KACT+G,OAAO,EACPzL,KAAM,CACF0L,OAAQ7L,EAAKhH,KACb8S,KAAMH,aAAO,EAAPA,EAASpH,UACfwH,MAAOJ,aAAO,EAAPA,EAASrI,KAChB0I,KAAKL,aAAO,EAAPA,EAASrI,MAA2B,IAApBqI,aAAO,EAAPA,EAASM,UAAgB,IAC9C7C,OAAQuC,EAAU,OAAS,UAIvCpU,KAAK8P,OAAO6E,YAAY,QAASpJ,I,6CA/S5ByF,GAAoB,iE,yBAApBA,EAAoB,QAApBA,EAAoB,qBAFjB,S,GAET,G,kECNK,QACI,gBAII,wBACJ,OACJ,Q,MAFqB,6BAsB1B,a,MAAM4D,UAA6B,IAgBtC,YACY9E,EACA+E,EACAC,GAERhR,QAJQ,KAAAgM,SACA,KAAA+E,QACA,KAAAC,QAjBI,KAAAC,IAAM/U,KAAK8P,OAAOkF,QAElB,KAAA7N,OAASnH,KAAK8P,OAAOmF,WAErB,KAAAC,UAAYlV,KAAK8P,OAAOqF,cAExB,KAAA1B,QAAUzT,KAAK8P,OAAOsF,YAEtB,KAAA7L,QAAUvJ,KAAK8U,MAAMvL,QAErB,KAAA/E,QAAUxE,KAAK8U,MAAMtQ,QAErB,KAAA6Q,QAAWC,GAAMtV,KAAK8U,MAAMO,QAAQC,GAU7C,WACHtV,KAAKiP,aACD,OACAjP,KAAK6U,MAAM7J,QAAQpG,UAAWwM,GAC1BpR,KAAK8U,MAAMxC,WAAW,CAAEvG,KAAMqF,EAAKrF,KAAMX,MAAOgG,EAAKhG,W,6CA5BxDwJ,GAAoB,+B,uBAApBA,EAAoB,uiBA/CzB,gBACI,kB,gFAOA,kCAGA,gBACI,gCAAsC,yCAAiB,EAAAS,QAAA,MAAoD,OAC/G,OACA,iBAII,qDACJ,OACA,iC,iBAQJ,Q,MA1BQ,oCAAmB,kCAAnB,CAAmB,uCAAnB,CAAmB,6BAAnB,CAAmB,gCAUE,6BAQV,6C,yZA2BpB,G,sBCbiB,0B,KAEI,Y,uCALR,QAGI,iC,gBAIJ,Q,qBAHyB,8C,0BAtCrC,QACI,gBAII,gBACA,iBACI,Q,gBACJ,OACA,iBACI,Q,gCAKJ,OACA,qBACI,sBAAqC,qBAAS,OAClD,OACJ,OACA,kBACI,kBAGI,kBAAsB,kBAAM,OAC5B,kBAAsB,eAAG,OACzB,kBAAsB,gBAAI,OAC1B,kBAA6B,gBAAI,OACjC,kBAAsB,kBAAM,OAC5B,kBAAsB,oBAAQ,OAC9B,kBAAsB,sBAAU,OAChC,kBACJ,OACA,kBACI,iC,iBAQJ,OACJ,OACJ,Q,iEArCY,oFAGA,uIAMoB,oCAmBf,qEAAkC,e,uBAW/C,iBACI,eACI,gEACJ,OACJ,Q,uBAiBA,iBAA+B,wBAA+B,QAwBnE,a,MAAME,EAUT,YAAoBzF,GAAA,KAAAA,SATJ,KAAA9E,QAAUhL,KAAK8P,OAAO9E,QAEtB,KAAA9C,MAAQlI,KAAK8P,OAAO5H,MAEpB,KAAA4D,SAAW9L,KAAK8P,OAAOhE,SAEvB,KAAA0J,UAAY,IAAMxV,KAAK8P,OAAO2F,iBAC9B,KAAAC,YAAc,IAAM1V,KAAK8P,OAAO4F,e,6CARvCH,GAAqB,W,uBAArBA,EAAqB,mxB,GAAA,MA3F1B,kC,gBA6CA,yCAOA,0BACI,mBAAsB,gCAAS,EAAAG,iBAC3B,gBACI,qBAAqC,eAAI,OACzC,kBAAmB,sBAAU,OACjC,OACJ,OACA,oBAAsB,gCAAS,EAAAF,eAC3B,iBACI,sBAAqC,sBAAU,OAC/C,kBAAmB,sBAAU,OACjC,OACJ,OACJ,OACA,2C,iCAlEe,0DAAoC,gB,wfA2FpD,G,uCCxFK,6BCSZ,MAAMG,GAAkB,CAAC,CAAEC,KAAM,GAAIC,UDI9B,M,MAAMC,EAGT,YAAoBhG,GAAA,KAAAA,SAFJ,KAAAvG,QAAUvJ,KAAK8P,OAAOvG,QAI/B,WACHvJ,KAAK8P,OAAOiG,eAGT,cACH/V,KAAK8P,OAAOkG,e,6CAVPF,GAAc,W,uBAAdA,EAAc,2QAjBnB,kBACA,iBACI,yBACA,0BACA,oC,gBACJ,Q,MADsC,2C,4LAavC,KCmBA,a,MAAMG,G,8BAAAA,I,oDAAAA,IAAW,SAVX,CACL,IACA,IACA,IACA,IACA,KACA,EACA,IAAaC,SAASP,Q,GAGvB","file":"desks-desks-module.bb308f0f953a2ccbc7f9.js","sourcesContent":["import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return ɵMatRadioGroup_BaseFactory(t || MatRadioGroup); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\nconst ɵMatRadioGroup_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", -1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); }, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { updateMetadata } from '@placeos/ts-client';\nimport {\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n} from '@user-interfaces/common';\nimport { Building, BuildingLevel, Desk } from '@user-interfaces/organisation';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface DeskListModalData {\n    building: Building;\n    level: BuildingLevel;\n    desks: Desk[];\n}\n\n@Component({\n    selector: 'desk-list-modal',\n    template: `\n        <header class=\"flex items-center\">\n            <h2 style=\"margin-right: 1rem;\">\n                <strong>List of Desks</strong> -\n                {{ building.display_name || building.name }},\n                {{ level.display_name || level.name }}\n            </h2>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon className=\"material-icons\">close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"flex flex-col\">\n                <div\n                    class=\"flex items-center p-2 space-x-2 w-full border-b border-gray-300\"\n                >\n                    <searchbar [model]=\"filter$ | async\" (modelChange)=\"filter$.next($event)\"></searchbar>\n                    <div class=\"flex-1 w-0\"></div>\n                    <button mat-button class=\"relative\">\n                        Upload List\n                        <input\n                            type=\"file\"\n                            class=\"absolute inset-0 opacity-0\"\n                            (change)=\"upload($event)\"\n                        />\n                    </button>\n                    <button mat-button (click)=\"download()\">\n                        Download List\n                    </button>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full\">\n                    <div\n                        class=\"flex items-center p-2 border-b border-gray-300 font-medium\"\n                    >\n                        <div class=\"w-40 p-1 flex-1\" flex>ID</div>\n                        <div class=\"w-32 p-1\">Name</div>\n                        <div class=\"w-32 p-1\">Safe</div>\n                        <div class=\"w-32 p-1\">LoS</div>\n                    </div>\n                    <div table class=\"flex-1 overflow-auto\">\n                        <div\n                            class=\"flex item-center p-2 border-b border-gray-200\"\n                            *ngFor=\"let desk of desk_list | async\"\n                        >\n                            <div class=\"w-40 p-1 flex-1\" flex>\n                                {{ desk.id }}\n                            </div>\n                            <div class=\"w-32 p-1\">{{ desk.name }}</div>\n                            <div class=\"w-32 p-1\">\n                                <mat-checkbox\n                                    [(ngModel)]=\"desk.bookable\"\n                                ></mat-checkbox>\n                            </div>\n                            <div class=\"w-32\">\n                                <input\n                                    class=\"border-none bg-none w-full p-1\"\n                                    [(ngModel)]=\"desk.group\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n            <footer\n                class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-300\"\n            >\n                <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 mx-auto flex flex-col items-center justify-center\"\n            >\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                max-height: 65vh;\n            }\n\n            [table] {\n                height: 1px;\n                max-height: 50vh;\n            }\n        `,\n    ],\n})\nexport class DeskListModalComponent {\n    public readonly building = this._data.building;\n    public readonly level = this._data.level;\n    public readonly desks$ = new BehaviorSubject(this._data.desks);\n    public readonly filter$ = new BehaviorSubject('');\n\n    public loading: string;\n\n    public desk_list = combineLatest([this.filter$, this.desks$]).pipe(\n        map((details) => {\n            const [filter, desks] = details;\n            return desks.filter(\n                (desk) =>\n                    desk.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    desk.id.toLowerCase().includes(filter.toLowerCase())\n            );\n        })\n    );\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: DeskListModalData, private _dialog_ref: MatDialogRef<DeskListModalComponent>) {}\n\n    /** Download Desks list */\n    public download() {\n        const data = this.desks$.getValue().map((i) => i.format());\n        const csv = jsonToCsv(data);\n        const name = this.level.display_name.split(' ').join('-').toLowerCase();\n        downloadFile(`desks_${name}.csv`, csv);\n    }\n\n    /** Upload Desks list from csv */\n    public upload(event) {\n        if (event.target) {\n            const file = event.target.files[0];\n            if (file) {\n                this.loading = 'Uploading...';\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.onload = () => {\n                    this.processCSV(reader.result as string);\n                    this.loading = '';\n                };\n                reader.onerror = (evt) => {\n                    this.loading = '';\n                    notifyError('Error reading file.');\n                };\n            }\n        }\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        await updateMetadata(this.level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: this.desks$.getValue(),\n        }).toPromise().catch(e => {\n            this.loading = '';\n            notifyError(`Error saving desk data. Error: ${e.message || e}`);\n            throw e;\n        });\n        notifySuccess(\n            'Successfully updated desks'\n        );\n        this.loading = '';\n        this._dialog_ref.close();\n    }\n\n    /** Process csv */\n    private processCSV(csv: string) {\n        const data = csvToJson(csv);\n        this.desks$.next(data.map((i) => new Desk(i)));\n        notifySuccess(\n            'Upload was sucessful. Click Save Button to save the changes'\n        );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, timer } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    first,\n    map,\n    share,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay, startOfDay } from 'date-fns';\n\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { BaseClass, notifyError, notifyInfo, notifySuccess } from '@user-interfaces/common';\nimport { showMetadata } from '@placeos/ts-client';\nimport { Desk, OrganisationService } from '@user-interfaces/organisation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\nimport { DeskListModalComponent } from './desk-list-modal.component';\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends BaseClass {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _desk_bookings: Booking[] = [];\n    private _desks: Desk[] = []\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = combineLatest([this._filters]).pipe(\n        debounceTime(500),\n        distinctUntilChanged(),\n        switchMap((details) => {\n            const [filters] = details;\n            if (!filters.zones?.length) return [];\n            return showMetadata(filters.zones[0] || this._org.building.id, {\n                name: 'desks',\n            }).pipe(map((m) => m.details));\n        }),\n        map(list => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name.localeCompare(b.name));\n            this._desks = list.map(i => new Desk(i));\n            return list;\n        }),\n        share()\n    );\n\n    public readonly bookings = combineLatest([this._filters]).pipe(\n        debounceTime(500),\n        switchMap((details) => {\n            this._loading.next(true);\n            const [filters] = details;\n            const date = filters.date ? new Date(filters.date) : new Date();\n            return this._bookings.query({\n                period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                type: 'desk',\n                zones: (filters.zones || []).join(','),\n            });\n        }),\n        map(list => {\n            list.sort((a, b) => a.date - b.date);\n            this._desk_bookings = list;\n            this._loading.next(false);\n            return list;\n        }),\n        shareReplay()\n    );\n\n    constructor(\n        private _bookings: BookingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkinDesk(desk: Booking) {\n        const success = await this._bookings.checkIn(desk, true).catch(_ => 'failed');\n        success === 'failed'\n            ? notifyError('Error checking in desk booking')\n            : notifySuccess(`Checked in ${desk.user_name}.`)\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await this._bookings.approve(desk.id).catch(_ => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(`Approved desk booking for ${desk.user_name}.`)\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await this._bookings.reject(desk.id).catch(_ => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(`Rejected desk booking for ${desk.user_name}.`)\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length > 0) {\n            const ref = this._dialog.open(ConfirmModalComponent, {\n                data: {\n                    title: 'Cancel all desk bookings',\n                    content: 'Are you sure you want to cancel all bookings for the selected date?',\n                    icon: {\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'delete',\n                    },\n                },\n            });\n            return new Promise(async (resolve, reject) => {\n                let success = false;\n                ref.componentInstance.event.pipe(first(_ => _.reason === 'done')).subscribe(async() => {\n                    ref.componentInstance.loading = 'Rejecting all desks for selected date...';\n                    success = true;\n                    await Promise.all(list.map(desk => this._bookings.reject(desk.id)));\n                    resolve();\n                    notifySuccess('Successfull rejected all desk bookings for selected date.');\n                    ref.close();\n                });\n                await ref.afterClosed().toPromise();\n                if (!success) {\n                    reject();\n                }\n            });\n        } else {\n            notifyInfo('No desks to reject for the selected date');\n        }\n    }\n\n    public async updateDesks() {\n        const ref = this._dialog.open(DeskListModalComponent, {\n            data: {\n                level: this._org.levelWithID(this._filters.getValue().zones) || this._org.level_list[0],\n                building: this._org.building,\n                desks: this._desks\n            },\n        });\n        await ref.afterClosed().toPromise();\n        this._desks = ref.componentInstance.desks$.getValue();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                [ngModel]=\"zones[0]\"\n                (ngModelChange)=\"updateZones([$event]); zones = [$event]\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <a\n            button\n            mat-button\n            [routerLink]=\"['/desks']\"\n            [queryParams]=\"{ show_map: !(filters | async)?.show_map }\"\n            queryParamsHandling=\"merge\"\n            (click)=\"toggleMapShow()\"\n        >\n            {{\n                (filters | async)?.show_map ? 'Show List View' : 'Show Map View'\n            }}\n        </a>\n        <div class=\"flex-1 w-2\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends BaseClass implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n    /** Set filtered date */\n    public readonly toggleMapShow = () => {\n        this._desks.setFilters({ show_map: !this.show_map });\n        this.show_map = !this.show_map;\n    };\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge'\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    public show_map: boolean;\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n                this.show_map =\n                    params.has('show_map') && params.get('show_map') === 'true';\n                this._desks.setFilters({ show_map: this.show_map });\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Booking } from '@user-interfaces/bookings';\nimport { DesksStateService } from './desks-state.service';\n\nexport interface DeskBooking extends Booking {\n    los: string;\n}\n\n@Component({\n    selector: 'desk-details',\n    template: `\n        <div class=\"w-32 p-2 bg\">{{ desk?.user_name }}</div>\n        <div class=\"w-32 p-2\">{{ desk?.los }}</div>\n        <div class=\"w-24 p-2\">{{ desk.date | date: 'shortTime' }}</div>\n        <div flex class=\"p-2 flex-1 truncate\">{{ desk?.description }}</div>\n        <div [class]=\"'w-24 p-2 capitalize text-red-600 ' + desk?.status\">\n            {{ desk?.status }}\n        </div>\n        <div class=\"w-32 p-2\">{{ desk?.approver_name }}</div>\n        <div class=\"w-32 p-2\">{{ desk?.checked_in ? 'Yes' : 'No' }}</div>\n        <div class=\"w-32 p-2 flex items-center\">\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"checkin()\"\n                [loading]=\"loading === 'checkin'\"\n                [state]=\"desk?.checked_in ? 'success' : ''\"\n                content=\"how_to_reg\"\n            ></action-icon>\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"approve()\"\n                [loading]=\"loading === 'approve'\"\n                [state]=\"desk?.approved ? 'success' : ''\"\n                content=\"event_available\"\n            ></action-icon>\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"reject()\"\n                [loading]=\"loading === 'reject'\"\n                [state]=\"desk?.status === 'declined' ? 'success' : ''\"\n                content=\"event_busy\"\n            ></action-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                display: flex;\n                align-items: center;\n                padding: 0 0.5rem;\n                background-color: #f8f8f8;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host:hover {\n                background-color: #f0f0f0;\n            }\n\n            .tentative {\n                color: #ffa000;\n            }\n\n            .approved {\n                color: #388e3c;\n            }\n        `,\n    ],\n})\nexport class DeskDetailsComponent {\n    @Input() public desk: DeskBooking;\n\n    public loading: string;\n\n    public readonly checkin = () =>\n        this.runMethod('checkin', async () =>\n            this._state.checkinDesk(this.desk)\n        );\n    public readonly approve = () =>\n        this.runMethod('approve', async () =>\n            this._state.approveDesk(this.desk)\n        );\n    public readonly reject = () =>\n        this.runMethod('reject', async () =>\n            this._state.rejectDesk(this.desk)\n        );\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@user-interfaces/common';\nimport { BuildingLevel, Desk } from '@user-interfaces/organisation';\n\nexport interface DeskFlowConfirmModalData {\n    desk: Desk;\n    date: number;\n    reason: string;\n    level: BuildingLevel;\n}\n\n@Component({\n    selector: 'desk-flow-confirm-modal-component',\n    template: `\n        <header>\n            <h2>Confirm Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon className=\"material-icons\">close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"p-4\">\n                <div class=\"mb-4\">\n                    <label>Date</label>\n                    <div>{{ date | date: 'mediumDate' }}</div>\n                </div>\n                <div class=\"mb-4\">\n                    <label>Reason</label>\n                    <div>{{ reason || '~No set reason~' }}</div>\n                </div>\n                <p>\n                    Your desk will be {{ desk?.name }} on\n                    {{ level?.display_name || level?.name }}\n                </p>\n            </main>\n            <footer class=\"flex items-center justify-center p-2\">\n                <button mat-button (click)=\"confirm()\">Confirm</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main class=\"flex flex-col p-12 items-center justify-center\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n        `,\n    ],\n})\nexport class DeskFlowConfirmModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly desk = this._data.desk;\n\n    public readonly date = this._data.date;\n\n    public readonly reason = this._data.reason;\n\n    public readonly level = this._data.level;\n\n    public loading: string;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskFlowConfirmModalData\n    ) {}\n\n    public confirm() {\n        this.loading = 'Requesting desk booking...';\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@user-interfaces/common';\n\n@Component({\n    selector: 'desk-flow-question',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14 days?\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <app-icon className=\"material-icons\">close</app-icon>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based on\n                    your response to the compulsory Covid-19 questions. Please feel\n                    free to submit a new request when circumstances change in a way\n                    that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <app-icon className=\"material-icons\">close</app-icon>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskFlowQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { showMetadata, listChildMetadata } from '@placeos/ts-client';\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport {\n    BaseClass,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n    SettingsService,\n} from '@user-interfaces/common';\nimport { DEFAULT_COLOURS, ExploreStateService } from '@user-interfaces/explore';\nimport { Desk, OrganisationService } from '@user-interfaces/organisation';\nimport { StaffService, User } from '@user-interfaces/users';\nimport { endOfDay, startOfDay } from 'date-fns';\nimport { ExploreDeskInfoComponent } from 'libs/explore/src/lib/explore-desk-info.component';\nimport { BehaviorSubject, combineLatest, timer } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { DeskFlowConfirmModalComponent } from './desk-flow-confirm-modal.component';\nimport { DeskFlowQuestionsModalComponent } from './desk-flow-questions-modal.component';\n\nexport interface DeskFlowState {\n    date?: number;\n    zones?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DeskFlowStateService extends BaseClass {\n    private _options = new BehaviorSubject<DeskFlowState>({\n        date: new Date().valueOf(),\n        zones: [],\n    });\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _host: User;\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    public readonly desk_list = this._options.pipe(\n        debounceTime(500),\n        distinctUntilChanged(),\n        switchMap((opts) => {\n            const { zones } = opts;\n            if (zones.length) {\n                const level = this._org.levelWithID(zones);\n                if (level) {\n                    return showMetadata(level.id, { name: 'desks' }).pipe(\n                        map((m) =>\n                            m.details.map(\n                                (i) => new Desk({ ...i, zone: level })\n                            )\n                        )\n                    );\n                }\n                return listChildMetadata(zones[0], { name: 'desks' }).pipe(\n                    map((d) =>\n                        d.reduce(\n                            (l, m) =>\n                                l.concat(\n                                    m.metadata.desks.details instanceof Array\n                                        ? m.metadata.desks.details.map(\n                                              (i) =>\n                                                  new Desk({\n                                                      ...i,\n                                                      zone: m.zone,\n                                                  })\n                                          )\n                                        : []\n                                ),\n                            []\n                        )\n                    )\n                );\n            }\n            return Promise.resolve([]);\n        }),\n        shareReplay()\n    );\n\n    public readonly desk_availability = combineLatest([\n        this._options,\n        this.desk_list,\n    ]).pipe(\n        debounceTime(500),\n        distinctUntilChanged(),\n        switchMap(async (details) => {\n            this._loading.next(true);\n            const [options, desks] = details;\n            const date = startOfDay(\n                options.date ? new Date(options.date) : new Date()\n            );\n            return [\n                desks,\n                await this._bookings\n                    .query({\n                        period_start: Math.floor(date.valueOf() / 1000),\n                        period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                        type: 'desk',\n                        zones: (options.zones || [])[0],\n                    })\n                    .catch((_) => []),\n            ];\n        }),\n        map((details) => {\n            const [desks, bookings] = details;\n            const active_bookings = bookings.filter(\n                (bkn) => bkn.status !== 'declined'\n            );\n            const user_groups = this._staff.current.groups;\n            const bookable_desks = desks.filter(\n                (i) =>\n                    i.bookable &&\n                    (!i.group ||\n                        user_groups.includes((i.group || '').toLowerCase()))\n            );\n            this.processDeskBookings(details);\n            this._loading.next(false);\n            return bookable_desks.filter(\n                (desk) =>\n                    !active_bookings.find((bkn) => bkn.asset_id === desk.id)\n            );\n        }),\n        shareReplay()\n    );\n\n    constructor(\n        private _state: ExploreStateService,\n        private _bookings: BookingsService,\n        private _staff: StaffService,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'level',\n            this._state.level.subscribe((lvl) =>\n                lvl ? this.setOptions({ zones: [lvl.id] }) : ''\n            )\n        );\n        this.subscription(\n            'availability',\n            combineLatest([this.desk_availability, this.desk_list])\n                .pipe(debounceTime(500))\n                .subscribe((details) => this.handleDeskAvailability(details))\n        );\n    }\n\n    public startPolling(delay: number = 5000) {\n        this.interval(\n            'poll',\n            () => this._options.next({ ...this._options.getValue() }),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public setOptions(state: DeskFlowState) {\n        this._options.next({ ...this._options.getValue(), ...state });\n    }\n\n    public setHost(host: User) {\n        this._host = host;\n    }\n\n    public async checkin(id: string) {\n        const bookings = await this._bookings.query({\n            period_start: Math.floor(startOfDay(new Date()).valueOf() / 1000),\n            period_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            type: 'desk'\n        });\n        const bkn = bookings.find(b => b.asset_id === id);\n        if (!bkn) return false;\n        const done = await this._bookings.checkIn(bkn);\n        return true;\n    }\n\n    public async bookDesk(desk: Desk, reason: string = '') {\n        if (!this._host) {\n            return notifyError('A host needs to be set before booking a desk.');\n        }\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskFlowQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        const options = this._options.getValue();\n        ref = this._dialog.open(DeskFlowConfirmModalComponent, {\n            data: {\n                desk,\n                date: options.date || new Date().valueOf(),\n                reason,\n                level,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.componentInstance.loading = 'Checking for existing desk bookings...';\n        const desks = await this._bookings.query({\n            type: 'desk',\n            period_start: Math.floor(startOfDay(options.date || new Date()).valueOf() / 1000),\n            period_end: Math.floor(endOfDay(options.date || new Date()).valueOf() / 1000),\n        });\n        if (!desks?.length) return notifyError('You currently already have a desk booked for the selected date.');\n        ref.componentInstance.loading = 'Booking desk...';\n        await this.makeDeskBooking(\n            desk,\n            options.date || new Date().valueOf(),\n            reason\n        );\n        notifySuccess('Successfully booked desk');\n        ref.close();\n    }\n\n    private async makeDeskBooking(desk: Desk, date: number, reason: string) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const options = this._options.getValue();\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id || options.zones[0]]\n            : [level?.parent_id || options.zones[0]];\n        const booking_data = {\n            booking_start: Math.floor(\n                startOfDay(options.date).valueOf() / 1000\n            ),\n            user_id: this._host.id,\n            user_name: this._host.name,\n            user_email: this._host.email,\n            booking_end: Math.floor(endOfDay(options.date).valueOf() / 1000),\n            asset_id: desk.id,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                group: desk.group,\n            },\n        };\n        return this._bookings.save(booking_data);\n    }\n\n    private handleDeskAvailability(details: [Desk[], Desk[]]) {\n        const [available, desks] = details;\n        const style_map = {};\n        const actions = [];\n        const user_groups = this._staff.current.groups as any[];\n        const colours = this._settings.get('app.explore.colors') || {};\n        for (const desk of desks) {\n            const status =\n                !desk.bookable ||\n                (desk.group &&\n                    user_groups.includes((desk.group || '').toLowerCase()))\n                    ? 'not-bookable'\n                    : available.find((d) => d.id === desk.id)\n                    ? 'free'\n                    : 'busy';\n            style_map[`#${desk.id}`] = {\n                fill:\n                    colours[`desk-${status}`] ||\n                    colours[`${status}`] ||\n                    DEFAULT_COLOURS[`${status}`],\n                opacity: 0.6,\n            };\n            if (status === 'free') {\n                actions.push({\n                    id: desk.id,\n                    action: 'click',\n                    zone: false,\n                    callback: () => this.bookDesk(desk),\n                });\n                actions.push({\n                    id: desk.id,\n                    action: 'touchend',\n                    zone: false,\n                    callback: () => this.bookDesk(desk),\n                });\n            }\n        }\n        console.log('Styles:', style_map, available, desks);\n        this._state.setStyles('desks', style_map);\n        this._state.setActions('desks', actions);\n    }\n\n    private processDeskBookings(details) {\n        const [desks, bookings] = details;\n        const list = [];\n        for (const desk of desks) {\n            const booking: Booking = bookings.find(\n                (bkn) => bkn.asset_id === desk.id\n            );\n            list.push({\n                location: desk.id,\n                content: ExploreDeskInfoComponent,\n                hover: true,\n                data: {\n                    map_id: desk.name,\n                    user: booking?.user_name,\n                    start: booking?.date,\n                    end: booking?.date + booking?.duration * 60 * 1000,\n                    status: booking ? 'busy' : 'free',\n                },\n            });\n        }\n        this._state.setFeatures('desks', list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreStateService } from '@user-interfaces/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { DeskFlowStateService } from '../../../../workplace/src/app/bookings/desk-flow/desk-flow-state.service';\nimport { BaseClass } from '@user-interfaces/common';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-0 right-0\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field [ngModel]=\"null\" (ngModelChange)=\"setHost($event)\" placeholder=\"User for bookings...\"></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n            <ng-container *ngIf=\"loading | async\">\n                <div\n                    load-state\n                    class=\"absolute inset-0 flex flex-col justify-center items-center\"\n                >\n                    <mat-spinner [diameter]=\"48\"></mat-spinner>\n                </div>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n})\nexport class DeskMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly loading = this._flow.loading;\n    /** Observable for the active map */\n    public readonly options = this._flow.options;\n\n    public readonly setHost = (u) => this._flow.setHost(u)\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _flow: DeskFlowStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) =>\n                this._flow.setOptions({ date: opts.date, zones: opts.zones })\n            )\n        );\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-listings',\n    template: `\n        <ng-container *ngIf=\"!(filters | async)?.show_map; else map_state\">\n            <div\n                details\n                class=\"w-full bg-gray-900 text-white flex items-center px-2\"\n            >\n                <div class=\"flex-1 w-0\"></div>\n                <div class=\"p-2\">\n                    Requests: {{ (bookings | async)?.length || '0' }}\n                </div>\n                <div class=\"px-8\">\n                    Free Desks:\n                    {{\n                        ((desks | async)?.length || 0) -\n                            ((bookings | async)?.length || 0)\n                    }}\n                </div>\n                <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                    <app-icon className=\"material-icons\">more_vert</app-icon>\n                </button>\n            </div>\n            <div class=\"w-full flex-1 text-sm\">\n                <div\n                    class=\"w-full flex items-center bg-white border-b border-gray-500 p-2 font-medium\"\n                >\n                    <div class=\"w-32 p-2\">Person</div>\n                    <div class=\"w-32 p-2\">LoS</div>\n                    <div class=\"w-24 p-2\">Date</div>\n                    <div flex class=\"p-2 flex-1\">Desk</div>\n                    <div class=\"w-24 p-2\">Status</div>\n                    <div class=\"w-32 p-2\">Approver</div>\n                    <div class=\"w-32 p-2\">Checked In</div>\n                    <div class=\"w-32 p-2\"></div>\n                </div>\n                <div class=\"w-full flex-1 overflow-auto\">\n                    <ng-container\n                        *ngIf=\"(bookings | async)?.length; else empty_state\"\n                    >\n                        <desk-details\n                            *ngFor=\"let desk of bookings | async\"\n                            [desk]=\"desk\"\n                        ></desk-details>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex items-center justify-center\">\n                <p class=\"p-8\">\n                    There are no desks for the currently selected date.\n                </p>\n            </div>\n        </ng-template>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"updateDesks()\">\n                <div class=\"flex items-center\">\n                    <app-icon className=\"material-icons\">edit</app-icon>\n                    <span class=\"pl-2\">Edit Desks</span>\n                </div>\n            </button>\n            <button mat-menu-item (click)=\"rejectAll()\">\n                <div class=\"flex items-center\">\n                    <app-icon className=\"material-icons\">event_busy</app-icon>\n                    <span class=\"pl-2\">Reject All</span>\n                </div>\n            </button>\n        </mat-menu>\n        <ng-template #map_state>\n            <div  class=\"absolute inset-0\"><desk-map-view></desk-map-view></div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                overflow: hidden;\n            }\n\n            [details] {\n                height: 3.5rem;\n            }\n\n            [flex] {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class DeskListingsComponent {\n    public readonly filters = this._state.filters;\n\n    public readonly desks = this._state.desks;\n\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n    public readonly updateDesks = () => this._state.updateDesks();\n\n    constructor(private _state: DesksStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'app-desks',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <desk-listings class=\"w-full flex-1 h-0\"></desk-listings>\n            <mat-progress-bar class=\"w-full\" *ngIf=\"loading | async\" mode=\"indeterminate\"></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: DesksStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskListingsComponent } from './desk-listings.component';\nimport { DeskDetailsComponent } from './desk-details.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskListModalComponent } from './desk-list-modal.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { SharedExploreModule } from '@user-interfaces/explore';\nimport { DeskFlowConfirmModalComponent } from 'apps/workplace/src/app/bookings/desk-flow/desk-flow-confirm-modal.component';\nimport { DeskFlowQuestionsModalComponent } from 'apps/workplace/src/app/bookings/desk-flow/desk-flow-questions-modal.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DesksComponent }];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskListingsComponent,\n        DeskDetailsComponent,\n        DesksTopbarComponent,\n        DeskListModalComponent,\n        DeskMapViewComponent,\n        DeskFlowConfirmModalComponent,\n        DeskFlowQuestionsModalComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        MatRadioModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"sourceRoot":"webpack:///"}