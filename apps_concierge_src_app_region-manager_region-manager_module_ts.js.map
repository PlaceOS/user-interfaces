{"version":3,"file":"apps_concierge_src_app_region-manager_region-manager_module_ts.js","mappings":"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","names":["i0","tz_r1","RegionModalComponent_main_4_form_1_div_1_Template","RegionModalComponent_main_4_form_1_mat_option_11_Template","RegionModalComponent_main_4_form_1_mat_option_12_Template","ctx_r2","form","controls","display_name","auto_r2","filtered_timezones","timezones","length","RegionModalComponent_main_4_form_1_Template","_r4","save","RegionModalComponent","AsyncHandler","constructor","_org","_data","_dialog_ref","super","this","loading","building_list","FormGroup","id","FormControl","Validators","required","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","parent_id","organisation","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","filter","_","toLowerCase","includes","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","tags","resp","updateZone","name","authority","description","addZone","toPromise","catch","close","value","TIMEZONES_IANA","static","__ngFactoryType__","i1","MAT_DIALOG_DATA","i2","core","VBU","selectors","features","decls","vars","consts","i18n_0","$localize","RegionModalComponent_button_3_Template","RegionModalComponent_main_4_Template","RegionModalComponent_footer_5_Template","RegionModalComponent_ng_template_6_Template","ctx","load_state_r5","RegionManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_regions","combineLatest","region_list","pipe","map","buildings","list","search","region","building_count","bld","setFilters","next","getValue","setSearchString","editRegion","PlaceZone","open","afterClosed","editRegionMetadata","AppSettingsModalComponent","zone","setTimeout","location","reload","removeRegion","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","notifySuccess","jDH","factory","Éµfac","providedIn","row_r2","_r1","row","copyToClipboard","data_r4","row_r6","_r5","editMetadata","menu_r7","RegionListComponent","_manager","_clipboard","regions","copy","template","rf","RegionListComponent_ng_template_3_Template","RegionListComponent_ng_template_5_Template","_c3","_c0","name_template_r8","_c1","_c2","action_template_r9","RegionManagerComponent","_state","newRegion","attrs","ROUTES","path","component","RegionManagerModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild","MapLocation","type","position","map_id","asset_id","x","map_width","y","map_height","variance","last_seen","getUnixTime","Date","level","building","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/region-manager/region-modal.component.ts","./apps/concierge/src/app/region-manager/region-management.service.ts","./apps/concierge/src/app/region-manager/region-list.component.ts","./apps/concierge/src/app/region-manager/region-manager.component.ts","./apps/concierge/src/app/region-manager/region-manager.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n} from '@placeos/common';\nimport { Region, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'region-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Region</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving region...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionModalComponent extends AsyncHandler {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        parent_id: new FormControl(this._org.organisation.id),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: Region | undefined,\n        private _dialog_ref: MatDialogRef<RegionModalComponent>\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(\n                ({ timezone }) =>\n                    (this.filtered_timezones = this.timezones.filter((_) =>\n                        _.toLowerCase().includes(timezone.toLowerCase())\n                    ))\n            )\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data: any = this.form.getRawValue();\n        data.tags = ['region'];\n        this.loading = true;\n        const resp = await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n            : addZone({\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n        )\n            .toPromise()\n            .catch();\n        if (resp.id) this._dialog_ref.close(resp);\n        this.loading = false;\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService, Region } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RegionModalComponent } from './region-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\n\nexport interface RegionListOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RegionManagementService {\n    private _options = new BehaviorSubject<RegionListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_regions = combineLatest([\n        this._org.building_list,\n        this._org.region_list,\n        this._options,\n    ]).pipe(\n        map(([buildings, list, options]) => {\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const region of list) {\n                (region as any).building_count = buildings.filter(\n                    (bld) => bld.parent_id === region.id\n                ).length;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RegionListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRegion(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(RegionModalComponent, {\n            data: region,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public editRegionMetadata(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone: region },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public async removeRegion(region: Region) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${region.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(region.id).toPromise();\n        this._org.removeZone({ id: region.id, tags: ['region'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\nimport { notifySuccess } from '@placeos/common';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\n@Component({\n    selector: 'region-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-8\">\n            <simple-table\n                class=\"min-w-[32rem] block text-sm\"\n                [data]=\"regions\"\n                empty_message=\"No Regions\"\n                [columns]=\"[\n                    {\n                        key: 'display_name',\n                        name: 'Building Name',\n                        content: name_template\n                    },\n                    { key: 'building_count', name: 'Buildings', size: '8rem' },\n                    {\n                        key: 'actions',\n                        name: ' ',\n                        content: action_template,\n                        size: '3rem',\n                        sortable: false\n                    }\n                ]\"\n                [sortable]=\"true\"\n            ></simple-table>\n            <div class=\"w-full h-20\"></div>\n        </div>\n        <ng-template #name_template let-row=\"row\" let-data=\"data\">\n            <button\n                class=\"px-4 py-2 text-left leading-tight\"\n                (click)=\"copyToClipboard(row.id)\"\n            >\n                <div class=\"\">{{ data }}</div>\n                <div class=\"text-[0.625rem] opacity-30 font-mono\">\n                    {{ row.id }}\n                </div>\n            </button>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    icon\n                    matRipple\n                    class=\"h-12 w-12 rounded\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editMetadata(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit_square</app-icon>\n                            <span>App Configuration</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"editRegion(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit</app-icon>\n                            <span>Edit Region</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeRegion(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon class=\"text-error\">delete</app-icon>\n                            <span>Delete Region</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionListComponent {\n    public readonly regions = this._manager.filtered_regions;\n\n    public readonly editRegion = (region) => this._manager.editRegion(region);\n    public readonly removeRegion = (region) =>\n        this._manager.removeRegion(region);\n    public readonly editMetadata = (region) =>\n        this._manager.editRegionMetadata(region);\n\n    public readonly copyToClipboard = (id: string) => {\n        const success = this._clipboard.copy(id);\n        if (success) notifySuccess('Region ID copied to clipboard.');\n    };\n\n    constructor(\n        private _manager: RegionManagementService,\n        private _clipboard: Clipboard\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: '[app-region-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header\n                    class=\"flex items-center justify-between mb-2 px-8 pt-4 pb-8\"\n                >\n                    <h2 class=\"text-2xl font-medium\">Region Management</h2>\n                    <button btn matRipple (click)=\"newRegion()\" class=\"w-40\">\n                        Add Region\n                    </button>\n                </header>\n                <region-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></region-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RegionManagerComponent {\n    public readonly newRegion = () => this._state.editRegion();\n\n    constructor(private readonly _state: RegionManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RegionManagerComponent } from './region-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { RegionListComponent } from './region-list.component';\nimport { RegionModalComponent } from './region-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: RegionManagerComponent },\n    { path: 'new', component: RegionManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        RegionManagerComponent,\n        RegionListComponent,\n        RegionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RegionManagerModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}