{"version":3,"file":"apps_concierge_src_app_region-manager_region-manager_module_ts.js","mappings":"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","names":["i0","tz_r10","RegionModalComponent_main_4_form_1_div_1_Template","RegionModalComponent_main_4_form_1_mat_option_11_Template","RegionModalComponent_main_4_form_1_mat_option_12_Template","ctx_r5","form","controls","display_name","_r7","filtered_timezones","timezones","length","RegionModalComponent_main_4_form_1_Template","ctx_r1","_r12","ctx_r11","save","RegionModalComponent","AsyncHandler","constructor","_org","_data","_dialog_ref","super","this","loading","building_list","FormGroup","id","FormControl","Validators","required","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","parent_id","organisation","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","filter","_","toLowerCase","includes","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","tags","resp","updateZone","name","authority","description","addZone","toPromise","catch","close","value","TIMEZONES_IANA","static","t","i1","MAT_DIALOG_DATA","i2","core","Xpm","selectors","features","decls","vars","consts","i18n_0","$localize","RegionModalComponent_button_3_Template","RegionModalComponent_main_4_Template","RegionModalComponent_footer_5_Template","RegionModalComponent_ng_template_6_Template","ctx","_r4","RegionManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_regions","combineLatest","region_list","pipe","map","buildings","list","search","region","building_count","bld","setFilters","next","getValue","setSearchString","editRegion","PlaceZone","open","afterClosed","editRegionMetadata","AppSettingsModalComponent","zone","setTimeout","location","reload","removeRegion","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","notifySuccess","Yz7","factory","Éµfac","providedIn","row_r2","_r5","row","ctx_r4","ctx_r6","ctx_r7","_r3","RegionListComponent","_manager","regions","editMetadata","template","rf","RegionListComponent_ng_template_2_Template","_c0","_c1","_c2","_c3","_r1","RegionManagerComponent","_state","newRegion","attrs","ROUTES","path","component","RegionManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/region-manager/region-modal.component.ts","./apps/concierge/src/app/region-manager/region-management.service.ts","./apps/concierge/src/app/region-manager/region-list.component.ts","./apps/concierge/src/app/region-manager/region-manager.component.ts","./apps/concierge/src/app/region-manager/region-manager.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n} from '@placeos/common';\nimport { Region, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'region-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Region</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving region...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionModalComponent extends AsyncHandler {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        parent_id: new FormControl(this._org.organisation.id),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: Region | undefined,\n        private _dialog_ref: MatDialogRef<RegionModalComponent>\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(\n                ({ timezone }) =>\n                    (this.filtered_timezones = this.timezones.filter((_) =>\n                        _.toLowerCase().includes(timezone.toLowerCase())\n                    ))\n            )\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data: any = this.form.getRawValue();\n        data.tags = ['region'];\n        this.loading = true;\n        const resp = await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n            : addZone({\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n        )\n            .toPromise()\n            .catch();\n        if (resp.id) this._dialog_ref.close(resp);\n        this.loading = false;\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService, Region } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RegionModalComponent } from './region-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\n\nexport interface RegionListOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RegionManagementService {\n    private _options = new BehaviorSubject<RegionListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_regions = combineLatest([\n        this._org.building_list,\n        this._org.region_list,\n        this._options,\n    ]).pipe(\n        map(([buildings, list, options]) => {\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const region of list) {\n                (region as any).building_count = buildings.filter(\n                    (bld) => bld.parent_id === region.id\n                ).length;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RegionListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRegion(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(RegionModalComponent, {\n            data: region,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public editRegionMetadata(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone: region },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => location.reload(), 300);\n        });\n    }\n\n    public async removeRegion(region: Region) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${region.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(region.id).toPromise();\n        this._org.removeZone({ id: region.id, tags: ['region'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: 'region-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[32rem] w-full h-full\"\n                [dataSource]=\"regions\"\n                [columns]=\"['display_name', 'building_count', 'actions']\"\n                [display_column]=\"['Name', 'Buildings', ' ']\"\n                [column_size]=\"['flex', '10r', '3.75r']\"\n                [template]=\"{\n                    actions: action_template\n                }\"\n                empty=\"No regions\"\n            ></custom-table>\n        </div>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matRipple [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editRegionMetadata(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit_square</app-icon>\n                            <span>App Configuration</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"editRegion(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit</app-icon>\n                            <span>Edit Region</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeRegion(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon>delete</app-icon>\n                            <span>Delete Region</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionListComponent {\n    public readonly regions = this._manager.filtered_regions;\n\n    public readonly editRegion = (region) => this._manager.editRegion(region);\n    public readonly removeRegion = (region) =>\n        this._manager.removeRegion(region);\n    public readonly editMetadata = (region) =>\n        this._manager.editRegionMetadata(region);\n\n    constructor(private _manager: RegionManagementService) {}\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: '[app-region-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header\n                    class=\"flex items-center justify-between mb-2 px-4 py-8\"\n                >\n                    <h2 class=\"text-2xl font-medium\">Region Management</h2>\n                    <button btn matRipple (click)=\"newRegion()\">\n                        Add Region\n                    </button>\n                </header>\n                <region-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></region-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RegionManagerComponent {\n    public readonly newRegion = () => this._state.editRegion();\n\n    constructor(private readonly _state: RegionManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RegionManagerComponent } from './region-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { RegionListComponent } from './region-list.component';\nimport { RegionModalComponent } from './region-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: RegionManagerComponent },\n    { path: 'new', component: RegionManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        RegionManagerComponent,\n        RegionListComponent,\n        RegionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RegionManagerModule {}\n"],"x_google_ignoreList":[]}