{"version":3,"file":"apps_concierge_src_app_region-manager_region-manager_module_ts.js","mappings":"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","names":["i0","RegionModalComponent_main_4_form_1_div_1_Template","ctx_r5","form","controls","display_name","RegionModalComponent_main_4_form_1_Template","ctx_r1","_r8","ctx_r7","save","RegionModalComponent","constructor","_org","_data","this","loading","building_list","FormGroup","id","FormControl","Validators","parent_id","organisation","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","updateZone","name","authority","description","addZone","toPromise","catch","t","i1","MAT_DIALOG_DATA","core","Xpm","selectors","decls","vars","consts","i18n_0","$localize","RegionModalComponent_button_3_Template","RegionModalComponent_main_4_Template","RegionModalComponent_footer_5_Template","RegionModalComponent_ng_template_6_Template","ctx","value","_r3","RegionManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_regions","combineLatest","region_list","pipe","map","buildings","list","search","filter","_","toLowerCase","includes","region","building_count","bld","length","setFilters","next","getValue","setSearchString","editRegion","PlaceZone","open","afterClosed","subscribe","setTimeout","Date","now","i2","Yz7","factory","Éµfac","providedIn","row_r2","_r4","row","ctx_r3","RegionListComponent","_manager","regions","template","rf","RegionListComponent_ng_template_2_Template","_c0","_c1","_c2","_c3","_r0","RegionManagerComponent","_state","newRegion","attrs","ROUTES","path","component","RegionManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/region-manager/region-modal.component.ts","./apps/concierge/src/app/region-manager/region-management.service.ts","./apps/concierge/src/app/region-manager/region-list.component.ts","./apps/concierge/src/app/region-manager/region-manager.component.ts","./apps/concierge/src/app/region-manager/region-manager.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { getInvalidFields, notifyError } from '@placeos/common';\nimport { Region, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'region-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Region</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving region...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionModalComponent {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        parent_id: new FormControl(this._org.organisation.id),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: Region | undefined\n    ) {}\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = this.form.getRawValue();\n        this.loading = true;\n        await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n            : addZone({\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n        )\n            .toPromise()\n            .catch();\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RegionModalComponent } from './region-modal.component';\n\nexport interface RegionListOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RegionManagementService {\n    private _options = new BehaviorSubject<RegionListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_regions = combineLatest([\n        this._org.building_list,\n        this._org.region_list,\n        this._options,\n    ]).pipe(\n        map(([buildings, list, options]) => {\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const region of list) {\n                (region as any).building_count = buildings.filter(\n                    (bld) => bld.parent_id === region.id\n                ).length;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RegionListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRegion(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(RegionModalComponent, {\n            data: region,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: 'region-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <custom-table\n                class=\"block min-w-[48rem] w-full h-full\"\n                [dataSource]=\"regions\"\n                [columns]=\"['display_name', 'building_count', 'actions']\"\n                [display_column]=\"['Name', 'Buildings', ' ']\"\n                [column_size]=\"['flex', '10r', '5r']\"\n                [template]=\"{\n                    actions: action_template\n                }\"\n                empty=\"No regions\"\n            ></custom-table>\n        </div>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    btn\n                    icon\n                    matTooltip=\"Edit Region\"\n                    (click)=\"editRegion(row)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionListComponent {\n    public readonly regions = this._manager.filtered_regions;\n\n    public readonly editRegion = (region) => this._manager.editRegion(region);\n\n    constructor(private _manager: RegionManagementService) {}\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: '[app-region-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header class=\"flex items-center justify-between mb-2 p-8\">\n                    <h2 class=\"text-2xl font-medium\">Region Management</h2>\n                    <button btn matRipple (click)=\"newRegion()\">\n                        Add Region\n                    </button>\n                </header>\n                <region-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></region-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RegionManagerComponent {\n    public readonly newRegion = () => this._state.editRegion();\n\n    constructor(private readonly _state: RegionManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RegionManagerComponent } from './region-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { RegionListComponent } from './region-list.component';\nimport { RegionModalComponent } from './region-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: RegionManagerComponent },\n    { path: 'new', component: RegionManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        RegionManagerComponent,\n        RegionListComponent,\n        RegionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RegionManagerModule {}\n"],"x_google_ignoreList":[]}