{"version":3,"file":"apps_concierge_src_app_region-manager_region-manager_module_ts.js","mappings":"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","names":["i0","tz_r10","RegionModalComponent_main_4_form_1_div_1_Template","RegionModalComponent_main_4_form_1_mat_option_11_Template","RegionModalComponent_main_4_form_1_mat_option_12_Template","ctx_r5","form","controls","display_name","_r7","filtered_timezones","timezones","length","RegionModalComponent_main_4_form_1_Template","ctx_r1","_r12","ctx_r11","save","RegionModalComponent","AsyncHandler","constructor","_org","_data","super","this","loading","building_list","FormGroup","id","FormControl","Validators","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","parent_id","organisation","ngOnInit","_updateTimezoneList","subscription","valueChanges","subscribe","filter","_","toLowerCase","includes","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","updateZone","name","authority","description","addZone","toPromise","catch","value","TIMEZONES_IANA","t","i1","MAT_DIALOG_DATA","core","Xpm","selectors","features","decls","vars","consts","i18n_0","$localize","RegionModalComponent_button_3_Template","RegionModalComponent_main_4_Template","RegionModalComponent_footer_5_Template","RegionModalComponent_ng_template_6_Template","ctx","_r3","RegionManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","filtered_regions","combineLatest","region_list","pipe","map","buildings","list","search","region","building_count","bld","setFilters","next","getValue","setSearchString","editRegion","PlaceZone","open","afterClosed","setTimeout","Date","now","editRegionMetadata","AppSettingsModalComponent","zone","i2","Yz7","factory","Éµfac","providedIn","row_r2","_r4","row","ctx_r3","RegionListComponent","_manager","regions","editMetadata","template","rf","RegionListComponent_ng_template_2_Template","_c0","_c1","_c2","_c3","_r0","RegionManagerComponent","_state","newRegion","attrs","ROUTES","path","component","RegionManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/region-manager/region-modal.component.ts","./apps/concierge/src/app/region-manager/region-management.service.ts","./apps/concierge/src/app/region-manager/region-list.component.ts","./apps/concierge/src/app/region-manager/region-manager.component.ts","./apps/concierge/src/app/region-manager/region-manager.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    TIMEZONES_IANA,\n    getInvalidFields,\n    notifyError,\n} from '@placeos/common';\nimport { Region, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'region-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Region</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Timezone:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <app-icon matPrefix class=\"text-2xl\">search</app-icon>\n                        <input\n                            matInput\n                            formControlName=\"timezone\"\n                            placeholder=\"Building timezone\"\n                            [matAutocomplete]=\"auto\"\n                        />\n                    </mat-form-field>\n                    <mat-autocomplete #auto=\"matAutocomplete\">\n                        <mat-option\n                            *ngFor=\"let tz of filtered_timezones\"\n                            [value]=\"tz\"\n                            >{{ tz }}</mat-option\n                        >\n                        <mat-option *ngIf=\"!timezones.length\" [disabled]=\"true\">\n                            No matching timezones\n                        </mat-option>\n                    </mat-autocomplete>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving region...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionModalComponent extends AsyncHandler {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public timezones: string[] = [];\n    public filtered_timezones: string[] = [];\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        timezone: new FormControl(\n            Intl?.DateTimeFormat()?.resolvedOptions()?.timeZone || ''\n        ),\n        parent_id: new FormControl(this._org.organisation.id),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: Region | undefined\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._updateTimezoneList();\n        this.subscription(\n            'tz-change',\n            this.form.valueChanges.subscribe(\n                ({ timezone }) =>\n                    (this.filtered_timezones = this.timezones.filter((_) =>\n                        _.toLowerCase().includes(timezone.toLowerCase())\n                    ))\n            )\n        );\n    }\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data = this.form.getRawValue();\n        this.loading = true;\n        await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n            : addZone({\n                  ...data,\n                  name: `REGION ${authority().description} ${\n                      data.display_name\n                  }`,\n              })\n        )\n            .toPromise()\n            .catch();\n        this.loading = false;\n    }\n\n    private _updateTimezoneList() {\n        const timezone = this.form?.value?.timezone || '';\n        this.timezones = TIMEZONES_IANA;\n        this.filtered_timezones = this.timezones.filter((_) =>\n            _.toLowerCase().includes(timezone.toLowerCase())\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { PlaceZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RegionModalComponent } from './region-modal.component';\nimport { AppSettingsModalComponent } from '../ui/app-settings-modal.component';\n\nexport interface RegionListOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RegionManagementService {\n    private _options = new BehaviorSubject<RegionListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly filtered_regions = combineLatest([\n        this._org.building_list,\n        this._org.region_list,\n        this._options,\n    ]).pipe(\n        map(([buildings, list, options]) => {\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const region of list) {\n                (region as any).building_count = buildings.filter(\n                    (bld) => bld.parent_id === region.id\n                ).length;\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<RegionListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editRegion(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(RegionModalComponent, {\n            data: region,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n\n    public editRegionMetadata(region: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(AppSettingsModalComponent, {\n            data: { zone: region },\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: 'region-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <custom-table\n                class=\"block min-w-[48rem] w-full h-full\"\n                [dataSource]=\"regions\"\n                [columns]=\"['display_name', 'building_count', 'actions']\"\n                [display_column]=\"['Name', 'Buildings', ' ']\"\n                [column_size]=\"['flex', '10r', '5r']\"\n                [template]=\"{\n                    actions: action_template\n                }\"\n                empty=\"No regions\"\n            ></custom-table>\n        </div>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    btn\n                    icon\n                    matTooltip=\"Edit Region\"\n                    (click)=\"editRegion(row)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    btn\n                    icon\n                    matTooltip=\"Edit Region\"\n                    (click)=\"editRegion(row)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RegionListComponent {\n    public readonly regions = this._manager.filtered_regions;\n\n    public readonly editRegion = (region) => this._manager.editRegion(region);\n    public readonly editMetadata = (region) =>\n        this._manager.editRegionMetadata(region);\n\n    constructor(private _manager: RegionManagementService) {}\n}\n","import { Component } from '@angular/core';\nimport { RegionManagementService } from './region-management.service';\n\n@Component({\n    selector: '[app-region-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header class=\"flex items-center justify-between mb-2 p-8\">\n                    <h2 class=\"text-2xl font-medium\">Region Management</h2>\n                    <button btn matRipple (click)=\"newRegion()\">\n                        Add Region\n                    </button>\n                </header>\n                <region-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></region-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class RegionManagerComponent {\n    public readonly newRegion = () => this._state.editRegion();\n\n    constructor(private readonly _state: RegionManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { RegionManagerComponent } from './region-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { RegionListComponent } from './region-list.component';\nimport { RegionModalComponent } from './region-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: RegionManagerComponent },\n    { path: 'new', component: RegionManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        RegionManagerComponent,\n        RegionListComponent,\n        RegionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class RegionManagerModule {}\n"],"x_google_ignoreList":[]}