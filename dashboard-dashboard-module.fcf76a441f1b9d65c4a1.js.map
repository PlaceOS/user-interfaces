{"version":3,"sources":["./src/app/dashboard/dashboard-availability.component.ts","./src/app/dashboard/dashboard-upcoming.component.ts","./src/app/dashboard/dashboard-contacts.component.ts","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.module.ts"],"names":["DashboardAvailabilityComponent","_state","space_list","this","free_spaces","levels_free","level_occupancy","pollFreeSpaces","stopPollingFreeSpaces","DashboardUpcomingComponent","_dialog","upcoming_events","pollUpcomingEvents","stopPollingUpcomingEvents","space","open","data","DashboardContactsComponent","super","contacts","search_results","contacts_search","addUser","u","addContact","removeUser","removeContact","updateSearch","s","updateContactSearch","search_str","updateContacts","timeout","_input_el","nativeElement","focus","clearContactSearch","focusInput","clearInput","$event","stopPropagation","preventDefault","ROUTES","path","component","DashboardComponent","_settings","get","format","Date","DashboardModule","forChild"],"mappings":"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","file":"dashboard-dashboard-module.fcf76a441f1b9d65c4a1.js","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { first } from 'rxjs/operators';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'dashboard-availability',\n    template: `\n        <h3 class=\"m-0 font-medium text-xl\">Available Now</h3>\n        <div class=\"flex flex-col items-center p-2 bg-white my-4 rounded-lg\">\n            <div class=\"flex items-center w-full mb-2\">\n                <app-icon\n                    class=\"bg-darken rounded-lg mr-2 text-2xl\"\n                    [icon]=\"{ class: 'material-icons', content: 'crop_free' }\"\n                ></app-icon>\n                <div>Most free space:</div>\n            </div>\n            <div class=\"items space-y-2 w-full\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-full\"\n                    *ngFor=\"let lvl of levels_free | async | slice:0:2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    {{ lvl.display_name || lvl.name }}\n                </a>\n            </div>\n        </div>\n        <div class=\"flex items-center flex-col rounded-lg bg-white my-4 p-2\">\n            <div class=\"flex items-center w-full mb-2\">\n                <app-icon\n                    class=\"bg-darken rounded-lg mr-2 text-2xl\"\n                    [icon]=\"{ class: 'material-icons', content: 'av_timer' }\"\n                ></app-icon>\n                <div>Free rooms now:</div>\n            </div>\n            <div class=\"items space-y-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-full\"\n                    *ngFor=\"let space of space_list | async | slice: 0:3\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.id }\"\n                    >{{ space.display_name || space.name }}\n                </a>\n                <span *ngIf=\"!(space_list | async).length\" class=\"text-dark-fade text-sm mb-2\">No free spaces</span>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n        `,\n    ],\n})\nexport class DashboardAvailabilityComponent implements OnInit, OnDestroy {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: DashboardStateService) { }\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Space } from '@user-interfaces/spaces';\n\nimport { ViewRoomModalComponent } from '../overlays/view-room-modal.component';\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'dashboard-upcoming',\n    template: `\n        <h3 class=\"m-0 mb-4 font-medium text-xl\">Today's Events</h3>\n        <div\n            name=\"event\"\n            *ngFor=\"let event of upcoming_events | async | slice: 0:3\"\n            class=\"flex bg-white rounded-lg relative overflow-hidden mb-4\"\n        >\n            <div name=\"status\" class=\"absolute rounded-lg\"></div>\n            <div name=\"details\" class=\"flex-1 mr-2\">\n                <div name=\"time\" class=\"text-sm text-bold mb-2\">{{ event.date | date:'shortTime' }}</div>\n                <div name=\"title\" class=\"text-sm text-bold mb-2\">{{ event.title }}</div>\n                <div name=\"space\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'room' }\"\n                    ></app-icon>\n                    <a\n                        class=\"text-black\"\n                        [class.underline]=\"!!event.space\"\n                        [matTooltip]=\"event.space ? 'Locate Space' : ''\"\n                        (click)=\"event.space ? locateSpace(event.space) : ''\"\n                    >\n                        {{\n                            event.space?.display_name || event.space?.name || '&lt;No Location&gt;'\n                        }}\n                        {{\n                            event.space?.level?.display_name || event.space?.level?.name\n                                ? ', ' + event.space.level.display_name || event.space.level.name\n                                : ''\n                        }}\n                    </a>\n                </div>\n                <div name=\"attendees\" class=\"text-xs flex items-center mb-2\">\n                    <app-icon\n                        class=\"mr-2\"\n                        [icon]=\"{ class: 'material-icons', content: 'group' }\"\n                    ></app-icon>\n                    {{ event.guests.length }} Guest{{ event.guests.length === 1 ? '' : 's' }}\n                </div>\n                <div name=\"guests\" class=\"flex space-x-2 text-sm\">\n                    <a-user-avatar\n                        *ngFor=\"let guest of event.guests\"\n                        [user]=\"guest\"\n                    ></a-user-avatar>\n                </div>\n            </div>\n            <a button mat-button *ngIf=\"event.meeting_link\" class=\"uppercase h-12\" [href]=\"event.meeting_link\">Join Call</a>\n        </div>\n        <p *ngIf=\"!(upcoming_events | async).length\" class=\"text-dark-fade text-center w-full\">\n            No upcoming events for today\n        </p>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='time'] {\n                color: #00529b;\n            }\n\n            [name='event'] {\n                padding: 1rem 1rem 1rem 2rem;\n            }\n\n            [name='status'] {\n                top: 1rem;\n                left: -0.8rem;\n                height: 2.5rem;\n                width: 1.6rem;\n                background-color: #00529b;\n            }\n\n            button {\n                height: 3em;\n            }\n\n            app-icon {\n                margin-left: -0.25rem;\n            }\n        `,\n    ],\n})\nexport class DashboardUpcomingComponent {\n    public readonly upcoming_events = this._state.upcoming_events;\n\n    constructor(private _state: DashboardStateService, private _dialog: MatDialog) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n    }\n\n    public locateSpace(space: Space) {\n        this._dialog.open(ViewRoomModalComponent, { data: { space } });\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { BaseClass } from '@user-interfaces/common';\n\nimport { DashboardStateService } from './dashboard-state.service';\n\n@Component({\n    selector: 'dashboard-contacts',\n    template: `\n        <h3 class=\"m-0 mb-2 font-medium text-xl\">Contacts</h3>\n        <div name=\"contact-list\" class=\"bg-gray-400 rounded-lg p-2 pl-0 space-y-2 flex flex-wrap\">\n            <div\n                name=\"contact\"\n                *ngFor=\"let user of contacts | async\"\n                class=\"bg-white rounded-lg flex-1 flex flex-col items-center p-2 relative\"\n            >\n                <a-user-avatar class=\"text-2xl mb-2\" [user]=\"user\"></a-user-avatar>\n                <div name=\"contact-name\" class=\"text-sm mb-2\">{{ user.name }}</div>\n                <div name=\"location\" class=\"flex items-center text-sm\">\n                    <div name=\"dot\" class=\"mr-2\"></div>\n                    Level 12\n                </div>\n                <button mat-icon-button name=\"close\" (click)=\"removeUser(user)\">\n                    <app-icon\n                        [icon]=\"{ class: 'material-icons', content: 'close' }\"\n                    ></app-icon>\n                </button>\n            </div>\n            <button\n                name=\"contact\"\n                mat-button\n                class=\"rounded-lg flex-1 w-full\"\n                [matMenuTriggerFor]=\"menu\"\n                (menuOpened)=\"focusInput()\"\n                (menuClosed)=\"clearInput()\"\n            >\n                <div class=\"flex flex-col items-center p-4 text-black w-full\">\n                    <app-icon\n                        class=\"text-2xl\"\n                        [icon]=\"{ class: 'material-icons', content: 'person_add' }\"\n                    ></app-icon>\n                    <span class=\"w-full leading-tight whitespace-normal\"\n                        >Click to add a person to contacts</span\n                    >\n                </div>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <div\n                mat-menu-item\n                class=\"p-0\"\n                (click)=\"$event.stopPropagation(); $event.preventDefault()\"\n            >\n                <input\n                    #input\n                    class=\"w-full p-2 text-base\"\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"updateSearch(search_str)\"\n                    placeholder=\"Search for user...\"\n                />\n            </div>\n            <button mat-menu-item *ngIf=\"!(search_results | async).length\">\n                {{ !search_str ? 'Type to search for users...' : 'No matches for \"' + search_str + '\"'}}\n            </button>\n            <button mat-menu-item *ngFor=\"let user of search_results | async | slice:0:8\" (click)=\"addUser(user)\">\n                <div class=\"flex items-center leading-tight\">\n                    <a-user-avatar class=\"text-xl mr-2\" [user]=\"user\"></a-user-avatar>\n                    <div class=\"flex-1\">\n                        <div>{{ user.name }}</div>\n                        <div class=\"text-xs text-dark-fade\">{{ user.email }}</div>\n                    </div>\n                </div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                padding: 1em;\n                min-width: 16rem;\n            }\n\n            [name='contact-list'] {\n                padding: 0 0.5rem 0.5rem 0;\n            }\n\n            [name='contact'] {\n                min-width: 8rem;\n                width: 8rem;\n                margin-left: 0.5rem;\n                margin-top: 0.5rem;\n            }\n\n            [name='contact-name'] {\n                font-weight: 400;\n            }\n\n            [name='dot'] {\n                height: 8px;\n                width: 8px;\n                border-radius: 8px;\n                background-color: #22992e;\n            }\n\n            button[name='close'] {\n                position: absolute;\n                display: none;\n                top: .25rem;\n                right: .25rem;\n            }\n\n            [name='contact']:hover button[name='close'] {\n                display: initial;\n            }\n\n            button[name='contact'] {\n                background-color: #f0f0f0;\n                border: none;\n                min-width: calc(100% - 0.5rem) !important;\n            }\n        `,\n    ],\n})\nexport class DashboardContactsComponent extends BaseClass {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.contacts_search;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.updateContactSearch(s);\n\n    public search_str: string = '';\n\n    @ViewChild('input') private _input_el: ElementRef;\n\n    constructor(private _state: DashboardStateService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.updateContacts();\n    }\n\n    public focusInput() {\n        this.timeout('focus', () => {\n            if (this._input_el) {\n                this._input_el.nativeElement.focus();\n            }\n        });\n    }\n\n    public clearInput() {\n        this.search_str = '';\n        this._state.clearContactSearch();\n    }\n}\n","import { Component } from '@angular/core';\nimport { SettingsService } from '@user-interfaces/common';\nimport { format } from 'date-fns';\n\n\n@Component({\n    selector: 'dashboard',\n    template: `\n        <header>\n            <a-topbar-header [(menu)]=\"show_menu\"></a-topbar-header>\n            <div class=\"top relative flex flex-col justify-center text-white px-12 py-4\">\n                <div class=\"row location\">Sydney</div>\n                <div class=\"row text-2xl text-bold uppercase\">{{ datetime }}</div>\n            </div>\n        </header>\n        <main class=\"flex flex-1 px-8 flex-wrap overflow-auto\">\n            <dashboard-availability class=\"flex-1 min-w-64\"></dashboard-availability>\n            <dashboard-upcoming class=\"flex-1 min-w-64\"></dashboard-upcoming>\n            <dashboard-contacts class=\"flex-1 min-w-64\"></dashboard-contacts>\n        </main>\n        <footer class=\"flex\">\n            <a button mat-button class=\"tile text-2xl\" *ngFor=\"let tile of tiles\" [routerLink]=\"tile.route\">\n                <div class=\"flex flex-col items-center\">\n                    <app-icon [icon]=\"tile.icon\"></app-icon>\n                    <span class=\"text-lg\">{{ tile.name }}</span>\n                </div>\n            </a>\n        </footer>\n        <a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n    `,\n    styles: [`\n        :host {\n            position: absolute;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n        }\n\n        main {\n            min-height: 50%;\n            background: #f0f0f0;\n        }\n\n        .top {\n            background: transparent linear-gradient(89deg, #004a86 0%, #00a1d8 70%, #6eb95c 100%) 0% 0%\n                no-repeat padding-box;\n        }\n\n        a[button].tile {\n            flex: 1;\n            border-radius: 0;\n            background-color: #fff;\n            color: rgba(0,0,0,.85);\n            border: none;\n            border-right: 1px solid #ccc;\n        }\n\n        a[button].tile:last-child {\n            border: none;\n        }\n    `],\n})\nexport class DashboardComponent {\n    /** Whether to show overlay menu */\n    public show_menu: boolean;\n\n    public get tiles() {\n        return this._settings.get('app.home.tiles') || [];\n    }\n\n    public get datetime() {\n        return format(new Date(), 'EEEE, h:mma')\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { SharedContentModule } from '../ui/shared.module';\n\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardAvailabilityComponent } from './dashboard-availability.component';\nimport { DashboardUpcomingComponent } from './dashboard-upcoming.component';\nimport { DashboardContactsComponent } from './dashboard-contacts.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DashboardComponent }];\n\n@NgModule({\n    declarations: [\n        DashboardComponent,\n        DashboardAvailabilityComponent,\n        DashboardUpcomingComponent,\n        DashboardContactsComponent\n    ],\n    imports: [CommonModule, FormsModule, SharedContentModule, RouterModule.forChild(ROUTES)],\n})\nexport class DashboardModule {}\n"],"sourceRoot":"webpack:///"}