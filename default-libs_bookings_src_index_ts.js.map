{"version":3,"file":"default-libs_bookings_src_index_ts.js","mappings":"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","names":["i0","DeskQuestionsModalComponent","constructor","this","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","form","markAllAsTouched","Object","keys","value","find","key","failure","event","emit","reason","selectors","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","type","generateBookingForm","Booking","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","id","name","map","data","flatten","_","metadata","desks","details","Array","d","zone","of","tap","assets","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form_value","debounceTime","queryBookings","period_start","getUnixTime","date","period_end","addMinutes","duration","zones","zone_id","bookings","filter","asset","bookable","every","includes","parent_id","bkn","asset_id","status","show_fav","favorite_desks","available_assets","groups","asset_list","members","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","_form","_booking","get","newForm","valueChanges","storeForm","setView","setFeature","feature","enable","splice","findIndex","e","resetForm","patchValue","extension_data","removeItem","setItem","stringify","getRawValue","loadForm","confirmPost","t","checkQuestions","content","asset_name","format","openConfirmModal","title","icon","loading","n","postFormForGroup","catch","notifyError","close","postForm","ignore_check","valid","getInvalidFields","join","checkResourceAvailable","all_day","set","hours","minutes","valueOf","result","saveBooking","toPromise","booking_type","last_success","extra_members","email","take","active_asset","map_id","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","user_email","i","user","description","ref","open","race","componentInstance","afterClosed","allowed_bookings","l","current","map_url","count","nearby_assets","item","findNearbyFeature","factory"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking-form.service.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nexport const FAV_DESK_KEY = 'favourite_desks';\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking' | 'visitor';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            ) &&\n                            (!options?.show_fav || this.favorite_desks.includes(asset.id))\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public get favorite_desks() {\n        return this._settings.get<string[]>(FAV_DESK_KEY) || [];\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean){\n        if(!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if(enable && !features.includes(feature))features.push(feature);\n        if(!enable && features.includes(feature))features.splice(features.findIndex(e => e === feature), 1)\n        this.setOptions({features});\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.getRawValue() || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const value = form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const value = form.getRawValue();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(new Booking(value)).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form\n                .getValue()\n                .patchValue({\n                    ...form,\n                    user: user as any,\n                    asset_id: asset?.id,\n                    asset_name: asset.name,\n                    map_id: asset?.map_id || asset?.id,\n                    description: asset.name,\n                    zones: asset.zone\n                        ? [asset.zone?.parent_id, asset.zone?.id]\n                        : [],\n                });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n"]}