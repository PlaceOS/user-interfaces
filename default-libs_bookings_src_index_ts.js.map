{"version":3,"file":"default-libs_bookings_src_index_ts.js","mappings":"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","names":["i0","DeskQuestionsModalComponent","constructor","this","EventEmitter","FormGroup","travelled","FormControl","Validators","unwell","contact","submit","form","markAllAsTouched","valid","Object","keys","value","find","key","failure","event","emit","reason","notifyError","selectors","Booking","data","id","asset_id","asset_name","extension_data","zones","booking_start","date","getUnixTime","roundToNearestMinutes","addMinutes","Date","now","nearestTo","booking_end","duration","booking_type","type","Math","abs","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","deleted","booked_by_id","booked_by_name","booked_by_email","approver_id","approver_email","approver_name","access","all_day","status","toJSON","location","is_today","isSameDay","is_done","start","end","addHours","isAfter","booking","map_id","user","currentUser","booked_by","valueChanges","subscribe","v","booker","patchValue","email","emitEvent","o","map_url","centered_at","desk_ids","element","document","createElement","style","position","top","width","height","body","appendChild","createViewer","url","viewer","getViewer","point","mappings","x","y","dist","closest","console","log","desk","d","sqrt","removeChild","removeViewer","BOOKINGS_ENDPOINT","q","query","toQueryString","get","pipe","map","list","item","encodeURIComponent","method","patch","put","saveBooking","updateBooking","post","createBooking","state","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","generateBookingForm","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","shareReplay","options","compare","distinctUntilChanged","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","name","flatten","_","metadata","desks","details","Array","zone","of","tap","assets","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form_value","debounceTime","queryBookings","period_start","period_end","zone_id","bookings","filter","asset","bookable","every","includes","parent_id","bkn","available_assets","groups","asset_list","members","length","group","pop","subscription","events","NavigationEnd","clearForm","initialised","first","setOptions","view","_view","getValue","_form","_booking","newForm","storeForm","setView","resetForm","removeItem","setItem","stringify","loadForm","confirmPost","t","checkQuestions","content","format","openConfirmModal","icon","loading","s","postFormForGroup","catch","close","postForm","ignore_check","getInvalidFields","join","checkResourceAvailable","set","hours","minutes","valueOf","result","toPromise","last_success","extra_members","take","active_asset","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","i","ref","open","race","componentInstance","afterClosed","allowed_bookings","u","current","count","nearby_assets","findNearbyFeature","factory"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl('', [Validators.required]),\n        unwell: new FormControl('', [Validators.required]),\n        contact: new FormControl('', [Validators.required]),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    startOfDay,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Name of the physical asset assocated with the booking */\n    public readonly asset_name: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n    /** New deleted field */\n    public readonly deleted: boolean;\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.asset_name = data.asset_name || data.extension_data?.asset_name || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.date / 1000 ||\n            data.booking_start ||\n            getUnixTime(\n                roundToNearestMinutes(addMinutes(Date.now(), 5), {\n                    nearestTo: 5,\n                })\n            );\n        this.booking_end =\n            data.date / 1000 + data.duration * 60 ||\n            data.booking_end ||\n            getUnixTime(\n                addMinutes(this.booking_start * 1000, data.duration || 60)\n            );\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(\n                differenceInMinutes(\n                    this.booking_start * 1000,\n                    this.booking_end * 1000\n                )\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.deleted = !!data.deleted;\n        this.booked_by_id = data.booked_by_id || '';\n        this.booked_by_name = data.booked_by_name || '';\n        this.booked_by_email = data.booked_by_email || '';\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? this.duration > 12 * 60;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { createViewer, getViewer, Point, removeViewer } from '@placeos/svg-viewer';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking = new Booking()) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        all_day: new FormControl(booking.all_day ?? false),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        asset_name: new FormControl(booking.description),\n        map_id: new FormControl(booking.extension_data?.map_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n\nexport async function findNearbyFeature(map_url: string, centered_at: Point | string, desk_ids: string[] = []): Promise<string> {\n    const element = document.createElement('div');\n    element.style.position = 'absolute';\n    element.style.top = '-9999px';\n    element.style.width = '1000px';\n    element.style.height = '1000px';\n    document.body.appendChild(element);\n    const id = await createViewer({\n        url: map_url,\n        element\n    });\n    const viewer = getViewer(id);\n    const point = (typeof centered_at === 'string' ? viewer.mappings[centered_at] : centered_at) || { x: .5, y: .5 };\n    let dist = 10;\n    let closest = '';\n    console.log(`Desks:`, desk_ids);\n    console.log(`Mappings:`, viewer.mappings);\n    console.log(`Point:`, point);\n    for (const desk of desk_ids) {\n        const { x, y } = viewer.mappings[desk] || { x: 2, y: 2 };\n        const d = Math.sqrt((x - point.x) * (x - point.x) + (y - point.y) * (y - point.y));\n        console.log(`Desk ${desk}:`, viewer.mappings[desk], d);\n        if (d < dist) {\n            dist = d;\n            closest = desk;\n        }\n    }\n    document.body.removeChild(element);\n    removeViewer(id);\n    return closest;\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        let content = `Would you like to book the ${options.type} ${\n            form.value.asset_name\n        } for ${format(form.value.date, 'dd MMM yyyy')}${\n            form.value.duration < 12 * 60\n                ? ' at ' + format(form.value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                form.value,\n                this._options.getValue().type\n            );\n        }\n        if (form.value.duration >= 12 * 60 || form.value.all_day) {\n            form.patchValue({\n                date: set(form.value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        const { booking_type } = form.value;\n        this.clearForm();\n        this._form.getValue()?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        console.log('Selected Assets:', assets);\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form\n                .getValue()\n                .patchValue({\n                    ...form,\n                    user: user as any,\n                    asset_id: asset?.id,\n                    asset_name: asset.name,\n                    map_id: asset?.map_id || asset?.id,\n                    description: asset.name,\n                    zones: asset.zone\n                        ? [asset.zone?.parent_id, asset.zone?.id]\n                        : [],\n                });\n            console.log('Form Value:', this._form.getValue().value);\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: string\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser().email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        console.log('Assets:', assets, asset_list, id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n            console.log('Asset List:', asset_list);\n        }\n        return nearby_assets;\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n"]}