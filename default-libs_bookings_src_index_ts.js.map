{"version":3,"sources":["./libs/bookings/src/lib/desk-confirm-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/desk.service.ts","./node_modules/@angular/material/fesm2015/radio.js","./node_modules/dayjs/plugin/customParseFormat.js"],"names":["DeskConfirmModalComponent","_data","_settings","event","desks","this","date","host","can_set_date","reason","level","map","_","name","join","get","loading","emit","DeskQuestionsModalComponent","form","travelled","unwell","contact","markAllAsTouched","valid","Object","keys","value","find","key","failure","Booking","data","id","asset_id","zones","booking_start","getUnixTime","roundToNearestMinutes","addMinutes","Date","nearestTo","booking_end","duration","booking_type","type","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","approver_id","approver_email","approver_name","extension_data","access","all_day","status","isSameDay","start","end","addHours","isAfter","customParseFormat","hour","minute","subtract","startOf","BOOKINGS_ENDPOINT","queryBookings","q","query","pipe","list","item","showBooking","encodeURIComponent","saveBooking","method","updateBooking","createBooking","approveBooking","rejectBooking","checkinBooking","state","DesksService","_org","_dialog","error_on_host","attendees","levelWithID","zone","Array","ref","open","success","Promise","race","componentInstance","first","toPromise","afterClosed","close","desk_list","period_start","startOfDay","period_end","endOfDay","filter","d","toLowerCase","email","length","users","all","desk","idx","makeDeskBooking","valueOf","for_user","location","parent_id","booking_data","Math","floor","groups","_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","source","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","_radios","forEach","radio","_markForCheck","markForCheck","fn","isDisabled","disabled","ɵfac","t","ɵdir","inputs","labelPosition","required","outputs","ɵMatRadioGroup_BaseFactory","selectors","contentQueries","rf","ctx","dirIndex","MatRadioButton","_t","hostAttrs","exportAs","features","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","super","_uniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","options","origin","focusVia","_inputElement","nativeElement","focus","monitor","subscribe","focusOrigin","_touch","stopMonitoring","disableRipple","stopPropagation","groupValueChanged","_emitChangeEvent","String","undefined","viewQuery","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","ɵcmp","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","$event","_onInputChange","_onInputClick","_r0","inputId","_isRippleDisabled","directives","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports","module","exports","LTS","LT","L","LL","LLL","LLLL","e","n","replace","r","i","o","toUpperCase","slice","s","a","f","offset","match","u","indexOf","concat","h","meridiem","A","afternoon","S","milliseconds","SS","SSS","ss","m","mm","H","HH","hh","D","DD","Do","ordinal","day","M","MM","MMM","substr","Error","month","MMMM","Y","YY","year","YYYY","Z","ZZ","c","formats","regex","parser","exec","call","hours","minutes","seconds","l","getDate","p","getFullYear","getMonth","y","g","$","UTC","prototype","parse","utc","args","$u","$locale","Ls","$d","init","$L","locale","format","apply","isValid"],"mappings":"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","file":"default-libs_bookings_src_index_ts.js","sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, SettingsService } from '@placeos/common';\nimport { BuildingLevel, Desk } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\nexport interface DeskConfirmModalData {\n    host: User;\n    desks: Desk[];\n    date: number;\n    reason: string;\n    level: BuildingLevel;\n    can_set_date: boolean;\n}\n\n@Component({\n    selector: 'desk-flow-confirm-modal-component',\n    template: `\n        <header>\n            <h2>Confirm Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <i class=\"material-icons\">close</i>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"p-4\">\n                <div host class=\"flex flex-col\" *ngIf=\"can_set_host\">\n                    <label>Host</label>\n                    <a-user-search-field\n                        [(ngModel)]=\"host\"\n                    ></a-user-search-field>\n                </div>\n                <div date class=\"mb-4\">\n                    <label>Date</label>\n                    <div *ngIf=\"!can_set_date\">\n                        {{ date | date: 'mediumDate' }}\n                    </div>\n                    <a-date-field\n                        *ngIf=\"can_set_date\"\n                        [(ngModel)]=\"date\"\n                    ></a-date-field>\n                </div>\n                <div reason class=\"mb-4\" *ngIf=\"!hide_reason\">\n                    <label>Reason</label>\n                    <div>{{ reason || '~No set reason~' }}</div>\n                </div>\n                <p>\n                    Your desk{{ desks.length === 1 ? '' : 's' }} will be\n                    {{ desk_list }} on\n                    {{ level?.display_name || level?.name }}\n                </p>\n            </main>\n            <footer class=\"flex items-center justify-center p-2\">\n                <button mat-button (click)=\"confirm()\">Confirm</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main load class=\"flex flex-col p-12 items-center justify-center\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n        `,\n    ],\n})\nexport class DeskConfirmModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly desks = this._data.desks || [];\n\n    public date = this._data.date;\n    public host = this._data.host;\n\n    public readonly can_set_date = this._data.can_set_date;\n\n    public readonly reason = this._data.reason;\n\n    public readonly level = this._data.level;\n\n    public loading: string;\n\n    public get desk_list() {\n        return this.desks.map((_) => _.name).join(', ');\n    }\n\n    public get hide_reason() {\n        return !!this._settings.get('app.desks.hide_reason');\n    }\n\n    public get can_set_host() {\n        return !!this._settings.get('app.desks.can_set_host');\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskConfirmModalData,\n        private _settings: SettingsService\n    ) {}\n\n    public confirm() {\n        this.loading = 'Requesting desk booking...';\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.booking_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 2), {\n                        nearestTo: 5,\n                    })\n            );\n        this.booking_end =\n            data.booking_end ||\n            getUnixTime(addMinutes(this.booking_start * 1000, data.duration || 60));\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            differenceInMinutes(\n                this.booking_start * 1000,\n                this.booking_end * 1000\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? true;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { FormGroup } from '@angular/forms';\n\nimport { CateringItem } from '../../../catering/src/lib/catering-item.class';\nimport { HashMap, predictableRandomInt } from '@placeos/common';\nimport { generateMockUser } from '../../../users/src/lib/user.utilities';\n\nimport * as dayjs from 'dayjs';\nimport * as customParseFormat from 'dayjs/plugin/customParseFormat';\ndayjs.extend(customParseFormat);\n\nlet BOOKING_COUNT = 0;\nlet BOOKING_DATE = dayjs().hour(6).minute(0).subtract(1, 'd').startOf('m');\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = dayjs(time).startOf('m');\n}\n\nconst randomQuarterHours = () => predictableRandomInt(5, 2) * 15;\n\n/**\n * Create mock raw API data for a booking\n * @param override Overrides the properties of the generated booking with it's own\n */\nexport function generateMockBooking(override: HashMap = {}, resetDate = false) {\n    const id = `booking-${BOOKING_COUNT++}`;\n    if (resetDate) {\n        BOOKING_DATE = dayjs().hour(6).minute(0).startOf('m');\n    }\n    BOOKING_DATE = BOOKING_DATE.add(randomQuarterHours(), 'm');\n    const start = BOOKING_DATE.valueOf();\n    const duration = randomQuarterHours();\n    const cateringItem = new CateringItem({\n        id: 'Cappucino',\n        quantity: 5,\n    });\n    return {\n        id,\n        icaluid: predictableRandomInt(99_999_999),\n        title: `A Meeting ${predictableRandomInt(99)}`,\n        attendees: Array(predictableRandomInt(5) + 2)\n            .fill(0)\n            .map((i) => generateMockUser()),\n        organiser: generateMockUser(),\n        start_epoch: dayjs(start).unix(),\n        end_epoch: dayjs(start).add(duration, 'm').unix(),\n        date: start,\n        duration,\n        description: `A Description`,\n        notes: [{ type: 'other', message: `Some notes` }],\n        location: `Your City`,\n        catering: predictableRandomInt(34567) % 3 === 0,\n        extension_data: {\n            catering_order: [cateringItem],\n            catering_notes:\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Dui faucibus in ornare quam viverra orci. Metus dictum at tempor commodo ullamcorper a lacus.',\n        },\n        link:\n            predictableRandomInt(10) > 5\n                ? 'https://browser.zoom.fake/j/12'\n                : '',\n        room_ids: [],\n        ...override,\n    };\n}\n\nconst STORED_BOOKING_KEY = 'STAFF.booking_form';\nexport function storeBookingFormData(form: FormGroup) {\n    if (localStorage) {\n        const data = form ? form.value : {};\n        if (form && form.controls && form.controls.extension_data) {\n            data.extension_data = form.controls.extension_data.value;\n        }\n        localStorage.setItem(STORED_BOOKING_KEY, JSON.stringify(data));\n    }\n}\n\nexport function retrieveBookingFormData(): any {\n    let formData = {};\n    if (localStorage) {\n        const form_string = localStorage.getItem(STORED_BOOKING_KEY);\n        if (form_string) {\n            try {\n                formData = JSON.parse(form_string);\n            } catch (e) {}\n        }\n    }\n    return formData;\n}\n\nexport function clearBookingFormData() {\n    if (localStorage && !!retrieveBookingFormData()) {\n        localStorage.removeItem(STORED_BOOKING_KEY);\n    }\n}\n\nconst STORED_DESK_BOOKING_KEY = 'STAFF.desk_form';\nexport function storeDeskBookingFormData(form: FormGroup) {\n    if (localStorage) {\n        const data = form ? form.value : {};\n        if (form && form.controls && form.controls.extension_data) {\n            data.extension_data = form.controls.extension_data.value;\n        }\n        localStorage.setItem(STORED_DESK_BOOKING_KEY, JSON.stringify(data));\n    }\n}\n\nexport function retrieveDeskBookingFormData(): any {\n    let formData = {};\n    if (localStorage) {\n        const form_string = localStorage.getItem(STORED_DESK_BOOKING_KEY);\n        if (form_string) {\n            try {\n                formData = JSON.parse(form_string);\n            } catch (e) {}\n        }\n    }\n    return formData;\n}\n\nexport function clearDeskBookingFormData() {\n    if (localStorage && !!retrieveDeskBookingFormData()) {\n        localStorage.removeItem(STORED_DESK_BOOKING_KEY);\n    }\n}\n","import { del, get, patch, post, put } from \"@placeos/ts-client\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { toQueryString } from \"libs/common/src/lib/api\";\nimport { Booking } from \"./booking.class\";\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (\n    data: Partial<Booking>,\n) => (data.id ? updateBooking(data.id, data) : createBooking(data));\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { StaffUser, User } from '@placeos/users';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = /*@__PURE__*/ function () { let ɵMatRadioGroup_BaseFactory; return function MatRadioGroup_Factory(t) { return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup); }; }();\nMatRadioGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):t.dayjs_plugin_customParseFormat=e()}(this,function(){\"use strict\";var t={LTS:\"h:mm:ss A\",LT:\"h:mm A\",L:\"MM/DD/YYYY\",LL:\"MMMM D, YYYY\",LLL:\"MMMM D, YYYY h:mm A\",LLLL:\"dddd, MMMM D, YYYY h:mm A\"},e=function(e,n){return e.replace(/(\\[[^\\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(e,r,i){var o=i&&i.toUpperCase();return r||n[i]||t[i]||n[o].replace(/(\\[[^\\]]+])|(MMMM|MM|DD|dddd)/g,function(t,e,n){return e||n.slice(1)})})},n=/(\\[[^[]*\\])|([-:/.()\\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,r=/\\d\\d/,i=/\\d\\d?/,o=/\\d*[^\\s\\d-_:/()]+/,s={};var a=function(t){return function(e){this[t]=+e}},f=[/[+-]\\d\\d:?(\\d\\d)?/,function(t){(this.zone||(this.zone={})).offset=function(t){if(!t)return 0;var e=t.match(/([+-]|\\d\\d)/g),n=60*e[1]+(+e[2]||0);return 0===n?0:\"+\"===e[0]?-n:n}(t)}],u=function(t){var e=s[t];return e&&(e.indexOf?e:e.s.concat(e.f))},h=function(t,e){var n,r=s.meridiem;if(r){for(var i=1;i<=24;i+=1)if(t.indexOf(r(i,0,e))>-1){n=i>12;break}}else n=t===(e?\"pm\":\"PM\");return n},d={A:[o,function(t){this.afternoon=h(t,!1)}],a:[o,function(t){this.afternoon=h(t,!0)}],S:[/\\d/,function(t){this.milliseconds=100*+t}],SS:[r,function(t){this.milliseconds=10*+t}],SSS:[/\\d{3}/,function(t){this.milliseconds=+t}],s:[i,a(\"seconds\")],ss:[i,a(\"seconds\")],m:[i,a(\"minutes\")],mm:[i,a(\"minutes\")],H:[i,a(\"hours\")],h:[i,a(\"hours\")],HH:[i,a(\"hours\")],hh:[i,a(\"hours\")],D:[i,a(\"day\")],DD:[r,a(\"day\")],Do:[o,function(t){var e=s.ordinal,n=t.match(/\\d+/);if(this.day=n[0],e)for(var r=1;r<=31;r+=1)e(r).replace(/\\[|\\]/g,\"\")===t&&(this.day=r)}],M:[i,a(\"month\")],MM:[r,a(\"month\")],MMM:[o,function(t){var e=u(\"months\"),n=(u(\"monthsShort\")||e.map(function(t){return t.substr(0,3)})).indexOf(t)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[o,function(t){var e=u(\"months\").indexOf(t)+1;if(e<1)throw new Error;this.month=e%12||e}],Y:[/[+-]?\\d+/,a(\"year\")],YY:[r,function(t){t=+t,this.year=t+(t>68?1900:2e3)}],YYYY:[/\\d{4}/,a(\"year\")],Z:f,ZZ:f};var c=function(t,r,i){try{var o=function(t){for(var r=(t=e(t,s&&s.formats)).match(n),i=r.length,o=0;o<i;o+=1){var a=r[o],f=d[a],u=f&&f[0],h=f&&f[1];r[o]=h?{regex:u,parser:h}:a.replace(/^\\[|\\]$/g,\"\")}return function(t){for(var e={},n=0,o=0;n<i;n+=1){var s=r[n];if(\"string\"==typeof s)o+=s.length;else{var a=s.regex,f=s.parser,u=t.substr(o),h=a.exec(u)[0];f.call(e,h),t=t.replace(h,\"\")}}return function(t){var e=t.afternoon;if(void 0!==e){var n=t.hours;e?n<12&&(t.hours+=12):12===n&&(t.hours=0),delete t.afternoon}}(e),e}}(r)(t),a=o.year,f=o.month,u=o.day,h=o.hours,c=o.minutes,m=o.seconds,l=o.milliseconds,M=o.zone,Y=new Date,v=u||(a||f?1:Y.getDate()),p=a||Y.getFullYear(),D=0;a&&!f||(D=f>0?f-1:Y.getMonth());var y=h||0,L=c||0,g=m||0,$=l||0;return M?new Date(Date.UTC(p,D,v,y,L,g,$+60*M.offset*1e3)):i?new Date(Date.UTC(p,D,v,y,L,g,$)):new Date(p,D,v,y,L,g,$)}catch(t){return new Date(\"\")}};return function(t,e,n){n.p.customParseFormat=!0;var r=e.prototype,i=r.parse;r.parse=function(t){var e=t.date,r=t.utc,o=t.args;this.$u=r;var a=o[1];if(\"string\"==typeof a){var f=!0===o[2],u=!0===o[3],h=f||u,d=o[2];u&&(d=o[2]),s=this.$locale(),!f&&d&&(s=n.Ls[d]),this.$d=c(e,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),h&&e!==this.format(a)&&(this.$d=new Date(\"\")),s={}}else if(a instanceof Array)for(var m=a.length,l=1;l<=m;l+=1){o[1]=a[l-1];var M=n.apply(this,o);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}l===m&&(this.$d=new Date(\"\"))}else i.call(this,t)}}});\n"],"sourceRoot":"webpack:///"}