{"version":3,"sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js","./libs/bookings/src/lib/booking.utilities.ts"],"names":["DeskQuestionsModalComponent","event","this","form","travelled","unwell","contact","markAllAsTouched","valid","Object","keys","value","find","key","failure","emit","reason","Booking","data","id","asset_id","zones","booking_start","date","roundToNearestMinutes","addMinutes","Date","now","nearestTo","booking_end","duration","booking_type","type","Math","abs","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","approver_id","approver_email","approver_name","extension_data","access","all_day","status","isSameDay","start","end","addHours","isAfter","BOOKINGS_ENDPOINT","q","query","pipe","list","map","item","showBooking","encodeURIComponent","method","updateBooking","createBooking","approveBooking","rejectBooking","checkinBooking","state","BOOKING_URLS","BookingFormService","_router","_settings","_org","_dialog","super","_view","BehaviorSubject","_options","_form","_form_value","_booking","_loading","last_success","JSON","parse","sessionStorage","getItem","loading","asObservable","options","shareReplay","assets","distinctUntilChanged","x","y","switchMap","building","of","next","name","_","metadata","desks","details","Array","d","zone","tap","features","asset","forEach","push","sort","a","b","localeCompare","available_assets","combineLatest","debounceTime","period_start","period_end","zone_id","bookings","filter","bookable","every","includes","parent_id","bkn","grouped_availability","groups","asset_list","members","length","group","pop","subscription","events","subscribe","booking","url","clearForm","initialised","setOptions","getValue","asset_name","map_id","user","booked_by","booked_by_id","booked_by_email","valueChanges","v","booker","patchValue","email","emitEvent","generateBookingForm","storeForm","newForm","removeItem","setItem","stringify","checkQuestions","content","format","icon","postForm","catch","close","join","get","toPromise","allowed_bookings","set","hours","minutes","result","setView","ref","open","Promise","race","componentInstance","afterClosed"],"mappings":"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","file":"default-libs_bookings_src_index_ts.js","sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    startOfDay,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.date / 1000 ||\n            data.booking_start ||\n            getUnixTime(\n                roundToNearestMinutes(addMinutes(Date.now(), 5), {\n                    nearestTo: 5,\n                })\n            );\n        this.booking_end =\n            data.date / 1000 + data.duration * 60 ||\n            data.booking_end ||\n            getUnixTime(\n                addMinutes(this.booking_start * 1000, data.duration || 60)\n            );\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(\n                differenceInMinutes(\n                    this.booking_start * 1000,\n                    this.booking_end * 1000\n                )\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? this.duration > 12 * 60;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const asset of assets) {\n                asset.features?.forEach((_) => list.push(_));\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find((bkn) => bkn.asset_id === asset.id)\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content: `Would you like to book the ${options.type} ${\n                    form.value.asset_name\n                } for ${format(form.value.date, 'dd MMM yyyy')}${\n                    form.value.duration < 12 * 60\n                        ? ' at ' + format(form.value.date, 'h:mm a')\n                        : ''\n                }`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        await this.postForm().catch((_) => {\n            notifyError(_);\n            details.close();\n            throw _;\n        });\n        details.close();\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const asset_id = form.get('asset_id').value;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(form.value.date),\n            period_end: getUnixTime(\n                form.value.date + form.value.duration * 60 * 1000\n            ),\n            type: this._options.getValue().type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(\n                `app.booking.allowed_daily_${\n                    this._options.getValue().type\n                }_count`\n            ) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email ===\n                    (form.value.user_email || currentUser()?.email)\n            ).length >= allowed_bookings\n        ) {\n            throw `You already have a desk booked`;\n        }\n        if (form.value.duration > 23 * 60 || form.value.all_day) {\n            form.patchValue({\n                date: set(form.value.date, { hours: 12, minutes: 0 }),\n                duration: 60,\n            });\n        }\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        const { booking_type } = form.value;\n        this.clearForm();\n        this._form.getValue()?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking = {} as any) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        asset_name: new FormControl(booking.description),\n        map_id: new FormControl(booking.extension_data.map_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n"],"sourceRoot":"webpack:///"}