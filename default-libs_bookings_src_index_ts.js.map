{"version":3,"file":"default-libs_bookings_src_index_ts.js","mappings":"2aAOQA,iBAAwD,UAC5BA,kCAAsBA,QAC9CA,kBAAqC,UAArCA,CAAqC,WAGzBA,iEACKA,gBAAMA,aAACA,UAEhBA,6BAGC,yBACoCA,gBAAGA,QACpCA,+BAAkCA,eAAEA,YAG5CA,kBAAgC,YAExBA,2EACSA,iBAAMA,cAACA,UAEpBA,8BAA4D,yBACvBA,gBAAGA,QACpCA,+BAAkCA,eAAEA,YAG5CA,kBAA2B,YAEnBA,uEACSA,iBAAMA,cAACA,UAEpBA,+BAGC,yBACoCA,gBAAGA,QACpCA,+BAAkCA,eAAEA,cAIhDA,sBAAqD,gBAC9BA,yDAASA,oBAAUA,mBAAMA,UAEhDA,sBAA+C,WACjBA,kBAAKA,oCA1CjBA,mCAUYA,2BACAA,2BASAA,2BACAA,2BAYAA,2BACAA,mDAY9BA,mBAAoC,UAE5BA,wPAIJA,QACAA,qBAA+C,UACjBA,iBAAKA,aAoB5C,IAAMC,EAAb,MAAM,MAAOA,EA/EbC,cAgFqBC,WAAQ,IAAIC,MAEtBD,UAAO,IAAIE,KAAU,CACxBC,UAAW,IAAIC,KAAY,GAAI,CAACC,gBAChCC,OAAQ,IAAIF,KAAY,GAAI,CAACC,gBAC7BE,QAAS,IAAIH,KAAY,GAAI,CAACC,kBAI3BG,SACHR,KAAKS,KAAKC,mBACLV,KAAKS,KAAKE,MAIXC,OAAOC,KAAKb,KAAKS,KAAKK,OAAOC,KACxBC,IAC4B,IAAzBhB,KAAKS,KAAKK,MAAME,IACS,SAAzBhB,KAAKS,KAAKK,MAAME,IAGxBhB,KAAKiB,SAAU,EAGnBjB,KAAKkB,MAAMC,KAAK,CAAEC,OAAQ,UAZtBC,QAAY,oFAbXvB,8BAA2BwB,qnBA5EhCzB,yBA+CAA,kEA/CMA,yBAAgB,oTA4EjBC,GAAb,kOC9EM,YAA8ByB,EAAmB,IAAIC,KACvD,MAAMf,EAAO,IAAIP,KAAU,CACvBuB,GAAI,IAAIrB,KAAYmB,EAAQE,IAAM,IAClCC,KAAM,IAAItB,KAAYmB,EAAQG,KAAM,IACpCC,QAAS,IAAIvB,KAAYmB,EAAQI,UAAW,GAC5CC,SAAU,IAAIxB,KAAYmB,EAAQK,UAClCC,aAAc,IAAIzB,KAAYmB,EAAQM,cACtCC,MAAO,IAAI1B,KAAYmB,EAAQO,OAC/BC,MAAO,IAAI3B,KAAYmB,EAAQQ,OAC/BC,YAAa,IAAI5B,KAAYmB,EAAQS,aACrCC,SAAU,IAAI7B,KAAYmB,EAAQU,UAClCC,WAAY,IAAI9B,KAAYmB,EAAQS,aACpCG,OAAQ,IAAI/B,KAAYmB,EAAQa,gBAAgBD,QAChDE,KAAM,IAAIjC,MAAYkC,WACtBC,QAAS,IAAInC,KAAYmB,EAAQgB,SACjCC,WAAY,IAAIpC,KAAYmB,EAAQiB,YACpCC,UAAW,IAAIrC,MAAYkC,WAC3BI,aAAc,IAAItC,KAAYmB,EAAQmB,cACtCC,gBAAiB,IAAIvC,KAAYmB,EAAQoB,mBAE7ClC,SAAKmC,aAAaC,UAAWC,IACzB,MAAMT,EAAOS,EAAET,KACTU,EAASD,EAAEL,WACjBM,GAAUV,IACJ5B,EAAKuC,WACD,CACIT,QAASF,EAAKZ,IAAMsB,EAAOtB,GAC3Be,WAAYH,EAAKY,OAASF,EAAOtB,GACjCiB,aAAcK,EAAOtB,GACrBkB,gBAAiBI,EAAOE,OAE5B,CAAEC,WAAW,MAIpBzC,EAGJ,YAAP0C,kEAAO,UAAiCC,EAAiBC,EAA6BC,EAAqB,IACvG,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,MAAMC,SAAW,WACzBJ,EAAQG,MAAME,IAAM,UACpBL,EAAQG,MAAMG,MAAQ,SACtBN,EAAQG,MAAMI,OAAS,SACvBN,SAASO,KAAKC,YAAYT,GAC1B,MAAM9B,QAAWwC,QAAa,CAC1BC,IAAKd,EACLG,YAEEY,GAASC,QAAU3C,GACnB4C,GAAgC,iBAAhBhB,EAA2Bc,EAAOG,SAASjB,GAAeA,IAAgB,CAAEkB,EAAG,GAAIC,EAAG,IAC5G,IAAIC,EAAO,GACPC,EAAU,GACdC,QAAQC,IAAI,SAAUtB,GACtBqB,QAAQC,IAAI,YAAaT,EAAOG,UAChCK,QAAQC,IAAI,SAAUP,GACtB,UAAWQ,KAAQvB,EAAU,CACzB,MAAQiB,IAAGC,KAAML,EAAOG,SAASO,IAAS,CAAEN,EAAG,EAAGC,EAAG,GAC/CM,EAAIC,KAAKC,MAAMT,EAAIF,EAAME,IAAMA,EAAIF,EAAME,IAAMC,EAAIH,EAAMG,IAAMA,EAAIH,EAAMG,IAC/EG,QAAQC,IAAI,QAAQC,KAASV,EAAOG,SAASO,GAAOC,GAChDA,EAAIL,IACJA,EAAOK,EACPJ,EAAUG,GAGlBrB,gBAASO,KAAKkB,YAAY1B,IAC1B2B,QAAazD,GACNiD,wCCnCX,MAAMS,GAAe,CAAC,cA+Bf,IAAMC,GAAb,MAAM,MAAOA,UAA2BC,KA2JpCtF,YACYuF,EACAC,EACAC,EACAC,GAERC,QALQ1F,eACAA,iBACAA,YACAA,eA9JJA,WAAQ,IAAI2F,IAAiC,QAC7C3F,cAAW,IAAI2F,IAAoC,CACvDC,KAAM,SAEF5F,WAAQ,IAAI2F,IAAgBE,MAC5B7F,iBAAc,IAAI2F,IAAkC,IACpD3F,cAAW,IAAI2F,IAAyB,MACxC3F,cAAW,IAAI2F,IAAwB,IAExC3F,kBAAwB,IAAIwB,IAC/BsE,KAAKC,MACDC,eAAeC,QAAQ,gCAAkC,OAGjDjG,aAAUA,KAAKkG,SAASC,eACxBnG,aAAUA,KAAKoG,SAASC,MAAKC,OAAY,IAEzCtG,YAAqCA,KAAKuG,QAAQF,KCrF/D,YAAiCrF,EAAKwF,GACzC,OAAOC,QAAqB,CAAClC,EAAGC,IAAMgC,EAAUA,EAAQjC,EAAEvD,GAAMwD,EAAExD,IAAQuD,EAAEvD,KAASwD,EAAExD,IDqFnF0F,CAAwB,YACxBC,QAAU,EAAGf,UACJ5F,KAAKwF,KAAKoB,UAEN,SADDhB,GAEA5F,KAAKkG,SAASW,KAAK,qBACZC,UAAkB9G,KAAKwF,KAAKoB,SAASnF,GAAI,CAC5CsF,KAAM,UACPV,MACCW,OAAKC,IACDC,QACID,EAAKD,IAAKG,IACLA,EAAEC,SAASC,OAAOC,mBAAmBC,MAChCJ,EAAEC,SAASC,OAAOC,QAClB,IACJN,IAAKlC,IAAO,IAAKA,EAAG0C,KAAML,EAAEK,cAbtBC,QAAG,MAqBvCC,OAAI,IAAM1H,KAAKkG,SAASW,KAAK,MAC7BP,OAAY,IAGAtG,cAAiCA,KAAK2H,OAAOtB,MACzDW,OAAKW,IACD,MAAMC,EAAiB,GACvB,UAAaC,cAAcF,EACvBE,aAAoBN,OACdM,EAASC,QAASX,GAAMS,EAAKG,KAAKZ,IAG5C,OAAOa,QAAOJ,GAAMK,KAAK,CAACC,EAAGC,IAAMD,EAAEE,cAAcD,OAEvD7B,OAAY,IAGAtG,uBAAmBqI,SAAc,CAC7CrI,KAAKuG,QACLvG,KAAK2H,OACL3H,KAAKsI,cACNjC,MACCkC,QAAa,MACbb,OAAI,GAAI9B,WACJ5F,KAAKkG,SAASW,KAAK,YAAYjB,uBAEnCe,QAAU,EAAEJ,EAASoB,EAAQlH,MACzB+H,QAAc,CACVC,cAAcC,OAAYjI,EAAKiB,MAC/BiH,YAAYD,QACRE,QAAWnI,EAAKiB,KAAMjB,EAAKmB,UAAY,OAE3CgE,KAAMW,EAAQX,KACd9D,MAAOyE,EAAQsC,UAChBxC,MACCW,OAAK8B,GACDnB,EAAOoB,OACFC,IACsB,IAAnBA,EAAMC,YACJ1C,EAAQsB,UACNtB,EAAQsB,UAAUqB,MAAO/B,GACrB6B,EAAMnB,SAASsB,SAAShC,QAE9BZ,EAAQsC,SACNtC,EAAQsC,UAAYG,EAAMxB,MAAM/F,IAChC8E,EAAQsC,UAAYG,EAAMxB,MAAM4B,aACnCN,EAAS/H,KACLsI,GACGA,EAAIpH,WAAa+G,EAAMvH,IACR,aAAf4H,EAAIC,aAMhC5B,OAAI,IAAM1H,KAAKkG,SAASW,KAAK,MAC7BP,OAAY,IAGAtG,2BAAuBqI,SAAc,CACjDrI,KAAKuG,QACLvG,KAAKuJ,mBACNlD,MACCW,OAAI,EAAET,EAASoB,MACX,MAAM6B,EAAS,GACTC,EAAa,IAAI9B,GAAQM,KAAK,CAACC,EAAGC,IACpCD,EAAEV,MAAM/F,IAAI2G,cAAcD,EAAEX,MAAM/F,KAEhCiI,EAAUnD,EAAQmD,SAASC,OAC3BpD,EAAQmD,QACR,EAACpH,WACP,KAAOmH,EAAWE,QAAQ,CACtB,MAAMC,EAAQ,GACd,IAAIZ,EAAQS,EAAWI,MACvB,KAAOD,EAAMD,OAASD,EAAQC,UAEtBC,EAAMD,QACLC,EAAM7I,KAAMoG,GAAMA,EAAEK,MAAM/F,KAAOuH,EAAMxB,MAAM/F,MAIlDmI,EAAM7B,KAAKiB,GACXA,EAAQS,EAAWI,MAEnBD,EAAMD,OAASD,EAAQC,QAC3BH,EAAOzB,KAAK6B,GAEhB,OAAOJ,KAiCXxJ,KAAK8J,aACD,kBACA9J,KAAKsF,QAAQyE,OAAOlH,UAAWtB,IAEvBA,aAAmByI,OAClB7E,GAAapE,KAAMoG,GAAM5F,EAAQ2C,IAAIiF,SAAShC,KAE/CnH,KAAKiK,eAIjBjK,KAAKwF,KAAK0E,YACL7D,MAAK8D,QAAOhD,GAAMA,IAClBtE,UAAU,IAAM7C,KAAKoK,WAAW,KA1C9BC,WACP,OAAOrK,KAAKsK,MAAMC,WAGX9J,WACP,OAAOT,KAAKwK,MAAMD,WAGXhJ,cACP,OAAOvB,KAAKyK,SAASF,WAGlBG,QAAQnJ,EAAmB,IAAIC,KAClCxB,KAAKwK,MAAM3D,KAAKhB,GAAoBtE,IACpCvB,KAAK8J,aACD,cACA9J,KAAKwK,MAAMD,WAAW3H,aAAaC,UAAU,IAAM7C,KAAK2K,cAE5D3K,KAAKyK,SAAS5D,KAAKtF,GACnBvB,KAAKoG,SAASS,KAAK,CAAEjB,KAAM5F,KAAKoG,SAASmE,WAAW3E,OA0BjDgF,QAAQ9J,GACXd,KAAKsK,MAAMzD,KAAK/F,GAGbsJ,WAAWtJ,GACdd,KAAKoG,SAASS,KAAK,IAAK7G,KAAKoG,SAASmE,cAAezJ,IAGlD+J,YACE7K,KAAKwK,MAAMD,YAAYvK,KAAK0K,UACjC,MAAMnJ,EAAUvB,KAAKyK,SAASF,WAC9BvK,KAAKwK,MAAMD,WAAWvH,WAAW,IACzBzB,GAAW,MACXA,GAASa,gBAAkB,KAEnCpC,KAAKoG,SAASS,KAAK,CAAEjB,KAAM5F,KAAKoG,SAASmE,WAAW3E,OAGjDqE,YACHjE,eAAe8E,WAAW,wBAC1B9E,eAAe8E,WAAW,gCAC1B9K,KAAK0K,UAGFC,YACH3E,eAAe+E,QACX,uBACAjF,KAAKkF,UAAUhL,KAAKwK,MAAMD,YAAYzJ,OAAS,KAEnDkF,eAAe+E,QACX,+BACAjF,KAAKkF,UAAUhL,KAAKoG,SAASmE,YAAc,KAE/CvK,KAAKsI,YAAYzB,KAAK7G,KAAKwK,MAAMD,YAAYzJ,OAAS,IAGnDmK,WACEjL,KAAKwK,MAAMD,YAAYvK,KAAK0K,UACjC1K,KAAKwK,MAAMD,WAAWvH,WAAW,IAC1B8C,KAAKC,MACJC,eAAeC,QAAQ,yBAA2B,QAG1DjG,KAAKoK,WAAW,CACZvB,QAAS7I,KAAKwF,KAAKoB,UAAUnF,MAC1BqE,KAAKC,MACJC,eAAeC,QAAQ,iCAAmC,QAKzDiF,cAAW,2CACdC,EAAKC,iBACX,MAAM7E,EAAU4E,EAAK/E,SAASmE,WACxB9J,EAAO0K,EAAKX,MAAMD,WACxB,IAAIc,EAAU,8BAA8B9E,EAAQX,QAChDnF,EAAKK,MAAMoB,mBACPoJ,OAAO7K,EAAKK,MAAMY,KAAM,iBAC5BjB,EAAKK,MAAMc,SAAW,IAChB,QAAS0J,OAAO7K,EAAKK,MAAMY,KAAM,UACjC,KAEN6E,EAAQqD,QACRyB,EAAU,GAAGA,6EAEjB,MAAM/D,QAAgBiE,QAClB,CACIxJ,MAAO,QAAQwE,EAAQX,OACvByF,UACAG,KAAM,CAAEH,QAAS,oBAErBF,EAAK1F,SAET,GAAwB,SAApB6B,GAASlG,OAAmB,KAAM,iBACtCkG,EAAQmE,QAAQ,iCAChBC,EAAY9B,YACFuB,EAAKQ,mBAAmBC,MAAOzE,IACjC9F,cAAY8F,GACZG,EAAQuE,QACF1E,UAGJgE,EAAKW,WAAWF,MAAOzE,IACzB9F,cAAY8F,GACZG,EAAQuE,QACF1E,IAEdG,EAAQuE,SApCY,GAuCXC,SAASC,GAAe,GAAK,qCACtC,MAAMtL,EAAOiL,EAAKlB,MAAMD,WACxB,IAAK9J,EAAM,KAAM,sBACjB,IAAKA,EAAKE,MACN,KAAM,mCAAkCqL,QAAiBvL,GAAMwL,KAC3D,SAEHF,UACKL,EAAKQ,uBACPzL,EAAKK,MACL4K,EAAKtF,SAASmE,WAAW3E,QAG7BnF,EAAKK,MAAMc,UAAY,KAAWnB,EAAKK,MAAMa,UAC7ClB,EAAKuC,WAAW,CACZtB,MAAMyK,QAAI1L,EAAKK,MAAMY,KAAM,CAAE0K,MAAO,GAAIC,QAAS,KAAMC,UACvD1K,SAAU,MAGlB,MAAM2K,QAAeC,QAAY,IAAIhL,IAAQf,EAAKK,QAAQ2L,aAClD5K,gBAAiBpB,EAAKK,MAC9B,SAAKmJ,YACLyB,EAAKlB,MAAMD,YAAYvH,WAAW,CAAEnB,iBACpC6J,EAAKgB,aAAeH,EACpBvG,eAAe+E,QACX,8BACAjF,KAAKkF,UAAUuB,IAEnBb,EAAKd,QAAQ,WACN2B,GA7B+B,GAgC7BZ,mBAAgB,qCACzB,MAAQjC,UAASE,QAAOhE,QAASuF,EAAK/E,SAASmE,WAC/C,IAAKX,EAAO,KAAM,iCAClB,MAAM+C,EAAgBjD,EAAQX,OACzB5B,GAAMA,EAAElE,SAAUX,UAAcW,OAErC,GAAI0J,EAAchD,QAAU,EACxB,KAAM,wCACV,MAAMlJ,EAAO0K,EAAKX,MAAMD,WAAWzJ,MAC7B2I,QAAmB0B,EAAK5B,iBACzBlD,MAAKuG,QAAK,IACVH,YACCI,EAAepD,EAAW1I,KAC3BoG,GAAMA,EAAE1F,KAAOhB,EAAKwB,UAAYkF,EAAEhF,SAAW1B,EAAKwB,UAEjD6K,EAAQ3B,EAAK3F,KAAKuH,YAAY,CAACF,EAAarF,MAAM/F,KAClDkG,EAAS,CACXkF,WACU1B,EAAK6B,oBACXF,EAAM3K,OACN1B,EAAKwB,SACLwH,EACAkD,EAAchD,SAGtBhF,QAAQC,IAAI,mBAAoB+C,GAChC,MAAMsF,EAAgB,EAAC3K,aAAkBqK,SACnCO,QAAQC,IACVF,EAAcjG,IAAI,CAACG,EAAGiG,IAClBjC,EAAKe,uBACD,IACOzL,EACHwB,SAAU0F,EAAOyF,GAAKjL,QAAUwF,EAAOyF,GAAK3L,GAC5Ce,WAAY2E,EAAElE,OAElB2C,KAIZ,QAASyH,EAAI,EAAGA,EAAIJ,EAActD,OAAQ0D,IAAK,CAC3C,MAAMhL,EAAO4K,EAAcI,GACrBrE,EAAQrB,EAAO0F,GACrBlC,EAAKX,MACAD,WACAvH,WAAW,IACLvC,EACH4B,KAAMA,EACNJ,SAAU+G,GAAOvH,GACjBS,WAAY8G,EAAMjC,KAClB5E,OAAQ6G,GAAO7G,QAAU6G,GAAOvH,GAChCO,YAAagH,EAAMjC,KACnBjF,MAAOkH,EAAMxB,KACP,CAACwB,EAAMxB,MAAM4B,UAAWJ,EAAMxB,MAAM/F,IACpC,KAEdkD,QAAQC,IAAI,cAAeuG,EAAKX,MAAMD,WAAWzJ,OACjDqK,EAAKW,UAAS,KAxDO,GA4DfV,iBAAc,qCACxB,IAAyD,IAArDD,EAAK5F,UAAU+H,IAAI,8BAAyC,OAChE,MAAMC,EAAMpC,EAAK1F,QAAQ+H,KAAK1N,GAO9B,GAAuB,gBANFoN,QAAQO,KAAK,CAC9BF,EAAIG,kBAAkBxM,MACjBmF,MAAK8D,QAAOhD,GAAmB,SAAbA,EAAE/F,SACpBqL,YACLc,EAAII,cAAclB,gBAEVrL,OAAmB,KAAM,iBACrC,MAAMX,EAAO8M,EAAIG,kBAAkBjN,KAAKK,MACxC,UAAWE,KAAOP,EACd,GAAIA,EAAKO,GAAM,KAAM,2BAEzBuM,EAAI1B,SAdoB,GAkBdK,wBACRjK,WAAUP,OAAME,WAAUY,aAAYb,WACxCiE,GAAY,qCAEZhE,EAAWD,EAAU,IAAUC,GAAY,GAC3C,MAAMkH,QAAiBN,QAAc,CACjCC,cAAcC,OAAYhH,GAC1BiH,YAAYD,OAAYhH,EAAkB,GAAXE,EAAgB,KAC/CgE,SACD6G,YACH,GAAI3D,EAAS/H,KAAMoG,GAAMA,EAAElF,WAAaA,GACpC,KAAM,GAAGA,0CAEb,MAAM2L,EACFC,EAAKtI,UAAU+H,IAAI,6BAA6B1H,YAAiB,EACrE,GACIgI,EAAmB,GACnB9E,EAASC,OACJ5B,GACGA,EAAE3E,cAAgBA,IAAcF,WAAeW,QAClC,aAAbkE,EAAEmC,QACRK,QAAUiE,EACd,CACE,MAAME,EAAUtL,KAAeF,UAAcW,MAC7C,KAAM,GAAG6K,EAAU,MAAQtL,aACvBsL,EAAU,OAAS,sBAG3B,OAAO,GA1BK,GA6BFd,oBACV5J,EACA3B,EACAkG,EACAoG,GAAa,0BAEb,MAAMC,EAAgB,GACtB,IAAIvE,EAAa9B,EAAOoB,OAAQ5B,GAAMA,EAAE1F,KAAOA,GAAM0F,EAAEhF,SAAWV,GAClEkD,QAAQC,IAAI,UAAW+C,EAAQ8B,EAAYhI,GAC3C,QAAS4L,EAAI,EAAGA,EAAIU,EAAOV,IAAK,CAC5B,MAAMY,QAAaC,GACf9K,EACA3B,EACAgI,EAAWzC,IAAKG,GAAMA,EAAEhF,QAAUgF,EAAE1F,KAEpCwM,IACAD,EAAcjG,KACVJ,EAAO5G,KAAMoG,GAAMA,EAAE1F,KAAOwM,GAAQ9G,EAAEhF,SAAW8L,IAErDxE,EAAaA,EAAWV,OACnB5B,GAAMA,EAAE1F,KAAOwM,GAAQ9G,EAAEhF,SAAW8L,IAG7CtJ,QAAQC,IAAI,cAAe6E,GAE/B,OAAOuE,GArBM,iDA7ZR5I,GAAkBvF,6EAAlBuF,EAAkB+I,QAAlB/I,EAAkB,qBAFf,SAEHA,GAAb,8GEtDM,MAAO5D,EA8DTzB,YAAYkH,EAAyB,IACjCjH,KAAKyB,GAAKwF,EAAKxF,IAAM,GACrBzB,KAAKiC,SAAWgF,EAAKhF,UAAY,GACjCjC,KAAKkC,WAAa+E,EAAK/E,YAAc+E,EAAK7E,gBAAgBF,YAAc,GACxElC,KAAK8B,MAAQmF,EAAKnF,OAAS,GAC3B9B,KAAKoO,cACDnH,EAAKvF,KAAO,KACZuF,EAAKmH,gBACL1F,QACI2F,QAAsBzF,OAAW0F,KAAKC,MAAO,GAAI,CAC7CC,UAAW,KAGvBxO,KAAKyO,YACDxH,EAAKvF,KAAO,IAAuB,GAAhBuF,EAAKrF,UACxBqF,EAAKwH,cACL/F,QACIE,OAAgC,IAArB5I,KAAKoO,cAAsBnH,EAAKrF,UAAY,KAE/D5B,KAAK6B,aAAeoF,EAAKpF,cAAgB,GACzC7B,KAAK4F,KAAOqB,EAAKrB,MAAQ,UACzB5F,KAAK0B,KAAOuF,EAAKvF,MAA6B,IAArB1B,KAAKoO,cAC9BpO,KAAK4B,SACDqF,EAAKrF,UACLmD,KAAK2J,KACDC,OACyB,IAArB3O,KAAKoO,cACc,IAAnBpO,KAAKyO,cAGjBzO,KAAK4O,SACD3H,EAAK2H,UAAYC,KAAKC,iBAAiBC,kBAAkBC,SAC7DhP,KAAKwC,WAAayE,EAAKzE,YAAc,GACrCxC,KAAKuC,QAAU0E,EAAK1E,SAAW,GAC/BvC,KAAKiP,UAAYhI,EAAKgI,WAAa,GACnCjP,KAAK+B,MAAQkF,EAAKlF,OAAS,eAC3B/B,KAAKgC,YAAciF,EAAKjF,aAAe,GACvChC,KAAKkP,aAAejI,EAAKiI,WACzBlP,KAAKmP,WAAalI,EAAKkI,SACvBnP,KAAKoP,WAAanI,EAAKmI,SACvBpP,KAAKqP,UAAYpI,EAAKoI,QACtBrP,KAAK0C,aAAeuE,EAAKvE,cAAgB,GACzC1C,KAAKsP,eAAiBrI,EAAKqI,gBAAkB,GAC7CtP,KAAK2C,gBAAkBsE,EAAKtE,iBAAmB,GAC/C3C,KAAKuP,YAActI,EAAKsI,aAAe,GACvCvP,KAAKwP,eAAiBvI,EAAKuI,gBAAkB,GAC7CxP,KAAKyP,cAAgBxI,EAAKwI,eAAiB,GAC3CzP,KAAKoC,eAAiB6E,EAAK7E,gBAAkB,GAC7CpC,KAAK0P,SAAWzI,EAAK7E,gBAAgBsN,OACrC1P,KAAK2B,QAAUsF,EAAKtF,SAAW3B,KAAK4B,SAAW,IAC/C5B,KAAKsJ,OAAStJ,KAAKmP,SACb,WACAnP,KAAKoP,SACL,WACA,YACN,UAAWpO,KAAOiG,EACRjG,KAAOhB,OACTA,KAAKoC,eAAepB,GAChBiG,EAAKjG,IAAQhB,KAAKoC,eAAepB,IAK1C2O,SACH,MAAM1I,EAAO,IAAKjH,MAClB,OAAKA,KAAKyB,WAAWwF,EAAKxF,UACnBwF,EAAKvF,YACLuF,EAAKrF,SACLqF,EAGA2I,eACP,OAAO5P,KAAKgC,YAIL6N,eACP,OAAOC,OAAU9P,KAAK0B,KAAM,IAAI4M,MAIzByB,cACP,MAAMC,EAAQ,IAAI1B,KACZ2B,EAAMjQ,KAAK2B,SACXuO,OAASlQ,KAAK0B,KAAM,KACpBkH,OAAW5I,KAAK0B,KAAM1B,KAAK4B,UACjC,OAAOuO,OAAQH,EAAOC,4JC5I9B,MAAMG,EAAoB,yBAMpB,WAAwBC,GAC1B,MAAMC,GAAQC,OAAcF,GAC5B,OAAO/C,SAAI,GAAG8C,IAAoBE,EAAQ,IAAMA,EAAQ,MAAMjK,MAC1DW,OAAKY,GAASA,EAAKZ,IAAKiH,GAAS,IAAIzM,IAAQyM,MAC7CuC,OAAWrJ,IAAKM,QAAG,MASrB,WAAsBhG,GACxB,OAAO6L,SAAI,GAAG8C,KAAqBK,mBAAmBhP,MAAO4E,MACzDW,OAAKiH,GAAS,IAAIzM,IAAQyM,KAoB5B,WACFxM,EACAwF,EACAyJ,EAA0B,SAE1B,OAAmB,UAAXA,EAAqBC,MAAQC,OACjC,GAAGR,KAAqBK,mBAAmBhP,KAC3CwF,GACFZ,MAAKW,OAAKiH,GAAS,IAAIzM,IAAQyM,KAQ9B,MAAMzB,EAAevF,GACxBA,EAAKxF,GAAKoP,EAAc5J,EAAKxF,GAAIwF,GA7B/B,WAAwBA,GAC1B,OAAO6J,SAAK,GAAGV,IAAqBnJ,GAAMZ,MACtCW,OAAKiH,GAAS,IAAIzM,IAAQyM,KA2BW8C,CAAc9J,GAkBrD,WAAyBxF,GAC3B,OAAOqP,SACH,GAAGV,KAAqBK,mBAAmBhP,aAC3C,IACF4E,MAAKW,OAAKiH,GAAS,IAAIzM,IAAQyM,KAQ/B,WAAwBxM,GAC1B,OAAOqP,SACH,GAAGV,KAAqBK,mBAAmBhP,YAC3C,IACF4E,MAAKW,OAAKiH,GAAS,IAAIzM,IAAQyM,KAQ/B,WAAyBxM,EAAYuP,GACvC,MAAMV,GAAQC,OAAc,CAAES,UAC9B,OAAOF,SACH,GAAGV,KAAqBK,mBAAmBhP,eAAgB6O,IAC3D,IACFjK,MAAKW,OAAKiH,GAAS,IAAIzM,IAAQyM","names":["i0","DeskQuestionsModalComponent","constructor","this","EventEmitter","FormGroup","travelled","FormControl","Validators","unwell","contact","submit","form","markAllAsTouched","valid","Object","keys","value","find","key","failure","event","emit","reason","notifyError","selectors","booking","Booking","id","date","all_day","duration","booking_type","zones","title","description","asset_id","asset_name","map_id","extension_data","user","currentUser","user_id","user_email","booked_by","booked_by_id","booked_by_email","valueChanges","subscribe","v","booker","patchValue","email","emitEvent","o","map_url","centered_at","desk_ids","element","document","createElement","style","position","top","width","height","body","appendChild","createViewer","url","viewer","getViewer","point","mappings","x","y","dist","closest","console","log","desk","d","Math","sqrt","removeChild","removeViewer","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","type","generateBookingForm","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","compare","distinctUntilChanged","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","name","map","data","flatten","_","metadata","desks","details","Array","zone","of","tap","assets","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form_value","debounceTime","queryBookings","period_start","getUnixTime","period_end","addMinutes","zone_id","bookings","filter","asset","bookable","every","includes","parent_id","bkn","status","available_assets","groups","asset_list","members","length","group","pop","subscription","events","NavigationEnd","clearForm","initialised","first","setOptions","view","_view","getValue","_form","_booking","newForm","storeForm","setView","resetForm","removeItem","setItem","stringify","loadForm","confirmPost","t","checkQuestions","content","format","openConfirmModal","icon","loading","n","postFormForGroup","catch","close","postForm","ignore_check","getInvalidFields","join","checkResourceAvailable","set","hours","minutes","valueOf","result","saveBooking","toPromise","last_success","extra_members","take","active_asset","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","i","get","ref","open","race","componentInstance","afterClosed","allowed_bookings","m","current","count","nearby_assets","item","findNearbyFeature","factory","booking_start","roundToNearestMinutes","Date","now","nearestTo","booking_end","abs","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_name","checked_in","rejected","approved","deleted","booked_by_name","approver_id","approver_email","approver_name","access","toJSON","location","is_today","isSameDay","is_done","start","end","addHours","isAfter","BOOKINGS_ENDPOINT","q","query","toQueryString","catchError","encodeURIComponent","method","patch","put","updateBooking","post","createBooking","state"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl('', [Validators.required]),\n        unwell: new FormControl('', [Validators.required]),\n        contact: new FormControl('', [Validators.required]),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { createViewer, getViewer, Point, removeViewer } from '@placeos/svg-viewer';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking = new Booking()) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        all_day: new FormControl(booking.all_day ?? false),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        asset_name: new FormControl(booking.description),\n        map_id: new FormControl(booking.extension_data?.map_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n\nexport async function findNearbyFeature(map_url: string, centered_at: Point | string, desk_ids: string[] = []): Promise<string> {\n    const element = document.createElement('div');\n    element.style.position = 'absolute';\n    element.style.top = '-9999px';\n    element.style.width = '1000px';\n    element.style.height = '1000px';\n    document.body.appendChild(element);\n    const id = await createViewer({\n        url: map_url,\n        element\n    });\n    const viewer = getViewer(id);\n    const point = (typeof centered_at === 'string' ? viewer.mappings[centered_at] : centered_at) || { x: .5, y: .5 };\n    let dist = 10;\n    let closest = '';\n    console.log(`Desks:`, desk_ids);\n    console.log(`Mappings:`, viewer.mappings);\n    console.log(`Point:`, point);\n    for (const desk of desk_ids) {\n        const { x, y } = viewer.mappings[desk] || { x: 2, y: 2 };\n        const d = Math.sqrt((x - point.x) * (x - point.x) + (y - point.y) * (y - point.y));\n        console.log(`Desk ${desk}:`, viewer.mappings[desk], d);\n        if (d < dist) {\n            dist = d;\n            closest = desk;\n        }\n    }\n    document.body.removeChild(element);\n    removeViewer(id);\n    return closest;\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        let content = `Would you like to book the ${options.type} ${\n            form.value.asset_name\n        } for ${format(form.value.date, 'dd MMM yyyy')}${\n            form.value.duration < 12 * 60\n                ? ' at ' + format(form.value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                form.value,\n                this._options.getValue().type\n            );\n        }\n        if (form.value.duration >= 12 * 60 || form.value.all_day) {\n            form.patchValue({\n                date: set(form.value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        const { booking_type } = form.value;\n        this.clearForm();\n        this._form.getValue()?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        console.log('Selected Assets:', assets);\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form\n                .getValue()\n                .patchValue({\n                    ...form,\n                    user: user as any,\n                    asset_id: asset?.id,\n                    asset_name: asset.name,\n                    map_id: asset?.map_id || asset?.id,\n                    description: asset.name,\n                    zones: asset.zone\n                        ? [asset.zone?.parent_id, asset.zone?.id]\n                        : [],\n                });\n            console.log('Form Value:', this._form.getValue().value);\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: string\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser().email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        console.log('Assets:', assets, asset_list, id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n            console.log('Asset List:', asset_list);\n        }\n        return nearby_assets;\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    startOfDay,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Name of the physical asset assocated with the booking */\n    public readonly asset_name: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n    /** New deleted field */\n    public readonly deleted: boolean;\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.asset_name = data.asset_name || data.extension_data?.asset_name || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.date / 1000 ||\n            data.booking_start ||\n            getUnixTime(\n                roundToNearestMinutes(addMinutes(Date.now(), 5), {\n                    nearestTo: 5,\n                })\n            );\n        this.booking_end =\n            data.date / 1000 + data.duration * 60 ||\n            data.booking_end ||\n            getUnixTime(\n                addMinutes(this.booking_start * 1000, data.duration || 60)\n            );\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(\n                differenceInMinutes(\n                    this.booking_start * 1000,\n                    this.booking_end * 1000\n                )\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.deleted = !!data.deleted;\n        this.booked_by_id = data.booked_by_id || '';\n        this.booked_by_name = data.booked_by_name || '';\n        this.booked_by_email = data.booked_by_email || '';\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? this.duration > 12 * 60;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item))),\n        catchError(_ => of([]))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n"]}