{"version":3,"mappings":"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","names":["i0","ctx_r3","DeskQuestionsModalComponent","constructor","this","EventEmitter","ngOnInit","form","FormGroup","travelled","FormControl","Validators","unwell","contact","submit","markAllAsTouched","valid","Object","keys","value","find","key","failure","event","emit","reason","notifyError","selectors","data","id","asset_id","zones","booking_start","date","getUnixTime","roundToNearestMinutes","addMinutes","Date","now","nearestTo","booking_end","duration","booking_type","type","Math","abs","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","approver_id","approver_email","approver_name","extension_data","access","t","_a","all_day","i","_b","status","toJSON","location","is_today","isSameDay","is_done","start","end","addHours","isAfter","BOOKINGS_ENDPOINT","q","query","toQueryString","get","pipe","map","list","item","Booking","encodeURIComponent","method","patch","put","saveBooking","updateBooking","post","createBooking","state","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","shareReplay","options","compare","distinctUntilChanged","x","y","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","name","flatten","_","f","metadata","desks","details","Array","d","zone","of","tap","assets","asset","g","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form_value","debounceTime","queryBookings","period_start","period_end","zone_id","bookings","filter","bookable","every","includes","h","_c","parent_id","bkn","available_assets","groups","asset_list","m","C","members","u","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","_form","_booking","newForm","asset_name","map_id","user","booked_by","booked_by_id","booked_by_email","valueChanges","v","booker","patchValue","email","emitEvent","generateBookingForm","storeForm","setView","resetForm","removeItem","setItem","stringify","loadForm","confirmPost","checkQuestions","openConfirmModal","content","format","icon","s","loading","postForm","catch","close","getInvalidFields","join","toPromise","allowed_bookings","set","hours","minutes","result","last_success","ref","open","Promise","race","componentInstance","afterClosed","factory"],"sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js","./libs/bookings/src/lib/booking.utilities.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    startOfDay,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.date / 1000 ||\n            data.booking_start ||\n            getUnixTime(\n                roundToNearestMinutes(addMinutes(Date.now(), 5), {\n                    nearestTo: 5,\n                })\n            );\n        this.booking_end =\n            data.date / 1000 + data.duration * 60 ||\n            data.booking_end ||\n            getUnixTime(\n                addMinutes(this.booking_start * 1000, data.duration || 60)\n            );\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(\n                differenceInMinutes(\n                    this.booking_start * 1000,\n                    this.booking_end * 1000\n                )\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? this.duration > 12 * 60;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const asset of assets) {\n                asset.features?.forEach((_) => list.push(_));\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find((bkn) => bkn.asset_id === asset.id && bkn.status !== 'declined')\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content: `Would you like to book the ${options.type} ${\n                    form.value.asset_name\n                } for ${format(form.value.date, 'dd MMM yyyy')}${\n                    form.value.duration < 12 * 60\n                        ? ' at ' + format(form.value.date, 'h:mm a')\n                        : ''\n                }`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        await this.postForm().catch((_) => {\n            notifyError(_);\n            details.close();\n            throw _;\n        });\n        details.close();\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const asset_id = form.get('asset_id').value;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(form.value.date),\n            period_end: getUnixTime(\n                form.value.date + form.value.duration * 60 * 1000\n            ),\n            type: this._options.getValue().type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(\n                `app.booking.allowed_daily_${\n                    this._options.getValue().type\n                }_count`\n            ) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email ===\n                        (form.value.user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            throw `You already have a desk booked`;\n        }\n        if (form.value.duration > 23 * 60 || form.value.all_day) {\n            form.patchValue({\n                date: set(form.value.date, { hours: 12, minutes: 0 }),\n                duration: 60,\n            });\n        }\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        const { booking_type } = form.value;\n        this.clearForm();\n        this._form.getValue()?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking = {} as any) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        asset_name: new FormControl(booking.description),\n        map_id: new FormControl(booking.extension_data.map_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n"],"sourceRoot":"webpack:///","file":"default-libs_bookings_src_index_ts.js"}