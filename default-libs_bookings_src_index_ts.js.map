{"version":3,"sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js","./libs/bookings/src/lib/booking.utilities.ts","./node_modules/@angular/material/fesm2015/radio.js"],"names":["DeskQuestionsModalComponent","event","this","form","travelled","unwell","contact","markAllAsTouched","valid","Object","keys","value","find","key","failure","emit","reason","Booking","data","id","asset_id","zones","booking_start","date","roundToNearestMinutes","addMinutes","Date","nearestTo","booking_end","duration","booking_type","type","Math","abs","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","approver_id","approver_email","approver_name","extension_data","access","all_day","status","isSameDay","start","end","addHours","isAfter","BOOKINGS_ENDPOINT","q","query","pipe","list","map","item","showBooking","encodeURIComponent","method","updateBooking","createBooking","approveBooking","rejectBooking","checkinBooking","state","BOOKING_URLS","BookingFormService","_router","_org","_dialog","super","_view","BehaviorSubject","_options","_form","_form_value","_booking","_loading","last_success","JSON","parse","sessionStorage","getItem","loading","asObservable","options","shareReplay","assets","distinctUntilChanged","x","y","switchMap","building","of","next","name","_","metadata","desks","details","d","zone","tap","features","asset","forEach","push","sort","a","b","localeCompare","available_assets","combineLatest","debounceTime","period_start","period_end","zone_id","bookings","filter","bookable","every","includes","parent_id","bkn","grouped_availability","groups","asset_list","members","length","group","pop","subscription","events","subscribe","booking","url","clearForm","initialised","setOptions","getValue","user","booked_by","booked_by_id","booked_by_email","valueChanges","v","booker","patchValue","email","emitEvent","generateBookingForm","storeForm","newForm","removeItem","setItem","stringify","checkQuestions","content","get","format","icon","postForm","catch","close","join","toPromise","result","setView","ref","open","Promise","race","componentInstance","afterClosed","_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","source","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","_radios","radio","_markForCheck","markForCheck","fn","isDisabled","disabled","ɵfac","t","ɵdir","inputs","labelPosition","required","outputs","ɵMatRadioGroup_BaseFactory","selectors","contentQueries","rf","ctx","dirIndex","MatRadioButton","_t","hostAttrs","exportAs","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","_uniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","origin","focusVia","_inputElement","nativeElement","focus","monitor","focusOrigin","_touch","stopMonitoring","disableRipple","stopPropagation","groupValueChanged","_emitChangeEvent","String","undefined","viewQuery","first","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","ɵcmp","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","$event","_onInputChange","_onInputClick","_r0","inputId","_isRippleDisabled","directives","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports"],"mappings":"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","file":"default-libs_bookings_src_index_ts.js","sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.booking_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 2), {\n                        nearestTo: 5,\n                    })\n            );\n        this.booking_end =\n            data.booking_end ||\n            getUnixTime(addMinutes(this.booking_start * 1000, data.duration || 60));\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(differenceInMinutes(\n                this.booking_start * 1000,\n                this.booking_end * 1000\n            ));\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? true;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (\n                                        _.metadata.desks?.details || []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const asset of assets) {\n                asset.features?.forEach((_) => list.push(_));\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find((bkn) => bkn.asset_id === asset.id)\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content: `Would you like to book the ${options.type} ${\n                    form.get('asset_id').value\n                } for ${format(form.get('date').value, 'dd MMM yyyy')}`,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') return;\n        details.loading('Performing booking request...');\n        await this.postForm().catch((_) => {\n            notifyError(_);\n            details.close();\n            throw _;\n        });\n        details.close();\n    }\n\n    public async postForm() {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const asset_id = form.get('asset_id').value;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(form.get('date').value),\n            period_end: getUnixTime(\n                form.get('date').value + form.get('duration').value * 60 * 1000\n            ),\n            type: this._options.getValue().type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id))\n            throw `${asset_id} is not available at the selected time`;\n        if (\n            bookings.find(\n                (_) =>\n                    _.user_email ===\n                    (form.value.user_email || currentUser()?.email)\n            )\n        )\n            throw `You already have a desk booked`;\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        this.clearForm();\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    private async checkQuestions() {\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = /*@__PURE__*/ function () { let ɵMatRadioGroup_BaseFactory; return function MatRadioGroup_Factory(t) { return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup); }; }();\nMatRadioGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map"],"sourceRoot":"webpack:///"}