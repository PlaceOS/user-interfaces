{"version":3,"file":"default-libs_bookings_src_index_ts.js","mappings":"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","names":["i0","BookingDetailsModalComponent","constructor","_booking","_org","this","EventEmitter","location","booking","asset_id","content","MapPinComponent","level","levelWithID","zones","building","buildings","find","bld","includes","id","period","start","date","Date","now","duration","end","addMinutes","dur","formatDuration","hours","Math","floor","minutes","replace","format","toggleCheckedIn","t","checking_in","checkinBooking","checked_in","notifySuccess","MAT_DIALOG_DATA","selectors","ctx","DeskQuestionsModalComponent","FormGroup","travelled","FormControl","unwell","contact","submit","form","markAllAsTouched","Object","keys","value","key","failure","event","emit","reason","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_dialog","super","BehaviorSubject","type","generateBookingForm","Booking","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","distinctUntilKeyChanged","switchMap","next","listChildMetadata","name","map","data","flatten","_","metadata","desks","details","Array","d","zone","of","tap","assets","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form","filter","_1","getRawValue","debounceTime","queryBookings","period_start","getUnixTime","period_end","zone_id","bookings","asset","bookable","every","parent_id","bkn","status","show_fav","favorite_desks","available_assets","groups","asset_list","members","length","currentUser","group","pop","subscription","events","subscribe","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","get","newForm","valueChanges","storeForm","setView","setFeature","feature","enable","splice","findIndex","e","resetForm","patchValue","extension_data","removeItem","setItem","stringify","loadForm","confirmPost","checkQuestions","asset_name","openConfirmModal","title","icon","loading","o","postFormForGroup","catch","notifyError","close","postForm","ignore_check","valid","getInvalidFields","join","checkResourceAvailable","all_day","set","valueOf","result","saveBooking","approved","toPromise","booking_type","last_success","extra_members","email","take","active_asset","map_id","_getNearbyResources","group_members","Promise","all","idx","user_email","i","user","description","ref","open","race","componentInstance","afterClosed","allowed_bookings","current","map_url","count","nearby_assets","item","findNearbyFeature","factory"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/booking-details-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { notifySuccess } from '@placeos/common';\nimport { MapPinComponent } from '@placeos/components';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addMinutes, format, formatDuration } from 'date-fns';\nimport { Booking } from './booking.class';\nimport { checkinBooking } from './bookings.fn';\n\n@Component({\n    selector: 'booking-details-modal',\n    template: `\n        <div\n            class=\"absolute inset-0 sm:relative sm:inset-auto sm:w-[24rem] sm:max-h-[80vh] bg-white dark:bg-neutral-600 sm:rounded overflow-auto space-y-2 pb-4\"\n        >\n            <div class=\"bg-black/20 dark:bg-white/20 w-full h-64\">\n                <image-carousel\n                    [images]=\"booking?.extension_data?.images\"\n                    class=\"w-full h-64\"\n                ></image-carousel>\n            </div>\n            <h3 title class=\"px-3 mt-2 text-xl font-medium\">{{ booking.title }}</h3>\n            <div class=\"flex m-2\">\n                <div\n                    class=\"flex items-center bg-opacity-30 rounded-2xl p-1 text-sm space-x-2 pr-2 font-medium\"\n                    [class.bg-green-600]=\"\n                        !booking.is_done && booking?.status === 'approved'\n                    \"\n                    [class.bg-yellow-500]=\"\n                        !booking.is_done && booking?.status === 'tentative'\n                    \"\n                    [class.bg-red-600]=\"\n                        !booking.is_done && booking?.status === 'declined'\n                    \"\n                    [class.bg-gray-300]=\"booking.is_done\"\n                >\n                    <div\n                        class=\"rounded-full h-5 w-5 flex items-center justify-center text-white\"\n                        [class.bg-success]=\"\n                            !booking.is_done && booking?.status === 'approved'\n                        \"\n                        [class.text-pending]=\"\n                            !booking.is_done && booking?.status === 'tentative'\n                        \"\n                        [class.bg-error]=\"\n                            !booking.is_done && booking?.status === 'declined'\n                        \"\n                        [class.text-neutral-600]=\"booking.is_done\"\n                    >\n                        <app-icon>\n                            {{\n                                booking.is_done\n                                    ? 'not_interested'\n                                    : booking?.status === 'approved'\n                                    ? 'done'\n                                    : booking?.status === 'tentative'\n                                    ? 'warning'\n                                    : 'close'\n                            }}\n                        </app-icon>\n                    </div>\n                    <div class=\"pr-1\">{{ period }}</div>\n                </div>\n            </div>\n            <div\n                actions\n                class=\"flex items-center space-x-2 px-2\"\n                *ngIf=\"!booking.is_done\"\n            >\n                <button\n                    mat-button\n                    class=\"flex-1 h-10\"\n                    [class.inverse]=\"booking.checked_in\"\n                    [disabled]=\"checking_in\"\n                    (click)=\"toggleCheckedIn()\"\n                >\n                    <div class=\"flex items-center space-x-2 justify-center\" *ngIf=\"!checking_in; else loading_state\">\n                        <app-icon>{{\n                            booking.checked_in ? 'done' : 'arrow_back'\n                        }}</app-icon>\n                        <div class=\"mr-2\">\n                            {{\n                                booking.checked_in\n                                    ? 'Checked in'\n                                    : 'Not checked in'\n                            }}\n                        </div>\n                    </div>\n                    <ng-template #loading_state>\n                        <mat-spinner class=\"mx-auto\" [diameter]=\"32\"></mat-spinner>\n                    </ng-template>\n                </button>\n                <button\n                    mat-icon-button\n                    [matMenuTriggerFor]=\"menu\"\n                    class=\"bg-primary rounded text-white h-10 w-10\"\n                >\n                    <app-icon>more_horiz</app-icon>\n                </button>\n            </div>\n            <h3 class=\"px-3 mt-2 text-lg font-medium\">Details</h3>\n            <div class=\"flex items-center px-2 space-x-2\">\n                <app-icon>event</app-icon>\n                <div>{{ booking.date | date: 'EEEE, dd LLLL y' }}</div>\n            </div>\n            <div class=\"flex items-center px-2 space-x-2\">\n                <app-icon>schedule</app-icon>\n                <div>{{ period }}</div>\n            </div>\n            <div class=\"flex items-center px-2 space-x-2\">\n                <app-icon>map</app-icon>\n                <div>\n                    {{ level?.display_name || level?.name }},\n                    {{ booking.asset_name || booking.asset_id }}\n                </div>\n            </div>\n            <div class=\"flex items-center px-2 space-x-2\">\n                <app-icon>place</app-icon>\n                <div>\n                    {{ building?.display_name || building?.name }},\n                    {{ building?.address }}\n                </div>\n            </div>\n            <div\n                map\n                class=\"mx-4 h-64 sm:h-48 relative border border-gray-200 overflow-hidden rounded\"\n            >\n                <interactive-map\n                    class=\"pointer-events-none\"\n                    [src]=\"level?.map_id\"\n                    [features]=\"features\"\n                    [options]=\"{ disable_pan: true, disable_zoom: true }\"\n                ></interactive-map>\n            </div>\n            <button\n                mat-icon-button\n                mat-dialog-close\n                class=\"absolute top-2 left-2 bg-black/30 text-white\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n        </div>\n        <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n            <!-- <button mat-menu-item mat-dialog-close class=\"flex items-center space-x-2 text-base\" (click)=\"edit.emit()\">\n                <app-icon>edit</app-icon>\n                <div>Edit booking</div>\n            </button> -->\n            <button mat-menu-item class=\"flex items-center space-x-2 text-base\" (click)=\"remove.emit()\">\n                <app-icon>delete</app-icon>\n                <div>Delete booking</div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [``],\n})\nexport class BookingDetailsModalComponent {\n    @Output() public edit = new EventEmitter();\n    @Output() public remove = new EventEmitter();\n    public readonly booking = this._booking;\n    public checking_in = false;\n    public readonly features = [\n        {\n            location: this.booking?.asset_id,\n            content: MapPinComponent,\n        },\n    ];\n\n    public get level() {\n        return this._org.levelWithID(this.booking?.zones || []);\n    }\n\n    public get building() {\n        return this._org.buildings.find((bld) =>\n            (this.booking?.zones || []).includes(bld.id)\n        );\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _booking: Booking,\n        private _org: OrganisationService\n    ) {}\n\n    public get period() {\n        const start = this.booking?.date || Date.now();\n        const duration = this.booking?.duration || 60;\n        const end = addMinutes(start, duration);\n        const dur = formatDuration({\n            hours: Math.floor(duration / 60),\n            minutes: duration % 60,\n        })\n            .replace(' hour', 'hr')\n            .replace(' minute', 'min');\n        return `${format(start, 'h:mm a')} - ${format(end, 'h:mm a')} (${dur})`;\n    }\n\n    public async toggleCheckedIn() {\n        this.checking_in = true;\n        await checkinBooking(this.booking.id, !this.booking.checked_in);\n        (this.booking as any).checked_in = !this.booking.checked_in;\n        notifySuccess(`Successfully ${this.booking.checked_in ? 'checked in' : 'checked out'}`);\n        this.checking_in = false;\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nexport const FAV_DESK_KEY = 'favourite_desks';\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking' | 'visitor';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form,\n    ]).pipe(\n        filter(\n            ([_, _1, form]) =>\n                form.getRawValue().date > 0 && form.getRawValue().duration > 0\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.getRawValue().date),\n                period_end: getUnixTime(\n                    addMinutes(\n                        form.getRawValue().date,\n                        form.getRawValue().duration || 24 * 60\n                    )\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            ) &&\n                            (!options?.show_fav ||\n                                this.favorite_desks.includes(asset.id))\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public get favorite_desks() {\n        return this._settings.get<string[]>(FAV_DESK_KEY) || [];\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const value = form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const value = form.getRawValue();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(\n            new Booking({\n                ...value,\n                approved: !!this._settings.get('app.bookings.no_approval'),\n            })\n        ).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form.getValue().patchValue({\n                ...form,\n                user: user as any,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                description: asset.name,\n                zones: asset.zone\n                    ? [asset.zone?.parent_id, asset.zone?.id]\n                    : [],\n            });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { StaffUser, User } from '@placeos/users';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"x_google_ignoreList":[]}