{"version":3,"file":"default-libs_bookings_src_index_ts.js","mappings":"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","names":["i0","DeskQuestionsModalComponent","constructor","this","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","form","markAllAsTouched","Object","keys","value","find","key","failure","event","emit","reason","selectors","booking","Booking","id","date","Validators","all_day","duration","endInFuture","booking_type","zones","title","description","booking_asset","asset_id","asset_name","assets","extension_data","map_id","user","currentUser","user_id","user_email","booked_by","booked_by_id","booked_by_email","valueChanges","subscribe","v","booker","patchValue","email","emitEvent","o","map_url","centered_at","desk_ids","element","document","createElement","style","position","top","width","height","body","appendChild","createViewer","url","viewer","getViewer","point","mappings","x","y","dist","closest","desk","d","Math","sqrt","removeChild","removeViewer","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","type","generateBookingForm","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","compare","distinctUntilChanged","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","name","map","data","flatten","_","metadata","desks","details","Array","zone","of","tap","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form_value","debounceTime","queryBookings","period_start","getUnixTime","period_end","addMinutes","zone_id","bookings","filter","asset","bookable","every","includes","parent_id","bkn","status","show_fav","favorite_desks","available_assets","groups","asset_list","members","length","group","pop","subscription","events","NavigationEnd","clearForm","initialised","first","setOptions","view","_view","getValue","_form","_booking","get","newForm","storeForm","setView","setFeature","feature","enable","splice","findIndex","e","resetForm","removeItem","setItem","stringify","loadForm","confirmPost","t","checkQuestions","content","format","openConfirmModal","icon","loading","n","postFormForGroup","catch","notifyError","close","postForm","ignore_check","valid","getInvalidFields","join","checkResourceAvailable","set","hours","minutes","valueOf","result","saveBooking","toPromise","last_success","extra_members","take","active_asset","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","i","ref","open","race","componentInstance","afterClosed","allowed_bookings","m","current","count","nearby_assets","item","findNearbyFeature","factory"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { endInFuture } from '@placeos/events';\nimport { createViewer, getViewer, Point, removeViewer } from '@placeos/svg-viewer';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking = new Booking()) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, [Validators.required]),\n        all_day: new FormControl(booking.all_day ?? false),\n        duration: new FormControl(booking.duration, [endInFuture]),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        booking_asset: new FormControl(null),\n        asset_id: new FormControl(booking.asset_id, [Validators.required]),\n        asset_name: new FormControl(booking.description),\n        assets: new FormControl(booking.extension_data?.assets || []),\n        map_id: new FormControl(booking.extension_data?.map_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n\nexport async function findNearbyFeature(map_url: string, centered_at: Point | string, desk_ids: string[] = []): Promise<string> {\n    const element = document.createElement('div');\n    element.style.position = 'absolute';\n    element.style.top = '-9999px';\n    element.style.width = '1000px';\n    element.style.height = '1000px';\n    document.body.appendChild(element);\n    const id = await createViewer({\n        url: map_url,\n        element\n    });\n    const viewer = getViewer(id);\n    const point = (typeof centered_at === 'string' ? viewer.mappings[centered_at] : centered_at) || { x: .5, y: .5 };\n    let dist = 10;\n    let closest = '';\n    for (const desk of desk_ids) {\n        const { x, y } = viewer.mappings[desk] || { x: 2, y: 2 };\n        const d = Math.sqrt((x - point.x) * (x - point.x) + (y - point.y) * (y - point.y));\n        if (d < dist) {\n            dist = d;\n            closest = desk;\n        }\n    }\n    document.body.removeChild(element);\n    removeViewer(id);\n    return closest;\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nexport const FAV_DESK_KEY = 'favourite_desks';\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking' | 'visitor';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            ) &&\n                            (!options?.show_fav || this.favorite_desks.includes(asset.id))\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public get favorite_desks() {\n        return this._settings.get<string[]>(FAV_DESK_KEY) || [];\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean){\n        if(!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if(enable && !features.includes(feature))features.push(feature);\n        if(!enable && features.includes(feature))features.splice(features.findIndex(e => e === feature), 1)\n        this.setOptions({features});\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        let content = `Would you like to book the ${options.type} ${\n            form.value.asset_name\n        } for ${format(form.value.date, 'dd MMM yyyy')}${\n            form.value.duration < 12 * 60\n                ? ' at ' + format(form.value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                form.value,\n                this._options.getValue().type\n            );\n        }\n        if (form.value.duration >= 12 * 60 || form.value.all_day) {\n            form.patchValue({\n                date: set(form.value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        this._loading.next('');\n        const { booking_type } = form.value;\n        this.clearForm();\n        this._form.getValue()?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form\n                .getValue()\n                .patchValue({\n                    ...form,\n                    user: user as any,\n                    asset_id: asset?.id,\n                    asset_name: asset.name,\n                    map_id: asset?.map_id || asset?.id,\n                    description: asset.name,\n                    zones: asset.zone\n                        ? [asset.zone?.parent_id, asset.zone?.id]\n                        : [],\n                });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: string\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n"]}