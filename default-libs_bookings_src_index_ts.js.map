{"version":3,"mappings":"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","names":["i0","ctx_r3","DeskQuestionsModalComponent","constructor","this","EventEmitter","ngOnInit","form","FormGroup","travelled","FormControl","Validators","unwell","contact","submit","markAllAsTouched","valid","Object","keys","value","find","key","failure","event","emit","reason","notifyError","selectors","data","id","asset_id","asset_name","o","extension_data","_a","zones","booking_start","date","getUnixTime","roundToNearestMinutes","addMinutes","Date","now","nearestTo","booking_end","duration","booking_type","type","Math","abs","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","booked_by_id","booked_by_name","booked_by_email","approver_id","approver_email","approver_name","access","s","_b","all_day","i","_c","status","toJSON","location","is_today","isSameDay","is_done","start","end","addHours","isAfter","map_url","centered_at","desk_ids","element","document","createElement","style","position","top","width","height","body","appendChild","createViewer","url","viewer","getViewer","point","mappings","x","y","dist","closest","console","log","desk","d","sqrt","removeChild","removeViewer","BOOKINGS_ENDPOINT","q","query","toQueryString","get","pipe","map","list","item","Booking","encodeURIComponent","method","patch","put","saveBooking","updateBooking","post","createBooking","state","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","shareReplay","options","compare","distinctUntilChanged","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","name","flatten","_","u","metadata","desks","details","Array","c","zone","of","tap","assets","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form_value","debounceTime","queryBookings","period_start","period_end","zone_id","bookings","filter","asset","bookable","f","every","includes","h","k","parent_id","bkn","available_assets","groups","asset_list","p","members","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","clearForm","initialised","first","setOptions","view","_view","getValue","_form","_booking","newForm","n","map_id","user","booked_by","valueChanges","v","booker","patchValue","email","emitEvent","generateBookingForm","storeForm","setView","resetForm","removeItem","setItem","stringify","loadForm","confirmPost","checkQuestions","content","format","openConfirmModal","icon","r","loading","postFormForGroup","catch","close","postForm","ignore_check","getInvalidFields","join","checkResourceAvailable","set","hours","minutes","result","toPromise","last_success","extra_members","take","active_asset","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","ref","open","race","componentInstance","afterClosed","allowed_bookings","current","count","nearby_assets","findNearbyFeature","factory"],"sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/booking.utilities.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/booking-form.service.ts","./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n    startOfDay,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly booked_by_id: string;\n    /** Email of the user who owns the booking */\n    public readonly booked_by_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly booked_by_name: string;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Name of the physical asset assocated with the booking */\n    public readonly asset_name: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.asset_name = data.asset_name || data.extension_data?.asset_name || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.date / 1000 ||\n            data.booking_start ||\n            getUnixTime(\n                roundToNearestMinutes(addMinutes(Date.now(), 5), {\n                    nearestTo: 5,\n                })\n            );\n        this.booking_end =\n            data.date / 1000 + data.duration * 60 ||\n            data.booking_end ||\n            getUnixTime(\n                addMinutes(this.booking_start * 1000, data.duration || 60)\n            );\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            Math.abs(\n                differenceInMinutes(\n                    this.booking_start * 1000,\n                    this.booking_end * 1000\n                )\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.booked_by_id = data.booked_by_id || '';\n        this.booked_by_name = data.booked_by_name || '';\n        this.booked_by_email = data.booked_by_email || '';\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? this.duration > 12 * 60;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n        for (const key in data) {\n            if (!(key in this)) {\n                this.extension_data[key] =\n                    data[key] || this.extension_data[key];\n            }\n        }\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { FormControl, FormGroup } from '@angular/forms';\nimport { currentUser } from '@placeos/common';\nimport { createViewer, getViewer, Point, removeViewer } from '@placeos/svg-viewer';\nimport { Booking } from './booking.class';\n\nexport function generateBookingForm(booking: Booking = {} as any) {\n    const form = new FormGroup({\n        id: new FormControl(booking.id || ''),\n        date: new FormControl(booking.date, []),\n        all_day: new FormControl(booking.all_day ?? false),\n        duration: new FormControl(booking.duration),\n        booking_type: new FormControl(booking.booking_type),\n        zones: new FormControl(booking.zones),\n        title: new FormControl(booking.title),\n        description: new FormControl(booking.description),\n        asset_id: new FormControl(booking.asset_id),\n        asset_name: new FormControl(booking.description),\n        map_id: new FormControl(booking.extension_data?.map_id),\n        user: new FormControl(currentUser()),\n        user_id: new FormControl(booking.user_id),\n        user_email: new FormControl(booking.user_email),\n        booked_by: new FormControl(currentUser()),\n        booked_by_id: new FormControl(booking.booked_by_id),\n        booked_by_email: new FormControl(booking.booked_by_email),\n    });\n    form.valueChanges.subscribe((v) => {\n        const user = v.user;\n        const booker = v.booked_by;\n        booker || user\n            ? form.patchValue(\n                  {\n                      user_id: user.id || booker.id,\n                      user_email: user.email || booker.id,\n                      booked_by_id: booker.id,\n                      booked_by_email: booker.email,\n                  },\n                  { emitEvent: false }\n              )\n            : '';\n    });\n    return form;\n}\n\nexport async function findNearbyFeature(map_url: string, centered_at: Point | string, desk_ids: string[] = []): Promise<string> {\n    const element = document.createElement('div');\n    element.style.position = 'absolute';\n    element.style.top = '-9999px';\n    element.style.width = '1000px';\n    element.style.height = '1000px';\n    document.body.appendChild(element);\n    const id = await createViewer({\n        url: map_url,\n        element\n    });\n    const viewer = getViewer(id);\n    const point = (typeof centered_at === 'string' ? viewer.mappings[centered_at] : centered_at) || { x: .5, y: .5 };\n    let dist = 10;\n    let closest = '';\n    console.log(`Desks:`, desk_ids);\n    console.log(`Mappings:`, viewer.mappings);\n    console.log(`Point:`, point);\n    for (const desk of desk_ids) {\n        const { x, y } = viewer.mappings[desk] || { x: 2, y: 2 };\n        const d = Math.sqrt((x - point.x) * (x - point.x) + (y - point.y) * (y - point.y));\n        console.log(`Desk ${desk}:`, viewer.mappings[desk], d);\n        if (d < dist) {\n            dist = d;\n            closest = desk;\n        }\n    }\n    document.body.removeChild(element);\n    removeViewer(id);\n    return closest;\n}\n","import { del, get, patch, post, put } from '@placeos/ts-client';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { Booking } from './booking.class';\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (data: Partial<Booking>) =>\n    data.id ? updateBooking(data.id, data) : createBooking(data);\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject<FormGroup>(null);\n    private _form_value = new BehaviorSubject<Partial<Booking>>({});\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form_value,\n    ]).pipe(\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.date),\n                period_end: getUnixTime(\n                    addMinutes(form.date, form.duration || 24 * 60)\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.value || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n        this._form_value.next(this._form.getValue()?.value || {});\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        let content = `Would you like to book the ${options.type} ${\n            form.value.asset_name\n        } for ${format(form.value.date, 'dd MMM yyyy')}${\n            form.value.duration < 12 * 60\n                ? ' at ' + format(form.value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                form.value,\n                this._options.getValue().type\n            );\n        }\n        if (form.value.duration > 23 * 60 || form.value.all_day) {\n            form.patchValue({\n                date: set(form.value.date, { hours: 12, minutes: 0 }),\n                duration: 60,\n            });\n        }\n        const result = await saveBooking(new Booking(form.value)).toPromise();\n        const { booking_type } = form.value;\n        this.clearForm();\n        this._form.getValue()?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        console.log('Selected Assets:', assets);\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form\n                .getValue()\n                .patchValue({\n                    ...form,\n                    user,\n                    asset_id: asset?.id,\n                    asset_name: asset.name,\n                    map_id: asset?.map_id || asset?.id,\n                    description: asset.name,\n                    zones: asset.zone\n                        ? [asset.zone?.parent_id, asset.zone?.id]\n                        : [],\n                });\n            console.log('Form Value:', this._form.getValue().value);\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.value;\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: string\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser().email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        console.log('Assets:', assets, asset_list, id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n            console.log('Asset List:', asset_list);\n        }\n        return nearby_assets;\n    }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nexport function distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n"],"sourceRoot":"webpack:///","file":"default-libs_bookings_src_index_ts.js"}