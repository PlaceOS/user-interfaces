{"version":3,"file":"default-libs_bookings_src_index_ts.js","mappings":"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","names":["i0","DeskQuestionsModalComponent","constructor","this","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","form","markAllAsTouched","Object","keys","value","find","key","failure","event","emit","reason","selectors","BOOKING_URLS","BookingFormService","BaseClass","_router","_settings","_org","_dialog","super","BehaviorSubject","type","generateBookingForm","Booking","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","id","name","map","data","flatten","_","metadata","desks","details","Array","d","zone","of","tap","assets","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form","filter","_1","getRawValue","date","duration","debounceTime","queryBookings","period_start","getUnixTime","period_end","addMinutes","zones","zone_id","bookings","asset","bookable","every","includes","parent_id","bkn","asset_id","status","show_fav","favorite_desks","available_assets","groups","asset_list","members","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","_booking","get","newForm","valueChanges","storeForm","setView","setFeature","feature","enable","splice","findIndex","e","resetForm","patchValue","extension_data","removeItem","setItem","stringify","loadForm","confirmPost","t","checkQuestions","content","asset_name","format","openConfirmModal","title","icon","loading","o","postFormForGroup","catch","notifyError","close","postForm","ignore_check","valid","getInvalidFields","join","checkResourceAvailable","all_day","set","hours","minutes","valueOf","result","saveBooking","approved","toPromise","booking_type","last_success","extra_members","email","take","active_asset","map_id","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","user_email","i","user","description","ref","open","race","componentInstance","afterClosed","allowed_bookings","current","map_url","count","nearby_assets","item","findNearbyFeature","factory"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking-form.service.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from '..';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nexport const FAV_DESK_KEY = 'favourite_desks';\nconst BOOKING_URLS = ['book/desks'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking' | 'visitor';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form,\n    ]).pipe(\n        filter(\n            ([_, _1, form]) =>\n                form.getRawValue().date > 0 && form.getRawValue().duration > 0\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.getRawValue().date),\n                period_end: getUnixTime(\n                    addMinutes(\n                        form.getRawValue().date,\n                        form.getRawValue().duration || 24 * 60\n                    )\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            ) &&\n                            (!options?.show_fav ||\n                                this.favorite_desks.includes(asset.id))\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public get favorite_desks() {\n        return this._settings.get<string[]>(FAV_DESK_KEY) || [];\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const value = form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const value = form.getRawValue();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(\n            new Booking({\n                ...value,\n                approved: !!this._settings.get('app.bookings.no_approval'),\n            })\n        ).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form.getValue().patchValue({\n                ...form,\n                user: user as any,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                description: asset.name,\n                zones: asset.zone\n                    ? [asset.zone?.parent_id, asset.zone?.id]\n                    : [],\n            });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n"]}