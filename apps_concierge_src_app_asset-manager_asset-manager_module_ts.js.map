{"version":3,"file":"apps_concierge_src_app_asset-manager_asset-manager_module_ts.js","mappings":"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","names":["MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","EventEmitter","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","coerceBooleanProperty","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","ngOnInit","SelectionModel","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","_syncButtonToggle","isUserInput","deferEvents","s","deselect","a","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","i0","ɵdir","selectors","o","MatButtonToggle","_MatButtonToggleBase","mixinDisableRipple","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","i1","ɵcmp","St","ngContentSelectors","dependencies","i2","styles","MatButtonToggleModule","ɵmod","ɵinj","MatCommonModule","MatRippleModule","CdkStepHeader","CdkStepLabel","template","nextId","STEPPER_GLOBAL_OPTIONS","CdkStep","_stepper","stepperOptions","interacted","interactedStream","_editable","_optional","_completedOverride","_customError","_stepperOptions","_displayDefaultIndicatorType","displayDefaultIndicatorType","editable","optional","completed","_getDefaultCompleted","stepControl","valid","hasError","_getDefaultError","invalid","reset","ngOnChanges","_stateChanged","_markAsInteracted","_showError","showError","CdkStepper","TemplateRef","encapsulation","_dir","_destroyed","Subject","steps","QueryList","_sortedHeaders","_linear","_selectedIndex","selectionChange","_orientation","_groupId","linear","selectedIndex","index","newIndex","coerceNumberProperty","_steps","_isValidIndex","_anyControlsInvalidOrPending","toArray","_updateSelectedItemIndex","step","indexOf","orientation","_keyManager","withVerticalOrientation","changes","pipe","startWith","takeUntil","subscribe","notifyOnChanges","_stepHeader","headers","sort","b","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","FocusKeyManager","withWrap","withHomeAndEnd","of","_layoutDirection","direction","withHorizontalOrientation","updateActiveItem","Math","max","destroy","next","complete","min","previous","_getStepLabelId","i","_getStepContentId","_getAnimationDirection","position","_getIndicatorType","state","isCurrentStep","_isCurrentStep","_getDefaultIndicatorLogic","_getGuidelineLogic","_getFocusIndex","activeItemIndex","stepsArray","previouslySelectedIndex","selectedStep","previouslySelectedStep","_containsFocus","setActiveItem","_onKeydown","hasModifier","hasModifierKey","keyCode","manager","SPACE","ENTER","onKeydown","preventDefault","slice","control","pending","stepperElement","focusedElement","_getFocusedElementPierceShadowDom","contains","CdkStepperNext","type","CdkStepperPrevious","CdkStepperModule","BidiModule","policy","html","window","ttWindow","trustedTypes","createPolicy","createHTML","getPolicy","iconName","Error","url","literal","SvgIconConfig","svgText","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","SecurityContext","getMatIconFailedToSanitizeLiteralError","trustedLiteral","trustedHTMLFromString","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","className","set","classNameForFontAlias","get","setDefaultFontSetClass","classNames","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","getMatIconNameNotFoundError","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","errorMessage","message","handleError","forkJoin","foundIcon","toString","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","delete","share","configNamespace","svgElement","result","isSafeUrlWithOptions","DOCUMENT","ɵprov","factory","_MatIconBase","mixinColor","MAT_ICON_DEFAULT_OPTIONS","MAT_ICON_LOCATION","providedIn","inject","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","defaults","_inline","_previousFontSetClass","_currentIconFetch","Subscription","color","defaultColor","fontSet","inline","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","_splitIconName","parts","split","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","classList","add","_previousFontIconClass","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","take","MatIconModule","t","MatStepLabel","MatStepperIntl","optionalLabel","completedLabel","editableLabel","MAT_STEPPER_INTL_PROVIDER","deps","Optional","SkipSelf","useFactory","parentIntl","_MatStepHeaderBase","MatStepHeader","_intl","changeDetectorRef","_intlSubscription","origin","focusVia","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","active","_getDefaultTextForState","decls","i3","i4","matStepperAnimations","horizontalStepTransition","trigger","style","transform","visibility","transition","animate","params","animationDuration","verticalStepTransition","height","MatStepperIcon","templateRef","MatStepContent","_template","MatStep","stepper","_errorStateMatcher","_viewContainerRef","switchMap","_lazyContent","_portal","TemplatePortal","isErrorState","form","MatStepper","ErrorStateMatcher","i2$1","dir","animationDone","labelPosition","headerPosition","_iconOverrides","_animationDone","_animationDuration","test","_icons","distinctUntilChanged","x","y","fromState","toState","_stepIsNavigable","_getAnimationDuration","i3$1","hostVars","changeDetection","MatStepperNext","MatStepperPrevious","MatStepperModule","imports","CommonModule","PortalModule","MatButtonModule","AssetDetailsComponent","images","item","_","AssetFiltersComponent","AssetFiltersDisplayComponent","Asset","_data","category","barcode","brand","description","specifications","purchase_details","consumables","general_details","invoices","count","locations","amount","ASSET_ENDPOINT","q","query","toQueryString","d","AssetStateService","BehaviorSubject","date","Date","now","_search","asObservable","_loading","getValue","queryAssets","replace","shareReplay","_options","debounceTime","zone","queryBookings","zones","period_start","getUnixTime","startOfDay","period_end","endOfDay","combineLatest","asset_list","asset_bookings","list","bookings","asset_id","localeCompare","available_assets","assets","includes","setSearch","setOptions","AssetListComponent","_asset_state","loading","filtered_assets","isFavourite","favorites","selectAsset","asset","onSelect","FormGroup","FormControl","Validators","purchase_date","expiry_date","AssetSelectModalComponent","AssetManagerStateService","BaseClass","_spaces","view","generateAssetForm","_change","_poll","initialised","Booking","extension_data","space","space_id","console","log","requests","user_name","location_name","status","tracking","active_asset","categories","unique","asset_mapping","Object","keys","_form","startPolling","delay","interval","stopPolling","clearInterval","resetForm","setStatus","updateBooking","approved","rejected","toPromise","setTracking","clearActiveAsset","deleteActiveAsset","del","deleteAsset","notifySuccess","postForm","data","put","updateAsset","post","createAsset","saveAsset","AssetManagerTopbarComponent","_state","ctx","AssetListingComponent","_router","AssetManagerComponent","SplitJoinPipe","pure","$event","AssetLocationModalComponent","active_asset_requests","updateFeatures","selected_feature","map_id","content","MapPinComponent","z_index","display_name","AssetViewComponent","_route","_dialog","deleting","navigate","closeTooltip","_tooltip_el","close","viewLocations","open","subscription","paramMap","has","timeout","first","clearTimeout","CustomTooltipComponent","AssetFlowConsumablesComponent","addItem","patchValue","randomInt","removeItem","AssetFlowDetailsComponent","AssetFlowPurchasesComponent","addInvoice","removeInvoice","addProperty","removeProperty","AssetFlowSpecsComponent","AssetFlowComponent","save","catch","notifyError","JSON","stringify","success","DurationFormatPipe","short","duration","formatDuration","days","floor","hours","minutes","AssetRequestDetailsComponent","request","AssetRequestListComponent","filtered_requests","ROUTES","component","children","AssetItemListComponent","asset_categories","redirectTo","AppAssetManangerModule","UIModule","ComponentsModule","MatProgressBarModule","MatTabsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2020/button-toggle.mjs","./node_modules/@angular/cdk/fesm2020/stepper.mjs","./node_modules/@angular/material/fesm2020/icon.mjs","./node_modules/@angular/material/fesm2020/stepper.mjs","./libs/assets/src/lib/asset-select-modal/asset-details.component.ts","./libs/assets/src/lib/asset-select-modal/asset-filters.component.ts","./libs/assets/src/lib/asset-select-modal/asset-filters-display.component.ts","./libs/assets/src/lib/asset.class.ts","./libs/assets/src/lib/assets.fn.ts","./libs/assets/src/lib/asset-state.service.ts","./libs/assets/src/lib/asset-select-modal/asset-list.component.ts","./libs/assets/src/lib/asset.utilities.ts","./libs/assets/src/lib/assets.module.ts","./apps/concierge/src/app/asset-manager/asset-manager-state.service.ts","./apps/concierge/src/app/asset-manager/asset-manager-topbar.component.ts","./apps/concierge/src/app/asset-manager/asset-listing.component.ts","./apps/concierge/src/app/asset-manager/asset-manager.component.ts","./apps/concierge/src/app/asset-manager/split-join.pipe.ts","./apps/concierge/src/app/asset-manager/asset-location-modal.component.ts","./apps/concierge/src/app/asset-manager/asset-view.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-consumables.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-details.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-purchases.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-specs.component.ts","./apps/concierge/src/app/asset-manager/asset-flow.component.ts","./apps/concierge/src/app/asset-manager/duration.pipe.ts","./apps/concierge/src/app/asset-manager/asset-request-details.component.ts","./apps/concierge/src/app/asset-manager/asset-request-list.component.ts","./apps/concierge/src/app/asset-manager/asset-item-list.component.ts","./apps/concierge/src/app/asset-manager/asset-manager.module.ts"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true,\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatButtonToggleGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\n        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n    ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(function () { return MatButtonToggle; }), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { _buttonToggles: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true,\n                    }]\n            }], appearance: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], multiple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n        return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatButtonToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { disableRipple: \"disableRipple\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], usesInheritance: true, ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                        'role': 'presentation',\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"] }]\n        }], ctorParameters: function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_GROUP]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], _buttonElement: [{\n                type: ViewChild,\n                args: ['button']\n            }], id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatButtonToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] });\nMatButtonToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggleModule, imports: [MatCommonModule, MatRippleModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, Optional, ContentChild, ViewChild, Input, Output, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepHeader {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    /** Focuses the step header. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\nCdkStepHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepHeader, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkStepHeader.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkStepHeader, selector: \"[cdkStepHeader]\", host: { attributes: { \"role\": \"tab\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepHeader, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkStepHeader]',\n                    host: {\n                        'role': 'tab',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepLabel {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkStepLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepLabel, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkStepLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkStepLabel, selector: \"[cdkStepLabel]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkStepLabel]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n/** Change event emitted on selection changes. */\nclass StepperSelectionEvent {\n}\n/** Enum to represent the different states of the steps. */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error',\n};\n/** InjectionToken that can be used to specify the global stepper options. */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\nclass CdkStep {\n    constructor(_stepper, stepperOptions) {\n        this._stepper = _stepper;\n        /** Whether user has attempted to move away from the step. */\n        this.interacted = false;\n        /** Emits when the user has attempted to move away from the step. */\n        this.interactedStream = new EventEmitter();\n        this._editable = true;\n        this._optional = false;\n        this._completedOverride = null;\n        this._customError = null;\n        this._stepperOptions = stepperOptions ? stepperOptions : {};\n        this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n    }\n    /** Whether the user can return to this step once it has been marked as completed. */\n    get editable() {\n        return this._editable;\n    }\n    set editable(value) {\n        this._editable = coerceBooleanProperty(value);\n    }\n    /** Whether the completion of step is optional. */\n    get optional() {\n        return this._optional;\n    }\n    set optional(value) {\n        this._optional = coerceBooleanProperty(value);\n    }\n    /** Whether step is marked as completed. */\n    get completed() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    set completed(value) {\n        this._completedOverride = coerceBooleanProperty(value);\n    }\n    _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /** Whether step has an error. */\n    get hasError() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    set hasError(value) {\n        this._customError = coerceBooleanProperty(value);\n    }\n    _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /** Selects this step component. */\n    select() {\n        this._stepper.selected = this;\n    }\n    /** Resets the step to its initial state. Note that this includes resetting form data. */\n    reset() {\n        this.interacted = false;\n        if (this._completedOverride != null) {\n            this._completedOverride = false;\n        }\n        if (this._customError != null) {\n            this._customError = false;\n        }\n        if (this.stepControl) {\n            this.stepControl.reset();\n        }\n    }\n    ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    }\n    _markAsInteracted() {\n        if (!this.interacted) {\n            this.interacted = true;\n            this.interactedStream.emit(this);\n        }\n    }\n    /** Determines whether the error state can be shown. */\n    _showError() {\n        // We want to show the error state either if the user opted into/out of it using the\n        // global options, or if they've explicitly set it through the `hasError` input.\n        return this._stepperOptions.showError ?? this._customError != null;\n    }\n}\nCdkStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStep, deps: [{ token: forwardRef(() => CdkStepper) }, { token: STEPPER_GLOBAL_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkStep.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkStep, selector: \"cdk-step\", inputs: { stepControl: \"stepControl\", label: \"label\", errorMessage: \"errorMessage\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], state: \"state\", editable: \"editable\", optional: \"optional\", completed: \"completed\", hasError: \"hasError\" }, outputs: { interactedStream: \"interacted\" }, queries: [{ propertyName: \"stepLabel\", first: true, predicate: CdkStepLabel, descendants: true }], viewQueries: [{ propertyName: \"content\", first: true, predicate: TemplateRef, descendants: true, static: true }], exportAs: [\"cdkStep\"], usesOnChanges: true, ngImport: i0, template: '<ng-template><ng-content></ng-content></ng-template>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStep, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-step',\n                    exportAs: 'cdkStep',\n                    template: '<ng-template><ng-content></ng-content></ng-template>',\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: function () { return [{ type: CdkStepper, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => CdkStepper)]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [STEPPER_GLOBAL_OPTIONS]\n                }] }]; }, propDecorators: { stepLabel: [{\n                type: ContentChild,\n                args: [CdkStepLabel]\n            }], content: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], stepControl: [{\n                type: Input\n            }], interactedStream: [{\n                type: Output,\n                args: ['interacted']\n            }], label: [{\n                type: Input\n            }], errorMessage: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], state: [{\n                type: Input\n            }], editable: [{\n                type: Input\n            }], optional: [{\n                type: Input\n            }], completed: [{\n                type: Input\n            }], hasError: [{\n                type: Input\n            }] } });\nclass CdkStepper {\n    constructor(_dir, _changeDetectorRef, _elementRef) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n        this.steps = new QueryList();\n        /** List of step headers sorted based on their DOM order. */\n        this._sortedHeaders = new QueryList();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /** Event emitted when the selected step has changed. */\n        this.selectionChange = new EventEmitter();\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n    }\n    /** Whether the validity of previous steps should be checked or not. */\n    get linear() {\n        return this._linear;\n    }\n    set linear(value) {\n        this._linear = coerceBooleanProperty(value);\n    }\n    /** The index of the selected step. */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    set selectedIndex(index) {\n        const newIndex = coerceNumberProperty(index);\n        if (this.steps && this._steps) {\n            // Ensure that the index can't be out of bounds.\n            if (!this._isValidIndex(newIndex) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n            }\n            this.selected?._markAsInteracted();\n            if (this._selectedIndex !== newIndex &&\n                !this._anyControlsInvalidOrPending(newIndex) &&\n                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                this._updateSelectedItemIndex(newIndex);\n            }\n        }\n        else {\n            this._selectedIndex = newIndex;\n        }\n    }\n    /** The step that is selected. */\n    get selected() {\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n    }\n    set selected(step) {\n        this.selectedIndex = step && this.steps ? this.steps.toArray().indexOf(step) : -1;\n    }\n    /** Orientation of the stepper. */\n    get orientation() {\n        return this._orientation;\n    }\n    set orientation(value) {\n        // This is a protected method so that `MatSteppter` can hook into it.\n        this._orientation = value;\n        if (this._keyManager) {\n            this._keyManager.withVerticalOrientation(value === 'vertical');\n        }\n    }\n    ngAfterContentInit() {\n        this._steps.changes\n            .pipe(startWith(this._steps), takeUntil(this._destroyed))\n            .subscribe((steps) => {\n            this.steps.reset(steps.filter(step => step._stepper === this));\n            this.steps.notifyOnChanges();\n        });\n    }\n    ngAfterViewInit() {\n        // If the step headers are defined outside of the `ngFor` that renders the steps, like in the\n        // Material stepper, they won't appear in the `QueryList` in the same order as they're\n        // rendered in the DOM which will lead to incorrect keyboard navigation. We need to sort\n        // them manually to ensure that they're correct. Alternatively, we can change the Material\n        // template to inline the headers in the `ngFor`, but that'll result in a lot of\n        // code duplciation. See #23539.\n        this._stepHeader.changes\n            .pipe(startWith(this._stepHeader), takeUntil(this._destroyed))\n            .subscribe((headers) => {\n            this._sortedHeaders.reset(headers.toArray().sort((a, b) => {\n                const documentPosition = a._elementRef.nativeElement.compareDocumentPosition(b._elementRef.nativeElement);\n                // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n                // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n                // tslint:disable-next-line:no-bitwise\n                return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n            }));\n            this._sortedHeaders.notifyOnChanges();\n        });\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view children. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new FocusKeyManager(this._sortedHeaders)\n            .withWrap()\n            .withHomeAndEnd()\n            .withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? this._dir.change : of())\n            .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n            .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        // No need to `takeUntil` here, because we're the ones destroying `steps`.\n        this.steps.changes.subscribe(() => {\n            if (!this.selected) {\n                this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n            }\n        });\n        // The logic which asserts that the selected index is within bounds doesn't run before the\n        // steps are initialized, because we don't how many steps there are yet so we may have an\n        // invalid index on init. If that's the case, auto-correct to the default so we don't throw.\n        if (!this._isValidIndex(this._selectedIndex)) {\n            this._selectedIndex = 0;\n        }\n    }\n    ngOnDestroy() {\n        this.steps.destroy();\n        this._sortedHeaders.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Selects and focuses the next step in list. */\n    next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /** Selects and focuses the previous step in list. */\n    previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n    reset() {\n        this._updateSelectedItemIndex(0);\n        this.steps.forEach(step => step.reset());\n        this._stateChanged();\n    }\n    /** Returns a unique id for each step label element. */\n    _getStepLabelId(i) {\n        return `cdk-step-label-${this._groupId}-${i}`;\n    }\n    /** Returns unique id for each step content element. */\n    _getStepContentId(i) {\n        return `cdk-step-content-${this._groupId}-${i}`;\n    }\n    /** Marks the component to be change detected. */\n    _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns position state of the step with the given index. */\n    _getAnimationDirection(index) {\n        const position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    }\n    /** Returns the type of icon to be displayed. */\n    _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n        const step = this.steps.toArray()[index];\n        const isCurrentStep = this._isCurrentStep(index);\n        return step._displayDefaultIndicatorType\n            ? this._getDefaultIndicatorLogic(step, isCurrentStep)\n            : this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError() && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (!step.completed || isCurrentStep) {\n            return STEP_STATE.NUMBER;\n        }\n        else {\n            return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n    }\n    _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n        if (step._showError() && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (step.completed && !isCurrentStep) {\n            return STEP_STATE.DONE;\n        }\n        else if (step.completed && isCurrentStep) {\n            return state;\n        }\n        else if (step.editable && isCurrentStep) {\n            return STEP_STATE.EDIT;\n        }\n        else {\n            return state;\n        }\n    }\n    _isCurrentStep(index) {\n        return this._selectedIndex === index;\n    }\n    /** Returns the index of the currently-focused step header. */\n    _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    _updateSelectedItemIndex(newIndex) {\n        const stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n        this._containsFocus()\n            ? this._keyManager.setActiveItem(newIndex)\n            : this._keyManager.updateActiveItem(newIndex);\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    }\n    _onKeydown(event) {\n        const hasModifier = hasModifierKey(event);\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        if (manager.activeItemIndex != null &&\n            !hasModifier &&\n            (keyCode === SPACE || keyCode === ENTER)) {\n            this.selectedIndex = manager.activeItemIndex;\n            event.preventDefault();\n        }\n        else {\n            manager.onKeydown(event);\n        }\n    }\n    _anyControlsInvalidOrPending(index) {\n        if (this._linear && index >= 0) {\n            return this.steps\n                .toArray()\n                .slice(0, index)\n                .some(step => {\n                const control = step.stepControl;\n                const isIncomplete = control\n                    ? control.invalid || control.pending || !step.interacted\n                    : !step.completed;\n                return isIncomplete && !step.optional && !step._completedOverride;\n            });\n        }\n        return false;\n    }\n    _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Checks whether the stepper contains the focused element. */\n    _containsFocus() {\n        const stepperElement = this._elementRef.nativeElement;\n        const focusedElement = _getFocusedElementPierceShadowDom();\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n    /** Checks whether the passed-in index is a valid step index. */\n    _isValidIndex(index) {\n        return index > -1 && (!this.steps || index < this.steps.length);\n    }\n}\nCdkStepper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepper, deps: [{ token: i1.Directionality, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkStepper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkStepper, selector: \"[cdkStepper]\", inputs: { linear: \"linear\", selectedIndex: \"selectedIndex\", selected: \"selected\", orientation: \"orientation\" }, outputs: { selectionChange: \"selectionChange\" }, queries: [{ propertyName: \"_steps\", predicate: CdkStep, descendants: true }, { propertyName: \"_stepHeader\", predicate: CdkStepHeader, descendants: true }], exportAs: [\"cdkStepper\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepper, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkStepper]',\n                    exportAs: 'cdkStepper',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { _steps: [{\n                type: ContentChildren,\n                args: [CdkStep, { descendants: true }]\n            }], _stepHeader: [{\n                type: ContentChildren,\n                args: [CdkStepHeader, { descendants: true }]\n            }], linear: [{\n                type: Input\n            }], selectedIndex: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], orientation: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nclass CdkStepperNext {\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /** Type of the next button. Defaults to \"submit\" if not specified. */\n        this.type = 'submit';\n    }\n}\nCdkStepperNext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperNext, deps: [{ token: CdkStepper }], target: i0.ɵɵFactoryTarget.Directive });\nCdkStepperNext.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkStepperNext, selector: \"button[cdkStepperNext]\", inputs: { type: \"type\" }, host: { listeners: { \"click\": \"_stepper.next()\" }, properties: { \"type\": \"type\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperNext, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'button[cdkStepperNext]',\n                    host: {\n                        '[type]': 'type',\n                        '(click)': '_stepper.next()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkStepper }]; }, propDecorators: { type: [{\n                type: Input\n            }] } });\n/** Button that moves to the previous step in a stepper workflow. */\nclass CdkStepperPrevious {\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /** Type of the previous button. Defaults to \"button\" if not specified. */\n        this.type = 'button';\n    }\n}\nCdkStepperPrevious.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperPrevious, deps: [{ token: CdkStepper }], target: i0.ɵɵFactoryTarget.Directive });\nCdkStepperPrevious.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: CdkStepperPrevious, selector: \"button[cdkStepperPrevious]\", inputs: { type: \"type\" }, host: { listeners: { \"click\": \"_stepper.previous()\" }, properties: { \"type\": \"type\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperPrevious, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'button[cdkStepperPrevious]',\n                    host: {\n                        '[type]': 'type',\n                        '(click)': '_stepper.previous()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkStepper }]; }, propDecorators: { type: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepperModule {\n}\nCdkStepperModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkStepperModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperModule, declarations: [CdkStep,\n        CdkStepper,\n        CdkStepHeader,\n        CdkStepLabel,\n        CdkStepperNext,\n        CdkStepperPrevious], imports: [BidiModule], exports: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious] });\nCdkStepperModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperModule, imports: [BidiModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: CdkStepperModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [BidiModule],\n                    exports: [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n                    declarations: [\n                        CdkStep,\n                        CdkStepper,\n                        CdkStepHeader,\n                        CdkStepLabel,\n                        CdkStepperNext,\n                        CdkStepperPrevious,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };\n","import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nMatIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? [this._iconRegistry.classNameForFontAlias(this.fontSet)]\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatIcon.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] });\nMatIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n","import * as i2$1 from '@angular/cdk/portal';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { CdkStepLabel, CdkStepHeader, CdkStep, STEPPER_GLOBAL_OPTIONS, CdkStepper, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Injectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, forwardRef, Inject, ContentChild, QueryList, EventEmitter, ViewChildren, ContentChildren, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i1 from '@angular/material/core';\nimport { mixinColor, ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i4 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/cdk/a11y';\nimport { Subject, Subscription } from 'rxjs';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport { switchMap, map, startWith, takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatStepLabel extends CdkStepLabel {\n}\nMatStepLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepLabel, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatStepLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepLabel, selector: \"[matStepLabel]\", usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepLabel, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matStepLabel]',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Stepper data that is required for internationalization. */\nclass MatStepperIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /** Label that is rendered below optional steps. */\n        this.optionalLabel = 'Optional';\n        /** Label that is used to indicate step as completed to screen readers. */\n        this.completedLabel = 'Completed';\n        /** Label that is used to indicate step as editable to screen readers. */\n        this.editableLabel = 'Editable';\n    }\n}\nMatStepperIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatStepperIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatStepperIntl();\n}\n/** @docs-private */\nconst MAT_STEPPER_INTL_PROVIDER = {\n    provide: MatStepperIntl,\n    deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n    useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatStepHeader.\n/** @docs-private */\nconst _MatStepHeaderBase = mixinColor(class MatStepHeaderBase extends CdkStepHeader {\n    constructor(elementRef) {\n        super(elementRef);\n    }\n}, 'primary');\nclass MatStepHeader extends _MatStepHeaderBase {\n    constructor(_intl, _focusMonitor, _elementRef, changeDetectorRef) {\n        super(_elementRef);\n        this._intl = _intl;\n        this._focusMonitor = _focusMonitor;\n        this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        this._intlSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Focuses the step header. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._elementRef, origin, options);\n        }\n        else {\n            this._elementRef.nativeElement.focus(options);\n        }\n    }\n    /** Returns string label of given step if it is a text label. */\n    _stringLabel() {\n        return this.label instanceof MatStepLabel ? null : this.label;\n    }\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    _templateLabel() {\n        return this.label instanceof MatStepLabel ? this.label : null;\n    }\n    /** Returns the host HTML element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\n    _getIconContext() {\n        return {\n            index: this.index,\n            active: this.active,\n            optional: this.optional,\n        };\n    }\n    _getDefaultTextForState(state) {\n        if (state == 'number') {\n            return `${this.index + 1}`;\n        }\n        if (state == 'edit') {\n            return 'create';\n        }\n        if (state == 'error') {\n            return 'warning';\n        }\n        return state;\n    }\n}\nMatStepHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepHeader, deps: [{ token: MatStepperIntl }, { token: i2.FocusMonitor }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatStepHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepHeader, selector: \"mat-step-header\", inputs: { color: \"color\", state: \"state\", label: \"label\", errorMessage: \"errorMessage\", iconOverrides: \"iconOverrides\", index: \"index\", selected: \"selected\", active: \"active\", optional: \"optional\", disableRipple: \"disableRipple\" }, host: { attributes: { \"role\": \"tab\" }, classAttribute: \"mat-step-header\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-step-header-ripple mat-focus-indicator\\\" matRipple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disableRipple\\\"></div>\\n\\n<div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\">\\n  <div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\">\\n    <ng-container\\n      *ngSwitchCase=\\\"true\\\"\\n      [ngTemplateOutlet]=\\\"iconOverrides[state]\\\"\\n      [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container>\\n    <ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\">\\n      <span aria-hidden=\\\"true\\\" *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span>\\n      <span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"state === 'done'\\\">{{_intl.completedLabel}}</span>\\n      <span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"state === 'edit'\\\">{{_intl.editableLabel}}</span>\\n      <mat-icon aria-hidden=\\\"true\\\" *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon>\\n    </ng-container>\\n  </div>\\n</div>\\n<div class=\\\"mat-step-label\\\"\\n     [class.mat-step-label-active]=\\\"active\\\"\\n     [class.mat-step-label-selected]=\\\"selected\\\"\\n     [class.mat-step-label-error]=\\\"state == 'error'\\\">\\n  <!-- If there is a label template, use it. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_templateLabel()\\\">\\n    <ng-container [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\"></ng-container>\\n  </div>\\n  <!-- If there is no label template, fall back to the text label. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div>\\n\\n  <div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div>\\n  <div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div>\\n</div>\\n\\n\", styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:rgba(0,0,0,0)}.cdk-high-contrast-active .mat-step-header{outline:solid 1px}.cdk-high-contrast-active .mat-step-header.cdk-keyboard-focused,.cdk-high-contrast-active .mat-step-header.cdk-program-focused{outline:solid 3px}.cdk-high-contrast-active .mat-step-header[aria-selected=true] .mat-step-label{text-decoration:underline}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);display:flex}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i3.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"component\", type: i4.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"directive\", type: i1.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-step-header', inputs: ['color'], host: {\n                        'class': 'mat-step-header',\n                        'role': 'tab',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"mat-step-header-ripple mat-focus-indicator\\\" matRipple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disableRipple\\\"></div>\\n\\n<div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\">\\n  <div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\">\\n    <ng-container\\n      *ngSwitchCase=\\\"true\\\"\\n      [ngTemplateOutlet]=\\\"iconOverrides[state]\\\"\\n      [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container>\\n    <ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\">\\n      <span aria-hidden=\\\"true\\\" *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span>\\n      <span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"state === 'done'\\\">{{_intl.completedLabel}}</span>\\n      <span class=\\\"cdk-visually-hidden\\\" *ngIf=\\\"state === 'edit'\\\">{{_intl.editableLabel}}</span>\\n      <mat-icon aria-hidden=\\\"true\\\" *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon>\\n    </ng-container>\\n  </div>\\n</div>\\n<div class=\\\"mat-step-label\\\"\\n     [class.mat-step-label-active]=\\\"active\\\"\\n     [class.mat-step-label-selected]=\\\"selected\\\"\\n     [class.mat-step-label-error]=\\\"state == 'error'\\\">\\n  <!-- If there is a label template, use it. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_templateLabel()\\\">\\n    <ng-container [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\"></ng-container>\\n  </div>\\n  <!-- If there is no label template, fall back to the text label. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div>\\n\\n  <div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div>\\n  <div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div>\\n</div>\\n\\n\", styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:rgba(0,0,0,0)}.cdk-high-contrast-active .mat-step-header{outline:solid 1px}.cdk-high-contrast-active .mat-step-header.cdk-keyboard-focused,.cdk-high-contrast-active .mat-step-header.cdk-program-focused{outline:solid 3px}.cdk-high-contrast-active .mat-step-header[aria-selected=true] .mat-step-label{text-decoration:underline}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);display:flex}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: function () { return [{ type: MatStepperIntl }, { type: i2.FocusMonitor }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { state: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], errorMessage: [{\n                type: Input\n            }], iconOverrides: [{\n                type: Input\n            }], index: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], active: [{\n                type: Input\n            }], optional: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_HORIZONTAL_ANIMATION_DURATION = '500ms';\nconst DEFAULT_VERTICAL_ANIMATION_DURATION = '225ms';\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nconst matStepperAnimations = {\n    /** Animation that transitions the step along the X axis in a horizontal stepper. */\n    horizontalStepTransition: trigger('horizontalStepTransition', [\n        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        // Transition to `inherit`, rather than `visible`,\n        // because visibility on a child element the one from the parent,\n        // making this element focusable inside of a `hidden` element.\n        state('current', style({ transform: 'none', visibility: 'inherit' })),\n        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        transition('* => *', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)'), {\n            params: { 'animationDuration': DEFAULT_HORIZONTAL_ANIMATION_DURATION },\n        }),\n    ]),\n    /** Animation that transitions the step along the Y axis in a vertical stepper. */\n    verticalStepTransition: trigger('verticalStepTransition', [\n        state('previous', style({ height: '0px', visibility: 'hidden' })),\n        state('next', style({ height: '0px', visibility: 'hidden' })),\n        // Transition to `inherit`, rather than `visible`,\n        // because visibility on a child element the one from the parent,\n        // making this element focusable inside of a `hidden` element.\n        state('current', style({ height: '*', visibility: 'inherit' })),\n        transition('* <=> current', animate('{{animationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)'), {\n            params: { 'animationDuration': DEFAULT_VERTICAL_ANIMATION_DURATION },\n        }),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Template to be used to override the icons inside the step header.\n */\nclass MatStepperIcon {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nMatStepperIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperIcon, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatStepperIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepperIcon, selector: \"ng-template[matStepperIcon]\", inputs: { name: [\"matStepperIcon\", \"name\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matStepperIcon]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['matStepperIcon']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Content for a `mat-step` that will be rendered lazily.\n */\nclass MatStepContent {\n    constructor(_template) {\n        this._template = _template;\n    }\n}\nMatStepContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepContent, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatStepContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepContent, selector: \"ng-template[matStepContent]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matStepContent]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatStep extends CdkStep {\n    constructor(stepper, _errorStateMatcher, _viewContainerRef, stepperOptions) {\n        super(stepper, stepperOptions);\n        this._errorStateMatcher = _errorStateMatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._isSelected = Subscription.EMPTY;\n    }\n    ngAfterContentInit() {\n        this._isSelected = this._stepper.steps.changes\n            .pipe(switchMap(() => {\n            return this._stepper.selectionChange.pipe(map(event => event.selectedStep === this), startWith(this._stepper.selected === this));\n        }))\n            .subscribe(isSelected => {\n            if (isSelected && this._lazyContent && !this._portal) {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._isSelected.unsubscribe();\n    }\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control, form) {\n        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n        // Custom error state checks for the validity of form that is not submitted or touched\n        // since user can trigger a form change by calling for another step without directly\n        // interacting with the current form.\n        const customErrorState = !!(control && control.invalid && this.interacted);\n        return originalErrorState || customErrorState;\n    }\n}\nMatStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStep, deps: [{ token: forwardRef(() => MatStepper) }, { token: i1.ErrorStateMatcher, skipSelf: true }, { token: i0.ViewContainerRef }, { token: STEPPER_GLOBAL_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatStep.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStep, selector: \"mat-step\", inputs: { color: \"color\" }, providers: [\n        { provide: ErrorStateMatcher, useExisting: MatStep },\n        { provide: CdkStep, useExisting: MatStep },\n    ], queries: [{ propertyName: \"stepLabel\", first: true, predicate: MatStepLabel, descendants: true }, { propertyName: \"_lazyContent\", first: true, predicate: MatStepContent, descendants: true }], exportAs: [\"matStep\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <ng-content></ng-content>\\n  <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n</ng-template>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStep, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-step', providers: [\n                        { provide: ErrorStateMatcher, useExisting: MatStep },\n                        { provide: CdkStep, useExisting: MatStep },\n                    ], encapsulation: ViewEncapsulation.None, exportAs: 'matStep', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-template>\\n  <ng-content></ng-content>\\n  <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return [{ type: MatStepper, decorators: [{\n                    type: Inject,\n                    args: [forwardRef(() => MatStepper)]\n                }] }, { type: i1.ErrorStateMatcher, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [STEPPER_GLOBAL_OPTIONS]\n                }] }]; }, propDecorators: { stepLabel: [{\n                type: ContentChild,\n                args: [MatStepLabel]\n            }], color: [{\n                type: Input\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatStepContent, { static: false }]\n            }] } });\nclass MatStepper extends CdkStepper {\n    constructor(dir, changeDetectorRef, elementRef) {\n        super(dir, changeDetectorRef, elementRef);\n        /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n        this.steps = new QueryList();\n        /** Event emitted when the current step is done transitioning in. */\n        this.animationDone = new EventEmitter();\n        /**\n         * Whether the label should display in bottom or end position.\n         * Only applies in the `horizontal` orientation.\n         */\n        this.labelPosition = 'end';\n        /**\n         * Position of the stepper's header.\n         * Only applies in the `horizontal` orientation.\n         */\n        this.headerPosition = 'top';\n        /** Consumer-specified template-refs to be used to override the header icons. */\n        this._iconOverrides = {};\n        /** Stream of animation `done` events when the body expands/collapses. */\n        this._animationDone = new Subject();\n        this._animationDuration = '';\n        const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n        this.orientation = nodeName === 'mat-vertical-stepper' ? 'vertical' : 'horizontal';\n    }\n    /** Duration for the animation. Will be normalized to milliseconds if no units are set. */\n    get animationDuration() {\n        return this._animationDuration;\n    }\n    set animationDuration(value) {\n        this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        this._icons.forEach(({ name, templateRef }) => (this._iconOverrides[name] = templateRef));\n        // Mark the component for change detection whenever the content children query changes\n        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._stateChanged();\n        });\n        this._animationDone\n            .pipe(\n        // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n        // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState), takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (event.toState === 'current') {\n                this.animationDone.emit();\n            }\n        });\n    }\n    _stepIsNavigable(index, step) {\n        return step.completed || this.selectedIndex === index || !this.linear;\n    }\n    _getAnimationDuration() {\n        if (this.animationDuration) {\n            return this.animationDuration;\n        }\n        return this.orientation === 'horizontal'\n            ? DEFAULT_HORIZONTAL_ANIMATION_DURATION\n            : DEFAULT_VERTICAL_ANIMATION_DURATION;\n    }\n}\nMatStepper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepper, deps: [{ token: i3$1.Directionality, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nMatStepper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepper, selector: \"mat-stepper, mat-vertical-stepper, mat-horizontal-stepper, [matStepper]\", inputs: { selectedIndex: \"selectedIndex\", disableRipple: \"disableRipple\", color: \"color\", labelPosition: \"labelPosition\", headerPosition: \"headerPosition\", animationDuration: \"animationDuration\" }, outputs: { animationDone: \"animationDone\" }, host: { attributes: { \"role\": \"tablist\" }, properties: { \"class.mat-stepper-horizontal\": \"orientation === \\\"horizontal\\\"\", \"class.mat-stepper-vertical\": \"orientation === \\\"vertical\\\"\", \"class.mat-stepper-label-position-end\": \"orientation === \\\"horizontal\\\" && labelPosition == \\\"end\\\"\", \"class.mat-stepper-label-position-bottom\": \"orientation === \\\"horizontal\\\" && labelPosition == \\\"bottom\\\"\", \"class.mat-stepper-header-position-bottom\": \"headerPosition === \\\"bottom\\\"\", \"attr.aria-orientation\": \"orientation\" } }, providers: [{ provide: CdkStepper, useExisting: MatStepper }], queries: [{ propertyName: \"_steps\", predicate: MatStep, descendants: true }, { propertyName: \"_icons\", predicate: MatStepperIcon, descendants: true }], viewQueries: [{ propertyName: \"_stepHeader\", predicate: MatStepHeader, descendants: true }], exportAs: [\"matStepper\", \"matVerticalStepper\", \"matHorizontalStepper\"], usesInheritance: true, ngImport: i0, template: \"<ng-container [ngSwitch]=\\\"orientation\\\">\\n  <!-- Horizontal stepper -->\\n  <div class=\\\"mat-horizontal-stepper-wrapper\\\" *ngSwitchCase=\\\"'horizontal'\\\">\\n    <div class=\\\"mat-horizontal-stepper-header-container\\\">\\n      <ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n        <ng-container\\n          [ngTemplateOutlet]=\\\"stepTemplate\\\"\\n          [ngTemplateOutletContext]=\\\"{step: step, i: i}\\\"></ng-container>\\n        <div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div>\\n      </ng-container>\\n    </div>\\n\\n    <div class=\\\"mat-horizontal-content-container\\\">\\n      <div *ngFor=\\\"let step of steps; let i = index\\\"\\n           class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\"\\n           [@horizontalStepTransition]=\\\"{\\n              'value': _getAnimationDirection(i),\\n              'params': {'animationDuration': _getAnimationDuration()}\\n            }\\\"\\n           (@horizontalStepTransition.done)=\\\"_animationDone.next($event)\\\"\\n           [id]=\\\"_getStepContentId(i)\\\"\\n           [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n           [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n        <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <!-- Vertical stepper -->\\n  <ng-container *ngSwitchCase=\\\"'vertical'\\\">\\n    <div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n      <ng-container\\n        [ngTemplateOutlet]=\\\"stepTemplate\\\"\\n        [ngTemplateOutletContext]=\\\"{step: step, i: i}\\\"></ng-container>\\n      <div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\">\\n        <div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\"\\n             [@verticalStepTransition]=\\\"{\\n                'value': _getAnimationDirection(i),\\n                'params': {'animationDuration': _getAnimationDuration()}\\n              }\\\"\\n             (@verticalStepTransition.done)=\\\"_animationDone.next($event)\\\"\\n             [id]=\\\"_getStepContentId(i)\\\"\\n             [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n             [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n          <div class=\\\"mat-vertical-content\\\">\\n            <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </ng-container>\\n\\n</ng-container>\\n\\n<!-- Common step templating -->\\n<ng-template let-step=\\\"step\\\" let-i=\\\"i\\\" #stepTemplate>\\n  <mat-step-header\\n    [class.mat-horizontal-stepper-header]=\\\"orientation === 'horizontal'\\\"\\n    [class.mat-vertical-stepper-header]=\\\"orientation === 'vertical'\\\"\\n    (click)=\\\"step.select()\\\"\\n    (keydown)=\\\"_onKeydown($event)\\\"\\n    [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\"\\n    [id]=\\\"_getStepLabelId(i)\\\"\\n    [attr.aria-posinset]=\\\"i + 1\\\"\\n    [attr.aria-setsize]=\\\"steps.length\\\"\\n    [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n    [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n    [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n    [attr.aria-disabled]=\\\"_stepIsNavigable(i, step) ? null : true\\\"\\n    [index]=\\\"i\\\"\\n    [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n    [label]=\\\"step.stepLabel || step.label\\\"\\n    [selected]=\\\"selectedIndex === i\\\"\\n    [active]=\\\"_stepIsNavigable(i, step)\\\"\\n    [optional]=\\\"step.optional\\\"\\n    [errorMessage]=\\\"step.errorMessage\\\"\\n    [iconOverrides]=\\\"_iconOverrides\\\"\\n    [disableRipple]=\\\"disableRipple || !_stepIsNavigable(i, step)\\\"\\n    [color]=\\\"step.color || color\\\"></mat-step-header>\\n</ng-template>\\n\", styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-header-position-bottom .mat-horizontal-stepper-header-container{order:1}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-wrapper{display:flex;flex-direction:column}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.cdk-high-contrast-active .mat-horizontal-content-container{outline:solid 1px}.mat-stepper-header-position-bottom .mat-horizontal-content-container{padding:24px 24px 0 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}.cdk-high-contrast-active .mat-vertical-content-container{outline:solid 1px}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\"], dependencies: [{ kind: \"directive\", type: i3.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"component\", type: MatStepHeader, selector: \"mat-step-header\", inputs: [\"color\", \"state\", \"label\", \"errorMessage\", \"iconOverrides\", \"index\", \"selected\", \"active\", \"optional\", \"disableRipple\"] }], animations: [\n        matStepperAnimations.horizontalStepTransition,\n        matStepperAnimations.verticalStepTransition,\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepper, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-stepper, mat-vertical-stepper, mat-horizontal-stepper, [matStepper]', exportAs: 'matStepper, matVerticalStepper, matHorizontalStepper', inputs: ['selectedIndex'], host: {\n                        '[class.mat-stepper-horizontal]': 'orientation === \"horizontal\"',\n                        '[class.mat-stepper-vertical]': 'orientation === \"vertical\"',\n                        '[class.mat-stepper-label-position-end]': 'orientation === \"horizontal\" && labelPosition == \"end\"',\n                        '[class.mat-stepper-label-position-bottom]': 'orientation === \"horizontal\" && labelPosition == \"bottom\"',\n                        '[class.mat-stepper-header-position-bottom]': 'headerPosition === \"bottom\"',\n                        '[attr.aria-orientation]': 'orientation',\n                        'role': 'tablist',\n                    }, animations: [\n                        matStepperAnimations.horizontalStepTransition,\n                        matStepperAnimations.verticalStepTransition,\n                    ], providers: [{ provide: CdkStepper, useExisting: MatStepper }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-container [ngSwitch]=\\\"orientation\\\">\\n  <!-- Horizontal stepper -->\\n  <div class=\\\"mat-horizontal-stepper-wrapper\\\" *ngSwitchCase=\\\"'horizontal'\\\">\\n    <div class=\\\"mat-horizontal-stepper-header-container\\\">\\n      <ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n        <ng-container\\n          [ngTemplateOutlet]=\\\"stepTemplate\\\"\\n          [ngTemplateOutletContext]=\\\"{step: step, i: i}\\\"></ng-container>\\n        <div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div>\\n      </ng-container>\\n    </div>\\n\\n    <div class=\\\"mat-horizontal-content-container\\\">\\n      <div *ngFor=\\\"let step of steps; let i = index\\\"\\n           class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\"\\n           [@horizontalStepTransition]=\\\"{\\n              'value': _getAnimationDirection(i),\\n              'params': {'animationDuration': _getAnimationDuration()}\\n            }\\\"\\n           (@horizontalStepTransition.done)=\\\"_animationDone.next($event)\\\"\\n           [id]=\\\"_getStepContentId(i)\\\"\\n           [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n           [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n        <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <!-- Vertical stepper -->\\n  <ng-container *ngSwitchCase=\\\"'vertical'\\\">\\n    <div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n      <ng-container\\n        [ngTemplateOutlet]=\\\"stepTemplate\\\"\\n        [ngTemplateOutletContext]=\\\"{step: step, i: i}\\\"></ng-container>\\n      <div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\">\\n        <div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\"\\n             [@verticalStepTransition]=\\\"{\\n                'value': _getAnimationDirection(i),\\n                'params': {'animationDuration': _getAnimationDuration()}\\n              }\\\"\\n             (@verticalStepTransition.done)=\\\"_animationDone.next($event)\\\"\\n             [id]=\\\"_getStepContentId(i)\\\"\\n             [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n             [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n          <div class=\\\"mat-vertical-content\\\">\\n            <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </ng-container>\\n\\n</ng-container>\\n\\n<!-- Common step templating -->\\n<ng-template let-step=\\\"step\\\" let-i=\\\"i\\\" #stepTemplate>\\n  <mat-step-header\\n    [class.mat-horizontal-stepper-header]=\\\"orientation === 'horizontal'\\\"\\n    [class.mat-vertical-stepper-header]=\\\"orientation === 'vertical'\\\"\\n    (click)=\\\"step.select()\\\"\\n    (keydown)=\\\"_onKeydown($event)\\\"\\n    [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\"\\n    [id]=\\\"_getStepLabelId(i)\\\"\\n    [attr.aria-posinset]=\\\"i + 1\\\"\\n    [attr.aria-setsize]=\\\"steps.length\\\"\\n    [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n    [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n    [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n    [attr.aria-disabled]=\\\"_stepIsNavigable(i, step) ? null : true\\\"\\n    [index]=\\\"i\\\"\\n    [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n    [label]=\\\"step.stepLabel || step.label\\\"\\n    [selected]=\\\"selectedIndex === i\\\"\\n    [active]=\\\"_stepIsNavigable(i, step)\\\"\\n    [optional]=\\\"step.optional\\\"\\n    [errorMessage]=\\\"step.errorMessage\\\"\\n    [iconOverrides]=\\\"_iconOverrides\\\"\\n    [disableRipple]=\\\"disableRipple || !_stepIsNavigable(i, step)\\\"\\n    [color]=\\\"step.color || color\\\"></mat-step-header>\\n</ng-template>\\n\", styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-header-position-bottom .mat-horizontal-stepper-header-container{order:1}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-wrapper{display:flex;flex-direction:column}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.cdk-high-contrast-active .mat-horizontal-content-container{outline:solid 1px}.mat-stepper-header-position-bottom .mat-horizontal-content-container{padding:24px 24px 0 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}.cdk-high-contrast-active .mat-vertical-content-container{outline:solid 1px}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\"] }]\n        }], ctorParameters: function () { return [{ type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { _stepHeader: [{\n                type: ViewChildren,\n                args: [MatStepHeader]\n            }], _steps: [{\n                type: ContentChildren,\n                args: [MatStep, { descendants: true }]\n            }], _icons: [{\n                type: ContentChildren,\n                args: [MatStepperIcon, { descendants: true }]\n            }], animationDone: [{\n                type: Output\n            }], disableRipple: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], headerPosition: [{\n                type: Input\n            }], animationDuration: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nclass MatStepperNext extends CdkStepperNext {\n}\nMatStepperNext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperNext, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatStepperNext.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepperNext, selector: \"button[matStepperNext]\", inputs: { type: \"type\" }, host: { properties: { \"type\": \"type\" }, classAttribute: \"mat-stepper-next\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperNext, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'button[matStepperNext]',\n                    host: {\n                        'class': 'mat-stepper-next',\n                        '[type]': 'type',\n                    },\n                    inputs: ['type'],\n                }]\n        }] });\n/** Button that moves to the previous step in a stepper workflow. */\nclass MatStepperPrevious extends CdkStepperPrevious {\n}\nMatStepperPrevious.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperPrevious, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatStepperPrevious.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MatStepperPrevious, selector: \"button[matStepperPrevious]\", inputs: { type: \"type\" }, host: { properties: { \"type\": \"type\" }, classAttribute: \"mat-stepper-previous\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperPrevious, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'button[matStepperPrevious]',\n                    host: {\n                        'class': 'mat-stepper-previous',\n                        '[type]': 'type',\n                    },\n                    inputs: ['type'],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatStepperModule {\n}\nMatStepperModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatStepperModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperModule, declarations: [MatStep,\n        MatStepLabel,\n        MatStepper,\n        MatStepperNext,\n        MatStepperPrevious,\n        MatStepHeader,\n        MatStepperIcon,\n        MatStepContent], imports: [MatCommonModule,\n        CommonModule,\n        PortalModule,\n        MatButtonModule,\n        CdkStepperModule,\n        MatIconModule,\n        MatRippleModule], exports: [MatCommonModule,\n        MatStep,\n        MatStepLabel,\n        MatStepper,\n        MatStepperNext,\n        MatStepperPrevious,\n        MatStepHeader,\n        MatStepperIcon,\n        MatStepContent] });\nMatStepperModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperModule, providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher], imports: [MatCommonModule,\n        CommonModule,\n        PortalModule,\n        MatButtonModule,\n        CdkStepperModule,\n        MatIconModule,\n        MatRippleModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MatStepperModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CommonModule,\n                        PortalModule,\n                        MatButtonModule,\n                        CdkStepperModule,\n                        MatIconModule,\n                        MatRippleModule,\n                    ],\n                    exports: [\n                        MatCommonModule,\n                        MatStep,\n                        MatStepLabel,\n                        MatStepper,\n                        MatStepperNext,\n                        MatStepperPrevious,\n                        MatStepHeader,\n                        MatStepperIcon,\n                        MatStepContent,\n                    ],\n                    declarations: [\n                        MatStep,\n                        MatStepLabel,\n                        MatStepper,\n                        MatStepperNext,\n                        MatStepperPrevious,\n                        MatStepHeader,\n                        MatStepperIcon,\n                        MatStepContent,\n                    ],\n                    providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_STEPPER_INTL_PROVIDER, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatStep, MatStepContent, MatStepHeader, MatStepLabel, MatStepper, MatStepperIcon, MatStepperIntl, MatStepperModule, MatStepperNext, MatStepperPrevious, matStepperAnimations };\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Asset } from '../asset.class';\n\n@Component({\n    selector: 'asset-details',\n    template: `\n        <ng-container *ngIf=\"item; else empty_state\">\n            <section image class=\"relative w-full h-64 bg-black/20\">\n                <image-carousel\n                    [images]=\"images\"\n                    class=\"absolute inset-0\"\n                ></image-carousel>\n                <button\n                    mat-icon-button\n                    close\n                    (click)=\"close.emit()\"\n                    class=\"absolute top-2 left-2 bg-black/40 sm:hidden text-white\"\n                >\n                    <app-icon>arrow_back</app-icon>\n                </button>\n                <button\n                    mat-icon-button\n                    fav\n                    [class.text-white]=\"!fav\"\n                    [class.text-blue-400]=\"fav\"\n                    (click)=\"toggleFav.emit()\"\n                    class=\"absolute top-2 right-2 bg-black/40\"\n                >\n                    <app-icon>{{\n                        fav ? 'favorite' : 'favorite_border'\n                    }}</app-icon>\n                </button>\n            </section>\n            <div class=\"p-2 space-y-2 flex-1 h-1/2 overflow-auto\">\n                <section actions class=\"z-0 flex items-center justify-between\">\n                    <div>\n                        <h2 class=\"text-xl font-medium mb-2 mt-4\">\n                            {{ item.name }}\n                        </h2>\n                        <p>{{ item.count }} Available</p>\n                    </div>\n                    <a-counter\n                        [(ngModel)]=\"item.amount\"\n                        [min]=\"1\"\n                        [max]=\"item.count || 2\"\n                    ></a-counter>\n                </section>\n                <hr />\n                <section details class=\"space-y-2\">\n                    <h2 class=\"text-xl font-medium\">Details</h2>\n                    <div class=\"flex items-center space-x-2\">\n                        <p>{{ item.description || 'No description' }}</p>\n                    </div>\n                </section>\n            </div>\n            <div class=\"p-2 border-t border-gray-200 shadow\">\n                <button\n                    mat-button\n                    select\n                    [class.inverse]=\"active\"\n                    class=\"w-full\"\n                    (click)=\"active = !active; activeChange.emit(active)\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-2xl\">{{\n                            active ? 'remove' : 'add'\n                        }}</app-icon>\n                        <p>\n                            {{\n                                active ? 'Remove this asset' : 'Add this asset'\n                            }}\n                        </p>\n                    </div>\n                </button>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div\n                empty\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-30 text-center\">\n                    Select a asset to view it's details\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 30%;\n                min-width: 20rem;\n                height: 100%;\n                min-height: 65vh;\n                background: white;\n            }\n        `,\n    ],\n})\nexport class AssetDetailsComponent {\n    @Input() public item?: Asset;\n    @Input() public active: boolean = false;\n    @Input() public fav: boolean = false;\n\n    @Output() public toggleFav = new EventEmitter<void>();\n    @Output() public activeChange = new EventEmitter<boolean>();\n    @Output() public close = new EventEmitter<void>();\n\n    public get images() {\n        return this.item?.images.map((_) => _.url) || [];\n    }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: 'asset-filters',\n    template: ``,\n    styles: [``]\n})\nexport class AssetFiltersComponent {\n    \n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: 'asset-filters-display',\n    template: ``,\n    styles: [``]\n})\nexport class AssetFiltersDisplayComponent {\n    \n}\n","\nexport interface AssetResource {\n    id?: string;\n    name: string,\n    url: string;\n    price?: number;\n}\n\nexport interface AssetDetail {\n    id: string;\n    name: string;\n}\n\nexport interface AssetPurchase {\n    id?: string;\n    name: string;\n    value: string;\n}\n\nexport class Asset {\n    public readonly id: string;\n    public readonly name: string;\n    public readonly category: string;\n    public readonly images: AssetResource[];\n    public readonly barcode: string;\n    public readonly brand: string;\n    public readonly size: 'Small' | 'Medium' | 'Large';\n    public readonly description: string;\n    public readonly specifications: Record<string, string>;\n    public readonly purchase_details: AssetPurchase[];\n    public readonly consumables: AssetDetail[];\n    public readonly general_details: AssetDetail[];\n    public readonly invoices: AssetResource[];\n    public readonly count: number;\n    public readonly locations: [string, string][];\n    public amount = 1;\n\n    constructor(_data: Partial<Asset> = {}) {\n        this.id = _data.id || '';\n        this.name = _data.name || '';\n        this.category = _data.category || '';\n        this.images = _data.images || [];\n        this.barcode = _data.barcode || '';\n        this.brand = _data.brand || '';\n        this.size = _data.size || 'Small';\n        this.description = _data.description || '';\n        this.specifications = _data.specifications || {};\n        this.purchase_details = _data.purchase_details || [];\n        this.consumables = _data.consumables || [];\n        this.general_details = _data.general_details || [];\n        this.invoices = _data.invoices || [];\n        this.count = _data.count ?? 0;\n        this.locations = _data.locations || [];\n        this.amount = _data.amount ?? 1;\n    }\n}","import { del, get, post, put } from '@placeos/ts-client';\nimport { toQueryString } from 'libs/common/src/lib/api';\nimport { catchError, map } from 'rxjs/operators';\nimport { Asset } from './asset.class';\nimport { Observable, of } from 'rxjs';\n\nconst ASSET_ENDPOINT = '/api/engine/v1/assets';\n\n/**\n * Query the list of available assets\n * @param q Filter the list based of the give string\n */\nexport function queryAssets(q?: string): Observable<Asset[]> {\n    const query = toQueryString({ q });\n    return get(`${ASSET_ENDPOINT}${query ? query : ''}`).pipe(\n        map((_: any) => _.map((d: any) => new Asset(d))),\n        catchError((_) => of([]))\n    );\n}\n\n/**\n * Delete asset with the given ID\n * @param id ID of asset to delete\n */\nexport function deleteAsset(id: string) {\n    return del(`${ASSET_ENDPOINT}/${id}`);\n}\n\n/**\n * Add asset to database with given details\n * @param asset Asset details\n */\nexport function createAsset(asset: Asset): Observable<Asset> {\n    return post(`${ASSET_ENDPOINT}`, asset).pipe(map((_) => new Asset(_)));\n}\n\n/**\n * Update asset in database to the new details\n * @param id ID of the asset to update\n * @param asset New details for asset\n */\nexport function updateAsset(id: string, asset: Asset) {\n    return put(`${ASSET_ENDPOINT}/${id}`, asset).pipe(map((_) => new Asset(_)));\n}\n\n/**\n * Save the details for the given asset in the database\n * @param asset Asset details\n */\nexport function saveAsset(asset: Asset) {\n    return asset.id ? updateAsset(asset.id, asset) : createAsset(asset);\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { debounceTime, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { queryAssets } from './assets.fn';\nimport { queryBookings } from 'libs/bookings/src/lib/bookings.fn';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\n\nexport interface AssetOptions {\n    zone?: string;\n    date: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetStateService {\n    private _options = new BehaviorSubject<AssetOptions>({ date: Date.now() });\n    private _search = new BehaviorSubject<string>('');\n    private _loading = new BehaviorSubject<string>('');\n\n    public readonly search = this._search.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    public readonly asset_list = of(0).pipe(\n        switchMap(() => {\n            this._loading.next(this._loading.getValue() + '[Assets]');\n            return queryAssets();\n        }),\n        tap((_) =>\n            this._loading.next(\n                this._loading.getValue().replace(/\\[Assets\\]/g, '')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly asset_bookings = this._options.pipe(\n        debounceTime(300),\n        switchMap(({ zone, date }) => {\n            this._loading.next(this._loading.getValue() + '[Bookings]');\n            return queryBookings({\n                zones: zone || '',\n                period_start: getUnixTime(startOfDay(date)),\n                period_end: getUnixTime(endOfDay(date)),\n                type: 'asset-request',\n            });\n        }),\n        tap((_) =>\n            this._loading.next(\n                this._loading.getValue().replace(/\\[Bookings\\]/g, '')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.asset_list,\n        this.asset_bookings,\n    ]).pipe(\n        map(([list, bookings]) =>\n            list\n                .filter((_) => !bookings.find((b) => b.asset_id === _.id))\n                .sort(\n                    (a, b) =>\n                        a.category.localeCompare(b.category) ||\n                        a.name.localeCompare(b.name)\n                )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly filtered_assets = combineLatest([\n        this._search,\n        this.available_assets,\n    ]).pipe(\n        map(([search, assets]) => {\n            const s = search.toLowerCase();\n            return assets.filter(\n                (_) =>\n                    _.name.toLowerCase().includes(s) ||\n                    _.description.toLowerCase().includes(s)\n            );\n        }),\n        shareReplay(1)\n    );\n\n    public setSearch(value: string) {\n        this._search.next(`${value}`);\n    }\n\n    public setOptions(options: Partial<AssetOptions>) {\n        this._options.next({ ...this._options.value, ...options });\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { AssetStateService } from '../asset-state.service';\nimport { Asset } from '../asset.class';\n\n@Component({\n    selector: 'asset-list',\n    template: `\n        <div class=\"w-full h-full overflow-auto py-2\">\n            <h3 class=\"font-bold px-2\">Results</h3>\n            <p count class=\"text-sm opacity-60 mb-4 px-2\">\n                {{ (assets | async)?.length || 0 }} result(s) found\n            </p>\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <ul\n                    class=\"list-style-none space-y-2 p-2\"\n                    *ngIf=\"(assets | async)?.length; else empty_state\"\n                >\n                    <li\n                        asset\n                        *ngFor=\"let asset of assets | async\"\n                        class=\"relative p-2 rounded-lg w-full shadow border bg-white border-gray-200\"\n                    >\n                        <button\n                            matRipple\n                            select\n                            class=\"w-full h-full flex items-center pr-10\"\n                            (click)=\"selectAsset(asset)\"\n                        >\n                            <div\n                                class=\"relative w-16 h-16 rounded-xl bg-black/20 mr-4\"\n                            >\n                                <div\n                                    class=\"absolute top-1 left-1 border border-white bg-black/50 rounded-full h-6 w-6 flex items-center justify-center text-white\"\n                                    *ngIf=\"selected.includes(asset.id)\"\n                                >\n                                    <app-icon>done</app-icon>\n                                </div>\n                            </div>\n                            <div class=\"space-y-2 text-left flex-1\">\n                                <div class=\"font-medium flex items-center justify-between\">\n                                    <div>{{ asset.name || 'Asset' }}</div>\n                                    <div class=\"opacity-60 text-xs\">{{ asset.category }}</div>\n                                </div>\n                                <div\n                                    class=\"flex items-center text-sm space-x-2\"\n                                >\n                                    <p>\n                                        {{ asset.count < 1 ? 2 : asset.count }}\n                                        Available\n                                    </p>\n                                </div>\n                            </div>\n                        </button>\n                        <button\n                            mat-icon-button\n                            fav\n                            class=\"absolute top-1 right-1\"\n                            [class.text-blue-400]=\"isFavourite(asset.id)\"\n                            (click)=\"toggleFav.emit(asset)\"\n                        >\n                            <app-icon>{{\n                                isFavourite(asset.id)\n                                    ? 'favorite'\n                                    : 'favorite_border'\n                            }}</app-icon>\n                        </button>\n                    </li>\n                </ul>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <div\n                empty\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-30 text-center\">\n                    No available assets for selected time and/or filters\n                </p>\n            </div>\n        </ng-template>\n        <ng-template #load_state>\n            <div\n                loading\n                class=\"p-16 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p class=\"opacity-30\">Finding available assets...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n        }\n    `],\n})\nexport class AssetListComponent {\n    @Input() public selected: string = '';\n    @Input() public favorites: string[] = [];\n    @Output() public toggleFav = new EventEmitter<Asset>();\n    @Output() public onSelect = new EventEmitter<Asset>();\n\n    public readonly loading = this._asset_state.loading;\n    public readonly assets = this._asset_state.filtered_assets;\n\n    constructor(private _asset_state: AssetStateService) {}\n\n    public isFavourite(asset_id: string) {\n        return this.favorites.includes(asset_id);\n    }\n\n    public selectAsset(asset: Asset) {\n        this.onSelect.emit(asset);\n    }\n}\n","import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Asset } from './asset.class';\n\nexport function generateAssetForm(asset: Asset = new Asset()) {\n    return new FormGroup({\n        id: new FormControl(asset.id),\n        name: new FormControl(asset.name, [Validators.required]),\n        category: new FormControl(asset.category, [Validators.required]),\n        count: new FormControl(asset.count),\n        size: new FormControl(asset.size),\n        description: new FormControl(asset.description),\n        barcode: new FormControl(asset.barcode, [Validators.required]),\n        brand: new FormControl(asset.brand, [Validators.required]),\n        specifications: new FormControl(asset.specifications),\n        purchase_date: new FormControl(Date.now(), [Validators.required]),\n        expiry_date: new FormControl(0),\n        invoices: new FormControl(asset.invoices),\n        purchase_details: new FormControl(asset.purchase_details),\n        consumables: new FormControl(asset.consumables),\n        general_details: new FormControl(asset.general_details),\n        images: new FormControl(asset.images),\n    });\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AssetSelectModalComponent } from './asset-select-modal/asset-select-modal.component';\nimport { ComponentsModule } from '@placeos/components';\nimport { AssetDetailsComponent } from './asset-select-modal/asset-details.component';\nimport { AssetFiltersComponent } from './asset-select-modal/asset-filters.component';\nimport { AssetFiltersDisplayComponent } from './asset-select-modal/asset-filters-display.component';\nimport { AssetListComponent } from './asset-select-modal/asset-list.component';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { FormsModule } from '@angular/forms';\n\nexport * from './asset-select-modal/asset-select-modal.component';\n\nconst COMPONENTS = [AssetSelectModalComponent];\n\nconst MODULE_COMPONENTS = [\n    AssetDetailsComponent,\n    AssetFiltersComponent,\n    AssetFiltersDisplayComponent,\n    AssetListComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS, ...MODULE_COMPONENTS],\n    imports: [\n        CommonModule, \n        FormFieldsModule, \n        FormsModule, \n        ComponentsModule\n    ],\n    exports: [...COMPONENTS],\n})\nexport class AssetsModule {}\n","import { Injectable } from '@angular/core';\nimport { Booking, queryBookings, updateBooking } from '@placeos/bookings';\nimport { BaseClass, notifySuccess, unique } from '@placeos/common';\nimport { SpacesService } from '@placeos/spaces';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport {\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport {\n    Asset,\n    deleteAsset,\n    generateAssetForm,\n    queryAssets,\n    saveAsset,\n} from '@placeos/assets';\n\nexport interface AssetOptions {\n    search?: string;\n    sort_by?: string;\n    view: 'grid' | 'list';\n    active_asset?: string;\n}\n\nexport interface AssetRequest {\n    id: string;\n    assets: { id: string; name: string; amount?: number }[];\n    date: number;\n    duration: number;\n    user_id: string;\n    user_name: string;\n    location_id: string;\n    location_name: string;\n    location_floor: string;\n    status: 'approved' | 'pending' | 'declined';\n    tracking: 'in_storage' | 'in_transit' | 'at_location' | 'unknown';\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetManagerStateService extends BaseClass {\n    private _options = new BehaviorSubject<AssetOptions>({ view: 'grid' });\n    private _change = new BehaviorSubject(0);\n    private _poll = new BehaviorSubject(0);\n    private _form = generateAssetForm();\n    private _loading = new BehaviorSubject(false);\n    /** List of available assets */\n    public readonly assets: Observable<Asset[]> = this._change.pipe(\n        switchMap(() => {\n            this._loading.next(true);\n            return queryAssets();\n        }),\n        tap(() => this._loading.next(false)),\n        shareReplay(1)\n    ) as any;\n    /** Whether asset list is loading */\n    public readonly loading = this._loading.asObservable();\n    /** List of options set for the view */\n    public readonly options = this._options.asObservable();\n    /** List of requests made by users for assets */\n    public readonly requests = combineLatest([\n        this._poll,\n        this._change,\n        this._spaces.initialised,\n    ]).pipe(\n        debounceTime(200),\n        switchMap((_) =>\n            queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'asset-request',\n            })\n        ),\n        map((_) =>\n            _.map(\n                (b) =>\n                    new Booking({\n                        ...b,\n                        extension_data: {\n                            ...b.extension_data,\n                            space: this._spaces.find(b.extension_data.space_id),\n                        },\n                    })\n            )\n        ),\n        tap((_) => console.log('Requests:', _)),\n        shareReplay(1)\n    );\n    /** Filtered list of asset requests */\n    public readonly filtered_requests = combineLatest([\n        this.requests,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            const search = (options.search || '').toLowerCase();\n            return search\n                ? list.filter(\n                      (i) =>\n                          i.user_name.toLowerCase().includes(search) ||\n                          i.extension_data.location_name\n                              .toLowerCase()\n                              .includes(search) ||\n                          i.extension_data.assets.find((_) =>\n                              _.name.toLowerCase().includes(search)\n                          ) ||\n                          i.status.includes(search) ||\n                          i.extension_data.tracking.includes(search)\n                  )\n                : list;\n        })\n    );\n    /** Currently active asset */\n    public readonly active_asset = combineLatest([\n        this.assets,\n        this._options,\n    ]).pipe(\n        map(([list, options]) =>\n            list.find((_) => _.id === options.active_asset)\n        )\n    );\n    /** List of requests for the currently active asset */\n    public readonly active_asset_requests = this.active_asset.pipe(\n        switchMap((asset) => {\n            return this.requests.pipe(\n                map((_) =>\n                    _.filter((i) =>\n                        i.extension_data.assets.find((a) => a.id === asset.id)\n                    )\n                )\n            );\n        }),\n        map((_) => _.filter((i) => i.status !== 'declined'))\n    );\n    /** list of filtered assets */\n    public readonly filtered_assets = combineLatest([\n        this.assets,\n        this._options,\n    ]).pipe(\n        map(([list, options]) =>\n            options.search\n                ? list.filter((i) =>\n                      i.name\n                          .toLowerCase()\n                          .includes(options.search.toLowerCase())\n                  )\n                : list\n        )\n    );\n    /** Mapping of available assets to categories */\n    public readonly asset_mapping = this.filtered_assets.pipe(\n        map((_) => {\n            const map = {};\n            const categories = unique(_.map((i) => i.category));\n            for (const group of categories) {\n                map[group] = _.filter((i) => i.category === group);\n            }\n            return map;\n        })\n    );\n    /** List of asset categories */\n    public readonly asset_categories = this.asset_mapping.pipe(\n        map((_) => Object.keys(_ || {}))\n    );\n\n    public get form() {\n        return this._form;\n    }\n\n    constructor(private _spaces: SpacesService) {\n        super();\n    }\n\n    public startPolling(delay = 15 * 1000) {\n        this.interval('polling', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('polling');\n    }\n\n    public resetForm() {\n        this._form = generateAssetForm();\n    }\n\n    /** Update the set view options */\n    public setOptions(options: Partial<AssetOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public async setStatus(item: Booking, status: any) {\n        const result = await updateBooking(item.id, {\n            ...item,\n            approved: status === 'approved',\n            rejected: status === 'declined',\n        }).toPromise();\n        this._change.next(Date.now());\n        return result;\n    }\n\n    public async setTracking(item: Booking, tracking: string) {\n        const result = await updateBooking(item.id, {\n            ...item,\n            extension_data: { ...item.extension_data, tracking },\n        }).toPromise();\n        this._change.next(Date.now());\n        return result;\n    }\n\n    public clearActiveAsset() {\n        this.setOptions({ active_asset: '' });\n        this.resetForm();\n    }\n\n    public async deleteActiveAsset() {\n        const asset = await this.active_asset.pipe(take(1)).toPromise();\n        if (!asset?.id) return;\n        await deleteAsset(asset.id).toPromise();\n        this._change.next(Date.now());\n        notifySuccess('Successfully deleted asset');\n        this.clearActiveAsset();\n    }\n\n    public async postForm() {\n        if (!this.form?.valid) return;\n        const data = this.form.value;\n        const asset = await saveAsset(data as any).toPromise();\n        this._change.next(Date.now());\n        notifySuccess(`Successfully ${data.id ? 'updated' : 'created'} asset`);\n        this.resetForm();\n        return asset.id;\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-manager-topbar',\n    template: `\n        <div class=\"w-full px-4 py-2 bg-white flex items-center space-x-4\">\n            <a\n                button\n                mat-button\n                class=\"secondary\"\n                [routerLink]=\"['/asset-manager', 'manage', 'details']\"\n            >\n                Add Asset\n            </a>\n            <mat-button-toggle-group\n                [ngModel]=\"(options | async)?.view\"\n                (ngModelChange)=\"setOptions({ view: $event })\"\n                *ngIf=\"show_actions\"\n            >\n                <mat-button-toggle value=\"grid\">\n                    <div\n                        class=\"flex items-center justify-center h-10 w-6 text-xl\"\n                    >\n                        <app-icon>view_module</app-icon>\n                    </div>\n                </mat-button-toggle>\n                <mat-button-toggle value=\"list\">\n                    <div\n                        class=\"flex items-center justify-center h-10 w-6 text-xl\"\n                    >\n                        <app-icon>view_list</app-icon>\n                    </div>\n                </mat-button-toggle>\n            </mat-button-toggle-group>\n            <!-- <button mat-button class=\"clear\" *ngIf=\"show_actions\">\n                <div class=\"flex items-center\">\n                    <div class=\"pl-2\">Sort By</div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button> -->\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"h-[3.25rem]\">\n                <app-icon matPrefix class=\"text-2xl relative top-1 -left-1\"\n                    >search</app-icon\n                >\n                <input\n                    matInput\n                    [ngModel]=\"(options | async)?.search\"\n                    (ngModelChange)=\"setOptions({ search: $event })\"\n                    placeholder=\"Search for an asset or request\"\n                />\n            </mat-form-field>\n        </div>\n    `,\n    styles: [``],\n})\nexport class AssetManagerTopbarComponent {\n    @Input() public show_actions = true;\n\n    public readonly options = this._state.options;\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-listing',\n    template: `\n        <asset-manager-topbar\n            [show_actions]=\"active === 'items'\"\n        ></asset-manager-topbar>\n        <div class=\"flex flex-col flex-1 h-1/2 w-full px-4\">\n            <nav mat-tab-nav-bar>\n                <a\n                    mat-tab-link\n                    [routerLink]=\"['/asset-manager', 'list', 'requests']\"\n                    [routerLinkActive]=\"'active'\"\n                    [active]=\"active === 'requests'\"\n                    (click)=\"active = 'requests'\"\n                >\n                    Requests\n                </a>\n                <a\n                    mat-tab-link\n                    [routerLink]=\"['/asset-manager', 'list', 'items']\"\n                    [active]=\"active === 'items'\"\n                    (click)=\"active = 'items'\"\n                >\n                    Assets\n                </a>\n            </nav>\n            <div class=\"flex-1 h-1/2 w-full overflow-visible\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetListingComponent {\n    public active = 'requests';\n\n    constructor(private _router: Router) {}\n\n    public ngOnInit() {\n        this.active = this._router.url.includes('requests')\n            ? 'requests'\n            : 'items';\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[asset-manager]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-1/2 flex-1 bg-gray-200 overflow-hidden\">\n            <router-outlet></router-outlet>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class AssetManagerComponent {}\n","import { Pipe } from '@angular/core';\n\n@Pipe({\n    name: 'splitjoin',\n})\nexport class SplitJoinPipe {\n    public transform(\n        value: string,\n        split: string = '_',\n        join: string = ' '\n    ): string {\n        return (value || '').split(split).join(join);\n    }\n}\n","import { Component } from '@angular/core';\nimport { Booking } from '@placeos/bookings';\nimport { MapPinComponent } from '@placeos/components';\nimport {\n    AssetManagerStateService,\n    AssetRequest,\n} from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-location-modal',\n    template: `\n        <div class=\"p-6 relative\">\n            <button\n                mat-icon-button\n                mat-dialog-close\n                class=\"absolute top-4 right-4\"\n            >\n                <app-icon>close</app-icon>\n            </button>\n            <h2 class=\"font-medium mb-2\">\n                {{ (asset | async)?.name }} in use location:\n                {{ (requests | async)?.length }}\n            </h2>\n            <mat-form-field appearance=\"outline\" class=\"h-[3.5rem] mb-2\">\n                <app-icon matPrefix>search</app-icon>\n                <input matInput placeholder=\"Search...\" />\n            </mat-form-field>\n            <div class=\"flex items-center space-x-4 w-[90vw] text-sm\">\n                <div\n                    class=\"flex-1 h-[60vh] w-1/2 border border-gray-300 bg-gray-50 overflow-auto\"\n                >\n                    <custom-table\n                        [dataSource]=\"requests\"\n                        [columns]=\"[\n                            'location_floor',\n                            'location_name',\n                            'tracking',\n                            'user_name'\n                        ]\"\n                        [display_column]=\"[\n                            'Level',\n                            'Space',\n                            'Tracking',\n                            'Requestee'\n                        ]\"\n                        [column_size]=\"['4r', 'flex', '10r', '6r']\"\n                        [template]=\"{\n                            tracking: tracking_template,\n                            location_floor: level_template,\n                            location_name: space_template\n                        }\"\n                        (row_clicked)=\"selected = $event; updateFeatures()\"\n                    ></custom-table>\n                </div>\n                <div\n                    class=\"flex-1 h-[60vh] w-1/2 border border-gray-300 bg-gray-100 relative flex items-center justify-center\"\n                >\n                    <div class=\"absolute top-4 left-4 bg-white px-4 py-2 rounded-3xl border border-gray-300\" *ngIf=\"selected\">\n                        {{selected.extension_data?.space?.level?.display_name || selected.extension_data?.space?.level?.name}}\n                    </div>\n                    <i-map\n                        *ngIf=\"selected; else empty_state\"\n                        [src]=\"selected.extension_data?.space?.level?.map_id\"\n                        [styles]=\"{ '#Zones': { display: 'none' },'#zones': { display: 'none' } }\"\n                        [features]=\"selected_feature\"\n                    ></i-map>\n                </div>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <p class=\"opacity-30\">\n                Select a space from the list to view map location\n            </p>\n        </ng-template>\n        <ng-template #space_template let-row=\"row\">\n            {{\n                row.extension_data?.space?.display_name ||\n                    row.extension_data?.space?.name\n            }}\n        </ng-template>\n        <ng-template #level_template let-row=\"row\">\n            {{\n                row.extension_data?.space?.level?.display_name ||\n                    row.extension_data?.space?.level?.name\n            }}\n        </ng-template>\n        <ng-template #tracking_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"bg-none w-full flex items-center px-2 py-1 text-left\"\n                [matMenuTriggerFor]=\"tracking_menu\"\n                (click)=\"$event.stopPropagation()\"\n                [disabled]=\"loading[row.id]\"\n            >\n                <div class=\"capitalize flex-1\">\n                    {{ row.extension_data?.tracking | splitjoin }}\n                </div>\n                <app-icon class=\"text-2xl\">expand_more</app-icon>\n            </button>\n            <mat-menu #tracking_menu=\"matMenu\" class=\"w-36\">\n                <button mat-menu-item (click)=\"setTracking(row, 'in_storage')\">\n                    In Storage\n                </button>\n                <button mat-menu-item (click)=\"setTracking(row, 'in_transit')\">\n                    In Transit\n                </button>\n                <button mat-menu-item (click)=\"setTracking(row, 'at_location')\">\n                    At Location\n                </button>\n            </mat-menu>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AssetLocationModalComponent {\n    public readonly asset = this._state.active_asset;\n    public readonly requests = this._state.active_asset_requests;\n\n    public selected: Booking;\n    public selected_feature;\n\n    public loading = {};\n\n    public updateFeatures() {\n        const space = this.selected.extension_data?.space || {};\n        this.selected_feature = this.selected\n            ? [{\n                  location: space.map_id,\n                  content: MapPinComponent,\n                  z_index: 99,\n                  data: { message: `${space.display_name || space.name} is here` },\n              }]\n            : [];\n    }\n\n    public async setTracking(item: any, state: string) {\n        this.loading[item.id] = true;\n        await this._state.setTracking(item, state);\n        this.loading[item.id] = false;\n    }\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { CustomTooltipComponent } from '@placeos/components';\nimport { first } from 'rxjs/operators';\nimport { AssetLocationModalComponent } from './asset-location-modal.component';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-view',\n    template: `\n        <div\n            class=\"h-full w-full\"\n            *ngIf=\"!loading && (asset | async); else loading_state\"\n        >\n            <div class=\"flex items-center space-x-4 p-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"inverse\"\n                    [routerLink]=\"['/asset-manager', 'list', 'items']\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">arrow_back</app-icon>\n                        <div class=\"mr-2\">Back</div>\n                    </div>\n                </a>\n                <div class=\"flex items-center space-x-2 font-medium\">\n                    <span>Assets</span>\n                    <span>\n                        <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                    </span>\n                    <span>{{ (asset | async)?.category }}</span>\n                    <span>\n                        <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                    </span>\n                    <span>{{ (asset | async)?.name }}</span>\n                </div>\n            </div>\n            <div class=\"flex items-center\">\n                <div class=\"bg-white flex-1 w-1/2 h-[360px]\">\n                    <image-carousel\n                        [images]=\"(asset | async)?.images || []\"\n                    ></image-carousel>\n                </div>\n                <div class=\"w-[512px] h-[360px] px-4 flex flex-col\">\n                    <div\n                        class=\"w-full flex items-center justify-between border-b border-gray-300\"\n                    >\n                        <div class=\"font-medium\">\n                            {{ (asset | async)?.name }}\n                        </div>\n                        <div class=\"flex items-center text-sm \">\n                            <a\n                                button\n                                mat-button\n                                class=\"clear\"\n                                [routerLink]=\"[\n                                    '/asset-manager',\n                                    'manage',\n                                    'details'\n                                ]\"\n                            >\n                                <div class=\"flex items-center text-secondary\">\n                                    <app-icon class=\"text-lg\">edit</app-icon>\n                                    <div class=\"mr-2\">Edit</div>\n                                </div>\n                            </a>\n                            <div class=\"w-px h-4 bg-gray-300\"></div>\n                            <button mat-button class=\"clear\">\n                                <div\n                                    class=\"flex items-center text-secondary\"\n                                    customTooltip\n                                    [content]=\"delete_tooltip\"\n                                >\n                                    <app-icon class=\"text-lg\">delete</app-icon>\n                                    <div class=\"mr-2\">Delete</div>\n                                </div>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"py-4 w-full flex-1 h-1/2 overflow-auto\">\n                        {{ (asset | async)?.description || '~No Description~' }}\n                    </div>\n                    <div\n                        class=\"rounded bg-white shadow border border-gray-300 w-full divide-y divide-gray-200\"\n                    >\n                        <div class=\"flex items-center justify-between p-3\">\n                            <div class=\"pl-2\">\n                                Available:\n                                {{\n                                    (asset | async)?.count -\n                                        (asset | async)?.locations?.length || 0\n                                }}\n                            </div>\n                            <button mat-button>Assign to Location</button>\n                        </div>\n                        <div class=\"flex items-center justify-between p-3\">\n                            <div class=\"pl-2\">\n                                In Use:\n                                {{ (asset | async)?.locations?.length || 0 }}\n                            </div>\n                            <button mat-button (click)=\"viewLocations()\">\n                                View Locations\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <mat-tab-group>\n                <mat-tab label=\"Specifications\">\n                    <div class=\"p-8\">\n                        <h3 class=\"p-2\">General</h3>\n                        <div\n                            data-table\n                            class=\"bg-white  border border-gray-300\"\n                        >\n                            <div class=\"flex items-center p-2\">\n                                <label>Barcode</label>\n                                <div>\n                                    {{ (asset | async)?.barcode || '~None~' }}\n                                </div>\n                            </div>\n                            <div class=\"flex items-center p-2\">\n                                <label>Brand</label>\n                                <div>\n                                    {{ (asset | async)?.brand || '~None~' }}\n                                </div>\n                            </div>\n                        </div>\n                        <h3\n                            class=\"p-2\"\n                            *ngIf=\"(asset | async)?.general_details?.length\"\n                        >\n                            Other\n                        </h3>\n                        <div\n                            data-table\n                            class=\"bg-white  border border-gray-300\"\n                            *ngIf=\"(asset | async)?.general_details?.length\"\n                        >\n                            <div\n                                class=\"flex items-center\"\n                                *ngFor=\"\n                                    let item of (asset | async)\n                                        ?.general_details || []\n                                \"\n                            >\n                                <label>{{ item.name }}</label>\n                                <div>{{ item.value || 'None' }}</div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-tab>\n                <mat-tab label=\"Purchase information\">\n                    <div class=\"p-8\">\n                        <h3 class=\"p-2\">Timeline</h3>\n                        <div\n                            data-table\n                            class=\"bg-white  border border-gray-300\"\n                        >\n                            <div class=\"flex items-center p-2\">\n                                <label>Purchase Date</label>\n                                <div>\n                                    {{\n                                        (asset | async)?.purchase_date\n                                            | date: 'mediumDate'\n                                    }}\n                                </div>\n                            </div>\n                            <div class=\"flex items-center p-2\">\n                                <label>Good Until</label>\n                                <div>\n                                    {{\n                                        (asset | async)?.good_until\n                                            | date: 'mediumDate'\n                                    }}\n                                </div>\n                            </div>\n                        </div>\n                        <h3 class=\"p-2\">Invoices</h3>\n                        <div\n                            data-table\n                            class=\"bg-white  border border-gray-300\"\n                            *ngIf=\"\n                                (asset | async)?.invoices?.length;\n                                else empty_invoices\n                            \"\n                        >\n                            <div\n                                class=\"flex items-center p-2\"\n                                *ngFor=\"\n                                    let item of (asset | async)?.invoices || []\n                                \"\n                            >\n                                <label>{{ item.name }}</label>\n                                <div>{{ item.price | currency }}</div>\n                                <a\n                                    class=\"underline\"\n                                    [href]=\"invoice.url | safe\"\n                                    target=\"_blank\"\n                                    ref=\"noreferer noopener\"\n                                >\n                                    Download\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </mat-tab>\n                <mat-tab label=\"Consumable assets\">\n                    <div class=\"p-8\">\n                        <h3 class=\"p-2\">Items</h3>\n                        <div\n                            data-table\n                            class=\"bg-white  border border-gray-300\"\n                            *ngIf=\"\n                                (asset | async)?.consumables?.length;\n                                else empty_items\n                            \"\n                        >\n                            <div\n                                class=\"flex items-center p-2\"\n                                *ngFor=\"\n                                    let item of (asset | async)?.consumables ||\n                                        []\n                                \"\n                            >\n                                <label>{{ item.name }}</label>\n                                <div>{{ item.value }}</div>\n                            </div>\n                        </div>\n                    </div>\n                </mat-tab>\n            </mat-tab-group>\n        </div>\n        <ng-template #loading_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Loading asset details...</p>\n            </div>\n        </ng-template>\n        <ng-template #delete_tooltip>\n            <div\n                class=\"p-4 bg-white rounded my-2 w-64 h-36 text-center\"\n                *ngIf=\"!deleting; else delete_loading\"\n            >\n                <p>Are you sure you want to permanently delete this asset?</p>\n                <div class=\"flex items-center space-x-2 mt-6\">\n                    <button\n                        mat-button\n                        class=\"inverse flex-1\"\n                        (click)=\"closeTooltip()\"\n                    >\n                        No\n                    </button>\n                    <button\n                        mat-button\n                        class=\"error flex-1\"\n                        (click)=\"deleteAsset()\"\n                    >\n                        Yes, delete\n                    </button>\n                </div>\n            </div>\n            <ng-template #delete_loading>\n                <div\n                    class=\"p-4 bg-white rounded my-2 w-64 h-36 flex flex-col items-center justify-center space-y-2\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>Deleting asset details...</p>\n                </div>\n            </ng-template>\n        </ng-template>\n        <ng-template #empty_invoices>\n            <div class=\"p-2 opacity-30\">No Invoices</div>\n        </ng-template>\n        <ng-template #empty_items>\n            <div class=\"p-2 opacity-30\">No consumables</div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            [data-table] > div:nth-child(2n) {\n                background: #0001;\n            }\n\n            label {\n                width: 15rem;\n                min-width: 0;\n            }\n        `,\n    ],\n})\nexport class AssetViewComponent extends BaseClass {\n    public loading = false;\n    public deleting = false;\n    public readonly asset = this._state.active_asset;\n\n    @ViewChild(CustomTooltipComponent)\n    public _tooltip_el: CustomTooltipComponent;\n\n    public async deleteAsset() {\n        this.deleting = true;\n        await this._state.deleteActiveAsset();\n        this.deleting = false;\n        this._router.navigate(['/asset-manager', 'list', 'items']);\n        this.closeTooltip();\n    }\n\n    public closeTooltip() {\n        this._tooltip_el?.close();\n    }\n\n    constructor(\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _state: AssetManagerStateService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public viewLocations() {\n        this._dialog.open(AssetLocationModalComponent);\n    }\n\n    public ngOnInit() {\n        this.loading = true;\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((params) => {\n                if (params.has('id')) {\n                    this._state.setOptions({ active_asset: params.get('id') });\n                }\n            })\n        );\n        this.timeout(\n            'no_asset',\n            () => this._router.navigate(['/asset-mananger']),\n            1000\n        );\n        this._state.active_asset.pipe(first((_) => !!_)).subscribe(() => {\n            this.clearTimeout('no_asset');\n            this.loading = false;\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { randomInt } from '@placeos/common';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-consumables',\n    template: `\n        <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n            <h3>Items</h3>\n            <div\n                class=\"flex items-center hover:bg-gray-50 rounded\"\n                *ngFor=\"\n                    let pair of form.value?.consumables || [];\n                    let i = index\n                \"\n            >\n                <div class=\"flex-1 flex flex-col\">\n                    <label *ngIf=\"i === 0\">ID</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"pair.id\"\n                            placeholder=\"e.g. Item ID\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex flex-col ml-4\">\n                    <label *ngIf=\"i === 0\">Name</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"pair.name\"\n                            placeholder=\"e.g. 12345\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button\n                    mat-icon-button\n                    class=\"ml-2 bg-gray-50 border border-gray-200\"\n                    [class.mt-6]=\"i === 0\"\n                    (click)=\"removeItem(pair)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n            <button\n                mat-button\n                class=\"w-full bg-white border border-gray-300 rounded-none text-black mt-4\"\n                (click)=\"addItem()\"\n            >\n                Add Item\n            </button>\n        </div>\n    `,\n    styles: [``],\n})\nexport class AssetFlowConsumablesComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) {}\n\n    public addItem() {\n        const { consumables } = this.form?.value || { consumables: [] };\n        this.form.patchValue({\n            consumables: [...consumables, { id: `item-${randomInt(99999)}`, name: '' }],\n        });\n    }\n\n    public removeItem(item: any) {\n        const { consumables } = this.form?.value || { consumables: [] };\n        this.form.patchValue({\n            consumables: consumables.filter((_) => _.id !== item.id),\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-details',\n    template: `\n        <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"mb-4 border border-gray-300 p-4 bg-gray-50\">\n                <h3 class=\"mb-4\">Add Asset Images</h3>\n                <div classs=\"flex items-center\">\n                    <upload-list formControlName=\"images\"></upload-list>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-4\">\n                <div class=\"flex-1 flex-col\">\n                    <label>Asset name<span>*</span></label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"e.g. iPad Pro\"\n                        />\n                        <mat-error>Asset name is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex-col\">\n                    <label>Category<span>*</span></label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"category\">\n                            <mat-option value=\"Furniture\">Furniture</mat-option>\n                            <mat-option value=\"Technology\">Technology</mat-option>\n                            <mat-option value=\"Stationary\">Stationary</mat-option>\n                        </mat-select>\n                        <mat-error>Category is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-4\">\n                <div class=\"flex-1 flex-col\">\n                    <label>Item Size</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"size\">\n                            <mat-option value=\"Very Small\">Very Small</mat-option>\n                            <mat-option value=\"Small\">Small</mat-option>\n                            <mat-option value=\"Medium\">Medium</mat-option>\n                            <mat-option value=\"Large\">Large</mat-option>\n                            <mat-option value=\"Very Large\">Very Large</mat-option>\n                        </mat-select>\n                        <mat-error>Item size is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex-col\">\n                    <label>Quantity</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"count\"\n                            type=\"number\"\n                            placeholder=\"1\"\n                        />\n                        <mat-error>Quantity is required</mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n            <label>Description</label>\n            <mat-form-field appearance=\"outline\">\n                <textarea\n                    matInput\n                    formControlName=\"description\"\n                    placeholder=\"e.g. iPad Pro\"\n                ></textarea>\n                <mat-error>Description is required</mat-error>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetFlowDetailsComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { randomInt } from '@placeos/common';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-purchases',\n    template: ` <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n        <h3 class=\"mb-2\">Timeline</h3>\n        <div class=\"flex items-center space-x-4\">\n            <div class=\"flex-1 flex-col\">\n                <label>Purchase Date</label>\n                <a-date-field></a-date-field>\n            </div>\n            <div class=\"flex-1 flex-col\">\n                <label>End of Service Date</label>\n                <a-date-field></a-date-field>\n            </div>\n        </div>\n        <h3 class=\"mb-2\">Purchase Details</h3>\n        <div class=\"flex flex-col\">\n            <div\n                class=\"flex items-center hover:bg-gray-50 rounded\"\n                *ngFor=\"\n                    let invoice of form.value?.invoices || [];\n                    let i = index\n                \"\n            >\n                <div class=\"flex-1 flex flex-col\">\n                    <label *ngIf=\"i === 0\">Purchase Price</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"invoice.price\"\n                            placeholder=\"e.g. $1231.12\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex flex-col ml-4\">\n                    <label *ngIf=\"i === 0\">Invoice</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input matInput placeholder=\"e.g. Invoice.pdf\" />\n                    </mat-form-field>\n                </div>\n                <button\n                    mat-icon-button\n                    class=\"ml-2 bg-gray-50 border border-gray-200\"\n                    [class.mt-6]=\"i === 0\"\n                    (click)=\"removeInvoice(invoice)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n            <button\n                mat-button\n                class=\"w-full bg-white border border-gray-300 rounded-none text-black mt-4\"\n                (click)=\"addInvoice()\"\n            >\n                Add Invoice\n            </button>\n        </div>\n        <h3 class=\"my-4\">Other</h3>\n        <div class=\"flex flex-col\">\n            <div\n                class=\"flex items-center hover:bg-gray-50 rounded\"\n                *ngFor=\"\n                    let pair of form.value?.purchase_details || [];\n                    let i = index\n                \"\n            >\n                <div class=\"flex-1 flex flex-col\">\n                    <label *ngIf=\"i === 0\">Name</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"pair.name\"\n                            placeholder=\"e.g. Supplier ID\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex flex-col ml-4\">\n                    <label *ngIf=\"i === 0\">Value</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"pair.value\"\n                            placeholder=\"e.g. 12345\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button\n                    mat-icon-button\n                    class=\"ml-2 bg-gray-50 border border-gray-200\"\n                    [class.mt-6]=\"i === 0\"\n                    (click)=\"removeProperty(pair)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n            <button\n                mat-button\n                class=\"w-full bg-white border border-gray-300 rounded-none text-black mt-4\"\n                (click)=\"addProperty()\"\n            >\n                Add Extra Purchase Detail\n            </button>\n        </div>\n    </div>`,\n    styles: [``],\n})\nexport class AssetFlowPurchasesComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) {}\n\n    public addInvoice() {\n        const { invoices } = this.form?.value || { invoices: [] };\n        this.form.patchValue({\n            invoices: [\n                ...invoices,\n                { id: `invoice-${randomInt(99999)}`, name: '', url: '' },\n            ],\n        });\n    }\n\n    public removeInvoice(item: any) {\n        const { invoices } = this.form?.value || { invoices: [] };\n        this.form.patchValue({\n            invoices: invoices.filter((_) => _.id !== item.id),\n        });\n    }\n\n    public addProperty() {\n        const { purchase_details } = this.form?.value || {\n            purchase_details: [],\n        };\n        this.form.patchValue({\n            purchase_details: [\n                ...purchase_details,\n                { id: `prop-${randomInt(99999)}`, name: '', value: '' },\n            ],\n        });\n    }\n\n    public removeProperty(item: any) {\n        const { purchase_details } = this.form?.value || {\n            purchase_details: [],\n        };\n        this.form.patchValue({\n            purchase_details: purchase_details.filter((_) => _.id !== item.id),\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { randomInt } from '@placeos/common';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-specs',\n    template: ` \n    <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n        <h3 class=\"mb-4\">General</h3>\n        <div class=\"flex items-center space-x-4\">\n            <div class=\"flex-1 flex flex-col\">\n                <label>Barcode<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"barcode\" placeholder=\"e.g. 10001\" />\n                    <mat-error>Barcode is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex-1 flex flex-col\">\n                <label>Brand<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"brand\" placeholder=\"e.g. Apple\" />\n                    <mat-error>Brand is required</mat-error>\n                </mat-form-field>\n            </div>\n        </div>\n        <h3>Other</h3>\n            <div\n                class=\"flex items-center hover:bg-gray-50 rounded\"\n                *ngFor=\"\n                    let pair of form.value?.general_details || [];\n                    let i = index\n                \"\n            >\n                <div class=\"flex-1 flex flex-col\">\n                    <label *ngIf=\"i === 0\">ID</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"pair.id\"\n                            placeholder=\"e.g. Item ID\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex flex-col ml-4\">\n                    <label *ngIf=\"i === 0\">Name</label>\n                    <mat-form-field class=\"h-[3.25rem]\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [(ngModel)]=\"pair.name\"\n                            placeholder=\"e.g. 12345\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                    </mat-form-field>\n                </div>\n                <button\n                    mat-icon-button\n                    class=\"ml-2 bg-gray-50 border border-gray-200\"\n                    [class.mt-6]=\"i === 0\"\n                    (click)=\"removeItem(pair)\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n            <button\n                mat-button\n                class=\"w-full bg-white border border-gray-300 rounded-none text-black mt-4\"\n                (click)=\"addItem()\"\n            >\n                Add New Field row\n            </button>\n    </div>\n    `,\n    styles: [``],\n})\nexport class AssetFlowSpecsComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) { }\n\n    public addItem() {\n        const { general_details } = this.form?.value || { general_details: [] };\n        this.form.patchValue({\n            general_details: [...general_details, { id: `item-${randomInt(99999)}`, name: '' }],\n        });\n    }\n\n    public removeItem(item: any) {\n        const { general_details } = this.form?.value || { general_details: [] };\n        this.form.patchValue({\n            general_details: general_details.filter((_) => _.id !== item.id),\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { take } from 'rxjs/operators';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow',\n    template: `\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"flex flex-col h-full max-w-full w-[768px] overflow-hidden px-2 py-4 mx-auto\"\n                *ngIf=\"!success; else success_state\"\n            >\n                <div class=\"flex items-center px-4 space-x-4\">\n                    <a\n                        mat-icon-button\n                        class=\"bg-white rounded-none border border-solid border-gray-300\"\n                        [routerLink]=\"['/asset-manager', 'list']\"\n                        (click)=\"clearActiveAsset()\"\n                    >\n                        <app-icon>arrow_back</app-icon>\n                    </a>\n                    <span>{{ form?.value?.id ? 'Edit' : 'Add' }} Asset</span>\n                </div>\n                <mat-horizontal-stepper\n                    [linear]=\"false\"\n                    labelPosition=\"bottom\"\n                    class=\"flex-1 h-1/2\"\n                >\n                    <mat-step>\n                        <ng-template matStepLabel>Details</ng-template>\n                        <div class=\"bg-white border border-gray-200\">\n                            <div class=\"overflow-auto w-full\">\n                                <asset-flow-details></asset-flow-details>\n                            </div>\n                            <div\n                                class=\"flex items-center justify-end border-t border-gray-300 p-2 space-x-2 w-full\"\n                            >\n                                <a\n                                    button\n                                    mat-button\n                                    class=\"inverse\"\n                                    [routerLink]=\"['/asset-manager', 'list']\"\n                                    (click)=\"clearActiveAsset()\"\n                                >\n                                    Cancel\n                                </a>\n                                <button mat-button matStepperNext>Next</button>\n                            </div>\n                        </div>\n                    </mat-step>\n                    <mat-step>\n                        <ng-template matStepLabel>Specifications</ng-template>\n                        <div class=\"bg-white border border-gray-200\">\n                            <div class=\"overflow-auto w-full\">\n                                <asset-flow-specs></asset-flow-specs>\n                            </div>\n                            <div\n                                class=\"flex items-center justify-end border-t border-gray-200 p-2 space-x-2 w-full\"\n                            >\n                                <button\n                                    mat-button\n                                    matStepperPrevious\n                                    class=\"inverse\"\n                                >\n                                    Back\n                                </button>\n                                <button mat-button matStepperNext>Next</button>\n                            </div>\n                        </div>\n                    </mat-step>\n                    <mat-step>\n                        <ng-template matStepLabel\n                            >Purchase Information</ng-template\n                        >\n                        <div class=\"bg-white border border-gray-200\">\n                            <div class=\"overflow-auto w-full\">\n                                <asset-flow-purchases></asset-flow-purchases>\n                            </div>\n                            <div\n                                class=\"flex items-center justify-end border-t border-gray-200 p-2 space-x-2 w-full\"\n                            >\n                                <button\n                                    mat-button\n                                    matStepperPrevious\n                                    class=\"inverse\"\n                                >\n                                    Back\n                                </button>\n                                <button mat-button matStepperNext>Next</button>\n                            </div>\n                        </div>\n                    </mat-step>\n                    <mat-step>\n                        <ng-template matStepLabel\n                            >Consumable Assets</ng-template\n                        >\n                        <div class=\"bg-white border border-gray-200\">\n                            <div class=\"overflow-auto w-full\">\n                                <asset-flow-consumables></asset-flow-consumables>\n                            </div>\n                            <div\n                                class=\"flex items-center justify-end border-t border-gray-200 p-2 space-x-2 w-full\"\n                            >\n                                <button\n                                    mat-button\n                                    matStepperPrevious\n                                    class=\"inverse\"\n                                >\n                                    Back\n                                </button>\n                                <button mat-button (click)=\"save()\">\n                                    Save\n                                </button>\n                            </div>\n                        </div>\n                    </mat-step>\n                </mat-horizontal-stepper>\n            </div>\n        </ng-container>\n        <ng-template #load_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Saving asset...</p>\n            </div>\n        </ng-template>\n        <ng-template #success_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n            >\n                <div\n                    class=\"w-[768px] bg-white rounded p-8 relative space-y-2 flex flex-col items-center\"\n                >\n                    <h2 class=\"text-2xl\">New Asset Created</h2>\n                    <img class=\"w-60\" src=\"assets/asset_success.svg\" />\n                    <p class=\"w-3/5 pb-4 text-center\">\n                        An asset has been created called “{{ data.name }}” and\n                        has been added to the {{ data.category }} category.\n                    </p>\n                    <div class=\"flex items-center justify-center space-x-2\">\n                        <button\n                            mat-button\n                            class=\"inverse w-32\"\n                            (click)=\"success = false\"\n                        >\n                            Add Asset\n                        </button>\n                        <a\n                            button\n                            mat-button\n                            class=\"w-32\"\n                            [routerLink]=\"['/asset-manager', 'view', id]\"\n                        >\n                            View Asset\n                        </a>\n                    </div>\n                    <a\n                        mat-icon-button\n                        class=\"absolute top-1 right-1 !m-0 opacity-30 hover:opacity-100\"\n                        [routerLink]=\"['/asset-manager', 'list']\"\n                    >\n                        <app-icon>close</app-icon>\n                    </a>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            mat-horizontal-stepper {\n                background: none !important;\n            }\n        `,\n    ],\n})\nexport class AssetFlowComponent {\n    public loading = false;\n    public success = false;\n    public data = {};\n    public id = '';\n\n    public readonly form = this._state.form;\n    public readonly clearActiveAsset = () => this._state.clearActiveAsset();\n\n    public async save() {\n        this.loading = true;\n        this.data = this._state.form.value;\n        this.id = await this._state.postForm().catch((_) => {\n            notifyError(`Error saving asset details. ${JSON.stringify(_)}`);\n            throw _;\n        });\n        this.loading = false;\n        if (this.id) this.success = true;\n        else notifyError('Some form fields are invalid');\n    }\n\n    constructor(private _state: AssetManagerStateService) {}\n\n    public async ngOnInit() {\n        const options = await this._state.options.pipe(take(1)).toPromise();\n        if (options.active_asset) {\n            const asset = await this._state.active_asset\n                .pipe(take(1))\n                .toPromise();\n            this._state.form.patchValue(asset);\n        }\n    }\n}\n","import { Pipe } from '@angular/core';\nimport { formatDuration } from 'date-fns';\n\n@Pipe({\n    name: 'duration',\n})\nexport class DurationFormatPipe {\n    public transform(value: number, short = true): string {\n        let duration = formatDuration({\n            days: Math.floor(value / (24 * 60)),\n            hours: Math.floor((value / 60) % 24),\n            minutes: Math.floor(value % 60),\n        });\n        if (!short) return duration;\n        return duration\n            .replace(' day', 'd')\n            .replace(' hour', 'hr')\n            .replace(' minute', 'min');\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    AssetManagerStateService,\n    AssetRequest,\n} from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-request-details',\n    template: `\n        <div\n            class=\"fixed inset-0 bg-black/50 z-50\"\n            *ngIf=\"request\"\n            (click)=\"request = null; requestChange.emit(request)\"\n        >\n            <div\n                class=\"absolute inset-y-0 right-0 bg-white w-[480px]\"\n                (click)=\"$event.stopPropagation()\"\n            >\n                <button\n                    mat-icon-button\n                    (click)=\"request = null; requestChange.emit(request)\"\n                    class=\"absolute top-1 right-1\"\n                >\n                    <app-icon>close</app-icon>\n                </button>\n                <div class=\"border-b border-gray-200 px-2 py-4 flex space-x-4\">\n                    <a-user-avatar\n                        [user]=\"{ name: request.user_name }\"\n                        class=\"text-xl\"\n                    ></a-user-avatar>\n                    <div details class=\"space-y-1\">\n                        <div class=\"font-medium\">{{ request.user_name }}</div>\n                        <div class=\"flex items-center text-sm space-x-2\">\n                            <app-icon>mail</app-icon>\n                            <a\n                                class=\"underline\"\n                                [href]=\"'mailto:' + request.user_email\"\n                            >\n                                {{ request.user_email || 'staff@place.tech' }}\n                            </a>\n                        </div>\n                        <div class=\"flex items-center text-sm space-x-2\">\n                            <app-icon>call</app-icon>\n                            <a\n                                class=\"underline\"\n                                [href]=\"'tel:' + request.user_phone\"\n                            >\n                                {{ request.user_phone || '04 1234 5678' }}\n                            </a>\n                        </div>\n                        <div class=\"flex items-center text-sm space-x-2\">\n                            <app-icon>work_outline</app-icon>\n                            <div>{{ request.user_company || 'PlaceOS' }}</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"px-3 py-4 relative\">\n                    <div class=\"flex items-center space-x-4\">\n                        <div\n                            class=\"h-6 w-6 rounded-full text-secondary bg-gray-200 flex items-center justify-center\"\n                        >\n                            <app-icon class=\"text-sm\">send</app-icon>\n                        </div>\n                        <div class=\"font-medium\">Assets Requested</div>\n                    </div>\n                    <div class=\"pl-10 flex flex-col mt-1\">\n                        <div\n                            *ngFor=\"\n                                let asset of request.extension_data?.assets ||\n                                    []\n                            \"\n                        >\n                            {{ asset.amount || 1 }}× {{ asset.name }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center space-x-4 mt-4\">\n                        <div\n                            class=\"h-6 w-6 rounded-full text-secondary bg-gray-200 flex items-center justify-center\"\n                        >\n                            <app-icon class=\"text-sm\">event</app-icon>\n                        </div>\n                        <div class=\"font-medium\">Date For</div>\n                    </div>\n                    <div class=\"pl-10 mt-1\">\n                        {{ request.date | date: 'mediumDate' }}\n                    </div>\n                    <div class=\"flex items-center space-x-4 mt-4\">\n                        <div\n                            class=\"h-6 w-6 rounded-full text-secondary bg-gray-200 flex items-center justify-center\"\n                        >\n                            <app-icon class=\"text-sm\">schedule</app-icon>\n                        </div>\n                        <div class=\"font-medium\">Period</div>\n                    </div>\n                    <div class=\"pl-10 mt-1\">\n                        {{ request.date | date: 'shortTime' }} &ndash;\n                        {{\n                            request.date + request.duration * 60 * 1000\n                                | date: 'shortTime'\n                        }}\n                        ({{ request.duration | duration }})\n                    </div>\n                    <div class=\"flex items-center space-x-4 mt-4\">\n                        <div\n                            class=\"h-6 w-6 rounded-full text-secondary bg-gray-200 flex items-center justify-center\"\n                        >\n                            <app-icon class=\"text-sm\">place</app-icon>\n                        </div>\n                        <div class=\"font-medium\">Floor</div>\n                    </div>\n                    <div class=\"pl-10 mt-1\">\n                        {{\n                            request.extension_data?.space?.level\n                                ?.display_name ||\n                                request.extension_data?.space?.level?.name\n                        }}\n                    </div>\n                    <div class=\"flex items-center space-x-4 mt-4\">\n                        <div\n                            class=\"h-6 w-6 rounded-full text-secondary bg-gray-200 flex items-center justify-center\"\n                        >\n                            <app-icon class=\"text-sm\">meeting_room</app-icon>\n                        </div>\n                        <div class=\"font-medium\">Room</div>\n                    </div>\n                    <div class=\"pl-10 mt-1\">\n                        {{\n                            request.extension_data?.space?.display_name ||\n                                request.extension_data?.space?.name\n                        }}\n                    </div>\n                    <div class=\"absolute top-4 right-4 text-sm\">\n                        <button\n                            matRipple\n                            class=\"rounded-3xl !bg-opacity-20 flex items-center px-2 py-1 w-full text-left space-x-2 mb-4\"\n                            [class.bg-green-600]=\"request.status === 'approved'\"\n                            [class.bg-red-600]=\"request.status === 'declined'\"\n                            [class.bg-yellow-400]=\"\n                                request.status === 'tentative'\n                            \"\n                            [matMenuTriggerFor]=\"menu\"\n                            [disabled]=\"loading\"\n                        >\n                            <app-icon\n                                class=\"text-xl\"\n                                [class.text-green-600]=\"\n                                    request.status === 'approved'\n                                \"\n                                [class.text-red-600]=\"\n                                    request.status === 'declined'\n                                \"\n                                [class.text-yellow-400]=\"\n                                    request.status === 'tentative'\n                                \"\n                            >\n                                {{\n                                    request.status === 'approved'\n                                        ? 'done'\n                                        : request.status === 'declined'\n                                        ? 'close'\n                                        : 'warning'\n                                }}\n                            </app-icon>\n                            <div class=\"capitalize flex-1\">\n                                {{ request.status }}\n                            </div>\n                            <app-icon class=\"text-2xl\">expand_more</app-icon>\n                        </button>\n                        <mat-menu #menu=\"matMenu\" class=\"w-36\">\n                            <button\n                                mat-menu-item\n                                (click)=\"setStatus('approved')\"\n                            >\n                                Approve\n                            </button>\n                            <button\n                                mat-menu-item\n                                (click)=\"setStatus('declined')\"\n                            >\n                                Decline\n                            </button>\n                        </mat-menu>\n                        <button\n                            matRipple\n                            class=\"bg-none w-full flex items-center px-2 py-1 text-left border border-gray-200 rounded-none\"\n                            [matMenuTriggerFor]=\"tracking_menu\"\n                            [disabled]=\"loading\"\n                        >\n                            <div class=\"capitalize flex-1\">\n                                {{\n                                    request.extension_data?.tracking | splitjoin\n                                }}\n                            </div>\n                            <app-icon class=\"text-2xl\">expand_more</app-icon>\n                        </button>\n                        <mat-menu #tracking_menu=\"matMenu\" class=\"w-36\">\n                            <button\n                                mat-menu-item\n                                (click)=\"setTracking('in_storage')\"\n                            >\n                                In Storage\n                            </button>\n                            <button\n                                mat-menu-item\n                                (click)=\"setTracking('in_transit')\"\n                            >\n                                In Transit\n                            </button>\n                            <button\n                                mat-menu-item\n                                (click)=\"setTracking('at_location')\"\n                            >\n                                At Location\n                            </button>\n                        </mat-menu>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class AssetRequestDetailsComponent {\n    @Input() public request: any;\n    @Output() public requestChange = new EventEmitter<any>();\n\n    public loading = false;\n\n    constructor(private _state: AssetManagerStateService) {}\n\n    public async setStatus(status: string) {\n        this.loading = true;\n        await this._state.setStatus(this.request, status);\n        (this.request as any).status = status;\n        this.loading = false;\n    }\n\n    public async setTracking(state: string) {\n        this.loading = true;\n        await this._state.setTracking(this.request, state);\n        (this.request as any).extension_data.tracking = state;\n        this.loading = false;\n    }\n}\n","import { Component } from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport {\n    AssetManagerStateService,\n    AssetRequest,\n} from './asset-manager-state.service';\n\n@Component({\n    selector: 'app-asset-request-list',\n    template: `\n        <div\n            class=\"relative -left-4 w-[calc(100%+2rem)] mt-4 h-[calc(100%-1rem)] flex flex-col\"\n        >\n            <div class=\"bg-white p-4 border-t border-b border-gray-300\">\n                <div class=\"opacity-60 text-sm\">\n                    {{ (requests | async)?.length }} asset request{{\n                        (requests | async)?.length === '1' ? '' : 's'\n                    }}\n                </div>\n            </div>\n            <div class=\"w-full overflow-auto h-1/2 flex-1\">\n                <custom-table\n                    asset-requests\n                    class=\"block min-w-[82rem] text-sm\"\n                    [dataSource]=\"requests\"\n                    [columns]=\"[\n                        'user',\n                        'assets',\n                        'date',\n                        'period',\n                        'location_floor',\n                        'location_name',\n                        'approval',\n                        'tracking'\n                    ]\"\n                    [display_column]=\"[\n                        'Requester',\n                        'Assets Requested',\n                        'Date for',\n                        'Period',\n                        'Floor',\n                        'Room',\n                        'Approval',\n                        'Tracking'\n                    ]\"\n                    [column_size]=\"[\n                        'flex',\n                        '12r',\n                        '',\n                        '9.5r',\n                        '6r',\n                        '12r',\n                        '10r',\n                        '10r'\n                    ]\"\n                    [template]=\"{\n                        user: user_template,\n                        assets: assets_template,\n                        date: date_template,\n                        period: period_template,\n                        approval: approval_template,\n                        tracking: tracking_template,\n                        location_floor: level_template,\n                        location_name: space_template\n                    }\"\n                    [empty]=\"\n                        (filters | async)?.search\n                            ? 'No matching asset requests'\n                            : 'There are no asset requests for the currently selected date.'\n                    \"\n                    (row_clicked)=\"request = $event\"\n                ></custom-table>\n            </div>\n        </div>\n        <ng-template #user_template let-row=\"row\">\n            <div class=\"flex items-center space-x-2\">\n                <a-user-avatar [user]=\"{ name: row.user_name }\"></a-user-avatar>\n                <div class=\"flex-1\">{{ row.user_name }}</div>\n            </div>\n        </ng-template>\n        <ng-template #assets_template let-row=\"row\">\n            <div class=\"flex flex-col\">\n                <div *ngFor=\"let asset of row.extension_data?.assets || []\">\n                    {{ asset.amount || 1 }}× {{ asset.name }}\n                </div>\n            </div>\n        </ng-template>\n        <ng-template #date_template let-row=\"row\">\n            {{ row.date | date: 'mediumDate' }}\n        </ng-template>\n        <ng-template #space_template let-row=\"row\">\n            {{\n                row.extension_data?.space?.display_name ||\n                    row.extension_data?.space?.name\n            }}\n        </ng-template>\n        <ng-template #level_template let-row=\"row\">\n            {{\n                row.extension_data?.space?.level?.display_name ||\n                    row.extension_data?.space?.level?.name\n            }}\n        </ng-template>\n        <ng-template #period_template let-row=\"row\">\n            {{ row.date | date: 'shortTime' }} &ndash;\n            {{ row.date + row.duration * 60 * 1000 | date: 'shortTime' }}\n        </ng-template>\n        <ng-template #approval_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"rounded-3xl !bg-opacity-20 flex items-center px-2 py-1 w-full text-left space-x-2\"\n                [class.bg-green-600]=\"row.status === 'approved'\"\n                [class.bg-red-600]=\"row.status === 'declined'\"\n                [class.bg-yellow-400]=\"row.status === 'tentative'\"\n                [matMenuTriggerFor]=\"menu\"\n                (click)=\"$event.stopPropagation()\"\n                [disabled]=\"loading[row.id]\"\n            >\n                <app-icon\n                    class=\"text-xl\"\n                    [class.text-green-600]=\"row.status === 'approved'\"\n                    [class.text-red-600]=\"row.status === 'declined'\"\n                    [class.text-yellow-400]=\"row.status === 'tentative'\"\n                >\n                    {{\n                        row.status === 'approved'\n                            ? 'done'\n                            : row.status === 'declined'\n                            ? 'close'\n                            : 'warning'\n                    }}\n                </app-icon>\n                <div class=\"capitalize flex-1\">{{ row.status }}</div>\n                <app-icon class=\"text-2xl\">expand_more</app-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" class=\"w-36\">\n                <button mat-menu-item (click)=\"setStatus(row, 'approved')\">\n                    Approve\n                </button>\n                <button mat-menu-item (click)=\"setStatus(row, 'declined')\">\n                    Decline\n                </button>\n            </mat-menu>\n        </ng-template>\n        <ng-template #tracking_template let-row=\"row\">\n            <button\n                matRipple\n                class=\"bg-none w-full flex items-center px-2 py-1 text-left\"\n                [matMenuTriggerFor]=\"tracking_menu\"\n                (click)=\"$event.stopPropagation()\"\n                [disabled]=\"loading[row.id]\"\n            >\n                <div class=\"capitalize flex-1\">\n                    {{ row.extension_data?.tracking | splitjoin }}\n                </div>\n                <app-icon class=\"text-2xl\">expand_more</app-icon>\n            </button>\n            <mat-menu #tracking_menu=\"matMenu\" class=\"w-36\">\n                <button mat-menu-item (click)=\"setTracking(row, 'in_storage')\">\n                    In Storage\n                </button>\n                <button mat-menu-item (click)=\"setTracking(row, 'in_transit')\">\n                    In Transit\n                </button>\n                <button mat-menu-item (click)=\"setTracking(row, 'at_location')\">\n                    At Location\n                </button>\n            </mat-menu>\n        </ng-template>\n        <asset-request-details [(request)]=\"request\"></asset-request-details>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetRequestListComponent extends BaseClass {\n    public readonly requests = this._state.filtered_requests;\n    public readonly filters = this._state.options;\n    public request;\n\n    public readonly loading: Record<string, boolean> = {};\n\n    public async setStatus(item: any, status: string) {\n        this.loading[item.id] = true;\n        await this._state.setStatus(item, status);\n        this.loading[item.id] = false;\n    }\n\n    public async setTracking(item: any, state: string) {\n        this.loading[item.id] = true;\n        await this._state.setTracking(item, state);\n        this.loading[item.id] = false;\n    }\n\n    constructor(private _state: AssetManagerStateService) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription('polling', this._state.startPolling());\n    }\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'app-asset-item-list',\n    template: `\n        <div\n            class=\"overflow-auto pb-2 w-full h-full\"\n            *ngIf=\"(categories | async)?.length; else empty_state\"\n        >\n            <div class=\"\" *ngFor=\"let group of categories | async\">\n                <h2 class=\"py-2\">\n                    <span class=\"font-medium\">{{ group }}</span>\n                    <span class=\"text-xs\">\n                        ({{ (assets | async)[group]?.length }} item{{\n                            (assets | async)[group]?.length === 1 ? '' : 's'\n                        }})\n                    </span>\n                </h2>\n                <ng-container [ngSwitch]=\"(options | async).view\">\n                    <ng-container *ngSwitchCase=\"'list'\">\n                        <div\n                            class=\"rounded overflow-hidden bg-white border border-gray-300 divide-y divide-gray-200\"\n                        >\n                            <a\n                                matRipple\n                                class=\"flex items-center text-left space-x-4 p-4\"\n                                *ngFor=\"let asset of (assets | async)[group]\"\n                                [routerLink]=\"[\n                                    '/asset-manager',\n                                    'view',\n                                    asset.id\n                                ]\"\n                            >\n                                <div\n                                    class=\"h-12 w-12 flex items-center justify-center border border-gray-200 p-2\"\n                                >\n                                    <img\n                                        [src]=\"\n                                            asset.images?.length\n                                                ? asset.images[0].url\n                                                : ''\n                                        \"\n                                        class=\"max-w-full max-h-full object-contain\"\n                                    />\n                                </div>\n                                <div>\n                                    <div class=\"truncate\">\n                                        {{ asset.name }}\n                                    </div>\n                                    <div class=\"text-xs opacity-60\">\n                                        In Storage:\n                                        {{\n                                            (asset.count || 0) -\n                                                (asset.locations?.length || 0)\n                                        }}/{{ assets.count || 0 }}\n                                    </div>\n                                </div>\n                            </a>\n                        </div>\n                    </ng-container>\n                    <ng-container *ngSwitchDefault>\n                        <div\n                            class=\"flex items-center overflow-x-auto space-x-4 py-2\"\n                        >\n                            <a\n                                matRipple\n                                class=\"bg-white rounded shadow w-40 h-44 text-left\"\n                                *ngFor=\"let asset of (assets | async)[group]\"\n                                [routerLink]=\"[\n                                    '/asset-manager',\n                                    'view',\n                                    asset.id\n                                ]\"\n                            >\n                                <div\n                                    class=\"w-full h-32 flex items-center justify-center p-2\"\n                                >\n                                    <img\n                                        [src]=\"\n                                            asset.images?.length\n                                                ? asset.images[0].url\n                                                : ''\n                                        \"\n                                        class=\"max-w-full max-h-full object-contain\"\n                                    />\n                                </div>\n                                <div\n                                    class=\"border-t border-gray-200 w-full px-3 py-1\"\n                                >\n                                    <div class=\"truncate\">\n                                        {{ asset.name }}\n                                    </div>\n                                    <div class=\"text-xs opacity-60\">\n                                        In Storage:\n                                        {{\n                                            (asset.count || 0) -\n                                                (asset.locations?.length || 0)\n                                        }}/{{ assets.count || 0 }}\n                                    </div>\n                                </div>\n                            </a>\n                        </div>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </div>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center justify-center p-8 space-y-4 h-full w-full\">\n                <p class=\"opacity-40\">\n                    {{\n                        (options | async)?.search\n                            ? 'No matching assets found'\n                            : 'No assets available. Create a new asset with the button below'\n                    }}\n                </p>\n                <a\n                    button\n                    mat-button\n                    *ngIf=\"!(options | async)?.search\"\n                    [routerLink]=\"['/asset-manager', 'manage', 'details']\"\n                >\n                    Create new Asset\n                </a>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetItemListComponent {\n    public readonly loading = this._state.loading;\n    public readonly options = this._state.options;\n    public readonly categories = this._state.asset_categories;\n    public readonly assets = this._state.asset_mapping;\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { UIModule } from '../ui/ui.module';\n\nimport { AssetListingComponent } from './asset-listing.component';\nimport { AssetManagerTopbarComponent } from './asset-manager-topbar.component';\nimport { AssetManagerComponent } from './asset-manager.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { AssetViewComponent } from './asset-view.component';\nimport { AssetFlowComponent } from './asset-flow.component';\nimport { AssetFlowConsumablesComponent } from './asset-flow-consumables.component';\nimport { AssetFlowDetailsComponent } from './asset-flow-details.component';\nimport { AssetFlowPurchasesComponent } from './asset-flow-purchases.component';\nimport { AssetFlowSpecsComponent } from './asset-flow-specs.component';\nimport { AssetRequestListComponent } from './asset-request-list.component';\nimport { ComponentsModule } from '@placeos/components';\nimport { AssetItemListComponent } from './asset-item-list.component';\nimport { SplitJoinPipe } from './split-join.pipe';\nimport { AssetRequestDetailsComponent } from './asset-request-details.component';\nimport { DurationFormatPipe } from './duration.pipe';\nimport { AssetLocationModalComponent } from './asset-location-modal.component';\n\nconst COMPONENTS = [\n    AssetManagerComponent,\n    AssetManagerTopbarComponent,\n    AssetListingComponent,\n    AssetViewComponent,\n    AssetFlowComponent,\n    AssetFlowConsumablesComponent,\n    AssetFlowDetailsComponent,\n    AssetFlowPurchasesComponent,\n    AssetFlowSpecsComponent,\n    AssetRequestListComponent,\n    AssetItemListComponent,\n    AssetRequestDetailsComponent,\n    AssetLocationModalComponent,\n    SplitJoinPipe,\n    DurationFormatPipe,\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: AssetManagerComponent,\n        children: [\n            {\n                path: 'list',\n                component: AssetListingComponent,\n                children: [\n                    { path: 'items', component: AssetItemListComponent },\n                    { path: 'requests', component: AssetRequestListComponent },\n                    { path: '**', redirectTo: 'requests' },\n                ],\n            },\n            { path: 'view/:id', component: AssetViewComponent },\n            { path: 'manage/:view', component: AssetFlowComponent },\n            { path: '**', redirectTo: 'list/requests' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        ComponentsModule,\n        MatButtonToggleModule,\n        MatProgressBarModule,\n        MatTabsModule,\n        MatStepperModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppAssetManangerModule {}\n"]}