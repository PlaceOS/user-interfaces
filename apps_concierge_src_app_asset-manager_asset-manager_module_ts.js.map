{"version":3,"sources":["./node_modules/@angular/material/fesm2015/button-toggle.js","./apps/concierge/src/app/asset-manager/asset-manager-state.service.ts","./apps/concierge/src/app/asset-manager/asset-manager-topbar.component.ts","./apps/concierge/src/app/asset-manager/asset-listing.component.ts","./apps/concierge/src/app/asset-manager/asset-manager.component.ts","./apps/concierge/src/app/asset-manager/image-carousel.component.ts","./apps/concierge/src/app/asset-manager/asset-view.component.ts","./apps/concierge/src/app/asset-manager/asset-manager.module.ts"],"names":["_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","ɵfac","t","ɵdir","type","selectors","contentQueries","rf","ctx","dirIndex","MatButtonToggle","_t","hostAttrs","hostVars","hostBindings","vertical","inputs","outputs","exportAs","features","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_isPrechecked","monitor","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","ɵcmp","viewQuery","first","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","_onButtonClick","_r0","buttonId","directives","styles","encapsulation","changeDetection","MatButtonToggleModule","ɵmod","ɵinj","imports","AssetManagerStateService","_options","BehaviorSubject","view","_assets","category","images","assets","asObservable","active_asset","combineLatest","pipe","list","_","filtered_assets","search","i","toLowerCase","includes","asset_mapping","categories","asset_categories","Object","keys","next","getValue","AssetManagerTopbarComponent","_state","setOptions","o","AssetListingComponent","AssetManagerComponent","ImageCarouselComponent","offset","ROUTES","path","component","children","AssetViewComponent","_route","_router","loading","asset","subscription","paramMap","subscribe","params","has","get","timeout","navigate","clearTimeout","redirectTo","AppAssetManangerModule"],"mappings":";;;;;;;;AAsBA,MAAMA,EAAM,CAAC,UACPC,EAAM,CAAC,KACPC,EAAoC,IAAI,MAAe,qCAMvDC,EAA0B,IAAI,MAAe,wBAM7CC,EAAyC,CAC3CC,QAAS,KACTC,aAAa,SAAW,IAAMC,GAC9BC,OAAO,GAGX,IAAIC,EAAkB,EAEtB,MAAMC,EACF,YAEAC,EAEAC,GACIC,KAAKF,OAASA,EACdE,KAAKD,MAAQA,G,kBAIfL,EACF,YAAYO,EAAiBC,GACzBF,KAAKC,gBAAkBA,EACvBD,KAAKG,WAAY,EACjBH,KAAKI,WAAY,EACjBJ,KAAKK,WAAY,EAKjBL,KAAKM,8BAAgC,OAErCN,KAAKO,WAAa,OAClBP,KAAKQ,MAAQ,2BAA2BZ,IAMxCI,KAAKS,YAAc,IAAI,MAEvBT,KAAKU,OAAS,IAAI,MAClBV,KAAKW,WACDT,GAAkBA,EAAeS,WAAaT,EAAeS,WAAa,WAGlF,WAAa,OAAOX,KAAKQ,MACzB,SAAST,GACLC,KAAKQ,MAAQT,EACTC,KAAKY,gBACLZ,KAAKY,eAAeC,QAAQC,IACxBA,EAAOC,KAAOf,KAAKQ,MACnBM,EAAOE,kBAKnB,eAAiB,OAAOhB,KAAKG,UAC7B,aAAaJ,GACTC,KAAKG,WAAY,QAAsBJ,GAG3C,YACI,MAAMkB,EAAWjB,KAAKkB,gBAAkBlB,KAAKkB,gBAAgBD,SAAW,GACxE,OAAIjB,KAAKmB,SACEF,EAASG,IAAIN,GAAUA,EAAOf,OAElCkB,EAAS,GAAKA,EAAS,GAAGlB,WAAQsB,EAE7C,UAAUC,GACNtB,KAAKuB,qBAAqBD,GAC1BtB,KAAKS,YAAYe,KAAKxB,KAAKD,OAG/B,eACI,MAAMkB,EAAWjB,KAAKkB,gBAAkBlB,KAAKkB,gBAAgBD,SAAW,GACxE,OAAOjB,KAAKmB,SAAWF,EAAYA,EAAS,IAAM,KAGtD,eAAiB,OAAOjB,KAAKI,UAC7B,aAAaL,GACTC,KAAKI,WAAY,QAAsBL,GAG3C,eAAiB,OAAOC,KAAKK,UAC7B,aAAaN,GACTC,KAAKK,WAAY,QAAsBN,GACnCC,KAAKY,gBACLZ,KAAKY,eAAeC,QAAQC,GAAUA,EAAOE,iBAGrD,WACIhB,KAAKkB,gBAAkB,IAAI,KAAelB,KAAKmB,cAAUE,GAAW,GAExE,qBACIrB,KAAKkB,gBAAgBO,UAAUzB,KAAKY,eAAec,OAAOZ,GAAUA,EAAOa,UAM/E,WAAW5B,GACPC,KAAKD,MAAQA,EACbC,KAAKC,gBAAgB2B,eAGzB,iBAAiBC,GACb7B,KAAKM,8BAAgCuB,EAGzC,kBAAkBA,GACd7B,KAAKO,WAAasB,EAGtB,iBAAiBC,GACb9B,KAAK+B,SAAWD,EAGpB,mBACI,MAAMb,EAAWjB,KAAKiB,SAChBnB,EAASkC,MAAMC,QAAQhB,GAAYA,EAASA,EAASiB,OAAS,GAAKjB,EACnEkB,EAAQ,IAAItC,EAAsBC,EAAQE,KAAKD,OACrDC,KAAKM,8BAA8B6B,EAAMpC,OACzCC,KAAKU,OAAOc,KAAKW,GASrB,kBAAkBrB,EAAQW,EAAQW,GAAc,EAAOC,GAAc,GAG5DrC,KAAKmB,WAAYnB,KAAKiB,UAAaH,EAAOa,UAC3C3B,KAAKiB,SAASU,SAAU,GAExB3B,KAAKkB,gBACDO,EACAzB,KAAKkB,gBAAgBO,OAAOX,GAG5Bd,KAAKkB,gBAAgBoB,SAASxB,GAIlCuB,GAAc,EAKdA,EACAE,QAAQC,UAAUC,KAAK,IAAMzC,KAAK0C,kBAAkBN,IAGpDpC,KAAK0C,kBAAkBN,GAI/B,YAAYtB,GACR,OAAOd,KAAKkB,iBAAmBlB,KAAKkB,gBAAgByB,WAAW7B,GAGnE,cAAcA,GACV,YAA8B,IAAnBd,KAAK4C,YAGZ5C,KAAKmB,UAAYa,MAAMC,QAAQjC,KAAK4C,WAC7B5C,KAAK4C,UAAUC,KAAK9C,GAAyB,MAAhBe,EAAOf,OAAiBA,IAAUe,EAAOf,OAE1Ee,EAAOf,QAAUC,KAAK4C,WAGjC,qBAAqB7C,GACjBC,KAAK4C,UAAY7C,EACZC,KAAKY,iBAGNZ,KAAKmB,UAAYpB,GACZiC,MAAMC,QAAQlC,GAGnBC,KAAK8C,kBACL/C,EAAMc,QAASkC,GAAiB/C,KAAKgD,aAAaD,MAGlD/C,KAAK8C,kBACL9C,KAAKgD,aAAajD,KAI1B,kBACIC,KAAKkB,gBAAgB+B,QACrBjD,KAAKY,eAAeC,QAAQC,GAAUA,EAAOa,SAAU,GAG3D,aAAa5B,GACT,MAAMmD,EAAsBlD,KAAKY,eAAeuC,KAAKrC,GAC1B,MAAhBA,EAAOf,OAAiBe,EAAOf,QAAUA,GAEhDmD,IACAA,EAAoBvB,SAAU,EAC9B3B,KAAKkB,gBAAgBO,OAAOyB,IAIpC,kBAAkBd,GAEVA,GACApC,KAAKoD,mBAITpD,KAAKS,YAAYe,KAAKxB,KAAKD,Q,OAGnCL,EAAqB2D,UAAO,SAAsCC,GAAK,OAAO,IAAKA,GAAK5D,GAAsB,MAAyB,OAA2B,MAAyBL,EAAmC,KAC9NK,EAAqB6D,UAAqB,MAAyB,CAAEC,KAAM9D,EAAsB+D,UAAW,CAAC,CAAC,4BAA6BC,eAAgB,SAA6CC,EAAIC,EAAKC,GAE3M,GAFgO,EAALF,GACzN,MAAsBE,EAAUC,EAAiB,GAC1C,EAALH,EAAQ,CACV,IAAII,EACJ,MAAsBA,EAAK,WAA0BH,EAAIhD,eAAiBmD,KACzEC,UAAW,CAAC,OAAQ,QAAS,EAAG,2BAA4BC,SAAU,EAAGC,aAAc,SAA2CP,EAAIC,GAAgB,EAALD,IAClJ,MAAmB,gBAAiBC,EAAI7B,UACxC,MAAmB,6BAA8B6B,EAAIO,SAArD,CAA+D,8CAAkE,aAAnBP,EAAIjD,cACjHyD,OAAQ,CAAEzD,WAAY,aAAcI,KAAM,OAAQoD,SAAU,WAAYpE,MAAO,QAASoB,SAAU,WAAYY,SAAU,YAAcsC,QAAS,CAAE5D,YAAa,cAAeC,OAAQ,UAAY4D,SAAU,CAAC,wBAAyBC,SAAU,CAAC,MAA0B,CACvQhF,EACA,CAAEC,QAASF,EAAyBG,YAAaC,Q,MAqE7D,MAAM8E,GAEN,MAAMC,GAA4B,QAAmBD,G,kBAE/CV,UAAwBW,EAC1B,YAAYC,EAAaC,EAAoBC,EAAaC,EAAeC,EAAiB5E,GACtF6E,QACA/E,KAAK2E,mBAAqBA,EAC1B3E,KAAK4E,YAAcA,EACnB5E,KAAK6E,cAAgBA,EACrB7E,KAAKgF,mBAAoB,EACzBhF,KAAKiF,UAAW,EAIhBjF,KAAKkF,eAAiB,KACtBlF,KAAKK,WAAY,EAEjBL,KAAKU,OAAS,IAAI,MAClB,MAAMyE,EAAiBC,OAAON,GAC9B9E,KAAKqF,SAAYF,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5EnF,KAAKsF,kBAAoBZ,EACzB1E,KAAKW,WACDT,GAAkBA,EAAeS,WAAaT,EAAeS,WAAa,WAGlF,eAAiB,MAAO,GAAGX,KAAKuF,YAEhC,iBACI,OAAOvF,KAAKsF,kBAAoBtF,KAAKsF,kBAAkB3E,WAAaX,KAAKwF,YAE7E,eAAezF,GACXC,KAAKwF,YAAczF,EAGvB,cACI,OAAOC,KAAKsF,kBAAoBtF,KAAKsF,kBAAkBG,YAAYzF,MAAQA,KAAKiF,SAEpF,YAAYlF,GACR,MAAMuB,GAAW,QAAsBvB,GACnCuB,IAAatB,KAAKiF,WAClBjF,KAAKiF,SAAW3D,EACZtB,KAAKsF,mBACLtF,KAAKsF,kBAAkBI,kBAAkB1F,KAAMA,KAAKiF,UAExDjF,KAAK2E,mBAAmB/C,gBAIhC,eACI,OAAO5B,KAAKK,WAAcL,KAAKsF,mBAAqBtF,KAAKsF,kBAAkBvD,SAE/E,aAAahC,GAASC,KAAKK,WAAY,QAAsBN,GAC7D,WACI,MAAM4F,EAAQ3F,KAAKsF,kBACnBtF,KAAKgF,kBAAoBW,IAAUA,EAAMxE,SACzCnB,KAAKuF,GAAKvF,KAAKuF,IAAM,qBAAqB3F,IACtCI,KAAKgF,oBACLhF,KAAKe,KAAO4E,EAAM5E,MAElB4E,IACIA,EAAMC,cAAc5F,MACpBA,KAAK2B,SAAU,EAEVgE,EAAMF,YAAYzF,QAAUA,KAAKiF,UAKtCU,EAAMD,kBAAkB1F,KAAMA,KAAKiF,WAI/C,kBACIjF,KAAK6E,cAAcgB,QAAQ7F,KAAK4E,aAAa,GAEjD,cACI,MAAMe,EAAQ3F,KAAKsF,kBACnBtF,KAAK6E,cAAciB,eAAe9F,KAAK4E,aAGnCe,GAASA,EAAMF,YAAYzF,OAC3B2F,EAAMD,kBAAkB1F,MAAM,GAAO,GAAO,GAIpD,MAAM+F,GACF/F,KAAKgG,eAAeC,cAAcC,MAAMH,GAG5C,iBACI,MAAMI,IAAanG,KAAKgF,oBAA4BhF,KAAKiF,SACrDkB,IAAenG,KAAKiF,WACpBjF,KAAKiF,SAAWkB,EACZnG,KAAKsF,oBACLtF,KAAKsF,kBAAkBI,kBAAkB1F,KAAMA,KAAKiF,UAAU,GAC9DjF,KAAKsF,kBAAkB/E,eAI/BP,KAAKU,OAAOc,KAAK,IAAI3B,EAAsBG,KAAMA,KAAKD,QAO1D,gBAGIC,KAAK2E,mBAAmB/C,gB,OAGhCkC,EAAgBT,UAAO,SAAiCC,GAAK,OAAO,IAAKA,GAAKQ,GAAiB,MAAyBxE,EAAyB,GAAI,MAAyB,OAA2B,MAAyB,OAAoB,MAAyB,MAAsB,MAAyB,YAAa,MAAyBD,EAAmC,KACvYyE,EAAgBsC,UAAqB,MAAyB,CAAE5C,KAAMM,EAAiBL,UAAW,CAAC,CAAC,sBAAuB4C,UAAW,SAA+B1C,EAAIC,GAEnK,GAFmL,EAALD,GAC5K,KAAmBxE,EAAK,GACjB,EAALwE,EAAQ,CACV,IAAII,EACJ,MAAsBA,EAAK,WAA0BH,EAAIoC,eAAiBjC,EAAGuC,SAC5EtC,UAAW,CAAC,OAAQ,eAAgB,EAAG,qBAAsBC,SAAU,GAAIC,aAAc,SAAsCP,EAAIC,GAAgB,EAALD,GAC/I,MAAkB,QAAS,WAAsD,OAAOC,EAAIsC,UACrF,EAALvC,IACF,MAAmB,aAAc,KAAjC,CAAuC,kBAAmB,KAA1D,CAAgE,KAAMC,EAAI2B,GAA1E,CAA8E,OAAQ,MACtF,MAAmB,gCAAiC3B,EAAI0B,kBAAxD,CAA2E,4BAA6B1B,EAAIjC,QAA5G,CAAqH,6BAA8BiC,EAAI7B,SAAvJ,CAAiK,wCAA4D,aAAnB6B,EAAIjD,cAC7MyD,OAAQ,CAAEmC,cAAe,gBAAiBrB,eAAgB,CAAC,kBAAmB,kBAAmBG,SAAU,WAAY1E,WAAY,aAAcgB,QAAS,UAAWI,SAAU,WAAYwD,GAAI,KAAMxE,KAAM,OAAQyF,UAAW,CAAC,aAAc,aAAczG,MAAO,SAAWsE,QAAS,CAAE3D,OAAQ,UAAY4D,SAAU,CAAC,mBAAoBC,SAAU,CAAC,OAAoCkC,mBAAoBrH,EAAKsH,MAAO,EAAGC,KAAM,EAAGC,OAAQ,CAAC,CAAC,OAAQ,SAAU,EAAG,2BAA4B,sBAAuB,EAAG,KAAM,WAAY,SAAU,CAAC,SAAU,IAAK,CAAC,EAAG,mCAAoC,CAAC,EAAG,mCAAoC,CAAC,YAAa,GAAI,EAAG,2BAA4B,EAAG,mBAAoB,sBAAuBC,SAAU,SAAkClD,EAAIC,GAUzwB,GAVyxB,EAALD,IAClxB,QACA,MAAsB,EAAG,SAAU,EAAG,GACtC,MAAkB,QAAS,WAA8D,OAAOC,EAAIkD,mBACpG,MAAsB,EAAG,OAAQ,GACjC,MAAoB,GACpB,QACA,QACA,MAAiB,EAAG,OAAQ,GAC5B,MAAiB,EAAG,OAAQ,IACrB,EAALnD,EAAQ,CACV,MAAMoD,EAAM,MAAmB,GAC/B,MAAkB,KAAMnD,EAAIoD,SAA5B,CAAsC,WAAYpD,EAAI7B,UAAY,MAClE,MAAmB,WAAY6B,EAAI7B,UAAY,EAAI6B,EAAIyB,SAAvD,CAAiE,eAAgBzB,EAAIjC,QAArF,CAA8F,OAAQiC,EAAI7C,MAAQ,KAAlH,CAAwH,aAAc6C,EAAI4C,UAA1I,CAAqJ,kBAAmB5C,EAAIsB,gBAC5K,MAAiB,GACjB,MAAkB,mBAAoB6B,EAAtC,CAA2C,oBAAqBnD,EAAI2C,eAAiB3C,EAAI7B,YACxFkF,WAAY,CAAC,MAAmBC,OAAQ,CAAC,+vFAAgwFC,cAAe,EAAGC,gBAAiB,I,oBA6F/0FC,G,OAENA,EAAsBhE,UAAO,SAAuCC,GAAK,OAAO,IAAKA,GAAK+D,IAC1FA,EAAsBC,UAAqB,MAAwB,CAAE9D,KAAM6D,IAC3EA,EAAsBE,UAAqB,MAAwB,CAAEC,QAAS,CAAC,CAAC,KAAiB,MAAkB,Q;;;;;;;;qDC7hB5G,Y,MAAMC,EAHb,cAIY,KAAAC,SAAW,IAAIC,EAAA,EAA8B,CAAEC,KAAM,SAErD,KAAAC,QAAU,IAAIF,EAAA,EAAyB,CAC3C,CAAEpC,GAAI,IAAKxE,KAAM,OAAQ+G,SAAU,aAAcC,OAAQ,CAAC,iCAAkC,kCAAmC,mCAC/H,CAAExC,GAAI,IAAKxE,KAAM,SAAU+G,SAAU,cACrC,CAAEvC,GAAI,IAAKxE,KAAM,SAAU+G,SAAU,cACrC,CAAEvC,GAAI,IAAKxE,KAAM,QAAS+G,SAAU,aACpC,CAAEvC,GAAI,IAAKxE,KAAM,SAAU+G,SAAU,aACrC,CAAEvC,GAAI,IAAKxE,KAAM,QAAS+G,SAAU,aACpC,CAAEvC,GAAI,IAAKxE,KAAM,QAAS+G,SAAU,eAGxB,KAAAE,OAAShI,KAAK6H,QAAQI,eAEtB,KAAAlC,QAAU/F,KAAK0H,SAASO,eAExB,KAAAC,cAAe,EAAAC,EAAA,IAAc,CACzCnI,KAAK6H,QACL7H,KAAK0H,WACNU,MACC,EAAAhH,EAAA,GAAI,EAAEiH,EAAMtC,KACRsC,EAAKlF,KAAMmF,GAAMA,EAAE/C,KAAOQ,EAAQmC,gBAI1B,KAAAK,iBAAkB,EAAAJ,EAAA,IAAc,CAC5CnI,KAAK6H,QACL7H,KAAK0H,WACNU,MACC,EAAAhH,EAAA,GAAI,EAAEiH,EAAMtC,KACRA,EAAQyC,OACFH,EAAK3G,OAAQ+G,GACTA,EAAE1H,KACG2H,cACAC,SAAS5C,EAAQyC,OAAOE,gBAEjCL,IAIE,KAAAO,cAAgB5I,KAAKuI,gBAAgBH,MACjD,EAAAhH,EAAA,GAAKkH,IACD,MAAMlH,EAAM,GACNyH,GAAa,QAAOP,EAAElH,IAAKqH,GAAMA,EAAEX,WACzC,IAAK,MAAMnC,KAASkD,EAChBzH,EAAIuE,GAAS2C,EAAE5G,OAAQ+G,GAAMA,EAAEX,WAAanC,GAEhD,OAAOvE,KAIC,KAAA0H,iBAAmB9I,KAAK4I,cAAcR,MAClD,EAAAhH,EAAA,GAAKkH,GAAMS,OAAOC,KAAKV,GAAK,MAIzB,WAAWvC,GACd/F,KAAK0H,SAASuB,KAAK,OAAD,wBAAMjJ,KAAK0H,SAASwB,YAAenD,K,6CA1DhD0B,I,0BAAAA,EAAwB,QAAxBA,EAAwB,qBAFrB,S,GAET,G,4CCqBA,Y,MAAM0B,EAKT,YAAoBC,GAAA,KAAAA,SAJJ,KAAArD,QAAU/F,KAAKoJ,OAAOrD,QAEtB,KAAAsD,WAAcC,GAAMtJ,KAAKoJ,OAAOC,WAAWC,I,6CAHlDH,GAA2B,W,wBAA3BA,EAA2B,6kB,GAAA,MA3ChC,iBACI,oBAAmB,qBAAS,QAC5B,qCAEI,yCAAiB,EAAAE,WAAA,Y,iBAEjB,+BACI,iBAGI,oBAAU,uBAAW,QACzB,QACJ,QACA,+BACI,kBAGI,qBAAU,sBAAS,QACvB,QACJ,QACJ,QACA,qBACI,kBACI,kBAAkB,oBAAO,QACzB,uBAA2B,4BAAe,QAC9C,QACJ,QACA,mBACA,8BACI,wBACK,mBAAM,QAEX,qBAGI,yCAAiB,EAAAA,WAAA,c,kBAHrB,QAMJ,QACJ,S,aApCQ,qEA+BI,2E,sFASb,G,8FCtB6B,gBAYI,kBAGI,kBAQJ,QACA,eACI,kBACI,SACJ,QACA,kBACI,SAMJ,QACJ,QACJ,S,oCA/BI,oCAUQ,oDAUA,+BAGA,yH,yBAjCpB,SACI,kBAGI,sB,iBAsCJ,QACJ,S,yCAlCV,kD,yBAuCkB,gBAYI,kBAGI,kBAQJ,QACA,kBAGI,kBACI,SACJ,QACA,kBACI,SAMJ,QACJ,QACJ,S,oCAjCI,oCAUQ,oDAYA,+BAGA,yH,yBAnCpB,SACI,kBAGI,sB,iBAwCJ,QACJ,S,yCApCV,kD,yBAlEE,eACI,gBACI,kBAA0B,SAAW,QACrC,kBACI,S,kCAKJ,QACJ,QAEA,W,iBACI,iCA4CA,iCA8CJ,QACJ,S,mCAtGkC,kBAEtB,+KAQM,qDACK,uCA4GpC,Y,MAAME,EAKT,YAAoBH,GAAA,KAAAA,SAJJ,KAAArD,QAAU/F,KAAKoJ,OAAOrD,QACtB,KAAA8C,WAAa7I,KAAKoJ,OAAON,iBACzB,KAAAd,OAAShI,KAAKoJ,OAAOR,e,6CAH5BW,GAAqB,W,wBAArBA,EAAqB,goCA7H1B,gCACA,iBACI,yBACI,qBACI,yB,iBAyGJ,QACA,qBACJ,QACJ,S,MA5GmC,oD,gKAyHpC,G,2CC9GA,Y,MAAMC,G,6CAAAA,I,wBAAAA,EAAqB,gJAhB1B,mBACA,kBACI,yBACJ,U,iHAaD,G,uCCfK,iBAMI,iBACJ,S,mCAHI,oDAEmC,+B,sBAEvC,iBAII,aAAG,+BAAmB,QAC1B,S,yBAiBA,iBACI,SACJ,S,qBADI,0DAkBT,Y,MAAMC,EArDb,cAsDoB,KAAA1B,OAAmB,GAE5B,KAAA2B,OAAS,G,6CAHPD,I,wBAAAA,EAAsB,ikCAlD3B,iBACI,uBAQA,uBAMA,oBAII,kDAA2B,IAE3B,oBAAU,wBAAY,QAC1B,QACA,oBAII,kDAA2B,IAE3B,oBAAU,yBAAa,QAC3B,QACA,uBAGJ,S,MA9B0B,mCAOjB,0DAOD,wCAQA,6EAKyE,6D,2JAmBlF,G,2GC9CC,iBAII,iBACI,eAMI,iBACI,sBAA0B,sBAAU,QACpC,iBAAkB,gBAAI,QAC1B,QACJ,QACA,iBACI,gBAAM,mBAAM,QACZ,iBACI,uBAA2B,0BAAa,QAC5C,QACA,iBAAM,U,kBAA+B,QACrC,iBACI,uBAA2B,0BAAa,QAC5C,QACA,iBAAM,U,kBAA2B,QACrC,QACJ,QACA,kBACI,mBACI,8B,kBAGJ,QACA,mBACI,mBAGI,mBACI,U,kBACJ,QACA,mBACI,sBACI,mBACI,wBAA0B,iBAAI,QAC9B,kBAAkB,iBAAI,QAC1B,QACJ,QACA,mBACA,sBACI,mBACI,wBAA0B,mBAAM,QAChC,kBAAkB,mBAAM,QAC5B,QACJ,QACJ,QACJ,QACA,mBACI,U,kBACJ,QACA,mBACI,mBACI,mBAAkB,U,oCAAmF,QACrG,sBAAmB,+BAAkB,QACzC,QACA,mBACI,mBAAkB,U,kBAAqD,QACvE,sBAAmB,2BAAc,QACrC,QACJ,QACJ,QACJ,QAEA,0BACI,uBAEA,uBAEA,uBAEJ,QACJ,S,uCAxEY,yCAYM,+DAIA,2DAMF,qFAQI,mEAmBJ,iGAIsB,8JAIA,8G,uBAiBlC,kBAGI,0BACA,aAAG,oCAAwB,QAC/B,S,MAFiB,+BClF7B,MAQME,GAAkB,CACpB,CACIC,KAAM,GACNC,UAAWL,EACXM,SAAU,CACN,CAAEF,KAAM,OAAQC,UAAWN,GAC3B,CAAEK,KAAM,WAAYC,UD2EzB,M,MAAME,UAA2B,KAIpC,YACYC,EACAC,EACAb,GAERrE,QAJQ,KAAAiF,SACA,KAAAC,UACA,KAAAb,SANL,KAAAc,SAAU,EACD,KAAAC,MAAQnK,KAAKoJ,OAAOlB,aAU7B,WACHlI,KAAKkK,SAAU,EACflK,KAAKoK,aACD,eACApK,KAAKgK,OAAOK,SAASC,UAAWC,IACxBA,EAAOC,IAAI,OACXxK,KAAKoJ,OAAOC,WAAW,CAAEnB,aAAcqC,EAAOE,IAAI,WAI9DzK,KAAK0K,QACD,WACA,IAAM1K,KAAKiK,QAAQU,SAAS,CAAC,oBAC7B,KAEJ3K,KAAKoJ,OAAOlB,aAAaE,MAAK,EAAA9B,EAAA,GAAOgC,KAAQA,IAAIgC,UAAU,KACvDtK,KAAK4K,aAAa,YAClB5K,KAAKkK,SAAU,K,6CA7BdH,GAAkB,mC,wBAAlBA,EAAkB,ipC,GAAA,MA7FvB,yB,iBAkFA,4C,sBAhFK,6CAAmC,gB,oFA2FzC,IC1EK,CAAEH,KAAM,KAAMiB,WAAY,UAGlC,CAAEjB,KAAM,KAAMiB,WAAY,KAavB,a,MAAMC,G,6CAAAA,I,wBAAAA,I,4BARA,CACL,KACA,IACAzD,EACA,KACA,cAAsBsC,Q,GAGvB","file":"apps_concierge_src_app_asset-manager_asset-manager_module_ts.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { Injectable } from '@angular/core';\nimport { unique } from '@placeos/common';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface AssetOptions {\n    search?: string;\n    sort_by?: string;\n    view: 'grid' | 'list';\n    active_asset?: string;\n}\n\nexport interface Asset {\n    id: string;\n    name: string;\n    category: string;\n    images: string[];\n    barcode: string;\n    brand: string;\n    description: string;\n    properties: Record<string, string>;\n    count: number;\n    locations: [string, string][];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetManagerStateService {\n    private _options = new BehaviorSubject<AssetOptions>({ view: 'grid' });\n\n    private _assets = new BehaviorSubject<Asset[]>([\n        { id: '1', name: 'iPad', category: 'Technology', images: ['assets/support/chrome-logo.svg', 'assets/support/firefox-logo.svg', 'assets/support/safari-logo.svg'] },\n        { id: '2', name: 'iPhone', category: 'Technology' },\n        { id: '3', name: 'iWatch', category: 'Technology' },\n        { id: '4', name: 'Chair', category: 'Furniture' },\n        { id: '4', name: 'Lounge', category: 'Furniture' },\n        { id: '4', name: 'Table', category: 'Furniture' },\n        { id: '4', name: 'Couch', category: 'Furniture' },\n    ] as any);\n    /** List of available assets */\n    public readonly assets = this._assets.asObservable();\n    /** List of options set for the view */\n    public readonly options = this._options.asObservable();\n    /** Currently active asset */\n    public readonly active_asset = combineLatest([\n        this._assets,\n        this._options,\n    ]).pipe(\n        map(([list, options]) =>\n            list.find((_) => _.id === options.active_asset)\n        )\n    );\n    /** list of filtered assets */\n    public readonly filtered_assets = combineLatest([\n        this._assets,\n        this._options,\n    ]).pipe(\n        map(([list, options]) =>\n            options.search\n                ? list.filter((i) =>\n                      i.name\n                          .toLowerCase()\n                          .includes(options.search.toLowerCase())\n                  )\n                : list\n        )\n    );\n    /** Mapping of available assets to categories */\n    public readonly asset_mapping = this.filtered_assets.pipe(\n        map((_) => {\n            const map = {};\n            const categories = unique(_.map((i) => i.category));\n            for (const group of categories) {\n                map[group] = _.filter((i) => i.category === group);\n            }\n            return map;\n        })\n    );\n    /** List of asset categories */\n    public readonly asset_categories = this.asset_mapping.pipe(\n        map((_) => Object.keys(_ || {}))\n    );\n\n    /** Update the set view options */\n    public setOptions(options: Partial<AssetOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-manager-topbar',\n    template: `\n        <div class=\"w-full px-4 py-2 bg-white flex items-center space-x-4\">\n            <button mat-button>Add Asset</button>\n            <mat-button-toggle-group\n                [ngModel]=\"(options | async)?.view\"\n                (ngModelChange)=\"setOptions({ view: $event })\"\n            >\n                <mat-button-toggle value=\"grid\">\n                    <div\n                        class=\"flex items-center justify-center h-10 w-6 text-xl\"\n                    >\n                        <app-icon>view_module</app-icon>\n                    </div>\n                </mat-button-toggle>\n                <mat-button-toggle value=\"list\">\n                    <div\n                        class=\"flex items-center justify-center h-10 w-6 text-xl\"\n                    >\n                        <app-icon>view_list</app-icon>\n                    </div>\n                </mat-button-toggle>\n            </mat-button-toggle-group>\n            <button mat-button class=\"clear\">\n                <div class=\"flex items-center\">\n                    <div class=\"pl-2\">Sort By</div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"h-[3.25rem]\">\n                <app-icon matPrefix class=\"text-2xl relative top-1 -left-1\"\n                    >search</app-icon\n                >\n                <input\n                    matInput\n                    [ngModel]=\"(options | async)?.search\"\n                    (ngModelChange)=\"setOptions({ search: $event })\"\n                    placeholder=\"Search for an asset or request\"\n                />\n            </mat-form-field>\n        </div>\n    `,\n    styles: [``],\n})\nexport class AssetManagerTopbarComponent {\n    public readonly options = this._state.options;\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-listing',\n    template: `\n        <asset-manager-topbar></asset-manager-topbar>\n        <div class=\"overflow-auto flex-1 w-full px-4 pb-2\">\n            <mat-tab-group>\n                <mat-tab label=\"Assets\">\n                    <div *ngFor=\"let group of categories | async\">\n                        <h2 class=\"py-2\">\n                            <span class=\"font-medium\">{{ group }}</span>\n                            <span class=\"text-xs\">\n                                ({{ (assets | async)[group]?.length }} item{{\n                                    (assets | async)[group]?.length === 1\n                                        ? ''\n                                        : 's'\n                                }})\n                            </span>\n                        </h2>\n\n                        <ng-container [ngSwitch]=\"(options | async).view\">\n                            <ng-container *ngSwitchCase=\"'list'\">\n                                <div\n                                    class=\"rounded overflow-hidden bg-white border border-gray-300 divide-y divide-gray-200\"\n                                >\n                                    <a\n                                        matRipple\n                                        class=\"flex items-center text-left space-x-4 p-4\"\n                                        *ngFor=\"\n                                            let asset of (assets | async)[group]\n                                        \"\n                                        [routerLink]=\"[\n                                            '/asset-manager',\n                                            'view',\n                                            asset.id\n                                        ]\"\n                                    >\n                                        <div\n                                            class=\"h-12 w-12 flex items-center justify-center border border-gray-200 p-2\"\n                                        >\n                                            <img\n                                                [src]=\"\n                                                    asset.images\n                                                        ? asset.images[0]\n                                                        : ''\n                                                \"\n                                                class=\"max-w-full max-h-full object-contain\"\n                                            />\n                                        </div>\n                                        <div>\n                                            <div class=\"truncate\">\n                                                {{ asset.name }}\n                                            </div>\n                                            <div class=\"text-xs opacity-60\">\n                                                In Storage:\n                                                {{\n                                                    (asset.count || 0) -\n                                                        (asset.locations\n                                                            ?.length || 0)\n                                                }}/{{ assets.count || 0 }}\n                                            </div>\n                                        </div>\n                                    </a>\n                                </div>\n                            </ng-container>\n                            <ng-container *ngSwitchDefault>\n                                <div\n                                    class=\"flex items-center overflow-x-auto space-x-4 py-2\"\n                                >\n                                    <a\n                                        matRipple\n                                        class=\"bg-white rounded shadow w-40 h-44 text-left\"\n                                        *ngFor=\"\n                                            let asset of (assets | async)[group]\n                                        \"\n                                        [routerLink]=\"[\n                                            '/asset-manager',\n                                            'view',\n                                            asset.id\n                                        ]\"\n                                    >\n                                        <div\n                                            class=\"w-full h-32 flex items-center justify-center p-2\"\n                                        >\n                                            <img\n                                                [src]=\"\n                                                    asset.images\n                                                        ? asset.images[0]\n                                                        : ''\n                                                \"\n                                                class=\"max-w-full max-h-full object-contain\"\n                                            />\n                                        </div>\n                                        <div\n                                            class=\"border-t border-gray-200 w-full px-3 py-1\"\n                                        >\n                                            <div class=\"truncate\">\n                                                {{ asset.name }}\n                                            </div>\n                                            <div class=\"text-xs opacity-60\">\n                                                In Storage:\n                                                {{\n                                                    (asset.count || 0) -\n                                                        (asset.locations\n                                                            ?.length || 0)\n                                                }}/{{ assets.count || 0 }}\n                                            </div>\n                                        </div>\n                                    </a>\n                                </div>\n                            </ng-container>\n                        </ng-container>\n                    </div>\n                </mat-tab>\n                <mat-tab label=\"Requests\"> </mat-tab>\n            </mat-tab-group>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetListingComponent {\n    public readonly options = this._state.options;\n    public readonly categories = this._state.asset_categories;\n    public readonly assets = this._state.asset_mapping;\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[asset-manager]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex-1 bg-gray-200\">\n            <router-outlet></router-outlet>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class AssetManagerComponent {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'image-carousel',\n    template: `\n        <div class=\"h-full w-full relative overflow-hidden flex\">\n            <div\n                image\n                class=\"h-full min-w-full relative flex items-center justify-center p-8\"\n                *ngFor=\"let image of images\"\n                [style.transform]=\"'translateX(-' + offset * 100 + '%)'\"\n            >\n                <img class=\"h-full object-contain\" [src]=\"image\" />\n            </div>\n            <div\n                class=\"h-full w-full relative flex items-center justify-center opacity-30\"\n                *ngIf=\"!images?.length\"\n            >\n                <p>No Images for Asset</p>\n            </div>\n            <button\n                mat-icon-button\n                class=\"text-secondary border border-solid border-secondary absolute top-1/2 left-2 -translate-y-1/2 bg-white\"\n                [disabled]=\"offset === 0\"\n                (click)=\"offset = offset - 1\"\n            >\n                <app-icon>chevron_left</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                class=\"text-secondary border border-solid border-secondary absolute top-1/2 right-2 -translate-y-1/2 bg-white\"\n                [disabled]=\"offset >= images?.length - 1\"\n                (click)=\"offset = offset + 1\"\n            >\n                <app-icon>chevron_right</app-icon>\n            </button>\n            <div class=\"absolute bottom-1 left-1/2 -translate-x-1/2 text-sm opacity-30\" *ngIf=\"images?.length\">\n                {{ offset + 1 }} / {{ images.length }}\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                height: 100%;\n                width: 100%;\n            }\n\n            [image] {\n                transition: transform 300ms;\n            }\n        `,\n    ],\n})\nexport class ImageCarouselComponent {\n    @Input() public images: string[] = [];\n\n    public offset = 0;\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { first } from 'rxjs/operators';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-view',\n    template: `\n        <div\n            class=\"h-full w-full\"\n            *ngIf=\"!loading && (asset | async); else loading_state\"\n        >\n            <div class=\"flex items-center space-x-4 p-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"inverse\"\n                    [routerLink]=\"['/asset-manager']\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">arrow_back</app-icon>\n                        <div class=\"mr-2\">Back</div>\n                    </div>\n                </a>\n                <div class=\"flex items-center space-x-2 font-medium\">\n                    <span>Assets</span>\n                    <span>\n                        <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                    </span>\n                    <span>{{ (asset | async)?.category }}</span>\n                    <span>\n                        <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                    </span>\n                    <span>{{ (asset | async)?.name }}</span>\n                </div>\n            </div>\n            <div class=\"flex items-center\">\n                <div class=\"bg-white flex-1 w-1/2 h-[360px]\">\n                    <image-carousel\n                        [images]=\"(asset | async)?.images || []\"\n                    ></image-carousel>\n                </div>\n                <div class=\"w-[512px] h-[360px] px-4 flex flex-col\">\n                    <div\n                        class=\"w-full flex items-center justify-between border-b border-gray-300\"\n                    >\n                        <div class=\"font-medium\">\n                            {{ (asset | async)?.name }}\n                        </div>\n                        <div class=\"flex items-center text-sm \">\n                            <button mat-button class=\"clear\">\n                                <div class=\"flex items-center text-secondary\">\n                                    <app-icon class=\"text-lg\">edit</app-icon>\n                                    <div class=\"mr-2\">Edit</div>\n                                </div>\n                            </button>\n                            <div class=\"w-px h-4 bg-gray-300\"></div>\n                            <button mat-button class=\"clear\">\n                                <div class=\"flex items-center text-secondary\">\n                                    <app-icon class=\"text-lg\">delete</app-icon>\n                                    <div class=\"mr-2\">Delete</div>\n                                </div>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"py-4 w-full flex-1 h-1/2 overflow-auto\">\n                        {{ (asset | async)?.description || '~No Description~' }}\n                    </div>\n                    <div class=\"rounded bg-white shadow border border-gray-300 w-full divide-y divide-gray-200\">\n                        <div class=\"flex items-center justify-between p-3\">\n                            <div class=\"pl-2\">Available: {{ ((asset | async)?.count - (asset | async)?.locations?.length) || 0 }}</div>\n                            <button mat-button>Assign to Location</button>\n                        </div>\n                        <div class=\"flex items-center justify-between p-3\">\n                            <div class=\"pl-2\">In Use: {{ (asset | async)?.locations?.length || 0 }}</div>\n                            <button mat-button>View Locations</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <mat-tab-group>\n                <mat-tab label=\"Specifications\">\n                </mat-tab>\n                <mat-tab label=\"Purchase information\">\n                </mat-tab>\n                <mat-tab label=\"Consumable assets\">\n                </mat-tab>\n            </mat-tab-group>\n        </div>\n        <ng-template #loading_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Loading asset details...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AssetViewComponent extends BaseClass {\n    public loading = false;\n    public readonly asset = this._state.active_asset;\n\n    constructor(\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _state: AssetManagerStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loading = true;\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((params) => {\n                if (params.has('id')) {\n                    this._state.setOptions({ active_asset: params.get('id') });\n                }\n            })\n        );\n        this.timeout(\n            'no_asset',\n            () => this._router.navigate(['/asset-mananger']),\n            1000\n        );\n        this._state.active_asset.pipe(first((_) => !!_)).subscribe(() => {\n            this.clearTimeout('no_asset');\n            this.loading = false;\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { UIModule } from '../ui/ui.module';\n\nimport { AssetListingComponent } from './asset-listing.component';\nimport { AssetManagerTopbarComponent } from './asset-manager-topbar.component';\nimport { AssetManagerComponent } from './asset-manager.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { AssetViewComponent } from './asset-view.component';\nimport { ImageCarouselComponent } from './image-carousel.component';\n\nconst COMPONENTS = [\n    AssetManagerComponent,\n    AssetManagerTopbarComponent,\n    AssetListingComponent,\n    AssetViewComponent,\n    ImageCarouselComponent\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: AssetManagerComponent,\n        children: [\n            { path: 'list', component: AssetListingComponent },\n            { path: 'view/:id', component: AssetViewComponent },\n            { path: '**', redirectTo: 'list' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        MatButtonToggleModule,\n        MatTabsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppAssetManangerModule {}\n"],"sourceRoot":"webpack:///"}