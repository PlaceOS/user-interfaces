{"version":3,"sources":["./node_modules/@angular/material/fesm2015/button-toggle.js","./node_modules/@angular/cdk/fesm2015/stepper.js","./node_modules/@angular/material/fesm2015/icon.js","./node_modules/@angular/material/fesm2015/stepper.js","./apps/concierge/src/app/asset-manager/asset-manager-state.service.ts","./apps/concierge/src/app/asset-manager/asset-manager-topbar.component.ts","./apps/concierge/src/app/asset-manager/asset-listing.component.ts","./apps/concierge/src/app/asset-manager/asset-manager.component.ts","./apps/concierge/src/app/asset-manager/image-carousel.component.ts","./apps/concierge/src/app/asset-manager/asset-view.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-details.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-specs.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-purchases.component.ts","./apps/concierge/src/app/asset-manager/asset-flow-consumables.component.ts","./apps/concierge/src/app/asset-manager/asset-flow.component.ts","./apps/concierge/src/app/asset-manager/asset-manager.module.ts"],"names":["_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","ɵfac","t","ɵdir","type","selectors","contentQueries","rf","ctx","dirIndex","MatButtonToggle","_t","hostAttrs","hostVars","hostBindings","vertical","inputs","outputs","exportAs","features","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_isPrechecked","monitor","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","ɵcmp","viewQuery","first","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","_onButtonClick","_r0","buttonId","directives","styles","encapsulation","changeDetection","MatButtonToggleModule","ɵmod","ɵinj","imports","CdkStep_ng_template_0_Template","CdkStepHeader","CdkStepLabel","nextId","STEP_STATE","STEPPER_GLOBAL_OPTIONS","CdkStep","_stepper","stepperOptions","interacted","_editable","_optional","_completedOverride","_customError","_stepperOptions","_displayDefaultIndicatorType","displayDefaultIndicatorType","_showError","showError","_getDefaultCompleted","stepControl","valid","_getDefaultError","invalid","reset","_stateChanged","CdkStepper","stepLabel","content","editable","optional","completed","hasError","label","errorMessage","state","_dir","_document","_destroyed","Subject","steps","_linear","_selectedIndex","selectionChange","_orientation","_groupId","index","newIndex","_steps","_isValidIndex","selectedStep","_anyControlsInvalidOrPending","toArray","_updateSelectedItemIndex","selectedIndex","step","indexOf","changes","pipe","startWith","takeUntil","subscribe","notifyOnChanges","_keyManager","_stepHeader","withWrap","withHomeAndEnd","withVerticalOrientation","of","_layoutDirection","direction","withHorizontalOrientation","updateActiveItem","Math","max","destroy","next","complete","min","i","position","isCurrentStep","_isCurrentStep","_getDefaultIndicatorLogic","_getGuidelineLogic","activeItemIndex","stepsArray","previouslySelectedIndex","previouslySelectedStep","_containsFocus","setActiveItem","hasModifier","keyCode","manager","onKeydown","preventDefault","slice","control","pending","stepperElement","focusedElement","activeElement","contains","linear","CdkStepperNext","_handleClick","CdkStepperPrevious","previous","CdkStepperModule","getMatIconNameNotFoundError","iconName","Error","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","resolver","push","cleanLiteral","sanitize","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","className","set","get","safeUrl","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","handleError","message","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","finalize","delete","share","configNamespace","svgElement","result","ɵprov","factory","token","providedIn","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","Subscription","inline","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","_cleanupFontValue","_updateFontIconClasses","_fontIcon","parts","split","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","svgIcon","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","_usingFontIcon","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","_splitIconName","getNamedSvgIcon","take","_setSvgElement","color","MatIconModule","MatStepHeader_ng_container_3_Template","ctx_r0","iconOverrides","_getIconContext","MatStepHeader_ng_container_4_span_1_Template","ctx_r6","_getDefaultTextForState","MatStepHeader_ng_container_4_mat_icon_2_Template","ctx_r7","MatStepHeader_ng_container_4_Template","ctx_r1","MatStepHeader_div_6_Template","ctx_r2","_templateLabel","MatStepHeader_div_7_Template","ctx_r3","MatStepHeader_div_8_Template","ctx_r4","_intl","optionalLabel","MatStepHeader_div_9_Template","ctx_r5","MatStep_ng_template_0_Template","MatHorizontalStepper_ng_container_1_div_2_Template","MatHorizontalStepper_ng_container_1_Template","_r7","$implicit","$event","_onKeydown","step_r2","i_r3","isLast_r4","last","_getFocusIndex","_getStepLabelId","_getIndicatorType","_iconOverrides","_getStepContentId","MatHorizontalStepper_div_3_Template","_r12","_animationDone","step_r9","i_r10","_getAnimationDirection","MatStepLabel","ɵMatStepLabel_BaseFactory","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","deps","useFactory","parentIntl","MatStepHeaderBase","_MatStepHeaderMixinBase","MatStepHeader","changeDetectorRef","_intlSubscription","origin","focusVia","active","_getHostElement","_stringLabel","matStepperAnimations","horizontalStepTransition","transform","visibility","verticalStepTransition","height","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","form","isErrorState","MatStepper","arguments","animationDone","ngAfterContentInit","_icons","distinctUntilChanged","x","y","fromState","toState","ɵMatStepper_BaseFactory","MatHorizontalStepper","labelPosition","ɵMatHorizontalStepper_BaseFactory","data","animation","MatStepperNext","ɵMatStepperNext_BaseFactory","MatStepperPrevious","ɵMatStepperPrevious_BaseFactory","MatStepperModule","providers","generateAssetForm","category","count","description","barcode","brand","specifications","purchase_date","Date","now","expiry_date","invoices","purchase_details","locations","AssetManagerStateService","_options","BehaviorSubject","view","_form","_assets","images","assets","asObservable","active_asset","combineLatest","list","_","filtered_assets","includes","asset_mapping","categories","asset_categories","Object","keys","getValue","AssetManagerTopbarComponent","_state","setOptions","o","AssetListingComponent","AssetManagerComponent","ImageCarouselComponent","offset","AssetViewComponent","_route","_router","loading","asset","subscription","paramMap","params","has","timeout","navigate","clearTimeout","AssetFlowDetailsComponent","AssetFlowSpecsComponent","AssetFlowPurchasesComponent","AssetFlowConsumablesComponent","ROUTES","component","children","AssetFlowComponent","redirectTo","AppAssetManangerModule"],"mappings":"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","file":"apps_concierge_src_app_asset-manager_asset-manager_module_ts.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, TemplateRef, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, Optional, ContentChild, ViewChild, Input, QueryList, EventEmitter, ChangeDetectorRef, ContentChildren, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nfunction CdkStep_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c0 = [\"*\"];\nclass CdkStepHeader {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    /** Focuses the step header. */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\nCdkStepHeader.ɵfac = function CdkStepHeader_Factory(t) { return new (t || CdkStepHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkStepHeader.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkStepHeader, selectors: [[\"\", \"cdkStepHeader\", \"\"]], hostAttrs: [\"role\", \"tab\"] });\nCdkStepHeader.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepHeader, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkStepHeader]',\n                host: {\n                    'role': 'tab'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepLabel {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkStepLabel.ɵfac = function CdkStepLabel_Factory(t) { return new (t || CdkStepLabel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkStepLabel.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkStepLabel, selectors: [[\"\", \"cdkStepLabel\", \"\"]] });\nCdkStepLabel.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepLabel, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkStepLabel]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each stepper component. */\nlet nextId = 0;\n/** Change event emitted on selection changes. */\nclass StepperSelectionEvent {\n}\n/** Enum to represent the different states of the steps. */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error'\n};\n/** InjectionToken that can be used to specify the global stepper options. */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * @breaking-change 8.0.0.\n */\nconst MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\nclass CdkStep {\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    constructor(_stepper, stepperOptions) {\n        this._stepper = _stepper;\n        /** Whether user has seen the expanded step content or not. */\n        this.interacted = false;\n        this._editable = true;\n        this._optional = false;\n        this._completedOverride = null;\n        this._customError = null;\n        this._stepperOptions = stepperOptions ? stepperOptions : {};\n        this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n        this._showError = !!this._stepperOptions.showError;\n    }\n    /** Whether the user can return to this step once it has been marked as completed. */\n    get editable() {\n        return this._editable;\n    }\n    set editable(value) {\n        this._editable = coerceBooleanProperty(value);\n    }\n    /** Whether the completion of step is optional. */\n    get optional() {\n        return this._optional;\n    }\n    set optional(value) {\n        this._optional = coerceBooleanProperty(value);\n    }\n    /** Whether step is marked as completed. */\n    get completed() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    set completed(value) {\n        this._completedOverride = coerceBooleanProperty(value);\n    }\n    _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /** Whether step has an error. */\n    get hasError() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    set hasError(value) {\n        this._customError = coerceBooleanProperty(value);\n    }\n    _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /** Selects this step component. */\n    select() {\n        this._stepper.selected = this;\n    }\n    /** Resets the step to its initial state. Note that this includes resetting form data. */\n    reset() {\n        this.interacted = false;\n        if (this._completedOverride != null) {\n            this._completedOverride = false;\n        }\n        if (this._customError != null) {\n            this._customError = false;\n        }\n        if (this.stepControl) {\n            this.stepControl.reset();\n        }\n    }\n    ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    }\n}\nCdkStep.ɵfac = function CdkStep_Factory(t) { return new (t || CdkStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => CdkStepper)), ɵngcc0.ɵɵdirectiveInject(STEPPER_GLOBAL_OPTIONS, 8)); };\nCdkStep.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkStep, selectors: [[\"cdk-step\"]], contentQueries: function CdkStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepLabel, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n    } }, viewQuery: function CdkStep_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);\n    } }, inputs: { editable: \"editable\", optional: \"optional\", completed: \"completed\", hasError: \"hasError\", stepControl: \"stepControl\", label: \"label\", errorMessage: \"errorMessage\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], state: \"state\" }, exportAs: [\"cdkStep\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function CdkStep_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, CdkStep_ng_template_0_Template, 1, 0, \"ng-template\");\n    } }, encapsulation: 2, changeDetection: 0 });\nCdkStep.ctorParameters = () => [\n    { type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef(() => CdkStepper),] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nCdkStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [CdkStepLabel,] }],\n    content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    stepControl: [{ type: Input }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    state: [{ type: Input }],\n    editable: [{ type: Input }],\n    optional: [{ type: Input }],\n    completed: [{ type: Input }],\n    hasError: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStep, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-step',\n                exportAs: 'cdkStep',\n                template: '<ng-template><ng-content></ng-content></ng-template>',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: CdkStepper, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => CdkStepper)]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [STEPPER_GLOBAL_OPTIONS]\n            }] }]; }, { editable: [{\n            type: Input\n        }], optional: [{\n            type: Input\n        }], completed: [{\n            type: Input\n        }], hasError: [{\n            type: Input\n        }], stepLabel: [{\n            type: ContentChild,\n            args: [CdkStepLabel]\n        }], content: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], stepControl: [{\n            type: Input\n        }], label: [{\n            type: Input\n        }], errorMessage: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], state: [{\n            type: Input\n        }] }); })();\nclass CdkStepper {\n    constructor(_dir, _changeDetectorRef, \n    // @breaking-change 8.0.0 `_elementRef` and `_document` parameters to become required.\n    _elementRef, _document) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n        this.steps = new QueryList();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /** Event emitted when the selected step has changed. */\n        this.selectionChange = new EventEmitter();\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n        this._document = _document;\n    }\n    /** Whether the validity of previous steps should be checked or not. */\n    get linear() {\n        return this._linear;\n    }\n    set linear(value) {\n        this._linear = coerceBooleanProperty(value);\n    }\n    /** The index of the selected step. */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    set selectedIndex(index) {\n        const newIndex = coerceNumberProperty(index);\n        if (this.steps && this._steps) {\n            // Ensure that the index can't be out of bounds.\n            if (!this._isValidIndex(index) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n            }\n            const selectedStep = this.selected;\n            if (selectedStep) {\n                // TODO: this should really be called something like `visited` instead. Just because\n                // the user has seen the step doesn't guarantee that they've interacted with it.\n                selectedStep.interacted = true;\n            }\n            if (this._selectedIndex !== newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                this._updateSelectedItemIndex(index);\n            }\n        }\n        else {\n            this._selectedIndex = newIndex;\n        }\n    }\n    /** The step that is selected. */\n    get selected() {\n        // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : undefined;\n    }\n    set selected(step) {\n        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n    }\n    ngAfterContentInit() {\n        this._steps.changes\n            .pipe(startWith(this._steps), takeUntil(this._destroyed))\n            .subscribe((steps) => {\n            this.steps.reset(steps.filter(step => step._stepper === this));\n            this.steps.notifyOnChanges();\n        });\n    }\n    ngAfterViewInit() {\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view children. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new FocusKeyManager(this._stepHeader)\n            .withWrap()\n            .withHomeAndEnd()\n            .withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? this._dir.change : of())\n            .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n            .subscribe(direction => this._keyManager.withHorizontalOrientation(direction));\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        // No need to `takeUntil` here, because we're the ones destroying `steps`.\n        this.steps.changes.subscribe(() => {\n            if (!this.selected) {\n                this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n            }\n        });\n        // The logic which asserts that the selected index is within bounds doesn't run before the\n        // steps are initialized, because we don't how many steps there are yet so we may have an\n        // invalid index on init. If that's the case, auto-correct to the default so we don't throw.\n        if (!this._isValidIndex(this._selectedIndex)) {\n            this._selectedIndex = 0;\n        }\n    }\n    ngOnDestroy() {\n        this.steps.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Selects and focuses the next step in list. */\n    next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /** Selects and focuses the previous step in list. */\n    previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /** Resets the stepper to its initial state. Note that this includes clearing form data. */\n    reset() {\n        this._updateSelectedItemIndex(0);\n        this.steps.forEach(step => step.reset());\n        this._stateChanged();\n    }\n    /** Returns a unique id for each step label element. */\n    _getStepLabelId(i) {\n        return `cdk-step-label-${this._groupId}-${i}`;\n    }\n    /** Returns unique id for each step content element. */\n    _getStepContentId(i) {\n        return `cdk-step-content-${this._groupId}-${i}`;\n    }\n    /** Marks the component to be change detected. */\n    _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns position state of the step with the given index. */\n    _getAnimationDirection(index) {\n        const position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    }\n    /** Returns the type of icon to be displayed. */\n    _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n        const step = this.steps.toArray()[index];\n        const isCurrentStep = this._isCurrentStep(index);\n        return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n            this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (!step.completed || isCurrentStep) {\n            return STEP_STATE.NUMBER;\n        }\n        else {\n            return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n    }\n    _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (step.completed && !isCurrentStep) {\n            return STEP_STATE.DONE;\n        }\n        else if (step.completed && isCurrentStep) {\n            return state;\n        }\n        else if (step.editable && isCurrentStep) {\n            return STEP_STATE.EDIT;\n        }\n        else {\n            return state;\n        }\n    }\n    _isCurrentStep(index) {\n        return this._selectedIndex === index;\n    }\n    /** Returns the index of the currently-focused step header. */\n    _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    _updateSelectedItemIndex(newIndex) {\n        const stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n        this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n            this._keyManager.updateActiveItem(newIndex);\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    }\n    _onKeydown(event) {\n        const hasModifier = hasModifierKey(event);\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        if (manager.activeItemIndex != null && !hasModifier &&\n            (keyCode === SPACE || keyCode === ENTER)) {\n            this.selectedIndex = manager.activeItemIndex;\n            event.preventDefault();\n        }\n        else {\n            manager.onKeydown(event);\n        }\n    }\n    _anyControlsInvalidOrPending(index) {\n        if (this._linear && index >= 0) {\n            return this.steps.toArray().slice(0, index).some(step => {\n                const control = step.stepControl;\n                const isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n                return isIncomplete && !step.optional && !step._completedOverride;\n            });\n        }\n        return false;\n    }\n    _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Checks whether the stepper contains the focused element. */\n    _containsFocus() {\n        if (!this._document || !this._elementRef) {\n            return false;\n        }\n        const stepperElement = this._elementRef.nativeElement;\n        const focusedElement = this._document.activeElement;\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n    /** Checks whether the passed-in index is a valid step index. */\n    _isValidIndex(index) {\n        return index > -1 && (!this.steps || index < this.steps.length);\n    }\n}\nCdkStepper.ɵfac = function CdkStepper_Factory(t) { return new (t || CdkStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkStepper.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkStepper, selectors: [[\"\", \"cdkStepper\", \"\"]], contentQueries: function CdkStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStep, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkStepHeader, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stepHeader = _t);\n    } }, inputs: { linear: \"linear\", selectedIndex: \"selectedIndex\", selected: \"selected\" }, outputs: { selectionChange: \"selectionChange\" }, exportAs: [\"cdkStepper\"] });\nCdkStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkStepper.propDecorators = {\n    _steps: [{ type: ContentChildren, args: [CdkStep, { descendants: true },] }],\n    _stepHeader: [{ type: ContentChildren, args: [CdkStepHeader, { descendants: true },] }],\n    linear: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectionChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepper, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkStepper]',\n                exportAs: 'cdkStepper'\n            }]\n    }], function () { return [{ type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { selectionChange: [{\n            type: Output\n        }], linear: [{\n            type: Input\n        }], selectedIndex: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], _steps: [{\n            type: ContentChildren,\n            args: [CdkStep, { descendants: true }]\n        }], _stepHeader: [{\n            type: ContentChildren,\n            args: [CdkStepHeader, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nclass CdkStepperNext {\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /** Type of the next button. Defaults to \"submit\" if not specified. */\n        this.type = 'submit';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleClick() {\n        this._stepper.next();\n    }\n}\nCdkStepperNext.ɵfac = function CdkStepperNext_Factory(t) { return new (t || CdkStepperNext)(ɵngcc0.ɵɵdirectiveInject(CdkStepper)); };\nCdkStepperNext.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkStepperNext, selectors: [[\"button\", \"cdkStepperNext\", \"\"]], hostVars: 1, hostBindings: function CdkStepperNext_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkStepperNext_click_HostBindingHandler() { return ctx._handleClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" } });\nCdkStepperNext.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperNext.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperNext, [{\n        type: Directive,\n        args: [{\n                selector: 'button[cdkStepperNext]',\n                host: {\n                    '[type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: CdkStepper }]; }, { type: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n/** Button that moves to the previous step in a stepper workflow. */\nclass CdkStepperPrevious {\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /** Type of the previous button. Defaults to \"button\" if not specified. */\n        this.type = 'button';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleClick() {\n        this._stepper.previous();\n    }\n}\nCdkStepperPrevious.ɵfac = function CdkStepperPrevious_Factory(t) { return new (t || CdkStepperPrevious)(ɵngcc0.ɵɵdirectiveInject(CdkStepper)); };\nCdkStepperPrevious.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkStepperPrevious, selectors: [[\"button\", \"cdkStepperPrevious\", \"\"]], hostVars: 1, hostBindings: function CdkStepperPrevious_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkStepperPrevious_click_HostBindingHandler() { return ctx._handleClick(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" } });\nCdkStepperPrevious.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperPrevious.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperPrevious, [{\n        type: Directive,\n        args: [{\n                selector: 'button[cdkStepperPrevious]',\n                host: {\n                    '[type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: CdkStepper }]; }, { type: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleClick: [{\n            type: HostListener,\n            args: ['click']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkStepperModule {\n}\nCdkStepperModule.ɵfac = function CdkStepperModule_Factory(t) { return new (t || CdkStepperModule)(); };\nCdkStepperModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkStepperModule });\nCdkStepperModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[BidiModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkStepperModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule],\n                exports: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ],\n                declarations: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkStepperModule, { declarations: function () { return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]; }, imports: function () { return [BidiModule]; }, exports: function () { return [CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, MAT_STEPPER_GLOBAL_OPTIONS, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };\n\n//# sourceMappingURL=stepper.js.map","import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result) ?\n                    new SvgIconConfig(result.url, null, result.options) :\n                    new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() { return this._svgIcon; }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map","import { PortalModule } from '@angular/cdk/portal';\nimport { CdkStepLabel, CdkStepHeader, CdkStep, STEPPER_GLOBAL_OPTIONS, CdkStepper, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Directive, ɵɵdefineInjectable, Injectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Input, TemplateRef, Inject, forwardRef, ContentChild, QueryList, EventEmitter, ViewChildren, ContentChildren, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { mixinColor, ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/material/icon';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\n\nfunction MatStepHeader_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 8);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.iconOverrides[ctx_r0.state])(\"ngTemplateOutletContext\", ctx_r0._getIconContext());\n} }\nfunction MatStepHeader_ng_container_4_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r6._getDefaultTextForState(ctx_r6.state));\n} }\nfunction MatStepHeader_ng_container_4_mat_icon_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-icon\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7._getDefaultTextForState(ctx_r7.state));\n} }\nfunction MatStepHeader_ng_container_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0, 9);\n    ɵngcc0.ɵɵtemplate(1, MatStepHeader_ng_container_4_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatStepHeader_ng_container_4_mat_icon_2_Template, 2, 1, \"mat-icon\", 11);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx_r1.state);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"number\");\n} }\nfunction MatStepHeader_div_6_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementContainer(1, 13);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2._templateLabel().template);\n} }\nfunction MatStepHeader_div_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.label);\n} }\nfunction MatStepHeader_div_8_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4._intl.optionalLabel);\n} }\nfunction MatStepHeader_div_9_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.errorMessage);\n} }\nfunction MatStep_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n} }\nconst _c0 = [\"*\"];\nfunction MatHorizontalStepper_ng_container_1_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 6);\n} }\nfunction MatHorizontalStepper_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"mat-step-header\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function MatHorizontalStepper_ng_container_1_Template_mat_step_header_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r7); const step_r2 = restoredCtx.$implicit; return step_r2.select(); })(\"keydown\", function MatHorizontalStepper_ng_container_1_Template_mat_step_header_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r7); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._onKeydown($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, MatHorizontalStepper_ng_container_1_div_2_Template, 1, 0, \"div\", 5);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const step_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const isLast_r4 = ctx.last;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"tabIndex\", ctx_r0._getFocusIndex() === i_r3 ? 0 : -1)(\"id\", ctx_r0._getStepLabelId(i_r3))(\"index\", i_r3)(\"state\", ctx_r0._getIndicatorType(i_r3, step_r2.state))(\"label\", step_r2.stepLabel || step_r2.label)(\"selected\", ctx_r0.selectedIndex === i_r3)(\"active\", step_r2.completed || ctx_r0.selectedIndex === i_r3 || !ctx_r0.linear)(\"optional\", step_r2.optional)(\"errorMessage\", step_r2.errorMessage)(\"iconOverrides\", ctx_r0._iconOverrides)(\"disableRipple\", ctx_r0.disableRipple)(\"color\", step_r2.color || ctx_r0.color);\n    ɵngcc0.ɵɵattribute(\"aria-posinset\", i_r3 + 1)(\"aria-setsize\", ctx_r0.steps.length)(\"aria-controls\", ctx_r0._getStepContentId(i_r3))(\"aria-selected\", ctx_r0.selectedIndex == i_r3)(\"aria-label\", step_r2.ariaLabel || null)(\"aria-labelledby\", !step_r2.ariaLabel && step_r2.ariaLabelledby ? step_r2.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !isLast_r4);\n} }\nfunction MatHorizontalStepper_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 7);\n    ɵngcc0.ɵɵlistener(\"@stepTransition.done\", function MatHorizontalStepper_div_3_Template_div_animation_stepTransition_done_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r12); const ctx_r11 = ɵngcc0.ɵɵnextContext(); return ctx_r11._animationDone.next($event); });\n    ɵngcc0.ɵɵelementContainer(1, 8);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const step_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@stepTransition\", ctx_r1._getAnimationDirection(i_r10))(\"id\", ctx_r1._getStepContentId(i_r10));\n    ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx_r1._getStepLabelId(i_r10))(\"aria-expanded\", ctx_r1.selectedIndex === i_r10);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r9.content);\n} }\nfunction MatVerticalStepper_div_0_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"mat-step-header\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function MatVerticalStepper_div_0_Template_mat_step_header_click_1_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const step_r1 = restoredCtx.$implicit; return step_r1.select(); })(\"keydown\", function MatVerticalStepper_div_0_Template_mat_step_header_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6._onKeydown($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 4);\n    ɵngcc0.ɵɵlistener(\"@stepTransition.done\", function MatVerticalStepper_div_0_Template_div_animation_stepTransition_done_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7._animationDone.next($event); });\n    ɵngcc0.ɵɵelementStart(4, \"div\", 5);\n    ɵngcc0.ɵɵelementContainer(5, 6);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const step_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const isLast_r3 = ctx.last;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"tabIndex\", ctx_r0._getFocusIndex() == i_r2 ? 0 : -1)(\"id\", ctx_r0._getStepLabelId(i_r2))(\"index\", i_r2)(\"state\", ctx_r0._getIndicatorType(i_r2, step_r1.state))(\"label\", step_r1.stepLabel || step_r1.label)(\"selected\", ctx_r0.selectedIndex === i_r2)(\"active\", step_r1.completed || ctx_r0.selectedIndex === i_r2 || !ctx_r0.linear)(\"optional\", step_r1.optional)(\"errorMessage\", step_r1.errorMessage)(\"iconOverrides\", ctx_r0._iconOverrides)(\"disableRipple\", ctx_r0.disableRipple)(\"color\", step_r1.color || ctx_r0.color);\n    ɵngcc0.ɵɵattribute(\"aria-posinset\", i_r2 + 1)(\"aria-setsize\", ctx_r0.steps.length)(\"aria-controls\", ctx_r0._getStepContentId(i_r2))(\"aria-selected\", ctx_r0.selectedIndex === i_r2)(\"aria-label\", step_r1.ariaLabel || null)(\"aria-labelledby\", !step_r1.ariaLabel && step_r1.ariaLabelledby ? step_r1.ariaLabelledby : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"mat-stepper-vertical-line\", !isLast_r3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@stepTransition\", ctx_r0._getAnimationDirection(i_r2))(\"id\", ctx_r0._getStepContentId(i_r2));\n    ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx_r0._getStepLabelId(i_r2))(\"aria-expanded\", ctx_r0.selectedIndex === i_r2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", step_r1.content);\n} }\nconst _c1 = \".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\";\nclass MatStepLabel extends CdkStepLabel {\n}\nMatStepLabel.ɵfac = /*@__PURE__*/ function () { let ɵMatStepLabel_BaseFactory; return function MatStepLabel_Factory(t) { return (ɵMatStepLabel_BaseFactory || (ɵMatStepLabel_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepLabel)))(t || MatStepLabel); }; }();\nMatStepLabel.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatStepLabel, selectors: [[\"\", \"matStepLabel\", \"\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepLabel, [{\n        type: Directive,\n        args: [{\n                selector: '[matStepLabel]'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Stepper data that is required for internationalization. */\nclass MatStepperIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /** Label that is rendered below optional steps. */\n        this.optionalLabel = 'Optional';\n    }\n}\nMatStepperIntl.ɵfac = function MatStepperIntl_Factory(t) { return new (t || MatStepperIntl)(); };\nMatStepperIntl.ɵprov = ɵɵdefineInjectable({ factory: function MatStepperIntl_Factory() { return new MatStepperIntl(); }, token: MatStepperIntl, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepperIntl, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\n/** @docs-private */\nfunction MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatStepperIntl();\n}\n/** @docs-private */\nconst MAT_STEPPER_INTL_PROVIDER = {\n    provide: MatStepperIntl,\n    deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n    useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatStepHeader.\n/** @docs-private */\nclass MatStepHeaderBase extends CdkStepHeader {\n    constructor(elementRef) {\n        super(elementRef);\n    }\n}\nconst _MatStepHeaderMixinBase = mixinColor(MatStepHeaderBase, 'primary');\nclass MatStepHeader extends _MatStepHeaderMixinBase {\n    constructor(_intl, _focusMonitor, _elementRef, changeDetectorRef) {\n        super(_elementRef);\n        this._intl = _intl;\n        this._focusMonitor = _focusMonitor;\n        this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        this._intlSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Focuses the step header. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._elementRef, origin, options);\n        }\n        else {\n            this._elementRef.nativeElement.focus(options);\n        }\n    }\n    /** Returns string label of given step if it is a text label. */\n    _stringLabel() {\n        return this.label instanceof MatStepLabel ? null : this.label;\n    }\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    _templateLabel() {\n        return this.label instanceof MatStepLabel ? this.label : null;\n    }\n    /** Returns the host HTML element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\n    _getIconContext() {\n        return {\n            index: this.index,\n            active: this.active,\n            optional: this.optional\n        };\n    }\n    _getDefaultTextForState(state) {\n        if (state == 'number') {\n            return `${this.index + 1}`;\n        }\n        if (state == 'edit') {\n            return 'create';\n        }\n        if (state == 'error') {\n            return 'warning';\n        }\n        return state;\n    }\n}\nMatStepHeader.ɵfac = function MatStepHeader_Factory(t) { return new (t || MatStepHeader)(ɵngcc0.ɵɵdirectiveInject(MatStepperIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatStepHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatStepHeader, selectors: [[\"mat-step-header\"]], hostAttrs: [\"role\", \"tab\", 1, \"mat-step-header\", \"mat-focus-indicator\"], inputs: { color: \"color\", state: \"state\", label: \"label\", errorMessage: \"errorMessage\", iconOverrides: \"iconOverrides\", index: \"index\", selected: \"selected\", active: \"active\", optional: \"optional\", disableRipple: \"disableRipple\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 10, vars: 19, consts: [[\"matRipple\", \"\", 1, \"mat-step-header-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-step-icon-content\", 3, \"ngSwitch\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngSwitchCase\"], [3, \"ngSwitch\", 4, \"ngSwitchDefault\"], [1, \"mat-step-label\"], [\"class\", \"mat-step-text-label\", 4, \"ngIf\"], [\"class\", \"mat-step-optional\", 4, \"ngIf\"], [\"class\", \"mat-step-sub-label-error\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [4, \"ngSwitchDefault\"], [1, \"mat-step-text-label\"], [3, \"ngTemplateOutlet\"], [1, \"mat-step-optional\"], [1, \"mat-step-sub-label-error\"]], template: function MatStepHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\");\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(3, MatStepHeader_ng_container_3_Template, 1, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatStepHeader_ng_container_4_Template, 3, 2, \"ng-container\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, MatStepHeader_div_6_Template, 2, 1, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(7, MatStepHeader_div_7_Template, 2, 1, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(8, MatStepHeader_div_8_Template, 2, 1, \"div\", 6);\n        ɵngcc0.ɵɵtemplate(9, MatStepHeader_div_9_Template, 2, 1, \"div\", 7);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx.disableRipple);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMapInterpolate1(\"mat-step-icon-state-\", ctx.state, \" mat-step-icon\");\n        ɵngcc0.ɵɵclassProp(\"mat-step-icon-selected\", ctx.selected);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", !!(ctx.iconOverrides && ctx.iconOverrides[ctx.state]));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-step-label-active\", ctx.active)(\"mat-step-label-selected\", ctx.selected)(\"mat-step-label-error\", ctx.state == \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._templateLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._stringLabel());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.optional && ctx.state != \"error\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.state == \"error\");\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.NgSwitch, ɵngcc3.NgSwitchCase, ɵngcc3.NgSwitchDefault, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet, ɵngcc4.MatIcon], styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content,.mat-step-icon .mat-icon{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatStepHeader.ctorParameters = () => [\n    { type: MatStepperIntl },\n    { type: FocusMonitor },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nMatStepHeader.propDecorators = {\n    state: [{ type: Input }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    iconOverrides: [{ type: Input }],\n    index: [{ type: Input }],\n    selected: [{ type: Input }],\n    active: [{ type: Input }],\n    optional: [{ type: Input }],\n    disableRipple: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-step-header',\n                template: \"<div class=\\\"mat-step-header-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disableRipple\\\"></div>\\n\\n<div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\">\\n  <div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\">\\n    <ng-container\\n      *ngSwitchCase=\\\"true\\\"\\n      [ngTemplateOutlet]=\\\"iconOverrides[state]\\\"\\n      [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container>\\n    <ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\">\\n      <span *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span>\\n      <mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon>\\n    </ng-container>\\n  </div>\\n</div>\\n<div class=\\\"mat-step-label\\\"\\n     [class.mat-step-label-active]=\\\"active\\\"\\n     [class.mat-step-label-selected]=\\\"selected\\\"\\n     [class.mat-step-label-error]=\\\"state == 'error'\\\">\\n  <!-- If there is a label template, use it. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_templateLabel()\\\">\\n    <ng-container [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\"></ng-container>\\n  </div>\\n  <!-- If there is no label template, fall back to the text label. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div>\\n\\n  <div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div>\\n  <div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div>\\n</div>\\n\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-step-header mat-focus-indicator',\n                    'role': 'tab'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content,.mat-step-icon .mat-icon{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: MatStepperIntl }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { state: [{\n            type: Input\n        }], label: [{\n            type: Input\n        }], errorMessage: [{\n            type: Input\n        }], iconOverrides: [{\n            type: Input\n        }], index: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], active: [{\n            type: Input\n        }], optional: [{\n            type: Input\n        }], disableRipple: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nconst matStepperAnimations = {\n    /** Animation that transitions the step along the X axis in a horizontal stepper. */\n    horizontalStepTransition: trigger('stepTransition', [\n        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        // Transition to `inherit`, rather than `visible`,\n        // because visibility on a child element the one from the parent,\n        // making this element focusable inside of a `hidden` element.\n        state('current', style({ transform: 'none', visibility: 'inherit' })),\n        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ]),\n    /** Animation that transitions the step along the Y axis in a vertical stepper. */\n    verticalStepTransition: trigger('stepTransition', [\n        state('previous', style({ height: '0px', visibility: 'hidden' })),\n        state('next', style({ height: '0px', visibility: 'hidden' })),\n        // Transition to `inherit`, rather than `visible`,\n        // because visibility on a child element the one from the parent,\n        // making this element focusable inside of a `hidden` element.\n        state('current', style({ height: '*', visibility: 'inherit' })),\n        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Template to be used to override the icons inside the step header.\n */\nclass MatStepperIcon {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nMatStepperIcon.ɵfac = function MatStepperIcon_Factory(t) { return new (t || MatStepperIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatStepperIcon.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatStepperIcon, selectors: [[\"ng-template\", \"matStepperIcon\", \"\"]], inputs: { name: [\"matStepperIcon\", \"name\"] } });\nMatStepperIcon.ctorParameters = () => [\n    { type: TemplateRef }\n];\nMatStepperIcon.propDecorators = {\n    name: [{ type: Input, args: ['matStepperIcon',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepperIcon, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matStepperIcon]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { name: [{\n            type: Input,\n            args: ['matStepperIcon']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatStep extends CdkStep {\n    /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n    constructor(stepper, _errorStateMatcher, stepperOptions) {\n        super(stepper, stepperOptions);\n        this._errorStateMatcher = _errorStateMatcher;\n    }\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control, form) {\n        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n        // Custom error state checks for the validity of form that is not submitted or touched\n        // since user can trigger a form change by calling for another step without directly\n        // interacting with the current form.\n        const customErrorState = !!(control && control.invalid && this.interacted);\n        return originalErrorState || customErrorState;\n    }\n}\nMatStep.ɵfac = function MatStep_Factory(t) { return new (t || MatStep)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => MatStepper)), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher, 4), ɵngcc0.ɵɵdirectiveInject(STEPPER_GLOBAL_OPTIONS, 8)); };\nMatStep.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatStep, selectors: [[\"mat-step\"]], contentQueries: function MatStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStepLabel, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepLabel = _t.first);\n    } }, inputs: { color: \"color\" }, exportAs: [\"matStep\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: ErrorStateMatcher, useExisting: MatStep },\n            { provide: CdkStep, useExisting: MatStep },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatStep_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatStep_ng_template_0_Template, 1, 0, \"ng-template\");\n    } }, encapsulation: 2, changeDetection: 0 });\nMatStep.ctorParameters = () => [\n    { type: MatStepper, decorators: [{ type: Inject, args: [forwardRef(() => MatStepper),] }] },\n    { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nMatStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [MatStepLabel,] }],\n    color: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStep, [{\n        type: Component,\n        args: [{\n                selector: 'mat-step',\n                template: \"<ng-template><ng-content></ng-content></ng-template>\\n\",\n                providers: [\n                    { provide: ErrorStateMatcher, useExisting: MatStep },\n                    { provide: CdkStep, useExisting: MatStep },\n                ],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matStep',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: MatStepper, decorators: [{\n                type: Inject,\n                args: [forwardRef(() => MatStepper)]\n            }] }, { type: ɵngcc2.ErrorStateMatcher, decorators: [{\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [STEPPER_GLOBAL_OPTIONS]\n            }] }]; }, { stepLabel: [{\n            type: ContentChild,\n            args: [MatStepLabel]\n        }], color: [{\n            type: Input\n        }] }); })();\nclass MatStepper extends CdkStepper {\n    constructor() {\n        super(...arguments);\n        /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n        this.steps = new QueryList();\n        /** Event emitted when the current step is done transitioning in. */\n        this.animationDone = new EventEmitter();\n        /** Consumer-specified template-refs to be used to override the header icons. */\n        this._iconOverrides = {};\n        /** Stream of animation `done` events when the body expands/collapses. */\n        this._animationDone = new Subject();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        this._icons.forEach(({ name, templateRef }) => this._iconOverrides[name] = templateRef);\n        // Mark the component for change detection whenever the content children query changes\n        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._stateChanged();\n        });\n        this._animationDone.pipe(\n        // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n        // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState), takeUntil(this._destroyed)).subscribe(event => {\n            if (event.toState === 'current') {\n                this.animationDone.emit();\n            }\n        });\n    }\n}\nMatStepper.ɵfac = /*@__PURE__*/ function () { let ɵMatStepper_BaseFactory; return function MatStepper_Factory(t) { return (ɵMatStepper_BaseFactory || (ɵMatStepper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepper)))(t || MatStepper); }; }();\nMatStepper.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatStepper, selectors: [[\"\", \"matStepper\", \"\"]], contentQueries: function MatStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStep, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatStepperIcon, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._steps = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icons = _t);\n    } }, viewQuery: function MatStepper_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatStepHeader, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stepHeader = _t);\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\" }, outputs: { animationDone: \"animationDone\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkStepper, useExisting: MatStepper }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatStepper.propDecorators = {\n    _stepHeader: [{ type: ViewChildren, args: [MatStepHeader,] }],\n    _steps: [{ type: ContentChildren, args: [MatStep, { descendants: true },] }],\n    _icons: [{ type: ContentChildren, args: [MatStepperIcon, { descendants: true },] }],\n    animationDone: [{ type: Output }],\n    disableRipple: [{ type: Input }],\n    color: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepper, [{\n        type: Directive,\n        args: [{ selector: '[matStepper]', providers: [{ provide: CdkStepper, useExisting: MatStepper }] }]\n    }], null, { animationDone: [{\n            type: Output\n        }], _stepHeader: [{\n            type: ViewChildren,\n            args: [MatStepHeader]\n        }], _steps: [{\n            type: ContentChildren,\n            args: [MatStep, { descendants: true }]\n        }], _icons: [{\n            type: ContentChildren,\n            args: [MatStepperIcon, { descendants: true }]\n        }], disableRipple: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\nclass MatHorizontalStepper extends MatStepper {\n    constructor() {\n        super(...arguments);\n        /** Whether the label should display in bottom or end position. */\n        this.labelPosition = 'end';\n    }\n}\nMatHorizontalStepper.ɵfac = /*@__PURE__*/ function () { let ɵMatHorizontalStepper_BaseFactory; return function MatHorizontalStepper_Factory(t) { return (ɵMatHorizontalStepper_BaseFactory || (ɵMatHorizontalStepper_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatHorizontalStepper)))(t || MatHorizontalStepper); }; }();\nMatHorizontalStepper.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatHorizontalStepper, selectors: [[\"mat-horizontal-stepper\"]], hostAttrs: [\"aria-orientation\", \"horizontal\", \"role\", \"tablist\", 1, \"mat-stepper-horizontal\"], hostVars: 4, hostBindings: function MatHorizontalStepper_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-stepper-label-position-end\", ctx.labelPosition == \"end\")(\"mat-stepper-label-position-bottom\", ctx.labelPosition == \"bottom\");\n    } }, inputs: { selectedIndex: \"selectedIndex\", labelPosition: \"labelPosition\" }, exportAs: [\"matHorizontalStepper\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatStepper, useExisting: MatHorizontalStepper },\n            { provide: CdkStepper, useExisting: MatHorizontalStepper }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 2, consts: [[1, \"mat-horizontal-stepper-header-container\"], [4, \"ngFor\", \"ngForOf\"], [1, \"mat-horizontal-content-container\"], [\"class\", \"mat-horizontal-stepper-content\", \"role\", \"tabpanel\", 3, \"id\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-horizontal-stepper-header\", 3, \"tabIndex\", \"id\", \"index\", \"state\", \"label\", \"selected\", \"active\", \"optional\", \"errorMessage\", \"iconOverrides\", \"disableRipple\", \"color\", \"click\", \"keydown\"], [\"class\", \"mat-stepper-horizontal-line\", 4, \"ngIf\"], [1, \"mat-stepper-horizontal-line\"], [\"role\", \"tabpanel\", 1, \"mat-horizontal-stepper-content\", 3, \"id\"], [3, \"ngTemplateOutlet\"]], template: function MatHorizontalStepper_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatHorizontalStepper_ng_container_1_Template, 3, 19, \"ng-container\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, MatHorizontalStepper_div_3_Template, 2, 5, \"div\", 3);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps);\n    } }, directives: [ɵngcc3.NgForOf, MatStepHeader, ɵngcc3.NgIf, ɵngcc3.NgTemplateOutlet], styles: [_c1], encapsulation: 2, data: { animation: [matStepperAnimations.horizontalStepTransition] }, changeDetection: 0 });\nMatHorizontalStepper.propDecorators = {\n    labelPosition: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatHorizontalStepper, [{\n        type: Component,\n        args: [{\n                selector: 'mat-horizontal-stepper',\n                exportAs: 'matHorizontalStepper',\n                template: \"<div class=\\\"mat-horizontal-stepper-header-container\\\">\\n  <ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n    <mat-step-header class=\\\"mat-horizontal-stepper-header\\\"\\n                     (click)=\\\"step.select()\\\"\\n                     (keydown)=\\\"_onKeydown($event)\\\"\\n                     [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\"\\n                     [id]=\\\"_getStepLabelId(i)\\\"\\n                     [attr.aria-posinset]=\\\"i + 1\\\"\\n                     [attr.aria-setsize]=\\\"steps.length\\\"\\n                     [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n                     [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n                     [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n                     [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n                     [index]=\\\"i\\\"\\n                     [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n                     [label]=\\\"step.stepLabel || step.label\\\"\\n                     [selected]=\\\"selectedIndex === i\\\"\\n                     [active]=\\\"step.completed || selectedIndex === i || !linear\\\"\\n                     [optional]=\\\"step.optional\\\"\\n                     [errorMessage]=\\\"step.errorMessage\\\"\\n                     [iconOverrides]=\\\"_iconOverrides\\\"\\n                     [disableRipple]=\\\"disableRipple\\\"\\n                     [color]=\\\"step.color || color\\\">\\n    </mat-step-header>\\n    <div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div>\\n  </ng-container>\\n</div>\\n\\n<div class=\\\"mat-horizontal-content-container\\\">\\n  <div *ngFor=\\\"let step of steps; let i = index\\\"\\n       class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\"\\n       [@stepTransition]=\\\"_getAnimationDirection(i)\\\"\\n       (@stepTransition.done)=\\\"_animationDone.next($event)\\\"\\n       [id]=\\\"_getStepContentId(i)\\\"\\n       [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n       [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n    <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n  </div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-horizontal',\n                    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n                    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n                    'aria-orientation': 'horizontal',\n                    'role': 'tablist'\n                },\n                animations: [matStepperAnimations.horizontalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatHorizontalStepper },\n                    { provide: CdkStepper, useExisting: MatHorizontalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"]\n            }]\n    }], null, { labelPosition: [{\n            type: Input\n        }] }); })();\nclass MatVerticalStepper extends MatStepper {\n    constructor(dir, changeDetectorRef, \n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef, _document) {\n        super(dir, changeDetectorRef, elementRef, _document);\n        this._orientation = 'vertical';\n    }\n}\nMatVerticalStepper.ɵfac = function MatVerticalStepper_Factory(t) { return new (t || MatVerticalStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatVerticalStepper.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatVerticalStepper, selectors: [[\"mat-vertical-stepper\"]], hostAttrs: [\"aria-orientation\", \"vertical\", \"role\", \"tablist\", 1, \"mat-stepper-vertical\"], inputs: { selectedIndex: \"selectedIndex\" }, exportAs: [\"matVerticalStepper\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatStepper, useExisting: MatVerticalStepper },\n            { provide: CdkStepper, useExisting: MatVerticalStepper }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[\"class\", \"mat-step\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-step\"], [1, \"mat-vertical-stepper-header\", 3, \"tabIndex\", \"id\", \"index\", \"state\", \"label\", \"selected\", \"active\", \"optional\", \"errorMessage\", \"iconOverrides\", \"disableRipple\", \"color\", \"click\", \"keydown\"], [1, \"mat-vertical-content-container\"], [\"role\", \"tabpanel\", 1, \"mat-vertical-stepper-content\", 3, \"id\"], [1, \"mat-vertical-content\"], [3, \"ngTemplateOutlet\"]], template: function MatVerticalStepper_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatVerticalStepper_div_0_Template, 6, 25, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.steps);\n    } }, directives: [ɵngcc3.NgForOf, MatStepHeader, ɵngcc3.NgTemplateOutlet], styles: [_c1], encapsulation: 2, data: { animation: [matStepperAnimations.verticalStepTransition] }, changeDetection: 0 });\nMatVerticalStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatVerticalStepper, [{\n        type: Component,\n        args: [{\n                selector: 'mat-vertical-stepper',\n                exportAs: 'matVerticalStepper',\n                template: \"<div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n  <mat-step-header class=\\\"mat-vertical-stepper-header\\\"\\n                   (click)=\\\"step.select()\\\"\\n                   (keydown)=\\\"_onKeydown($event)\\\"\\n                   [tabIndex]=\\\"_getFocusIndex() == i ? 0 : -1\\\"\\n                   [id]=\\\"_getStepLabelId(i)\\\"\\n                   [attr.aria-posinset]=\\\"i + 1\\\"\\n                   [attr.aria-setsize]=\\\"steps.length\\\"\\n                   [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n                   [attr.aria-selected]=\\\"selectedIndex === i\\\"\\n                   [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n                   [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n                   [index]=\\\"i\\\"\\n                   [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n                   [label]=\\\"step.stepLabel || step.label\\\"\\n                   [selected]=\\\"selectedIndex === i\\\"\\n                   [active]=\\\"step.completed || selectedIndex === i || !linear\\\"\\n                   [optional]=\\\"step.optional\\\"\\n                   [errorMessage]=\\\"step.errorMessage\\\"\\n                   [iconOverrides]=\\\"_iconOverrides\\\"\\n                   [disableRipple]=\\\"disableRipple\\\"\\n                   [color]=\\\"step.color || color\\\">\\n  </mat-step-header>\\n\\n  <div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\">\\n    <div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\"\\n         [@stepTransition]=\\\"_getAnimationDirection(i)\\\"\\n         (@stepTransition.done)=\\\"_animationDone.next($event)\\\"\\n         [id]=\\\"_getStepContentId(i)\\\"\\n         [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n         [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n      <div class=\\\"mat-vertical-content\\\">\\n        <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-vertical',\n                    'aria-orientation': 'vertical',\n                    'role': 'tablist'\n                },\n                animations: [matStepperAnimations.verticalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatVerticalStepper },\n                    { provide: CdkStepper, useExisting: MatVerticalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Button that moves to the next step in a stepper workflow. */\nclass MatStepperNext extends CdkStepperNext {\n}\nMatStepperNext.ɵfac = /*@__PURE__*/ function () { let ɵMatStepperNext_BaseFactory; return function MatStepperNext_Factory(t) { return (ɵMatStepperNext_BaseFactory || (ɵMatStepperNext_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepperNext)))(t || MatStepperNext); }; }();\nMatStepperNext.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatStepperNext, selectors: [[\"button\", \"matStepperNext\", \"\"]], hostAttrs: [1, \"mat-stepper-next\"], hostVars: 1, hostBindings: function MatStepperNext_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepperNext, [{\n        type: Directive,\n        args: [{\n                selector: 'button[matStepperNext]',\n                host: {\n                    'class': 'mat-stepper-next',\n                    '[type]': 'type'\n                },\n                inputs: ['type']\n            }]\n    }], null, null); })();\n/** Button that moves to the previous step in a stepper workflow. */\nclass MatStepperPrevious extends CdkStepperPrevious {\n}\nMatStepperPrevious.ɵfac = /*@__PURE__*/ function () { let ɵMatStepperPrevious_BaseFactory; return function MatStepperPrevious_Factory(t) { return (ɵMatStepperPrevious_BaseFactory || (ɵMatStepperPrevious_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatStepperPrevious)))(t || MatStepperPrevious); }; }();\nMatStepperPrevious.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatStepperPrevious, selectors: [[\"button\", \"matStepperPrevious\", \"\"]], hostAttrs: [1, \"mat-stepper-previous\"], hostVars: 1, hostBindings: function MatStepperPrevious_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", ctx.type);\n    } }, inputs: { type: \"type\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepperPrevious, [{\n        type: Directive,\n        args: [{\n                selector: 'button[matStepperPrevious]',\n                host: {\n                    'class': 'mat-stepper-previous',\n                    '[type]': 'type'\n                },\n                inputs: ['type']\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatStepperModule {\n}\nMatStepperModule.ɵfac = function MatStepperModule_Factory(t) { return new (t || MatStepperModule)(); };\nMatStepperModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatStepperModule });\nMatStepperModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher], imports: [[\n            MatCommonModule,\n            CommonModule,\n            PortalModule,\n            MatButtonModule,\n            CdkStepperModule,\n            MatIconModule,\n            MatRippleModule,\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatStepperModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatCommonModule,\n                    CommonModule,\n                    PortalModule,\n                    MatButtonModule,\n                    CdkStepperModule,\n                    MatIconModule,\n                    MatRippleModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                declarations: [\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatStepperModule, { declarations: function () { return [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIcon]; }, imports: function () { return [MatCommonModule,\n        CommonModule,\n        PortalModule,\n        MatButtonModule,\n        CdkStepperModule,\n        MatIconModule,\n        MatRippleModule]; }, exports: function () { return [MatCommonModule, MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper, MatStepperNext, MatStepperPrevious, MatStepHeader, MatStepperIcon]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_STEPPER_INTL_PROVIDER, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatHorizontalStepper, MatStep, MatStepHeader, MatStepLabel, MatStepper, MatStepperIcon, MatStepperIntl, MatStepperModule, MatStepperNext, MatStepperPrevious, MatVerticalStepper, matStepperAnimations };\n\n//# sourceMappingURL=stepper.js.map","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { unique } from '@placeos/common';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface AssetOptions {\n    search?: string;\n    sort_by?: string;\n    view: 'grid' | 'list';\n    active_asset?: string;\n}\n\nexport interface Asset {\n    id: string;\n    name: string;\n    category: string;\n    images: string[];\n    barcode: string;\n    brand: string;\n    description: string;\n    specifications: Record<string, string>;\n    purchase_details: Record<string, string>;\n    invoices: string[];\n    count: number;\n    locations: [string, string][];\n}\n\nfunction generateAssetForm() {\n    return new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        category: new FormControl('', [Validators.required]),\n        count: new FormControl(0, [Validators.required]),\n        size: new FormControl('', [Validators.required]),\n        description: new FormControl('', [Validators.required]),\n        barcode: new FormControl('', [Validators.required]),\n        brand: new FormControl('', [Validators.required]),\n        specifications: new FormControl({}),\n        purchase_date: new FormControl(Date.now(), [Validators.required]),\n        expiry_date: new FormControl(null),\n        invoices: new FormControl([]),\n        purchase_details: new FormControl({}),\n        locations: new FormControl([])\n    })\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AssetManagerStateService {\n    private _options = new BehaviorSubject<AssetOptions>({ view: 'grid' });\n    private _form = generateAssetForm();\n\n    private _assets = new BehaviorSubject<Asset[]>([\n        { id: '1', name: 'iPad', category: 'Technology', images: ['assets/support/chrome-logo.svg', 'assets/support/firefox-logo.svg', 'assets/support/safari-logo.svg'] },\n        { id: '2', name: 'iPhone', category: 'Technology' },\n        { id: '3', name: 'iWatch', category: 'Technology' },\n        { id: '4', name: 'Chair', category: 'Furniture' },\n        { id: '4', name: 'Lounge', category: 'Furniture' },\n        { id: '4', name: 'Table', category: 'Furniture' },\n        { id: '4', name: 'Couch', category: 'Furniture' },\n    ] as any);\n    /** List of available assets */\n    public readonly assets = this._assets.asObservable();\n    /** List of options set for the view */\n    public readonly options = this._options.asObservable();\n    /** Currently active asset */\n    public readonly active_asset = combineLatest([\n        this._assets,\n        this._options,\n    ]).pipe(\n        map(([list, options]) =>\n            list.find((_) => _.id === options.active_asset)\n        )\n    );\n    /** list of filtered assets */\n    public readonly filtered_assets = combineLatest([\n        this._assets,\n        this._options,\n    ]).pipe(\n        map(([list, options]) =>\n            options.search\n                ? list.filter((i) =>\n                      i.name\n                          .toLowerCase()\n                          .includes(options.search.toLowerCase())\n                  )\n                : list\n        )\n    );\n    /** Mapping of available assets to categories */\n    public readonly asset_mapping = this.filtered_assets.pipe(\n        map((_) => {\n            const map = {};\n            const categories = unique(_.map((i) => i.category));\n            for (const group of categories) {\n                map[group] = _.filter((i) => i.category === group);\n            }\n            return map;\n        })\n    );\n    /** List of asset categories */\n    public readonly asset_categories = this.asset_mapping.pipe(\n        map((_) => Object.keys(_ || {}))\n    );\n\n    public get form() {\n        return this._form;\n    }\n\n    public resetForm() {\n        this._form = generateAssetForm();\n    }\n\n    /** Update the set view options */\n    public setOptions(options: Partial<AssetOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n    \n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-manager-topbar',\n    template: `\n        <div class=\"w-full px-4 py-2 bg-white flex items-center space-x-4\">\n            <a\n                button\n                mat-button\n                class=\"secondary\"\n                [routerLink]=\"['/asset-manager', 'manage', 'details']\"\n            >\n                Add Asset\n            </a>\n            <mat-button-toggle-group\n                [ngModel]=\"(options | async)?.view\"\n                (ngModelChange)=\"setOptions({ view: $event })\"\n            >\n                <mat-button-toggle value=\"grid\">\n                    <div\n                        class=\"flex items-center justify-center h-10 w-6 text-xl\"\n                    >\n                        <app-icon>view_module</app-icon>\n                    </div>\n                </mat-button-toggle>\n                <mat-button-toggle value=\"list\">\n                    <div\n                        class=\"flex items-center justify-center h-10 w-6 text-xl\"\n                    >\n                        <app-icon>view_list</app-icon>\n                    </div>\n                </mat-button-toggle>\n            </mat-button-toggle-group>\n            <button mat-button class=\"clear\">\n                <div class=\"flex items-center\">\n                    <div class=\"pl-2\">Sort By</div>\n                    <app-icon class=\"text-2xl\">arrow_drop_down</app-icon>\n                </div>\n            </button>\n            <div class=\"flex-1\"></div>\n            <mat-form-field appearance=\"outline\" class=\"h-[3.25rem]\">\n                <app-icon matPrefix class=\"text-2xl relative top-1 -left-1\"\n                    >search</app-icon\n                >\n                <input\n                    matInput\n                    [ngModel]=\"(options | async)?.search\"\n                    (ngModelChange)=\"setOptions({ search: $event })\"\n                    placeholder=\"Search for an asset or request\"\n                />\n            </mat-form-field>\n        </div>\n    `,\n    styles: [``],\n})\nexport class AssetManagerTopbarComponent {\n    public readonly options = this._state.options;\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-listing',\n    template: `\n        <asset-manager-topbar></asset-manager-topbar>\n        <div class=\"overflow-auto flex-1 w-full px-4 pb-2\">\n            <mat-tab-group>\n                <mat-tab label=\"Assets\">\n                    <div *ngFor=\"let group of categories | async\">\n                        <h2 class=\"py-2\">\n                            <span class=\"font-medium\">{{ group }}</span>\n                            <span class=\"text-xs\">\n                                ({{ (assets | async)[group]?.length }} item{{\n                                    (assets | async)[group]?.length === 1\n                                        ? ''\n                                        : 's'\n                                }})\n                            </span>\n                        </h2>\n\n                        <ng-container [ngSwitch]=\"(options | async).view\">\n                            <ng-container *ngSwitchCase=\"'list'\">\n                                <div\n                                    class=\"rounded overflow-hidden bg-white border border-gray-300 divide-y divide-gray-200\"\n                                >\n                                    <a\n                                        matRipple\n                                        class=\"flex items-center text-left space-x-4 p-4\"\n                                        *ngFor=\"\n                                            let asset of (assets | async)[group]\n                                        \"\n                                        [routerLink]=\"[\n                                            '/asset-manager',\n                                            'view',\n                                            asset.id\n                                        ]\"\n                                    >\n                                        <div\n                                            class=\"h-12 w-12 flex items-center justify-center border border-gray-200 p-2\"\n                                        >\n                                            <img\n                                                [src]=\"\n                                                    asset.images\n                                                        ? asset.images[0]\n                                                        : ''\n                                                \"\n                                                class=\"max-w-full max-h-full object-contain\"\n                                            />\n                                        </div>\n                                        <div>\n                                            <div class=\"truncate\">\n                                                {{ asset.name }}\n                                            </div>\n                                            <div class=\"text-xs opacity-60\">\n                                                In Storage:\n                                                {{\n                                                    (asset.count || 0) -\n                                                        (asset.locations\n                                                            ?.length || 0)\n                                                }}/{{ assets.count || 0 }}\n                                            </div>\n                                        </div>\n                                    </a>\n                                </div>\n                            </ng-container>\n                            <ng-container *ngSwitchDefault>\n                                <div\n                                    class=\"flex items-center overflow-x-auto space-x-4 py-2\"\n                                >\n                                    <a\n                                        matRipple\n                                        class=\"bg-white rounded shadow w-40 h-44 text-left\"\n                                        *ngFor=\"\n                                            let asset of (assets | async)[group]\n                                        \"\n                                        [routerLink]=\"[\n                                            '/asset-manager',\n                                            'view',\n                                            asset.id\n                                        ]\"\n                                    >\n                                        <div\n                                            class=\"w-full h-32 flex items-center justify-center p-2\"\n                                        >\n                                            <img\n                                                [src]=\"\n                                                    asset.images\n                                                        ? asset.images[0]\n                                                        : ''\n                                                \"\n                                                class=\"max-w-full max-h-full object-contain\"\n                                            />\n                                        </div>\n                                        <div\n                                            class=\"border-t border-gray-200 w-full px-3 py-1\"\n                                        >\n                                            <div class=\"truncate\">\n                                                {{ asset.name }}\n                                            </div>\n                                            <div class=\"text-xs opacity-60\">\n                                                In Storage:\n                                                {{\n                                                    (asset.count || 0) -\n                                                        (asset.locations\n                                                            ?.length || 0)\n                                                }}/{{ assets.count || 0 }}\n                                            </div>\n                                        </div>\n                                    </a>\n                                </div>\n                            </ng-container>\n                        </ng-container>\n                    </div>\n                </mat-tab>\n                <mat-tab label=\"Requests\"> </mat-tab>\n            </mat-tab-group>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetListingComponent {\n    public readonly options = this._state.options;\n    public readonly categories = this._state.asset_categories;\n    public readonly assets = this._state.asset_mapping;\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: '[asset-manager]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex-1 bg-gray-200\">\n            <router-outlet></router-outlet>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class AssetManagerComponent {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'image-carousel',\n    template: `\n        <div class=\"h-full w-full relative overflow-hidden flex\">\n            <div\n                image\n                class=\"h-full min-w-full relative flex items-center justify-center p-8\"\n                *ngFor=\"let image of images\"\n                [style.transform]=\"'translateX(-' + offset * 100 + '%)'\"\n            >\n                <img class=\"h-full object-contain\" [src]=\"image\" />\n            </div>\n            <div\n                class=\"h-full w-full relative flex items-center justify-center opacity-30\"\n                *ngIf=\"!images?.length\"\n            >\n                <p>No Images for Asset</p>\n            </div>\n            <button\n                mat-icon-button\n                class=\"text-secondary border border-solid border-secondary absolute top-1/2 left-2 -translate-y-1/2 bg-white\"\n                [disabled]=\"offset === 0\"\n                (click)=\"offset = offset - 1\"\n            >\n                <app-icon>chevron_left</app-icon>\n            </button>\n            <button\n                mat-icon-button\n                class=\"text-secondary border border-solid border-secondary absolute top-1/2 right-2 -translate-y-1/2 bg-white\"\n                [disabled]=\"offset >= images?.length - 1\"\n                (click)=\"offset = offset + 1\"\n            >\n                <app-icon>chevron_right</app-icon>\n            </button>\n            <div class=\"absolute bottom-1 left-1/2 -translate-x-1/2 text-sm opacity-30\" *ngIf=\"images?.length\">\n                {{ offset + 1 }} / {{ images.length }}\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                height: 100%;\n                width: 100%;\n            }\n\n            [image] {\n                transition: transform 300ms;\n            }\n        `,\n    ],\n})\nexport class ImageCarouselComponent {\n    @Input() public images: string[] = [];\n\n    public offset = 0;\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { first } from 'rxjs/operators';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-view',\n    template: `\n        <div\n            class=\"h-full w-full\"\n            *ngIf=\"!loading && (asset | async); else loading_state\"\n        >\n            <div class=\"flex items-center space-x-4 p-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"inverse\"\n                    [routerLink]=\"['/asset-manager']\"\n                >\n                    <div class=\"flex items-center\">\n                        <app-icon class=\"text-xl\">arrow_back</app-icon>\n                        <div class=\"mr-2\">Back</div>\n                    </div>\n                </a>\n                <div class=\"flex items-center space-x-2 font-medium\">\n                    <span>Assets</span>\n                    <span>\n                        <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                    </span>\n                    <span>{{ (asset | async)?.category }}</span>\n                    <span>\n                        <app-icon class=\"text-2xl\">chevron_right</app-icon>\n                    </span>\n                    <span>{{ (asset | async)?.name }}</span>\n                </div>\n            </div>\n            <div class=\"flex items-center\">\n                <div class=\"bg-white flex-1 w-1/2 h-[360px]\">\n                    <image-carousel\n                        [images]=\"(asset | async)?.images || []\"\n                    ></image-carousel>\n                </div>\n                <div class=\"w-[512px] h-[360px] px-4 flex flex-col\">\n                    <div\n                        class=\"w-full flex items-center justify-between border-b border-gray-300\"\n                    >\n                        <div class=\"font-medium\">\n                            {{ (asset | async)?.name }}\n                        </div>\n                        <div class=\"flex items-center text-sm \">\n                            <button mat-button class=\"clear\">\n                                <div class=\"flex items-center text-secondary\">\n                                    <app-icon class=\"text-lg\">edit</app-icon>\n                                    <div class=\"mr-2\">Edit</div>\n                                </div>\n                            </button>\n                            <div class=\"w-px h-4 bg-gray-300\"></div>\n                            <button mat-button class=\"clear\">\n                                <div class=\"flex items-center text-secondary\">\n                                    <app-icon class=\"text-lg\">delete</app-icon>\n                                    <div class=\"mr-2\">Delete</div>\n                                </div>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"py-4 w-full flex-1 h-1/2 overflow-auto\">\n                        {{ (asset | async)?.description || '~No Description~' }}\n                    </div>\n                    <div class=\"rounded bg-white shadow border border-gray-300 w-full divide-y divide-gray-200\">\n                        <div class=\"flex items-center justify-between p-3\">\n                            <div class=\"pl-2\">Available: {{ ((asset | async)?.count - (asset | async)?.locations?.length) || 0 }}</div>\n                            <button mat-button>Assign to Location</button>\n                        </div>\n                        <div class=\"flex items-center justify-between p-3\">\n                            <div class=\"pl-2\">In Use: {{ (asset | async)?.locations?.length || 0 }}</div>\n                            <button mat-button>View Locations</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <mat-tab-group>\n                <mat-tab label=\"Specifications\">\n                </mat-tab>\n                <mat-tab label=\"Purchase information\">\n                </mat-tab>\n                <mat-tab label=\"Consumable assets\">\n                </mat-tab>\n            </mat-tab-group>\n        </div>\n        <ng-template #loading_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Loading asset details...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class AssetViewComponent extends BaseClass {\n    public loading = false;\n    public readonly asset = this._state.active_asset;\n\n    constructor(\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _state: AssetManagerStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.loading = true;\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((params) => {\n                if (params.has('id')) {\n                    this._state.setOptions({ active_asset: params.get('id') });\n                }\n            })\n        );\n        this.timeout(\n            'no_asset',\n            () => this._router.navigate(['/asset-mananger']),\n            1000\n        );\n        this._state.active_asset.pipe(first((_) => !!_)).subscribe(() => {\n            this.clearTimeout('no_asset');\n            this.loading = false;\n        });\n    }\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-details',\n    template: `\n        <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n            <div\n                class=\"mb-4 border border-gray-300 p-4 bg-gray-200\"\n            >\n                <h3 class=\"mb-4\">Add Asset Images</h3>\n                <div classs=\"flex items-center\">\n                <div\n                    class=\"w-64 h-48 bg-white border border-dashed border-gray-300 flex items-center justify-center flex-col relative\"\n                    matRipple\n                >\n                    <app-icon class=\"text-2xl\">upload</app-icon>\n                    <p>Drag and Drop Image</p>\n                    <p class=\"text-xs my-2\">or</p>\n                    <button mat-button>Browse</button>\n                    <input type=\"file\" multiple class=\"opacity-0 absolute inset-0\" />\n                </div>\n</div>\n            </div>\n            <div class=\"flex items-center space-x-4\">\n                <div class=\"flex-1 flex-col\">\n                    <label>Asset name<span>*</span></label>\n                    <mat-form-field appearance=\"outline\">\n                        <input matInput formControlName=\"name\" placeholder=\"e.g. iPad Pro\" />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex-col\">\n                    <label>Category<span>*</span></label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"category\"></mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"flex items-center space-x-4\">\n                <div class=\"flex-1 flex-col\">\n                    <label>Item Size<span>*</span></label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select formControlName=\"size\"></mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex-1 flex-col\">\n                    <label>Quantity<span>*</span></label>\n                    <mat-form-field appearance=\"outline\">\n                        <input matInput formControlName=\"count\" type=\"number\" placeholder=\"1\" />\n                    </mat-form-field>\n                </div>\n            </div>\n            <label>Description<span>*</span></label>\n            <mat-form-field appearance=\"outline\">\n                <textarea matInput formControlName=\"description\" placeholder=\"e.g. iPad Pro\"></textarea>\n            </mat-form-field>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class AssetFlowDetailsComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) { }\n}\n","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-specs',\n    template: ` \n    <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n        <h3>General</h3>\n        <div class=\"flex items-center space-x-4\">\n            <div class=\"flex-1 flex-col\">\n                <label>Barcode<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"barcode\" placeholder=\"e.g. 10001\" />\n                </mat-form-field>\n            </div>\n            <div class=\"flex-1 flex-col\">\n                <label>Brand<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput formControlName=\"brand\" placeholder=\"e.g. Apple\" />\n                </mat-form-field>\n            </div>\n        </div>\n        <h3>Other</h3>\n    </div>\n    `,\n    styles: [``],\n})\nexport class AssetFlowSpecsComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) { }\n}\n","import { Component } from \"@angular/core\";\nimport { AssetManagerStateService } from \"./asset-manager-state.service\";\n\n@Component({\n    selector: 'asset-flow-purchases',\n    template: `\n    <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\">\n        <h3>Timeline</h3>\n        <div class=\"flex items-center space-x-4\">\n            <div class=\"flex-1 flex-col\">\n                <label>Purchase Date<span>*</span></label>\n                <a-date-field></a-date-field>\n            </div>\n            <div class=\"flex-1 flex-col\">\n                <label>End of Service Date<span>*</span></label>\n                <a-date-field></a-date-field>\n            </div>\n        </div>\n        <h3>Purchase Price</h3>\n        <div class=\"flex items-center space-x-4\">\n            <div class=\"flex-1 flex-col\">\n                <label>Purchase Price<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput placeholder=\"e.g. 10001\" />\n                </mat-form-field>\n            </div>\n            <div class=\"flex-1 flex-col\">\n                <label>Invoice<span>*</span></label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput placeholder=\"e.g. Apple\" />\n                </mat-form-field>\n            </div>\n        </div>\n        <h3>Other</h3>\n    </div>`,\n    styles: [``]\n})\nexport class AssetFlowPurchasesComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) { }\n}","import { Component } from '@angular/core';\nimport { AssetManagerStateService } from './asset-manager-state.service';\n\n@Component({\n    selector: 'asset-flow-consumables',\n    template: `\n        <div class=\"flex flex-col p-4\" *ngIf=\"form\" [formGroup]=\"form\"></div>\n    `,\n    styles: [``],\n})\nexport class AssetFlowConsumablesComponent {\n    public readonly form = this._state.form;\n\n    constructor(private _state: AssetManagerStateService) {}\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'asset-flow',\n    template: `\n        <div\n            class=\"flex flex-col h-full max-w-full w-[768px] overflow-hidden px-2 py-4 mx-auto\"\n        >\n            <div class=\"flex items-center px-4 space-x-4\">\n                <button mat-icon-button class=\"bg-white rounded-none border border-solid border-gray-300\">\n                    <app-icon>arrow_back</app-icon>\n                </button>\n                <span>Add Asset</span>\n            </div>\n            <mat-horizontal-stepper\n                [linear]=\"false\"\n                labelPosition=\"bottom\"\n                class=\"flex-1 h-1/2\"\n            >\n                <mat-step>\n                    <ng-template matStepLabel>Details</ng-template>\n                    <div class=\"bg-white border border-gray-200\">\n                        <div class=\"overflow-auto w-full\">\n                            <asset-flow-details></asset-flow-details>\n                        </div>\n                        <div\n                            class=\"flex items-center justify-end border-t border-gray-300 p-2 space-x-2 w-full\"\n                        >\n                            <a\n                                button\n                                mat-button\n                                class=\"inverse\"\n                                [routerLink]=\"['/asset-manager', 'list']\"\n                            >\n                                Cancel\n</a>\n                            <button mat-button matStepperNext>Next</button>\n                        </div>\n                    </div>\n                </mat-step>\n                <mat-step>\n                    <ng-template matStepLabel>Specifications</ng-template>\n                    <div class=\"bg-white border border-gray-200\">\n                        <div class=\"overflow-auto w-full\">\n                            <asset-flow-specs></asset-flow-specs>\n                        </div>\n                        <div\n                            class=\"flex items-center justify-end border-t border-gray-200 p-2 space-x-2 w-full\"\n                        >\n                            <button\n                                mat-button\n                                matStepperPrevious\n                                class=\"inverse\"\n                            >\n                                Back\n                            </button>\n                            <button mat-button matStepperNext>Next</button>\n                        </div>\n                    </div>\n                </mat-step>\n                <mat-step>\n                    <ng-template matStepLabel>Purchase Information</ng-template>\n                    <div class=\"bg-white border border-gray-200\">\n                        <div class=\"overflow-auto w-full\">\n                            <asset-flow-purchases></asset-flow-purchases>\n                        </div>\n                        <div\n                            class=\"flex items-center justify-end border-t border-gray-200 p-2 space-x-2 w-full\"\n                        >\n                            <button\n                                mat-button\n                                matStepperPrevious\n                                class=\"inverse\"\n                            >\n                                Back\n                            </button>\n                            <button mat-button matStepperNext>Next</button>\n                        </div>\n                    </div>\n                </mat-step>\n                <mat-step>\n                    <ng-template matStepLabel>Consumable Assets</ng-template>\n                    <div class=\"bg-white border border-gray-200\">\n                        <div class=\"overflow-auto w-full\">\n                            <asset-flow-consumables></asset-flow-consumables>\n                        </div>\n                        <div\n                            class=\"flex items-center justify-end border-t border-gray-200 p-2 space-x-2 w-full\"\n                        >\n                            <button\n                                mat-button\n                                matStepperPrevious\n                                class=\"inverse\"\n                            >\n                                Back\n                            </button>\n                            <button mat-button>Save</button>\n                        </div>\n                    </div>\n                </mat-step>\n            </mat-horizontal-stepper>\n        </div>\n    `,\n    styles: [\n        `\n            mat-horizontal-stepper {\n                background: none !important;\n            }\n        `,\n    ],\n})\nexport class AssetFlowComponent {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Route, RouterModule } from '@angular/router';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { UIModule } from '../ui/ui.module';\n\nimport { AssetListingComponent } from './asset-listing.component';\nimport { AssetManagerTopbarComponent } from './asset-manager-topbar.component';\nimport { AssetManagerComponent } from './asset-manager.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { AssetViewComponent } from './asset-view.component';\nimport { ImageCarouselComponent } from './image-carousel.component';\nimport { AssetFlowComponent } from './asset-flow.component';\nimport { AssetFlowConsumablesComponent } from './asset-flow-consumables.component';\nimport { AssetFlowDetailsComponent } from './asset-flow-details.component';\nimport { AssetFlowPurchasesComponent } from './asset-flow-purchases.component';\nimport { AssetFlowSpecsComponent } from './asset-flow-specs.component';\n\nconst COMPONENTS = [\n    AssetManagerComponent,\n    AssetManagerTopbarComponent,\n    AssetListingComponent,\n    AssetViewComponent,\n    AssetFlowComponent,\n    AssetFlowConsumablesComponent,\n    AssetFlowDetailsComponent,\n    AssetFlowPurchasesComponent,\n    AssetFlowSpecsComponent,\n    ImageCarouselComponent\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: AssetManagerComponent,\n        children: [\n            { path: 'list', component: AssetListingComponent },\n            { path: 'view/:id', component: AssetViewComponent },\n            { path: 'manage/:view', component: AssetFlowComponent },\n            { path: '**', redirectTo: 'list' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        MatButtonToggleModule,\n        MatTabsModule,\n        MatStepperModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppAssetManangerModule {}\n"],"sourceRoot":"webpack:///"}