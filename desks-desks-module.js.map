{"version":3,"sources":["./src/app/desks/desks-state.service.ts","./src/app/desks/desks.module.ts","./src/app/desks/desks-topbar.component.ts","./src/app/desks/desks.component.ts","./src/app/desks/desk-details.component.ts","./src/app/desks/desk-list-modal.component.ts","./src/app/desks/desk-listings.component.ts"],"names":[],"mappings":"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","file":"desks-desks-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, timer } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    first,\n    map,\n    share,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay, startOfDay } from 'date-fns';\n\nimport { Booking, BookingsService } from '@user-interfaces/bookings';\nimport { BaseClass, notifyError, notifyInfo, notifySuccess } from '@user-interfaces/common';\nimport { showMetadata } from '@placeos/ts-client';\nimport { Desk, OrganisationService } from '@user-interfaces/organisation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\nimport { DeskListModalComponent } from './desk-list-modal.component';\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends BaseClass {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _desk_bookings: Booking[] = [];\n    private _desks: Desk[] = []\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly desks: Observable<Desk[]> = combineLatest([this._filters]).pipe(\n        debounceTime(500),\n        distinctUntilChanged(),\n        switchMap((details) => {\n            const [filters] = details;\n            if (!filters.zones?.length) return [];\n            return showMetadata(filters.zones[0] || this._org.building.id, {\n                name: 'desks',\n            }).pipe(map((m) => m.details));\n        }),\n        map(list => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name.localeCompare(b.name));\n            this._desks = list.map(i => new Desk(i));\n            return list;\n        }),\n        share()\n    );\n\n    public readonly bookings = combineLatest([this._filters]).pipe(\n        debounceTime(500),\n        switchMap((details) => {\n            this._loading.next(true);\n            const [filters] = details;\n            const date = filters.date ? new Date(filters.date) : new Date();\n            return this._bookings.query({\n                period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                type: 'desk',\n                zones: (filters.zones || []).join(','),\n            });\n        }),\n        map(list => {\n            list.sort((a, b) => a.date - b.date);\n            this._desk_bookings = list;\n            this._loading.next(false);\n            return list;\n        }),\n        shareReplay()\n    );\n\n    constructor(\n        private _bookings: BookingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkinDesk(desk: Booking) {\n        const success = await this._bookings.checkIn(desk, true).catch(_ => 'failed');\n        success === 'failed'\n            ? notifyError('Error checking in desk booking')\n            : notifySuccess(`Checked in ${desk.user_name}.`)\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await this._bookings.approve(desk.id).catch(_ => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(`Approved desk booking for ${desk.user_name}.`)\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await this._bookings.reject(desk.id).catch(_ => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(`Rejected desk booking for ${desk.user_name}.`)\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length > 0) {\n            const ref = this._dialog.open(ConfirmModalComponent, {\n                data: {\n                    title: 'Cancel all desk bookings',\n                    content: 'Are you sure you want to cancel all bookings for the selected date?',\n                    icon: {\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'delete',\n                    },\n                },\n            });\n            return new Promise(async (resolve, reject) => {\n                let success = false;\n                ref.componentInstance.event.pipe(first(_ => _.reason === 'done')).subscribe(async() => {\n                    ref.componentInstance.loading = 'Rejecting all desks for selected date...';\n                    success = true;\n                    await Promise.all(list.map(desk => this._bookings.reject(desk.id)));\n                    resolve();\n                    notifySuccess('Successfull rejected all desk bookings for selected date.');\n                    ref.close();\n                });\n                await ref.afterClosed().toPromise();\n                if (!success) {\n                    reject();\n                }\n            });\n        } else {\n            notifyInfo('No desks to reject for the selected date');\n        }\n    }\n\n    public async updateDesks() {\n        const ref = this._dialog.open(DeskListModalComponent, {\n            data: {\n                level: this._org.levelWithID(this._filters.getValue().zones) || this._org.level_list[0],\n                building: this._org.building,\n                desks: this._desks\n            },\n        });\n        await ref.afterClosed().toPromise();\n        this._desks = ref.componentInstance.desks$.getValue();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskListingsComponent } from './desk-listings.component';\nimport { DeskDetailsComponent } from './desk-details.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskListModalComponent } from './desk-list-modal.component';\n\nconst ROUTES: Route[] = [{ path: '', component: DesksComponent }];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskListingsComponent,\n        DeskDetailsComponent,\n        DesksTopbarComponent,\n        DeskListModalComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div class=\"flex-1 w-2\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 2em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends BaseClass implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._desks.setFilters({ zones })\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'app-desks',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <desk-listings class=\"w-full flex-1 h-0\"></desk-listings>\n            <mat-progress-bar class=\"w-full\" *ngIf=\"loading | async\" mode=\"indeterminate\"></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: DesksStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Booking } from '@user-interfaces/bookings';\nimport { DesksStateService } from './desks-state.service';\n\nexport interface DeskBooking extends Booking {\n    los: string;\n}\n\n@Component({\n    selector: 'desk-details',\n    template: `\n        <div class=\"w-32 p-2 bg\">{{ desk?.user_name }}</div>\n        <div class=\"w-32 p-2\">{{ desk?.los }}</div>\n        <div class=\"w-24 p-2\">{{ desk.date | date: 'shortTime' }}</div>\n        <div flex class=\"p-2 flex-1 truncate\">{{ desk?.description }}</div>\n        <div [class]=\"'w-24 p-2 capitalize text-red-600 ' + desk?.status\">\n            {{ desk?.status }}\n        </div>\n        <div class=\"w-32 p-2\">{{ desk?.approver_name }}</div>\n        <div class=\"w-32 p-2\">{{ desk?.checked_in ? 'Yes' : 'No' }}</div>\n        <div class=\"w-32 p-2 flex items-center\">\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"checkin()\"\n                [loading]=\"loading === 'checkin'\"\n                [state]=\"desk?.checked_in ? 'success' : ''\"\n                content=\"how_to_reg\"\n            ></action-icon>\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"approve()\"\n                [loading]=\"loading === 'approve'\"\n                [state]=\"desk?.approved ? 'success' : ''\"\n                content=\"event_available\"\n            ></action-icon>\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"reject()\"\n                [loading]=\"loading === 'reject'\"\n                [state]=\"desk?.status === 'declined' ? 'success' : ''\"\n                content=\"event_busy\"\n            ></action-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                display: flex;\n                align-items: center;\n                padding: 0 0.5rem;\n                background-color: #f8f8f8;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host:hover {\n                background-color: #f0f0f0;\n            }\n\n            .tentative {\n                color: #ffa000;\n            }\n\n            .approved {\n                color: #388e3c;\n            }\n        `,\n    ],\n})\nexport class DeskDetailsComponent {\n    @Input() public desk: DeskBooking;\n\n    public loading: string;\n\n    public readonly checkin = () =>\n        this.runMethod('checkin', async () =>\n            this._state.checkinDesk(this.desk)\n        );\n    public readonly approve = () =>\n        this.runMethod('approve', async () =>\n            this._state.approveDesk(this.desk)\n        );\n    public readonly reject = () =>\n        this.runMethod('reject', async () =>\n            this._state.rejectDesk(this.desk)\n        );\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { updateMetadata } from '@placeos/ts-client';\nimport {\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n} from '@user-interfaces/common';\nimport { Building, BuildingLevel, Desk } from '@user-interfaces/organisation';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface DeskListModalData {\n    building: Building;\n    level: BuildingLevel;\n    desks: Desk[];\n}\n\n@Component({\n    selector: 'desk-list-modal',\n    template: `\n        <header class=\"flex items-center\">\n            <h2 style=\"margin-right: 1rem;\">\n                <strong>List of Desks</strong> -\n                {{ building.display_name || building.name }},\n                {{ level.display_name || level.name }}\n            </h2>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon className=\"material-icons\">close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"flex flex-col\">\n                <div\n                    class=\"flex items-center p-2 space-x-2 w-full border-b border-gray-300\"\n                >\n                    <searchbar [model]=\"filter$ | async\" (modelChange)=\"filter$.next($event)\"></searchbar>\n                    <div class=\"flex-1 w-0\"></div>\n                    <button mat-button class=\"relative\">\n                        Upload List\n                        <input\n                            type=\"file\"\n                            class=\"absolute inset-0 opacity-0\"\n                            (change)=\"upload($event)\"\n                        />\n                    </button>\n                    <button mat-button (click)=\"download()\">\n                        Download List\n                    </button>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full\">\n                    <div\n                        class=\"flex items-center p-2 border-b border-gray-300 font-medium\"\n                    >\n                        <div class=\"w-40 p-1 flex-1\" flex>ID</div>\n                        <div class=\"w-32 p-1\">Name</div>\n                        <div class=\"w-32 p-1\">Safe</div>\n                        <div class=\"w-32 p-1\">LoS</div>\n                    </div>\n                    <div table class=\"flex-1 overflow-auto\">\n                        <div\n                            class=\"flex item-center p-2 border-b border-gray-200\"\n                            *ngFor=\"let desk of desk_list | async\"\n                        >\n                            <div class=\"w-40 p-1 flex-1\" flex>\n                                {{ desk.id }}\n                            </div>\n                            <div class=\"w-32 p-1\">{{ desk.name }}</div>\n                            <div class=\"w-32 p-1\">\n                                <mat-checkbox\n                                    [(ngModel)]=\"desk.bookable\"\n                                ></mat-checkbox>\n                            </div>\n                            <div class=\"w-32\">\n                                <input\n                                    class=\"border-none bg-none w-full p-1\"\n                                    [(ngModel)]=\"desk.group\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n            <footer\n                class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-300\"\n            >\n                <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 mx-auto flex flex-col items-center justify-center\"\n            >\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                max-height: 65vh;\n            }\n\n            [table] {\n                height: 1px;\n                max-height: 50vh;\n            }\n        `,\n    ],\n})\nexport class DeskListModalComponent {\n    public readonly building = this._data.building;\n    public readonly level = this._data.level;\n    public readonly desks$ = new BehaviorSubject(this._data.desks);\n    public readonly filter$ = new BehaviorSubject('');\n\n    public loading: string;\n\n    public desk_list = combineLatest([this.filter$, this.desks$]).pipe(\n        map((details) => {\n            const [filter, desks] = details;\n            return desks.filter(\n                (desk) =>\n                    desk.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    desk.id.toLowerCase().includes(filter.toLowerCase())\n            );\n        })\n    );\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: DeskListModalData, private _dialog_ref: MatDialogRef<DeskListModalComponent>) {}\n\n    /** Download Desks list */\n    public download() {\n        const data = this.desks$.getValue().map((i) => i.format());\n        const csv = jsonToCsv(data);\n        const name = this.level.display_name.split(' ').join('-').toLowerCase();\n        downloadFile(`desks_${name}.csv`, csv);\n    }\n\n    /** Upload Desks list from csv */\n    public upload(event) {\n        if (event.target) {\n            const file = event.target.files[0];\n            if (file) {\n                this.loading = 'Uploading...';\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.onload = () => {\n                    this.processCSV(reader.result as string);\n                    this.loading = '';\n                };\n                reader.onerror = (evt) => {\n                    this.loading = '';\n                    notifyError('Error reading file.');\n                };\n            }\n        }\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        await updateMetadata(this.level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: this.desks$.getValue(),\n        }).toPromise().catch(e => {\n            this.loading = '';\n            notifyError(`Error saving desk data. Error: ${e.message || e}`);\n            throw e;\n        });\n        notifySuccess(\n            'Successfully updated desks'\n        );\n        this.loading = '';\n        this._dialog_ref.close();\n    }\n\n    /** Process csv */\n    private processCSV(csv: string) {\n        const data = csvToJson(csv);\n        this.desks$.next(data.map((i) => new Desk(i)));\n        notifySuccess(\n            'Upload was sucessful. Click Save Button to save the changes'\n        );\n    }\n\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-listings',\n    template: `\n        <div\n            details\n            class=\"w-full bg-gray-900 text-white flex items-center px-2\"\n        >\n            <div class=\"flex-1 w-0\"></div>\n            <div class=\"p-2\">\n                Requests: {{ (bookings | async)?.length || '0' }}\n            </div>\n            <div class=\"px-8\">\n                Free Desks:\n                {{\n                    ((desks | async)?.length || 0) -\n                        ((bookings | async)?.length || 0)\n                }}\n            </div>\n            <button mat-icon-button [matMenuTriggerFor]=\"menu\">\n                <app-icon className=\"material-icons\">more_vert</app-icon>\n            </button>\n        </div>\n        <div class=\"w-full flex-1 text-sm\">\n            <div\n                class=\"w-full flex items-center bg-white border-b border-gray-500 p-2 font-medium\"\n            >\n                <div class=\"w-32 p-2\">Person</div>\n                <div class=\"w-32 p-2\">LoS</div>\n                <div class=\"w-24 p-2\">Date</div>\n                <div flex class=\"p-2 flex-1\">Desk</div>\n                <div class=\"w-24 p-2\">Status</div>\n                <div class=\"w-32 p-2\">Approver</div>\n                <div class=\"w-32 p-2\">Checked In</div>\n                <div class=\"w-32 p-2\"></div>\n            </div>\n            <div class=\"w-full flex-1 overflow-auto\">\n                <ng-container\n                    *ngIf=\"(bookings | async)?.length; else empty_state\"\n                >\n                    <desk-details\n                        *ngFor=\"let desk of bookings | async\"\n                        [desk]=\"desk\"\n                    ></desk-details>\n                </ng-container>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex items-center justify-center\">\n                <p class=\"p-8\">\n                    There are no desks for the currently selected date.\n                </p>\n            </div>\n        </ng-template>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"updateDesks()\">\n                <div class=\"flex items-center\">\n                    <app-icon className=\"material-icons\">edit</app-icon>\n                    <span class=\"pl-2\">Edit Desks</span>\n                </div>\n            </button>\n            <button mat-menu-item (click)=\"rejectAll()\">\n                <div class=\"flex items-center\">\n                    <app-icon className=\"material-icons\">event_busy</app-icon>\n                    <span class=\"pl-2\">Reject All</span>\n                </div>\n            </button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                overflow: hidden;\n            }\n\n            [details] {\n                height: 3.5rem;\n            }\n\n            [flex] {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class DeskListingsComponent {\n    public readonly desks = this._state.desks;\n\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n    public readonly updateDesks = () => this._state.updateDesks();\n\n    constructor(private _state: DesksStateService) {}\n}\n"],"sourceRoot":"webpack:///"}