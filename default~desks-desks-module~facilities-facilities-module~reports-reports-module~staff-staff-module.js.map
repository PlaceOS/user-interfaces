{"version":3,"sources":["./libs/bookings/src/lib/desk-confirm-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts","./libs/bookings/src/lib/booking.class.ts","./libs/bookings/src/lib/bookings.fn.ts","./libs/bookings/src/lib/desk.service.ts","./node_modules/@angular/material/fesm2015/radio.js"],"names":["DeskConfirmModalComponent","_data","_settings","event","desks","this","date","host","can_set_date","reason","level","map","_","name","join","get","loading","emit","DeskQuestionsModalComponent","form","travelled","required","unwell","contact","markAllAsTouched","valid","Object","keys","value","find","key","failure","data","id","asset_id","zones","booking_start","getUnixTime","roundToNearestMinutes","addMinutes","Date","nearestTo","booking_end","duration","booking_type","type","differenceInMinutes","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","approver_id","approver_email","approver_name","extension_data","access","all_day","status","isSameDay","start","end","addHours","isAfter","BOOKINGS_ENDPOINT","queryBookings","q","query","pipe","list","item","showBooking","encodeURIComponent","saveBooking","method","updateBooking","createBooking","approveBooking","rejectBooking","checkinBooking","state","DesksService","_org","_dialog","error_on_host","attendees","levelWithID","zone","Array","ref","open","success","Promise","race","componentInstance","first","toPromise","afterClosed","close","desk_list","period_start","startOfDay","period_end","endOfDay","filter","d","toLowerCase","email","length","users","all","desk","idx","makeDeskBooking","valueOf","for_user","location","parent_id","booking_data","Math","floor","groups","_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","source","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","checked","selected","_radios","forEach","radio","_markForCheck","markForCheck","fn","isDisabled","disabled","ɵfac","t","ɵdir","inputs","labelPosition","outputs","ɵMatRadioGroup_BaseFactory","selectors","contentQueries","rf","ctx","dirIndex","MatRadioButton","_t","hostAttrs","exportAs","features","MatRadioButtonBase","_elementRef","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","super","_uniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_setDisabled","_color","options","origin","focusVia","_inputElement","nativeElement","focus","monitor","subscribe","focusOrigin","_touch","stopMonitoring","disableRipple","stopPropagation","groupValueChanged","_emitChangeEvent","String","undefined","viewQuery","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","ɵcmp","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","$event","_onInputChange","_onInputClick","_r0","inputId","_isRippleDisabled","directives","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports"],"mappings":"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","file":"default~desks-desks-module~facilities-facilities-module~reports-reports-module~staff-staff-module.js","sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, SettingsService } from '@placeos/common';\nimport { BuildingLevel, Desk } from '@placeos/organisation';\nimport { User } from '@placeos/users';\n\nexport interface DeskConfirmModalData {\n    host: User;\n    desks: Desk[];\n    date: number;\n    reason: string;\n    level: BuildingLevel;\n    can_set_date: boolean;\n}\n\n@Component({\n    selector: 'desk-flow-confirm-modal-component',\n    template: `\n        <header>\n            <h2>Confirm Booking</h2>\n            <div class=\"flex-1\"></div>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <i class=\"material-icons\">close</i>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"p-4\">\n                <div host class=\"flex flex-col\" *ngIf=\"can_set_host\">\n                    <label>Host</label>\n                    <a-user-search-field\n                        [(ngModel)]=\"host\"\n                    ></a-user-search-field>\n                </div>\n                <div date class=\"mb-4\">\n                    <label>Date</label>\n                    <div *ngIf=\"!can_set_date\">\n                        {{ date | date: 'mediumDate' }}\n                    </div>\n                    <a-date-field\n                        *ngIf=\"can_set_date\"\n                        [(ngModel)]=\"date\"\n                    ></a-date-field>\n                </div>\n                <div reason class=\"mb-4\" *ngIf=\"!hide_reason\">\n                    <label>Reason</label>\n                    <div>{{ reason || '~No set reason~' }}</div>\n                </div>\n                <p>\n                    Your desk{{ desks.length === 1 ? '' : 's' }} will be\n                    {{ desk_list }} on\n                    {{ level?.display_name || level?.name }}\n                </p>\n            </main>\n            <footer class=\"flex items-center justify-center p-2\">\n                <button mat-button (click)=\"confirm()\">Confirm</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main load class=\"flex flex-col p-12 items-center justify-center\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n        `,\n    ],\n})\nexport class DeskConfirmModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public readonly desks = this._data.desks || [];\n\n    public date = this._data.date;\n    public host = this._data.host;\n\n    public readonly can_set_date = this._data.can_set_date;\n\n    public readonly reason = this._data.reason;\n\n    public readonly level = this._data.level;\n\n    public loading: string;\n\n    public get desk_list() {\n        return this.desks.map((_) => _.name).join(', ');\n    }\n\n    public get hide_reason() {\n        return !!this._settings.get('app.desks.hide_reason');\n    }\n\n    public get can_set_host() {\n        return !!this._settings.get('app.desks.can_set_host');\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskConfirmModalData,\n        private _settings: SettingsService\n    ) {}\n\n    public confirm() {\n        this.loading = 'Requesting desk booking...';\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form: FormGroup;\n    public failure: boolean;\n\n    public ngOnInit() {\n        this.form = new FormGroup({\n            travelled: new FormControl('', [Validators.required]),\n            unwell: new FormControl('', [Validators.required]),\n            contact: new FormControl('', [Validators.required]),\n        });\n    }\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) {\n            notifyError('All the questions must be answered');\n            return;\n        } else if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n","import {\n    addHours,\n    addMinutes,\n    differenceInMinutes,\n    getUnixTime,\n    isAfter,\n    isSameDay,\n    roundToNearestMinutes,\n} from 'date-fns';\n\nexport type BookingType = 'desk' | 'parking' | 'locker' | '';\n\n/** General purpose booking class */\nexport class Booking {\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_start: number;\n    /** Unix epoch for the start time of the booking in seconds */\n    public readonly booking_end: number;\n    /** ID of the user who owns the booking */\n    public readonly user_id: string;\n    /** Email of the user who owns the booking */\n    public readonly user_email: string;\n    /** Display name of the user who owns the booking */\n    public readonly user_name: string;\n    /** Identifier of the physical asset assocated with the booking */\n    public readonly asset_id: string;\n    /** Zones associated with the asset ID */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: BookingType;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Extra non-standard metadata associated with the booking */\n    public readonly extension_data: Record<string, any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        this.id = data.id || '';\n        this.asset_id = data.asset_id || '';\n        this.zones = data.zones || [];\n        this.booking_start =\n            data.booking_start ||\n            getUnixTime(\n                data.date ||\n                    roundToNearestMinutes(addMinutes(new Date(), 2), {\n                        nearestTo: 5,\n                    })\n            );\n        this.booking_end =\n            data.booking_end ||\n            getUnixTime(addMinutes(this.booking_start, data.duration || 60));\n        this.booking_type = data.booking_type || '';\n        this.type = data.type || 'booking';\n        this.date = data.date || this.booking_start * 1000;\n        this.duration =\n            data.duration ||\n            differenceInMinutes(\n                this.booking_start * 1000,\n                this.booking_end * 1000\n            );\n        this.timezone =\n            data.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone;\n        this.user_email = data.user_email || '';\n        this.user_id = data.user_id || '';\n        this.user_name = data.user_name || '';\n        this.title = data.title || 'Desk booking';\n        this.description = data.description || '';\n        this.checked_in = !!data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id || '';\n        this.approver_email = data.approver_email || '';\n        this.approver_name = data.approver_name || '';\n        this.extension_data = data.extension_data || {};\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day ?? true;\n        this.status = this.rejected\n            ? 'declined'\n            : this.approved\n            ? 'approved'\n            : 'tentative';\n    }\n\n    public toJSON(this: Booking): Partial<Booking> {\n        const data = { ...this };\n        if (!this.id) delete data.id;\n        delete data.date;\n        delete data.duration;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    /** Whether the booking occurs today */\n    public get is_today(): boolean {\n        return isSameDay(this.date, new Date());\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = new Date();\n        const end = this.all_day\n            ? addHours(this.date, 24)\n            : addMinutes(this.date, this.duration);\n        return isAfter(start, end);\n    }\n}\n","import { del, get, patch, post, put } from \"@placeos/ts-client\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { toQueryString } from \"libs/common/src/lib/api\";\nimport { Booking } from \"./booking.class\";\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** User ID to filter bookings */\n    user?: string;\n    /** Email address to filter bookings */\n    email?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (\n    data: Partial<Booking>,\n) => (data.id ? updateBooking(data.id, data) : createBooking(data));\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { StaffUser, User } from '@placeos/users';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return ɵMatRadioGroup_BaseFactory(t || MatRadioGroup); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\nconst ɵMatRadioGroup_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelement(4, \"span\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"span\", 7);\n        ɵngcc0.ɵɵelement(8, \"span\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"span\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <span class=\\\"mat-radio-container\\\">\\n    <span class=\\\"mat-radio-outer-circle\\\"></span>\\n    <span class=\\\"mat-radio-inner-circle\\\"></span>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <span mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <span class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></span>\\n    </span>\\n  </span>\\n\\n  <!-- The label content for radio control. -->\\n  <span class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be removed since it causes some a11y issues (see #21266).\n                    '[attr.tabindex]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵfac = function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); };\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map"],"sourceRoot":"webpack:///"}