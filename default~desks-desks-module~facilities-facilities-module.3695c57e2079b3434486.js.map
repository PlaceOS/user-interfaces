{"version":3,"sources":["/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-desk-info.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-state.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-spaces.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore.module.ts","/home/runner/work/user-interfaces/user-interfaces/libs/explore/src/lib/explore-zoom-control.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.html","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/location.class.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/users.module.ts"],"names":["ExploreDeskInfoComponent","_details","_element","map_id","this","user","start","end","tries","setTimeout","parent","nativeElement","parentElement","ngOnInit","position","parseInt","style","top","left","y_pos","x_pos","ExploreStateService","_org","_spaces","_settings","super","_level","_positions","zoom","center","x","y","_styles","_features","_actions","_labels","_options","level","asObservable","spaces","list","pipe","details","filter","space","zones","includes","id","map_url","lvl","map_positions","map_features","features","options","key","show_zones","get","concat","map_actions","i","Object","values","reduce","a","map_labels","labels","map_styles","styles","style_mappings","keys","h","display","initialised","_","subscribe","subscription","active_building","bld","getValue","level_list","levelsForBuilding","find","length","setLevel","next","zone_id","levelWithID","name","style_map","feature_map","actions","actions_map","labels_map","DEFAULT_COLOURS","free","pending","reserved","busy","unknown","SharedExploreModule","ExploreZoomControlComponent","_state","zoomIn","setPositions","Math","min","positions","zoomOut","max","reset","UserFormComponent","MapLocation","_data","type","location","map_width","map_height","variance","last_seen","floor","Date","valueOf","building","at_location","SharedUsersModule"],"mappings":"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","file":"default~desks-desks-module~facilities-facilities-module.3695c57e2079b3434486.js","sourcesContent":["import { Component, ElementRef, Inject, OnInit } from '@angular/core';\n\nimport { MAP_FEATURE_DATA } from '@user-interfaces/components';\n\nexport interface SpaceInfoData {\n    map_id: string;\n    user: string;\n    start?: number;\n    end?: number;\n    status: 'free' | 'busy' | 'pending' | 'reserved' | 'unknown' | '';\n}\n\n@Component({\n    selector: 'explore-desk-info',\n    template: `\n        <div\n            name=\"space-info\"\n            [id]=\"map_id\"\n            [class]=\"\n                'absolute rounded bg-white p-4 top-0 left-0 shadow ' +\n                x_pos +\n                ' ' +\n                y_pos\n            \"\n        >\n            <div class=\"arrow\"></div>\n            <div class=\"details\">\n                <h4 class=\"m-0 font-medium\">{{ map_id }}</h4>\n                <p class=\"mt-2 text-sm\" *ngIf=\"user\">{{ user }}</p>\n                <p class=\"mt-1 text-sm\" *ngIf=\"start\">\n                    {{ start | date: 'shortTime' }} &ndash;\n                    {{ end | date: 'shortTime' }}\n                </p>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                pointer-events: none;\n                z-index: 1;\n            }\n\n            [name='space-info'] {\n                width: 16rem;\n            }\n\n            [name='status'] {\n                background-color: #43a047;\n                font-weight: 500;\n            }\n\n            [name='status'].busy {\n                background-color: #e53935;\n            }\n\n            [name='status'].pending {\n                background-color: #ffb300;\n            }\n\n            [name='status'].not-bookable {\n                background-color: #757575;\n            }\n        `,\n    ],\n})\nexport class ExploreDeskInfoComponent implements OnInit {\n    /** Space to display details for */\n    public readonly map_id = this._details.map_id;\n    public readonly user = this._details.user;\n    public readonly start = this._details.start;\n    public readonly end = this._details.end;\n\n    public y_pos: 'top' | 'bottom';\n\n    public x_pos: 'left' | 'right';\n\n    constructor(\n        @Inject(MAP_FEATURE_DATA) private _details: SpaceInfoData,\n        private _element: ElementRef<HTMLElement>\n    ) {}\n\n    public ngOnInit(tries: number = 0) {\n        if (tries > 10) return;\n        setTimeout(() => {\n            const parent = this._element.nativeElement.parentElement\n                ?.parentElement;\n            if (!parent) return this.ngOnInit(++tries);\n            const position = {\n                y: parseInt(parent.style.top, 10) / 100,\n                x: parseInt(parent.style.left, 10) / 100,\n            };\n            this.y_pos = position.y >= 0.5 ? 'bottom' : 'top';\n            this.x_pos = position.x >= 0.5 ? 'right' : 'left';\n        }, 200);\n    }\n\n    public get available_until() {\n        return '';\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Point, ViewAction, ViewerFeature, ViewerLabel, ViewerStyles } from '@yuion/svg-viewer';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\n\nimport { BaseClass, HashMap, SettingsService } from '@user-interfaces/common';\nimport { BuildingLevel, OrganisationService } from '@user-interfaces/organisation';\nimport { SpacesService } from '@user-interfaces/spaces';\n\n\nexport interface MapOptions {\n    show_zones?: boolean;\n    show_devices?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ExploreStateService extends BaseClass {\n    /** Currently active level */\n    private _level = new BehaviorSubject<BuildingLevel>(null);\n    /** Currently active level */\n    private _positions = new BehaviorSubject<{ zoom: number; center: Point }>({\n        zoom: 1,\n        center: { x: 0.5, y: 0.5 },\n    });\n    /** Mapping of groups to their styles */\n    private _styles = new BehaviorSubject<HashMap<ViewerStyles>>({});\n    /** Mapping of groups to their features */\n    private _features = new BehaviorSubject<HashMap<ViewerFeature[]>>({});\n    /** Mapping of groups to their actions */\n    private _actions = new BehaviorSubject<HashMap<ViewAction[]>>({});\n    /** Mapping of groups to their actions */\n    private _labels = new BehaviorSubject<HashMap<ViewerLabel[]>>({});\n\n    private _options = new BehaviorSubject<MapOptions>({});\n\n    /** Currently active level */\n    public readonly level = this._level.asObservable();\n    /** Spaces associated with the active level */\n    public readonly spaces = combineLatest([this._level, this._spaces.list]).pipe(\n        map((details) => details[1].filter((space) => space.zones.includes(details[0].id)))\n    );\n    /** Currently shown space's map URL */\n    public readonly map_url = this._level.pipe(map((lvl) => (lvl ? lvl.map_id : '') || ''));\n    /** Currently center and zoom positions for map */\n    public readonly map_positions = this._positions.asObservable();\n    /** Currently center and zoom positions for map */\n    public readonly map_features = combineLatest([this._features, this._options]).pipe(map(details => {\n        const [features, options] = details;\n        let list = [];\n        for (const key in features) {\n            if (key !== 'devices' || (options.show_zones && this._settings.get('app.explore.display_devices') !== false)) {\n                list = list.concat(features[key]);\n            }\n        }\n        return list;\n    }));\n    /** Currently center and zoom positions for map */\n    public readonly map_actions = this._actions.pipe(map(i => Object.values(i).reduce((list, a) => list.concat(a), [])));\n    /** Currently center and zoom positions for map */\n    public readonly map_labels = combineLatest([this._labels, this._options]).pipe(map(details => {\n        const [labels, options] = details;\n        let list = [];\n        for (const key in labels) {\n            if (key !== 'zones' || options.show_zones) {\n                list = list.concat(labels[key]);\n            }\n        }\n        return list;\n    }));\n    /** Current map styles */\n    public readonly map_styles = combineLatest([this._styles, this._options]).pipe(\n        map((details) => {\n            const [styles, options] = details;\n            const style_mappings = Object.keys(styles).reduce(\n                (a, h) => ({ ...a, ...styles[h] }),\n                {}\n            );\n            if (!options.show_zones) {\n                style_mappings['#zones'] = { display: 'none' };\n                style_mappings['#Zones'] = { display: 'none' };\n            }\n            style_mappings['text'] = { display: 'none' };\n            return style_mappings;\n        })\n    );\n\n    public readonly options = this._options.asObservable();\n\n    public get positions() {\n        return this._positions.getValue();\n    }\n\n    constructor(private _org: OrganisationService, private _spaces: SpacesService, private _settings: SettingsService) {\n        super();\n        this._org.initialised.pipe(first((_) => _)).subscribe(() => {\n            this.subscription(\n                'building',\n                this._org.active_building.pipe(filter((_) => !!_)).subscribe((bld) => {\n                    const level = this._level.getValue();\n                    const level_list = this._org.levelsForBuilding(bld);\n                    const has_level = level_list.find((lvl) => level?.id === lvl.id);\n                    if (!has_level && level_list.length) {\n                        this.setLevel(level_list[0].id);\n                    }\n                })\n            );\n        });\n    }\n\n    public setOptions(options: MapOptions) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setLevel(zone_id: string) {\n        const lvl = this._org.levelWithID([zone_id]);\n        if (lvl) {\n            this._level.next(lvl);\n        }\n    }\n\n    public setStyles(name: string, styles: ViewerStyles) {\n        const style_map = this._styles.getValue();\n        style_map[name] = styles;\n        this._styles.next(style_map);\n    }\n\n    public setFeatures(name: string, features: ViewerFeature[]) {\n        const feature_map = this._features.getValue();\n        feature_map[name] = features;\n        this._features.next(feature_map);\n    }\n\n    public setActions(name: string, actions: ViewAction[]) {\n        const actions_map = this._actions.getValue();\n        actions_map[name] = actions;\n        this._actions.next(actions_map);\n    }\n\n    public setLabels(name: string, labels: ViewerLabel[]) {\n        const labels_map = this._labels.getValue();\n        labels_map[name] = labels;\n        this._labels.next(labels_map);\n    }\n\n    public setPositions(zoom: number, center: Point) {\n        this._positions.next({ zoom, center });\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { getModule } from '@placeos/ts-client';\nimport { ViewAction, ViewerFeature } from '@yuion/svg-viewer';\n\nimport { BaseClass, HashMap, notifyError, SettingsService } from '@user-interfaces/common';\nimport { Space } from '@user-interfaces/spaces';\nimport { CalendarEvent } from '@user-interfaces/events';\n\nimport { ExploreStateService } from './explore-state.service';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\n\nexport const DEFAULT_COLOURS = {\n    free: '#43a047',\n    pending: '#ffb300',\n    reserved: '#3949ab',\n    busy: '#e53935',\n    'not-bookable': '#757575',\n    unknown: '#757575',\n};\n\n@Injectable()\nexport class ExploreSpacesService extends BaseClass implements OnDestroy {\n    private _spaces: Space[] = [];\n    private _bookings: HashMap<CalendarEvent[]> = {};\n    private _bindings: any[] = [];\n    private _statuses: HashMap<string> = {};\n\n    constructor(\n        private _state: ExploreStateService,\n        private _settings: SettingsService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.subscription(\n            'spaces',\n            this._state.spaces.subscribe((list) => {\n                this.clearBindings();\n                this._spaces = list;\n                this.bindToSpaces();\n            })\n        );\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this.clearBindings();\n    }\n\n    public clearBindings() {\n        if (!this._spaces) return;\n        for (const space of this._spaces) {\n            this.unsub(`bookings-${space.id}`);\n            this.unsub(`status-${space.id}`);\n        }\n        this._bindings.forEach((b) => b.unbind());\n        this._bindings = [];\n        this._statuses = {};\n    }\n\n    public bindToSpaces() {\n        if (!this._spaces) return;\n        for (const space of this._spaces) {\n            let binding = getModule(space.id, 'Bookings').binding('bookings');\n            this.subscription(\n                `bookings-${space.id}`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.handleBookingsChange(space, d))\n            );\n            binding.bind();\n            this._bindings.push(binding);\n            binding = getModule(space.id, 'Bookings').binding('status');\n            this.subscription(\n                `status-${space.id}`,\n                binding\n                    .listen()\n                    .subscribe((d) => this.handleStatusChange(space, d))\n            );\n            binding.bind();\n            this._bindings.push(binding);\n        }\n        this.updateActions();\n        this.updateHoverElements();\n    }\n\n    public bookSpace(space: Space) {\n        if (this._statuses[space.id] === 'busy') {\n            return notifyError(`${space.display_name || space.name} is unavailable at the current time`);\n        }\n        this._dialog.open(ExploreBookingModalComponent, {\n            data: { space }\n        });\n    }\n\n    private handleBookingsChange(space: Space, bookings: HashMap[]) {\n        if (!bookings) return;\n        this._bookings[space.id] = bookings.map((i) => new CalendarEvent(i));\n        this.timeout('update_hover_els', () => this.updateHoverElements(), 100);\n    }\n\n    private handleStatusChange(space: Space, status: string) {\n        this._statuses[space.id] = space.bookable\n            ? status || 'free'\n            : 'not-bookable';\n        this.timeout(\n            'update_statuses',\n            () => {\n                this.clearTimeout('update_hover_els');\n                this.updateStatus();\n                this.updateHoverElements();\n            },\n            100\n        );\n    }\n\n    private updateStatus() {\n        const style_map = {};\n        const colours =\n            this._settings.get('app.explore.colors') || {};\n        for (const space of this._spaces) {\n            style_map[`#${space.map_id}`] = {\n                fill:\n                    colours[`space-${this._statuses[space.id]}`] ||\n                    colours[`${this._statuses[space.id]}`] ||\n                    DEFAULT_COLOURS[`${this._statuses[space.id]}`],\n                opacity: 0.6,\n            };\n        }\n        this._state.setStyles('spaces', style_map);\n    }\n\n    private updateHoverElements() {\n        const features: ViewerFeature[] = [];\n        for (const space of this._spaces) {\n            features.push({\n                location: space.map_id,\n                hover: true,\n                content: ExploreSpaceInfoComponent,\n                data: {\n                    space,\n                    events: this._bookings[space.id],\n                    status: this._statuses[space.id],\n                },\n            } as any);\n        }\n        this._state.setFeatures('spaces', features);\n    }\n\n    private updateActions() {\n        const actions: ViewAction[] = [];\n        for (const space of this._spaces) {\n            actions.push({\n                id: space.map_id,\n                action: 'click',\n                callback: () => this.bookSpace(space),\n            });\n            actions.push({\n                id: space.map_id,\n                action: 'touchend',\n                callback: () => this.bookSpace(space),\n            });\n        }\n        this._state.setActions('spaces', actions);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\nimport { ExploreMapControlComponent } from './explore-map-control.component';\nimport { ExploreMapViewComponent } from './explore-map-view.component';\nimport { ExploreSearchComponent } from './explore-search.component';\nimport { ExploreSpaceInfoComponent } from './explore-space-info.component';\nimport { ExploreZoomControlComponent } from './explore-zoom-control.component';\nimport { ExploreDeviceInfoComponent } from './explore-device-info.component';\nimport { ExploreBookingModalComponent } from './explore-booking-modal.component';\nimport { ExploreDeskInfoComponent } from './explore-desk-info.component';\n\nconst COMPONENTS: Type<any>[] = [\n    ExploreMapControlComponent,\n    ExploreMapViewComponent,\n    ExploreSearchComponent,\n    ExploreSpaceInfoComponent,\n    ExploreDeviceInfoComponent,\n    ExploreDeskInfoComponent,\n    ExploreZoomControlComponent,\n    ExploreBookingModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        ComponentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatSlideToggleModule,\n    ],\n    exports: [...COMPONENTS],\n})\nexport class SharedExploreModule {}\n","import { Component } from '@angular/core';\nimport { ExploreStateService } from './explore-state.service';\n\n@Component({\n    selector: `explore-zoom-controls`,\n    template: `\n        <button mat-icon-button class=\"bg-white\" (click)=\"zoomIn()\">\n            <app-icon className=\"material-icons\">add</app-icon>\n        </button>\n        <button mat-icon-button class=\"bg-white\" (click)=\"zoomOut()\">\n            <app-icon className=\"material-icons\">remove</app-icon>\n        </button>\n        <button mat-icon-button class=\"bg-white\" (click)=\"reset()\">\n            <app-icon className=\"material-icons\">autorenew</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                padding: .5rem;\n            }\n\n            button {\n                border: 1px solid #ccc;\n                border-radius: 0;\n            }\n\n            button:first-child {\n                border-radius: 0.25rem 0.25rem 0 0;\n                border-bottom: none;\n            }\n\n            button:last-child {\n                border-radius: 0 0 0.25rem 0.25rem;\n                border-top: none;\n            }\n        `,\n    ],\n})\nexport class ExploreZoomControlComponent {\n    public readonly zoomIn = () =>\n        this._state.setPositions(\n            Math.min(10, this._state.positions.zoom * 1.2),\n            this._state.positions.center\n        );\n    public readonly zoomOut = () =>\n        this._state.setPositions(\n            Math.max(1, this._state.positions.zoom * (1 / 1.2)),\n            this._state.positions.center\n        );\n    public readonly reset = () => this._state.setPositions(1, { x: 0.5, y: 0.5 });\n\n    constructor(private _state: ExploreStateService) {}\n}\n","<div class=\"user form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"name\" placeholder=\"Name\" formControlName=\"name\" />\n                <mat-error *ngIf=\"form.controls.name.invalid\">Name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.email\">\n            <label\n                for=\"email\"\n                [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                >Email<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" placeholder=\"Email Address\" formControlName=\"email\" />\n                <mat-error *ngIf=\"form.controls.email.invalid\">A valid email is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.organisation\">\n            <label\n                for=\"organisation\"\n                [class.error]=\"\n                    form.controls.organisation.invalid && form.controls.organisation.touched\n                \"\n                >Organisation<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"organisation\"\n                    placeholder=\"Organisation\"\n                    formControlName=\"organisation\"\n                />\n                <mat-error *ngIf=\"form.controls.organisation.invalid\"\n                    >Organisation is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.phone\">\n            <label\n                for=\"phone\"\n                [class.error]=\"form.controls.phone.invalid && form.controls.phone.touched\"\n                >Phone:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"phone\" placeholder=\"Phone\" formControlName=\"phone\" />\n                <mat-error *ngIf=\"form.controls.phone.invalid\">Phone format is invalid</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n            <mat-checkbox color=\"primary\" formControlName=\"assistance_required\"\n                >Assistance required</mat-checkbox\n            >\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n            <mat-checkbox color=\"primary\" formControlName=\"visit_expected\"\n                >Visit expected</mat-checkbox\n            >\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","import { Point } from '@yuion/svg-viewer';\nimport { HashMap } from '@user-interfaces/common';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n\n    constructor(_data: HashMap) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width,\n                y: _data.y / _data.map_height,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen =\n            _data.last_seen || Math.floor(new Date().valueOf() / 1000);\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { NewUserModalComponent } from './new-user-modal/new-user-modal.component';\nimport { UserFormComponent } from './user-form/user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n"],"sourceRoot":"webpack:///"}