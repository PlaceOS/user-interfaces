{"version":3,"file":"apps_workplace_src_app_events_group-events_module_ts.js","mappings":"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","names":["GroupEventsStateService","constructor","_org","_settings","this","_options","BehaviorSubject","date","Date","now","_filters","categories","tags","_tag_list","filters","asObservable","events","combineLatest","active_building","pipe","filter","building","switchMap","options","queryBookings","period_start","getUnixTime","startOfDay","Math","max","period_end","endOfDay","end","type","zones","get","parent_id","id","map","list","_","permission","sort","a","b","tap","old_tags","getValue","event","flat","next","unique","shareReplay","filtered_events","tag_list","toLowerCase","event_tags","every","tag","includes","date_end","setOptions","value","setFilters","static","t","i0","i1","i2","core","Yz7","factory","Éµfac","providedIn","range_r2","display","tag_r4","_r6","$implicit","ctx_r5","toggleTag","tmp_0_0","ctx_r3","GroupEventsSidebarComponent_div_19_button_3_Template","ctx_r1","GroupEventsSidebarComponent","AsyncHandler","_state","super","period","period_list","ngOnInit","subscription","subscribe","_generatePeriods","length","setPeriod","selected_range","_this","_asyncToGenerator","take","toPromise","setPeriodFromDate","start","find","periods","period_type","end_date","addDays","valueOf","week_offset","startOfMonth","startOfWeek","weekStartsOn","push","format","addMonths","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","GroupEventsSidebarComponent_mat_option_11_Template","GroupEventsSidebarComponent_div_19_Template","tmp_5_0","tag_r1","_r3","ctx_r2","removeTag","GroupEventsFiltersListComponent","this_period","abs","differenceInDays","GroupEventsFiltersListComponent_div_13_Template","tmp_1_0","tmp_2_0","_c0","ctx_r0","featured","GroupEventsComponent_ng_container_7_group_event_card_2_Template","events_without_featured","GroupEventsComponent","event_list","extension_data","attrs","GroupEventsComponent_group_event_card_5_Template","GroupEventsComponent_ng_container_7_Template","GroupEventsComponent_ng_template_9_Template","ROUTES","path","component","GroupEventsModule","oAB","cJS","CommonModule","FormsModule","SharedComponentModule","SharedBookingsModule","FormFieldsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/events/group-events-state.service.ts","./apps/workplace/src/app/events/group-events-sidebar.component.ts","./apps/workplace/src/app/events/group-events-filters-list.component.ts","./apps/workplace/src/app/events/group-events.component.ts","./apps/workplace/src/app/events/group-events.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { queryBookings } from '@placeos/bookings';\nimport { SettingsService, unique } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\nexport interface GroupEventOptions {\n    date: number;\n    end?: number;\n}\n\nexport interface GroupEventFilters {\n    categories: string[];\n    tags: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GroupEventsStateService {\n    private _options = new BehaviorSubject<GroupEventOptions>({\n        date: Date.now(),\n    });\n    private _filters = new BehaviorSubject<GroupEventFilters>({\n        categories: [],\n        tags: [],\n    });\n    private _tag_list = new BehaviorSubject<string[]>([]);\n\n    public readonly filters = this._filters.asObservable();\n    public readonly tags = this._tag_list.asObservable();\n\n    public readonly events = combineLatest([\n        this._org.active_building,\n        this._options,\n    ]).pipe(\n        filter(([building]) => !!building),\n        switchMap(([building, options]) =>\n            queryBookings({\n                period_start: getUnixTime(\n                    startOfDay(Math.max(Date.now(), options.date))\n                ),\n                period_end: getUnixTime(endOfDay(options.end || options.date)),\n                type: 'group-event',\n                zones: this._settings.get('app.use_region')\n                    ? building.parent_id\n                    : building.id,\n            })\n        ),\n        map((list) =>\n            list\n                .filter((_) => _.permission !== 'PRIVATE')\n                .sort((a, b) => a.date - b.date)\n        ),\n        tap((list) => {\n            const old_tags = this._tag_list.getValue();\n            const tags = list.map((event) => event.tags).flat();\n            this._tag_list.next(unique([...old_tags, ...tags]));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_events = combineLatest([\n        this.events,\n        this._filters,\n    ]).pipe(\n        map(([list, { tags }]) => {\n            const tag_list = tags.map((_) => _.toLowerCase());\n            return list.filter((event) => {\n                const event_tags = event.tags.map((_) => _.toLowerCase());\n                return (\n                    tag_list.every((tag) => event_tags.includes(tag)) &&\n                    event.date_end > Date.now()\n                );\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n\n    public setOptions(options: Partial<GroupEventOptions>) {\n        this._options.next({ ...this._options.value, ...options });\n    }\n\n    public setFilters(filters: Partial<GroupEventFilters>) {\n        this._filters.next({ ...this._filters.value, ...filters });\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport {\n    addDays,\n    addMonths,\n    endOfDay,\n    format,\n    startOfMonth,\n    startOfWeek,\n} from 'date-fns';\nimport { BehaviorSubject } from 'rxjs';\nimport { GroupEventsStateService } from './group-events-state.service';\nimport { take } from 'rxjs/operators';\n\n@Component({\n    selector: `group-events-sidebar`,\n    template: `\n        <div class=\"flex flex-col bg-base-100 w-[18rem] h-full\">\n            <div class=\"flex items-center space-x-2 p-2\">\n                <button\n                    btn\n                    matRipple\n                    class=\"flex-1 rounded-3xl\"\n                    [class.inverse]=\"(period | async) !== 'week'\"\n                    (click)=\"period.next('week')\"\n                >\n                    Week\n                </button>\n                <button\n                    btn\n                    matRipple\n                    class=\"flex-1 rounded-3xl\"\n                    [class.inverse]=\"(period | async) !== 'month'\"\n                    (click)=\"period.next('month')\"\n                >\n                    Month\n                </button>\n            </div>\n            <div class=\"flex flex-col items-center space-y-2 pb-2 px-2\">\n                <mat-form-field\n                    appearance=\"outline\"\n                    class=\"w-full no-subscript\"\n                >\n                    <mat-select\n                        [(ngModel)]=\"selected_range\"\n                        (ngModelChange)=\"setPeriod($event)\"\n                        placeholder=\"Select Period\"\n                    >\n                        <mat-option\n                            [value]=\"range.id\"\n                            *ngFor=\"let range of period_list\"\n                        >\n                            {{ range.display }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <hr class=\"border-base-200 w-[calc(100%-1rem)] mx-auto\" />\n            <date-calendar\n                [ngModel]=\"(options | async).date\"\n                (ngModelChange)=\"setPeriodFromDate($event)\"\n            ></date-calendar>\n            <hr class=\"border-base-200 w-[calc(100%-1rem)] mx-auto\" />\n            <div class=\"flex flex-col flex-1 overflow-auto\">\n                <h2 class=\"text-lg font-medium p-4\">Filters</h2>\n                <div\n                    class=\"flex flex-col space-y-2 px-4\"\n                    *ngIf=\"(tags | async)?.length\"\n                >\n                    <h3>Tags</h3>\n                    <button\n                        matRipple\n                        class=\"flex items-center rounded w-full text-left\"\n                        *ngFor=\"let tag of tags | async\"\n                        (click)=\"toggleTag(tag)\"\n                    >\n                        <mat-checkbox\n                            [ngModel]=\"(filters | async)?.tags?.includes(tag)\"\n                        >\n                            {{ tag }}\n                        </mat-checkbox>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class GroupEventsSidebarComponent extends AsyncHandler {\n    public period = new BehaviorSubject<'week' | 'month'>('week');\n    public period_list = [];\n    public selected_range: number;\n    public readonly options = this._state.options;\n    public readonly filters = this._state.filters;\n    public readonly tags = this._state.tags;\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: GroupEventsStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'period',\n            this.period.subscribe(() => {\n                this._generatePeriods();\n                if (this.period_list.length) {\n                    this.setPeriod(this.period_list[0].id);\n                    this.selected_range = this.period_list[0].id;\n                }\n            })\n        );\n        this._generatePeriods();\n        if (this.period_list.length) {\n            this.setPeriod(this.period_list[0].id);\n            this.selected_range = this.period_list[0].id;\n        }\n    }\n\n    public async toggleTag(tag: string) {\n        const tags = (await this.filters.pipe(take(1)).toPromise())?.tags || [];\n        if (tags.includes(tag)) {\n            this._state.setFilters({ tags: tags.filter((_) => _ !== tag) });\n        } else {\n            this._state.setFilters({ tags: [...tags, tag] });\n        }\n    }\n\n    public setPeriodFromDate(date: number) {\n        for (const period of this.period_list) {\n            if (date >= period.start && date <= period.end) {\n                this.selected_range = period.id;\n                this.setPeriod(period.id);\n                return;\n            }\n        }\n    }\n\n    public setPeriod(id: string) {\n        const { start, end } = this.period_list.find((_) => _.id === id);\n        this._state.setOptions({ date: start, end });\n    }\n\n    private _generatePeriods() {\n        const periods = [];\n        const period_type = this.period.value;\n        let date = Date.now();\n        const end_date = addDays(date, 12 * 30).valueOf();\n        const week_offset = this._settings.get('app.week_start') || 0;\n        if (period_type === 'month') {\n            date = startOfMonth(date).valueOf();\n        } else if (period_type === 'week') {\n            date = startOfWeek(date, { weekStartsOn: week_offset }).valueOf();\n        }\n        while (date < end_date) {\n            if (period_type === 'week') {\n                const end = endOfDay(addDays(date, 6)).valueOf();\n                periods.push({\n                    id: date,\n                    start: date,\n                    end,\n                    display: `${format(\n                        Math.max(Date.now(), date),\n                        'EEE, do MMM'\n                    )} â ${format(end, 'do MMM')}`,\n                });\n                date = addDays(date, 7).valueOf();\n            } else if (period_type === 'month') {\n                const end = endOfDay(addDays(addMonths(date, 1), -1)).valueOf();\n                periods.push({\n                    id: date,\n                    start: date,\n                    end,\n                    display: `${format(date, 'MMMM yyyy')}`,\n                });\n                date = addMonths(date, 1).valueOf();\n            } else break;\n        }\n        this.period_list = periods;\n    }\n}\n","import { Component } from '@angular/core';\nimport { GroupEventsStateService } from './group-events-state.service';\nimport { differenceInDays, endOfDay, startOfDay } from 'date-fns';\nimport { map, take, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'group-events-filters-list',\n    template: `\n        <div\n            class=\"my-2 w-[63rem] max-w-full mx-auto border border-base-300 p-4 bg-base-100 rounded\"\n        >\n            <div class=\"flex items-center justify-between space-x-2 mb-4\">\n                <div>\n                    {{ (this_period | async) ? 'This' : 'Upcoming' }}\n                    {{ (period | async) === 'week' ? 'Week' : 'Month' }}\n                </div>\n            </div>\n            <div class=\"flex flex-wrap\">\n                <div\n                    class=\"flex items-center px-4 py-3 rounded-3xl border border-base-400 m-1 text-sm\"\n                >\n                    {{ (options | async)?.date | date: 'MMM d, y' }}\n                    &ndash;\n                    {{ (options | async)?.end | date: 'MMM d, y' }}\n                </div>\n                <div\n                    class=\"flex items-center pl-4 pr-1 rounded-3xl border border-base-400 m-1\"\n                    *ngFor=\"let tag of (filters | async)?.tags || []\"\n                >\n                    <div class=\"mr-2 flex-1 text-sm\">{{ tag }}</div>\n                    <button icon matRipple (click)=\"removeTag(tag)\">\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class GroupEventsFiltersListComponent {\n    public readonly options = this._state.options;\n    public readonly filters = this._state.filters;\n    public readonly this_period = this._state.options.pipe(\n        map(({ date, end }) => {\n            return (\n                Date.now() >= startOfDay(date).valueOf() &&\n                Date.now() < endOfDay(end || date).valueOf()\n            );\n        })\n    );\n    public readonly period = this._state.options.pipe(\n        map(({ date, end }) =>\n            Math.abs(differenceInDays(date, end || Date.now())) > 7\n                ? 'month'\n                : 'week'\n        )\n    );\n\n    constructor(private _state: GroupEventsStateService) {}\n\n    public async removeTag(tag: string) {\n        const tags = (await this.filters.pipe(take(1)).toPromise())?.tags || [];\n        this._state.setFilters({ tags: tags.filter((_) => _ !== tag) });\n    }\n}\n","import { Component } from '@angular/core';\nimport { GroupEventsStateService } from './group-events-state.service';\nimport { combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { addDays, endOfDay, startOfDay } from 'date-fns';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[group-events]',\n    template: `\n        <topbar></topbar>\n        <main class=\"flex flex-1 h-1/2 bg-base-200\">\n            <group-events-sidebar></group-events-sidebar>\n            <div class=\"w-1/2 flex-1 h-full overflow-auto p-4\">\n                <group-events-filters-list></group-events-filters-list>\n                <group-event-card\n                    *ngIf=\"featured | async\"\n                    [event]=\"featured | async\"\n                    [featured]=\"true\"\n                    class=\"my-2 mx-auto w-[64rem] max-w-full\"\n                ></group-event-card>\n                <ng-container\n                    *ngIf=\"(event_list | async)?.length; else no_events\"\n                >\n                    <div\n                        class=\"flex flex-wrap mt-2 w-[64rem] max-w-full mx-auto\"\n                    >\n                        <group-event-card\n                            *ngFor=\"\n                                let event of events_without_featured | async\n                            \"\n                            [event]=\"event\"\n                            class=\"m-2\"\n                        ></group-event-card>\n                    </div>\n                </ng-container>\n                <ng-template #no_events>\n                    <div\n                        class=\"flex flex-col items-center justify-center w-full h-full space-y-2\"\n                    >\n                        <img src=\"assets/icons/no-results.svg\" class=\"w-32\" />\n                        <div class=\"font-medium\">\n                            No events for the selected time period\n                        </div>\n                        <div class=\"opacity-30\">\n                            Expand you search or try again\n                        </div>\n                    </div>\n                </ng-template>\n            </div>\n        </main>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n\n            .top {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class GroupEventsComponent extends AsyncHandler {\n    public readonly event_list = this._state.filtered_events;\n    public readonly featured = this.event_list.pipe(\n        map((_) => _.find((_: any) => _.extension_data?.featured || _.featured))\n    );\n    public readonly events_without_featured = combineLatest([\n        this.event_list,\n        this.featured,\n    ]).pipe(\n        map(([list, featured]) =>\n            list.filter((_: any) => _.id !== featured?.id)\n        )\n    );\n\n    constructor(private _state: GroupEventsStateService) {\n        super();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { GroupEventsComponent } from './group-events.component';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { GroupEventsSidebarComponent } from './group-events-sidebar.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { GroupEventsFiltersListComponent } from './group-events-filters-list.component';\n\nconst ROUTES: Route[] = [{ path: '', component: GroupEventsComponent }];\n\n@NgModule({\n    declarations: [\n        GroupEventsComponent,\n        GroupEventsSidebarComponent,\n        GroupEventsFiltersListComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        SharedComponentModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class GroupEventsModule {}\n"],"x_google_ignoreList":[]}