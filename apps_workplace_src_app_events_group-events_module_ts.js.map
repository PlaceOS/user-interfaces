{"version":3,"file":"apps_workplace_src_app_events_group-events_module_ts.js","mappings":"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","names":["GroupEventsStateService","calendar","this","_settings","get","constructor","_org","_options","BehaviorSubject","date","Date","now","_filters","categories","tags","_tag_list","filters","asObservable","events","combineLatest","active_building","pipe","filter","building","switchMap","options","queryEvents","period_start","getUnixTime","startOfDay","period_end","endOfDay","end","calendars","map","list","_","extension_data","view_access","shared_event","sort","a","b","tap","old_tags","getValue","event","flat","next","unique","shareReplay","filtered_events","tag_list","toLowerCase","event_tags","every","tag","includes","date_end","setOptions","value","setFilters","static","__ngFactoryType__","i0","i1","i2","core","jDH","factory","Éµfac","providedIn","range_r1","id","display","tag_r3","_r2","$implicit","ctx_r3","toggleTag","tmp_3_0","GroupEventsSidebarComponent_div_19_button_3_Template","GroupEventsSidebarComponent","AsyncHandler","_state","super","period","period_list","ngOnInit","subscription","subscribe","_generatePeriods","length","setPeriod","selected_range","_this","_asyncToGenerator","take","toPromise","setPeriodFromDate","start","find","periods","period_type","end_date","addDays","valueOf","week_offset","startOfMonth","startOfWeek","weekStartsOn","push","format","Math","max","addMonths","VBU","selectors","features","decls","vars","consts","template","rf","ctx","$event","GroupEventsSidebarComponent_mat_option_11_Template","GroupEventsSidebarComponent_div_19_Template","tmp_5_0","tag_r2","_r1","ctx_r2","removeTag","GroupEventsFiltersListComponent","this_period","abs","differenceInDays","GroupEventsFiltersListComponent_div_13_Template","tmp_1_0","tmp_2_0","_c0","ctx_r0","featured","GroupEventsComponent_ng_container_7_group_event_card_2_Template","events_without_featured","GroupEventsComponent","event_list","attrs","GroupEventsComponent_group_event_card_5_Template","GroupEventsComponent_ng_container_7_Template","GroupEventsComponent_ng_template_9_Template","no_events_r3","ROUTES","path","component","GroupEventsModule","$C","G2t","CommonModule","FormsModule","SharedComponentModule","SharedBookingsModule","FormFieldsModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/events/group-events-state.service.ts","./apps/workplace/src/app/events/group-events-sidebar.component.ts","./apps/workplace/src/app/events/group-events-filters-list.component.ts","./apps/workplace/src/app/events/group-events.component.ts","./apps/workplace/src/app/events/group-events.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { SettingsService, unique } from '@placeos/common';\nimport { queryEvents } from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, tap } from 'rxjs/operators';\n\nexport interface GroupEventOptions {\n    date: number;\n    end?: number;\n}\n\nexport interface GroupEventFilters {\n    categories: string[];\n    tags: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GroupEventsStateService {\n    private _options = new BehaviorSubject<GroupEventOptions>({\n        date: Date.now(),\n    });\n    private _filters = new BehaviorSubject<GroupEventFilters>({\n        categories: [],\n        tags: [],\n    });\n    private _tag_list = new BehaviorSubject<string[]>([]);\n\n    public get calendar() {\n        return this._settings.get('app.group_events_calendar');\n    }\n\n    public readonly filters = this._filters.asObservable();\n    public readonly tags = this._tag_list.asObservable();\n\n    public readonly events = combineLatest([\n        this._org.active_building,\n        this._options,\n    ]).pipe(\n        filter(([building]) => !!building),\n        switchMap(([building, options]) =>\n            queryEvents({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(\n                    endOfDay(options.end || options.date || Date.now())\n                ),\n                calendars: this.calendar,\n            })\n        ),\n        map((list) =>\n            list\n                .filter(\n                    (_) =>\n                        _.extension_data.view_access !== 'PRIVATE' &&\n                        _.extension_data.shared_event\n                )\n                .sort((a, b) => a.date - b.date)\n        ),\n        tap((list) => {\n            const old_tags = this._tag_list.getValue();\n            const tags = list\n                .map((event) => event.extension_data.tags || [])\n                .flat();\n            this._tag_list.next(unique([...old_tags, ...tags]));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly filtered_events = combineLatest([\n        this.events,\n        this._filters,\n    ]).pipe(\n        map(([list, { tags }]) => {\n            const tag_list = tags.map((_) => _.toLowerCase());\n            return list.filter((event) => {\n                const event_tags = (event.extension_data.tags || []).map((_) =>\n                    _.toLowerCase()\n                );\n                return (\n                    tag_list.every((tag) => event_tags.includes(tag)) &&\n                    event.date_end > Date.now()\n                );\n            });\n        }),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n\n    public setOptions(options: Partial<GroupEventOptions>) {\n        this._options.next({ ...this._options.value, ...options });\n    }\n\n    public setFilters(filters: Partial<GroupEventFilters>) {\n        this._filters.next({ ...this._filters.value, ...filters });\n    }\n}\n","import { Component } from '@angular/core';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport {\n    addDays,\n    addMonths,\n    endOfDay,\n    format,\n    startOfMonth,\n    startOfWeek,\n} from 'date-fns';\nimport { BehaviorSubject } from 'rxjs';\nimport { GroupEventsStateService } from './group-events-state.service';\nimport { take } from 'rxjs/operators';\n\n@Component({\n    selector: `group-events-sidebar`,\n    template: `\n        <div class=\"flex flex-col bg-base-100 w-[18rem] h-full\">\n            <div class=\"flex items-center space-x-2 p-2\">\n                <button\n                    btn\n                    matRipple\n                    class=\"flex-1 rounded-3xl\"\n                    [class.inverse]=\"(period | async) !== 'week'\"\n                    (click)=\"period.next('week')\"\n                >\n                    Week\n                </button>\n                <button\n                    btn\n                    matRipple\n                    class=\"flex-1 rounded-3xl\"\n                    [class.inverse]=\"(period | async) !== 'month'\"\n                    (click)=\"period.next('month')\"\n                >\n                    Month\n                </button>\n            </div>\n            <div class=\"flex flex-col items-center space-y-2 pb-2 px-2\">\n                <mat-form-field\n                    appearance=\"outline\"\n                    class=\"w-full no-subscript\"\n                >\n                    <mat-select\n                        [(ngModel)]=\"selected_range\"\n                        (ngModelChange)=\"setPeriod($event)\"\n                        placeholder=\"Select Period\"\n                    >\n                        <mat-option\n                            [value]=\"range.id\"\n                            *ngFor=\"let range of period_list\"\n                        >\n                            {{ range.display }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <hr class=\"border-base-200 w-[calc(100%-1rem)] mx-auto\" />\n            <date-calendar\n                [ngModel]=\"(options | async).date\"\n                (ngModelChange)=\"setPeriodFromDate($event)\"\n            ></date-calendar>\n            <hr class=\"border-base-200 w-[calc(100%-1rem)] mx-auto\" />\n            <div class=\"flex flex-col flex-1 overflow-auto\">\n                <h2 class=\"text-lg font-medium p-4\">Filters</h2>\n                <div\n                    class=\"flex flex-col space-y-2 px-4\"\n                    *ngIf=\"(tags | async)?.length\"\n                >\n                    <h3>Tags</h3>\n                    <button\n                        matRipple\n                        class=\"flex items-center rounded w-full text-left\"\n                        *ngFor=\"let tag of tags | async\"\n                        (click)=\"toggleTag(tag)\"\n                    >\n                        <mat-checkbox\n                            [ngModel]=\"(filters | async)?.tags?.includes(tag)\"\n                        >\n                            {{ tag }}\n                        </mat-checkbox>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class GroupEventsSidebarComponent extends AsyncHandler {\n    public period = new BehaviorSubject<'week' | 'month'>('week');\n    public period_list = [];\n    public selected_range: number;\n    public readonly options = this._state.options;\n    public readonly filters = this._state.filters;\n    public readonly tags = this._state.tags;\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: GroupEventsStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'period',\n            this.period.subscribe(() => {\n                this._generatePeriods();\n                if (this.period_list.length) {\n                    this.setPeriod(this.period_list[0].id);\n                    this.selected_range = this.period_list[0].id;\n                }\n            })\n        );\n        this._generatePeriods();\n        if (this.period_list.length) {\n            this.setPeriod(this.period_list[0].id);\n            this.selected_range = this.period_list[0].id;\n        }\n    }\n\n    public async toggleTag(tag: string) {\n        const tags = (await this.filters.pipe(take(1)).toPromise())?.tags || [];\n        if (tags.includes(tag)) {\n            this._state.setFilters({ tags: tags.filter((_) => _ !== tag) });\n        } else {\n            this._state.setFilters({ tags: [...tags, tag] });\n        }\n    }\n\n    public setPeriodFromDate(date: number) {\n        for (const period of this.period_list) {\n            if (date >= period.start && date <= period.end) {\n                this.selected_range = period.id;\n                this.setPeriod(period.id);\n                return;\n            }\n        }\n    }\n\n    public setPeriod(id: string) {\n        const { start, end } = this.period_list.find((_) => _.id === id);\n        this._state.setOptions({ date: start, end });\n    }\n\n    private _generatePeriods() {\n        const periods = [];\n        const period_type = this.period.value;\n        let date = Date.now();\n        const end_date = addDays(date, 12 * 30).valueOf();\n        const week_offset = this._settings.get('app.week_start') || 0;\n        if (period_type === 'month') {\n            date = startOfMonth(date).valueOf();\n        } else if (period_type === 'week') {\n            date = startOfWeek(date, { weekStartsOn: week_offset }).valueOf();\n        }\n        while (date < end_date) {\n            if (period_type === 'week') {\n                const end = endOfDay(addDays(date, 6)).valueOf();\n                periods.push({\n                    id: date,\n                    start: date,\n                    end,\n                    display: `${format(\n                        Math.max(Date.now(), date),\n                        'EEE, do MMM'\n                    )} â ${format(end, 'do MMM')}`,\n                });\n                date = addDays(date, 7).valueOf();\n            } else if (period_type === 'month') {\n                const end = endOfDay(addDays(addMonths(date, 1), -1)).valueOf();\n                periods.push({\n                    id: date,\n                    start: date,\n                    end,\n                    display: `${format(date, 'MMMM yyyy')}`,\n                });\n                date = addMonths(date, 1).valueOf();\n            } else break;\n        }\n        this.period_list = periods;\n    }\n}\n","import { Component } from '@angular/core';\nimport { GroupEventsStateService } from './group-events-state.service';\nimport { differenceInDays, endOfDay, startOfDay } from 'date-fns';\nimport { map, take, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'group-events-filters-list',\n    template: `\n        <div\n            class=\"my-2 w-[63rem] max-w-full mx-auto border border-base-300 p-4 bg-base-100 rounded\"\n        >\n            <div class=\"flex items-center justify-between space-x-2 mb-4\">\n                <div>\n                    {{ (this_period | async) ? 'This' : 'Upcoming' }}\n                    {{ (period | async) === 'week' ? 'Week' : 'Month' }}\n                </div>\n            </div>\n            <div class=\"flex flex-wrap\">\n                <div\n                    class=\"flex items-center px-4 py-3 rounded-3xl border border-base-400 m-1 text-sm\"\n                >\n                    {{ (options | async)?.date | date: 'MMM d, y' }}\n                    &ndash;\n                    {{ (options | async)?.end | date: 'MMM d, y' }}\n                </div>\n                <div\n                    class=\"flex items-center pl-4 pr-1 rounded-3xl border border-base-400 m-1\"\n                    *ngFor=\"let tag of (filters | async)?.tags || []\"\n                >\n                    <div class=\"mr-2 flex-1 text-sm\">{{ tag }}</div>\n                    <button icon matRipple (click)=\"removeTag(tag)\">\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class GroupEventsFiltersListComponent {\n    public readonly options = this._state.options;\n    public readonly filters = this._state.filters;\n    public readonly this_period = this._state.options.pipe(\n        map(({ date, end }) => {\n            return (\n                Date.now() >= startOfDay(date).valueOf() &&\n                Date.now() < endOfDay(end || date).valueOf()\n            );\n        })\n    );\n    public readonly period = this._state.options.pipe(\n        map(({ date, end }) =>\n            Math.abs(differenceInDays(date, end || Date.now())) > 7\n                ? 'month'\n                : 'week'\n        )\n    );\n\n    constructor(private _state: GroupEventsStateService) {}\n\n    public async removeTag(tag: string) {\n        const tags = (await this.filters.pipe(take(1)).toPromise())?.tags || [];\n        this._state.setFilters({ tags: tags.filter((_) => _ !== tag) });\n    }\n}\n","import { Component } from '@angular/core';\nimport { GroupEventsStateService } from './group-events-state.service';\nimport { combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { addDays, endOfDay, startOfDay } from 'date-fns';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\n\n@Component({\n    selector: '[group-events]',\n    template: `\n        <topbar></topbar>\n        <main class=\"flex flex-1 h-1/2 bg-base-200\">\n            <group-events-sidebar></group-events-sidebar>\n            <div class=\"w-1/2 flex-1 h-full overflow-auto p-4\">\n                <group-events-filters-list></group-events-filters-list>\n                <group-event-card\n                    *ngIf=\"featured | async\"\n                    [event]=\"featured | async\"\n                    [featured]=\"true\"\n                    class=\"my-2 mx-auto w-[64rem] max-w-full\"\n                ></group-event-card>\n                <ng-container\n                    *ngIf=\"(event_list | async)?.length; else no_events\"\n                >\n                    <div\n                        class=\"flex flex-wrap mt-2 w-[64rem] max-w-full mx-auto\"\n                    >\n                        <group-event-card\n                            *ngFor=\"\n                                let event of events_without_featured | async\n                            \"\n                            [event]=\"event\"\n                            class=\"m-2\"\n                        ></group-event-card>\n                    </div>\n                </ng-container>\n                <ng-template #no_events>\n                    <div\n                        class=\"flex flex-col items-center justify-center w-full h-full space-y-2\"\n                    >\n                        <img src=\"assets/icons/no-results.svg\" class=\"w-32\" />\n                        <div class=\"font-medium\">\n                            No events for the selected time period\n                        </div>\n                        <div class=\"opacity-30\">\n                            Expand you search or try again\n                        </div>\n                    </div>\n                </ng-template>\n            </div>\n        </main>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n\n            .top {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class GroupEventsComponent extends AsyncHandler {\n    public readonly event_list = this._state.filtered_events;\n    public readonly featured = this.event_list.pipe(\n        map((_) => _.find((_: any) => _.extension_data?.featured || _.featured))\n    );\n    public readonly events_without_featured = combineLatest([\n        this.event_list,\n        this.featured,\n    ]).pipe(\n        map(([list, featured]) =>\n            list.filter((_: any) => _.id !== featured?.id)\n        )\n    );\n\n    constructor(private _state: GroupEventsStateService) {\n        super();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nimport { GroupEventsComponent } from './group-events.component';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { GroupEventsSidebarComponent } from './group-events-sidebar.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { GroupEventsFiltersListComponent } from './group-events-filters-list.component';\n\nconst ROUTES: Route[] = [{ path: '', component: GroupEventsComponent }];\n\n@NgModule({\n    declarations: [\n        GroupEventsComponent,\n        GroupEventsSidebarComponent,\n        GroupEventsFiltersListComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        SharedComponentModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class GroupEventsModule {}\n"],"x_google_ignoreList":[]}