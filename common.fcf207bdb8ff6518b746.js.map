{"version":3,"sources":["/home/runner/work/user-interfaces/user-interfaces/libs/bookings/src/lib/booking.class.ts","/home/runner/work/user-interfaces/user-interfaces/libs/bookings/src/lib/bookings.fn.ts"],"names":["data","super","this","asset_id","zones","booking_type","type","time","booking_start","date","start","valueOf","minute","Math","ceil","startOf","duration","booking_end","diff","timezone","user_email","user_id","user_name","title","description","checked_in","rejected","approved","approver_id","approver_email","approver_name","extension_data","access","all_day","status","toJSON","unix","endOf","add","Intl","DateTimeFormat","resolvedOptions","timeZone","id","email","name","isSame","end","isAfter","BOOKINGS_ENDPOINT","queryBookings","q","query","pipe","map","list","item","saveBooking","method","encodeURIComponent","updateBooking","createBooking","approveBooking","rejectBooking","checkinBooking","state"],"mappings":"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","file":"common.fcf207bdb8ff6518b746.js","sourcesContent":["\nimport { BaseDataClass, HashMap } from '@user-interfaces/common'\n\nimport * as dayjs from 'dayjs';\n\n/** General purpose booking class */\nexport class Booking extends BaseDataClass {\n    /** User Id */\n    public readonly user_id: string;\n    /** User email */\n    public readonly user_email: string;\n    /** User name */\n    public readonly user_name: string;\n    /** Desk asset id */\n    public readonly asset_id: string;\n    /** Zones */\n    public readonly zones: string[];\n    /** Type of booking */\n    public readonly booking_type: 'desk' | null;\n    /** Start time of booking in ms */\n    public readonly date: number;\n    /** Duration of the event in minutes */\n    public readonly duration: number;\n    /** Whether it is an all day booking */\n    public readonly all_day: boolean;\n    /** Timezone of the booking */\n    public readonly timezone: string;\n    /** Title of the booking */\n    public readonly title: string;\n    /** Description */\n    public readonly description: string;\n    /** Whether user checked in */\n    public readonly checked_in: boolean;\n    /** Whether booking is rejected */\n    public readonly rejected: boolean;\n    /** Whether booking is approved */\n    public readonly approved: boolean;\n    /** Id of the approver */\n    public readonly approver_id: string;\n    /** Email of the approver */\n    public readonly approver_email: string;\n    /** Name of the approver */\n    public readonly approver_name: string;\n    /** Metadata */\n    public readonly extension_data: HashMap<any>;\n    /** Default type */\n    public readonly type: string;\n    /** Default type */\n    public readonly access: boolean;\n    /** Status of the booking */\n    public readonly status: 'declined' | 'approved' | 'tentative';\n\n    constructor(data: Partial<Booking> = {}) {\n        super(data);\n        this.asset_id = data.asset_id;\n        this.zones = data.zones;\n        this.booking_type = data.booking_type;\n        this.type = data.type || 'booking';\n        const time = (data as any).booking_start * 1000 || data.date;\n        const start = time\n            ? dayjs(time).valueOf()\n            : dayjs()\n                  .minute(Math.ceil(dayjs().minute() / 5) * 5)\n                  .startOf('m')\n                  .valueOf();\n        this.date = start;\n        this.duration = data.duration || dayjs((data as any).booking_end * 1000).diff(start, 'm') || 60;\n        this.timezone = data.timezone;\n        this.user_email = data.user_email;\n        this.user_id = data.user_id;\n        this.user_name = data.user_name;\n        this.title = data.title || 'Desk booking';\n        this.description = data.description;\n        this.checked_in = data.checked_in;\n        this.rejected = !!data.rejected;\n        this.approved = !!data.approved;\n        this.approver_id = data.approver_id;\n        this.approver_email = data.approver_email;\n        this.approver_name = data.approver_name;\n        this.extension_data = data.extension_data;\n        this.access = !!data.extension_data?.access;\n        this.all_day = data.all_day || true;\n        this.status = this.rejected ? 'declined' : this.approved ? 'approved' : 'tentative';\n    }\n\n    public toJSON(this: Booking): HashMap<any> {\n        const data = super.toJSON();\n        data.booking_start = dayjs(this.date).unix();\n        if (this.all_day) {\n            data.booking_end = dayjs(this.date).endOf('d').unix();\n        } else {\n            data.booking_end = dayjs(this.date).add(this.duration, 'm').unix();\n        }\n        if (!data.timezone) {\n            data.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        }\n        if (!this.id) {\n            delete data.id;\n        }\n        delete data.date;\n        delete data.duration;\n        delete data.email;\n        delete data.name;\n        return data;\n    }\n\n    public get location(): string {\n        return this.description;\n    }\n\n    public get is_today(): boolean {\n        return dayjs(this.date).isSame(dayjs(), 'd');\n    }\n\n    /** Whether booking is done */\n    public get is_done(): boolean {\n        const start = dayjs(this.date);\n        const end = this.all_day ? dayjs(this.date).endOf('d') : start.add(this.duration, 'm');\n        return start.isAfter(end, 'm');\n    }\n}\n","import { del, get, patch, post, put } from \"@placeos/ts-client\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nimport { toQueryString } from \"libs/common/src/lib/api\";\nimport { Booking } from \"./booking.class\";\n\nexport interface BookingsQueryParams {\n    /** Comma seperated list of zone ids to check availability */\n    zones?: string;\n    /** Limit list to user. Set to `current` to return the current user's bookings */\n    user?: string;\n    /** Epoch in seconds for the start of the availability period */\n    period_start: number;\n    /** Epoch in seconds for the end of the availability period */\n    period_end: number;\n    /** Category of booking */\n    type: string;\n}\n\nconst BOOKINGS_ENDPOINT = `/api/staff/v1/bookings`;\n\n/**\n * List bookings\n * @param q Parameters to pass to the API request\n */\nexport function queryBookings(q: BookingsQueryParams): Observable<Booking[]> {\n    const query = toQueryString(q);\n    return get(`${BOOKINGS_ENDPOINT}${query ? '?' + query : ''}`).pipe(\n        map((list) => list.map((item) => new Booking(item)))\n    );\n}\n\n/**\n * Get booking details\n * @param id ID of the booking to grab\n * @param q Parameters to pass to the API request\n */\nexport function showBooking(id: string) {\n    return get(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Create new booking and add it to the database\n * @param data New booking fields\n */\nexport function createBooking(data: Partial<Booking>) {\n    return post(`${BOOKINGS_ENDPOINT}`, data).pipe(\n        map((item) => new Booking(item))\n    );\n}\n\n/**\n * Update an existing booking\n * @param id ID of the booking to update\n * @param data New values for booking fields\n * @param method HTTP verb to use with API request\n */\nexport function updateBooking(\n    id: string,\n    data: Partial<Booking>,\n    method: 'put' | 'patch' = 'patch'\n) {\n    return (method === 'patch' ? patch : put)(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`,\n        data\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Save changes to or create a booking\n * @param data State of the booking\n * @param q Parameters to pass to the API request\n */\nexport const saveBooking = (\n    data: Partial<Booking>,\n) => (data.id ? updateBooking(data.id, data) : createBooking(data));\n\n/**\n * Remove booking from the database\n * @param id ID of the booking to remove\n * @param q Parameters to pass to the API request\n */\nexport function removeBooking(id: string) {\n    return del(`${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}`, {\n        response_type: 'void',\n    });\n}\n\n/**\n * Set the approval state of the booking to approved\n * @param id ID of the booking to approve\n * @param system_id Associated system to approve\n */\nexport function approveBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/approve`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the approval state of the booking to rejected\n * @param id ID of the booking to reject\n * @param system_id Associated system to reject\n */\nexport function rejectBooking(id: string) {\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/reject`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n\n/**\n * Set the checkin state of a booking\n * @param id ID of the booking to grab\n * @param state New checkin state of the booking\n */\nexport function checkinBooking(id: string, state: boolean) {\n    const query = toQueryString({ state });\n    return post(\n        `${BOOKINGS_ENDPOINT}/${encodeURIComponent(id)}/check_in?${query}`,\n        ''\n    ).pipe(map((item) => new Booking(item)));\n}\n"],"sourceRoot":"webpack:///"}