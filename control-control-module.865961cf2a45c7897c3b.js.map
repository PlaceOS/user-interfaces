{"version":3,"sources":["./src/app/bookings/space-flow/space-flow.service.ts","./src/app/control/space-list/item/item.component.html","./src/app/control/space-list/item/item.component.ts","./src/app/control/space-list/space-list.component.html","./src/app/control/space-list/space-list.component.ts","./src/app/control/control.component.ts","./src/app/control/control.component.html","./src/app/control/control.module.ts"],"names":["clearEventFormState","sessionStorage","removeItem","localStorage","SpaceFlowService","_events","_calendar","_org","_staff","_dialog","super","_event","_form","_filters","_loading_spaces","_loading_event","event","this","asObservable","form","filters","loading_spaces","loading_event","spaces","pipe","next","getValue","value","period_start","Math","floor","Date","date","valueOf","period_end","duration","zones","length","building","id","availability","zone_ids","join","then","list","filter","space","capacity","clearState","setEvent","nearestTo","controls","subscription","storeState","name","setValue","ref","open","width","height","data","componentInstance","_","reason","subscribe","attendees","push","metadata","close","setItem","JSON","stringify","toJSON","event_data","getItem","parse","console","log","form_data","patchValue","filter_data","markAllAsTouched","organiser","host","current","email","title","valid","key","invalid","Promise","reject","values","save","ControlSpaceListItemComponent","_settings","get","level","bld","buildings","find","parent_id","ControlSpaceListComponent","_spaces","space_list","initialised","first","support_url","sort","a","b","bld_a","space_a_name","toLowerCase","level_a_name","bld_a_name","bld_b","space_b_name","level_b_name","bld_b_name","localeCompare","search","search_str","space_name","level_name","bld_name","indexOf","ControlComponent","ROUTES","path","component","ControlModule","forChild"],"mappings":"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","file":"control-control-module.865961cf2a45c7897c3b.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, switchMap } from 'rxjs/operators';\nimport { addMinutes, roundToNearestMinutes, isAfter, endOfDay } from 'date-fns';\n\nimport { BaseClass, notifyError, unique } from '@user-interfaces/common';\nimport {\n    CalendarEvent,\n    EventsService,\n    generateEventForm,\n} from '@user-interfaces/events';\nimport { CalendarService } from '@user-interfaces/calendar';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { NewUserModalComponent, StaffService } from '@user-interfaces/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface EventFormFilters {\n    capacity?: number;\n    zones?: string[];\n}\n\nexport function clearEventFormState(): void {\n    sessionStorage.removeItem('PLACEOS.event');\n    sessionStorage.removeItem('PLACEOS.event_form');\n    localStorage.removeItem('PLACEOS.event_filters');\n}\n\n@Injectable()\nexport class SpaceFlowService extends BaseClass {\n    /** Active event being worked on */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Form fields for the current flow */\n    private _form = new BehaviorSubject<FormGroup>(null);\n    /** Form fields for the current flow */\n    private _filters = new BehaviorSubject<EventFormFilters>({});\n    /** Whether space listing is being retrieved */\n    private _loading_spaces = new BehaviorSubject<boolean>(false);\n    /** Whether changes to event are being saved */\n    private _loading_event = new BehaviorSubject<boolean>(false);\n\n    public readonly event = this._event.asObservable();\n    public readonly form = this._form.asObservable();\n    public get event_form() {\n        return this._form.getValue();\n    }\n    public readonly filters = this._filters.asObservable();\n    public readonly loading_spaces = this._loading_spaces.asObservable();\n    public readonly loading_event = this._loading_event.asObservable();\n    public get event_filters() {\n        return this._filters.getValue();\n    }\n    public readonly spaces = this._filters.pipe(\n        switchMap((filters) => {\n            this._loading_spaces.next(true);\n            const form = this._form.getValue().value;\n            const period_start = Math.floor(\n                new Date(form.date).valueOf() / 1000\n            );\n            const period_end = Math.floor(\n                addMinutes(new Date(form.date), form.duration || 60).valueOf() /\n                    1000\n            );\n            const zones = filters?.zones?.length\n                ? filters.zones\n                : [this._org.building?.id];\n            return this._calendar\n                .availability({\n                    zone_ids: zones.join(','),\n                    period_start,\n                    period_end,\n                })\n                .then((list) => {\n                    this._loading_spaces.next(false);\n                    return list.filter(\n                        (space) =>\n                            !filters.capacity ||\n                            filters.capacity >= space.capacity\n                    );\n                });\n        })\n    );\n\n    public get is_future_date() {\n        const date = this._form.getValue()?.controls?.date.value || new Date().valueOf();\n        return isAfter(new Date(date), endOfDay(new Date()));\n    }\n\n    public readonly clearState = () => clearEventFormState();\n\n    constructor(\n        private _events: EventsService,\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _staff: StaffService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.setEvent(\n            new CalendarEvent({\n                date: roundToNearestMinutes(addMinutes(new Date(), 2), {\n                    nearestTo: 5,\n                }).valueOf(),\n            })\n        );\n    }\n\n    /** Set the event being worked on */\n    public setEvent(event: CalendarEvent): void {\n        this._event.next(event);\n        const form = generateEventForm(event);\n        this._form.next(form);\n        this.subscription('form_change', () => this.storeState());\n    }\n\n    /** Set the value of the form control */\n    public setValue<T = any>(name: string, value: T): void {\n        const form = this._form.getValue();\n        if (form && form.controls[name]) {\n            form.controls[name].setValue(value);\n        }\n    }\n\n    public newAttendee() {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {},\n            }\n        );\n        const form = this._form.getValue();\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                const attendees = form.controls.attendees.value || [];\n                attendees.push(event.metadata);\n                form.controls.attendees.setValue(unique(attendees, 'email'));\n                ref.close();\n            });\n    }\n\n    /** Reset the form fields for the active event */\n    public clearForm(): void {\n        this.setEvent(this._event.getValue());\n        this._filters.next({});\n    }\n\n    /** Update the current form filters */\n    public updateFilters(filters: EventFormFilters) {\n        this._filters.next(filters);\n    }\n\n    /** Store current event details and form values */\n    public storeState(): void {\n        const form = this._form.getValue();\n        sessionStorage.setItem(\n            'PLACEOS.event',\n            JSON.stringify(this._event.getValue().toJSON())\n        );\n        sessionStorage.setItem('PLACEOS.event_form', JSON.stringify(form.value));\n        localStorage.setItem(\n            'PLACEOS.event_filters',\n            JSON.stringify(this._filters.getValue())\n        );\n    }\n\n    /** Load old event details and form values */\n    public loadState(): void {\n        const event_data = sessionStorage.getItem('PLACEOS.event') || '{}';\n        if (event_data) {\n            this._event.next(new CalendarEvent(JSON.parse(event_data)));\n        }\n        console.log('Event:', this._event.getValue());\n        const form_data = sessionStorage.getItem('PLACEOS.event_form');\n        if (form_data) {\n            const form = generateEventForm(this._event.getValue());\n            form.patchValue(JSON.parse(form_data));\n            this._form.next(form);\n        }\n        const filter_data = localStorage.getItem('PLACEOS.event_filters');\n        if (filter_data) {\n            this._filters.next(JSON.parse(filter_data));\n        }\n    }\n\n    /** Save changes to event to the server */\n    public save(): Promise<void> {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.controls.organiser.value || !form.controls.host.value)\n            form.patchValue({\n                organiser: this._staff.current,\n                host: this._staff.current.email,\n            });\n        if (!form.controls.title.value) {\n            form.patchValue({\n                title: this._staff.current.email\n            });\n        }\n        if (!form.valid) {\n            const list = [];\n            for (const key in form.controls) {\n                if (form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return Promise.reject(\n                notifyError(\n                    `Some form fields are not valid: [${list.join(', ')}]`\n                )\n            );\n        }\n        this._loading_event.next(true);\n        const values = new CalendarEvent({\n            ...this._event.getValue().toJSON(),\n            ...this._form.getValue().value,\n        });\n        return this._events.save(values).then(\n            () => this._loading_event.next(false),\n            () => this._loading_event.next(false)\n        );\n    }\n}\n","<div class=\"space-details\" *ngIf=\"space\" [class.with-image]=\"show_image\">\n    <div class=\"details\">\n        <div\n            class=\"image\"\n            *ngIf=\"show_image && space.image\"\n            [style.background-image]=\"'url(' + space.image + ')'\"\n        ></div>\n        <div class=\"overlay\"></div>\n        <div class=\"name\">{{ space.name }}</div>\n        <div class=\"info\">\n            <div class=\"location\">{{ location }}</div>\n            <div class=\"capacity\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'account_circle' }\"\n                ></app-icon>\n                {{ space.capacity || '0' }}\n            </div>\n        </div>\n    </div>\n    <div class=\"actions\">\n        <a\n            mat-button\n            color=\"primary\"\n            button\n            [routerLink]=\"['/explore']\"\n            [queryParams]=\"{ space: space.id }\"\n        >\n            Find\n        </a>\n        <a mat-button color=\"primary\" button [href]=\"space.support_url | safe: 'url'\">\n            Control\n        </a>\n    </div>\n</div>\n","import { Component, Input } from '@angular/core';\n\nimport { SettingsService } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { Space } from '@user-interfaces/spaces';\n\n\n@Component({\n    selector: 'a-control-space-list-item',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss']\n})\nexport class ControlSpaceListItemComponent {\n    /** Space to display */\n    @Input() public space: Space;\n\n    public get show_image() {\n        return this._settings.get('app.space_display.show_images');\n    }\n\n    /** Display location of the space */\n    public get location(): string {\n        if (!this.space) {\n            return 'Unable to determine location';\n        }\n        const level = this.space.level;\n        const bld = this._org.buildings.find(building => building.id === level.parent_id);\n        return `${bld ? bld.name + ', ' : ''}${level.name}`;\n    }\n\n    constructor(private _settings: SettingsService, private _org: OrganisationService) { }\n}\n","<div class=\"control-list\">\n    <div class=\"filter\">\n        <a-searchbar [(value)]=\"search_str\" [loading]=\"loading\" [autofocus]=\"true\"></a-searchbar>\n    </div>\n    <div class=\"list\" *ngIf=\"filtered_list.length; else empty_state\">\n        <div class=\"item\" *ngFor=\"let space of filtered_list\">\n            <a-control-space-list-item [space]=\"space\"></a-control-space-list-item>\n        </div>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"list\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"\n                ></app-icon>\n            </div>\n            <div class=\"text\">\n                {{ search_str ? ' No matches for \"' + search_str + '\"' : 'No controllable spaces' }}\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { Space, SpacesService } from '@user-interfaces/spaces';\n\n@Component({\n    selector: 'a-control-space-list',\n    templateUrl: './space-list.component.html',\n    styleUrls: ['./space-list.component.scss']\n})\nexport class ControlSpaceListComponent extends BaseClass implements OnInit {\n    /** List of controllable spaces */\n    public space_list: Space[] = [];\n    /** Filter string */\n    public search_str: string;\n    /** Whether space list is being filtered */\n    public loading: boolean;\n\n    constructor(private _spaces: SpacesService, private _org: OrganisationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._spaces.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.space_list = this._spaces.filter(space => !!space.support_url);\n            this.space_list.sort((a, b) => {\n                const bld_a = this._org.buildings.find(\n                    building => building.id === a.level.parent_id\n                );\n                const space_a_name = (a.name || '').toLowerCase();\n                const level_a_name = ((a.level ? a.level.name : '') || '').toLowerCase();\n                const bld_a_name = ((bld_a ? bld_a.name : '') || '').toLowerCase();\n                const bld_b = this._org.buildings.find(\n                    building => building.id === b.level.parent_id\n                );\n                const space_b_name = (b.name || '').toLowerCase();\n                const level_b_name = ((b.level ? b.level.name : '') || '').toLowerCase();\n                const bld_b_name = ((bld_b ? bld_b.name : '') || '').toLowerCase();\n                return (\n                    bld_a_name.localeCompare(bld_b_name) ||\n                    level_a_name.localeCompare(level_b_name) ||\n                    space_a_name.localeCompare(space_b_name)\n                );\n            });\n        });\n    }\n\n    /** List of spaces filtered using the search string */\n    public get filtered_list(): Space[] {\n        const search = (this.search_str || '').toLowerCase();\n        return (this.space_list || []).filter(space => {\n            const bld = this._org.buildings.find(\n                building => building.id === space.level.parent_id\n            );\n            const space_name = (space.name || '').toLowerCase();\n            const level_name = ((space.level ? space.level.name : '') || '').toLowerCase();\n            const bld_name = ((bld ? bld.name : '') || '').toLowerCase();\n            return (\n                space_name.indexOf(search) >= 0 ||\n                (level_name && level_name.indexOf(search) >= 0) ||\n                (bld_name && bld_name.indexOf(search) >= 0)\n            );\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BaseClass, SettingsService } from '@user-interfaces/common';\nimport { clearEventFormState } from '../bookings/space-flow/space-flow.service';\n\n@Component({\n    selector: 'app-control',\n    templateUrl: './control.component.html',\n    styleUrls: ['./control.component.scss']\n})\nexport class ControlComponent extends BaseClass implements OnInit {\n    /** Whether to show the overlay menu */\n    public show_menu: boolean;\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._settings.title = 'Control';\n        clearEventFormState();\n    }\n}\n","<div class=\"control page\">\n    <header class=\"header\">\n        <a-topbar-header [(menu)]=\"show_menu\"></a-topbar-header>\n    </header>\n    <main class=\"body\">\n        <a-control-space-list></a-control-space-list>\n    </main>\n    <footer class=\"footer\">\n        <a-footer-menu></a-footer-menu>\n    </footer>\n</div>\n<a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { ControlComponent } from './control.component';\nimport { SharedContentModule } from '../ui/shared.module';\nimport { ControlSpaceListComponent } from './space-list/space-list.component';\nimport { ControlSpaceListItemComponent } from './space-list/item/item.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: ControlComponent }\n];\n\n@NgModule({\n    declarations: [ControlComponent, ControlSpaceListComponent, ControlSpaceListItemComponent],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule\n    ]\n})\nexport class ControlModule {}\n"],"sourceRoot":"webpack:///"}