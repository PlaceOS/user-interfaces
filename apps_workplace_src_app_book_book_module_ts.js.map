{"version":3,"mappings":"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","names":["_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","uniqueIdCounter","constructor","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","EventEmitter","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","coerceBooleanProperty","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","ngOnInit","SelectionModel","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_emitChangeEvent","Array","isArray","length","event","MatButtonToggleChange","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","t","ɵngcc0","ɵdir","type","selectors","contentQueries","rf","ctx","dirIndex","MatButtonToggle","_t","hostAttrs","hostVars","hostBindings","vertical","inputs","outputs","exportAs","features","_MatButtonToggleBase","mixinDisableRipple","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","ɵngcc1","ɵcmp","viewQuery","first","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","_r0","buttonId","directives","ɵngcc2","styles","encapsulation","changeDetection","MatButtonToggleModule","ɵmod","ɵinj","imports","MatCommonModule","MatRippleModule","BookComponent","i0","QrScanner","hasCamera","listCameras","cameras","catch","requestLabels","navigator","mediaDevices","openedStream","getUserMedia","audio","video","stream","enumerateDevices","devices","device","kind","i","deviceId","label","finally","track","getTracks","stop","removeTrack","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","canvasSizeOrCalculateScanRegion","_calculateScanRegion","preferredCamera","$video","$canvas","document","createElement","_onDecode","_legacyCanvasSize","DEFAULT_CANVAS_SIZE","_preferredCamera","_active","_paused","_flashOn","console","warn","_scanRegion","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","requestAnimationFrame","computedStyle","window","getComputedStyle","display","style","setProperty","visibility","opacity","width","height","addEventListener","_qrEnginePromise","createQrEngine","hasFlash","srcObject","getVideoTracks","_getCameraStream","getSettings","isFlashOn","toggleFlash","turnFlashOff","turnFlashOn","applyConstraints","advanced","torch","reject","e","_restartVideoStream","destroy","removeEventListener","_postWorkerMessage","start","location","protocol","play","facingMode","_setVideoMirror","pause","stopStreamImmediately","stopStream","tracks","setTimeout","setCamera","facingModeOrDeviceId","imageOrFileOrUrl","scanRegion","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","gotExternalWorker","Worker","promise","all","_loadImage","engine","image","canvasContext","_drawToCanvas","postMessage","data","timeout","onMessage","onError","clearTimeout","N","NO_QR_CODE_FOUND","message","imageData","getImageData","buffer","detect","scanResults","rawValue","scanImage","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","supportedFormats","indexOf","formats","_scanFrame","smallestDimension","Math","min","videoWidth","videoHeight","scanRegionSize","round","x","y","downScaledWidth","downScaledHeight","paused","ended","readyState","error","log","preferenceType","constraintsWithoutCamera","constraint","Object","assign","exact","reduceRight","fallback","_getFacingMode","wasPaused","transform","videoStream","videoTrack","test","scanRegionX","scanRegionY","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","context","getContext","alpha","imageSmoothingEnabled","drawImage","imageOrFileOrBlobOrUrl","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","Blob","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad","qrEngineOrQrEnginePromise","BookCodeFlowComponent","_router","_video_el","o","n","_qr_scanner","_a","r","handleQrCode","result","url","hashindex","regex","params","match","exec","navigate","split","ctx_r21","oxw","DeskFlowDetailedFormComponent","_state","_org","_settings","building_list","active_levels","setOptions","building","bld","get","allow_time_changes","endOfDay","addDays","Date","now","DeskFlowMapComponent","BaseClass","_explore","map_url","map_styles","map_positions","map_features","map_actions","map_labels","level","available_assets","loading","form","combineLatest","valueChanges","pipe","startWith","recurrence","formatRecurrence","pattern","end","recurr_end","date","interval","days_of_week","details","format","l","_b","zone_id","setLevel","BehaviorSubject","confirmPost","_active_desk","getValue","subscription","assets","debounceTime","subscribe","available","status","actions","desk","active","bookable","d","map_id","fill","push","action","callback","setActiveDesk","setStyles","setActions","setFeatures","active_desk","content","zone","next","patchValue","asset_id","asset_name","description","booking_type","zones","a","parent_id","_c","$event","DeskFlowConfirmComponent","FlowSuccessComponent","DeskFlowFormComponent","setHours","valueOf","time","clearForm","initialised","_","levels","levelsForBuilding","quickBook","addMinutes","roundToNearestMinutes","nearestTo","title","findDesk","markAllAsTouched","valid","BookDeskFlowComponent","_route","view","last_success","toPromise","loadForm","newForm","paramMap","param","has","setView","queryParamMap","SpaceFlowFindItemComponent","_dialog","bookSpace","book","bookChange","viewLocation","open","MapLocateModalComponent","maxWidth","maxHeight","item","space","SpaceFlowFindComponent","_spaces","active_building","available_spaces","setBuilding","opts","take","c","zone_ids","includes","book_space","space_list","s","handleBookEvent","confirmBooking","spaces","resources","system","SpaceFlowConfirmComponent","__awaiter","postForm","notifyError","RULE_TYPES","set_r2","CateringConfigModalComponent","_data","rulesets","config","set","rules","JSON","stringify","floor","random","saveChanges","parse","reason","metadata","MAT_DIALOG_DATA","CateringItemModalComponent","FormGroup","FormControl","Validators","category","unit_price","tags","accept_points","discount_cap","ENTER","COMMA","SPACE","CateringItem","categories","controls","renderPercent","addTag","markAsDirty","input","tag_list","trim","setValue","removeTag","existing_tag","index","splice","randomInt","$localize","CateringItemOptionModalComponent","option","types","new_option","parent","concat","is_available","rule","matches","condition","isAfter","isBefore","duration","stringToMinutes","ext","CateringOrderModalComponent","order","CateringOrder","getCateringConfig","menu","list","unique","cat","cateringItemAvailable","menu_items","updateMenuQuantities","addItem","choose_options","old_item","items","itm","reduce","opt","selectOptions","new_item","options_string","quantity","removeItem","updateItemQuantity","amount","sort","b","localeCompare","optionsFor","join","saveOrder","confirmOrder","show_order_details","CateringOrderOptionsModalComponent","groups","group_list","updateGroupOption","option_state","saveOptions","CateringImportMenuModalComponent","handleFileEvent","element","target","files","file","fileReader","FileReader","csvToJson","toLowerCase","readAsText","downloadTemplate","downloadFile","CateringStateService","_menu","asObservable","_loading","_currency","getCateringForZone","currency","manageCateringOrder","ref","race","componentInstance","afterClosed","close","findIndex","updateMenu","addOption","deleteItem","openConfirmModal","icon","class","deleteOption","editConfig","flatten","updateConfig","importMenu","updated_menu","notifySuccess","updateMetadata","showMetadata","addItemToOrder","p","g","factory","ctx_r7","DetailBookSpaceFormComponent","_catering","catering","SpaceFlowFormComponent","capacity","findSpace","BookSpaceFlowComponent","ROUTES","path","component","children","redirectTo","BookModule","CommonModule","SharedComponentModule","FormsModule","ReactiveFormsModule","RouterModule"],"sources":["./node_modules/@angular/material/fesm2015/button-toggle.js","./apps/workplace/src/app/book/book.component.ts","./node_modules/qr-scanner/src/qr-scanner.js","./apps/workplace/src/app/book/code-flow.component.ts","./apps/workplace/src/app/book/desk-flow/detailed-form.component.ts","./apps/workplace/src/app/book/desk-flow/map.component.ts","./apps/workplace/src/app/book/desk-flow/confirm.component.ts","./apps/workplace/src/app/book/flow-success.component.ts","./apps/workplace/src/app/book/desk-flow/form.component.ts","./apps/workplace/src/app/book/desk-flow.component.ts","./apps/workplace/src/app/book/space-flow/find-item.component.ts","./apps/workplace/src/app/book/space-flow/find.component.ts","./apps/workplace/src/app/book/space-flow/confirm.component.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./apps/workplace/src/app/book/space-flow/detailed-form.component.ts","./apps/workplace/src/app/book/space-flow/form.component.ts","./apps/workplace/src/app/book/space-flow.component.ts","./apps/workplace/src/app/book/book.module.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'placeos-book',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2 z-10 relative\">\n            <main\n                class=\"relative flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookComponent {}\n","export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        return QrScanner.listCameras(false)\n            .then(cameras => !!cameras.length)\n            .catch(() => false);\n    }\n\n    /* async */\n    static listCameras(requestLabels = false) {\n        if (!navigator.mediaDevices) return Promise.resolve([]);\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, ask for camera permission by opening a stream, if\n        // labels were requested.\n        let openedStream = null;\n        return (requestLabels\n            ? navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n                .then(stream => openedStream = stream)\n                // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in\n                // use and some browsers disallow a second stream.\n                .catch(() => {})\n            : Promise.resolve()\n        )\n            .then(() => navigator.mediaDevices.enumerateDevices())\n            .then(devices => devices.filter(device => device.kind === 'videoinput').map((device, i) => ({\n                id: device.deviceId,\n                label: device.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            })))\n            .finally(() => {\n                // close the stream we just opened for getting camera access for listing the device labels\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    constructor(\n        video,\n        onDecode,\n        canvasSizeOrOnDecodeError = this._onDecodeError,\n        canvasSizeOrCalculateScanRegion = this._calculateScanRegion,\n        preferredCamera = 'environment'\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._legacyCanvasSize = QrScanner.DEFAULT_CANVAS_SIZE;\n        this._preferredCamera = preferredCamera;\n        this._active = false;\n        this._paused = false;\n        this._flashOn = false;\n\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\n            // legacy function signature where the third argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrOnDecodeError;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._onDecodeError = canvasSizeOrOnDecodeError;\n        }\n\n        if (typeof canvasSizeOrCalculateScanRegion === 'number') {\n            // legacy function signature where the fourth argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrCalculateScanRegion;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._calculateScanRegion = canvasSizeOrCalculateScanRegion;\n        }\n\n        this._scanRegion = this._calculateScanRegion(video);\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const computedStyle = window.getComputedStyle(video);\n            if (computedStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (computedStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = 0;\n                video.style.width = 0;\n                video.style.height = 0;\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    /* async */\n    hasFlash() {\n        let openedStream = null;\n        return (this.$video.srcObject\n            ? Promise.resolve(this.$video.srcObject.getVideoTracks()[0])\n            : this._getCameraStream().then(({ stream }) => {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                openedStream = stream;\n                return stream.getVideoTracks()[0];\n            })\n        )\n            .then((track) => 'torch' in track.getSettings())\n            .catch(() => false)\n            .finally(() => {\n                // close the stream we just opened for detecting whether it supports flash\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    isFlashOn() {\n      return this._flashOn;\n    }\n\n    /* async */\n    toggleFlash() {\n        if (this._flashOn) {\n            return this.turnFlashOff();\n        } else {\n            return this.turnFlashOn();\n        }\n    }\n\n    /* async */\n    turnFlashOn() {\n        if (this._flashOn) return Promise.resolve();\n        this._flashOn = true;\n        if (!this._active || this._paused) return Promise.resolve(); // flash will be turned on later on .start()\n        return this.hasFlash().then((hasFlash) => {\n            if (!hasFlash) return Promise.reject('No flash available');\n            // Note that the video track is guaranteed to exist at this point\n            return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n                advanced: [{ torch: true }],\n            });\n        }).catch(() => {\n            this._flashOn = false;\n            throw e;\n        });\n    }\n\n    /* async */\n    turnFlashOff() {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        return this._restartVideoStream();\n    }\n\n    destroy() {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        return this._getCameraStream()\n            .then(({ stream, facingMode }) => {\n                this.$video.srcObject = stream;\n                this.$video.play();\n                this._setVideoMirror(facingMode);\n\n                // Restart the flash if it was previously on\n                if (this._flashOn) {\n                    this._flashOn = false; // force turnFlashOn to restart the flash\n                    this.turnFlashOn().catch(() => {});\n                }\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    /* async */\n    pause(stopStreamImmediately = false) {\n        this._paused = true;\n        if (!this._active) {\n            return Promise.resolve(true);\n        }\n        this.$video.pause();\n\n        const stopStream = () => {\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n            for (const track of tracks) {\n                track.stop(); //  note that this will also automatically turn the flashlight off\n                this.$video.srcObject.removeTrack(track);\n            }\n            this.$video.srcObject = null;\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return Promise.resolve(true);\n        }\n\n        return new Promise((resolve) => setTimeout(resolve, 300))\n            .then(() => {\n                if (!this._paused) return false;\n                stopStream();\n                return true;\n            });\n    }\n\n    /* async */\n    setCamera(facingModeOrDeviceId) {\n        if (facingModeOrDeviceId === this._preferredCamera) return Promise.resolve();\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        return this._restartVideoStream();\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, scanRegion=null, qrEngine=null, canvas=null, disallowCanvasResizing=false,\n                     alsoTryWithoutScanRegion=false) {\n        const gotExternalWorker = qrEngine instanceof Worker;\n\n        let promise = Promise.all([\n            qrEngine || QrScanner.createQrEngine(),\n            QrScanner._loadImage(imageOrFileOrUrl),\n        ]).then(([engine, image]) => {\n            qrEngine = engine;\n            let canvasContext;\n            [canvas, canvasContext] = this._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n\n            if (qrEngine instanceof Worker) {\n                if (!gotExternalWorker) {\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n                    qrEngine.postMessage({ type: 'inversionMode', data: 'both' });\n                }\n                return new Promise((resolve, reject) => {\n                    let timeout, onMessage, onError;\n                    onMessage = event => {\n                        if (event.data.type !== 'qrResult') {\n                            return;\n                        }\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve(event.data.data);\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (e) => {\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngine.addEventListener('message', onMessage);\n                    qrEngine.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n                    qrEngine.postMessage({\n                        type: 'decode',\n                        data: imageData\n                    }, [imageData.data.buffer]);\n                });\n            } else {\n                return new Promise((resolve, reject) => {\n                    const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\n                    qrEngine.detect(canvas).then(scanResults => {\n                        if (!scanResults.length) {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        } else {\n                            resolve(scanResults[0].rawValue);\n                        }\n                    }).catch((e) => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\n                });\n            }\n        });\n\n        if (scanRegion && alsoTryWithoutScanRegion) {\n            promise = promise.catch(() =>\n                QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, disallowCanvasResizing));\n        }\n\n        promise = promise.finally(() => {\n            if (gotExternalWorker) return;\n            QrScanner._postWorkerMessage(qrEngine, 'close');\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\n        // well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\n        // and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    /* async */\n    static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\n        return ('BarcodeDetector' in window && BarcodeDetector.getSupportedFormats\n            ? BarcodeDetector.getSupportedFormats()\n            : Promise.resolve([])\n        )\n            .then((supportedFormats) => supportedFormats.indexOf('qr_code') !== -1\n                ? new BarcodeDetector({ formats: ['qr_code'] })\n                : new Worker(workerPath)\n            );\n    }\n\n    _onPlay() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._scanFrame();\n    }\n\n    _onLoadedMetaData() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _calculateScanRegion(video) {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n            this._qrEnginePromise\n                .then((qrEngine) => QrScanner.scanImage(this.$video, this._scanRegion, qrEngine, this.$canvas))\n                .then(this._onDecode, (error) => {\n                    if (!this._active) return;\n                    const errorMessage = error.message || error;\n                    if (errorMessage.indexOf('service unavailable') !== -1) {\n                        // When the native BarcodeDetector crashed, create a new one\n                        this._qrEnginePromise = QrScanner.createQrEngine();\n                    }\n                    this._onDecodeError(error);\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _onDecodeError(error) {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    /* async */\n    _getCameraStream() {\n        if (!navigator.mediaDevices) {\n            return Promise.reject('Camera not found.');\n        }\n\n        const preferenceType = this._preferredCamera === 'environment' || this._preferredCamera === 'user'\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        // First try constraints with camera, then without camera. Using reduceRight as the Promise is build in a\n        // bottom up fashion.\n        return [...constraintsWithCamera, ...constraintsWithoutCamera].reduceRight((fallback, constraint) =>\n            () => navigator.mediaDevices.getUserMedia({ video: constraint, audio: false })\n                .then((stream) => ({\n                    stream,\n                    // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                    // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                    // mode, even for exact facingMode constraints.\n                    facingMode: this._getFacingMode(stream)\n                        || (constraint.facingMode\n                            ? this._preferredCamera // _preferredCamera is a facing mode and we are able to fulfill it\n                            : (this._preferredCamera === 'environment'\n                                ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                                : 'environment' // switch from unfulfilled user facingMode or default to environment\n                            )\n                        ),\n                }))\n                .catch(fallback),\n            () => Promise.reject('Camera not found.')\n        )();\n    }\n\n    /* async */\n    _restartVideoStream() {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        return this.pause(true).then((paused) => {\n            if (!paused || wasPaused || !this._active) return;\n            return this.start();\n        });\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    _getFacingMode(videoStream) {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    static _drawToCanvas(image, scanRegion=null, canvas=null, disallowCanvasResizing=false) {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width? scanRegion.width : image.width || image.videoWidth;\n        const scanRegionHeight = scanRegion && scanRegion.height? scanRegion.height : image.height || image.videoHeight;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height\n        );\n        return [canvas, context];\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrBlobOrUrl) {\n        if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof(imageOrFileOrBlobOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n\n    /* async */\n    static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\n        return Promise.resolve(qrEngineOrQrEnginePromise).then((qrEngine) => {\n            if (!(qrEngine instanceof Worker)) return;\n            qrEngine.postMessage({ type, data });\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n","import {\n    Component,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    OnDestroy,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport QrScanner from 'qr-scanner';\n\n@Component({\n    selector: 'book-code-flow',\n    template: `\n        <div\n            class=\"flex-1 overflow-hidden flex items-center justify-center bg-black relative\"\n        >\n            <video\n                class=\"min-w-full min-h-full object-cover\"\n                id=\"video\"\n                #video\n            ></video>\n            <div\n                class=\"absolute text-white text-center inset-0 flex flex-col items-center justify-center\"\n            >\n                <div\n                    class=\"flex flex-col z-10 justify-end items-center relative\"\n                    *ngIf=\"is_scanning\"\n                >\n                    <h2 class=\"text-3xl mb-1 uppercase subpixel-antialiased\">\n                        Scan QR Code\n                    </h2>\n                    <span class=\" mb-4 \">\n                        Scan the QR code outisde a PlaceOS room or space.\n                    </span>\n                </div>\n                <div\n                    class=\"flex flex-col z-10 justify-end items-center relative\"\n                    *ngIf=\"!is_scanning\"\n                >\n                    <h2 class=\"text-3xl mb-1 uppercase subpixel-antialiased\">\n                        Enter Room ID\n                    </h2>\n                    <span class=\"mb-4\">\n                        Enter the room ID number outisde a PlaceOS room or\n                        space.\n                    </span>\n                </div>\n                <div class=\"flex items-center justify-center\">\n                    <div\n                        box\n                        class=\"rounded-2xl h-64 w-64 transition-all flex items-center justify-center p-8 m-8 space-x-2\"\n                        [class.input]=\"!is_scanning\"\n                    >\n                        <span class=\"uppercase\">Booking ID</span>\n                        <input\n                            matInput\n                            class=\"border-none bg-none w-full text-3xl text-left\"\n                            [(ngModel)]=\"room_code\"\n                            name=\"booking-id\"\n                            placeholder=\"e.g. 12102910\"\n                        />\n                    </div>\n                </div>\n                <div\n                    class=\"m-4 p-2 flex items-center space-x-2 bg-white bg-opacity-50 rounded\"\n                >\n                    <button\n                        mat-button\n                        [class]=\"\n                            'flex-1 text-black border-none w-40 ' +\n                            (is_scanning\n                                ? 'bg-white'\n                                : 'bg-transparent hover:bg-white bg-opacity-50')\n                        \"\n                        (click)=\"is_scanning = true\"\n                    >\n                        Scan Code\n                    </button>\n                    <button\n                        mat-button\n                        [class]=\"\n                            'flex-1 text-black border-none w-40 ' +\n                            (!is_scanning\n                                ? 'bg-white'\n                                : 'bg-transparent hover:bg-white bg-opacity-50')\n                        \"\n                        (click)=\"is_scanning = false\"\n                    >\n                        Enter Code\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [box] {\n                box-shadow: 0px 0px 0px 100vw rgba(0, 0, 0, 0.5);\n            }\n\n            [box] > * {\n                display: none;\n            }\n\n            [box].input {\n                width: 32rem !important;\n                max-width: calc(100% - 2rem) !important;\n                padding: 1rem !important;\n                height: 4rem !important;\n                color: black !important;\n                background: white;\n                box-shadow: 0px 0px 0px 100vw rgba(0, 0, 0, 0.8);\n            }\n\n            [box].input > * {\n                display: initial;\n            }\n\n            [box] span {\n                font-family: var(--heading-font);\n                font-weight: 500;\n                text-transform: uppercase;\n                letter-spacing: 0.05em;\n            }\n        `,\n    ],\n})\nexport class BookCodeFlowComponent implements OnInit, OnDestroy {\n    /** Boolean to toggle scan/code */\n    public is_scanning = true;\n    /** Room Code input value */\n    public room_code: string;\n    /** Menu event */\n    @Output() public menu = new EventEmitter(false);\n    /** Video element to emit camera feed */\n    @ViewChild('video', { static: true })\n    private _video_el: ElementRef<HTMLVideoElement>;\n\n    private _qr_scanner;\n\n    constructor(private _router: Router) {}\n\n    public ngOnDestroy() {\n        if (this._video_el.nativeElement.srcObject) {\n            (this._video_el.nativeElement.srcObject as any)\n                .getTracks()\n                .forEach((track) => track?.stop());\n        }\n        this._qr_scanner?.stop();\n    }\n\n    public ngOnInit(): void {\n        if (!navigator.mediaDevices?.getUserMedia) return;\n        navigator.mediaDevices\n            .getUserMedia({ video: true })\n            .then((stream) => (this._video_el.nativeElement.srcObject = stream))\n            .catch((e) => console.error('Unable to fetch media devices!', e));\n        this._qr_scanner = new QrScanner(this._video_el.nativeElement, (r) =>\n            this.handleQrCode(r)\n        );\n        this._qr_scanner.start();\n    }\n\n    private handleQrCode(result: string) {\n        const url = result;\n        const hashindex = url.indexOf('/#/');\n        // could just whole page redirect to url\n        if (hashindex > 0) {\n            const regex = /[?&]([^=#]+)=([^&#]*)/g;\n            const params = {};\n            let match;\n            while ((match = regex.exec(url))) {\n                params[match[1]] = match[2];\n            }\n            this._router.navigate([url.split('/#')[1].split('?')[0]], params);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addDays, endOfDay, format } from 'date-fns';\n\n@Component({\n    selector: 'detailed-book-desks-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div\n                class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n                *ngIf=\"allow_groups\"\n            >\n                <mat-button-toggle-group\n                    class=\"w-full\"\n                    [ngModel]=\"(options | async)?.group ? 'group' : 'single'\"\n                    (ngModelChange)=\"\n                        setOptions({\n                            group: $event === 'group'\n                        })\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    <mat-button-toggle class=\"w-1/2\" value=\"single\">\n                        Single\n                    </mat-button-toggle>\n                    <mat-button-toggle class=\"w-1/2\" value=\"group\">\n                        Group\n                    </mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/4\">\n                    <label>Date</label>\n                    <a-date-field [to]=\"book_until\" formControlName=\"date\">\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n                <div\n                    class=\"flex flex-col flex-1 w-full sm:w-1/4\"\n                    *ngIf=\"(buildings | async)?.length > 1\"\n                >\n                    <label>Building</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            placeholder=\"Select building\"\n                            [(ngModel)]=\"building\"\n                            (ngModelChange)=\"\n                                setOptions({\n                                    zone_id: $event?.id\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div\n                    class=\"flex flex-col flex-1 w-full sm:w-1/4\"\n                    *ngIf=\"(levels | async)?.length > 1\"\n                >\n                    <label>Level</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            placeholder=\"Any Level\"\n                            ngModel\n                            [disabled]=\"!building\"\n                            (ngModelChange)=\"\n                                setOptions({\n                                    zone_id: $event || building.id\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            <mat-option\n                                *ngFor=\"let lvl of levels | async\"\n                                [value]=\"lvl.id\"\n                            >\n                                {{ lvl.display_name || lvl.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"allow_time_changes\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Start Time</label>\n                    <a-time-field\n                        [ngModel]=\"form.value.date\"\n                        (ngModelChange)=\"form.patchValue({ date: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-time-field>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>End Time</label>\n                    <a-duration-field\n                        formControlName=\"duration\"\n                        [time]=\"form.get('date')?.value\"\n                        [max]=\"12 * 60\"\n                        [min]=\"60\"\n                        [step]=\"60\"\n                    >\n                    </a-duration-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"can_book_for_others\"\n            >\n                <label>Host</label>\n                <a-user-search-field\n                    formControlName=\"user\"\n                ></a-user-search-field>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"needs_reason\"\n            >\n                <label>Details</label>\n                <mat-form-field class=\"w-full\" appearance=\"outline\">\n                    <input\n                        matInput\n                        formControlName=\"description\"\n                        placeholder=\"Reason for booking...\"\n                    />\n                </mat-form-field>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"(options | async)?.group\"\n            >\n                <label>Group Members</label>\n                <a-user-list-field\n                    [simple]=\"true\"\n                    [ngModel]=\"(options | async)?.members || []\"\n                    (ngModelChange)=\"setOptions({ members: $event })\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                ></a-user-list-field>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"can_recurr\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Recurrence Period</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [ngModel]=\"(options | async)?.recurrence_pattern\"\n                            (ngModelChange)=\"setOptions({ pattern: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"None\"\n                        >\n                            <mat-option value=\"none\">None</mat-option>\n                            <mat-option\n                                *ngFor=\"let opt of recurrence_options\"\n                                [value]=\"opt\"\n                            >\n                                <span class=\"capitalize\">{{ opt }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Recurrence End</label>\n                    <a-date-field\n                        [disabled]=\"\n                            !(options | async)?.pattern ||\n                            (options | async)?.pattern === 'none'\n                        \"\n                        [ngModel]=\"\n                            (options | async)?.recurr_end || form?.value?.date\n                        \"\n                        (ngModelChange)=\"\n                            setOptions({\n                                recurr_end: $event\n                            })\n                        \"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        [to]=\"book_until\"\n                    >\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"(features | async)?.length\"\n            >\n                <label>Desk Features</label>\n                <mat-form-field class=\"w-full\" appearance=\"outline\">\n                    <mat-select\n                        multiple\n                        [ngModel]=\"(options | async)?.features || []\"\n                        (ngModelChange)=\"\n                            setOptions({\n                                features: $event || []\n                            })\n                        \"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        placeholder=\"Any Feature\"\n                    >\n                        <mat-option\n                            *ngFor=\"let opt of features | async\"\n                            class=\"capitalize\"\n                            [value]=\"opt\"\n                        >\n                            {{ opt }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    `,\n    styles: [``],\n})\nexport class DeskFlowDetailedFormComponent {\n    @Input() public form: FormGroup;\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get book_until() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.desks.available_period') || 90\n            )\n        );\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass, formatRecurrence } from '@placeos/common';\nimport { ExploreStateService } from '@placeos/explore';\nimport { Desk } from '@placeos/organisation';\nimport { format } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { debounceTime, map, startWith } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-flow-map',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'desks', 'form']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div class=\"flex flex-col flex-1 h-1/2 w-full \">\n            <h2 class=\"text-2xl px-4 pt-4 text-center\">Available Desks</h2>\n            <an-action-field\n                class=\"my-4 mx-auto w-[640px] max-w-[calc(100vw-2rem)]\"\n                [matMenuTriggerFor]=\"menu\"\n            >\n                {{ (option_details | async) || 'No Filters' }}\n            </an-action-field>\n            <mat-menu #menu=\"matMenu\">\n                <div\n                    (click)=\"$event.stopPropagation(); ($event.preventDefault)\"\n                    class=\"pt-4 max-h-[65vh] overflow-auto\"\n                >\n                    <detailed-book-desks-form\n                        [form]=\"form\"\n                    ></detailed-book-desks-form>\n                </div>\n            </mat-menu>\n            <div listing class=\"flex flex-1 h-1/2 relative space-x-2\">\n                <ul\n                    class=\"list-style-none w-full sm:w-[20rem] bg-gray-100 p-2 pb-32 overflow-auto h-full rounded-tr-lg space-y-2\"\n                >\n                    <div class=\"px-2 sticky top-0 bg-gray-100 w-full z-10\">\n                        {{ (desks | async)?.length || '0' }} matches available\n                    </div>\n                    <li\n                        matRipple\n                        *ngFor=\"let desk of desks | async\"\n                        [attr.desk-id]=\"desk.id\"\n                        class=\"flex items-center p-2 bg-white rounded shadow cursor-pointer space-x-2 min-h-[5rem] border\"\n                        [class.border-primary]=\"active_desk?.id === desk.id\"\n                        (click)=\"setActiveDesk(desk)\"\n                    >\n                        <app-icon class=\"text-2xl\">place</app-icon>\n                        <div class=\"flex flex-col w-1/2 flex-1\">\n                            <div name class=\"\">{{ desk.name || desk.id }}</div>\n                            <div level class=\"text-xs\">\n                                {{\n                                    desk.zone?.display_name ||\n                                        desk.zone?.name ||\n                                        '&lt;No Level&gt;'\n                                }}\n                            </div>\n                            <div features class=\"w-full flex flex-wrap\">\n                                <div\n                                    *ngFor=\"let feat of desk.features || []\"\n                                    class=\"text-xs bg-primary text-white rounded-xl px-2 py-1 mt-1 mr-2\"\n                                >\n                                    {{ feat }}\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n                <div\n                    class=\"hidden sm:block flex-1 bg-gray-200 rounded-tl-lg border-l border-t border-gray-300 relative overflow-hidden h-full\"\n                >\n                    <i-map\n                        [src]=\"url | async\"\n                        [zoom]=\"(positions | async)?.zoom\"\n                        [center]=\"(positions | async)?.center\"\n                        [styles]=\"styles | async\"\n                        [features]=\"features | async\"\n                        [actions]=\"actions | async\"\n                        [labels]=\"labels | async\"\n                        [focus]=\"active_desk?.map_id || active_desk?.id\"\n                    ></i-map>\n                    <div\n                        class=\"absolute top-2 left-2 bg-white rounded-3xl h-10 px-3 flex items-center border border-gray-300\"\n                        *ngIf=\"level | async\"\n                    >\n                        {{\n                            (level | async)?.display_name ||\n                                (level | async)?.name\n                        }}\n                    </div>\n                </div>\n                <div\n                    *ngIf=\"loading | async\"\n                    class=\"absolute inset-0 bg-white bg-opacity-60 flex flex-col items-center justify-center space-y-2 !m-0 z-20\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>{{ loading | async }}</p>\n                </div>\n                <div\n                    selection\n                    class=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 p-2 bg-white shadow rounded w-[24rem] max-w-[calc(100vw-1rem)] space-y-2 !m-0 border border-gray-200\"\n                    *ngIf=\"active_desk\"\n                >\n                    <div class=\"\">\n                        <div name class=\"\">{{ active_desk.name }}</div>\n                        <div level class=\"text-xs\">\n                            {{\n                                active_desk.zone?.display_name ||\n                                    active_desk.zone.name ||\n                                    '&lt;No Level&gt;'\n                            }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <button\n                            mat-button\n                            class=\"inverse flex-1\"\n                            (click)=\"setActiveDesk(null)\"\n                        >\n                            Clear\n                        </button>\n                        <button\n                            mat-button\n                            class=\"flex-1\"\n                            (click)=\"makeBooking()\"\n                        >\n                            Book\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n        `,\n    ],\n})\nexport class DeskFlowMapComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._explore.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._explore.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._explore.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._explore.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._explore.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._explore.map_labels;\n    public readonly level = this._explore.level;\n\n    public readonly desks = this._state.available_assets;\n\n    public readonly loading = this._state.loading;\n\n    public readonly form = this._state.form;\n\n    public readonly option_details = combineLatest([\n        this._state.options,\n        this.form.valueChanges.pipe(startWith({})),\n    ]).pipe(\n        map(([options]) => {\n            const form = this._state.form;\n            const recurrence = formatRecurrence({\n                pattern: options.pattern as any,\n                end: options.recurr_end,\n                start: form.value.date,\n                interval: 1,\n                days_of_week: -1,\n            });\n            const details = `${format(form.value.date, 'dd MMM yyyy')}${\n                options.pattern && options.pattern !== 'none'\n                    ? ', ' + recurrence\n                    : ''\n            }${options.group ? ', ' + options.group : ''}, ${\n                options.features?.length || 'Any'\n            } Feature${(options.features?.length || 0) < 2 ? '' : 's'}`;\n            if (options.zone_id) this._explore.setLevel(options.zone_id);\n            return details;\n        })\n    );\n\n    private _active_desk = new BehaviorSubject<Desk>(null);\n\n    public readonly makeBooking = () => this._state.confirmPost();\n\n    public get active_desk(): Desk {\n        return this._active_desk.getValue();\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _explore: ExploreStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'assets-statue',\n            combineLatest([\n                this._state.assets,\n                this._state.available_assets,\n                this._active_desk,\n            ])\n                .pipe(debounceTime(200))\n                .subscribe(([assets, available]) => {\n                    const status = {};\n                    const actions = [];\n                    for (const desk of assets) {\n                        const active =\n                            desk.bookable &&\n                            available.find((d) => d.id === desk.id);\n                        status[`#${desk.map_id || desk.id}`] = {\n                            fill: desk.bookable\n                                ? available.find((d) => d.id === desk.id)\n                                    ? '#43a047'\n                                    : '#e53935'\n                                : '#999',\n                            opacity: 0.6,\n                        };\n                        if (active)\n                            actions.push({\n                                id: desk.map_id || desk.id,\n                                action: 'click',\n                                callback: () => this.setActiveDesk(desk as any),\n                            });\n                    }\n                    this._explore.setStyles('desks', status);\n                    this._explore.setActions('desks', actions);\n                    this._explore.setFeatures(\n                        'desks',\n                        this.active_desk\n                            ? [\n                                  {\n                                      location:\n                                          this.active_desk.map_id ||\n                                          this.active_desk.id,\n                                      content: `\n                    <span class=\"flex h-2 w-2 rounded-full absolute top-1/4 left-1/4 transform -translate-x-1/2 -translate-y-1/2\" >\n                        <span class=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75\"></span>\n                        <span class=\"relative inline-flex rounded-full h-2 w-2 bg-primary\"></span>\n                    </span>`,\n                                  },\n                              ]\n                            : []\n                    );\n                })\n        );\n    }\n\n    public setActiveDesk(desk: Desk) {\n        this._explore.setLevel(desk?.zone?.id);\n        this._active_desk.next(desk);\n        this._state.form.patchValue({\n            asset_id: desk?.id,\n            asset_name: desk.name,\n            map_id: desk?.map_id || desk?.id,\n            description: desk.name,\n            booking_type: 'desk',\n            zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : [],\n        });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'desk-flow-confirm',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'desks', 'map']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n        `,\n    ],\n})\nexport class DeskFlowConfirmComponent {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'flow-success',\n    template: `\n        <div\n            name=\"success\"\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50\"\n        >\n            <div class=\"text-4xl rounded-full bg-white text-success mb-4\">\n                <app-icon>done</app-icon>\n            </div>\n            <div class=\"text-center text-lg text-white mb-4\">\n                Thank you, you {{ type }} booking was successful!<br />\n                An event has been added to your calendar\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-32\"\n                    [routerLink]=\"['/book', route]\"\n                    [queryParams]=\"{}\"\n                >\n                    New Booking\n                </a>\n                <a\n                    button\n                    mat-button\n                    class=\"w-32\"\n                    [routerLink]=\"['/schedule']\"\n                    [queryParams]=\"{ email: calendar }\"\n                >\n                    My Day\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class FlowSuccessComponent {\n    @Input() public calendar: string;\n    @Input() public route = 'spaces';\n    @Input() public type = 'space';\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addDays, setHours, addMinutes, roundToNearestMinutes } from 'date-fns';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-flow-form',\n    template: `\n        <section form class=\"flex-1 min-h-[50%]\">\n            <h2\n                class=\"text-xl uppercase font-medium mb-2 mt-4 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                {{ is_edit ? 'Edit' : 'Detailed' }} Desk Booking\n            </h2>\n            <detailed-book-desks-form [form]=\"form\"></detailed-book-desks-form>\n            <div class=\"mb-4 border-b border-gray-300 w-full\"></div>\n            <div\n                class=\"flex flex-col sm:flex-row items-center justify-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n            >\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem] inverse\"\n                    mat-button\n                    clear\n                    (click)=\"clearForm()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">clear</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Cancel Edit' : 'Clear Form'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    find\n                    mat-button\n                    (click)=\"findDesk()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">search</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Update Desk' : 'Find Desk'\n                        }}</span>\n                    </div>\n                </button>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: auto;\n            }\n\n            [quick] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class DeskFlowFormComponent implements OnInit {\n    public time = 0;\n    public level = '';\n\n    public readonly quick_times = [\n        { name: 'Now', value: 0 },\n        {\n            name: 'Tomorrow',\n            value: setHours(addDays(new Date(), 1), 9).valueOf(),\n        },\n    ];\n\n    public levels = [];\n\n    public get is_edit() {\n        return !!this.form?.get('id')?.value;\n    }\n\n    public get form() {\n        return this._state.form;\n    }\n\n    public readonly clearForm = () => {\n        this.time = 0;\n        this.level = this._org.building.id;\n        this._state.clearForm();\n    };\n\n    constructor(\n        private _state: BookingFormService,\n        private _router: Router,\n        private _org: OrganisationService\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _));\n        await this._org.active_levels.pipe(first((_) => _?.length > 0));\n        this.level = this._org.building?.id;\n        this.levels = [\n            { id: this._org.building?.id, name: 'Any Level' },\n            ...this._org.levelsForBuilding(this._org.building),\n        ];\n    }\n\n    public quickBook() {\n        this.form.patchValue({\n            date: (this.time < 24 * 60\n                ? addMinutes(\n                      roundToNearestMinutes(new Date(), { nearestTo: 5 }),\n                      this.time\n                  )\n                : setHours(addDays(new Date(), 1), 8)\n            ).valueOf(),\n            title: 'Ad-hoc Desk Booking',\n        });\n        this.findDesk();\n    }\n\n    public findDesk() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'desks', 'map']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'placeos-book-desk-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'map'\">\n                    <desk-flow-map></desk-flow-map>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <desk-flow-confirm></desk-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        type=\"desk\"\n                        route=\"desks\"\n                        [calendar]=\"last_success?.user_email\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <desk-flow-form></desk-flow-form>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookDeskFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _route: ActivatedRoute,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this._state.form.patchValue({ booking_type: 'desk' });\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Space } from '@placeos/spaces';\nimport { MapLocateModalComponent } from '../../overlays/map-locate-modal.component';\n\n@Component({\n    selector: 'space-flow-find-item',\n    template: `\n        <div\n            class=\"flex items-center bg-white p-2 my-2 shadow w-[640px] max-w-[calc(100%-2rem)] mx-auto rounded\"\n        >\n            <div class=\"flex flex-col flex-1 space-y-2 \">\n                <div class=\"flex items-center\">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>place</app-icon>\n                    </div>\n                    <span\n                        >{{ space?.level?.display_name || space?.level?.name }},\n                        {{ space?.display_name || space?.name }}</span\n                    >\n                </div>\n                <div class=\"flex items-center\">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>group</app-icon>\n                    </div>\n                    <span>{{ space?.capacity || 0 }} People</span>\n                </div>\n            </div>\n            <div class=\"flex flex-col space-y-2 ml-2\">\n                <button\n                    mat-button\n                    book\n                    [class.bg-pending]=\"book\"\n                    [class.border-pending]=\"book\"\n                    (click)=\"bookSpace()\"\n                >\n                    {{ multiple ? (book ? 'Remove' : 'Select') : 'Book' }}\n                </button>\n                <button\n                    locate\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"viewLocation()\"\n                >\n                    Map\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFindItemComponent {\n    /** Space to display details for */\n    @Input() public space: Space;\n    /** Whether space should be booked */\n    @Input() public multiple: boolean;\n    /** Whether space should be booked */\n    @Input() public book: boolean;\n    /** Emitter for changes to book value */\n    @Output() public bookChange = new EventEmitter<boolean>();\n\n    constructor(private _dialog: MatDialog) {}\n\n    public bookSpace() {\n        this.book = !this.book;\n        this.bookChange.emit(this.book);\n    }\n\n    public viewLocation() {\n        this._dialog.open(MapLocateModalComponent, {\n            width: '32em',\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: { item: this.space },\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HashMap, SettingsService } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { Space, SpacesService } from '@placeos/spaces';\nimport { combineLatest } from 'rxjs';\nimport { filter, first, map, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'space-flow-find',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'spaces', 'form']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div filters>\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto py-4\">\n                <h2 class=\"text-xl uppercase font-medium text-white\">\n                    Available Spaces\n                </h2>\n                <div\n                    class=\"flex flex-col items-center sm:flex-row space-x-0 sm:space-x-2\"\n                >\n                    <mat-form-field\n                        overlay\n                        buildings\n                        class=\"w-full sm:w-auto sm:flex-1 h-[3.25rem]\"\n                        *ngIf=\"(buildings | async)?.length > 1\"\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Select Building...\"\n                            [ngModel]=\"building | async\"\n                            (ngModelChange)=\"setBuilding($event)\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-auto sm:flex-1 h-[3.25rem]\"\n                        overlay\n                        *ngIf=\"(levels | async)?.length > 0\"\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Level\"\n                            [ngModel]=\"\n                                (options | async)?.zone_ids?.length\n                                    ? (options | async)?.zone_ids[0]\n                                    : ''\n                            \"\n                            (ngModelChange)=\"setOptions({ zone_ids: [$event] })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of levels | async\"\n                                [value]=\"item.id\"\n                            >\n                                {{ item.display_name || item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-auto sm:flex-1 h-[3.25rem] hidden sm:block\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Any Capacity\"\n                            [ngModel]=\"(options | async)?.capacity\"\n                            (ngModelChange)=\"setOptions({ capacity: $event })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of quick_capacities\"\n                                [value]=\"item.value\"\n                            >\n                                {{ item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n        </div>\n        <div class=\"flex-1 w-full bg-gray-100 overflow-auto\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <ng-container\n                    *ngIf=\"(spaces | async)?.length > 0; else empty_state\"\n                >\n                    <space-flow-find-item\n                        *ngFor=\"let space of spaces | async\"\n                        class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto \"\n                        [space]=\"space\"\n                        [multiple]=\"multiple\"\n                        [(book)]=\"book_space[space.id]\"\n                        (bookChange)=\"handleBookEvent(space, $event)\"\n                    ></space-flow-find-item>\n                    <p class=\"p-4 text-center opacity-60\">\n                        End of available spaces list\n                    </p>\n                </ng-container>\n            </ng-container>\n        </div>\n        <div *ngIf=\"multiple\" class=\"bg-white border-t border-gray-200\">\n            <div\n                class=\"flex items-center w-[640px] max-w-[calc(100%-2rem)] mx-auto p-2\"\n            >\n                <div class=\"flex-1 underline\" [matMenuTriggerFor]=\"menu\">\n                    {{ space_list.length }} space(s) selected\n                </div>\n                <button\n                    class=\"w-32\"\n                    [disabled]=\"!space_list.length\"\n                    mat-button\n                    (click)=\"confirmBooking()\"\n                >\n                    Book\n                </button>\n            </div>\n            <mat-menu #menu=\"matMenu\" yPosition=\"above\">\n                <div\n                    class=\"flex items-center pointer-events-none leading-tight\"\n                    mat-menu-item\n                    *ngFor=\"let space of space_list\"\n                >\n                    <div class=\"flex flex-col mr-4\">\n                        <div>{{ space.display_name || space.name }}</div>\n                        <div class=\"text-xs opacity-70\">\n                            {{ space.level?.display_name || space.level?.name }}\n                            ~ {{ space.capacity || '2+' }} People\n                        </div>\n                    </div>\n                    <button\n                        mat-icon-button\n                        class=\"pointer-events-auto\"\n                        (click)=\"\n                            this.handleBookEvent(space, false);\n                            $event.stopPropagation()\n                        \"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n                <div\n                    mat-menu-item\n                    class=\" opacity-60\"\n                    *ngIf=\"!space_list?.length\"\n                >\n                    No selected spaces\n                </div>\n            </mat-menu>\n        </div>\n        <ng-template #load_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Retrieving available spaces...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2 p-8 text-center\"\n            >\n                <p>\n                    No available spaces for selected time, capacity or level(s)\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n\n            [filters] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFindComponent implements OnInit {\n    public book_space: HashMap<boolean> = {};\n    public quick_capacities = [\n        { name: 'Any Capacity', value: 0 },\n        { name: 'Small (1 - 4)', value: 1 },\n        { name: 'Medium (5 - 12)', value: 5 },\n        { name: 'Large (13 - 32)', value: 13 },\n        { name: 'Huge (32+)', value: 33 },\n    ];\n\n    public space_list: Space[] = [];\n\n    /** List of available buildings */\n    public readonly buildings = this._org.building_list;\n    /** Currently active building */\n    public readonly building = this._org.active_building;\n\n    public readonly levels = combineLatest([\n        this.building,\n        this._state.options,\n    ]).pipe(\n        filter(([_]) => !!_),\n        map(([bld]) => [\n            {\n                id: this._org.building.id,\n                name: 'All Levels',\n            },\n            ...this._org.levelsForBuilding(bld),\n        ])\n    );\n\n    public readonly loading = this._state.loading;\n    public readonly options = this._state.options;\n\n    public readonly spaces = this._state.available_spaces;\n    public async setBuilding(bld) {\n        const opts = await this.options.pipe(take(1)).toPromise();\n        if (bld) this._org.building = bld;\n        const levels = this._org.levelsForBuilding(this._org.building);\n        const lvl = levels.find((_) => opts.zone_ids?.includes(_.id));\n        if (!lvl && levels.length) {\n            this.setOptions({ zone_ids: [levels[0].id] });\n        }\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get multiple() {\n        return this._settings.get('app.events.multiple_spaces') ?? false;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _state: EventFormService,\n        private _settings: SettingsService,\n        private _router: Router\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => !!_)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => !!_)).toPromise();\n        this.setBuilding(this._org.building);\n        this.book_space = {};\n        const resources = this._state.form?.get('resources')?.value || [];\n        resources.forEach((_) => (this.book_space[_.id] = true));\n        this.space_list = this._spaces.filter((s) => this.book_space[s.id]);\n    }\n\n    public handleBookEvent(space: Space, book: boolean = true) {\n        if (this.multiple) {\n            this.book_space[space.id] = book;\n        } else {\n            this.book_space = {};\n            this.book_space[space.id] = book;\n            this.confirmBooking();\n        }\n        this.space_list = this._spaces.filter((s) => this.book_space[s.id]);\n    }\n\n    public confirmBooking() {\n        const spaces = this._spaces.filter((s) => this.book_space[s.id]);\n        this._state.form.patchValue({ resources: spaces, system: spaces[0] });\n        this._router.navigate(['/book', 'spaces', 'confirm']);\n    }\n}\n","import { Component } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\n\n@Component({\n    selector: 'space-flow-confirm',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'spaces', 'find']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div\n            class=\"flex flex-col items-center space-y-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n        >\n            <h2 class=\"text-xl uppercase font-medium w-full my-4\">\n                Your meeting details\n            </h2>\n            <div\n                class=\"flex items-center py-2 space-x-2 border-b border-gray-200 w-full\"\n            >\n                <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                    <app-icon>event</app-icon>\n                </div>\n                <div class=\"flex-1 truncate\">\n                    {{ form.get('date')?.value | date: 'longDate' }} at\n                    {{ form.get('date')?.value | date: 'shortTime' }} ~\n                    {{\n                        form.get('date')?.value +\n                            form.get('duration')?.value * 60 * 1000\n                            | date: 'shortTime'\n                    }}\n                </div>\n                <a\n                    mat-button\n                    class=\"clear underline\"\n                    [routerLink]=\"['/book', 'spaces', 'form']\"\n                    >Edit</a\n                >\n            </div>\n            <div\n                class=\"flex items-center py-2 space-x-2 border-b border-gray-200 w-full\"\n            >\n                <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                    <app-icon>schedule</app-icon>\n                </div>\n                <div class=\"flex-1 truncate\">\n                    {{ form.get('duration')?.value }} minutes\n                </div>\n                <a\n                    mat-button\n                    class=\"clear underline\"\n                    [routerLink]=\"['/book', 'spaces', 'form']\"\n                    >Edit</a\n                >\n            </div>\n            <div class=\"border-b border-gray-200 w-full\">\n                <div class=\"flex items-center py-2 space-x-2 \">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>place</app-icon>\n                    </div>\n                    <div class=\"flex-1 truncate\">\n                        {{ form.get('resources')?.value?.length }} Space(s)\n                    </div>\n                    <button\n                        mat-button\n                        [disabled]=\"!form.get('resources')?.value?.length\"\n                        class=\"clear bg-transparent border-none underline\"\n                        (click)=\"show_spaces = !show_spaces\"\n                    >\n                        {{ show_spaces ? 'Hide' : 'Show' }}\n                    </button>\n                    <a\n                        mat-button\n                        class=\"clear underline\"\n                        [routerLink]=\"['/book', 'spaces', 'find']\"\n                        >Edit</a\n                    >\n                </div>\n                <div\n                    list\n                    [style.height]=\"\n                        !show_spaces\n                            ? '0'\n                            : form.get('resources')?.value?.length * 2.5 + 'rem'\n                    \"\n                    class=\"overflow-hidden\"\n                >\n                    <div\n                        class=\"flex items-center h-10 pl-12\"\n                        *ngFor=\"let space of form.get('resources')?.value\"\n                    >\n                        <span\n                            >{{ space.display_name || space.name }} [{{\n                                space.level?.display_name || space.level?.name\n                            }}]</span\n                        >\n\n                        <button\n                            mat-button\n                            class=\"bg-transparent border-none underline\"\n                        >\n                            Map\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"border-b border-gray-200 w-full\">\n                <div class=\"flex items-center py-2 space-x-2 \">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>group</app-icon>\n                    </div>\n                    <div class=\"flex-1 truncate\">\n                        {{ form.get('attendees')?.value?.length || 0 }}\n                        Attendee(s)\n                    </div>\n                    <button\n                        mat-button\n                        [disabled]=\"!form.get('attendees')?.value?.length\"\n                        class=\"clear bg-transparent border-none underline\"\n                        (click)=\"show_people = !show_people\"\n                    >\n                        {{ show_people ? 'Hide' : 'Show' }}\n                    </button>\n                    <a\n                        mat-button\n                        class=\"clear underline\"\n                        [routerLink]=\"['/book', 'spaces', 'form']\"\n                        >Edit</a\n                    >\n                </div>\n                <div\n                    list\n                    [style.height]=\"\n                        !show_people\n                            ? '0'\n                            : form.get('attendees')?.value?.length * 3 + 'rem'\n                    \"\n                    class=\"overflow-hidden\"\n                >\n                    <div\n                        class=\"flex items-center h-12 pl-12 space-x-2\"\n                        *ngFor=\"let user of form.get('attendees')?.value\"\n                    >\n                        <a-user-avatar\n                            class=\"text-sm\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <span>{{ user.name || user.email }}</span>\n                    </div>\n                </div>\n            </div>\n            <button\n                mat-button\n                class=\"w-32\"\n                confirm\n                [disabled]=\"loading\"\n                (click)=\"postForm()\"\n            >\n                <span *ngIf=\"!loading\">Confirm</span>\n                <mat-spinner\n                    class=\"mx-auto\"\n                    [diameter]=\"24\"\n                    *ngIf=\"loading\"\n                ></mat-spinner>\n            </button>\n        </div>\n        <\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n\n            [list] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowConfirmComponent {\n    public show_spaces = false;\n    public show_people = false;\n    public loading = false;\n\n    public readonly postForm = async () => {\n        this.loading = true;\n        await this._state.postForm().catch((_) => notifyError(_));\n        this.loading = false;\n    };\n\n    public get form() {\n        return this._state.form;\n    }\n\n    constructor(private _state: EventFormService) {}\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, 'catering').toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CateringOrder, CateringStateService } from '@placeos/catering';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'detailed-book-space-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div\n                    class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                >\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>Date</label>\n                        <a-date-field formControlName=\"date\">\n                            Date and time must be in the future\n                        </a-date-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>Start Time</label>\n                        <a-time-field\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>End Time</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"max_duration\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n            </section>\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div\n                    class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                    *ngIf=\"can_book_for_others\"\n                >\n                    <label>Host</label>\n                    <a-user-search-field\n                        formControlName=\"organiser\"\n                    ></a-user-search-field>\n                </div>\n                <div\n                    class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                >\n                    <label>Attendees</label>\n                    <a-user-list-field\n                        [hideActions]=\"hide_actions\"\n                        formControlName=\"attendees\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto\">\n                    <div class=\"flex flex-col\">\n                        <label>Meeting Subject <span>*</span></label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"title\"\n                                placeholder=\"Meeting title\"\n                            />\n                            <mat-error>Meeting Subject is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col resize-y\">\n                        <label>Notes</label>\n                        <mat-form-field appearance=\"outline\">\n                            <textarea\n                                matInput\n                                formControlName=\"body\"\n                                placeholder=\"Add meeting notes here...\"\n                            ></textarea>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col mb-4\" *ngIf=\"has_catering\">\n                        <label>Catering</label>\n                        <an-action-field (onAction)=\"editCatering()\">\n                            <div\n                                class=\"opacity-40\"\n                                *ngIf=\"!form?.value.catering?.length\"\n                            >\n                                Add catering\n                            </div>\n                            <div\n                                class=\"flex items-center\"\n                                *ngIf=\"form?.value.catering?.length\"\n                            >\n                                <div class=\"flex-1 w-1/2\">\n                                    {{ form?.value.catering[0].item_count }}\n                                    item(s)\n                                </div>\n                                <div class=\"text-xs opacity-60 px-4\">\n                                    {{\n                                        form?.value.catering[0].total_cost / 100\n                                            | currency\n                                    }}\n                                </div>\n                            </div>\n                        </an-action-field>\n                    </div>\n                </div>\n            </section>\n        </form>\n    `,\n    styles: [``],\n})\nexport class DetailBookSpaceFormComponent {\n    @Input() public form: FormGroup;\n\n    public get has_catering() {\n        return !!this._settings.get('app.events.has_catering');\n    }\n\n    public get hide_actions() {\n        return !!this._settings.get('app.events.hide_user_actions');\n    }\n\n    public get can_book_for_others() {\n        return this._settings.get('app.events.can_book_for_others');\n    }\n\n    public get max_duration() {\n        return this._settings.get('app.events.max_duration') || 4 * 60;\n    }\n\n    public readonly editCatering = async () =>\n        this.form.patchValue({\n            catering: [\n                await this._catering.manageCateringOrder(\n                    (this.form.value.catering\n                        ? this.form.value.catering[0]\n                        : null) || new CateringOrder()\n                ),\n            ],\n        });\n\n    constructor(\n        private _catering: CateringStateService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { EventFormService } from '@placeos/events';\nimport { addDays, addMinutes, roundToNearestMinutes, setHours } from 'date-fns';\n\n@Component({\n    selector: 'space-flow-form',\n    template: `\n        <section form class=\"flex-1 min-h-[50%]\">\n            <h2\n                class=\"text-xl uppercase font-medium mb-2 mt-4 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                {{ is_edit ? 'Edit' : 'Detailed' }} Space Booking\n            </h2>\n            <detailed-book-space-form [form]=\"form\"></detailed-book-space-form>\n            <div\n                class=\"flex flex-col sm:flex-row items-center justify-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n            >\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem] inverse\"\n                    mat-button\n                    clear\n                    (click)=\"clearForm()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">clear</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Cancel Edit' : 'Clear Form'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    mat-button\n                    find-space\n                    (click)=\"findSpace()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">search</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Update Spaces' : 'Find Space'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    mat-button\n                    standalone\n                    (click)=\"confirmBooking()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">event_available</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Confirm changes' : 'Book without Space'\n                        }}</span>\n                    </div>\n                </button>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: auto;\n            }\n\n            [quick] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFormComponent {\n    public time = 0;\n    public capacity = 0;\n\n    public readonly quick_times = [\n        { name: 'Now', value: 0 },\n        { name: 'Later Today', value: 120 },\n        {\n            name: 'Tomorrow',\n            value: setHours(addDays(new Date(), 1), 9).valueOf(),\n        },\n    ];\n\n    public readonly quick_capacities = [\n        { name: 'Any Capacity', value: 0 },\n        { name: 'Small (1 - 4)', value: 1 },\n        { name: 'Medium (5 - 12)', value: 5 },\n        { name: 'Large (13 - 32)', value: 13 },\n        { name: 'Huge (32+)', value: 33 },\n    ];\n\n    public get is_edit() {\n        return !!this.form?.get('id')?.value;\n    }\n\n    public get form() {\n        return this._state.form;\n    }\n\n    public readonly clearForm = () => {\n        this.time = this.capacity = 0;\n        this._state.clearForm();\n    };\n\n    constructor(private _state: EventFormService, private _router: Router) {}\n\n    public quickBook() {\n        this.form.patchValue({\n            date: (this.time < 24 * 60\n                ? addMinutes(\n                      roundToNearestMinutes(new Date(), { nearestTo: 5 }),\n                      this.time\n                  )\n                : setHours(addDays(new Date(), 1), 8)\n            ).valueOf(),\n            title: 'Ad-hoc Meeting',\n        });\n        this._state.setOptions({ capacity: this.capacity });\n        this._router.navigate(['/book', 'spaces', 'find']);\n    }\n\n    public findSpace() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'spaces', 'find']);\n    }\n\n    public confirmBooking() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'spaces', 'confirm']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\n\n@Component({\n    selector: 'placeos-book-space-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'find'\">\n                    <space-flow-find></space-flow-find>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <space-flow-confirm></space-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        [calendar]=\"last_success?.host\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <space-flow-form></space-flow-form>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookSpaceFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: EventFormService,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { BookComponent } from './book.component';\nimport { BookCodeFlowComponent } from './code-flow.component';\nimport { BookDeskFlowComponent } from './desk-flow.component';\nimport { DeskFlowConfirmComponent } from './desk-flow/confirm.component';\nimport { DeskFlowFormComponent } from './desk-flow/form.component';\nimport { DeskFlowDetailedFormComponent } from './desk-flow/detailed-form.component';\nimport { DeskFlowMapComponent } from './desk-flow/map.component';\nimport { FlowSuccessComponent } from './flow-success.component';\nimport { BookSpaceFlowComponent } from './space-flow.component';\nimport { SpaceFlowConfirmComponent } from './space-flow/confirm.component';\nimport { DetailBookSpaceFormComponent } from './space-flow/detailed-form.component';\nimport { SpaceFlowFindItemComponent } from './space-flow/find-item.component';\nimport { SpaceFlowFindComponent } from './space-flow/find.component';\nimport { SpaceFlowFormComponent } from './space-flow/form.component';\nimport { SharedComponentModule } from '../components/shared.module';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: BookComponent,\n        children: [\n            { path: 'code', component: BookCodeFlowComponent },\n            { path: 'desks', redirectTo: 'desks/form' },\n            { path: 'desks/:step', component: BookDeskFlowComponent },\n            { path: 'spaces', redirectTo: 'spaces/form' },\n            { path: 'spaces/:step', component: BookSpaceFlowComponent },\n            { path: '*', redirectTo: 'spaces/form' },\n        ],\n    },\n    { path: '*', redirectTo: 'spaces/form' },\n];\n\n@NgModule({\n    declarations: [\n        BookComponent,\n        BookSpaceFlowComponent,\n        SpaceFlowFormComponent,\n        SpaceFlowFindComponent,\n        SpaceFlowFindItemComponent,\n        SpaceFlowConfirmComponent,\n        DetailBookSpaceFormComponent,\n        BookDeskFlowComponent,\n        DeskFlowFormComponent,\n        DeskFlowDetailedFormComponent,\n        DeskFlowMapComponent,\n        DeskFlowConfirmComponent,\n        BookCodeFlowComponent,\n        FlowSuccessComponent,\n    ],\n    imports: [\n        CommonModule,\n        SharedComponentModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatButtonToggleModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BookModule {}\n"],"sourceRoot":"webpack:///","file":"apps_workplace_src_app_book_book_module_ts.js"}