{"version":3,"sources":["./node_modules/@angular/material/fesm2015/button-toggle.js","./apps/workplace/src/app/book/book.component.ts","./node_modules/qr-scanner/src/qr-scanner.js","./apps/workplace/src/app/book/code-flow.component.ts","./apps/workplace/src/app/book/desk-flow/detailed-form.component.ts","./apps/workplace/src/app/book/desk-flow/map.component.ts","./apps/workplace/src/app/book/desk-flow/confirm.component.ts","./apps/workplace/src/app/book/flow-success.component.ts","./apps/workplace/src/app/book/desk-flow/form.component.ts","./apps/workplace/src/app/book/desk-flow.component.ts","./apps/workplace/src/app/book/space-flow/find-item.component.ts","./apps/workplace/src/app/book/space-flow/find.component.ts","./apps/workplace/src/app/book/space-flow/confirm.component.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./apps/workplace/src/app/book/space-flow/detailed-form.component.ts","./apps/workplace/src/app/book/space-flow/form.component.ts","./apps/workplace/src/app/book/space-flow.component.ts","./apps/workplace/src/app/book/book.module.ts"],"names":["_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","ɵfac","t","ɵdir","type","selectors","contentQueries","rf","ctx","dirIndex","MatButtonToggle","_t","hostAttrs","hostVars","hostBindings","vertical","inputs","outputs","exportAs","features","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_isPrechecked","monitor","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","ɵcmp","viewQuery","first","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","_onButtonClick","_r0","buttonId","directives","styles","encapsulation","changeDetection","MatButtonToggleModule","ɵmod","ɵinj","imports","BookComponent","QrScanner","navigator","mediaDevices","enumerateDevices","devices","device","kind","catch","video","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","bind","canvasSize","DEFAULT_CANVAS_SIZE","preferredFacingMode","$video","$canvas","document","createElement","_onDecode","_preferredFacingMode","_active","_paused","_flashOn","console","warn","width","height","_sourceRect","x","y","_updateSourceRect","_onPlay","_onVisibilityChange","playsInline","muted","disablePictureInPicture","addEventListener","_qrEnginePromise","createQrEngine","window","track","srcObject","getVideoTracks","ImageCapture","getPhotoCapabilities","result","fillLightMode","includes","error","reject","_setFlash","removeEventListener","stop","_postWorkerMessage","location","protocol","hidden","clearTimeout","_offTimeout","play","facingMode","_getCameraStream","stream","_getFacingMode","_setVideoMirror","e","pause","setTimeout","tracks","getTracks","imageOrFileOrUrl","sourceRect","qrEngine","canvas","fixedCanvasSize","alsoTryWithoutSourceRect","gotExternalWorker","Worker","promise","all","_loadImage","engine","image","canvasContext","_drawToCanvas","postMessage","data","timeout","onMessage","onError","NO_QR_CODE_FOUND","message","imageData","getImageData","buffer","detect","scanResults","rawValue","finally","scanImage","red","green","blue","useIntegerApproximation","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","supportedFormats","indexOf","formats","_scanFrame","start","smallestDimension","Math","min","videoWidth","videoHeight","sourceRectSize","round","paused","ended","requestAnimationFrame","readyState","log","exact","constraintsToTry","constraint","_getMatchingCameraStream","getUserMedia","shift","on","hasFlash","applyConstraints","advanced","torch","style","transform","videoStream","videoTrack","test","label","sourceRectX","sourceRectY","sourceRectWidth","sourceRectHeight","context","getContext","alpha","imageSmoothingEnabled","drawImage","imageOrFileOrBlobOrUrl","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","Blob","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad","qrEngineOrQrEnginePromise","BookCodeFlowComponent","_router","is_scanning","menu","_video_el","_qr_scanner","r","handleQrCode","url","regex","params","match","exec","navigate","split","DeskFlowDetailedFormComponent","_state","_org","_settings","buildings","building_list","levels","active_levels","recurrence_options","setOptions","o","building","bld","get","DeskFlowMapComponent","_explore","map_url","map_styles","positions","map_positions","map_features","actions","map_actions","labels","map_labels","level","desks","available_assets","loading","form","option_details","combineLatest","valueChanges","pipe","startWith","recurrence","pattern","end","recurr_end","date","interval","days_of_week","details","format","zone_id","setLevel","_active_desk","BehaviorSubject","makeBooking","confirmPost","getValue","subscription","assets","debounceTime","subscribe","available","status","desk","active","bookable","d","map_id","fill","opacity","push","action","callback","setActiveDesk","setStyles","setActions","setFeatures","active_desk","content","zone","next","patchValue","asset_id","zones","parent_id","$event","stopPropagation","DeskFlowConfirmComponent","FlowSuccessComponent","route","DeskFlowFormComponent","time","quick_times","setHours","addDays","Date","valueOf","clearForm","initialised","_","levelsForBuilding","addMinutes","roundToNearestMinutes","nearestTo","title","findDesk","markAllAsTouched","valid","BookDeskFlowComponent","_route","view","last_success","toPromise","loadForm","newForm","booking_type","paramMap","param","has","setView","queryParamMap","SpaceFlowFindItemComponent","_dialog","bookChange","book","open","maxWidth","maxHeight","item","space","bookSpace","viewLocation","SpaceFlowFindComponent","_spaces","book_space","quick_capacities","space_list","active_building","spaces","available_spaces","opts","take","zone_ids","setBuilding","s","confirmBooking","resources","system","SpaceFlowConfirmComponent","show_spaces","show_people","postForm","RULE_TYPES","CateringConfigModalComponent","_data","rule_types","rulesets","config","set","rules","i","JSON","stringify","floor","random","parse","reason","metadata","saveChanges","CateringItemModalComponent","description","category","unit_price","tags","accept_points","discount_cap","separators","categories","controls","markAsDirty","input","tag_list","trim","setValue","existing_tag","index","splice","CateringItemOptionModalComponent","option","types","new_option","parent","concat","cateringItemAvailable","is_available","rule","matches","condition","isAfter","isBefore","duration","ext","CateringOrderModalComponent","menu_items","order","getCateringConfig","list","cat","updateMenuQuantities","choose_options","old_item","items","itm","reduce","c","opt","selectOptions","new_item","addItem","options_string","quantity","amount","sort","a","b","localeCompare","join","show_order_details","CateringOrderOptionsModalComponent","option_state","groups","group_list","saveOptions","CateringImportMenuModalComponent","element","target","files","file","fileReader","FileReader","toLowerCase","readAsText","CateringStateService","_menu","_loading","_currency","asObservable","currency","getCateringForZone","ref","race","componentInstance","afterClosed","close","findIndex","updateMenu","icon","class","updateConfig","updated_menu","DetailBookSpaceFormComponent","_catering","editCatering","catering","manageCateringOrder","SpaceFlowFormComponent","capacity","findSpace","BookSpaceFlowComponent","ROUTES","path","component","children","redirectTo","BookModule"],"mappings":"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","file":"apps_workplace_src_app_book_book_module_ts.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'placeos-book',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2\">\n            <nav-menu class=\"relative z-10\"></nav-menu>\n            <main\n                class=\"relative flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookComponent {}\n","export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        if (!navigator.mediaDevices) return Promise.resolve(false);\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\n        // given. That doesn't matter for us though as we don't require labels.\n        return navigator.mediaDevices.enumerateDevices()\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\n            .catch(() => false);\n    }\n\n    constructor(\n        video,\n        onDecode,\n        canvasSizeOrOnDecodeError = this._onDecodeError.bind(this),\n        canvasSize = QrScanner.DEFAULT_CANVAS_SIZE,\n        preferredFacingMode = 'environment'\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._preferredFacingMode = preferredFacingMode;\n        this._active = false;\n        this._paused = false;\n        this._flashOn = false;\n\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\n            // legacy function signature where canvas size is the third argument\n            canvasSize = canvasSizeOrOnDecodeError;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._onDecodeError = canvasSizeOrOnDecodeError;\n        }\n\n        this.$canvas.width = canvasSize;\n        this.$canvas.height = canvasSize;\n        this._sourceRect = {\n            x: 0,\n            y: 0,\n            width: canvasSize,\n            height: canvasSize\n        };\n\n        this._updateSourceRect = this._updateSourceRect.bind(this);\n        this._onPlay = this._onPlay.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        this.$video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        this.$video.muted = true;\n        this.$video.disablePictureInPicture = true;\n        this.$video.addEventListener('loadedmetadata', this._updateSourceRect);\n        this.$video.addEventListener('play', this._onPlay);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    /* async */\n    hasFlash() {\n        if (!('ImageCapture' in window)) {\n            return Promise.resolve(false);\n        }\n\n        const track = this.$video.srcObject ? this.$video.srcObject.getVideoTracks()[0] : null;\n        if (!track) {\n            return Promise.reject('Camera not started or not available');\n        }\n\n        const imageCapture = new ImageCapture(track);\n        return imageCapture.getPhotoCapabilities()\n            .then((result) => {\n                return result.fillLightMode.includes('flash');\n            })\n            .catch((error) => {\n                console.warn(error);\n                return false;\n            });\n    }\n\n    isFlashOn() {\n      return this._flashOn;\n    }\n\n    /* async */\n    toggleFlash() {\n      return this._setFlash(!this._flashOn);\n    }\n\n    /* async */\n    turnFlashOff() {\n      return this._setFlash(false);\n    }\n\n    /* async */\n    turnFlashOn() {\n      return this._setFlash(true);\n    }\n\n    destroy() {\n        this.$video.removeEventListener('loadedmetadata', this._updateSourceRect);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        this._paused = false;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        clearTimeout(this._offTimeout);\n        this._offTimeout = null;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        let facingMode = this._preferredFacingMode;\n        return this._getCameraStream(facingMode, true)\n            .catch(() => {\n                // We (probably) don't have a camera of the requested facing mode\n                facingMode = facingMode === 'environment' ? 'user' : 'environment';\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\n            })\n            .then(stream => {\n                // Try to determine the facing mode from the stream, otherwise use our guess. Note that the guess is not\n                // always accurate as Safari returns cameras of different facing mode, even for exact constraints.\n                facingMode = this._getFacingMode(stream) || facingMode;\n                this.$video.srcObject = stream;\n                this.$video.play();\n                this._setVideoMirror(facingMode);\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    pause() {\n        this._paused = true;\n        if (!this._active) {\n            return;\n        }\n        this.$video.pause();\n        if (this._offTimeout) {\n            return;\n        }\n        this._offTimeout = setTimeout(() => {\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n            for (const track of tracks) {\n                track.stop(); //  note that this will also automatically turn the flashlight off\n            }\n            this.$video.srcObject = null;\n            this._offTimeout = null;\n        }, 300);\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, sourceRect=null, qrEngine=null, canvas=null, fixedCanvasSize=false,\n                     alsoTryWithoutSourceRect=false) {\n        const gotExternalWorker = qrEngine instanceof Worker;\n\n        let promise = Promise.all([\n            qrEngine || QrScanner.createQrEngine(),\n            QrScanner._loadImage(imageOrFileOrUrl),\n        ]).then(([engine, image]) => {\n            qrEngine = engine;\n            let canvasContext;\n            [canvas, canvasContext] = this._drawToCanvas(image, sourceRect, canvas, fixedCanvasSize);\n\n            if (qrEngine instanceof Worker) {\n                if (!gotExternalWorker) {\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n                    qrEngine.postMessage({ type: 'inversionMode', data: 'both' });\n                }\n                return new Promise((resolve, reject) => {\n                    let timeout, onMessage, onError;\n                    onMessage = event => {\n                        if (event.data.type !== 'qrResult') {\n                            return;\n                        }\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve(event.data.data);\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (e) => {\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngine.addEventListener('message', onMessage);\n                    qrEngine.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n                    qrEngine.postMessage({\n                        type: 'decode',\n                        data: imageData\n                    }, [imageData.data.buffer]);\n                });\n            } else {\n                return new Promise((resolve, reject) => {\n                    const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\n                    qrEngine.detect(canvas).then(scanResults => {\n                        if (!scanResults.length) {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        } else {\n                            resolve(scanResults[0].rawValue);\n                        }\n                    }).catch((e) => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\n                });\n            }\n        });\n\n        if (sourceRect && alsoTryWithoutSourceRect) {\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, fixedCanvasSize));\n        }\n\n        promise = promise.finally(() => {\n            if (gotExternalWorker) return;\n            QrScanner._postWorkerMessage(qrEngine, 'close');\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\n        // well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\n        // and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    /* async */\n    static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\n        return ('BarcodeDetector' in window ? BarcodeDetector.getSupportedFormats() : Promise.resolve([]))\n            .then((supportedFormats) => supportedFormats.indexOf('qr_code') !== -1\n                ? new BarcodeDetector({ formats: ['qr_code'] })\n                : new Worker(workerPath)\n            );\n    }\n\n    _onPlay() {\n        this._updateSourceRect();\n        this._scanFrame();\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _updateSourceRect() {\n        const smallestDimension = Math.min(this.$video.videoWidth, this.$video.videoHeight);\n        const sourceRectSize = Math.round(2 / 3 * smallestDimension);\n        this._sourceRect.width = this._sourceRect.height = sourceRectSize;\n        this._sourceRect.x = (this.$video.videoWidth - sourceRectSize) / 2;\n        this._sourceRect.y = (this.$video.videoHeight - sourceRectSize) / 2;\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n            this._qrEnginePromise\n                .then((qrEngine) => QrScanner.scanImage(this.$video, this._sourceRect, qrEngine, this.$canvas, true))\n                .then(this._onDecode, (error) => {\n                    if (!this._active) return;\n                    const errorMessage = error.message || error;\n                    if (errorMessage.indexOf('service unavailable') !== -1) {\n                        // When the native BarcodeDetector crashed, create a new one\n                        this._qrEnginePromise = QrScanner.createQrEngine();\n                    }\n                    this._onDecodeError(error);\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _onDecodeError(error) {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    _getCameraStream(facingMode, exact = false) {\n        const constraintsToTry = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n\n        if (facingMode) {\n            if (exact) {\n                facingMode = { exact: facingMode };\n            }\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\n        }\n        return this._getMatchingCameraStream(constraintsToTry);\n    }\n\n    _getMatchingCameraStream(constraintsToTry) {\n        if (!navigator.mediaDevices || constraintsToTry.length === 0) {\n            return Promise.reject('Camera not found.');\n        }\n        return navigator.mediaDevices.getUserMedia({\n            video: constraintsToTry.shift()\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\n    }\n\n    /* async */\n    _setFlash(on) {\n        return this.hasFlash().then((hasFlash) => {\n            if (!hasFlash) return Promise.reject('No flash available');\n            // Note that the video track is guaranteed to exist at this point\n            return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n                advanced: [{ torch: on }],\n            });\n        }).then(() => this._flashOn = on);\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    _getFacingMode(videoStream) {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    static _drawToCanvas(image, sourceRect=null, canvas=null, fixedCanvasSize=false) {\n        canvas = canvas || document.createElement('canvas');\n        const sourceRectX = sourceRect && sourceRect.x? sourceRect.x : 0;\n        const sourceRectY = sourceRect && sourceRect.y? sourceRect.y : 0;\n        const sourceRectWidth = sourceRect && sourceRect.width? sourceRect.width : image.width || image.videoWidth;\n        const sourceRectHeight = sourceRect && sourceRect.height? sourceRect.height : image.height || image.videoHeight;\n        if (!fixedCanvasSize && (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight)) {\n            canvas.width = sourceRectWidth;\n            canvas.height = sourceRectHeight;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(image, sourceRectX, sourceRectY, sourceRectWidth, sourceRectHeight, 0, 0, canvas.width, canvas.height);\n        return [canvas, context];\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrBlobOrUrl) {\n        if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof(imageOrFileOrBlobOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n\n    /* async */\n    static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\n        return Promise.resolve(qrEngineOrQrEnginePromise).then((qrEngine) => {\n            if (!(qrEngine instanceof Worker)) return;\n            qrEngine.postMessage({ type, data });\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n","import {\n    Component,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    OnDestroy,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport QrScanner from 'qr-scanner';\n\n@Component({\n    selector: 'book-code-flow',\n    template: `\n        <div\n            class=\"flex-1 overflow-hidden flex items-center justify-center bg-black relative\"\n        >\n            <video\n                class=\"min-w-full min-h-full object-cover\"\n                id=\"video\"\n                #video\n            ></video>\n            <div\n                class=\"absolute text-white text-center inset-0 flex flex-col items-center justify-center\"\n            >\n                <div\n                    class=\"flex flex-col z-10 justify-end items-center relative\"\n                    *ngIf=\"is_scanning\"\n                >\n                    <h2 class=\"text-3xl mb-1 uppercase subpixel-antialiased\">\n                        Scan QR Code\n                    </h2>\n                    <span class=\" mb-4 \">\n                        Scan the QR code outisde a PlaceOS room or space.\n                    </span>\n                </div>\n                <div\n                    class=\"flex flex-col z-10 justify-end items-center relative\"\n                    *ngIf=\"!is_scanning\"\n                >\n                    <h2 class=\"text-3xl mb-1 uppercase subpixel-antialiased\">\n                        Enter Room ID\n                    </h2>\n                    <span class=\"mb-4\">\n                        Enter the room ID number outisde a PlaceOS room or\n                        space.\n                    </span>\n                </div>\n                <div class=\"flex items-center justify-center\">\n                    <div\n                        box\n                        class=\"rounded-2xl h-64 w-64 transition-all flex items-center justify-center p-8 m-8 space-x-2\"\n                        [class.input]=\"!is_scanning\"\n                    >\n                        <span class=\"uppercase\">Booking ID</span>\n                        <input\n                            matInput\n                            class=\"border-none bg-none w-full text-3xl text-left\"\n                            [(ngModel)]=\"room_code\"\n                            name=\"booking-id\"\n                            placeholder=\"e.g. 12102910\"\n                        />\n                    </div>\n                </div>\n                <div\n                    class=\"m-4 p-2 flex items-center space-x-2 bg-white bg-opacity-50 rounded\"\n                >\n                    <button\n                        mat-button\n                        [class]=\"\n                            'flex-1 text-black border-none w-40 ' +\n                            (is_scanning\n                                ? 'bg-white'\n                                : 'bg-transparent hover:bg-white bg-opacity-50')\n                        \"\n                        (click)=\"is_scanning = true\"\n                    >\n                        Scan Code\n                    </button>\n                    <button\n                        mat-button\n                        [class]=\"\n                            'flex-1 text-black border-none w-40 ' +\n                            (!is_scanning\n                                ? 'bg-white'\n                                : 'bg-transparent hover:bg-white bg-opacity-50')\n                        \"\n                        (click)=\"is_scanning = false\"\n                    >\n                        Enter Code\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [box] {\n                box-shadow: 0px 0px 0px 100vw rgba(0, 0, 0, 0.5);\n            }\n\n            [box] > * {\n                display: none;\n            }\n\n            [box].input {\n                width: 32rem !important;\n                max-width: calc(100% - 2rem) !important;\n                padding: 1rem !important;\n                height: 4rem !important;\n                color: black !important;\n                background: white;\n                box-shadow: 0px 0px 0px 100vw rgba(0, 0, 0, 0.8);\n            }\n\n            [box].input > * {\n                display: initial;\n            }\n\n            [box] span {\n                font-family: var(--heading-font);\n                font-weight: 500;\n                text-transform: uppercase;\n                letter-spacing: 0.05em;\n            }\n        `,\n    ],\n})\nexport class BookCodeFlowComponent implements OnInit, OnDestroy {\n    /** Boolean to toggle scan/code */\n    public is_scanning = true;\n    /** Room Code input value */\n    public room_code: string;\n    /** Menu event */\n    @Output() public menu = new EventEmitter(false);\n    /** Video element to emit camera feed */\n    @ViewChild('video', { static: true })\n    private _video_el: ElementRef<HTMLVideoElement>;\n\n    private _qr_scanner;\n\n    constructor(private _router: Router) {}\n\n    public ngOnDestroy() {\n        if (this._video_el.nativeElement.srcObject) {\n            (this._video_el.nativeElement.srcObject as any)\n                .getTracks()\n                .forEach((track) => track?.stop());\n        }\n        this._qr_scanner?.stop();\n    }\n\n    public ngOnInit(): void {\n        if (!navigator.mediaDevices?.getUserMedia) return;\n        navigator.mediaDevices\n            .getUserMedia({ video: true })\n            .then((stream) => (this._video_el.nativeElement.srcObject = stream))\n            .catch((e) => console.error('Unable to fetch media devices!', e));\n        this._qr_scanner = new QrScanner(this._video_el.nativeElement, (r) =>\n            this.handleQrCode(r)\n        );\n        this._qr_scanner.start();\n    }\n\n    private handleQrCode(result: string) {\n        const url = result;\n        const hashindex = url.indexOf('/#/');\n        // could just whole page redirect to url\n        if (hashindex > 0) {\n            const regex = /[?&]([^=#]+)=([^&#]*)/g;\n            const params = {};\n            let match;\n            while ((match = regex.exec(url))) {\n                params[match[1]] = match[2];\n            }\n            this._router.navigate([url.split('/#')[1].split('?')[0]], params);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'detailed-book-desks-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div\n                class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n                *ngIf=\"allow_groups\"\n            >\n                <mat-button-toggle-group\n                    class=\"w-full\"\n                    [ngModel]=\"(options | async)?.group ? 'group' : 'single'\"\n                    (ngModelChange)=\"\n                        setOptions({\n                            group: $event === 'group'\n                        })\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    <mat-button-toggle class=\"w-1/2\" value=\"single\">\n                        Single\n                    </mat-button-toggle>\n                    <mat-button-toggle class=\"w-1/2\" value=\"group\">\n                        Group\n                    </mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/4\">\n                    <label>Date</label>\n                    <a-date-field formControlName=\"date\">\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n                <div\n                    class=\"flex flex-col flex-1 w-full sm:w-1/4\"\n                    *ngIf=\"(buildings | async)?.length > 1\"\n                >\n                    <label>Building</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            placeholder=\"Select building\"\n                            [(ngModel)]=\"building\"\n                            (ngModelChange)=\"\n                                setOptions({\n                                    zone_id: $event?.id\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div\n                    class=\"flex flex-col flex-1 w-full sm:w-1/4\"\n                    *ngIf=\"(levels | async)?.length > 1\"\n                >\n                    <label>Level</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            placeholder=\"Any Level\"\n                            ngModel\n                            [disabled]=\"!building\"\n                            (ngModelChange)=\"\n                                setOptions({\n                                    zone_id: $event || building.id\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            <mat-option\n                                *ngFor=\"let lvl of levels | async\"\n                                [value]=\"lvl.id\"\n                            >\n                                {{ lvl.display_name || lvl.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                <label>Reason</label>\n                <mat-form-field class=\"w-full\" appearance=\"outline\">\n                    <input\n                        matInput\n                        formControlName=\"description\"\n                        placeholder=\"Reason for booking...\"\n                    />\n                </mat-form-field>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"(options | async)?.group\"\n            >\n                <label>Group Members</label>\n                <a-user-list-field\n                    [simple]=\"true\"\n                    [ngModel]=\"(options | async)?.members || []\"\n                    (ngModelChange)=\"setOptions({ members: $event })\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                ></a-user-list-field>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"can_recurr\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Recurrence Period</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [ngModel]=\"(options | async)?.recurrence_pattern\"\n                            (ngModelChange)=\"setOptions({ pattern: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"None\"\n                        >\n                            <mat-option value=\"none\">None</mat-option>\n                            <mat-option\n                                *ngFor=\"let opt of recurrence_options\"\n                                [value]=\"opt\"\n                            >\n                                <span class=\"capitalize\">{{ opt }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Recurrence End</label>\n                    <a-date-field\n                        [disabled]=\"\n                            !(options | async)?.pattern ||\n                            (options | async)?.pattern === 'none'\n                        \"\n                        [ngModel]=\"\n                            (options | async)?.recurr_end || form?.value?.date\n                        \"\n                        (ngModelChange)=\"\n                            setOptions({\n                                recurr_end: $event\n                            })\n                        \"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    >\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"(features | async)?.length\"\n            >\n                <label>Desk Features</label>\n                <mat-form-field class=\"w-full\" appearance=\"outline\">\n                    <mat-select\n                        multiple\n                        [ngModel]=\"(options | async)?.features || []\"\n                        (ngModelChange)=\"\n                            setOptions({\n                                features: $event || []\n                            })\n                        \"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        placeholder=\"Any Feature\"\n                    >\n                        <mat-option\n                            *ngFor=\"let opt of features | async\"\n                            class=\"capitalize\"\n                            [value]=\"opt\"\n                        >\n                            {{ opt }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    `,\n    styles: [``],\n})\nexport class DeskFlowDetailedFormComponent {\n    @Input() public form: FormGroup;\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass, formatRecurrence } from '@placeos/common';\nimport { ExploreStateService } from '@placeos/explore';\nimport { Desk } from '@placeos/organisation';\nimport { format } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { debounceTime, map, startWith } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-flow-map',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'desks', 'form']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div class=\"flex flex-col flex-1 h-1/2 w-full \">\n            <h2 class=\"text-2xl px-4 pt-4 text-center\">Available Desks</h2>\n            <an-action-field\n                class=\"my-4 mx-auto w-[640px] max-w-[calc(100vw-2rem)]\"\n                [matMenuTriggerFor]=\"menu\"\n            >\n                {{ (option_details | async) || 'No Filters' }}\n            </an-action-field>\n            <mat-menu #menu=\"matMenu\">\n                <div\n                    (click)=\"$event.stopPropagation(); ($event.preventDefault)\"\n                    class=\"pt-4 max-h-[65vh] overflow-auto\"\n                >\n                    <detailed-book-desks-form\n                        [form]=\"form\"\n                    ></detailed-book-desks-form>\n                </div>\n            </mat-menu>\n            <div listing class=\"flex flex-1 h-1/2 relative space-x-2\">\n                <ul\n                    class=\"list-style-none w-full sm:w-[20rem] bg-gray-100 p-2 pb-32 overflow-auto h-full rounded-tr-lg space-y-2\"\n                >\n                    <div class=\"px-2 sticky top-0 bg-gray-100 w-full z-10\">\n                        {{ (desks | async)?.length || '0' }} matches available\n                    </div>\n                    <li\n                        matRipple\n                        *ngFor=\"let desk of desks | async\"\n                        [attr.desk-id]=\"desk.id\"\n                        class=\"flex items-center p-2 bg-white rounded shadow cursor-pointer space-x-2 min-h-[5rem] border\"\n                        [class.border-primary]=\"active_desk?.id === desk.id\"\n                        (click)=\"setActiveDesk(desk)\"\n                    >\n                        <app-icon class=\"text-2xl\">place</app-icon>\n                        <div class=\"flex flex-col w-1/2 flex-1\">\n                            <div name class=\"\">{{ desk.name }}</div>\n                            <div level class=\"text-xs\">\n                                {{\n                                    desk.zone?.display_name ||\n                                        desk.zone?.name ||\n                                        '&lt;No Level&gt;'\n                                }}\n                            </div>\n                            <div features class=\"w-full flex flex-wrap\">\n                                <div\n                                    *ngFor=\"let feat of desk.features || []\"\n                                    class=\"text-xs bg-primary text-white rounded-xl px-2 py-1 mt-1 mr-2\"\n                                >\n                                    {{ feat }}\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n                <div\n                    class=\"hidden sm:block flex-1 bg-gray-200 rounded-tl-lg border-l border-t border-gray-300 relative overflow-hidden h-full\"\n                >\n                    <i-map\n                        [src]=\"url | async\"\n                        [zoom]=\"(positions | async)?.zoom\"\n                        [center]=\"(positions | async)?.center\"\n                        [styles]=\"styles | async\"\n                        [features]=\"features | async\"\n                        [actions]=\"actions | async\"\n                        [labels]=\"labels | async\"\n                        [focus]=\"active_desk?.map_id || active_desk?.id\"\n                    ></i-map>\n                    <div\n                        class=\"absolute top-2 left-2 bg-white rounded-3xl h-10 px-3 flex items-center border border-gray-300\"\n                        *ngIf=\"level | async\"\n                    >\n                        {{\n                            (level | async)?.display_name ||\n                                (level | async)?.name\n                        }}\n                    </div>\n                </div>\n                <div\n                    *ngIf=\"loading | async\"\n                    class=\"absolute inset-0 bg-white bg-opacity-60 flex flex-col items-center justify-center space-y-2 !m-0 z-20\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>{{ loading | async }}</p>\n                </div>\n                <div\n                    selection\n                    class=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 p-2 bg-white shadow rounded w-[24rem] max-w-[calc(100vw-1rem)] space-y-2 !m-0 border border-gray-200\"\n                    *ngIf=\"active_desk\"\n                >\n                    <div class=\"\">\n                        <div name class=\"\">{{ active_desk.name }}</div>\n                        <div level class=\"text-xs\">\n                            {{\n                                active_desk.zone?.display_name ||\n                                    active_desk.zone.name ||\n                                    '&lt;No Level&gt;'\n                            }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <button\n                            mat-button\n                            class=\"inverse flex-1\"\n                            (click)=\"setActiveDesk(null)\"\n                        >\n                            Clear\n                        </button>\n                        <button\n                            mat-button\n                            class=\"flex-1\"\n                            (click)=\"makeBooking()\"\n                        >\n                            Book\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n        `,\n    ],\n})\nexport class DeskFlowMapComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._explore.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._explore.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._explore.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._explore.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._explore.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._explore.map_labels;\n    public readonly level = this._explore.level;\n\n    public readonly desks = this._state.available_assets;\n\n    public readonly loading = this._state.loading;\n\n    public readonly form = this._state.form;\n\n    public readonly option_details = combineLatest([\n        this._state.options,\n        this.form.valueChanges.pipe(startWith({})),\n    ]).pipe(\n        map(([options]) => {\n            const form = this._state.form;\n            const recurrence = formatRecurrence({\n                pattern: options.pattern as any,\n                end: options.recurr_end,\n                start: form.value.date,\n                interval: 1,\n                days_of_week: -1,\n            });\n            const details = `${format(form.value.date, 'dd MMM yyyy')}${\n                options.pattern && options.pattern !== 'none'\n                    ? ', ' + recurrence\n                    : ''\n            }${options.group ? ', ' + options.group : ''}, ${\n                options.features?.length || 'Any'\n            } Feature${(options.features?.length || 0) < 2 ? '' : 's'}`;\n            if (options.zone_id) this._explore.setLevel(options.zone_id);\n            return details;\n        })\n    );\n\n    private _active_desk = new BehaviorSubject<Desk>(null);\n\n    public readonly makeBooking = () => this._state.confirmPost();\n\n    public get active_desk(): Desk {\n        return this._active_desk.getValue();\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _explore: ExploreStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'assets-statue',\n            combineLatest([\n                this._state.assets,\n                this._state.available_assets,\n                this._active_desk,\n            ])\n                .pipe(debounceTime(200))\n                .subscribe(([assets, available]) => {\n                    const status = {};\n                    const actions = [];\n                    for (const desk of assets) {\n                        const active =\n                            desk.bookable &&\n                            available.find((d) => d.id === desk.id);\n                        status[`#${desk.map_id || desk.id}`] = {\n                            fill: desk.bookable\n                                ? available.find((d) => d.id === desk.id)\n                                    ? '#43a047'\n                                    : '#e53935'\n                                : '#999',\n                            opacity: 0.6,\n                        };\n                        if (active)\n                            actions.push({\n                                id: desk.map_id || desk.id,\n                                action: 'click',\n                                callback: () => this.setActiveDesk(desk as any),\n                            });\n                    }\n                    this._explore.setStyles('desks', status);\n                    this._explore.setActions('desks', actions);\n                    this._explore.setFeatures(\n                        'desks',\n                        this.active_desk\n                            ? [\n                                  {\n                                      location:\n                                          this.active_desk.map_id ||\n                                          this.active_desk.id,\n                                      content: `\n                    <span class=\"flex h-2 w-2 rounded-full absolute top-1/4 left-1/4 transform -translate-x-1/2 -translate-y-1/2\" >\n                        <span class=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75\"></span>\n                        <span class=\"relative inline-flex rounded-full h-2 w-2 bg-primary\"></span>\n                    </span>`,\n                                  },\n                              ]\n                            : []\n                    );\n                })\n        );\n    }\n\n    public setActiveDesk(desk: Desk) {\n        this._explore.setLevel(desk?.zone?.id);\n        this._active_desk.next(desk);\n        this._state.form.patchValue({\n            asset_id: desk?.id,\n            zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : [],\n        });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'desk-flow-confirm',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'desks', 'map']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n        `,\n    ],\n})\nexport class DeskFlowConfirmComponent {}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'flow-success',\n    template: `\n        <div\n            name=\"success\"\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50\"\n        >\n            <div class=\"text-4xl rounded-full bg-white text-success mb-4\">\n                <app-icon>done</app-icon>\n            </div>\n            <div class=\"text-center text-lg text-white mb-4\">\n                Thank you, you {{ type }} booking was successful!<br />\n                An event has been added to your calendar\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-32\"\n                    [routerLink]=\"['/book', route]\"\n                    [queryParams]=\"{}\"\n                >\n                    New Booking\n                </a>\n                <a\n                    button\n                    mat-button\n                    class=\"w-32\"\n                    [routerLink]=\"['/schedule']\"\n                    [queryParams]=\"{ email: calendar }\"\n                >\n                    My Day\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class FlowSuccessComponent {\n    @Input() public calendar: string;\n    @Input() public route = 'spaces';\n    @Input() public type = 'space';\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addDays, setHours, addMinutes, roundToNearestMinutes } from 'date-fns';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-flow-form',\n    template: `\n        <section quick class=\"text-white\" *ngIf=\"!is_edit\">\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto pb-2\">\n                <h2 class=\"text-xl uppercase font-medium mb-2 mt-4\">\n                    Quick Book Desk\n                </h2>\n                <div class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2\">\n                    <mat-form-field\n                        class=\"sm:flex-2 h-[3.25rem]\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            name=\"time\"\n                            [(ngModel)]=\"time\"\n                            placeholder=\"Now\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of quick_times\"\n                                [value]=\"item.value\"\n                            >\n                                {{ item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"sm:flex-2 h-[3.25rem]\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            name=\"level\"\n                            [(ngModel)]=\"level\"\n                            placeholder=\"Any Level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of levels\"\n                                [value]=\"item.id\"\n                            >\n                                {{ item.display_name || item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <button\n                        class=\"sm:flex-1 h-[2.75rem] mt-1 mb-2\"\n                        mat-button\n                        (click)=\"quickBook()\"\n                    >\n                        <div class=\"flex items-center justify-center\">\n                            <app-icon class=\"text-xl\">search</app-icon>\n                            <span class=\"ml-2 mx-4\">Find Desk</span>\n                        </div>\n                    </button>\n                </div>\n            </div>\n        </section>\n        <section class=\"bg-gray-300\">\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto\">\n                <h2 class=\"text-xl uppercase font-medium my-4\">OR</h2>\n            </div>\n        </section>\n        <section form class=\"flex-1 min-h-[50%]\">\n            <h2\n                class=\"text-xl uppercase font-medium mb-2 mt-4 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                {{ is_edit ? 'Edit' : 'Detailed' }} Booking\n            </h2>\n            <detailed-book-desks-form [form]=\"form\"></detailed-book-desks-form>\n            <div class=\"mb-4 border-b border-gray-300 w-full\"></div>\n            <div\n                class=\"flex flex-col sm:flex-row items-center justify-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n            >\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem] inverse\"\n                    mat-button\n                    clear\n                    (click)=\"clearForm()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">clear</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Cancel Edit' : 'Clear Form'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    find\n                    mat-button\n                    (click)=\"findDesk()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">search</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Update Desk' : 'Find Desk'\n                        }}</span>\n                    </div>\n                </button>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: auto;\n            }\n\n            [quick] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class DeskFlowFormComponent implements OnInit {\n    public time = 0;\n    public level = '';\n\n    public readonly quick_times = [\n        { name: 'Now', value: 0 },\n        {\n            name: 'Tomorrow',\n            value: setHours(addDays(new Date(), 1), 9).valueOf(),\n        },\n    ];\n\n    public levels = [];\n\n    public get is_edit() {\n        return !!this.form?.get('id')?.value;\n    }\n\n    public get form() {\n        return this._state.form;\n    }\n\n    public readonly clearForm = () => {\n        this.time = 0;\n        this.level = this._org.building.id;\n        this._state.clearForm();\n    };\n\n    constructor(\n        private _state: BookingFormService,\n        private _router: Router,\n        private _org: OrganisationService\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _));\n        await this._org.active_levels.pipe(first((_) => _?.length > 0));\n        this.level = this._org.building?.id;\n        this.levels = [\n            { id: this._org.building?.id, name: 'Any Level' },\n            ...this._org.levelsForBuilding(this._org.building),\n        ];\n    }\n\n    public quickBook() {\n        this.form.patchValue({\n            date: (this.time < 24 * 60\n                ? addMinutes(\n                      roundToNearestMinutes(new Date(), { nearestTo: 5 }),\n                      this.time\n                  )\n                : setHours(addDays(new Date(), 1), 8)\n            ).valueOf(),\n            title: 'Ad-hoc Desk Booking',\n        });\n        this.findDesk();\n    }\n\n    public findDesk() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'desks', 'map']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'placeos-book-desk-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'map'\">\n                    <desk-flow-map></desk-flow-map>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <desk-flow-confirm></desk-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        type=\"desk\"\n                        route=\"desks\"\n                        [calendar]=\"last_success?.user_email\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <desk-flow-form></desk-flow-form>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookDeskFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _route: ActivatedRoute,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this._state.form.patchValue({ booking_type: 'desk' });\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Space } from '@placeos/spaces';\nimport { MapLocateModalComponent } from '../../overlays/map-locate-modal.component';\n\n@Component({\n    selector: 'space-flow-find-item',\n    template: `\n        <div\n            class=\"flex items-center bg-white p-2 my-2 shadow w-[640px] max-w-[calc(100%-2rem)] mx-auto rounded\"\n        >\n            <div class=\"flex flex-col flex-1 space-y-2 \">\n                <div class=\"flex items-center\">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>place</app-icon>\n                    </div>\n                    <span\n                        >{{ space?.level?.display_name || space?.level?.name }},\n                        {{ space?.display_name || space?.name }}</span\n                    >\n                </div>\n                <div class=\"flex items-center\">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>group</app-icon>\n                    </div>\n                    <span>{{ space?.capacity || 0 }} People</span>\n                </div>\n            </div>\n            <div class=\"flex flex-col space-y-2 ml-2\">\n                <button\n                    mat-button\n                    book\n                    [class.bg-pending]=\"book\"\n                    [class.border-pending]=\"book\"\n                    (click)=\"bookSpace()\"\n                >\n                    {{ multiple ? (book ? 'Remove' : 'Select') : 'Book' }}\n                </button>\n                <button\n                    locate\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"viewLocation()\"\n                >\n                    Map\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFindItemComponent {\n    /** Space to display details for */\n    @Input() public space: Space;\n    /** Whether space should be booked */\n    @Input() public multiple: boolean;\n    /** Whether space should be booked */\n    @Input() public book: boolean;\n    /** Emitter for changes to book value */\n    @Output() public bookChange = new EventEmitter<boolean>();\n\n    constructor(private _dialog: MatDialog) {}\n\n    public bookSpace() {\n        this.book = !this.book;\n        this.bookChange.emit(this.book);\n    }\n\n    public viewLocation() {\n        this._dialog.open(MapLocateModalComponent, {\n            width: '32em',\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: { item: this.space },\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HashMap, SettingsService } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { Space, SpacesService } from '@placeos/spaces';\nimport { combineLatest } from 'rxjs';\nimport { filter, first, map, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'space-flow-find',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'spaces', 'form']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div filters>\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto py-4\">\n                <h2 class=\"text-xl uppercase font-medium text-white\">\n                    Available Spaces\n                </h2>\n                <div\n                    class=\"flex flex-col items-center sm:flex-row space-x-0 sm:space-x-2\"\n                >\n                    <mat-form-field\n                        overlay\n                        buildings\n                        class=\"w-full sm:w-auto sm:flex-1 h-[3.25rem]\"\n                        *ngIf=\"(buildings | async)?.length > 1\"\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Select Building...\"\n                            [ngModel]=\"building | async\"\n                            (ngModelChange)=\"setBuilding($event)\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-auto sm:flex-1 h-[3.25rem]\"\n                        overlay\n                        *ngIf=\"(levels | async)?.length > 0\"\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Level\"\n                            [ngModel]=\"\n                                (options | async)?.zone_ids?.length\n                                    ? (options | async)?.zone_ids[0]\n                                    : ''\n                            \"\n                            (ngModelChange)=\"setOptions({ zone_ids: [$event] })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of levels | async\"\n                                [value]=\"item.id\"\n                            >\n                                {{ item.display_name || item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-auto sm:flex-1 h-[3.25rem] hidden sm:block\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Any Capacity\"\n                            [ngModel]=\"(options | async)?.capacity\"\n                            (ngModelChange)=\"setOptions({ capacity: $event })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of quick_capacities\"\n                                [value]=\"item.value\"\n                            >\n                                {{ item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n        </div>\n        <div class=\"flex-1 w-full bg-gray-100 overflow-auto\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <ng-container\n                    *ngIf=\"(spaces | async)?.length > 0; else empty_state\"\n                >\n                    <space-flow-find-item\n                        *ngFor=\"let space of spaces | async\"\n                        class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto \"\n                        [space]=\"space\"\n                        [multiple]=\"multiple\"\n                        [(book)]=\"book_space[space.id]\"\n                        (bookChange)=\"handleBookEvent(space, $event)\"\n                    ></space-flow-find-item>\n                    <p class=\"p-4 text-center opacity-60\">\n                        End of available spaces list\n                    </p>\n                </ng-container>\n            </ng-container>\n        </div>\n        <div *ngIf=\"multiple\" class=\"bg-white border-t border-gray-200\">\n            <div\n                class=\"flex items-center w-[640px] max-w-[calc(100%-2rem)] mx-auto p-2\"\n            >\n                <div class=\"flex-1 underline\" [matMenuTriggerFor]=\"menu\">\n                    {{ space_list.length }} space(s) selected\n                </div>\n                <button\n                    class=\"w-32\"\n                    [disabled]=\"!space_list.length\"\n                    mat-button\n                    (click)=\"confirmBooking()\"\n                >\n                    Book\n                </button>\n            </div>\n            <mat-menu #menu=\"matMenu\" yPosition=\"above\">\n                <div\n                    class=\"flex items-center pointer-events-none leading-tight\"\n                    mat-menu-item\n                    *ngFor=\"let space of space_list\"\n                >\n                    <div class=\"flex flex-col mr-4\">\n                        <div>{{ space.display_name || space.name }}</div>\n                        <div class=\"text-xs opacity-70\">\n                            {{ space.level?.display_name || space.level?.name }}\n                            ~ {{ space.capacity || '2+' }} People\n                        </div>\n                    </div>\n                    <button\n                        mat-icon-button\n                        class=\"pointer-events-auto\"\n                        (click)=\"\n                            this.handleBookEvent(space, false);\n                            $event.stopPropagation()\n                        \"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n                <div\n                    mat-menu-item\n                    class=\" opacity-60\"\n                    *ngIf=\"!space_list?.length\"\n                >\n                    No selected spaces\n                </div>\n            </mat-menu>\n        </div>\n        <ng-template #load_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Retrieving available spaces...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2 p-8 text-center\"\n            >\n                <p>\n                    No available spaces for selected time, capacity or level(s)\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n\n            [filters] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFindComponent implements OnInit {\n    public book_space: HashMap<boolean> = {};\n    public quick_capacities = [\n        { name: 'Any Capacity', value: 0 },\n        { name: 'Small (1 - 4)', value: 1 },\n        { name: 'Medium (5 - 12)', value: 5 },\n        { name: 'Large (13 - 32)', value: 13 },\n        { name: 'Huge (32+)', value: 33 },\n    ];\n\n    public space_list: Space[] = [];\n\n    /** List of available buildings */\n    public readonly buildings = this._org.building_list;\n    /** Currently active building */\n    public readonly building = this._org.active_building;\n\n    public readonly levels = combineLatest([\n        this.building,\n        this._state.options,\n    ]).pipe(\n        filter(([_]) => !!_),\n        map(([bld]) => [\n            {\n                id: this._org.building.id,\n                name: 'All Levels',\n            },\n            ...this._org.levelsForBuilding(bld),\n        ])\n    );\n\n    public readonly loading = this._state.loading;\n    public readonly options = this._state.options;\n\n    public readonly spaces = this._state.available_spaces;\n    public async setBuilding(bld) {\n        const opts = await this.options.pipe(take(1)).toPromise();\n        if (bld) this._org.building = bld;\n        const levels = this._org.levelsForBuilding(this._org.building);\n        const lvl = levels.find((_) => opts.zone_ids?.includes(_.id));\n        if (!lvl && levels.length) {\n            this.setOptions({ zone_ids: [levels[0].id] });\n        }\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get multiple() {\n        return this._settings.get('app.booking.multiple_spaces') ?? false;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _state: EventFormService,\n        private _settings: SettingsService,\n        private _router: Router\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => !!_)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => !!_)).toPromise();\n        this.setBuilding(this._org.building);\n        this.book_space = {};\n        const resources = this._state.form?.get('resources')?.value || [];\n        resources.forEach((_) => (this.book_space[_.id] = true));\n        this.space_list = this._spaces.filter((s) => this.book_space[s.id]);\n    }\n\n    public handleBookEvent(space: Space, book: boolean = true) {\n        if (this.multiple) {\n            this.book_space[space.id] = book;\n        } else {\n            this.book_space = {};\n            this.book_space[space.id] = book;\n            this.confirmBooking();\n        }\n        this.space_list = this._spaces.filter((s) => this.book_space[s.id]);\n    }\n\n    public confirmBooking() {\n        const spaces = this._spaces.filter((s) => this.book_space[s.id]);\n        this._state.form.patchValue({ resources: spaces, system: spaces[0] });\n        this._router.navigate(['/book', 'spaces', 'confirm']);\n    }\n}\n","import { Component } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\n\n@Component({\n    selector: 'space-flow-confirm',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'spaces', 'find']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div\n            class=\"flex flex-col items-center space-y-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n        >\n            <h2 class=\"text-xl uppercase font-medium w-full my-4\">\n                Your meeting details\n            </h2>\n            <div\n                class=\"flex items-center py-2 space-x-2 border-b border-gray-200 w-full\"\n            >\n                <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                    <app-icon>event</app-icon>\n                </div>\n                <div class=\"flex-1 truncate\">\n                    {{ form.get('date')?.value | date: 'longDate' }} at\n                    {{ form.get('date')?.value | date: 'shortTime' }} ~\n                    {{\n                        form.get('date')?.value +\n                            form.get('duration')?.value * 60 * 1000\n                            | date: 'shortTime'\n                    }}\n                </div>\n                <a\n                    mat-button\n                    class=\"clear underline\"\n                    [routerLink]=\"['/book', 'spaces', 'form']\"\n                    >Edit</a\n                >\n            </div>\n            <div\n                class=\"flex items-center py-2 space-x-2 border-b border-gray-200 w-full\"\n            >\n                <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                    <app-icon>schedule</app-icon>\n                </div>\n                <div class=\"flex-1 truncate\">\n                    {{ form.get('duration')?.value }} minutes\n                </div>\n                <a\n                    mat-button\n                    class=\"clear underline\"\n                    [routerLink]=\"['/book', 'spaces', 'form']\"\n                    >Edit</a\n                >\n            </div>\n            <div class=\"border-b border-gray-200 w-full\">\n                <div class=\"flex items-center py-2 space-x-2 \">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>place</app-icon>\n                    </div>\n                    <div class=\"flex-1 truncate\">\n                        {{ form.get('resources')?.value?.length }} Space(s)\n                    </div>\n                    <button\n                        mat-button\n                        [disabled]=\"!form.get('resources')?.value?.length\"\n                        class=\"clear bg-transparent border-none underline\"\n                        (click)=\"show_spaces = !show_spaces\"\n                    >\n                        {{ show_spaces ? 'Hide' : 'Show' }}\n                    </button>\n                    <a\n                        mat-button\n                        class=\"clear underline\"\n                        [routerLink]=\"['/book', 'spaces', 'find']\"\n                        >Edit</a\n                    >\n                </div>\n                <div\n                    list\n                    [style.height]=\"\n                        !show_spaces\n                            ? '0'\n                            : form.get('resources')?.value?.length * 2.5 + 'rem'\n                    \"\n                    class=\"overflow-hidden\"\n                >\n                    <div\n                        class=\"flex items-center h-10 pl-12\"\n                        *ngFor=\"let space of form.get('resources')?.value\"\n                    >\n                        <span\n                            >{{ space.display_name || space.name }} [{{\n                                space.level?.display_name || space.level?.name\n                            }}]</span\n                        >\n\n                        <button\n                            mat-button\n                            class=\"bg-transparent border-none underline\"\n                        >\n                            Map\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"border-b border-gray-200 w-full\">\n                <div class=\"flex items-center py-2 space-x-2 \">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>group</app-icon>\n                    </div>\n                    <div class=\"flex-1 truncate\">\n                        {{ form.get('attendees')?.value?.length || 0 }}\n                        Attendee(s)\n                    </div>\n                    <button\n                        mat-button\n                        [disabled]=\"!form.get('attendees')?.value?.length\"\n                        class=\"clear bg-transparent border-none underline\"\n                        (click)=\"show_people = !show_people\"\n                    >\n                        {{ show_people ? 'Hide' : 'Show' }}\n                    </button>\n                    <a\n                        mat-button\n                        class=\"clear underline\"\n                        [routerLink]=\"['/book', 'spaces', 'form']\"\n                        >Edit</a\n                    >\n                </div>\n                <div\n                    list\n                    [style.height]=\"\n                        !show_people\n                            ? '0'\n                            : form.get('attendees')?.value?.length * 3 + 'rem'\n                    \"\n                    class=\"overflow-hidden\"\n                >\n                    <div\n                        class=\"flex items-center h-12 pl-12 space-x-2\"\n                        *ngFor=\"let user of form.get('attendees')?.value\"\n                    >\n                        <a-user-avatar\n                            class=\"text-sm\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <span>{{ user.name || user.email }}</span>\n                    </div>\n                </div>\n            </div>\n            <button\n                mat-button\n                class=\"w-32\"\n                confirm\n                [disabled]=\"loading\"\n                (click)=\"postForm()\"\n            >\n                <span *ngIf=\"!loading\">Confirm</span>\n                <mat-spinner\n                    class=\"mx-auto\"\n                    [diameter]=\"24\"\n                    *ngIf=\"loading\"\n                ></mat-spinner>\n            </button>\n        </div>\n        <\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n\n            [list] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowConfirmComponent {\n    public show_spaces = false;\n    public show_people = false;\n    public loading = false;\n\n    public readonly postForm = async () => {\n        this.loading = true;\n        await this._state.postForm().catch((_) => notifyError(_));\n        this.loading = false;\n    };\n\n    public get form() {\n        return this._state.form;\n    }\n\n    constructor(private _state: EventFormService) {}\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, { name: 'catering' }).toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, { name: 'catering_config' }).toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CateringOrder, CateringStateService } from '@placeos/catering';\n\n@Component({\n    selector: 'detailed-book-space-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div\n                    class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                >\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>Date</label>\n                        <a-date-field formControlName=\"date\">\n                            Date and time must be in the future\n                        </a-date-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>Start Time</label>\n                        <a-time-field formControlName=\"date\"></a-time-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>End Time</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n            </section>\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div\n                    class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                >\n                    <label>Attendees</label>\n                    <a-user-list-field\n                        formControlName=\"attendees\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto\">\n                    <div class=\"flex flex-col\">\n                        <label>Meeting Subject <span>*</span></label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"title\"\n                                placeholder=\"Meeting title\"\n                            />\n                            <mat-error>Meeting Subject is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col resize-y\">\n                        <label>Notes</label>\n                        <mat-form-field appearance=\"outline\">\n                            <textarea\n                                matInput\n                                formControlName=\"body\"\n                                placeholder=\"Add meeting notes here...\"\n                            ></textarea>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col mb-4\">\n                        <label>Catering</label>\n                        <an-action-field (onAction)=\"editCatering()\">\n                            <div\n                                class=\"opacity-40\"\n                                *ngIf=\"!form?.value.catering?.length\"\n                            >\n                                Add catering\n                            </div>\n                            <div\n                                class=\"flex items-center\"\n                                *ngIf=\"form?.value.catering?.length\"\n                            >\n                                <div class=\"flex-1 w-1/2\">\n                                    {{ form?.value.catering[0].item_count }}\n                                    item(s)\n                                </div>\n                                <div class=\"text-xs opacity-60 px-4\">\n                                    {{\n                                        form?.value.catering[0].total_cost / 100\n                                            | currency\n                                    }}\n                                </div>\n                            </div>\n                        </an-action-field>\n                    </div>\n                </div>\n            </section>\n        </form>\n    `,\n    styles: [``],\n})\nexport class DetailBookSpaceFormComponent {\n    @Input() public form: FormGroup;\n\n    public readonly editCatering = async () =>\n        this.form.patchValue({\n            catering: [\n                await this._catering.manageCateringOrder(\n                    (this.form.value.catering\n                        ? this.form.value.catering[0]\n                        : null) || new CateringOrder()\n                ),\n            ],\n        });\n\n    constructor(private _catering: CateringStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { EventFormService } from '@placeos/events';\nimport { addDays, addMinutes, roundToNearestMinutes, setHours } from 'date-fns';\n\n@Component({\n    selector: 'space-flow-form',\n    template: `\n        <section quick class=\"text-white\" *ngIf=\"!is_edit\">\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto pb-2\">\n                <h2 class=\"text-xl uppercase font-medium mb-2 mt-4\">\n                    Quick Book Space\n                </h2>\n                <div class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2\">\n                    <mat-form-field\n                        class=\"sm:flex-2 h-[3.25rem]\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            name=\"time\"\n                            [(ngModel)]=\"time\"\n                            placeholder=\"Now\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of quick_times\"\n                                [value]=\"item.value\"\n                            >\n                                {{ item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"sm:flex-2 h-[3.25rem]\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            name=\"capacity\"\n                            [(ngModel)]=\"capacity\"\n                            placeholder=\"Any Capacity\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of quick_capacities\"\n                                [value]=\"item.value\"\n                            >\n                                {{ item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <button\n                        class=\"sm:flex-1 h-[2.75rem] mt-1 mb-2\"\n                        mat-button\n                        (click)=\"quickBook()\"\n                    >\n                        <div class=\"flex items-center justify-center\">\n                            <app-icon class=\"text-xl\">search</app-icon>\n                            <span class=\"ml-2 mx-4\">Find Space</span>\n                        </div>\n                    </button>\n                </div>\n            </div>\n        </section>\n        <section class=\"bg-gray-300\" *ngIf=\"!is_edit\">\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto\">\n                <h2 class=\"text-xl uppercase font-medium my-4\">OR</h2>\n            </div>\n        </section>\n        <section form class=\"flex-1 min-h-[50%]\">\n            <h2\n                class=\"text-xl uppercase font-medium mb-2 mt-4 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                {{ is_edit ? 'Edit' : 'Detailed' }} Booking\n            </h2>\n            <detailed-book-space-form [form]=\"form\"></detailed-book-space-form>\n            <div\n                class=\"flex flex-col sm:flex-row items-center justify-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n            >\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem] inverse\"\n                    mat-button\n                    clear\n                    (click)=\"clearForm()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">clear</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Cancel Edit' : 'Clear Form'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    mat-button\n                    find-space\n                    (click)=\"findSpace()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">search</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Update Spaces' : 'Find Space'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    mat-button\n                    standalone\n                    (click)=\"confirmBooking()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">event_available</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Confirm changes' : 'Book without Space'\n                        }}</span>\n                    </div>\n                </button>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: auto;\n            }\n\n            [quick] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFormComponent {\n    public time = 0;\n    public capacity = 0;\n\n    public readonly quick_times = [\n        { name: 'Now', value: 0 },\n        { name: 'Later Today', value: 120 },\n        {\n            name: 'Tomorrow',\n            value: setHours(addDays(new Date(), 1), 9).valueOf(),\n        },\n    ];\n\n    public readonly quick_capacities = [\n        { name: 'Any Capacity', value: 0 },\n        { name: 'Small (1 - 4)', value: 1 },\n        { name: 'Medium (5 - 12)', value: 5 },\n        { name: 'Large (13 - 32)', value: 13 },\n        { name: 'Huge (32+)', value: 33 },\n    ];\n\n    public get is_edit() {\n        return !!this.form?.get('id')?.value;\n    }\n\n    public get form() {\n        return this._state.form;\n    }\n\n    public readonly clearForm = () => {\n        this.time = this.capacity = 0;\n        this._state.clearForm();\n    };\n\n    constructor(private _state: EventFormService, private _router: Router) {}\n\n    public quickBook() {\n        this.form.patchValue({\n            date: (this.time < 24 * 60\n                ? addMinutes(\n                      roundToNearestMinutes(new Date(), { nearestTo: 5 }),\n                      this.time\n                  )\n                : setHours(addDays(new Date(), 1), 8)\n            ).valueOf(),\n            title: 'Ad-hoc Meeting',\n        });\n        this._state.setOptions({ capacity: this.capacity });\n        this._router.navigate(['/book', 'spaces', 'find']);\n    }\n\n    public findSpace() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'spaces', 'find']);\n    }\n\n    public confirmBooking() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'spaces', 'confirm']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\n\n@Component({\n    selector: 'placeos-book-space-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'find'\">\n                    <space-flow-find></space-flow-find>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <space-flow-confirm></space-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        [calendar]=\"last_success?.host\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <space-flow-form></space-flow-form>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookSpaceFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: EventFormService,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { BookComponent } from './book.component';\nimport { BookCodeFlowComponent } from './code-flow.component';\nimport { BookDeskFlowComponent } from './desk-flow.component';\nimport { DeskFlowConfirmComponent } from './desk-flow/confirm.component';\nimport { DeskFlowFormComponent } from './desk-flow/form.component';\nimport { DeskFlowDetailedFormComponent } from './desk-flow/detailed-form.component';\nimport { DeskFlowMapComponent } from './desk-flow/map.component';\nimport { FlowSuccessComponent } from './flow-success.component';\nimport { BookSpaceFlowComponent } from './space-flow.component';\nimport { SpaceFlowConfirmComponent } from './space-flow/confirm.component';\nimport { DetailBookSpaceFormComponent } from './space-flow/detailed-form.component';\nimport { SpaceFlowFindItemComponent } from './space-flow/find-item.component';\nimport { SpaceFlowFindComponent } from './space-flow/find.component';\nimport { SpaceFlowFormComponent } from './space-flow/form.component';\nimport { SharedComponentModule } from '../components/shared.module';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: BookComponent,\n        children: [\n            { path: 'code', component: BookCodeFlowComponent },\n            { path: 'desks', redirectTo: 'desks/form' },\n            { path: 'desks/:step', component: BookDeskFlowComponent },\n            { path: 'spaces', redirectTo: 'spaces/form' },\n            { path: 'spaces/:step', component: BookSpaceFlowComponent },\n            { path: '*', redirectTo: 'spaces/form' },\n        ],\n    },\n    { path: '*', redirectTo: 'spaces/form' },\n];\n\n@NgModule({\n    declarations: [\n        BookComponent,\n        BookSpaceFlowComponent,\n        SpaceFlowFormComponent,\n        SpaceFlowFindComponent,\n        SpaceFlowFindItemComponent,\n        SpaceFlowConfirmComponent,\n        DetailBookSpaceFormComponent,\n        BookDeskFlowComponent,\n        DeskFlowFormComponent,\n        DeskFlowDetailedFormComponent,\n        DeskFlowMapComponent,\n        DeskFlowConfirmComponent,\n        BookCodeFlowComponent,\n        FlowSuccessComponent,\n    ],\n    imports: [\n        CommonModule,\n        SharedComponentModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatButtonToggleModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BookModule {}\n"],"sourceRoot":"webpack:///"}