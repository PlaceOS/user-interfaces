{"version":3,"mappings":"4RAaMA,GAAoC,IAAIC,MAAe,qCAMvDC,GAA0B,IAAID,MAAe,wBAM7CE,GAAyC,CAC3CC,QAASC,KACTC,eAAaC,OAAW,IAAMC,IAC9BC,OAAO,GAGX,IAAIC,GAAkB,EAEtB,SACIC,YAEAC,EAEAC,GACIC,KAAKF,OAASA,EACdE,KAAKD,MAAQA,OAIfL,SAAN,QACIG,YAAYI,EAAiBC,GACzBF,KAAKC,gBAAkBA,EACvBD,KAAKG,WAAY,EACjBH,KAAKI,WAAY,EACjBJ,KAAKK,WAAY,EAKjBL,KAAKM,8BAAgC,OAErCN,KAAKO,WAAa,OAClBP,KAAKQ,MAAS,2BAA0BZ,KAMxCI,KAAKS,YAAc,IAAIC,MAEvBV,KAAKW,OAAS,IAAID,MAClBV,KAAKY,WACDV,GAAkBA,EAAeU,WAAaV,EAAeU,WAAa,WAG9EC,WACA,OAAOb,KAAKQ,MAEZK,SAAKd,GACLC,KAAKQ,MAAQT,EACTC,KAAKc,gBACLd,KAAKc,eAAeC,QAAQC,IACxBA,EAAOH,KAAOb,KAAKQ,MACnBQ,EAAOC,kBAKfC,eACA,OAAOlB,KAAKG,UAEZe,aAASnB,GACTC,KAAKG,aAAYgB,MAAsBpB,GAGvCA,YACA,MAAMqB,EAAWpB,KAAKqB,gBAAkBrB,KAAKqB,gBAAgBD,SAAW,GACxE,OAAIpB,KAAKsB,SACEF,EAASG,IAAIP,GAAUA,EAAOjB,OAElCqB,EAAS,GAAKA,EAAS,GAAGrB,WAAQyB,EAEzCzB,UAAM0B,GACNzB,KAAK0B,qBAAqBD,GAC1BzB,KAAKS,YAAYkB,KAAK3B,KAAKD,OAG3BqB,eACA,MAAMA,EAAWpB,KAAKqB,gBAAkBrB,KAAKqB,gBAAgBD,SAAW,GACxE,OAAOpB,KAAKsB,SAAWF,EAAWA,EAAS,IAAM,KAGjDE,eACA,OAAOtB,KAAKI,UAEZkB,aAASvB,GACTC,KAAKI,aAAYe,MAAsBpB,GAGvC6B,eACA,OAAO5B,KAAKK,UAEZuB,aAAS7B,GACTC,KAAKK,aAAYc,MAAsBpB,GACnCC,KAAKc,gBACLd,KAAKc,eAAeC,QAAQC,GAAUA,EAAOC,iBAGrDY,WACI7B,KAAKqB,gBAAkB,IAAIS,MAAe9B,KAAKsB,cAAUE,GAAW,GAExEO,qBACI/B,KAAKqB,gBAAgBW,UAAUhC,KAAKc,eAAemB,OAAOjB,GAAUA,EAAOkB,UAM/EC,WAAWpC,GACPC,KAAKD,MAAQA,EACbC,KAAKC,gBAAgBmC,eAGzBC,iBAAiBC,GACbtC,KAAKM,8BAAgCgC,EAGzCC,kBAAkBD,GACdtC,KAAKO,WAAa+B,EAGtBE,iBAAiBC,GACbzC,KAAK4B,SAAWa,EAGpBC,mBACI,MAAMtB,EAAWpB,KAAKoB,SAChBtB,EAAS6C,MAAMC,QAAQxB,GAAYA,EAASA,EAASyB,OAAS,GAAKzB,EACnE0B,EAAQ,IAAIC,GAAsBjD,EAAQE,KAAKD,OACrDC,KAAKM,8BAA8BwC,EAAM/C,OACzCC,KAAKW,OAAOgB,KAAKmB,GASrBE,kBAAkBhC,EAAQgB,EAAQiB,GAAc,EAAOC,GAAc,IAG5DlD,KAAKsB,UAAYtB,KAAKoB,WAAaJ,EAAOkB,UAC3ClC,KAAKoB,SAASc,SAAU,GAExBlC,KAAKqB,gBACDW,EACAhC,KAAKqB,gBAAgBW,OAAOhB,GAG5BhB,KAAKqB,gBAAgB8B,SAASnC,GAIlCkC,GAAc,EAKdA,EACAE,QAAQC,UAAUC,KAAK,IAAMtD,KAAKuD,kBAAkBN,IAGpDjD,KAAKuD,kBAAkBN,GAI/BO,YAAYxC,GACR,OAAOhB,KAAKqB,iBAAmBrB,KAAKqB,gBAAgBoC,WAAWzC,GAGnE0C,cAAc1C,GACV,YAA8B,IAAnBhB,KAAK2D,YAGZ3D,KAAKsB,UAAYqB,MAAMC,QAAQ5C,KAAK2D,WAC7B3D,KAAK2D,UAAUC,KAAK7D,GAAyB,MAAhBiB,EAAOjB,OAAiBA,IAAUiB,EAAOjB,OAE1EiB,EAAOjB,QAAUC,KAAK2D,WAGjCjC,qBAAqB3B,GACjBC,KAAK2D,UAAY5D,EACZC,KAAKc,iBAGNd,KAAKsB,UAAYvB,GACZ4C,MAAMC,QAAQ7C,GAGnBC,KAAK6D,kBACL9D,EAAMgB,QAAS+C,GAAiB9D,KAAK+D,aAAaD,MAGlD9D,KAAK6D,kBACL7D,KAAK+D,aAAahE,KAI1B8D,kBACI7D,KAAKqB,gBAAgB2C,QACrBhE,KAAKc,eAAeC,QAAQC,GAAWA,EAAOkB,SAAU,GAG5D6B,aAAahE,GACT,MAAMkE,EAAsBjE,KAAKc,eAAeoD,KAAKlD,GAC1B,MAAhBA,EAAOjB,OAAiBiB,EAAOjB,QAAUA,GAEhDkE,IACAA,EAAoB/B,SAAU,EAC9BlC,KAAKqB,gBAAgBW,OAAOiC,IAIpCV,kBAAkBN,GAEVA,GACAjD,KAAK0C,mBAIT1C,KAAKS,YAAYkB,KAAK3B,KAAKD,QAGnCL,SAAqByE,UAArB,0BAAsHzE,GAAV0E,MAAgDA,OAAhDA,MAAiFlF,GAA7L,KACAQ,EAAqB2E,UADuFD,MAC5G,MAA0G1E,EAA1G4E,+EAD4GF,MAC5GG,EAGiGC,GAHjG,cAD4GJ,MAC5GK,EAD4GL,WAC5GM,wCAAoY,QAApY,yEAD4GN,MAC5G,4BAD4GA,MAC5G,wCAD4GA,CAC5G,kSAD4GA,MACihB,CACrnB/E,GACA,CAAEC,QAASF,GAAyBI,YAAaE,QAhNnDA,MAoQN,MAAMiF,MAAuBC,MAAmB,aAG1CJ,SAAN,gBAA8BG,GAC1B9E,YAAYgF,EAAaC,EAAoBC,EAAaC,EAAeC,EAAiB/E,GACtFgF,QACAlF,KAAK8E,mBAAqBA,EAC1B9E,KAAK+E,YAAcA,EACnB/E,KAAKgF,cAAgBA,EACrBhF,KAAKmF,mBAAoB,EACzBnF,KAAKoF,UAAW,EAIhBpF,KAAKqF,eAAiB,KACtBrF,KAAKK,WAAY,EAEjBL,KAAKW,OAAS,IAAID,MAClB,MAAM4E,EAAiBC,OAAON,GAC9BjF,KAAKwF,SAAWF,GAAqC,IAAnBA,EAAuBA,EAAiB,KAC1EtF,KAAKyF,kBAAoBZ,EACzB7E,KAAKY,WACDV,GAAkBA,EAAeU,WAAaV,EAAeU,WAAa,WAG9E8E,eACA,MAAQ,GAAE1F,KAAK2F,YAGf/E,iBACA,OAAOZ,KAAKyF,kBAAoBzF,KAAKyF,kBAAkB7E,WAAaZ,KAAK4F,YAEzEhF,eAAWb,GACXC,KAAK4F,YAAc7F,EAGnBmC,cACA,OAAOlC,KAAKyF,kBAAoBzF,KAAKyF,kBAAkBjC,YAAYxD,MAAQA,KAAKoF,SAEhFlD,YAAQnC,GACR,MAAM0B,KAAWN,MAAsBpB,GACnC0B,IAAazB,KAAKoF,WAClBpF,KAAKoF,SAAW3D,EACZzB,KAAKyF,mBACLzF,KAAKyF,kBAAkBzC,kBAAkBhD,KAAMA,KAAKoF,UAExDpF,KAAK8E,mBAAmB1C,gBAI5BR,eACA,OAAO5B,KAAKK,WAAcL,KAAKyF,mBAAqBzF,KAAKyF,kBAAkB7D,SAE3EA,aAAS7B,GACTC,KAAKK,aAAYc,MAAsBpB,GAE3C8B,WACI,MAAMgE,EAAQ7F,KAAKyF,kBACnBzF,KAAKmF,kBAAoBU,IAAUA,EAAMvE,SACzCtB,KAAK2F,GAAK3F,KAAK2F,IAAO,qBAAoB/F,KACtCI,KAAKmF,oBACLnF,KAAKa,KAAOgF,EAAMhF,MAElBgF,IACIA,EAAMnC,cAAc1D,MACpBA,KAAKkC,SAAU,EAEV2D,EAAMrC,YAAYxD,QAAUA,KAAKoF,UAKtCS,EAAM7C,kBAAkBhD,KAAMA,KAAKoF,WAI/CU,kBACI9F,KAAKgF,cAAce,QAAQ/F,KAAK+E,aAAa,GAEjDiB,cACI,MAAMH,EAAQ7F,KAAKyF,kBACnBzF,KAAKgF,cAAciB,eAAejG,KAAK+E,aAGnCc,GAASA,EAAMrC,YAAYxD,OAC3B6F,EAAM7C,kBAAkBhD,MAAM,GAAO,GAAO,GAIpDkG,MAAMC,GACFnG,KAAKoG,eAAeC,cAAcH,MAAMC,GAG5CG,iBACI,MAAMC,IAAavG,KAAKmF,oBAA4BnF,KAAKoF,SACrDmB,IAAevG,KAAKoF,WACpBpF,KAAKoF,SAAWmB,EACZvG,KAAKyF,oBACLzF,KAAKyF,kBAAkBzC,kBAAkBhD,KAAMA,KAAKoF,UAAU,GAC9DpF,KAAKyF,kBAAkBlF,eAI/BP,KAAKW,OAAOgB,KAAK,IAAIoB,GAAsB/C,KAAMA,KAAKD,QAO1DkB,gBAGIjB,KAAK8E,mBAAmB1C,gBAGhCoC,SAAgBL,UAAhB,0BAAiHK,GA3KLJ,MA2KsChF,GAAlJ,GA3K4GgF,MA2K0FA,OA3K1FA,MA2K2HA,OA3K3HA,MA2KqJoC,OA3KrJpC,MA2KiL,YA3KjLA,MA2KyNlF,GAArU,KACAsF,EAAgBiC,UA5K4FrC,MA4K5G,MAAqGI,EAArGF,kEA5K4GF,KA4K5GsC,iBA5K4GtC,MA4K5GG,EA5K4GH,WA4K5GM,8CAA+d,eAA/d,mEA5K4GN,MA4K5G,0BAAqGM,YAArG,MA5K4GN,MA4K5G,kBA5K4GA,CA4K5G,uBA5K4GA,CA4K5G,UA5K4GA,CA4K5G,aA5K4GA,MA4K5G,oDA5K4GA,CA4K5G,sCA5K4GA,CA4K5G,wCA5K4GA,CA4K5G,0XA5K4GA,OA4K5GuC,8VA5K4GvC,cA4Ki+B,gBA5Kj+BA,MA4K+2C,0BAAUM,qBA5Kz3CN,MA4Kg5C,YA5Kh5CA,MA4Ks8C,GA5Kt8CA,sBA4Ky/C,YA5Kz/CA,MA4KkjD,aAA9pD,aA5K4GA,MA4K5G,GA5K4GA,MA4K0kC,gBA5K1kCA,CA4K0kC,6BA5K1kCA,MA4KqmC,oCA5KrmCA,CA4KqmC,yBA5KrmCA,CA4KqmC,oBA5KrmCA,CA4KqmC,yBA5KrmCA,CA4KqmC,oCA5KrmCA,MA4K2mD,GA5K3mDA,MA4K2mD,qBA5K3mDA,CA4K2mD,mDAAvtDwC,YAA8kJC,MAA9kJC,sxFAlHMtC,MAmLAuC,SAAN,SAEAA,SAAsB5C,UAAtB,0BAAuH4C,IACvHA,EAAsBC,UAhPsF5C,MAgP5G,MAAwH2C,IACxHA,EAAsBE,UAjPsF7C,MAiP5G,UAAyJ,CAAC8C,KAAiBC,MAAkBD,QAJvLH;;;;;;;;;;;;;;;;;;;;;;8CC5cC,IAAMK,GAAb,MAAM,sDAAOA,8BAAa9C,iPArBlBF,kBACAA,iBACIA,kBAGIA,yBACJA,QACJA,QACAA,mNAaKgD,GAAb,GC1BqBC,SAAN,QAAgBC,mBAGvB,OAAOD,EAAUE,aAAY,GACxBjE,KAAKkE,KAAaA,EAAQ3E,QAC1B4E,MAAM,KAAM,sBAIFC,GAAgB,GAC/B,IAAKC,UAAUC,aAAc,OAAOxE,QAAQC,QAAQ,IAMpD,IAAIwE,EAAe,KACnB,OAAQH,EACFC,UAAUC,aAAaE,aAAa,CAAEC,OAAO,EAAOC,OAAO,IACxD1E,KAAK2E,GAAUJ,EAAeI,GAG9BR,MAAM,QACTrE,QAAQC,WAETC,KAAK,IAAMqE,UAAUC,aAAaM,oBAClC5E,KAAK6E,GAAWA,EAAQlG,OAAOmG,GAA0B,eAAhBA,EAAOC,MAAuB9G,IAAI,CAAC6G,EAAQE,KAAO,CACxF3C,GAAIyC,EAAOG,SACXC,MAAOJ,EAAOI,QAAgB,IAANF,EAAU,iBAAoB,UAASA,EAAI,SAEtEG,QAAQ,KAEL,GAAKZ,EACL,UAAWa,KAASb,EAAac,YAC7BD,EAAME,OACNf,EAAagB,YAAYH,KAKzC7I,YACImI,EACAc,EACAC,EAA4B/I,KAAKgJ,eACjCC,EAAkCjJ,KAAKkJ,qBACvCC,EAAkB,eAElBnJ,KAAKoJ,OAASpB,EACdhI,KAAKqJ,QAAUC,SAASC,cAAc,UACtCvJ,KAAKwJ,UAAYV,EACjB9I,KAAKyJ,kBAAoBpC,EAAUqC,oBACnC1J,KAAK2J,iBAAmBR,EACxBnJ,KAAK4J,SAAU,EACf5J,KAAK6J,SAAU,EACf7J,KAAK8J,UAAW,EAEyB,iBAA9Bf,GAEP/I,KAAKyJ,kBAAoBV,EACzBgB,QAAQC,KAAK,uGAGbhK,KAAKgJ,eAAiBD,EAGqB,iBAApCE,GAEPjJ,KAAKyJ,kBAAoBR,EACzBc,QAAQC,KAAK,uGAGbhK,KAAKkJ,qBAAuBD,EAGhCjJ,KAAKiK,YAAcjK,KAAKkJ,qBAAqBlB,GAE7ChI,KAAKkK,QAAUlK,KAAKkK,QAAQC,KAAKnK,MACjCA,KAAKoK,kBAAoBpK,KAAKoK,kBAAkBD,KAAKnK,MACrDA,KAAKqK,oBAAsBrK,KAAKqK,oBAAoBF,KAAKnK,MAEzDgI,EAAMsC,yBAA0B,EAGhCtC,EAAMuC,aAAc,EAGpBvC,EAAMwC,OAAQ,EAId,IAAIC,GAAkB,EAClBzC,EAAM0C,SACN1C,EAAM0C,QAAS,EACfD,GAAkB,GAEjBnB,SAASqB,KAAKC,SAAS5C,KACxBsB,SAASqB,KAAKE,YAAY7C,GAC1ByC,GAAkB,GAEtBK,sBAAsB,KAElB,MAAMC,EAAgBC,OAAOC,iBAAiBjD,GAChB,SAA1B+C,EAAcG,UACdlD,EAAMmD,MAAMC,YAAY,UAAW,QAAS,aAC5CX,GAAkB,GAEW,YAA7BM,EAAcM,aACdrD,EAAMmD,MAAMC,YAAY,aAAc,UAAW,aACjDX,GAAkB,GAElBA,IAEAV,QAAQC,KAAK,2FACbhC,EAAMmD,MAAMG,QAAU,EACtBtD,EAAMmD,MAAMI,MAAQ,EACpBvD,EAAMmD,MAAMK,OAAS,KAI7BxD,EAAMyD,iBAAiB,OAAQzL,KAAKkK,SACpClC,EAAMyD,iBAAiB,iBAAkBzL,KAAKoK,mBAC9Cd,SAASmC,iBAAiB,mBAAoBzL,KAAKqK,qBAEnDrK,KAAK0L,iBAAmBrE,EAAUsE,iBAItCC,WACI,IAAI/D,EAAe,KACnB,OAAQ7H,KAAKoJ,OAAOyC,UACdzI,QAAQC,QAAQrD,KAAKoJ,OAAOyC,UAAUC,iBAAiB,IACvD9L,KAAK+L,mBAAmBzI,KAAK,EAAG2E,aAC9B8B,QAAQC,KAAK,oGAEbnC,EAAeI,EACRA,EAAO6D,iBAAiB,MAGlCxI,KAAMoF,GAAU,UAAWA,EAAMsD,eACjCvE,MAAM,KAAM,GACZgB,QAAQ,KAEL,GAAKZ,EACL,UAAWa,KAASb,EAAac,YAC7BD,EAAME,OACNf,EAAagB,YAAYH,KAKzCuD,YACE,OAAOjM,KAAK8J,SAIdoC,cACI,OAAIlM,KAAK8J,SACE9J,KAAKmM,eAELnM,KAAKoM,cAKpBA,cAGI,OAFIpM,KAAK8J,WACT9J,KAAK8J,UAAW,GACX9J,KAAK4J,SAAW5J,KAAK6J,SAAgBzG,QAAQC,UAC3CrD,KAAK4L,WAAWtI,KAAMsI,GACpBA,EAEE5L,KAAKoJ,OAAOyC,UAAUC,iBAAiB,GAAGO,iBAAiB,CAC9DC,SAAU,CAAC,CAAEC,OAAO,MAHFnJ,QAAQoJ,OAAO,uBAKtC/E,MAAM,KACL,WAAKqC,UAAW,EACV2C,IAKdN,eACI,GAAKnM,KAAK8J,SAIV,YAAKA,UAAW,EACT9J,KAAK0M,sBAGhBC,UACI3M,KAAKoJ,OAAOwD,oBAAoB,iBAAkB5M,KAAKoK,mBACvDpK,KAAKoJ,OAAOwD,oBAAoB,OAAQ5M,KAAKkK,SAC7CZ,SAASsD,oBAAoB,mBAAoB5M,KAAKqK,qBAEtDrK,KAAK4I,OACLvB,EAAUwF,mBAAmB7M,KAAK0L,iBAAkB,SAIxDoB,QASI,OARI9M,KAAK4J,UAAY5J,KAAK6J,UAGO,WAA7BmB,OAAO+B,SAASC,UAEhBjD,QAAQC,KAAK,8EAEjBhK,KAAK4J,SAAU,EACXN,SAASoB,QAEFtH,QAAQC,WAEnBrD,KAAK6J,SAAU,EACX7J,KAAKoJ,OAAOyC,WAEZ7L,KAAKoJ,OAAO6D,OACL7J,QAAQC,WAGZrD,KAAK+L,mBACPzI,KAAK,EAAG2E,SAAQiF,iBACblN,KAAKoJ,OAAOyC,UAAY5D,EACxBjI,KAAKoJ,OAAO6D,OACZjN,KAAKmN,gBAAgBD,GAGjBlN,KAAK8J,WACL9J,KAAK8J,UAAW,EAChB9J,KAAKoM,cAAc3E,MAAM,WAGhCA,MAAMgF,IACH,WAAK7C,SAAU,EACT6C,KAIlB7D,OACI5I,KAAKoN,QACLpN,KAAK4J,SAAU,EAInBwD,MAAMC,GAAwB,GAE1B,GADArN,KAAK6J,SAAU,GACV7J,KAAK4J,QACN,OAAOxG,QAAQC,SAAQ,GAE3BrD,KAAKoJ,OAAOgE,QAEZ,MAAME,EAAa,KACf,MAAMC,EAASvN,KAAKoJ,OAAOyC,UAAY7L,KAAKoJ,OAAOyC,UAAUlD,YAAc,GAC3E,UAAWD,KAAS6E,EAChB7E,EAAME,OACN5I,KAAKoJ,OAAOyC,UAAUhD,YAAYH,GAEtC1I,KAAKoJ,OAAOyC,UAAY,MAG5B,OAAIwB,GACAC,IACOlK,QAAQC,SAAQ,IAGpB,IAAID,QAASC,GAAYmK,WAAWnK,EAAS,MAC/CC,KAAK,MACGtD,KAAK6J,UACVyD,KACO,IAKnBG,UAAUC,GACN,OAAIA,IAAyB1N,KAAK2J,iBAAyBvG,QAAQC,WACnErD,KAAK2J,iBAAmB+D,EAEjB1N,KAAK0M,wCAICiB,EAAkBC,EAAW,KAAMC,EAAS,KAAMC,EAAO,KAAMC,GAAuB,EACtFC,GAAyB,GACtC,MAAMC,EAAoBJ,aAAoBK,OAE9C,IAAIC,EAAU/K,QAAQgL,IAAI,CACtBP,GAAYxG,EAAUsE,iBACtBtE,EAAUgH,WAAWV,KACtBrK,KAAK,EAAEgL,EAAQC,MAEd,IAAIC,EAGJ,OAJAX,EAAWS,GAEVR,EAAQU,GAAiBxO,KAAKyO,cAAcF,EAAOX,EAAYE,EAAQC,GAEpEF,aAAoBK,QACfD,GAEDJ,EAASa,YAAY,CAAEC,KAAM,gBAAiBC,KAAM,SAEjD,IAAIxL,QAAQ,CAACC,EAASmJ,KACzB,IAAIqC,EAASC,EAAWC,EACxBD,EAAYhM,IACgB,aAApBA,EAAM8L,KAAKD,OAGfd,EAASjB,oBAAoB,UAAWkC,GACxCjB,EAASjB,oBAAoB,QAASmC,GACtCC,aAAaH,GACW,OAAxBI,EAAUL,KAAKA,KACXvL,EAAQP,EAAM8L,KAAKA,MAEnBpC,EAAOnF,EAAU6H,oBAGzBH,EAAWtC,IACPoB,EAASjB,oBAAoB,UAAWkC,GACxCjB,EAASjB,oBAAoB,QAASmC,GACtCC,aAAaH,GAEbrC,EAAO,mBADeC,EAAuBA,EAAE0C,SAAW1C,EAAhC,mBAG9BoB,EAASpC,iBAAiB,UAAWqD,GACrCjB,EAASpC,iBAAiB,QAASsD,GACnCF,EAAUrB,WAAW,IAAMuB,EAAQ,WAAY,KAC/C,MAAMK,GAAYZ,EAAca,aAAa,EAAG,EAAGvB,EAAOvC,MAAOuC,EAAOtC,QACxEqC,EAASa,YAAY,CACjBC,KAAM,SACNC,KAAMQ,IACP,CAACA,GAAUR,KAAKU,YAGhB,IAAIlM,QAAQ,CAACC,EAASmJ,KACzB,MAAMqC,EAAUrB,WAAW,IAAMhB,EAAO,0BAA2B,KACnEqB,EAAS0B,OAAOzB,GAAQxK,KAAKkM,IACpBA,EAAY3M,OAGbQ,EAAQmM,EAAY,GAAGC,UAFvBjD,EAAOnF,EAAU6H,oBAItBzH,MAAOgF,GAAMD,EAAO,mBAAqBC,EAAE0C,SAAW1C,KAAKhE,QAAQ,IAAMuG,aAAaH,QAKrG,OAAIjB,GAAcI,IACdG,EAAUA,EAAQ1G,MAAM,IACpBJ,EAAUqI,UAAU/B,EAAkB,KAAME,EAAUC,EAAQC,KAGtEI,EAAUA,EAAQ1F,QAAQ,KAClBwF,GACJ5G,EAAUwF,mBAAmBgB,EAAU,WAGpCM,EAGXwB,oBAAoBC,EAAKC,EAAOC,EAAMC,GAA0B,GAG5D1I,EAAUwF,mBACN7M,KAAK0L,iBACL,mBACA,CAAEkE,MAAKC,QAAOC,OAAMC,4BAI5BC,iBAAiBC,GAGb5I,EAAUwF,mBAAmB7M,KAAK0L,iBAAkB,gBAAiBuE,yBAInDC,EAAa7I,EAAU8I,aACzC,OAAQ,oBAAqBnF,QAAUoF,gBAAgBC,oBACjDD,gBAAgBC,sBAChBjN,QAAQC,QAAQ,KAEjBC,KAAMgN,IAA6D,IAAxCA,EAAiBC,QAAQ,WAC/C,IAAIH,gBAAgB,CAAEI,QAAS,CAAC,aAChC,IAAItC,OAAOgC,IAIzBhG,UACIlK,KAAKiK,YAAcjK,KAAKkJ,qBAAqBlJ,KAAKoJ,QAClDpJ,KAAKyQ,aAGTrG,oBACIpK,KAAKiK,YAAcjK,KAAKkJ,qBAAqBlJ,KAAKoJ,QAGtDiB,sBACQf,SAASoB,OACT1K,KAAKoN,QACEpN,KAAK4J,SACZ5J,KAAK8M,QAIb5D,qBAAqBlB,GAEjB,MAAM0I,EAAoBC,KAAKC,IAAI5I,EAAM6I,WAAY7I,EAAM8I,aACrDC,EAAiBJ,KAAKK,MAAM,EAAI,EAAIN,GAC1C,MAAO,CACHO,EAAGN,KAAKK,OAAOhJ,EAAM6I,WAAaE,GAAkB,GACpDG,EAAGP,KAAKK,OAAOhJ,EAAM8I,YAAcC,GAAkB,GACrDxF,MAAOwF,EACPvF,OAAQuF,EACRI,gBAAiBnR,KAAKyJ,kBACtB2H,iBAAkBpR,KAAKyJ,mBAI/BgH,aACI,IAAKzQ,KAAK4J,SAAW5J,KAAKoJ,OAAOiI,QAAUrR,KAAKoJ,OAAOkI,MAAO,OAAO,EAErExG,sBAAsB,KACd9K,KAAKoJ,OAAOmI,YAAc,EAK1BvR,KAAKyQ,aAGTzQ,KAAK0L,iBACApI,KAAMuK,GAAaxG,EAAUqI,UAAU1P,KAAKoJ,OAAQpJ,KAAKiK,YAAa4D,EAAU7N,KAAKqJ,UACrF/F,KAAKtD,KAAKwJ,UAAYgI,IACdxR,KAAK4J,WAE0C,KAD/B4H,EAAMrC,SAAWqC,GACrBjB,QAAQ,yBAErBvQ,KAAK0L,iBAAmBrE,EAAUsE,kBAEtC3L,KAAKgJ,eAAewI,MAEvBlO,KAAK,IAAMtD,KAAKyQ,gBAI7BzH,eAAewI,GAEPA,IAAUnK,EAAU6H,kBACxBnF,QAAQ0H,IAAID,GAIhBzF,mBACI,IAAKpE,UAAUC,aACX,OAAOxE,QAAQoJ,OAAO,qBAG1B,MAAMkF,EAA2C,gBAA1B1R,KAAK2J,kBAAgE,SAA1B3J,KAAK2J,iBACjE,aACA,WACAgI,EAA2B,CAAC,CAC9BpG,MAAO,CAAEqF,IAAK,OACf,CACCrF,MAAO,CAAEqF,IAAK,MACf,IAOH,MAAO,IANuBe,EAAyBpQ,IAAKqQ,GAAeC,OAAOC,OAAO,GAAIF,EAAY,EACpGF,GAAiB,CAAEK,MAAO/R,KAAK2J,wBAKCgI,GAA0BK,YAAY,CAACC,EAAUL,IAClF,IAAMjK,UAAUC,aAAaE,aAAa,CAAEE,MAAO4J,EAAY7J,OAAO,IACjEzE,KAAM2E,IAAY,CACfA,SAIAiF,WAAYlN,KAAKkS,eAAejK,KACxB2J,EAAW1E,WACTlN,KAAK2J,iBACsB,gBAA1B3J,KAAK2J,iBACF,OACA,kBAIjBlC,MAAMwK,GACX,IAAM7O,QAAQoJ,OAAO,qBAjBlB,GAsBXE,sBAGI,MAAMyF,EAAYnS,KAAK6J,QACvB,OAAO7J,KAAKoN,OAAM,GAAM9J,KAAM+N,IAC1B,GAAKA,IAAUc,GAAcnS,KAAK4J,QAClC,OAAO5J,KAAK8M,UAIpBK,gBAAgBD,GAGZlN,KAAKoJ,OAAO+B,MAAMiH,UAAY,WADG,SAAblF,GAAqB,EAAK,GACU,IAG5DgF,eAAeG,GACX,MAAMC,EAAaD,EAAYvG,iBAAiB,GAChD,OAAKwG,EAEE,yBAAyBC,KAAKD,EAAW9J,OAC1C,cACA,mBAAmB+J,KAAKD,EAAW9J,OAC/B,OACA,KANc,0BASP+F,EAAOX,EAAW,KAAME,EAAO,KAAMC,GAAuB,GAC7ED,EAASA,GAAUxE,SAASC,cAAc,UAC1C,MAAMiJ,EAAc5E,GAAcA,EAAWqD,EAAGrD,EAAWqD,EAAI,EACzDwB,EAAc7E,GAAcA,EAAWsD,EAAGtD,EAAWsD,EAAI,EACzDwB,EAAkB9E,GAAcA,EAAWrC,MAAOqC,EAAWrC,MAAQgD,EAAMhD,OAASgD,EAAMsC,WAC1F8B,EAAmB/E,GAAcA,EAAWpC,OAAQoC,EAAWpC,OAAS+C,EAAM/C,QAAU+C,EAAMuC,YAEpG,IAAK/C,EAAwB,CACzB,MAAM6E,EAAchF,GAAcA,EAAWuD,gBACvCvD,EAAWuD,gBACXuB,EACAG,EAAejF,GAAcA,EAAWwD,iBACxCxD,EAAWwD,iBACXuB,EAGF7E,EAAOvC,QAAUqH,IACjB9E,EAAOvC,MAAQqH,GAEf9E,EAAOtC,SAAWqH,IAClB/E,EAAOtC,OAASqH,GAIxB,MAAMC,EAAUhF,EAAOiF,WAAW,KAAM,CAAEC,OAAO,IACjDF,SAAQG,uBAAwB,EAChCH,EAAQI,UACJ3E,EACAiE,EAAaC,EAAaC,EAAiBC,EAC3C,EAAG,EAAG7E,EAAOvC,MAAOuC,EAAOtC,QAExB,CAACsC,EAAQgF,qBAIFK,GACd,GAAIA,aAAkCC,mBAAqBD,aAAkCE,kBACtFrI,OAAOsI,aAAeH,aAAkCnI,OAAOsI,aAC/DtI,OAAOuI,iBAAmBJ,aAAkCnI,OAAOuI,gBACtE,OAAOnQ,QAAQC,QAAQ8P,GACpB,GAAIA,aAAkCK,MACzC,OAAOnM,EAAUoM,gBAAgBN,GAAwB7P,KAAK,IAAM6P,GACjE,GAAIA,aAAkCO,MAAQP,aAAkCQ,MAChFR,aAAkCS,KAAwC,iBAA1BT,EAAoC,CACvF,MAAM5E,EAAQ,IAAIiF,MAClB,OACIjF,EAAMsF,IADNV,aAAkCO,MAAQP,aAAkCQ,KAChEC,IAAIE,gBAAgBX,GAEpBA,EAET9L,EAAUoM,gBAAgBlF,GAAOjL,KAAK,MACrC6P,aAAkCO,MAAQP,aAAkCQ,OAC5EC,IAAIG,gBAAgBxF,EAAMsF,KAEvBtF,IAGX,OAAOnL,QAAQoJ,OAAO,kDAKP+B,GACnB,OAAO,IAAInL,QAAQ,CAACC,EAASmJ,KACzB,GAAI+B,EAAMyF,UAAiC,IAArBzF,EAAM0F,aAExB5Q,QACG,CACH,IAAI6Q,EAAQnF,EACZmF,EAAS,KACL3F,EAAM3B,oBAAoB,OAAQsH,GAClC3F,EAAM3B,oBAAoB,QAASmC,GACnC1L,KAEJ0L,EAAU,KACNR,EAAM3B,oBAAoB,OAAQsH,GAClC3F,EAAM3B,oBAAoB,QAASmC,GACnCvC,EAAO,qBAEX+B,EAAM9C,iBAAiB,OAAQyI,GAC/B3F,EAAM9C,iBAAiB,QAASsD,gCAMlBoF,EAA2BxF,EAAMC,GACvD,OAAOxL,QAAQC,QAAQ8Q,GAA2B7Q,KAAMuK,IAC9CA,aAAoBK,QAC1BL,EAASa,YAAY,CAAEC,OAAMC,YAIzCvH,SAAUqC,oBAAsB,IAChCrC,EAAU6H,iBAAmB,mBAC7B7H,EAAU8I,YAAc,2BArmBH9I,wEC0BLjD,kBAIIA,iBACIA,0BACJA,QACAA,mBACIA,+DACJA,QACJA,gCACAA,kBAIIA,iBACIA,2BACJA,QACAA,mBACIA,uEAEJA,QACJA,SAwFT,IAAMgQ,GAAb,MAAM,QAaFvU,YAAoBwU,kBAXbrU,kBAAc,EAIJA,UAAO,IAAIU,OAAa,GASlCsF,oBACChG,KAAKsU,UAAUjO,cAAcwF,WAC5B7L,KAAKsU,UAAUjO,cAAcwF,UACzBlD,YACA5H,QAAS2H,GAAe,MAALA,OAAK,EAALhE,EAAOkE,QAEnB,QAAhB2L,OAAKC,mBAAWC,SAAE7L,OAGf/G,mBACwB,QAAtB0S,YAAU3M,oBAAY6M,eAAE3M,gBAC7BH,UAAUC,aACLE,aAAa,CAAEE,OAAO,IACtB1E,KAAM2E,GAAYjI,KAAKsU,UAAUjO,cAAcwF,UAAY5D,GAC3DR,MAAOgF,GAAM1C,QAAQyH,MAAM,iCAAkC/E,IAClEzM,KAAKwU,YAAc,IAAInN,GAAUrH,KAAKsU,UAAUjO,cAAgB5B,GAC5DzE,KAAK0U,aAAajQ,IAEtBzE,KAAKwU,YAAY1H,SAGb4H,aAAaC,GACjB,MAAMC,EAAMD,EAGZ,GAAIE,EAFkBtE,QAAQ,OAEd,EAAG,CACf,MAAMuE,EAAQ,yBACRC,EAAS,GACf,IAAIC,EACJ,KAAQA,EAAQF,EAAMG,KAAKL,IACvBG,EAAOC,EAAM,IAAMA,EAAM,GAE7BhV,KAAKqU,QAAQa,SAAS,CAACN,EAAIO,MAAM,MAAM,GAAGA,MAAM,KAAK,IAAKJ,kDA/CzDX,GAAqBhQ,sCAArBgQ,EAAqB9P,smCAzH1BF,iBAGIA,qBAKAA,iBAGIA,wBAWAA,wBAYAA,iBACIA,iBAKIA,kBAAwBA,sBAAUA,QAClCA,oBAGIA,yDAHJA,QAOJA,QACJA,QACAA,kBAGIA,sBAQIA,+CAAuB,IAEvBA,wBACJA,QACAA,sBAQIA,+CAAuB,IAEvBA,yBACJA,QACJA,QACJA,QACJA,eAlEaA,qCAWAA,sCAcGA,uCAMIA,sCAWJA,+HAYAA,y2BAsDXgQ,GAAb,wUC7HYhQ,kBAIIA,sCAGIA,kDAERgR,EAFQC,OAERD,kBACK,UADLvP,uBAKQzB,gCACIA,oBACJA,QACAA,gCACIA,mBACJA,QACJA,QACJA,uCAfQA,mFAAyD,wDAyCjDA,yBAIIA,SACJA,kCAHIA,iBAEAA,yFApBhBA,iBAIIA,iBAAOA,oBAAQA,QACfA,6BACIA,yBAEIA,wEAAsB,4CAG9BkR,EAH8BD,OAG9BC,0CAKQlR,iDAMJA,QACJA,QACJA,iCAhBYA,qCAAsB,6BASFA,4EAyBpBA,yBAIIA,SACJA,kCAHIA,oBAEAA,yFArBhBA,iBAIIA,iBAAOA,iBAAKA,QACZA,6BACIA,yBAIIA,mEAERmR,2CAKQnR,iDAMJA,QACJA,QACJA,iCAhBYA,uCAAsB,6BASFA,wFASpCA,iBAIIA,kBACIA,iBAAOA,sBAAUA,QACjBA,2BAEIA,kDAAiBoR,EAAjBH,OAAiBG,4BAEpBpR,QACLA,QACAA,kBACIA,iBAAOA,oBAAQA,QACfA,+BAQJA,QACJA,uCAhBYA,4CAA2B,6BAS3BA,iEAAgC,UAAhCA,CAAgC,SAAhCA,CAAgC,mCAQ5CA,kBAIIA,iBAAOA,gBAAIA,QACXA,kCAGJA,gCACAA,kBAIIA,iBAAOA,mBAAOA,QACdA,6BACIA,oBAKJA,QACJA,gFACAA,kBAIIA,iBAAOA,yBAAaA,QACpBA,gCAGIA,kDAAiBqR,EAAjBJ,OAAiBI,2CAEpBrR,QACLA,uCALQA,4BAAe,uEAAfA,CAAe,wDAoBPA,yBAIIA,mBAAyBA,SAASA,QACtCA,kCAHIA,iBAEyBA,4DAlB7CA,iBAIIA,kBACIA,iBAAOA,6BAAiBA,QACxBA,6BACIA,yBAEIA,kDAAiBsR,EAAjBL,OAAiBK,2CAIjBtR,yBAAyBA,gBAAIA,QAC7BA,gCAMJA,QACJA,QACJA,QACAA,mBACIA,kBAAOA,2BAAcA,QACrBA,4BAQIA,kDAERuR,EAFQN,OAERM,mFAMQvR,kDACJA,QACJA,QACJA,2CApCgBA,mFAAiD,8BAO7BA,+CAWxBA,qIAGC,0HAHDA,CAGC,6BAHDA,CAGC,8CAiCDA,yBAKIA,SACJA,kCAHIA,iBAEAA,oEAtBhBA,kBAIIA,iBAAOA,yBAAaA,QACpBA,6BACIA,yBAGIA,kDAERwR,EAFQP,OAERO,gDAMQxR,iDAOJA,QACJA,QACJA,uCAlBYA,wFAA6C,6BAUzBA,2EA7MpCA,kBACIA,wBAsBAA,iBAGIA,iBACIA,iBAAOA,gBAAIA,QACXA,0BACIA,iDACJA,QACJA,QACAA,yCAyBAA,2CA0BJA,QACAA,yBAwBAA,yBASAA,yBAaAA,2CAYAA,2BA6CAA,2CA2BJA,0CAtNmBA,0BAGVA,sCAyBiBA,kCAMbA,2EAyBAA,yEA2BJA,4CAwBAA,6CASAA,sCAaAA,qEAYAA,oCA6CAA,wEA6BV,IAAMyR,GAAb,MAAM,QAkDFhW,YACYiW,EACAC,EACAC,GAFAhW,cACAA,YACAA,iBAlDIA,eAAYA,KAAK+V,KAAKE,cAEtBjW,YAASA,KAAK+V,KAAKG,cAEnBlW,aAAUA,KAAK8V,OAAO3P,QAEtBnG,cAAWA,KAAK8V,OAAOK,SAEvBnW,wBAAqB,CAAC,QAAS,SAAU,WASzCA,gBAAc0E,GAAM1E,KAAK8V,OAAOM,WAAW1R,GAPhD2R,eACP,OAAOrW,KAAK+V,KAAKM,SAEVA,aAASC,GAChBtW,KAAK+V,KAAKM,SAAWC,EAKdC,0BACP,OAAOvW,KAAKgW,UAAUQ,IAAI,iCAEnBC,iBACP,OAAOzW,KAAKgW,UAAUQ,IAAI,gCAGnBE,mBACP,OAAO1W,KAAKgW,UAAUQ,IAAI,0BAGnBG,mBACP,OAAwD,IAAjD3W,KAAKgW,UAAUQ,IAAI,0BAGnBI,yBACP,QAAS5W,KAAKgW,UAAUQ,IAAI,gCAGrBK,iBACP,OAAOC,WACHC,KACIC,KAAKC,MACLjX,KAAKgW,UAAUQ,IAAI,+BAAiC,mDA7CvDX,GAA6BzR,8DAA7ByR,EAA6BvR,o9DA1NlCF,gCAAOA,6JA0NFyR,GAAb,sDC/JgCzR,kBAIIA,SACJA,kCADIA,kGAvBhBA,iBAMIA,mEAAS8S,mBAET9S,uBAA2BA,iBAAKA,QAChCA,kBACIA,kBAAmBA,SAA0BA,QAC7CA,kBACIA,SAKJA,QACAA,kBACIA,yBAMJA,QACJA,QACJA,8CAtBIA,2EAFAA,sBAOuBA,6BAEfA,+GAQqBA,6EAsBjCA,kBAIIA,2CAIJA,oCAJIA,kJAMRA,kBAIIA,0BACAA,aAAGA,0BAAqBA,QAC5BA,8BAFiBA,8BACVA,+EAEPA,kBAKIA,kBACIA,kBAAmBA,SAAsBA,QACzCA,kBACIA,SAKJA,QACJA,QACAA,kBACIA,qBAGIA,iDAASgR,cAAc,QAEvBhR,mBACJA,QACAA,qBAGIA,iDAAS+S,gBAET/S,mBACJA,QACJA,QACJA,gCAzB2BA,mCAEfA,oLA0CrB,IAAMgT,GAAb,MAAM,gBAAoCC,KAsDtCxX,YACYiW,EACAwB,GAERpS,QAHQlF,cACAA,gBAtDIA,SAAMA,KAAKsX,SAASC,QAEpBvX,YAASA,KAAKsX,SAASE,WAEvBxX,eAAYA,KAAKsX,SAASG,cAE1BzX,cAAWA,KAAKsX,SAASI,aAEzB1X,aAAUA,KAAKsX,SAASK,YAExB3X,YAASA,KAAKsX,SAASM,WACvB5X,WAAQA,KAAKsX,SAASO,MAEtB7X,WAAQA,KAAK8V,OAAOgC,iBAEpB9X,aAAUA,KAAK8V,OAAOiC,QAEtB/X,UAAOA,KAAK8V,OAAOkC,KAEnBhY,uBAAiBiY,MAAc,CAC3CjY,KAAK8V,OAAO3P,QACZnG,KAAKgY,KAAKE,aAAaC,MAAKC,QAAU,OACvCD,MACC5W,OAAI,EAAE4E,cACF,MAAM6R,EAAOhY,KAAK8V,OAAOkC,KACnBK,KAAaC,MAAiB,CAChCC,QAASpS,EAAQoS,QACjBC,IAAKrS,EAAQsS,WACb3L,MAAOkL,EAAKjY,MAAM2Y,KAClBC,SAAU,EACVC,cAAc,IAEZC,EAAU,IAAGC,QAAOd,EAAKjY,MAAM2Y,KAAM,iBACvCvS,EAAQoS,SAA+B,SAApBpS,EAAQoS,QACrB,KAAOF,EACP,KACPlS,EAAQN,MAAQ,KAAOM,EAAQN,MAAQ,QACtB,QAAhBpB,IAAQ0R,gBAAQ1B,eAAE5R,SAAU,kBACJ,QAAhBkW,IAAQ5C,gBAAQ6C,eAAEnW,SAAU,GAAK,EAAI,GAAK,MACtD,OAAIsD,EAAQ8S,SAASjZ,KAAKsX,SAAS4B,SAAS/S,EAAQ8S,SAC7CJ,KAIP7Y,kBAAe,IAAImZ,IAAsB,MAEjCnZ,iBAAc,IAAMA,KAAK8V,OAAOsD,cAErCC,kBACP,OAAOrZ,KAAKsZ,aAAaC,WAUtB1X,WACH7B,KAAKwZ,aACD,mBACAvB,MAAc,CACVjY,KAAK8V,OAAO2D,OACZzZ,KAAK8V,OAAOgC,iBACZ9X,KAAKsZ,eAEJnB,QAAKuB,MAAa,MAClBC,UAAU,EAAEF,EAAQG,MACjB,MAAMC,EAAS,GACTC,EAAU,GAChB,UAAWC,KAAQN,EAAQ,CACvB,MAAMO,EACFD,EAAKE,UACLL,EAAU1V,KAAMgW,GAAMA,EAAEvU,KAAOoU,EAAKpU,IACxCkU,EAAO,IAAIE,EAAKI,QAAUJ,EAAKpU,MAAQ,CACnCyU,KAAML,EAAKE,SACLL,EAAU1V,KAAMgW,GAAMA,EAAEvU,KAAOoU,EAAKpU,IAChC,UACA,UACJ,OACN2F,QAAS,IAET0O,GACAF,EAAQO,KAAK,CACT1U,GAAIoU,EAAKI,QAAUJ,EAAKpU,GACxB2U,OAAQ,QACRC,SAAU,IAAMva,KAAKwa,cAAcT,KAG/C/Z,KAAKsX,SAASmD,UAAU,QAASZ,GACjC7Z,KAAKsX,SAASoD,WAAW,QAASZ,GAClC9Z,KAAKsX,SAASqD,YACV,QACA3a,KAAKqZ,YACC,CACI,CACItM,SACI/M,KAAKqZ,YAAYc,QACjBna,KAAKqZ,YAAY1T,GACrBiV,QAAS,6YAOjB,OAMnBJ,cAAcT,aACjB/Z,KAAKsX,SAAS4B,SAAmB,QAAVxU,EAAI,MAAJ6P,OAAI,EAAJA,EAAMsG,YAAIpG,eAAE9O,IACnC3F,KAAKsZ,aAAawB,KAAKf,GACvB/Z,KAAK8V,OAAOkC,KAAK+C,WAAW,CACxBC,SAAc,MAAJjB,OAAI,EAAJxF,EAAM5O,GAChBsV,WAAYlB,EAAKlZ,KACjBsZ,QAAY,MAAJ5F,OAAI,EAAJA,EAAM4F,UAAc,MAAJJ,OAAI,EAAJxF,EAAM5O,IAC9BuV,YAAanB,EAAKlZ,KAClBsa,aAAc,OACdC,MAAOrB,EAAKc,KAAO,CAAU,QAATtW,IAAKsW,YAAI7B,eAAEqC,UAAoB,QAAT5W,IAAKoW,YAAIS,eAAE3V,IAAM,mDA5H1DyR,GAAoBhT,kDAApBgT,EAAoB9S,kmFAnJzBF,iBACIA,eAMIA,iBACIA,sBAA0BA,sBAAUA,QACpCA,kBAAwBA,gBAAIA,QAChCA,QACJA,QACJA,QACAA,iBACIA,gBAA2CA,2BAAeA,QAC1DA,8BAIIA,4BACJA,QACAA,4BACIA,kBACIA,0BAASmX,2BAAwB9W,mBAGjCL,wCAGJA,QACJA,QACAA,mBACIA,kBAGIA,mBACIA,4BACJA,QACAA,4CA4BJA,QACAA,mBAGIA,mJAUAA,4CASJA,QACAA,4CAOAA,2BAgCJA,QACJA,0CA7HQA,0CAYAA,sCAEAA,oEAQQA,8BASAA,8FAIiBA,+CA+BjBA,yCAAmB,sDAAnBA,CAAmB,0DAAnBA,CAAmB,+BAAnBA,CAAmB,mCAAnBA,CAAmB,iCAAnBA,CAAmB,+BAAnBA,CAAmB,sGAWlBA,4CASJA,8CASAA,iVA+CRgT,GAAb,sDC7HO,IAAMoE,GAAb,MAAM,sDAAOA,8BAAwBlX,gRA7B7BF,iBACIA,eAMIA,iBACIA,sBAA0BA,sBAAUA,QACpCA,kBAAwBA,gBAAIA,QAChCA,QACJA,QACJA,eAPQA,4RAwBHoX,GAAb,sICOO,IAAMC,GAAb,MAAM,QAtCN5b,cAwCoBG,WAAQ,SACRA,UAAO,QAEZ0b,oBACP,OAAO1b,KAAK2b,YAA0B,QAAbpH,oBAAaE,eAAEmH,qDANnCH,8BAAoBnX,mdAnCzBF,iBAIIA,iBACIA,oBAAUA,gBAAIA,QAClBA,QACAA,iBACIA,SAAiDA,cACjDA,uFACJA,QACAA,iBACIA,eAOIA,0BACJA,QACAA,gBAOIA,qBACJA,QACJA,QACJA,eAvBQA,qEAQIA,iDAA+B,2BAS/BA,yCAA4B,iFAUnCqX,GAAb,2FCNgBrX,qBAKIA,iDAASyX,aAETzX,iBACIA,sBAA0BA,kBAAMA,QAChCA,kBAAwBA,SAEtBA,QACNA,QACJA,gCAJgCA,8FAQpCA,qBAIIA,iDAAS0X,iBAET1X,SACJA,gCADIA,6DAoBT,IAAM2X,GAAb,MAAM,QAgCFlc,YACYiW,EACAzB,EACA0B,EACAC,GAHAhW,cACAA,eACAA,YACAA,iBAnCLA,UAAO,EACPA,WAAQ,GAECA,iBAAc,CAC1B,CAAEa,KAAM,MAAOd,MAAO,GACtB,CACIc,KAAM,WACNd,SAAOic,MAASjF,OAAQ,IAAIC,KAAQ,GAAI,GAAGiF,YAI5Cjc,YAAS,GAcAA,eAAY,KACxBA,KAAKkc,KAAO,EACZlc,KAAK6X,MAAQ7X,KAAK+V,KAAKM,SAAS1Q,GAChC3F,KAAK8V,OAAOqG,aAfLC,sBACP,SAA6B,QAApB1X,EAAS,QAAT6P,OAAKyD,YAAIvD,eAAE+B,IAAI,aAAKwC,eAAEjZ,OAGxBsc,sBACP,QAASrc,KAAKgW,UAAUQ,IAAI,6BAGrBwB,WACP,OAAOhY,KAAK8V,OAAOkC,KAgBVnW,uEACH7B,KAAK+V,KAAKuG,YAAYnE,MAAKoE,OAAOC,GAAMA,UACxCxc,KAAK+V,KAAKG,cAAciC,QAAKoE,KAAOC,IAAO,MAADjY,OAAC,EAADA,EAAG1B,QAAS,IAC5D7C,KAAK6X,MAA0B,QAAlBtD,OAAKwB,KAAKM,gBAAQ5B,eAAE9O,GACjC3F,KAAKyc,OAAS,CACV,CAAE9W,GAAsB,QAAlBjB,OAAKqR,KAAKM,gBAAQ2C,eAAErT,GAAI9E,KAAM,gBACjCb,KAAK+V,KAAK2G,kBAAkB1c,KAAK+V,KAAKM,aAI1CsG,YACH3c,KAAKgY,KAAK+C,WAAW,CACjBrC,MAAO1Y,KAAKkc,KAAO,MACbU,SACIC,QAAsB,IAAI7F,KAAQ,CAAE8F,UAAW,IAC/C9c,KAAKkc,SAETF,MAASjF,OAAQ,IAAIC,KAAQ,GAAI,IACrCiF,UACFc,MAAO,wBAEX/c,KAAKgd,WAGFA,WACHhd,KAAKgY,KAAKiF,mBACLjd,KAAKgY,KAAKkF,OACfld,KAAKqU,QAAQa,SAAS,CAAC,QAAS,QAAS,QAGhCiI,qEAET,GADAnd,KAAKgY,KAAKiF,oBACLjd,KAAKgY,KAAKkF,MAAO,OAEtB,MAAME,EAAWpd,KAAKgW,UAAUQ,IAAI,oBAAsB,GACpD3Q,GAAQwX,UAAcC,OAAOpZ,KAAKsY,GAAKA,KAAKY,GAClD,IAAKvX,EAED,YADA7F,KAAKqU,QAAQa,SAAS,CAAC,QAAS,QAAS,QAG7C,MAAQ2C,QAAO0F,eAAgBH,EAASvX,GAClC2X,EAAMxd,KAAK+V,KAAK0H,YAAY,CAAC5F,IACnC,IAAKA,EAED,YADA7X,KAAKqU,QAAQa,SAAS,CAAC,QAAS,QAAS,QAG7C,MAAMwI,QAAkB1d,KAAK8V,OAAOgC,iBAAiBK,MAAKwF,QAAK,IAAIC,YAC7DC,QAAgBC,QAAeN,EAAIrD,OAAQoD,EAAaG,EAAUnc,IAAIib,GAAKA,EAAErC,QAAUqC,EAAE7W,KACzFoU,EAAO2D,EAAUxZ,KAAKsY,GAAKA,EAAErC,SAAW0D,GAAWrB,EAAE7W,KAAOkY,GAC7D9D,GAIL/Z,KAAK8V,OAAOkC,KAAK+C,WAAW,CACxBC,SAAc,MAAJjB,OAAI,EAAJgE,EAAMpY,GAChBsV,WAAYlB,EAAKlZ,KACjBsZ,QAAY,MAAJ4D,OAAI,EAAJA,EAAM5D,UAAc,MAAJJ,OAAI,EAAJgE,EAAMpY,IAC9BuV,YAAanB,EAAKlZ,KAClBsa,aAAc,OACdC,MAAOrB,EAAKc,KAAO,CAAU,QAATtG,IAAKsG,YAAIpG,eAAE4G,UAAoB,QAAT3W,IAAKmW,YAAI7B,eAAErT,IAAM,KAE/D3F,KAAK8V,OAAOsD,eAXRpZ,KAAKqU,QAAQa,SAAS,CAAC,QAAS,QAAS,wDAzFxC6G,GAAqB3X,0EAArB2X,EAAqBzX,m1BAnE1BF,qBACIA,gBAGIA,SACJA,QACAA,sCACAA,iBACAA,iBAGIA,oBAIIA,gCAAS4Z,gBAET5Z,iBACIA,sBAA0BA,iBAAKA,QAC/BA,mBAAwBA,UAEtBA,QACNA,QACJA,QACAA,4BAcJA,QACJA,QACAA,qEApCQA,iEAEsBA,8BAaUA,qDAS3BA,0CAAwB,8QAuChC2X,GAAb,0BClEgB3X,SACIA,yBACJA,gCACAA,SACIA,6BACJA,mCACAA,SACIA,0BAKJA,8BAFQA,uGAGRA,SACIA,0BACJA,SAaT,IAAM6Z,GAAb,MAAM,gBAAqC5G,KAQvCxX,YACYiW,EACAoI,EACAnI,GAER7Q,QAJQlF,cACAA,cACAA,YAVDme,WACP,OAAOne,KAAK8V,OAAOqI,KAEZC,mBACP,OAAOpe,KAAK8V,OAAOsI,aAWVvc,+DACH7B,KAAK+V,KAAKuG,YAAYnE,MAAKoE,OAAOC,GAAMA,IAAIoB,YAClD5d,KAAK8V,OAAOuI,WACPre,KAAK8V,OAAOkC,MAAMhY,KAAK8V,OAAOwI,UACnCte,KAAK8V,OAAOkC,KAAK+C,WAAW,CAAEI,aAAc,SAC5Cnb,KAAKwZ,aACD,eACAxZ,KAAKke,OAAOK,SAAS5E,UAAW6E,IACxBA,EAAMC,IAAI,SACVze,KAAK8V,OAAO4I,QAAQF,EAAMhI,IAAI,YAG1CxW,KAAKwZ,aACD,cACAxZ,KAAKke,OAAOS,cAAchF,UAAW6E,IAC7BA,EAAMC,IAAI,YACVze,KAAK8V,OAAO4I,QAAQF,EAAMhI,IAAI,+DAhCrCyH,GAAqB7Z,8DAArB6Z,EAAqB3Z,mPA9B1BF,iBACIA,WACIA,iCAGAA,iCAGAA,iCAOAA,iCAGJA,QACJA,eAlBkBA,kCACKA,qCAGAA,yCAGAA,mNAsBlB6Z,GAAb,4DCiBO,IAAMW,GAAb,MAAM,QAUF/e,YAAoBgf,kBAFH7e,gBAAa,IAAIU,MAI3Boe,YACH9e,KAAK+e,MAAO/e,KAAKsB,WAAYtB,KAAK+e,KAClC/e,KAAKgf,WAAWrd,KAAK3B,KAAK+e,MAGvBE,eACHjf,KAAK6e,QAAQK,KAAKC,KAAyB,CACvCC,SAAU,OACVC,UAAW,OACXzQ,KAAM,CAAE0Q,KAAMtf,KAAKuf,uDArBlBX,GAA0Bxa,sCAA1Bwa,EAA0Bta,+hBAjD/BF,iBAGIA,iBACIA,iBACIA,iBACIA,oBAAUA,iBAAKA,QACnBA,QACAA,gBACKA,SACuCA,QAEhDA,QACAA,iBACIA,iBACIA,qBAAUA,kBAAKA,QACnBA,QACAA,iBAAMA,UAAiCA,QAC3CA,QACJA,QACAA,kBACIA,qBAKIA,gCAAS4Z,gBAET5Z,UACJA,QACAA,qBAIIA,gCAAS4Z,mBAET5Z,kBACJA,QACJA,QACJA,eA9BiBA,2OAQCA,sEAONA,gDAAqC,qCAIrCA,wNAqBPwa,GAAb,6BCZ4Bxa,yBAIIA,SACJA,kCAHIA,iBAEAA,yFAhBZA,6BAOIA,yBAGIA,0DAAiB+S,kCAEjB/S,iDAMJA,QACJA,gCAVQA,gDAIoBA,4EAsBpBA,yBAIIA,SACJA,kCAHIA,oBAEAA,yFAnBZA,6BAMIA,yBAOIA,0DAAiBkR,+DAEjBlR,iDAMJA,QACJA,sCAdQA,mJAQqBA,yEAiBrBA,yBAIIA,SACJA,kCAHIA,uBAEAA,0DAgBJA,yBAIIA,SACJA,kCAHIA,iBAEAA,oEAhBZA,6BAMIA,yBAIIA,0DAAiBoR,4CAEjBpR,iDAMJA,QACJA,sCAVQA,yEAIqBA,0FAe7BA,mCAKIA,+FAA+B,2DACjBob,EADiBnK,OACjBmK,uBACjBpb,+CAJGA,iBAAe,sBAAfA,CAAe,sDANvBA,SAGIA,2DAQAA,gBACIA,0CACJA,QACJA,+BAV0BA,yEAL9BA,SACIA,mDAeJA,gDAdSA,uEAAoC,wDAiCzCA,kBAKIA,kBACIA,eAAKA,SAAsCA,QAC3CA,kBACIA,SAEJA,QACJA,QACAA,qBAGIA,qDACiCqb,OADjCC,SACiCD,mBACpC,GACjBlE,sBAEoBnX,oBAAUA,iBAAKA,QACnBA,QACJA,oCAhBaA,uCAEDA,2JAeZA,kBAKIA,gCACJA,kDA9CRA,kBACIA,kBAGIA,kBACIA,SACJA,QACAA,qBAIIA,iDAASub,mBAETvb,kBACJA,QACJA,QACAA,0BACIA,yBAuBAA,yBAOJA,QACJA,2CA5CsCA,sCAC1BA,8DAIAA,gDAWkBA,uCAuBjBA,0FAOTA,kBAGIA,0BACAA,aAAGA,0CAA8BA,QACrCA,eAFiBA,sDAKjBA,kBAGIA,aACIA,yEACJA,QACJA,8DAsBL,IAAMwb,GAAb,MAAM,QAoDF/f,YACYkW,EACA8J,EACA/J,EACAE,EACA3B,GAJArU,YACAA,eACAA,cACAA,iBACAA,eAxDLA,gBAA+B,GAC/BA,sBAAmB,CACtB,CAAEa,KAAM,eAAgBd,MAAO,GAC/B,CAAEc,KAAM,gBAAiBd,MAAO,GAChC,CAAEc,KAAM,kBAAmBd,MAAO,GAClC,CAAEc,KAAM,kBAAmBd,MAAO,IAClC,CAAEc,KAAM,aAAcd,MAAO,KAG1BC,gBAAsB,GAGbA,eAAYA,KAAK+V,KAAKE,cAEtBjW,cAAWA,KAAK+V,KAAK+J,gBAErB9f,aAASiY,QAAc,CACnCjY,KAAKqW,SACLrW,KAAK8V,OAAO3P,UACbgS,MACClW,QAAO,EAAEua,OAASA,IAClBjb,OAAI,EAAE+U,KAAS,CACX,CACI3Q,GAAI3F,KAAK+V,KAAKM,SAAS1Q,GACvB9E,KAAM,iBAEPb,KAAK+V,KAAK2G,kBAAkBpG,MAIvBtW,aAAUA,KAAK8V,OAAOiC,QACtB/X,aAAUA,KAAK8V,OAAO3P,QAEtBnG,YAASA,KAAK8V,OAAOiK,iBACrB/f,cAAWA,KAAK6f,QAAQ1J,SAWxBnW,gBAAc0E,GAAM1E,KAAK8V,OAAOM,WAAW1R,GAV9Csb,YAAY1J,iDACrB,MAAM2J,QAAajgB,KAAKmG,QAAQgS,MAAKwF,QAAK,IAAIC,YAC1CtH,IAAKtW,KAAK+V,KAAKM,SAAWC,GAC9B,MAAMmG,EAASzc,KAAK+V,KAAK2G,kBAAkB1c,KAAK+V,KAAKM,WACzCoG,EAAOvY,KAAMsY,IAAK,MAAC,OAAa,QAAb0D,IAAKC,gBAAQ1L,eAAE2L,SAAS5D,EAAE7W,OAC7C8W,EAAO5Z,QACf7C,KAAKoW,WAAW,CAAE+J,SAAU,CAAC1D,EAAO,GAAG9W,QAMpCrE,qBACP,OAAuD,QAAhDiT,OAAKyB,UAAUQ,IAAI,qCAA6B/B,SAW9C5S,uEACH7B,KAAK+V,KAAKuG,YAAYnE,MAAKoE,OAAOC,KAAQA,IAAIoB,kBAC9C5d,KAAK6f,QAAQvD,YAAYnE,QAAKoE,KAAOC,KAAQA,IAAIoB,YACvD5d,KAAKggB,YAAYhgB,KAAK+V,KAAKM,UAC3BrW,KAAKqgB,WAAa,KACkC,QAAlC3b,EAAgB,QAAhB6P,OAAKuB,OAAOkC,YAAIvD,eAAE+B,IAAI,oBAAYwC,eAAEjZ,QAAS,IACrDgB,QAASyb,GAAOxc,KAAKqgB,WAAW7D,EAAE7W,KAAM,GAClD3F,KAAKsgB,WAAatgB,KAAK6f,QAAQ5d,OAAQse,GAAMvgB,KAAKqgB,WAAWE,EAAE5a,OAG5D6a,gBAAgBjB,EAAcR,GAAgB,GAC7C/e,KAAKsB,SACLtB,KAAKqgB,WAAWd,EAAM5Z,IAAMoZ,GAE5B/e,KAAKqgB,WAAa,GAClBrgB,KAAKqgB,WAAWd,EAAM5Z,IAAMoZ,EAC5B/e,KAAKygB,kBAETzgB,KAAKsgB,WAAatgB,KAAK6f,QAAQ5d,OAAQse,GAAMvgB,KAAKqgB,WAAWE,EAAE5a,KAG5D8a,iBACH,MAAMC,EAAS1gB,KAAK6f,QAAQ5d,OAAQse,GAAMvgB,KAAKqgB,WAAWE,EAAE5a,KAC5D3F,KAAK8V,OAAOkC,KAAK+C,WAAW,CAAE4F,UAAWD,EAAQE,OAAQF,EAAO,KAChE1gB,KAAKqU,QAAQa,SAAS,CAAC,QAAS,SAAU,0DApFrC0K,GAAsBxb,uFAAtBwb,EAAsBtb,8kFAlN3BF,iBACIA,eAMIA,iBACIA,sBAA0BA,sBAAUA,QACpCA,kBAAwBA,gBAAIA,QAChCA,QACJA,QACJA,QACAA,iBACIA,iBACIA,gBACIA,+BACJA,QACAA,kBAGIA,sDAoBAA,uDAuBAA,8BAKIA,0BAGIA,yCAAiB4Z,+CAEjB5Z,iCAMJA,QACJA,QACAA,uDAoBJA,QACJA,QACJA,QACAA,mBACIA,qDAiBJA,QACAA,2BAiDAA,6CAQAA,+EAhLQA,0CAoBSA,4EAmBAA,yEA2BGA,2EAIqBA,6CAWxBA,sDAoBEA,+CAA0B,cAkBvCA,oZAsFDwb,GAAb,4CC9HoBxb,kBAIIA,gBACKA,SAEEA,QAGPA,qBAIIA,iBACJA,QACJA,kCAXSA,2JA+CTA,kBAIIA,4BAIAA,gBAAMA,SAA6BA,QACvCA,kCAHQA,yBAEEA,wDAWdA,gBAAuBA,mBAAOA,+BAC9BA,+BAEIA,yHA0Bb,IAAMyc,GAAb,MAAM,QAeFhhB,YAAoBiW,iBAdb9V,kBAAc,EACdA,kBAAc,EACdA,cAAU,EAEDA,cAAW,KAAW8gB,uCAClC9gB,KAAK+X,SAAU,QACT/X,KAAK8V,OAAOiL,WAAWtZ,MAAO+U,IAAMwE,QAAYxE,IACtDxc,KAAK+X,SAAU,IAGRC,WACP,OAAOhY,KAAK8V,OAAOkC,mDAZd6I,GAAyBzc,sCAAzByc,EAAyBvc,8xCA7L9BF,iBACIA,eAMIA,iBACIA,sBAA0BA,sBAAUA,QACpCA,kBAAwBA,gBAAIA,QAChCA,QACJA,QACJA,QACAA,iBAGIA,gBACIA,kCACJA,QACAA,kBAGIA,kBACIA,qBAAUA,kBAAKA,QACnBA,QACAA,kBACIA,6DAOJA,QACAA,iBAIKA,iBAAIA,QAEbA,QACAA,kBAGIA,kBACIA,qBAAUA,qBAAQA,QACtBA,QACAA,kBACIA,UACJA,QACAA,iBAIKA,iBAAIA,QAEbA,QACAA,mBACIA,mBACIA,kBACIA,qBAAUA,kBAAKA,QACnBA,QACAA,kBACIA,UACJA,QACAA,sBAIIA,+DAEAA,UACJA,QACAA,iBAIKA,iBAAIA,QAEbA,QACAA,mBASIA,0BAiBJA,QACJA,QACAA,mBACIA,mBACIA,kBACIA,qBAAUA,kBAAKA,QACnBA,QACAA,kBACIA,UAEJA,QACAA,sBAIIA,+DAEAA,UACJA,QACAA,iBAIKA,iBAAIA,QAEbA,QACAA,mBASIA,0BAUJA,QACJA,QACAA,sBAKIA,gCAAS4Z,eAET5Z,2BACAA,kCAKJA,QACJA,QACAA,8CAnKQA,0CAqBIA,uSAWAA,0CAWAA,8EAKAA,0CAUIA,sGAIAA,+FAIAA,oDAKAA,0CAMJA,4HASsBA,yEAuBlBA,8GAKAA,+FAIAA,oDAKAA,0CAMJA,0HASqBA,yEAczBA,qCAGOA,kCAIFA,0WAyBRyc,GAAb,0BCpKO,MAAMI,GAAyB,CAClC,CAAEtb,GAAI,aAAc9E,KAAM,cAC1B,CAAE8E,GAAI,cAAe9E,KAAM,eAC3B,CAAE8E,GAAI,aAAc9E,KAAM,uBAC1B,CAAE8E,GAAI,aAAc9E,KAAM,uBAC1B,CAAE8E,GAAI,YAAa9E,KAAM,kBACzB,CAAE8E,GAAI,WAAY9E,KAAM,iBACxB,CAAE8E,GAAI,eAAgB9E,KAAM,gBAC5B,CAAE8E,GAAI,SAAU9E,KAAM,0CCrBduD,oBACIA,oBAAUA,iBAAKA,QACnBA,mCA6DoBA,yBAIIA,SACJA,kCAHIA,oBAEAA,yEAdhBA,kBAIIA,4BACIA,yBAEIA,4DAAkB,GAACmX,IAGnBnX,gCAMJA,QACJA,QACAA,4BACIA,oBAIIA,4DAAkB,GAACmX,IAJvBnX,QAOAA,qBAAWA,kCAAsBA,QACrCA,QACJA,+CArBYA,+BAIqBA,uCAYrBA,yEAjEpBA,iBACIA,iBACIA,4BACIA,mBAIIA,qEAJJA,QAOAA,qBAAWA,oCAAwBA,QACvCA,QACAA,qBAGIA,8DAAS8c,qBAAgB,GAAI,KAAInI,oBAEjC3U,oBAAUA,eAAGA,QACjBA,QACAA,qBAIIA,2GAGxB,KACwBA,qBAAUA,UAIRA,QACNA,QACJA,QACAA,mBAQIA,0BA6BJA,QACJA,8CAjEgBA,iCAeJA,2CAKUA,gEAUdA,yEAOqBA,mCAsDlC,IAAM+c,GAAb,MAAM,QAgBFthB,YACqCuhB,gBAfpBphB,WAAQ,IAAIU,MAEtBV,cAAU,EAMDA,gBAAkCihB,GAS9CjhB,KAAKqhB,UAAYD,EAAME,QAAU,IAAI/f,IAAKggB,IACtCA,EAAIC,MAAQD,EAAIC,MAAMjgB,IAAK+G,GAAM,CAC7BA,EAAE,GACFmZ,KAAKC,UAAUpZ,EAAE,MAEdiZ,IAZJI,aACP,MAAO,WAAahR,KAAKiR,MAAsB,SAAhBjR,KAAKkR,UAejCC,cACH9hB,KAAK+X,SAAU,EACf,MAAMsJ,EAAWrhB,KAAKqhB,SAAS9f,IAAKggB,GAChC1P,+BACO0P,GAAG,CACNC,MAAOD,EAAIC,MAAMjgB,IAAK+G,IAClB,IAAIvI,EAAQuI,EAAE,GACd,IACIvI,EAAQ0hB,KAAKM,MAAMzZ,EAAE,UAChBmE,IACT,MAAO,CAACnE,EAAE,GAAIvI,QAI1BC,KAAK8C,MAAMnB,KAAK,CAAEqgB,OAAQ,OAAQC,SAAUZ,kDA1CvCF,GAA4B/c,MAiBzB8d,gCAjBHf,EAA4B7c,gjCA/GjCF,kBACIA,cAAIA,uCAA2BA,QAC/BA,2BAGJA,QACAA,kBACIA,oBAEIA,gCAAS4Z,0CAET5Z,yBACJA,QACAA,yBAyEJA,QACAA,oBAGIA,oBAAmBA,gCAAS4Z,kBAAe5Z,yBAAYA,QAC3DA,eAzF8CA,kCAWrBA,4aAkGpB+c,GAAb,6FC9GY/c,oBACIA,oBAAUA,iBAAKA,QACnBA,mCAOAA,kBACIA,oBAMIA,iBAAIA,gBAAMA,aAACA,QAAOA,cACtBA,QACAA,6BACIA,oBAMAA,qBAAWA,4BAAgBA,QAC/BA,QACJA,+BAfQA,8GAgBRA,kBACIA,oBAOIA,qBAAQA,gBAAMA,aAACA,QAAOA,cAC1BA,QACAA,6BACIA,oBAOAA,qBAAWA,gCAAoBA,QACnCA,QACJA,0CAjBQA,2FAaIA,kJAiBAA,uBAIIA,6DAAW+d,EAAX9M,OAAW8M,eAEX/d,SACAA,uBAOJA,oCAZIA,uBAAmB,gBAInBA,0BAGIA,6EArBpBA,kBACIA,gCAQAA,QACAA,6BACIA,+BACIA,8BAeAA,oBAOIA,yDAAwBge,EAAxB/M,OAAwB+M,YAP5Bhe,QASJA,QACJA,QACJA,4CAnCQA,mFAUwBA,qCAkBhBA,oCAA4B,6CAA5BA,CAA4B,oDAQ5CA,kBACIA,oBAAyBA,wBAAYA,QACrCA,6BACIA,uBAMJA,QACJA,mCACAA,kBACIA,oBAOIA,uBAAUA,gBAAMA,aAACA,QAAOA,cAC5BA,QACAA,6BACIA,oBAOAA,qBAAWA,kCAAsBA,QACrCA,QACJA,+BAjBQA,0HAlGZA,kBAKIA,yBAmBAA,yBAqBAA,wBAuCAA,wBAWAA,yBAqBAA,kBACIA,oBAAsCA,0BAAcA,QACpDA,2BAA8CA,UAE5CA,QACNA,QACAA,mBACIA,qBAAmCA,yBAAYA,QAC/CA,yBAQJA,QACJA,oCAlIIA,0BAEoBA,4CAmBAA,gDAqBAA,4CAuCAA,mDAWAA,kDAuB8BA,0EAS1CA,wBAAS,UAATA,CAAS,SAATA,CAAS,uEAOrBA,qBAIIA,qBAA4CA,iDAASmR,gBACjDnR,kBACJA,QACJA,gCAHuBA,iEAKnBA,kBACIA,0BACAA,aAAGA,mCAAuBA,QAC9BA,mCAGAA,yBACIA,SACJA,kCAF8CA,iBAC1CA,2BAaT,IAAMie,GAAb,MAAM,QAwCFxiB,YACqCuhB,gBAvCpBphB,WAAQ,IAAIU,MAEtBV,UAAkB,IAAIsiB,KAAU,CACnCzhB,KAAM,IAAI0hB,KAAYviB,KAAKsf,KAAKze,MAAQ,GAAI,CAAC2hB,gBAC7CtH,YAAa,IAAIqH,KAAYviB,KAAKsf,KAAKpE,aAAe,IACtDuH,SAAU,IAAIF,KAAYviB,KAAKsf,KAAKmD,UAAY,GAAI,CAChDD,gBAEJE,WAAY,IAAIH,KAAYviB,KAAKsf,KAAKoD,WAAY,CAC9CF,gBAEJG,KAAM,IAAIJ,KAAYviB,KAAKsf,KAAKqD,MAAQ,IACxCC,cAAe,IAAIL,KAAYviB,KAAKsf,KAAKsD,gBAAiB,GAC1DC,aAAc,IAAIN,KAAYviB,KAAKsf,KAAKuD,cAAgB,KAGrD7iB,cAAU,EAEDA,gBAAuB,CAAC8iB,MAAOC,MAAOC,OAG3C1D,WACP,OAAOtf,KAAKohB,MAAM9B,MAAQ,IAAI2D,IAIvBC,iBACP,OAAOljB,KAAKohB,MAAM8B,YAAc,GAGzBC,eACP,OAAOnjB,KAAKgY,KAAKoL,SAAST,KAAK5iB,MAG5BsjB,cAActjB,EAAgB,GACjC,MAAO,GAAGA,KAWPujB,OAAOxgB,GACV,IAAK9C,KAAKgY,OAAShY,KAAKgY,KAAKoL,SAAST,KAAM,OAC5C3iB,KAAKgY,KAAKoL,SAAST,KAAKY,cACxB,MAAMC,EAAQ1gB,EAAM0gB,MACdzjB,EAAQ+C,EAAM/C,MACdojB,EAAWnjB,KAAKmjB,UACjBpjB,GAAS,IAAI0jB,SACdN,EAAS9I,KAAKta,GACdC,KAAKgY,KAAKoL,SAAST,KAAKe,SAASP,IAIjCK,IACAA,EAAMzjB,MAAQ,IAQf4jB,UAAUC,GACb,IAAK5jB,KAAKgY,OAAShY,KAAKgY,KAAKoL,SAAST,KAAM,OAC5C,MAAMQ,EAAWnjB,KAAKmjB,SACtBnjB,KAAKgY,KAAKoL,SAAST,KAAKY,cACxB,MAAMM,EAAQV,EAAS5S,QAAQqT,GAE3BC,GAAS,IACTV,EAASW,OAAOD,EAAO,GACvB7jB,KAAKgY,KAAKoL,SAAST,KAAKe,SAASP,IAIlCrB,cACH9hB,KAAK+X,SAAU,EACf/X,KAAK8C,MAAMnB,KAAK,CACZqgB,OAAQ,OACRC,SAAU,CACN3C,KAAM,IAAI2D,IAAYpR,6CACf7R,KAAKsf,MAAI,CACZ3Z,GAAI3F,KAAKsf,KAAK3Z,IAAM,WAAQoe,MAAU,cACnC/jB,KAAKgY,KAAKjY,yDAzFpBsiB,GAA0Bje,MAyCvB8d,gCAzCHG,EAA0B/d,+GA/GtB0f,+FAsBwBA,gzDAhFjC5f,kBACIA,gBAAqBA,SAAmCA,QACxDA,2BAGJA,QACAA,2BAsIAA,2BAQAA,2CAMAA,mCACIA,gCAGJA,+BA7JyBA,kDACqBA,kCAMzCA,0CAAwB,cAqIxBA,kCAc8BA,+UAc9Bie,GAAb,mDClKYje,oBACIA,oBAAUA,iBAAKA,QACnBA,mCAOAA,kBACIA,oBAMIA,iBAAIA,gBAAMA,aAACA,QAAOA,cACtBA,QACAA,6BACIA,oBAMAA,qBAAWA,4BAAgBA,QAC/BA,QACJA,+BAfQA,8GAgBRA,kBACIA,oBAOIA,iBAAIA,gBAAMA,aAACA,QAAOA,cACtBA,QACAA,6BACIA,oBAOAA,qBAAWA,4BAAgBA,QAC/BA,QACJA,0CAjBQA,qFAaIA,4DAKZA,kBACIA,oBAAmBA,uBAAWA,QAC9BA,6BACIA,oBAOJA,QACJA,gCACAA,kBACIA,2BACIA,yCACJA,QACJA,mCA7DJA,kBAKIA,yBAmBAA,yBAqBAA,wBAYAA,wBAKJA,8BA3DIA,0BAEoBA,4CAmBAA,6CAqBAA,kDAYAA,0FAMxBA,qBAIIA,qBAA4CA,iDAAS6f,gBACjD7f,kBACJA,QACJA,gCAHuBA,iEAKnBA,kBACIA,0BACAA,aAAGA,0CAA8BA,QACrCA,mCAGAA,yBACIA,SACJA,kCAFyCA,iBACrCA,2BAaT,IAAM8f,GAAb,MAAM,QAkBFrkB,YACqCuhB,gBAjBpBphB,WAAQ,IAAIU,MAItBV,cAAU,EAGNmkB,aACP,OAAOnkB,KAAKohB,MAAM+C,OAIXC,YACP,OAAOpkB,KAAKohB,MAAMgD,OAAS,GAOxBviB,WACH7B,KAAKgY,KAAO,IAAIsK,KAAU,CACtBzhB,KAAM,IAAI0hB,KAAYviB,KAAKmkB,OAAOtjB,MAAQ,GAAI,CAC1C2hB,gBAEJ3c,MAAO,IAAI0c,KAAYviB,KAAKmkB,OAAOte,OAAS,GAAI,CAC5C2c,gBAEJE,WAAY,IAAIH,KAAYviB,KAAKmkB,OAAOzB,YACxCphB,SAAU,IAAIihB,OAAcviB,KAAKmkB,OAAO7iB,SAAU,MAInDwgB,cACH9hB,KAAK+X,SAAU,EACf,MAAMsM,EAAaxS,6CACZ7R,KAAKmkB,QAAM,CACdxe,GAAI3F,KAAKmkB,OAAOxe,IAAM,aAAUoe,OAAU,cACvC/jB,KAAKgY,KAAKjY,OAEjBC,KAAK8C,MAAMnB,KAAK,CACZqgB,OAAQ,OACRC,SAAU,CACN3C,KAAM,IAAI2D,IAAYpR,+BACf7R,KAAKohB,MAAMkD,QAAM,CACpBne,QAASnG,KAAKohB,MAAMkD,OAAOne,QACtBlE,OAAQqG,GAAMA,EAAE3C,KAAO0e,EAAW1e,IAClC4e,OAAO,CAACF,wDAjDpBH,GAAgC9f,MAmB7B8d,gCAnBHgC,EAAgC5f,mtCApGrCF,kBACIA,gBACIA,SACJA,QACAA,2BAGJA,QACAA,yBA+DAA,2BAQAA,2CAMAA,mCACIA,gCAGJA,+BAvFQA,6DAEsCA,kCAMzCA,0CAAwB,cA8DxBA,kCAc8BA,mTAc9B8f,GAAb,2FCpBwC9f,kBAIIA,+BACJA,kDAOJA,wBAGIA,4EAE5B+d,EAF4B9M,OAE5B8M,0BAEyB/d,0CALGA,sEAMJA,kBAIIA,kBAOIA,qBAIIA,oBAAUA,kBAAMA,QACpBA,QACJA,QACAA,kBAGIA,SACJA,QACAA,qBAEIA,mEAASmR,EAATF,OAASE,aAETnR,oBAAUA,eAAGA,QACjBA,QACJA,0CAxBQA,6GAQIA,8BAQJA,8DAlDZA,kBAKIA,kBACIA,kBACIA,SACJA,QACAA,yBAMJA,QACAA,kBAGIA,6BACJA,QACAA,+BAQAA,0BA8BJA,kCApDYA,+BAICA,wCAQLA,oDAQCA,yCAIAA,iGApCjBA,qBAIIA,iBACIA,0BA4DJA,QACJA,mDAhEIA,iBAMyBA,oFATjCA,SACIA,4BAmEJA,6CAlESA,wFAJjBA,SACIA,yBACIA,iCAqEJA,QACJA,+BAtEsCA,kEAH1CA,iBACIA,iCAyEJA,yCAzEmBA,6CAA2B,wDA8E1CA,SACIA,qBACIA,oBACJA,QACAA,qBAOIA,sEAA8B,IAE9BA,qBACJA,QACJA,iCARQA,+CAA8B,8BAA9BA,CAA8B,gFAUlCA,qBAGIA,sEAA8B,IAE9BA,kBACJA,QACAA,qBAAwBA,kDAASogB,cAC7BpgB,wBACJA,mCA9BRA,qBAIIA,iCAgBAA,4CAYJA,yCA5BmBA,6CAA2B,yCA8B1CA,kBACIA,0BACAA,aAAGA,SAAaA,QACpBA,8BADOA,qDAeKA,kBAKIA,SAIJA,mDANIA,oCAEAA,kIAZZA,kBAKIA,kBACIA,kBAA0BA,SAAeA,QACzCA,yBAUJA,QACAA,kBAGIA,6BACJA,QACAA,wBAEIA,oEAAiBqgB,EAAjBpP,OAAiBoP,0BACpBrgB,QACLA,oCArBkCA,uBAGrBA,wCAYLA,oDAGAA,gEA5BZA,qBACIA,cAAIA,yBAAaA,QACrBA,QACAA,iBACIA,yBA4BJA,8BAzByBA,yCApL/B,YACFkb,EACAkC,EACA1e,SAEA,IAAI4hB,GAAe,EACnB,UAAWC,KAAQnD,EACf,GACIlC,EAAKmD,WAAakC,EAAK9jB,MACvBye,EAAKqD,KAAKvC,SAASuE,EAAK9jB,QACb,QAAX6D,IAAM6a,aAAK9K,eAAE2G,MAAMgF,SAASuE,EAAK9jB,QACnB,MAAd8jB,EAAK9jB,KACP,CACE,IAAI+jB,EAAU,EACd,UAAWC,KAAaF,EAAKnD,MAAO,CAChC,MAAM9I,EAAO,IAAI1B,KAAKlU,EAAM4V,MAC5B,OAAQmM,EAAU,QACT,aACDD,IAAWE,QAAQpM,GAAMsD,OAAStD,EAAMmM,EAAU,KAC5C,EACA,EACN,UACC,cACDD,IAAWG,QAASrM,GAAMsD,OAAStD,EAAMmM,EAAU,KAC7C,EACA,EACN,UACC,aACDD,GACI9hB,EAAMkiB,WAAYC,SAAgBJ,EAAU,IACtC,EACA,EACV,UACC,aACDD,GACI9hB,EAAMkiB,WAAYC,SAAgBJ,EAAU,IACtC,EACA,EACV,UACC,eACDD,GACI9hB,EAAMoiB,IAAI,kBAAoBL,EAAU,GAAK,EAAI,EACrD,cAEAD,KAGZF,EAAeE,GAAWD,EAAKnD,MAAM3e,OAG7C,OAAO6hB,EA8MJ,IAAMS,GAAb,MAAM,gBAA2C9N,KAoB7CxX,YACqCuhB,GAEjClc,QAFiClF,aAnBpBA,WAAQ,IAAIU,MAEtBV,aAAU,GAYVA,gBAAsC,GAEtCA,gBAAuB,GAM1BA,KAAK+X,QAAU,kBAGNlW,mEACT7B,KAAK+X,QAAU,kBACf/X,KAAKolB,MAAQ,IAAIC,IAAcrlB,KAAKohB,MAAMgE,OAC1CplB,KAAKwhB,YAAcxhB,KAAKohB,MAAMkE,kBACI,QAA9B/gB,EAAuB,QAAvBG,EAAgB,QAAhB6P,OAAK6Q,MAAMtiB,aAAK2R,eAAE8K,aAAKvG,eAAEnB,aAAKyD,eAAED,WAEpCrb,KAAKohB,MAAMmE,KAAK5L,UAAW6L,IACvBxlB,KAAK+X,QAAU,kBACf,MAAMmL,KAAauC,MAAOD,EAAKjkB,IAAK+d,GAASA,EAAKmD,WAC5ClhB,EAAM,GACZ,UAAWmkB,KAAOxC,EACd3hB,EAAImkB,GAAOF,EAAKvjB,OAAQqd,GAEhBA,EAAKmD,WAAaiD,GAClBC,GACIrG,EACAtf,KAAKwhB,MACLxhB,KAAKolB,MAAMtiB,QAK3B9C,KAAKkjB,WAAaA,EAClBljB,KAAK4lB,WAAarkB,EAClBvB,KAAK6lB,uBACL7lB,KAAK6O,QAAQ,gBAAiB,IAAO7O,KAAK+X,QAAU,GAAK,SAI1D+N,QAAQxG,EAAoByG,GAA0B,SACzD,MAAMC,EAAWhmB,KAAKolB,MAAMa,MAAM/hB,KAC7BgiB,GACGA,EAAIvgB,KAAO2Z,EAAK3Z,IAChBugB,EAAI/f,QAAQtD,SACRqjB,EAAI/f,QAAQggB,OACR,CAACjG,EAAGxb,IACAwb,GACCZ,EAAKnZ,QAAQjC,KAAMkiB,GAAQ1hB,EAAEiB,KAAOygB,EAAIzgB,IACnC,EACA,GACV,IAGZogB,IAA8B,QAAZxhB,IAAK4B,eAAOsO,eAAE5R,QAChC7C,KAAKohB,MAAMiF,cAAc/G,EAAKnZ,SAAS7C,KAAM6C,IACzC,MAAMmgB,EAAW,IAAIrD,IAAYpR,+BAAMyN,GAAI,CAAEnZ,aAC7CnG,KAAK8lB,QAAQQ,GAAU,KAG3BtmB,KAAKolB,MAAQ,IAAIC,IAAaxT,+BACvB7R,KAAKolB,OAFT3gB,EAEc,CACbwhB,MAAOjmB,KAAKolB,MAAMa,MACbhkB,OACIqG,KAEOA,EAAE3C,KAAO2Z,EAAK3Z,IACd2C,EAAEie,iBAAmBjH,EAAKiH,iBAGrChC,OAAO,CACJ,IAAItB,IAAYpR,+BACTyN,GAAI,CACPkH,SAAUR,EAASQ,SAAW,QAM7B,CACbP,MAAOjmB,KAAKolB,MAAMa,MAAM1B,OAAO,CAC3B,IAAItB,IAAYpR,+BAAMyN,GAAI,CAAEkH,SAAU,UAIlDxmB,KAAK6lB,uBAGFY,WAAWnH,GACdtf,KAAKolB,MAAQ,IAAIC,IAAaxT,+BACvB7R,KAAKolB,OAAK,CACba,MAAOjmB,KAAKolB,MAAMa,MAAMhkB,OACnBua,GACGA,EAAE7W,KAAO2Z,EAAK3Z,IAAM6W,EAAE+J,iBAAmBjH,EAAKiH,mBAG1DvmB,KAAK6lB,uBAGFa,mBAAmBpH,EAAoBqH,GAC1C,MAAMX,EAAWhmB,KAAKolB,MAAMa,MAAM/hB,KAC7BgiB,GACGA,EAAIvgB,KAAO2Z,EAAK3Z,IAAMugB,EAAIK,iBAAmBjH,EAAKiH,gBAE1D,IAAIN,EAAQ,IAAIjmB,KAAKolB,MAAMa,OAEvBA,EADAD,EACQhmB,KAAKolB,MAAMa,MACdhkB,OACIqG,KAEOA,EAAE3C,KAAO2Z,EAAK3Z,IACd2C,EAAEie,iBAAmBjH,EAAKiH,iBAGrChC,OAAO,CAAC,IAAItB,IAAYpR,+BAAMyN,GAAI,CAAEkH,SAAUG,OAE3C3mB,KAAKolB,MAAMa,MAAM1B,OAAO,CAC5B,IAAItB,IAAYpR,+BAAMyN,GAAI,CAAEkH,SAAUG,OAG9CV,EAAMW,KAAK,CAACriB,EAAGsiB,IAAMtiB,EAAE1D,KAAKimB,cAAcD,EAAEhmB,OAC5Cb,KAAKolB,MAAQ,IAAIC,IAAaxT,+BACvB7R,KAAKolB,OAAK,CACba,WAEJjmB,KAAK6lB,uBAGFA,uBACH,UAAWH,KAAO1lB,KAAK4lB,WACnB,UAAWtG,KAAQtf,KAAK4lB,WAAWF,GAC9BpG,EAAakH,SAAWxmB,KAAKolB,MAAMa,MAAME,OACtC,CAACjG,EAAG5X,IAAOA,EAAE3C,KAAO2Z,EAAK3Z,GAAKua,EAAI5X,EAAEke,SAAWtG,EAC/C,GAMT6G,WAAWzH,GACd,OAAOA,EAAKnZ,QAAQ5E,IAAK+G,GAAMA,EAAEzH,MAAMmmB,KAAK,MAGzCC,YACHjnB,KAAK8C,MAAMnB,KAAK,CACZqgB,OAAQ,OACRC,SAAU,CAAEmD,MAAOplB,KAAKolB,SAIzB8B,eACHlnB,KAAKmnB,oBAAqB,gDAvKrBhC,GAA2B/gB,MAqBxB8d,gCArBHiD,EAA2B7gB,myDAtMhCF,wBA2EAA,2BAiCAA,2CAMAA,kEAlHiCA,yBAAgB,cA4E5CA,mtBA0HA+gB,GAAb,4CCjOoC/gB,kBAIIA,6BACJA,wCADIA,gFAbZA,+BAKIA,kBACIA,kBACIA,SACJA,QACAA,yBAMJA,QACJA,kCAbIA,oBAIQA,+BAICA,8EArBrBA,SACIA,8BAIIA,4EAAiBgjB,EAAjB/R,MAAiB+R,yBAEjBhjB,+BACIA,mBAA8BA,gBAAIA,QACtCA,QACAA,sCAiBJA,QACJA,0CAhB4BA,4EA0BhBA,kBAIIA,6BACJA,wCADIA,+FAZZA,2BAEIA,oGAEAA,kBACIA,kBACIA,SACJA,QACAA,yBAMJA,QACJA,+CAbIA,sCAIQA,+BAICA,8DAVbA,iEACoBA,mEAtChCA,iBAKIA,iBAAwCA,SAAgBA,QACxDA,iBACIA,iCA6BAA,2CAkBJA,QACJA,6CApDIA,sBAEwCA,uBAErBA,mCAAuB,eAkEnD,IAAMijB,GAAb,MAAM,QAQFxnB,YACqCuhB,gBAPpBphB,WAAQ,IAAIU,MAItBV,kBAAiC,GAKpC,MAAMsd,GAASmI,SACXzlB,KAAKohB,MAAMjb,QAAQ5E,IAAK+G,GAAMA,EAAEzC,OAAS,UAEvCyhB,EAAa,GACnB,UAAWzhB,KAASyX,EAAQ,CACxB,MAAMnX,EAAUnG,KAAKohB,MAAMjb,QAAQlE,OAAQqG,GAAMA,EAAEzC,QAAUA,GAC7DyhB,EAAWjN,KAAK,CACZxZ,KAAMgF,EACNvE,WAAY6E,EAAQjC,KAAMoE,GAAMA,EAAEhH,UAClC6E,YAGRnG,KAAKsd,OAASgK,EAGXC,kBAAkB1hB,EAA4BF,GACjD,UAAWwe,KAAUte,EAAMM,QACvBnG,KAAKwnB,aAAarD,EAAOxe,IAAMwe,EAAOxe,KAAOA,EAI9C8hB,cACH,MAAMthB,EAAUnG,KAAKohB,MAAMjb,QAAQlE,OAC9BmkB,GAAQpmB,KAAKwnB,aAAapB,EAAIzgB,KAEnC3F,KAAK8C,MAAMnB,KAAK,CAAEqgB,OAAQ,OAAQC,SAAU,CAAE9b,2DApCzCkhB,GAAkCjjB,MAS/B8d,gCATHmF,EAAkC/iB,y4BAhFvCF,kBACIA,cAAIA,0BAAcA,QAClBA,oBACIA,oBAAUA,iBAAKA,QACnBA,QACJA,QACAA,kBACIA,wBAwDJA,QACAA,oBACIA,oBAAgCA,gCAAS4Z,kBACrC5Z,mBACJA,QACJA,eA3D0BA,+SAuErBijB,GAAb,0BC5FYjjB,oBACIA,oBAAUA,iBAAKA,QACnBA,kDAEJA,gBACIA,iBAGIA,sBAA2BA,kBAAMA,QACjCA,aAAGA,uDAA2CA,QAC9CA,mBAGIA,mDAAUsjB,qBAHdtjB,QAKJA,QACAA,iBACIA,oBAGIA,iDAASujB,qBAETvjB,+BACJA,QACJA,QACJA,mCAEIA,mBAGIA,0BACAA,aAAGA,SAAaA,QACpBA,8BADOA,2BAMZ,IAAMwjB,GAAb,MAAM,QA1CN/nB,cA2CqBG,WAAQ,IAAIU,MAItBmnB,gBAAgB/kB,GACnB9C,KAAK+X,QAAU,0BACf,MAAM+P,EAA4BhlB,EAAMilB,OACxC,KAAY,MAAPD,OAAO,EAAPpjB,EAASsjB,OAAO,OAAQhoB,KAAK+X,QAAU,GAC5C,MAAMiQ,EAAkBF,EAAQE,MAChC,IAAKA,EAAMnlB,OAAQ,OAAQ7C,KAAK+X,QAAU,GAC1C,MAAMkQ,EAAOD,EAAM,GACbE,EAAa,IAAIC,WACvBD,EAAWzc,iBAAiB,UAAYgB,IACpC,MACMmC,KAAOwZ,MADI3b,EAAEsb,OAAOpT,QAE1B3U,KAAK+X,QAAU,GACf/X,KAAK8C,MAAMnB,KAAK,CACZqgB,OAAQ,OACRC,SAAUrT,EACL3M,OAAQua,GAAuC,UAAhCA,EAAE7N,MAAQ,IAAI0Z,eAC7B9mB,IACI+G,GACG,IAAI2a,IAAYpR,+BACTvJ,GAAC,CACJnC,QAASyI,EACJ3M,OACIua,GAEO,YADHA,EAAE7N,MAAQ,IAAI0Z,eACC7L,EAAEmG,OAASra,EAAE3C,IAEpCpE,IAAKib,IAAO,CACT7W,GAAI6W,EAAE7W,GACN9E,KAAM2b,EAAE3b,KACRgF,MAAO2W,EAAEiG,SACTnhB,SAAUkb,EAAElb,SACZohB,WAAYlG,EAAEkG,sBAM9CwF,EAAWI,WAAWL,GAGnBM,oBAIHC,QAAa,2BAHI,qMA9CZZ,8BAAgCtjB,80BAvCrCF,oBACIA,cAAIA,gCAAoBA,QACxBA,2BAGJA,QACAA,0BAsBAA,kEA1B8CA,kCAIvCA,kCAAgB,mEAiClBwjB,GAAb,GCFaa,GAAb,MAAM,gBAAoCpR,KAmBtCxX,YAAoBkW,EAAmC8I,GACnD3Z,QADgBlF,YAAmCA,eAjB/CA,WAAQ,IAAImZ,IAAgC,IAE5CnZ,cAAW,IAAImZ,KAAyB,GAExCnZ,eAAY,IAAImZ,IAAwB,OAEhCnZ,UAAOA,KAAK0oB,MAAMC,eAElB3oB,aAAUA,KAAK4oB,SAASD,eAExB3oB,cAAWA,KAAK6oB,UAAUF,eAStC3oB,KAAKwZ,aACD,WACAxZ,KAAK+V,KAAK+J,gBAAgBnG,UAAiBrD,IAAiBwK,uCACxD,GAAIxK,EAAK,CACL,MAAMiP,SAAcvlB,KAAK8oB,mBAAmBxS,EAAI3Q,KAAKpE,IAChD+G,GAAM,IAAI2a,IAAa3a,IAE5BtI,KAAK6oB,UAAU/N,KAAKxE,EAAIyS,UAAY,OACpC/oB,KAAK0oB,MAAM5N,KAAKyK,QAfrBrC,iBACP,MAAMqC,EAAOvlB,KAAK0oB,MAAMnP,WACxB,OAAOkM,QAAOF,EAAKhkB,IAAK+G,GAAMA,EAAEma,WAuBvBuG,oBAAoB5D,uDAC7B,MAAM6D,EAAMjpB,KAAK6e,QAAQK,KAGvBiG,GAA6B,CAC3BvW,KAAM,CACFwW,QACAG,KAAMvlB,KAAKulB,KACXxN,QAAS/X,KAAK+X,QACduN,kBAAoB9I,GAAMxc,KAAKslB,kBAAkB9I,GACjD6J,cAAgB7J,GAAMxc,KAAKqmB,cAAc7J,MAG3C3D,QAAgBzV,QAAQ8lB,KAAK,CAC/BD,EAAIE,kBAAkBrmB,MACjBqV,QAAKoE,KAAOC,GAAmB,SAAbA,EAAEwF,SACpBpE,YACLqL,EAAIG,cAAcxL,cAEtBqL,SAAII,SACoB,QAAjB3kB,EAAO,MAAPD,OAAO,EAAPA,EAASwd,gBAAQxN,eAAE2Q,QAASA,IAG1BU,QAAQxG,EAAqB,IAAI2D,mDAC1C,MAAMgG,EAAMjpB,KAAK6e,QAAQK,KAGvBmD,GAA4B,CAC1BzT,KAAM,CACF0Q,OACA4D,WAAYljB,KAAKkjB,cAGnBrK,QAAgBzV,QAAQ8lB,KAAK,CAC/BD,EAAIE,kBAAkBrmB,MACjBqV,QAAKoE,KAAOC,GAAmB,SAAbA,EAAEwF,SACpBpE,YACLqL,EAAIG,cAAcxL,cAEtB,GAAwB,UAAb,MAAPrZ,OAAO,EAAPA,EAASyd,QAAmB,OAChC,MAAMuD,EAAOvlB,KAAK0oB,MAAMnP,WAClBsK,EAAQ0B,EAAK+D,UAAWpD,GAAQA,EAAIvgB,KAAO2Z,EAAK3Z,IAClDke,GAAS,EACT0B,EAAKzB,OAAOD,EAAO,EAAGhL,EAAQoJ,SAAS3C,MAEvCiG,EAAKlL,KAAKxB,EAAQoJ,SAAS3C,MAE/Btf,KAAKupB,WAAWvpB,KAAK+V,KAAKM,SAAS1Q,GAAI4f,GAAMjiB,KACzC,KACItD,KAAK0oB,MAAM5N,KAAK,IAAIyK,IACpB0D,EAAII,SAER,IAAOJ,EAAIE,kBAAkBpR,SAAU,KAIlCyR,UACTlK,EACA6E,EAAyB,kDAEzB,MAAMC,GAAQqB,QAAOnG,EAAKnZ,QAAQ5E,IAAK+G,GAAMA,EAAEzC,QACzCojB,EAAMjpB,KAAK6e,QAAQK,KAGvBgF,GAAkC,CAChCtV,KAAM,CACF0V,OAAQhF,EACR6E,SACAC,WAGFvL,QAAgBzV,QAAQ8lB,KAAK,CAC/BD,EAAIE,kBAAkBrmB,MACjBqV,QAAKoE,KAAOC,GAAmB,SAAbA,EAAEwF,SACpBpE,YACLqL,EAAIG,cAAcxL,cAEtB,GAAwB,UAAb,MAAP7E,OAAO,EAAPA,EAASiJ,QAAmB,OAChC,MAAMuD,EAAOvlB,KAAK0oB,MAAMnP,WAClBsK,EAAQ0B,EAAK+D,UAAWpD,GAAQA,EAAIvgB,KAAO2Z,EAAK3Z,IAClDke,GAAS,EACT0B,EAAKzB,OAAOD,EAAO,EAAGhL,EAAQoJ,SAAS3C,MAEvCiG,EAAKlL,KAAKxB,EAAQoJ,SAAS3C,MAE/Btf,KAAKupB,WAAWvpB,KAAK+V,KAAKM,SAAS1Q,GAAI4f,GAAMjiB,KACzC,KACItD,KAAK0oB,MAAM5N,KAAK,IAAIyK,IACpB0D,EAAII,SAER,IAAOJ,EAAIE,kBAAkBpR,SAAU,KAIlCsO,cAAclgB,iDACvB,MAAM8iB,EAAMjpB,KAAK6e,QAAQK,KAGvBmI,GAAoC,CAClCzY,KAAM,CACFzI,aAGF0S,QAAgBzV,QAAQ8lB,KAAK,CAC/BD,EAAIE,kBAAkBrmB,MACjBqV,QAAKoE,KAAOC,GAAmB,SAAbA,EAAEwF,SACpBpE,YACLqL,EAAIG,cAAcxL,cAEtB,MAAwB,UAAb,MAAPrZ,OAAO,EAAPA,EAASyd,QAA0B,IACvCiH,EAAII,QACGxQ,EAAQoJ,SAAS9b,WAGfsjB,WAAWnK,iDACpB,MAAMzG,UAAgB6Q,MAClB,CACI3M,MAAO,uBACPnC,QAAS,qDAAqD0E,EAAKze,sBACnE8oB,KAAM,CACFhb,KAAM,OACNib,MAAO,iBACPhP,QAAS,WAGjB5a,KAAK6e,SAET,GAAuB,SAAnBhG,EAAQmJ,OAAmB,OAC/BnJ,EAAQd,QAAQ,6BAChB,MAAMwN,EAAOvlB,KAAK0oB,MAAMnP,WAAWtX,OAAQikB,GAAQ5G,EAAK3Z,KAAOugB,EAAIvgB,IACnE3F,KAAKupB,WAAWvpB,KAAK+V,KAAKM,SAAS1Q,GAAI4f,GAAMjiB,KACzC,KACItD,KAAK0oB,MAAM5N,KAAK,IAAIyK,IACpB1M,EAAQwQ,SAEZ,IAAMxQ,EAAQd,QAAQ,OAIjB8R,aAAavK,EAAoB6E,iDAC1C,MAAMtL,UAAgB6Q,MAClB,CACI3M,MAAO,8BACPnC,QAAS,wDAAwDuJ,EAAOtjB,eAAeye,EAAKze,SAC5F8oB,KAAM,CACFhb,KAAM,OACNib,MAAO,iBACPhP,QAAS,WAGjB5a,KAAK6e,SAET,GAAuB,SAAnBhG,EAAQmJ,OAAmB,OAC/BnJ,EAAQd,QAAQ,oCAChB,MAAMwN,EAAOvlB,KAAK0oB,MAAMnP,WACxBgM,EAAKzB,OACDyB,EAAK+D,UAAWpD,GAAQA,EAAIvgB,KAAO2Z,EAAK3Z,IACxC,EACA,IAAIsd,IAAYpR,+BACTyN,GAAI,CACPnZ,QAASmZ,EAAKnZ,QAAQlE,OAAQmkB,GAAQA,EAAIzgB,KAAOwe,EAAOxe,QAGhE3F,KAAKupB,WAAWvpB,KAAK+V,KAAKM,SAAS1Q,GAAI4f,GAAMjiB,KACzC,KACItD,KAAK0oB,MAAM5N,KAAK,IAAIyK,IACpB1M,EAAQwQ,SAEZ,IAAMxQ,EAAQd,QAAQ,OAIjB+R,2DACT,MAAMxI,QAAethB,KAAKslB,kBAAkBtlB,KAAK+V,KAAKM,SAAS1Q,IACzD4f,EAAOvlB,KAAK0oB,MAAMnP,WAClB6K,KAAQqB,OAAOsE,QAAQxE,EAAKhkB,IAAK+G,GAAM,CAACA,EAAEma,YAAana,EAAEqa,SACzDsG,EAAMjpB,KAAK6e,QAAQK,KAGvBiC,GAA8B,CAC5BvS,KAAM,CACF0S,SACA8C,WAGFvL,QAAgBzV,QAAQ8lB,KAAK,CAC/BD,EAAIE,kBAAkBrmB,MACjBqV,QAAKoE,KAAOC,GAAmB,SAAbA,EAAEwF,SACpBpE,YACLqL,EAAIG,cAAcxL,cAEE,UAAb,MAAP7E,OAAO,EAAPA,EAASiJ,SACbhiB,KAAKgqB,aAAahqB,KAAK+V,KAAKM,SAAS1Q,GAAIkT,EAAQoJ,UAAU3e,KACvD,IAAM2lB,EAAII,QACV,IAAOJ,EAAIE,kBAAkBpR,SAAU,KAIlCkS,2DACT,MAAMhB,EAAMjpB,KAAK6e,QAAQK,KAAK0I,IACxB/O,QAAgBzV,QAAQ8lB,KAAK,CAC/BD,EAAIE,kBAAkBrmB,MACjBqV,QAAKoE,KAAOC,GAAmB,SAAbA,EAAEwF,SACpBpE,YACLqL,EAAIG,cAAcxL,cAEtB,GAAwB,UAAb,MAAPlZ,OAAO,EAAPA,EAASsd,QAAmB,OAChCiH,EAAIE,kBAAkBpR,QAAU,mBAChC,MAAMwN,EAAOvlB,KAAK0oB,MAAMnP,WAClBjD,EAAMtW,KAAK+V,KAAKM,SAChB6T,GAAezE,QAAO5M,EAAQoJ,SAASsC,OAAOgB,GAAO,YACrDvlB,KAAKupB,WAAWjT,EAAI3Q,GAAIukB,GAAcziB,MAAO+U,IAC/CwE,cAAY,iCACZiI,EAAII,QACE7M,OAEV2N,MACI,wCAAwCtR,EAAQoJ,SAASpf,yBAE7DomB,EAAII,UAGAE,WAAWtQ,EAAiBsM,GAChC,OAAO6E,SAAenR,EAAS,CAC3BtT,GAAIsT,EACJpY,KAAM,WACNgY,QAAS0M,EACTrK,YAAa,qBAAqBjC,MACnC2E,YAGOkL,mBAAmB7P,iDAC7B,MAAMsM,SACI8E,SAAapR,EAAS,YAAY2E,aAC1C/E,QACF,OAAO0M,aAAgB5iB,MAAQ4iB,EAAO,KAG7BD,kBACTrM,EAAkBjZ,KAAK+V,KAAKM,SAAS1Q,kDAErC,MAAM6b,SACI6I,SAAapR,EAAS,mBAAmB2E,aACjD/E,QACF,OAAO2I,aAAiB7e,MAAS6e,EAAgB,KAG7CwI,aAAa/Q,EAAiBqI,GAClC,OAAO8I,SAAenR,EAAS,CAC3BtT,GAAIsT,EACJpY,KAAM,kBACNgY,QAASyI,EACTpG,YAAa,4BAA4BjC,MAC1C2E,YAGA0M,eAAelF,EAAsBkB,GACxC,IAAIL,EAAQb,EAAMa,MAClB,MAAMjR,EAAQiR,EAAM/hB,KACfob,YACG,SAAK3Z,KAAO2gB,EAAS3gB,KACL,QAAhB4kB,IAASpkB,eAAOsO,eAAE5R,WACF,QAAZ2Z,IAAKrW,eAAO6S,eAAEmN,OACV,CAACjG,EAAGxb,IACAwb,GACCoG,EAASngB,QAAQjC,KAAMkiB,GAAQ1hB,EAAEiB,KAAOygB,EAAIzgB,IACvC,EACA,GACV,MAGhBqP,SACQA,EAAcwR,UAAY,EAC3BP,EAAQA,EAAM1B,OAAO,CAClB,IAAItB,IAAYpR,+BAAMyU,GAAQ,CAAEE,SAAU,OAElC,IAAInB,IAAaxT,+BAC5BuT,GAAK,CACRa,QACAnjB,MAAO,sDA9TN2lB,GAAoBrkB,oDAApBqkB,EAAoB+B,QAApB/B,EAAoB,qBAFjB,SAEHA,GAAb,yECLgBrkB,iBAIIA,iBAAOA,gBAAIA,QACXA,kCAGJA,gCAqCYA,kBAIIA,0BACJA,mCACAA,kBAIIA,kBACIA,SAEJA,QACAA,kBACIA,6BAIJA,QACJA,+BATQA,sFAIAA,yIAlBhBA,kBACIA,iBAAOA,oBAAQA,QACfA,8BAAiBA,qDAAY0X,iBACzB1X,yBAMAA,yBAeJA,QACJA,iCApBaA,kGAMAA,wMApFzBA,kBACIA,qBACIA,iBAGIA,iBACIA,iBAAOA,gBAAIA,QACXA,0BACIA,iDACJA,QACJA,QACAA,iBACIA,iBAAOA,uBAAUA,QACjBA,2BAEIA,kDAAiBqmB,EAAjBpV,MAAiBoV,4BAEpBrmB,QACLA,QACAA,kBACIA,kBAAOA,qBAAQA,QACfA,+BAMJA,QACJA,QACJA,QACAA,sBACIA,yBASAA,kBAGIA,kBAAOA,sBAASA,QAChBA,iCAIJA,QACJA,QACAA,sBACIA,mBACIA,mBACIA,kBAAOA,6BAAgBA,iBAAMA,cAACA,QAAOA,QACrCA,8BACIA,qBAKAA,sBAAWA,wCAA2BA,QAC1CA,QACJA,QACAA,mBACIA,kBAAOA,kBAAKA,QACZA,8BACIA,wBAKJA,QACJA,QACAA,0BA0BJA,QACJA,QACJA,sCArGmBA,0BAcCA,6CAA2B,8BAS3BA,iEAAgC,sBAUvCA,6CAYGA,6CA4B6BA,wCAgC9C,IAAMsmB,GAAb,MAAM,QA8BF7qB,YACY8qB,EACA3U,GADAhW,iBACAA,iBAbIA,kBAAe,KAAW8gB,uCACtC,YAAK9I,KAAK+C,WAAW,CACjB6P,SAAU,OACA5qB,KAAK2qB,UAAU3B,qBAChBhpB,KAAKgY,KAAKjY,MAAM6qB,SACX5qB,KAAKgY,KAAKjY,MAAM6qB,SAAS,GACzB,OAAS,IAAIvF,UAtBxBwF,mBACP,QAAS7qB,KAAKgW,UAAUQ,IAAI,2BAGrBsU,mBACP,QAAS9qB,KAAKgW,UAAUQ,IAAI,gCAGrBD,0BACP,OAAOvW,KAAKgW,UAAUQ,IAAI,kCAGnBuU,mBACP,OAAO/qB,KAAKgW,UAAUQ,IAAI,4BAA8B,kDAhBnDkU,GAA4BtmB,gDAA5BsmB,EAA4BpmB,4tCAzGjCF,+BAAOA,kJAyGFsmB,GAAb,GCrCaM,GAAb,MAAM,QAkCFnrB,YAAoBiW,EAAkCzB,GAAlCrU,cAAkCA,eAjC/CA,UAAO,EACPA,cAAW,EAEFA,iBAAc,CAC1B,CAAEa,KAAM,MAAOd,MAAO,GACtB,CAAEc,KAAM,cAAed,MAAO,KAC9B,CACIc,KAAM,WACNd,SAAOic,MAASjF,OAAQ,IAAIC,KAAQ,GAAI,GAAGiF,YAInCjc,sBAAmB,CAC/B,CAAEa,KAAM,eAAgBd,MAAO,GAC/B,CAAEc,KAAM,gBAAiBd,MAAO,GAChC,CAAEc,KAAM,kBAAmBd,MAAO,GAClC,CAAEc,KAAM,kBAAmBd,MAAO,IAClC,CAAEc,KAAM,aAAcd,MAAO,KAWjBC,eAAY,KACxBA,KAAKkc,KAAOlc,KAAKirB,SAAW,EAC5BjrB,KAAK8V,OAAOqG,aAVLC,sBACP,SAA6B,QAApB1X,EAAS,QAAT6P,OAAKyD,YAAIvD,eAAE+B,IAAI,aAAKwC,eAAEjZ,OAGxBiY,WACP,OAAOhY,KAAK8V,OAAOkC,KAUhB2E,YACH3c,KAAKgY,KAAK+C,WAAW,CACjBrC,MAAO1Y,KAAKkc,KAAO,MACbU,SACIC,QAAsB,IAAI7F,KAAQ,CAAE8F,UAAW,IAC/C9c,KAAKkc,SAETF,MAASjF,OAAQ,IAAIC,KAAQ,GAAI,IACrCiF,UACFc,MAAO,mBAEX/c,KAAK8V,OAAOM,WAAW,CAAE6U,SAAUjrB,KAAKirB,WACxCjrB,KAAKqU,QAAQa,SAAS,CAAC,QAAS,SAAU,SAGvCgW,YACHlrB,KAAKgY,KAAKiF,mBACLjd,KAAKgY,KAAKkF,OACfld,KAAKqU,QAAQa,SAAS,CAAC,QAAS,SAAU,SAGvCuL,iBACHzgB,KAAKgY,KAAKiF,mBACLjd,KAAKgY,KAAKkF,OACfld,KAAKqU,QAAQa,SAAS,CAAC,QAAS,SAAU,0DA5DrC8V,GAAsB5mB,kDAAtB4mB,EAAsB1mB,owBApE3BF,qBACIA,gBAGIA,SACJA,QACAA,sCACAA,iBAGIA,oBAIIA,gCAAS4Z,gBAET5Z,iBACIA,sBAA0BA,iBAAKA,QAC/BA,kBAAwBA,UAEtBA,QACNA,QACJA,QACAA,qBAIIA,gCAAS4Z,gBAET5Z,kBACIA,uBAA0BA,mBAAMA,QAChCA,mBAAwBA,UAEtBA,QACNA,QACJA,QACAA,qBAIIA,gCAAS4Z,qBAET5Z,kBACIA,uBAA0BA,4BAAeA,QACzCA,mBAAwBA,UAEtBA,QACNA,QACJA,QACJA,QACJA,eA9CQA,kEAEsBA,8BAYUA,qDAaAA,uDAaAA,4TAwBnC4mB,GAAb,0BClEgB5mB,SACIA,2BACJA,gCACAA,SACIA,8BACJA,mCACAA,SACIA,0BAGJA,8BAFQA,iGAGRA,SACIA,2BACJA,SAaT,IAAM+mB,GAAb,MAAM,gBAAsC9T,KAQxCxX,YACYiW,EACAoI,GAERhZ,QAHQlF,cACAA,cATDme,WACP,OAAOne,KAAK8V,OAAOqI,KAEZC,mBACP,OAAOpe,KAAK8V,OAAOsI,aAUhBvc,WACH7B,KAAK8V,OAAOuI,WACPre,KAAK8V,OAAOkC,MAAMhY,KAAK8V,OAAOwI,UACnCte,KAAKwZ,aACD,eACAxZ,KAAKke,OAAOK,SAAS5E,UAAW6E,IACxBA,EAAMC,IAAI,SACVze,KAAK8V,OAAO4I,QAAQF,EAAMhI,IAAI,YAG1CxW,KAAKwZ,aACD,cACAxZ,KAAKke,OAAOS,cAAchF,UAAW6E,IAC7BA,EAAMC,IAAI,YACVze,KAAK8V,OAAO4I,QAAQF,EAAMhI,IAAI,6DA7BrC2U,GAAsB/mB,kDAAtB+mB,EAAsB7mB,sNA5B3BF,iBACIA,WACIA,iCAGAA,iCAGAA,iCAKAA,iCAGJA,QACJA,eAhBkBA,kCACKA,sCAGAA,yCAGAA,oNAoBlB+mB,GAAb,kBC7BO,IAAMC,GAAb,MAAM,sDAAOA,8BAA2B9mB,2FAA3B8mB,GAAb,yFC2CgBhnB,qBAKIA,2DAASgjB,EAAT/R,OAAS+R,iCAEThjB,gBAA4BA,SAAeA,QAC3CA,gBACIA,0BACJA,QACAA,gBAAmBA,qBAASA,QAChCA,qDATIA,sEAI4BA,uBAExBA,iGAqBQA,yBAIIA,SACJA,kCAHIA,iBAEAA,yFAhBhBA,kBAIIA,6BAIIA,yBAEIA,2DAAiBinB,+CAEjBjnB,iDAMJA,QACJA,QACJA,iCAXYA,6CAIoBA,wFAShCA,qBAIIA,2DAASkR,EAATD,OAASC,gCAGTlR,kBAAqBA,SAAwBA,QAC7CA,kBACIA,SACJA,QACJA,qDARIA,uEAIqBA,qCAEjBA,uEA4BRA,gBACIA,gFAEJA,kDAXJA,kBAIIA,aACIA,0BAEJA,QACAA,wCAIAA,qBAAmBA,kDAASmR,iBACxBnR,2BACJA,QACJA,uCAVQA,iFAGiFA,gGAQzFA,kBAIIA,aACIA,2CAKJA,QACJA,qCANQA,qLAjGhBA,iBAIIA,iBAGIA,2BAaJA,QACAA,iBACIA,iBAGIA,yCAqBAA,aAAGA,0BAAoDA,QACvDA,8CAYJA,QACAA,kBAGIA,mJASAA,qCAGJA,QACAA,4CAgBAA,4CAYJA,QACJA,4CAhG6BA,kCAkBZA,wEAmBFA,yFAMmBA,mDAYlBA,yCAAmB,sDAAnBA,CAAmB,0DAAnBA,CAAmB,+BAAnBA,CAAmB,mCAAnBA,CAAmB,iCAAnBA,CAAmB,gCAatBA,mDAiBAA,4FAaTA,kBAIIA,0BACAA,aAAGA,sCAA0BA,QACjCA,mCANAA,sEAEKA,8DAhIXknB,SAbN,gBAaiCjU,KAG7BxX,YAA8C0rB,WAC1CrmB,QAD0ClF,gBAFvCA,UAAO,EACPA,WAAQ,EAGXA,KAAKwZ,aACD,OACmB,QAAnB9U,OAAK6mB,SAASC,aAAK/W,eAAEkF,UAAW6C,GAAOxc,KAAKyrB,KAAOjP,IAEvDxc,KAAKwZ,aACD,QACoB,QAApBjV,OAAKgnB,SAASG,cAAM1S,eAAEW,UAAW6C,GAAOxc,KAAK2rB,MAAQnP,kDAX3D8O,GAAkBlnB,MAGAwnB,iCAHlBN,EAAkBhnB,sNAVhBF,iBAIIA,iBAGJA,cALIA,kEAQNknB,MAsJOO,GAAb,MAAM,gBAAuCxU,KAmEzCxX,YACYiW,EACAgW,EACA/V,EACAgW,EACA1X,GAERnP,QANQlF,cACAA,gBACAA,YACAA,gBACAA,eAtEIA,SAAMA,KAAK8V,OAAOyB,QAElBvX,YAASA,KAAK8V,OAAO0B,WAErBxX,eAAYA,KAAK8V,OAAO2B,cAExBzX,cAAWA,KAAK8V,OAAO4B,aAEvB1X,aAAUA,KAAK8V,OAAO6B,YAEtB3X,YAASA,KAAK8V,OAAO8B,WAErB5X,cAAWA,KAAK+V,KAAK+J,gBAErB9f,WAAQA,KAAK8V,OAAO+B,MAEpB7X,YAASA,KAAK8rB,SAASrP,OAEvBzc,eAAYA,KAAK8rB,SAAS/L,iBAE1B/f,YAASA,KAAK8rB,SAASE,mBAEvBhsB,aAAUA,KAAK8rB,SAAS3lB,QAExBnG,cAAWA,KAAK8rB,SAASG,eAEzBjsB,aAAUA,KAAK+rB,SAAShU,QAExB/X,kBAAe,IAAImZ,IAAgB,MAEnCnZ,WAAQ,IAAI2C,MAAM,GAAGyX,KAAK,GAAG7Y,IAAI,CAACib,EAAG0P,KAAS,CAC1DvmB,MAAIwmB,OAAWpV,OAAQC,KAAKC,MAAOiV,IAAMjQ,UACzCpb,QAAMiY,OAAO/B,OAAQC,KAAKC,MAAOiV,GAAM,eACvCtS,UAAW,KAGC5Z,aAAWka,GAAMla,KAAK8rB,SAAS1V,WAAW,CAAEsC,KAAMwB,IAmBlDla,cAAY+Y,GAAM/Y,KAAK8V,OAAOoD,SAASH,GACvC/Y,kBAAe,KAAW8gB,uCACtC,MAAMsL,QAAepsB,KAAK8rB,SAASG,eAC9B9T,MAAKwF,QAAK,IACVC,YACDwO,EAAOvpB,QAAQ7C,KAAK+rB,SAAS/T,KAAK+C,WAAW,CAAEpV,GAAIymB,EAAO,GAAGzmB,WAC3D3F,KAAK+rB,SAAShL,WACpB/gB,KAAKqU,QAAQa,SAAS,CAAC,OAAQ,UAAW,cAxBvCmX,UAAUpT,GACb,MAAMuE,EAAMxd,KAAK+V,KAAK0H,YAAY,CAACxE,IACnC,OAAU,MAAHvU,OAAG,EAAHA,EAAK4nB,gBAAmB,MAAH9O,OAAG,EAAH9Y,EAAK7D,OAAQ,GAGtC0rB,UAAUhN,GACTA,IAAUvf,KAAKwsB,aAAajT,WAC5BvZ,KAAKwsB,aAAa1R,KAAK,OAEvB9a,KAAK+rB,SAAS/T,KAAK+C,WAAW,CAC1BC,SAAUuE,EAAM5Z,GAChBsV,WAAYsE,EAAM1e,OAEtBb,KAAKwsB,aAAa1R,KAAKyE,IAwBlB1d,+DACH7B,KAAK+V,KAAKuG,YAAYnE,MAAKoE,OAAOC,GAAMA,IAAIoB,YAClD5d,KAAK8V,OAAO2W,QACZzsB,KAAKwZ,aACD,SACAxZ,KAAK8rB,SAASrP,OAAO9C,UAAW8C,UAC5Bzc,KAAK8V,OAAOoD,SAAkB,QAATxU,IAAO,UAAE+P,eAAE9O,OAGxC3F,KAAKwZ,aACD,SACAxZ,KAAK8rB,SAAS/L,iBAAiBpG,UAAW+G,IACtC1gB,KAAK8V,OAAO4E,WACR,kBACCgG,GAAU,IAAInf,IAAKib,IAAO,CACvB7W,GAAI6W,EAAErC,OACNG,OAAQ,QACRC,SAAU,IAAMva,KAAKusB,UAAU/P,UAK/Cxc,KAAKwZ,aACD,eACAxZ,KAAKwsB,aAAa7S,UAAW4F,IACzB,IAAKA,EAAO,OAAOvf,KAAK8V,OAAO6E,YAAY,gBAAiB,IAC5D3a,KAAK8V,OAAO6E,YAAY,gBAAiB,CACrC,CACI5N,SAAUwS,EAAMpF,OAChBS,QAAS0Q,GACToB,WAAW,EACXC,QAAS,wDA5GpBd,GAAuBznB,sFAAvBynB,EAAuBvnB,iDAFrB,CAACsoB,OAAsBxoB,s3EAjI9BA,2CA0GAA,kEAxGKA,oCAA0B,8VAiI1BynB,GAAb,0BCpKgBznB,SACIA,gCACJA,mCACAA,SACIA,0BAKJA,8BAJQA,iGAKRA,SACIA,4BACJA,SCKhB,MAAMyoB,GAAkB,CACpB,CACIC,KAAM,GACNC,UAAW3lB,GACX4lB,SAAU,CACN,CAAEF,KAAM,OAAQC,UAAW3Y,IAC3B,CAAE0Y,KAAM,QAASG,WAAY,cAC7B,CAAEH,KAAM,cAAeC,UAAW9O,IAClC,CAAE6O,KAAM,SAAUG,WAAY,eAC9B,CAAEH,KAAM,eAAgBC,UAAW5B,IACnC,CAAE2B,KAAM,UAAWG,WAAY,gBAC/B,CAAEH,KAAM,gBAAiBC,UDHrC,MAAM,gBAAwC1V,KAQ1CxX,YACYiW,EACAoI,GAERhZ,QAHQlF,cACAA,cATDme,WACP,OAAOne,KAAK8V,OAAOqI,KAEZC,mBACP,OAAOpe,KAAK8V,OAAOsI,aAUhBvc,WACH7B,KAAK8V,OAAOM,WAAW,CAAEzH,KAAM,YAC/B3O,KAAK8V,OAAOuI,WACPre,KAAK8V,OAAOkC,MAAMhY,KAAK8V,OAAOwI,UACnCte,KAAKwZ,aACD,eACAxZ,KAAKke,OAAOK,SAAS5E,UAAW6E,IACxBA,EAAMC,IAAI,SACVze,KAAK8V,OAAO4I,QAAQF,EAAMhI,IAAI,YAG1CxW,KAAKwZ,aACD,cACAxZ,KAAKke,OAAOS,cAAchF,UAAW6E,IAC7BA,EAAMC,IAAI,YACVze,KAAK8V,OAAO4I,QAAQF,EAAMhI,IAAI,6DA9BrC0W,GAAwB9oB,kDAAxB8oB,EAAwB5oB,2PA3B7BF,iBACIA,WACIA,iCAGAA,iCAOAA,iCAGJA,QACJA,eAfkBA,kCACKA,yCAGAA,mNAsBlB8oB,GAAb,ICIY,CAAEJ,KAAM,IAAKG,WAAY,iBAGjC,CAAEH,KAAM,IAAKG,WAAY,gBAiCtB,IAAME,GAAb,MAAM,sDAAOA,4DAVA,CACLC,KACAC,KACAC,KACAC,KACAC,KACAzmB,GACA0mB,cAAsBZ,QAGjBM,GAAb","names":["MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","InjectionToken","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatButtonToggleGroup","multi","uniqueIdCounter","constructor","source","value","this","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","EventEmitter","change","appearance","name","_buttonToggles","forEach","toggle","_markForCheck","vertical","coerceBooleanProperty","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","disabled","ngOnInit","SelectionModel","ngAfterContentInit","select","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","Array","isArray","length","event","MatButtonToggleChange","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","some","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","ɵfac","i0","ɵdir","selectors","a","MatButtonToggle","r","o","_MatButtonToggleBase","mixinDisableRipple","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","super","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","buttonId","id","_appearance","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","i1","ɵcmp","ze","ngContentSelectors","directives","i2","styles","MatButtonToggleModule","ɵmod","ɵinj","MatCommonModule","MatRippleModule","BookComponent","QrScanner","static","listCameras","cameras","catch","requestLabels","navigator","mediaDevices","openedStream","getUserMedia","audio","video","stream","enumerateDevices","devices","device","kind","i","deviceId","label","finally","track","getTracks","stop","removeTrack","onDecode","canvasSizeOrOnDecodeError","_onDecodeError","canvasSizeOrCalculateScanRegion","_calculateScanRegion","preferredCamera","$video","$canvas","document","createElement","_onDecode","_legacyCanvasSize","DEFAULT_CANVAS_SIZE","_preferredCamera","_active","_paused","_flashOn","console","warn","_scanRegion","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","requestAnimationFrame","computedStyle","window","getComputedStyle","display","style","setProperty","visibility","opacity","width","height","addEventListener","_qrEnginePromise","createQrEngine","hasFlash","srcObject","getVideoTracks","_getCameraStream","getSettings","isFlashOn","toggleFlash","turnFlashOff","turnFlashOn","applyConstraints","advanced","torch","reject","e","_restartVideoStream","destroy","removeEventListener","_postWorkerMessage","start","location","protocol","play","facingMode","_setVideoMirror","pause","stopStreamImmediately","stopStream","tracks","setTimeout","setCamera","facingModeOrDeviceId","imageOrFileOrUrl","scanRegion","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","gotExternalWorker","Worker","promise","all","_loadImage","engine","image","canvasContext","_drawToCanvas","postMessage","type","data","timeout","onMessage","onError","clearTimeout","D","NO_QR_CODE_FOUND","message","imageData","getImageData","buffer","detect","scanResults","rawValue","scanImage","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","workerPath","WORKER_PATH","BarcodeDetector","getSupportedFormats","supportedFormats","indexOf","formats","_scanFrame","smallestDimension","Math","min","videoWidth","videoHeight","scanRegionSize","round","x","y","downScaledWidth","downScaledHeight","paused","ended","readyState","error","log","preferenceType","constraintsWithoutCamera","constraint","Object","assign","exact","reduceRight","fallback","_getFacingMode","wasPaused","transform","videoStream","videoTrack","test","scanRegionX","scanRegionY","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","context","getContext","alpha","imageSmoothingEnabled","drawImage","imageOrFileOrBlobOrUrl","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","Blob","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad","qrEngineOrQrEnginePromise","BookCodeFlowComponent","_router","_video_el","n","_qr_scanner","_a","handleQrCode","result","url","hashindex","regex","params","match","exec","navigate","split","ctx_r10","oxw","ctx_r16","ctx_r19","ctx_r21","ctx_r23","ctx_r27","ctx_r29","ctx_r32","DeskFlowDetailedFormComponent","_state","_org","_settings","building_list","active_levels","features","setOptions","building","bld","can_book_for_others","get","can_recurr","allow_groups","needs_reason","allow_time_changes","book_until","endOfDay","addDays","Date","now","ctx_r8","ctx_r12","DeskFlowMapComponent","BaseClass","_explore","map_url","map_styles","map_positions","map_features","map_actions","map_labels","level","available_assets","loading","form","combineLatest","valueChanges","pipe","startWith","recurrence","formatRecurrence","pattern","end","recurr_end","date","interval","days_of_week","details","format","l","_b","zone_id","setLevel","BehaviorSubject","confirmPost","active_desk","_active_desk","getValue","subscription","assets","debounceTime","subscribe","available","status","actions","desk","active","bookable","d","map_id","fill","push","action","callback","setActiveDesk","setStyles","setActions","setFeatures","content","zone","next","patchValue","asset_id","asset_name","description","booking_type","zones","parent_id","_c","$event","DeskFlowConfirmComponent","FlowSuccessComponent","is_host","calendar","email","ctx_r3","ctx_r5","DeskFlowFormComponent","setHours","valueOf","time","clearForm","is_edit","auto_allocation","initialised","first","_","levels","levelsForBuilding","quickBook","addMinutes","roundToNearestMinutes","nearestTo","title","findDesk","markAllAsTouched","valid","allocateDesk","settings","currentUser","groups","centered_at","lvl","levelWithID","desk_list","take","toPromise","desk_id","findNearbyDesk","g","ctx","BookDeskFlowComponent","_route","view","last_success","loadForm","newForm","paramMap","param","has","setView","queryParamMap","SpaceFlowFindItemComponent","_dialog","bookSpace","book","bookChange","viewLocation","open","MapLocateModalComponent","maxWidth","maxHeight","item","space","ctx_r28","ctx_r33","t","ctx_r35","SpaceFlowFindComponent","_spaces","active_building","available_spaces","setBuilding","opts","c","zone_ids","includes","book_space","space_list","s","handleBookEvent","confirmBooking","spaces","resources","system","SpaceFlowConfirmComponent","__awaiter","postForm","notifyError","RULE_TYPES","set_r2","CateringConfigModalComponent","_data","rulesets","config","set","rules","JSON","stringify","new_id","floor","random","saveChanges","parse","reason","metadata","MAT_DIALOG_DATA","ctx_r15","ctx_r17","CateringItemModalComponent","FormGroup","FormControl","Validators","category","unit_price","tags","accept_points","discount_cap","ENTER","COMMA","SPACE","CateringItem","categories","tag_list","controls","renderPercent","addTag","markAsDirty","input","trim","setValue","removeTag","existing_tag","index","splice","randomInt","$localize","ctx_r11","CateringItemOptionModalComponent","option","types","new_option","parent","concat","ctx_r31","ctx_r36","is_available","rule","matches","condition","isAfter","isBefore","duration","stringToMinutes","ext","CateringOrderModalComponent","order","CateringOrder","getCateringConfig","menu","list","unique","cat","cateringItemAvailable","menu_items","updateMenuQuantities","addItem","choose_options","old_item","items","itm","reduce","opt","selectOptions","new_item","options_string","quantity","removeItem","updateItemQuantity","amount","sort","b","localeCompare","optionsFor","join","saveOrder","confirmOrder","show_order_details","ctx_r9","CateringOrderOptionsModalComponent","group_list","updateGroupOption","option_state","saveOptions","ctx_r4","ctx_r6","CateringImportMenuModalComponent","handleFileEvent","element","target","files","file","fileReader","FileReader","csvToJson","toLowerCase","readAsText","downloadTemplate","downloadFile","CateringStateService","_menu","asObservable","_loading","_currency","getCateringForZone","currency","manageCateringOrder","ref","race","componentInstance","afterClosed","close","findIndex","updateMenu","addOption","deleteItem","openConfirmModal","icon","class","deleteOption","editConfig","flatten","updateConfig","importMenu","updated_menu","notifySuccess","updateMetadata","showMetadata","addItemToOrder","m","factory","ctx_r7","DetailBookSpaceFormComponent","_catering","catering","has_catering","hide_actions","max_duration","SpaceFlowFormComponent","capacity","findSpace","BookSpaceFlowComponent","ParkingFlowConfirmComponent","ctx_r13","SpacePingComponent","_details","zoom$","zoom","ratio$","ratio","MAP_FEATURE_DATA","ParkingFlowMapComponent","_parking","_booking","week_availablility","existing_event","idx","startOfDay","events","levelName","display_name","setActive","active_space","reset","full_size","z_index","ExploreParkingService","ROUTES","path","component","children","redirectTo","BookParkingFlowComponent","BookModule","CommonModule","SharedComponentModule","FormsModule","SharedExploreModule","ReactiveFormsModule","RouterModule"],"sources":["./node_modules/@angular/material/fesm2015/button-toggle.mjs","./apps/workplace/src/app/book/book.component.ts","./node_modules/qr-scanner/src/qr-scanner.js","./apps/workplace/src/app/book/code-flow.component.ts","./apps/workplace/src/app/book/desk-flow/detailed-form.component.ts","./apps/workplace/src/app/book/desk-flow/map.component.ts","./apps/workplace/src/app/book/desk-flow/confirm.component.ts","./apps/workplace/src/app/book/flow-success.component.ts","./apps/workplace/src/app/book/desk-flow/form.component.ts","./apps/workplace/src/app/book/desk-flow.component.ts","./apps/workplace/src/app/book/space-flow/find-item.component.ts","./apps/workplace/src/app/book/space-flow/find.component.ts","./apps/workplace/src/app/book/space-flow/confirm.component.ts","./libs/catering/src/lib/catering.interfaces.ts","./libs/catering/src/lib/catering-config-modal.component.ts","./libs/catering/src/lib/catering-item-modal.component.ts","./libs/catering/src/lib/catering-option-modal.component.ts","./libs/catering/src/lib/catering-order-modal.component.ts","./libs/catering/src/lib/catering-order-options-modal.component.ts","./libs/catering/src/lib/catering-import-menu-modal.component.ts","./libs/catering/src/lib/catering-state.service.ts","./apps/workplace/src/app/book/space-flow/detailed-form.component.ts","./apps/workplace/src/app/book/space-flow/form.component.ts","./apps/workplace/src/app/book/space-flow.component.ts","./apps/workplace/src/app/book/parking-flow/parking-flow-confirm.component.ts","./apps/workplace/src/app/book/parking-flow/parking-flow-map.component.ts","./apps/workplace/src/app/book/parking-flow.component.ts","./apps/workplace/src/app/book/book.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true,\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() {\n        return this._vertical;\n    }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatButtonToggleGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\n        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n    ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(function () { return MatButtonToggle; }), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-button-toggle-group',\n                    providers: [\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                    ],\n                    host: {\n                        'role': 'group',\n                        'class': 'mat-button-toggle-group',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[class.mat-button-toggle-vertical]': 'vertical',\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n                    },\n                    exportAs: 'matButtonToggleGroup',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { _buttonToggles: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatButtonToggle), {\n                        // Note that this would technically pick up toggles\n                        // from nested groups, but that's not a case that we support.\n                        descendants: true,\n                    }]\n            }], appearance: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], vertical: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueChange: [{\n                type: Output\n            }], multiple: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() {\n        return `${this.id}-button`;\n    }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatButtonToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { disableRipple: \"disableRipple\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], usesInheritance: true, ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggle, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                        '[class.mat-button-toggle-checked]': 'checked',\n                        '[class.mat-button-toggle-disabled]': 'disabled',\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                        'class': 'mat-button-toggle',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.id]': 'id',\n                        '[attr.name]': 'null',\n                        '(focus)': 'focus()',\n                        'role': 'presentation',\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatButtonToggleGroup, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_BUTTON_TOGGLE_GROUP]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], _buttonElement: [{\n                type: ViewChild,\n                args: ['button']\n            }], id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatButtonToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] });\nMatButtonToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggleModule, imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0-rc.1\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatRippleModule],\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'placeos-book',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex-1 flex sm:flex-row flex-col-reverse h-1/2 z-10 relative\">\n            <main\n                class=\"relative flex flex-col flex-1 h-1/2 sm:h-auto overflow-hidden\"\n            >\n                <router-outlet></router-outlet>\n            </main>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookComponent {}\n","export default class QrScanner {\n    /* async */\n    static hasCamera() {\n        return QrScanner.listCameras(false)\n            .then(cameras => !!cameras.length)\n            .catch(() => false);\n    }\n\n    /* async */\n    static listCameras(requestLabels = false) {\n        if (!navigator.mediaDevices) return Promise.resolve([]);\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, ask for camera permission by opening a stream, if\n        // labels were requested.\n        let openedStream = null;\n        return (requestLabels\n            ? navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n                .then(stream => openedStream = stream)\n                // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in\n                // use and some browsers disallow a second stream.\n                .catch(() => {})\n            : Promise.resolve()\n        )\n            .then(() => navigator.mediaDevices.enumerateDevices())\n            .then(devices => devices.filter(device => device.kind === 'videoinput').map((device, i) => ({\n                id: device.deviceId,\n                label: device.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            })))\n            .finally(() => {\n                // close the stream we just opened for getting camera access for listing the device labels\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    constructor(\n        video,\n        onDecode,\n        canvasSizeOrOnDecodeError = this._onDecodeError,\n        canvasSizeOrCalculateScanRegion = this._calculateScanRegion,\n        preferredCamera = 'environment'\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n        this._onDecode = onDecode;\n        this._legacyCanvasSize = QrScanner.DEFAULT_CANVAS_SIZE;\n        this._preferredCamera = preferredCamera;\n        this._active = false;\n        this._paused = false;\n        this._flashOn = false;\n\n        if (typeof canvasSizeOrOnDecodeError === 'number') {\n            // legacy function signature where the third argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrOnDecodeError;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._onDecodeError = canvasSizeOrOnDecodeError;\n        }\n\n        if (typeof canvasSizeOrCalculateScanRegion === 'number') {\n            // legacy function signature where the fourth argument is the canvas size\n            this._legacyCanvasSize = canvasSizeOrCalculateScanRegion;\n            console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                + 'the future');\n        } else {\n            this._calculateScanRegion = canvasSizeOrCalculateScanRegion;\n        }\n\n        this._scanRegion = this._calculateScanRegion(video);\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const computedStyle = window.getComputedStyle(video);\n            if (computedStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (computedStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = 0;\n                video.style.width = 0;\n                video.style.height = 0;\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    /* async */\n    hasFlash() {\n        let openedStream = null;\n        return (this.$video.srcObject\n            ? Promise.resolve(this.$video.srcObject.getVideoTracks()[0])\n            : this._getCameraStream().then(({ stream }) => {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                openedStream = stream;\n                return stream.getVideoTracks()[0];\n            })\n        )\n            .then((track) => 'torch' in track.getSettings())\n            .catch(() => false)\n            .finally(() => {\n                // close the stream we just opened for detecting whether it supports flash\n                if (!openedStream) return;\n                for (const track of openedStream.getTracks()) {\n                    track.stop();\n                    openedStream.removeTrack(track);\n                }\n            });\n    }\n\n    isFlashOn() {\n      return this._flashOn;\n    }\n\n    /* async */\n    toggleFlash() {\n        if (this._flashOn) {\n            return this.turnFlashOff();\n        } else {\n            return this.turnFlashOn();\n        }\n    }\n\n    /* async */\n    turnFlashOn() {\n        if (this._flashOn) return Promise.resolve();\n        this._flashOn = true;\n        if (!this._active || this._paused) return Promise.resolve(); // flash will be turned on later on .start()\n        return this.hasFlash().then((hasFlash) => {\n            if (!hasFlash) return Promise.reject('No flash available');\n            // Note that the video track is guaranteed to exist at this point\n            return this.$video.srcObject.getVideoTracks()[0].applyConstraints({\n                advanced: [{ torch: true }],\n            });\n        }).catch(() => {\n            this._flashOn = false;\n            throw e;\n        });\n    }\n\n    /* async */\n    turnFlashOff() {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        return this._restartVideoStream();\n    }\n\n    destroy() {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n\n        this.stop();\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    /* async */\n    start() {\n        if (this._active && !this._paused) {\n            return Promise.resolve();\n        }\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n        this._active = true;\n        if (document.hidden) {\n            // camera will be started as soon as tab is in foreground\n            return Promise.resolve();\n        }\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            this.$video.play();\n            return Promise.resolve();\n        }\n\n        return this._getCameraStream()\n            .then(({ stream, facingMode }) => {\n                this.$video.srcObject = stream;\n                this.$video.play();\n                this._setVideoMirror(facingMode);\n\n                // Restart the flash if it was previously on\n                if (this._flashOn) {\n                    this._flashOn = false; // force turnFlashOn to restart the flash\n                    this.turnFlashOn().catch(() => {});\n                }\n            })\n            .catch(e => {\n                this._active = false;\n                throw e;\n            });\n    }\n\n    stop() {\n        this.pause();\n        this._active = false;\n    }\n\n    /* async */\n    pause(stopStreamImmediately = false) {\n        this._paused = true;\n        if (!this._active) {\n            return Promise.resolve(true);\n        }\n        this.$video.pause();\n\n        const stopStream = () => {\n            const tracks = this.$video.srcObject ? this.$video.srcObject.getTracks() : [];\n            for (const track of tracks) {\n                track.stop(); //  note that this will also automatically turn the flashlight off\n                this.$video.srcObject.removeTrack(track);\n            }\n            this.$video.srcObject = null;\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return Promise.resolve(true);\n        }\n\n        return new Promise((resolve) => setTimeout(resolve, 300))\n            .then(() => {\n                if (!this._paused) return false;\n                stopStream();\n                return true;\n            });\n    }\n\n    /* async */\n    setCamera(facingModeOrDeviceId) {\n        if (facingModeOrDeviceId === this._preferredCamera) return Promise.resolve();\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        return this._restartVideoStream();\n    }\n\n    /* async */\n    static scanImage(imageOrFileOrUrl, scanRegion=null, qrEngine=null, canvas=null, disallowCanvasResizing=false,\n                     alsoTryWithoutScanRegion=false) {\n        const gotExternalWorker = qrEngine instanceof Worker;\n\n        let promise = Promise.all([\n            qrEngine || QrScanner.createQrEngine(),\n            QrScanner._loadImage(imageOrFileOrUrl),\n        ]).then(([engine, image]) => {\n            qrEngine = engine;\n            let canvasContext;\n            [canvas, canvasContext] = this._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n\n            if (qrEngine instanceof Worker) {\n                if (!gotExternalWorker) {\n                    // Enable scanning of inverted color qr codes. Not using _postWorkerMessage as it's async\n                    qrEngine.postMessage({ type: 'inversionMode', data: 'both' });\n                }\n                return new Promise((resolve, reject) => {\n                    let timeout, onMessage, onError;\n                    onMessage = event => {\n                        if (event.data.type !== 'qrResult') {\n                            return;\n                        }\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve(event.data.data);\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (e) => {\n                        qrEngine.removeEventListener('message', onMessage);\n                        qrEngine.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !e ? 'Unknown Error' : (e.message || e);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngine.addEventListener('message', onMessage);\n                    qrEngine.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas.width, canvas.height);\n                    qrEngine.postMessage({\n                        type: 'decode',\n                        data: imageData\n                    }, [imageData.data.buffer]);\n                });\n            } else {\n                return new Promise((resolve, reject) => {\n                    const timeout = setTimeout(() => reject('Scanner error: timeout'), 10000);\n                    qrEngine.detect(canvas).then(scanResults => {\n                        if (!scanResults.length) {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        } else {\n                            resolve(scanResults[0].rawValue);\n                        }\n                    }).catch((e) => reject('Scanner error: ' + (e.message || e))).finally(() => clearTimeout(timeout));\n                });\n            }\n        });\n\n        if (scanRegion && alsoTryWithoutScanRegion) {\n            promise = promise.catch(() =>\n                QrScanner.scanImage(imageOrFileOrUrl, null, qrEngine, canvas, disallowCanvasResizing));\n        }\n\n        promise = promise.finally(() => {\n            if (gotExternalWorker) return;\n            QrScanner._postWorkerMessage(qrEngine, 'close');\n        });\n\n        return promise;\n    }\n\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations work also\n        // well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode) {\n        // Note that for the native BarcodeDecoder, this is a no-op. However, the native implementations scan normal\n        // and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    /* async */\n    static createQrEngine(workerPath = QrScanner.WORKER_PATH) {\n        return ('BarcodeDetector' in window && BarcodeDetector.getSupportedFormats\n            ? BarcodeDetector.getSupportedFormats()\n            : Promise.resolve([])\n        )\n            .then((supportedFormats) => supportedFormats.indexOf('qr_code') !== -1\n                ? new BarcodeDetector({ formats: ['qr_code'] })\n                : new Worker(workerPath)\n            );\n    }\n\n    _onPlay() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._scanFrame();\n    }\n\n    _onLoadedMetaData() {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n    }\n\n    _onVisibilityChange() {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    _calculateScanRegion(video) {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    _scanFrame() {\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\n        // using requestAnimationFrame to avoid scanning if tab is in background\n        requestAnimationFrame(() => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n            this._qrEnginePromise\n                .then((qrEngine) => QrScanner.scanImage(this.$video, this._scanRegion, qrEngine, this.$canvas))\n                .then(this._onDecode, (error) => {\n                    if (!this._active) return;\n                    const errorMessage = error.message || error;\n                    if (errorMessage.indexOf('service unavailable') !== -1) {\n                        // When the native BarcodeDetector crashed, create a new one\n                        this._qrEnginePromise = QrScanner.createQrEngine();\n                    }\n                    this._onDecodeError(error);\n                })\n                .then(() => this._scanFrame());\n        });\n    }\n\n    _onDecodeError(error) {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    /* async */\n    _getCameraStream() {\n        if (!navigator.mediaDevices) {\n            return Promise.reject('Camera not found.');\n        }\n\n        const preferenceType = this._preferredCamera === 'environment' || this._preferredCamera === 'user'\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        // First try constraints with camera, then without camera. Using reduceRight as the Promise is build in a\n        // bottom up fashion.\n        return [...constraintsWithCamera, ...constraintsWithoutCamera].reduceRight((fallback, constraint) =>\n            () => navigator.mediaDevices.getUserMedia({ video: constraint, audio: false })\n                .then((stream) => ({\n                    stream,\n                    // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                    // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                    // mode, even for exact facingMode constraints.\n                    facingMode: this._getFacingMode(stream)\n                        || (constraint.facingMode\n                            ? this._preferredCamera // _preferredCamera is a facing mode and we are able to fulfill it\n                            : (this._preferredCamera === 'environment'\n                                ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                                : 'environment' // switch from unfulfilled user facingMode or default to environment\n                            )\n                        ),\n                }))\n                .catch(fallback),\n            () => Promise.reject('Camera not found.')\n        )();\n    }\n\n    /* async */\n    _restartVideoStream() {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        return this.pause(true).then((paused) => {\n            if (!paused || wasPaused || !this._active) return;\n            return this.start();\n        });\n    }\n\n    _setVideoMirror(facingMode) {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode==='user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    _getFacingMode(videoStream) {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    static _drawToCanvas(image, scanRegion=null, canvas=null, disallowCanvasResizing=false) {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width? scanRegion.width : image.width || image.videoWidth;\n        const scanRegionHeight = scanRegion && scanRegion.height? scanRegion.height : image.height || image.videoHeight;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false });\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height\n        );\n        return [canvas, context];\n    }\n\n    /* async */\n    static _loadImage(imageOrFileOrBlobOrUrl) {\n        if (imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement || imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || window.ImageBitmap && imageOrFileOrBlobOrUrl instanceof window.ImageBitmap\n            || window.OffscreenCanvas && imageOrFileOrBlobOrUrl instanceof window.OffscreenCanvas) {\n            return Promise.resolve(imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof Image) {\n            return QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl).then(() => imageOrFileOrBlobOrUrl);\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof(imageOrFileOrBlobOrUrl)==='string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl;\n            }\n            return QrScanner._awaitImageLoad(image).then(() => {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n                return image;\n            });\n        } else {\n            return Promise.reject('Unsupported image type.');\n        }\n    }\n\n    /* async */\n    static _awaitImageLoad(image) {\n        return new Promise((resolve, reject) => {\n            if (image.complete && image.naturalWidth!==0) {\n                // already loaded\n                resolve();\n            } else {\n                let onLoad, onError;\n                onLoad = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    resolve();\n                };\n                onError = () => {\n                    image.removeEventListener('load', onLoad);\n                    image.removeEventListener('error', onError);\n                    reject('Image load error');\n                };\n                image.addEventListener('load', onLoad);\n                image.addEventListener('error', onError);\n            }\n        });\n    }\n\n    /* async */\n    static _postWorkerMessage(qrEngineOrQrEnginePromise, type, data) {\n        return Promise.resolve(qrEngineOrQrEnginePromise).then((qrEngine) => {\n            if (!(qrEngine instanceof Worker)) return;\n            qrEngine.postMessage({ type, data });\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.NO_QR_CODE_FOUND = 'No QR code found';\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n","import {\n    Component,\n    OnInit,\n    Output,\n    EventEmitter,\n    ViewChild,\n    ElementRef,\n    OnDestroy,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport QrScanner from 'qr-scanner';\n\n@Component({\n    selector: 'book-code-flow',\n    template: `\n        <div\n            class=\"flex-1 overflow-hidden flex items-center justify-center bg-black relative\"\n        >\n            <video\n                class=\"min-w-full min-h-full object-cover\"\n                id=\"video\"\n                #video\n            ></video>\n            <div\n                class=\"absolute text-white text-center inset-0 flex flex-col items-center justify-center\"\n            >\n                <div\n                    class=\"flex flex-col z-10 justify-end items-center relative\"\n                    *ngIf=\"is_scanning\"\n                >\n                    <h2 class=\"text-3xl mb-1 uppercase subpixel-antialiased\">\n                        Scan QR Code\n                    </h2>\n                    <span class=\" mb-4 \">\n                        Scan the QR code outisde a PlaceOS room or space.\n                    </span>\n                </div>\n                <div\n                    class=\"flex flex-col z-10 justify-end items-center relative\"\n                    *ngIf=\"!is_scanning\"\n                >\n                    <h2 class=\"text-3xl mb-1 uppercase subpixel-antialiased\">\n                        Enter Room ID\n                    </h2>\n                    <span class=\"mb-4\">\n                        Enter the room ID number outisde a PlaceOS room or\n                        space.\n                    </span>\n                </div>\n                <div class=\"flex items-center justify-center\">\n                    <div\n                        box\n                        class=\"rounded-2xl h-64 w-64 transition-all flex items-center justify-center p-8 m-8 space-x-2\"\n                        [class.input]=\"!is_scanning\"\n                    >\n                        <span class=\"uppercase\">Booking ID</span>\n                        <input\n                            matInput\n                            class=\"border-none bg-none w-full text-3xl text-left\"\n                            [(ngModel)]=\"room_code\"\n                            name=\"booking-id\"\n                            placeholder=\"e.g. 12102910\"\n                        />\n                    </div>\n                </div>\n                <div\n                    class=\"m-4 p-2 flex items-center space-x-2 bg-white bg-opacity-50 rounded\"\n                >\n                    <button\n                        mat-button\n                        [class]=\"\n                            'flex-1 text-black border-none w-40 ' +\n                            (is_scanning\n                                ? 'bg-white'\n                                : 'bg-transparent hover:bg-white bg-opacity-50')\n                        \"\n                        (click)=\"is_scanning = true\"\n                    >\n                        Scan Code\n                    </button>\n                    <button\n                        mat-button\n                        [class]=\"\n                            'flex-1 text-black border-none w-40 ' +\n                            (!is_scanning\n                                ? 'bg-white'\n                                : 'bg-transparent hover:bg-white bg-opacity-50')\n                        \"\n                        (click)=\"is_scanning = false\"\n                    >\n                        Enter Code\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [box] {\n                box-shadow: 0px 0px 0px 100vw rgba(0, 0, 0, 0.5);\n            }\n\n            [box] > * {\n                display: none;\n            }\n\n            [box].input {\n                width: 32rem !important;\n                max-width: calc(100% - 2rem) !important;\n                padding: 1rem !important;\n                height: 4rem !important;\n                color: black !important;\n                background: white;\n                box-shadow: 0px 0px 0px 100vw rgba(0, 0, 0, 0.8);\n            }\n\n            [box].input > * {\n                display: initial;\n            }\n\n            [box] span {\n                font-family: var(--heading-font);\n                font-weight: 500;\n                text-transform: uppercase;\n                letter-spacing: 0.05em;\n            }\n        `,\n    ],\n})\nexport class BookCodeFlowComponent implements OnInit, OnDestroy {\n    /** Boolean to toggle scan/code */\n    public is_scanning = true;\n    /** Room Code input value */\n    public room_code: string;\n    /** Menu event */\n    @Output() public menu = new EventEmitter(false);\n    /** Video element to emit camera feed */\n    @ViewChild('video', { static: true })\n    private _video_el: ElementRef<HTMLVideoElement>;\n\n    private _qr_scanner;\n\n    constructor(private _router: Router) {}\n\n    public ngOnDestroy() {\n        if (this._video_el.nativeElement.srcObject) {\n            (this._video_el.nativeElement.srcObject as any)\n                .getTracks()\n                .forEach((track) => track?.stop());\n        }\n        this._qr_scanner?.stop();\n    }\n\n    public ngOnInit(): void {\n        if (!navigator.mediaDevices?.getUserMedia) return;\n        navigator.mediaDevices\n            .getUserMedia({ video: true })\n            .then((stream) => (this._video_el.nativeElement.srcObject = stream))\n            .catch((e) => console.error('Unable to fetch media devices!', e));\n        this._qr_scanner = new QrScanner(this._video_el.nativeElement, (r) =>\n            this.handleQrCode(r)\n        );\n        this._qr_scanner.start();\n    }\n\n    private handleQrCode(result: string) {\n        const url = result;\n        const hashindex = url.indexOf('/#/');\n        // could just whole page redirect to url\n        if (hashindex > 0) {\n            const regex = /[?&]([^=#]+)=([^&#]*)/g;\n            const params = {};\n            let match;\n            while ((match = regex.exec(url))) {\n                params[match[1]] = match[2];\n            }\n            this._router.navigate([url.split('/#')[1].split('?')[0]], params);\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addDays, endOfDay, format } from 'date-fns';\n\n@Component({\n    selector: 'detailed-book-desks-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div\n                class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n                *ngIf=\"allow_groups\"\n            >\n                <mat-button-toggle-group\n                    class=\"w-full\"\n                    [ngModel]=\"(options | async)?.group ? 'group' : 'single'\"\n                    (ngModelChange)=\"\n                        setOptions({\n                            group: $event === 'group'\n                        })\n                    \"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                >\n                    <mat-button-toggle class=\"w-1/2\" value=\"single\">\n                        Single\n                    </mat-button-toggle>\n                    <mat-button-toggle class=\"w-1/2\" value=\"group\">\n                        Group\n                    </mat-button-toggle>\n                </mat-button-toggle-group>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/4\">\n                    <label>Date</label>\n                    <a-date-field [to]=\"book_until\" formControlName=\"date\">\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n                <div\n                    class=\"flex flex-col flex-1 w-full sm:w-1/4\"\n                    *ngIf=\"(buildings | async)?.length > 1\"\n                >\n                    <label>Building</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            placeholder=\"Select building\"\n                            [(ngModel)]=\"building\"\n                            (ngModelChange)=\"\n                                setOptions({\n                                    zone_id: $event?.id\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div\n                    class=\"flex flex-col flex-1 w-full sm:w-1/4\"\n                    *ngIf=\"(levels | async)?.length > 1\"\n                >\n                    <label>Level</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            placeholder=\"Any Level\"\n                            ngModel\n                            [disabled]=\"!building\"\n                            (ngModelChange)=\"\n                                setOptions({\n                                    zone_id: $event || building.id\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        >\n                            <mat-option\n                                *ngFor=\"let lvl of levels | async\"\n                                [value]=\"lvl.id\"\n                            >\n                                {{ lvl.display_name || lvl.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"allow_time_changes\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Start Time</label>\n                    <a-time-field\n                        [ngModel]=\"form.value.date\"\n                        (ngModelChange)=\"form.patchValue({ date: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-time-field>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>End Time</label>\n                    <a-duration-field\n                        formControlName=\"duration\"\n                        [time]=\"form.get('date')?.value\"\n                        [max]=\"12 * 60\"\n                        [min]=\"60\"\n                        [step]=\"60\"\n                    >\n                    </a-duration-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"can_book_for_others\"\n            >\n                <label>Host</label>\n                <a-user-search-field\n                    formControlName=\"user\"\n                ></a-user-search-field>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"needs_reason\"\n            >\n                <label>Details</label>\n                <mat-form-field class=\"w-full\" appearance=\"outline\">\n                    <input\n                        matInput\n                        formControlName=\"description\"\n                        placeholder=\"Reason for booking...\"\n                    />\n                </mat-form-field>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"(options | async)?.group\"\n            >\n                <label>Group Members</label>\n                <a-user-list-field\n                    [simple]=\"true\"\n                    [ngModel]=\"(options | async)?.members || []\"\n                    (ngModelChange)=\"setOptions({ members: $event })\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                ></a-user-list-field>\n            </div>\n            <div\n                class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"can_recurr\"\n            >\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Recurrence Period</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [ngModel]=\"(options | async)?.recurrence_pattern\"\n                            (ngModelChange)=\"setOptions({ pattern: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"None\"\n                        >\n                            <mat-option value=\"none\">None</mat-option>\n                            <mat-option\n                                *ngFor=\"let opt of recurrence_options\"\n                                [value]=\"opt\"\n                            >\n                                <span class=\"capitalize\">{{ opt }}</span>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                    <label>Recurrence End</label>\n                    <a-date-field\n                        [disabled]=\"\n                            !(options | async)?.pattern ||\n                            (options | async)?.pattern === 'none'\n                        \"\n                        [ngModel]=\"\n                            (options | async)?.recurr_end || form?.value?.date\n                        \"\n                        (ngModelChange)=\"\n                            setOptions({\n                                recurr_end: $event\n                            })\n                        \"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        [to]=\"book_until\"\n                    >\n                        Date and time must be in the future\n                    </a-date-field>\n                </div>\n            </div>\n            <div\n                class=\"flex flex-col flex-1 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                *ngIf=\"(features | async)?.length\"\n            >\n                <label>Desk Features</label>\n                <mat-form-field class=\"w-full\" appearance=\"outline\">\n                    <mat-select\n                        multiple\n                        [ngModel]=\"(options | async)?.features || []\"\n                        (ngModelChange)=\"\n                            setOptions({\n                                features: $event || []\n                            })\n                        \"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                        placeholder=\"Any Feature\"\n                    >\n                        <mat-option\n                            *ngFor=\"let opt of features | async\"\n                            class=\"capitalize\"\n                            [value]=\"opt\"\n                        >\n                            {{ opt }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    `,\n    styles: [``],\n})\nexport class DeskFlowDetailedFormComponent {\n    @Input() public form: FormGroup;\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get book_until() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.desks.available_period') || 90\n            )\n        );\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass, formatRecurrence } from '@placeos/common';\nimport { ExploreStateService } from '@placeos/explore';\nimport { Desk } from '@placeos/organisation';\nimport { format } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { debounceTime, map, startWith } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-flow-map',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'desks', 'form']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div class=\"flex flex-col flex-1 h-1/2 w-full \">\n            <h2 class=\"text-2xl px-4 pt-4 text-center\">Available Desks</h2>\n            <an-action-field\n                class=\"my-4 mx-auto w-[640px] max-w-[calc(100vw-2rem)]\"\n                [matMenuTriggerFor]=\"menu\"\n            >\n                {{ (option_details | async) || 'No Filters' }}\n            </an-action-field>\n            <mat-menu #menu=\"matMenu\">\n                <div\n                    (click)=\"$event.stopPropagation(); ($event.preventDefault)\"\n                    class=\"pt-4 max-h-[65vh] overflow-auto\"\n                >\n                    <detailed-book-desks-form\n                        [form]=\"form\"\n                    ></detailed-book-desks-form>\n                </div>\n            </mat-menu>\n            <div listing class=\"flex flex-1 h-1/2 relative space-x-2\">\n                <ul\n                    class=\"list-style-none w-full sm:w-[20rem] bg-gray-100 p-2 pb-32 overflow-auto h-full rounded-tr-lg space-y-2\"\n                >\n                    <div class=\"px-2 sticky top-0 bg-gray-100 w-full z-10\">\n                        {{ (desks | async)?.length || '0' }} matches available\n                    </div>\n                    <li\n                        matRipple\n                        *ngFor=\"let desk of desks | async\"\n                        [attr.desk-id]=\"desk.id\"\n                        class=\"flex items-center p-2 bg-white rounded shadow cursor-pointer space-x-2 min-h-[5rem] border\"\n                        [class.border-primary]=\"active_desk?.id === desk.id\"\n                        (click)=\"setActiveDesk(desk)\"\n                    >\n                        <app-icon class=\"text-2xl\">place</app-icon>\n                        <div class=\"flex flex-col w-1/2 flex-1\">\n                            <div name class=\"\">{{ desk.name || desk.id }}</div>\n                            <div level class=\"text-xs\">\n                                {{\n                                    desk.zone?.display_name ||\n                                        desk.zone?.name ||\n                                        '&lt;No Level&gt;'\n                                }}\n                            </div>\n                            <div features class=\"w-full flex flex-wrap\">\n                                <div\n                                    *ngFor=\"let feat of desk.features || []\"\n                                    class=\"text-xs bg-primary text-white rounded-xl px-2 py-1 mt-1 mr-2\"\n                                >\n                                    {{ feat }}\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n                <div\n                    class=\"hidden sm:block flex-1 bg-gray-200 rounded-tl-lg border-l border-t border-gray-300 relative overflow-hidden h-full\"\n                >\n                    <i-map\n                        [src]=\"url | async\"\n                        [zoom]=\"(positions | async)?.zoom\"\n                        [center]=\"(positions | async)?.center\"\n                        [styles]=\"styles | async\"\n                        [features]=\"features | async\"\n                        [actions]=\"actions | async\"\n                        [labels]=\"labels | async\"\n                        [focus]=\"active_desk?.map_id || active_desk?.id\"\n                    ></i-map>\n                    <div\n                        class=\"absolute top-2 left-2 bg-white rounded-3xl h-10 px-3 flex items-center border border-gray-300\"\n                        *ngIf=\"level | async\"\n                    >\n                        {{\n                            (level | async)?.display_name ||\n                                (level | async)?.name\n                        }}\n                    </div>\n                </div>\n                <div\n                    *ngIf=\"loading | async\"\n                    class=\"absolute inset-0 bg-white bg-opacity-60 flex flex-col items-center justify-center space-y-2 !m-0 z-20\"\n                >\n                    <mat-spinner [diameter]=\"32\"></mat-spinner>\n                    <p>{{ loading | async }}</p>\n                </div>\n                <div\n                    selection\n                    class=\"absolute bottom-2 left-1/2 transform -translate-x-1/2 p-2 bg-white shadow rounded w-[24rem] max-w-[calc(100vw-1rem)] space-y-2 !m-0 border border-gray-200\"\n                    *ngIf=\"active_desk\"\n                >\n                    <div class=\"\">\n                        <div name class=\"\">{{ active_desk.name }}</div>\n                        <div level class=\"text-xs\">\n                            {{\n                                active_desk.zone?.display_name ||\n                                    active_desk.zone.name ||\n                                    '&lt;No Level&gt;'\n                            }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center space-x-2\">\n                        <button\n                            mat-button\n                            class=\"inverse flex-1\"\n                            (click)=\"setActiveDesk(null)\"\n                        >\n                            Clear\n                        </button>\n                        <button\n                            mat-button\n                            class=\"flex-1\"\n                            (click)=\"makeBooking()\"\n                        >\n                            Book\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n        `,\n    ],\n})\nexport class DeskFlowMapComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._explore.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._explore.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._explore.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._explore.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._explore.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._explore.map_labels;\n    public readonly level = this._explore.level;\n\n    public readonly desks = this._state.available_assets;\n\n    public readonly loading = this._state.loading;\n\n    public readonly form = this._state.form;\n\n    public readonly option_details = combineLatest([\n        this._state.options,\n        this.form.valueChanges.pipe(startWith({})),\n    ]).pipe(\n        map(([options]) => {\n            const form = this._state.form;\n            const recurrence = formatRecurrence({\n                pattern: options.pattern as any,\n                end: options.recurr_end,\n                start: form.value.date,\n                interval: 1,\n                days_of_week: -1,\n            });\n            const details = `${format(form.value.date, 'dd MMM yyyy')}${\n                options.pattern && options.pattern !== 'none'\n                    ? ', ' + recurrence\n                    : ''\n            }${options.group ? ', ' + options.group : ''}, ${\n                options.features?.length || 'Any'\n            } Feature${(options.features?.length || 0) < 2 ? '' : 's'}`;\n            if (options.zone_id) this._explore.setLevel(options.zone_id);\n            return details;\n        })\n    );\n\n    private _active_desk = new BehaviorSubject<Desk>(null);\n\n    public readonly makeBooking = () => this._state.confirmPost();\n\n    public get active_desk(): Desk {\n        return this._active_desk.getValue();\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _explore: ExploreStateService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'assets-statue',\n            combineLatest([\n                this._state.assets,\n                this._state.available_assets,\n                this._active_desk,\n            ])\n                .pipe(debounceTime(200))\n                .subscribe(([assets, available]) => {\n                    const status = {};\n                    const actions = [];\n                    for (const desk of assets) {\n                        const active =\n                            desk.bookable &&\n                            available.find((d) => d.id === desk.id);\n                        status[`#${desk.map_id || desk.id}`] = {\n                            fill: desk.bookable\n                                ? available.find((d) => d.id === desk.id)\n                                    ? '#43a047'\n                                    : '#e53935'\n                                : '#999',\n                            opacity: 0.6,\n                        };\n                        if (active)\n                            actions.push({\n                                id: desk.map_id || desk.id,\n                                action: 'click',\n                                callback: () => this.setActiveDesk(desk as any),\n                            });\n                    }\n                    this._explore.setStyles('desks', status);\n                    this._explore.setActions('desks', actions);\n                    this._explore.setFeatures(\n                        'desks',\n                        this.active_desk\n                            ? [\n                                  {\n                                      location:\n                                          this.active_desk.map_id ||\n                                          this.active_desk.id,\n                                      content: `\n                    <span class=\"flex h-2 w-2 rounded-full absolute top-1/4 left-1/4 transform -translate-x-1/2 -translate-y-1/2\" >\n                        <span class=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-primary opacity-75\"></span>\n                        <span class=\"relative inline-flex rounded-full h-2 w-2 bg-primary\"></span>\n                    </span>`,\n                                  },\n                              ]\n                            : []\n                    );\n                })\n        );\n    }\n\n    public setActiveDesk(desk: Desk) {\n        this._explore.setLevel(desk?.zone?.id);\n        this._active_desk.next(desk);\n        this._state.form.patchValue({\n            asset_id: desk?.id,\n            asset_name: desk.name,\n            map_id: desk?.map_id || desk?.id,\n            description: desk.name,\n            booking_type: 'desk',\n            zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : [],\n        });\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'desk-flow-confirm',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'desks', 'map']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n        `,\n    ],\n})\nexport class DeskFlowConfirmComponent {}\n","import { Component, Input } from '@angular/core';\nimport { currentUser } from '@placeos/common';\n\n@Component({\n    selector: 'flow-success',\n    template: `\n        <div\n            name=\"success\"\n            class=\"fixed inset-0 flex flex-col bg-secondary items-center justify-center z-50\"\n        >\n            <div class=\"text-4xl rounded-full bg-white text-success mb-4\">\n                <app-icon>done</app-icon>\n            </div>\n            <div class=\"text-center text-lg text-white mb-4\">\n                Thank you, you {{ type }} booking was successful!<br />\n                An event has been added to {{ is_host ? 'your' : 'the host\\'s' }} calendar\n            </div>\n            <div class=\"flex items-center space-x-2\">\n                <a\n                    button\n                    mat-button\n                    class=\"w-32\"\n                    [routerLink]=\"['/book', route]\"\n                    [queryParams]=\"{}\"\n                >\n                    New Booking\n                </a>\n                <a\n                    button\n                    mat-button\n                    class=\"w-32\"\n                    [routerLink]=\"['/schedule']\"\n                    [queryParams]=\"{ email: calendar }\"\n                >\n                    My Day\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class FlowSuccessComponent {\n    @Input() public calendar: string;\n    @Input() public route = 'spaces';\n    @Input() public type = 'space';\n\n    public get is_host() {\n        return this.calendar === currentUser()?.email;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BookingFormService, findNearbyDesk } from '@placeos/bookings';\nimport { currentUser, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addDays, setHours, addMinutes, roundToNearestMinutes } from 'date-fns';\nimport { first, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-flow-form',\n    template: `\n        <section form class=\"flex-1 min-h-[50%]\">\n            <h2\n                class=\"text-xl uppercase font-medium mb-2 mt-4 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                {{ is_edit ? 'Edit' : 'Detailed' }} Desk Booking\n            </h2>\n            <detailed-book-desks-form [form]=\"form\"></detailed-book-desks-form>\n            <div class=\"mb-4 border-b border-gray-300 w-full\"></div>\n            <div\n                class=\"flex flex-col sm:flex-row items-center justify-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n            >\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem] inverse\"\n                    mat-button\n                    clear\n                    (click)=\"clearForm()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">clear</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Cancel Edit' : 'Clear Form'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    find\n                    mat-button\n                    *ngIf=\"!auto_allocation; else alloc_button\"\n                    (click)=\"findDesk()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">search</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Update Desk' : 'Find Desk'\n                        }}</span>\n                    </div>\n                </button>\n            </div>\n        </section>\n        <ng-template #alloc_button>\n            <button\n                class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                find\n                mat-button\n                (click)=\"allocateDesk()\"\n            >\n                {{ is_edit ? 'Update Desk' : 'Book Desk' }}\n            </button>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: auto;\n            }\n\n            [quick] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class DeskFlowFormComponent implements OnInit {\n    public time = 0;\n    public level = '';\n\n    public readonly quick_times = [\n        { name: 'Now', value: 0 },\n        {\n            name: 'Tomorrow',\n            value: setHours(addDays(new Date(), 1), 9).valueOf(),\n        },\n    ];\n\n    public levels = [];\n\n    public get is_edit() {\n        return !!this.form?.get('id')?.value;\n    }\n\n    public get auto_allocation() {\n        return !!this._settings.get('app.desks.auto_allocation');\n    }\n\n    public get form() {\n        return this._state.form;\n    }\n\n    public readonly clearForm = () => {\n        this.time = 0;\n        this.level = this._org.building.id;\n        this._state.clearForm();\n    };\n\n    constructor(\n        private _state: BookingFormService,\n        private _router: Router,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _));\n        await this._org.active_levels.pipe(first((_) => _?.length > 0));\n        this.level = this._org.building?.id;\n        this.levels = [\n            { id: this._org.building?.id, name: 'Any Level' },\n            ...this._org.levelsForBuilding(this._org.building),\n        ];\n    }\n\n    public quickBook() {\n        this.form.patchValue({\n            date: (this.time < 24 * 60\n                ? addMinutes(\n                      roundToNearestMinutes(new Date(), { nearestTo: 5 }),\n                      this.time\n                  )\n                : setHours(addDays(new Date(), 1), 8)\n            ).valueOf(),\n            title: 'Ad-hoc Desk Booking',\n        });\n        this.findDesk();\n    }\n\n    public findDesk() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'desks', 'map']);\n    }\n\n    public async allocateDesk() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        // Find nearby desk for user's department\n        const settings = this._settings.get('app.departments') || {};\n        const group = currentUser().groups.find(_ => _ in settings);\n        if (!group) {\n            this._router.navigate(['/book', 'desks', 'map']);\n            return;\n        }\n        const { level, centered_at } = settings[group];\n        const lvl = this._org.levelWithID([level]);\n        if (!level) {\n            this._router.navigate(['/book', 'desks', 'map']);\n            return;\n        }\n        const desk_list = await this._state.available_assets.pipe(take(1)).toPromise()\n        const desk_id = await findNearbyDesk(lvl.map_id, centered_at, desk_list.map(_ => _.map_id || _.id));\n        const desk = desk_list.find(_ => _.map_id === desk_id || _.id === desk_id);\n        if (!desk) {\n            this._router.navigate(['/book', 'desks', 'map']);\n            return;\n        }\n        this._state.form.patchValue({\n            asset_id: desk?.id,\n            asset_name: desk.name,\n            map_id: desk?.map_id || desk?.id,\n            description: desk.name,\n            booking_type: 'desk',\n            zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : [],\n        });\n        this._state.confirmPost();\n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { first } from 'rxjs/operators';\n\n@Component({\n    selector: 'placeos-book-desk-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'map'\">\n                    <desk-flow-map></desk-flow-map>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <desk-flow-confirm></desk-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        type=\"desk\"\n                        route=\"desks\"\n                        [calendar]=\"last_success?.user_email\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <desk-flow-form></desk-flow-form>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookDeskFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _route: ActivatedRoute,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this._state.form.patchValue({ booking_type: 'desk' });\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Space } from '@placeos/spaces';\nimport { MapLocateModalComponent } from '../../overlays/map-locate-modal.component';\n\n@Component({\n    selector: 'space-flow-find-item',\n    template: `\n        <div\n            class=\"flex items-center bg-white p-2 my-2 shadow w-[640px] max-w-[calc(100%-2rem)] mx-auto rounded\"\n        >\n            <div class=\"flex flex-col flex-1 space-y-2 \">\n                <div class=\"flex items-center\">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>place</app-icon>\n                    </div>\n                    <span\n                        >{{ space?.level?.display_name || space?.level?.name }},\n                        {{ space?.display_name || space?.name }}</span\n                    >\n                </div>\n                <div class=\"flex items-center\">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>group</app-icon>\n                    </div>\n                    <span>{{ space?.capacity || 0 }} People</span>\n                </div>\n            </div>\n            <div class=\"flex flex-col space-y-2 ml-2\">\n                <button\n                    mat-button\n                    book\n                    [class.bg-pending]=\"multiple && book\"\n                    [class.border-pending]=\"multiple && book\"\n                    (click)=\"bookSpace()\"\n                >\n                    {{ multiple ? (book ? 'Remove' : 'Select') : 'Book' }}\n                </button>\n                <button\n                    locate\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"viewLocation()\"\n                >\n                    Map\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                width: 8rem;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFindItemComponent {\n    /** Space to display details for */\n    @Input() public space: Space;\n    /** Whether space should be booked */\n    @Input() public multiple: boolean;\n    /** Whether space should be booked */\n    @Input() public book: boolean;\n    /** Emitter for changes to book value */\n    @Output() public bookChange = new EventEmitter<boolean>();\n\n    constructor(private _dialog: MatDialog) {}\n\n    public bookSpace() {\n        this.book = this.multiple ? !this.book : true;\n        this.bookChange.emit(this.book);\n    }\n\n    public viewLocation() {\n        this._dialog.open(MapLocateModalComponent, {\n            maxWidth: '95vw',\n            maxHeight: '95vh',\n            data: { item: this.space },\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HashMap, SettingsService } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { Space, SpacesService } from '@placeos/spaces';\nimport { combineLatest } from 'rxjs';\nimport { filter, first, map, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'space-flow-find',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'spaces', 'form']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div filters>\n            <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto py-4\">\n                <h2 class=\"text-xl uppercase font-medium text-white\">\n                    Available Spaces\n                </h2>\n                <div\n                    class=\"flex flex-col items-center sm:flex-row space-x-0 sm:space-x-2\"\n                >\n                    <mat-form-field\n                        overlay\n                        buildings\n                        class=\"w-full sm:w-px sm:flex-1 h-[3.25rem]\"\n                        *ngIf=\"(buildings | async)?.length > 1\"\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Select Building...\"\n                            [ngModel]=\"building | async\"\n                            (ngModelChange)=\"setBuilding($event)\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of buildings | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name || bld.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-px sm:flex-1 h-[3.25rem]\"\n                        overlay\n                        *ngIf=\"(levels | async)?.length > 0\"\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Level\"\n                            [ngModel]=\"\n                                (options | async)?.zone_ids?.length\n                                    ? (options | async)?.zone_ids[0]\n                                    : ''\n                            \"\n                            (ngModelChange)=\"setOptions({ zone_ids: [$event] })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of levels | async\"\n                                [value]=\"item.id\"\n                            >\n                                {{ item.display_name || item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-px sm:flex-1 h-[3.25rem] hidden sm:block\"\n                        overlay\n                        appearance=\"outline\"\n                    >\n                        <mat-select\n                            placeholder=\"Any Capacity\"\n                            [ngModel]=\"(options | async)?.capacity\"\n                            (ngModelChange)=\"setOptions({ capacity: $event })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of quick_capacities\"\n                                [value]=\"item.value\"\n                            >\n                                {{ item.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        class=\"w-full sm:w-px sm:flex-1 h-[3.25rem] hidden sm:block\"\n                        overlay\n                        appearance=\"outline\"\n                        *ngIf=\"(features | async).length\"\n                    >\n                        <mat-select\n                            placeholder=\"Any Features\"\n                            multiple\n                            [ngModel]=\"(options | async)?.features\"\n                            (ngModelChange)=\"setOptions({ features: $event })\"\n                        >\n                            <mat-option\n                                *ngFor=\"let item of features | async\"\n                                [value]=\"item\"\n                            >\n                                {{ item }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n        </div>\n        <div class=\"flex-1 w-full bg-gray-100 overflow-auto\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <ng-container\n                    *ngIf=\"(spaces | async)?.length > 0; else empty_state\"\n                >\n                    <space-flow-find-item\n                        *ngFor=\"let space of spaces | async\"\n                        class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto \"\n                        [space]=\"space\"\n                        [multiple]=\"multiple\"\n                        [(book)]=\"book_space[space.id]\"\n                        (bookChange)=\"handleBookEvent(space, $event)\"\n                    ></space-flow-find-item>\n                    <p class=\"p-4 text-center opacity-60\">\n                        End of available spaces list\n                    </p>\n                </ng-container>\n            </ng-container>\n        </div>\n        <div *ngIf=\"multiple\" class=\"bg-white border-t border-gray-200\">\n            <div\n                class=\"flex items-center w-[640px] max-w-[calc(100%-2rem)] mx-auto p-2\"\n            >\n                <div class=\"flex-1 underline\" [matMenuTriggerFor]=\"menu\">\n                    {{ space_list.length }} space(s) selected\n                </div>\n                <button\n                    class=\"w-32\"\n                    [disabled]=\"!space_list.length\"\n                    mat-button\n                    (click)=\"confirmBooking()\"\n                >\n                    Book\n                </button>\n            </div>\n            <mat-menu #menu=\"matMenu\" yPosition=\"above\">\n                <div\n                    class=\"flex items-center pointer-events-none leading-tight\"\n                    mat-menu-item\n                    *ngFor=\"let space of space_list\"\n                >\n                    <div class=\"flex flex-col mr-4\">\n                        <div>{{ space.display_name || space.name }}</div>\n                        <div class=\"text-xs opacity-70\">\n                            {{ space.level?.display_name || space.level?.name }}\n                            ~ {{ space.capacity || '2+' }} People\n                        </div>\n                    </div>\n                    <button\n                        mat-icon-button\n                        class=\"pointer-events-auto\"\n                        (click)=\"\n                            this.handleBookEvent(space, false);\n                            $event.stopPropagation()\n                        \"\n                    >\n                        <app-icon>close</app-icon>\n                    </button>\n                </div>\n                <div\n                    mat-menu-item\n                    class=\" opacity-60\"\n                    *ngIf=\"!space_list?.length\"\n                >\n                    No selected spaces\n                </div>\n            </mat-menu>\n        </div>\n        <ng-template #load_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Retrieving available spaces...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div\n                class=\"h-full w-full flex flex-col items-center justify-center space-y-2 p-8 text-center\"\n            >\n                <p>\n                    No available spaces for selected time, capacity or level(s)\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n\n            [filters] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFindComponent implements OnInit {\n    public book_space: HashMap<boolean> = {};\n    public quick_capacities = [\n        { name: 'Any Capacity', value: 0 },\n        { name: 'Small (1 - 4)', value: 1 },\n        { name: 'Medium (5 - 12)', value: 5 },\n        { name: 'Large (13 - 32)', value: 13 },\n        { name: 'Huge (32+)', value: 33 },\n    ];\n\n    public space_list: Space[] = [];\n\n    /** List of available buildings */\n    public readonly buildings = this._org.building_list;\n    /** Currently active building */\n    public readonly building = this._org.active_building;\n\n    public readonly levels = combineLatest([\n        this.building,\n        this._state.options,\n    ]).pipe(\n        filter(([_]) => !!_),\n        map(([bld]) => [\n            {\n                id: this._org.building.id,\n                name: 'All Levels',\n            },\n            ...this._org.levelsForBuilding(bld),\n        ])\n    );\n\n    public readonly loading = this._state.loading;\n    public readonly options = this._state.options;\n\n    public readonly spaces = this._state.available_spaces;\n    public readonly features = this._spaces.features;\n    public async setBuilding(bld) {\n        const opts = await this.options.pipe(take(1)).toPromise();\n        if (bld) this._org.building = bld;\n        const levels = this._org.levelsForBuilding(this._org.building);\n        const lvl = levels.find((_) => opts.zone_ids?.includes(_.id));\n        if (!lvl && levels.length) {\n            this.setOptions({ zone_ids: [levels[0].id] });\n        }\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public get multiple() {\n        return this._settings.get('app.events.multiple_spaces') ?? false;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _spaces: SpacesService,\n        private _state: EventFormService,\n        private _settings: SettingsService,\n        private _router: Router\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => !!_)).toPromise();\n        await this._spaces.initialised.pipe(first((_) => !!_)).toPromise();\n        this.setBuilding(this._org.building);\n        this.book_space = {};\n        const resources = this._state.form?.get('resources')?.value || [];\n        resources.forEach((_) => (this.book_space[_.id] = true));\n        this.space_list = this._spaces.filter((s) => this.book_space[s.id]);\n    }\n\n    public handleBookEvent(space: Space, book: boolean = true) {\n        if (this.multiple) {\n            this.book_space[space.id] = book;\n        } else {\n            this.book_space = {};\n            this.book_space[space.id] = book;\n            this.confirmBooking();\n        }\n        this.space_list = this._spaces.filter((s) => this.book_space[s.id]);\n    }\n\n    public confirmBooking() {\n        const spaces = this._spaces.filter((s) => this.book_space[s.id]);\n        this._state.form.patchValue({ resources: spaces, system: spaces[0] });\n        this._router.navigate(['/book', 'spaces', 'confirm']);\n    }\n}\n","import { Component } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\n\n@Component({\n    selector: 'space-flow-confirm',\n    template: `\n        <div topbar class=\"\">\n            <a\n                button\n                class=\"clear h-[2.75rem] text-white\"\n                mat-button\n                [routerLink]=\"['/book', 'spaces', 'find']\"\n            >\n                <div class=\"flex items-center justify-center h-full\">\n                    <app-icon class=\"text-xl\">arrow_back</app-icon>\n                    <span class=\"ml-2 mx-4\">Back</span>\n                </div>\n            </a>\n        </div>\n        <div\n            class=\"flex flex-col items-center space-y-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n        >\n            <h2 class=\"text-xl uppercase font-medium w-full my-4\">\n                Your meeting details\n            </h2>\n            <div\n                class=\"flex items-center py-2 space-x-2 border-b border-gray-200 w-full\"\n            >\n                <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                    <app-icon>event</app-icon>\n                </div>\n                <div class=\"flex-1 truncate\">\n                    {{ form.get('date')?.value | date: 'longDate' }} at\n                    {{ form.get('date')?.value | date: 'shortTime' }} ~\n                    {{\n                        form.get('date')?.value +\n                            form.get('duration')?.value * 60 * 1000\n                            | date: 'shortTime'\n                    }}\n                </div>\n                <a\n                    mat-button\n                    class=\"clear underline\"\n                    [routerLink]=\"['/book', 'spaces', 'form']\"\n                    >Edit</a\n                >\n            </div>\n            <div\n                class=\"flex items-center py-2 space-x-2 border-b border-gray-200 w-full\"\n            >\n                <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                    <app-icon>schedule</app-icon>\n                </div>\n                <div class=\"flex-1 truncate\">\n                    {{ form.get('duration')?.value }} minutes\n                </div>\n                <a\n                    mat-button\n                    class=\"clear underline\"\n                    [routerLink]=\"['/book', 'spaces', 'form']\"\n                    >Edit</a\n                >\n            </div>\n            <div class=\"border-b border-gray-200 w-full\">\n                <div class=\"flex items-center py-2 space-x-2 \">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>place</app-icon>\n                    </div>\n                    <div class=\"flex-1 truncate\">\n                        {{ form.get('resources')?.value?.length }} Space(s)\n                    </div>\n                    <button\n                        mat-button\n                        [disabled]=\"!form.get('resources')?.value?.length\"\n                        class=\"clear bg-transparent border-none underline\"\n                        (click)=\"show_spaces = !show_spaces\"\n                    >\n                        {{ show_spaces ? 'Hide' : 'Show' }}\n                    </button>\n                    <a\n                        mat-button\n                        class=\"clear underline\"\n                        [routerLink]=\"['/book', 'spaces', 'find']\"\n                        >Edit</a\n                    >\n                </div>\n                <div\n                    list\n                    [style.height]=\"\n                        !show_spaces\n                            ? '0'\n                            : form.get('resources')?.value?.length * 2.5 + 'rem'\n                    \"\n                    class=\"overflow-hidden\"\n                >\n                    <div\n                        class=\"flex items-center h-10 pl-12\"\n                        *ngFor=\"let space of form.get('resources')?.value\"\n                    >\n                        <span\n                            >{{ space.display_name || space.name }} [{{\n                                space.level?.display_name || space.level?.name\n                            }}]</span\n                        >\n\n                        <button\n                            mat-button\n                            class=\"bg-transparent border-none underline\"\n                        >\n                            Map\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"border-b border-gray-200 w-full\">\n                <div class=\"flex items-center py-2 space-x-2 \">\n                    <div class=\"p-2 rounded-full bg-gray-300 mr-2\">\n                        <app-icon>group</app-icon>\n                    </div>\n                    <div class=\"flex-1 truncate\">\n                        {{ form.get('attendees')?.value?.length || 0 }}\n                        Attendee(s)\n                    </div>\n                    <button\n                        mat-button\n                        [disabled]=\"!form.get('attendees')?.value?.length\"\n                        class=\"clear bg-transparent border-none underline\"\n                        (click)=\"show_people = !show_people\"\n                    >\n                        {{ show_people ? 'Hide' : 'Show' }}\n                    </button>\n                    <a\n                        mat-button\n                        class=\"clear underline\"\n                        [routerLink]=\"['/book', 'spaces', 'form']\"\n                        >Edit</a\n                    >\n                </div>\n                <div\n                    list\n                    [style.height]=\"\n                        !show_people\n                            ? '0'\n                            : form.get('attendees')?.value?.length * 3 + 'rem'\n                    \"\n                    class=\"overflow-hidden\"\n                >\n                    <div\n                        class=\"flex items-center h-12 pl-12 space-x-2\"\n                        *ngFor=\"let user of form.get('attendees')?.value\"\n                    >\n                        <a-user-avatar\n                            class=\"text-sm\"\n                            [user]=\"user\"\n                        ></a-user-avatar>\n                        <span>{{ user.name || user.email }}</span>\n                    </div>\n                </div>\n            </div>\n            <button\n                mat-button\n                class=\"w-32\"\n                confirm\n                [disabled]=\"loading\"\n                (click)=\"postForm()\"\n            >\n                <span *ngIf=\"!loading\">Confirm</span>\n                <mat-spinner\n                    class=\"mx-auto\"\n                    [diameter]=\"24\"\n                    *ngIf=\"loading\"\n                ></mat-spinner>\n            </button>\n        </div>\n        <\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n\n            [topbar] {\n                background-color: #00539f;\n            }\n\n            [list] {\n                transition: height 200ms;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowConfirmComponent {\n    public show_spaces = false;\n    public show_people = false;\n    public loading = false;\n\n    public readonly postForm = async () => {\n        this.loading = true;\n        await this._state.postForm().catch((_) => notifyError(_));\n        this.loading = false;\n    };\n\n    public get form() {\n        return this._state.form;\n    }\n\n    constructor(private _state: EventFormService) {}\n}\n","import { Identity } from '@placeos/common';\n\n// Event catering order interfaces\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport interface CateringOption {\n    /** Unique Identifier of the catering option */\n    readonly id: string;\n    /** Display name for the catering option */\n    readonly name: string;\n    /** Name of the group associated with the option */\n    readonly group: string;\n    /** Whether multiple items in the group can be selected */\n    readonly multiple: boolean;\n    /** Cost of adding the option to the item */\n    readonly unit_price: number;\n}\n\nexport type CateringRule =\n    | ['after_hour' | 'before_hour', number]\n    | ['min_length' | 'max_length' | 'is_before' | 'is_after' | 'visitor_type', string]\n    | ['groups', string[]];\n\nexport interface CateringRuleset {\n    /** ID of the ruleset. Zone ID, category or tag */\n    id: string;\n    /** Descriptive name of the ruleset */\n    name: string;\n    /** List of rules for the id */\n    rules: CateringRule[];\n}\n\nexport const RULE_TYPES: Identity[] = [\n    { id: 'after_hour', name: 'After Hour' },\n    { id: 'before_hour', name: 'Before Hour' },\n    { id: 'min_length', name: 'Min. Meeting Length' },\n    { id: 'max_length', name: 'Max. Meeting Length' },\n    { id: 'is_before', name: 'Is Before Time' },\n    { id: 'is_after', name: 'Is After Time' },\n    { id: 'visitor_type', name: 'Visitor Type' },\n    { id: 'groups', name: 'User in Groups' },\n]\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from 'libs/common/src/lib/types';\n\nimport { CateringRuleset, RULE_TYPES } from './catering.interfaces';\n\nexport interface CateringConfigModalData {\n    /** List of catering rules */\n    config: CateringRuleset[];\n    /** List of available categories and tags */\n    types?: string[];\n}\n\n@Component({\n    selector: 'catering-config-modal',\n    template: `\n        <header>\n            <h3>Edit Catering Configuration</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto text-center\">\n            <button\n                mat-button\n                (click)=\"rulesets.push({ id: new_id, rules: [] })\"\n            >\n                New Ruleset\n            </button>\n            <div *ngFor=\"let set of rulesets\" class=\"ruleset\">\n                <div class=\"flex\">\n                    <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Zone ID, Category or Tag\"\n                            [(ngModel)]=\"set.name\"\n                            required\n                        />\n                        <mat-error>Ruleset name is required</mat-error>\n                    </mat-form-field>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        (click)=\"set.rules.push(['', '']); show_rules = set.id\"\n                    >\n                        <app-icon>add</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        class=\"mb-6\"\n                        [disabled]=\"!set.rules.length\"\n                        (click)=\"\n                            show_rules = show_rules !== set.id ? set.id : ''\n                        \"\n                    >\n                        <app-icon>{{\n                            show_rules === set.id\n                                ? 'expand_less'\n                                : 'expand_more'\n                        }}</app-icon>\n                    </button>\n                </div>\n                <div\n                    name=\"rules\"\n                    class=\"bg-gray-100 rounded overflow-hidden\"\n                    [style.height]=\"\n                        (show_rules === set.id ? 3.5 * set.rules.length : 0) +\n                        'em'\n                    \"\n                >\n                    <div\n                        class=\"flex px-2 h-14 space-x-2\"\n                        *ngFor=\"let rule of set.rules\"\n                    >\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <mat-select\n                                name=\"booking-type\"\n                                [(ngModel)]=\"rule[0]\"\n                                placeholder=\"Select Rule\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let type of rule_types\"\n                                    [value]=\"type.id\"\n                                >\n                                    {{ type.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field class=\"flex-1\" appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"value\"\n                                placeholder=\"Rule value\"\n                                [(ngModel)]=\"rule[1]\"\n                                required\n                            />\n                            <mat-error>Rule value is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </main>\n        <footer\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button (click)=\"saveChanges()\">Save Changes</button>\n        </footer>\n    `,\n    styles: [\n        `\n            [name='rules'] {\n                transition: height 200ms;\n            }\n\n            main {\n                width: 32em;\n                padding: 0.5em 1em 1em;\n            }\n\n            main button.mat-button {\n                margin: 0 auto 0.5em;\n                min-width: 12em;\n            }\n        `,\n    ],\n})\nexport class CateringConfigModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = false;\n    /** Whether to show rules for a ruleset */\n    public show_rules: string;\n\n    public readonly rulesets: CateringRuleset[];\n\n    public readonly rule_types: readonly Identity[] = RULE_TYPES;\n\n    public get new_id() {\n        return 'ruleset-' + Math.floor(Math.random() * 9999_9999);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfigModalData\n    ) {\n        this.rulesets = (_data.config || []).map((set) => {\n            set.rules = set.rules.map((i) => [\n                i[0],\n                JSON.stringify(i[1]),\n            ]) as any;\n            return set;\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const rulesets = this.rulesets.map((set) => {\n            return {\n                ...set,\n                rules: set.rules.map((i) => {\n                    let value = i[1];\n                    try {\n                        value = JSON.parse(i[1] as any);\n                    } catch (e) {}\n                    return [i[0], value];\n                }) as any,\n            };\n        });\n        this.event.emit({ reason: 'done', metadata: rulesets });\n    }\n}\n","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent, randomInt } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\nexport interface CateringItemModalData {\n    item: CateringItem;\n    categories?: string[];\n}\n\n@Component({\n    selector: 'catering-item-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>{{ item.id ? 'Edit' : 'Add' }} Item</h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.category\">\n                <label\n                    for=\"category\"\n                    [class.error]=\"\n                        form.controls.category.invalid &&\n                        form.controls.category.touched\n                    \"\n                >\n                    Category<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"category\"\n                        placeholder=\"Category\"\n                        formControlName=\"category\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Category is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.tags\">\n                <label\n                    for=\"tags\"\n                    [class.error]=\"\n                        form.controls.tags.invalid && form.controls.tags.touched\n                    \"\n                    i18n=\"@@tagsLabel\"\n                >\n                    Tags:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-chip-list #chipList aria-label=\"Item Tags\">\n                        <mat-chip\n                            *ngFor=\"let tag of tag_list\"\n                            [selectable]=\"true\"\n                            [removable]=\"true\"\n                            (removed)=\"removeTag(tag)\"\n                        >\n                            {{ tag }}\n                            <app-icon\n                                matChipRemove\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'close'\n                                }\"\n                            ></app-icon>\n                        </mat-chip>\n                        <input\n                            name=\"tags\"\n                            placeholder=\"Zone tags...\"\n                            i18n-placeholder=\"@@zoneTagsPlaceholder\"\n                            [matChipInputFor]=\"chipList\"\n                            [matChipInputSeparatorKeyCodes]=\"separators\"\n                            [matChipInputAddOnBlur]=\"true\"\n                            (matChipInputTokenEnd)=\"addTag($event)\"\n                        />\n                    </mat-chip-list>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.description\">\n                <label for=\"description\">Description:</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"description\"\n                        placeholder=\"Item Description\"\n                        formControlName=\"description\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.unit_price.invalid &&\n                        form.controls.unit_price.touched\n                    \"\n                >\n                    Unit Price<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                    <mat-error>Unit Price is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-none w-28 min-w-0\">Accept Points?</label>\n                <mat-checkbox formControlName=\"accept_points\">{{\n                    form.get('accept_points')?.value ? 'No' : 'Yes'\n                }}</mat-checkbox>\n            </div>\n            <div class=\"flex items-center\">\n                <label class=\"flex-1 w-24 min-w-0\">Discount Cap</label>\n                <a-counter\n                    class=\"border border-gray-200 rounded\"\n                    formControlName=\"discount_cap\"\n                    [min]=\"0\"\n                    [max]=\"100\"\n                    [step]=\"5\"\n                    [render_fn]=\"renderPercent\"\n                ></a-counter>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of categories\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup = new FormGroup({\n        name: new FormControl(this.item.name || '', [Validators.required]),\n        description: new FormControl(this.item.description || ''),\n        category: new FormControl(this.item.category || '', [\n            Validators.required,\n        ]),\n        unit_price: new FormControl(this.item.unit_price, [\n            Validators.required,\n        ]),\n        tags: new FormControl(this.item.tags || []),\n        accept_points: new FormControl(this.item.accept_points || false),\n        discount_cap: new FormControl(this.item.discount_cap || 0),\n    });\n    /** Whether changes are being saved */\n    public loading = false;\n    /** List of separator characters for tags */\n    public readonly separators: number[] = [ENTER, COMMA, SPACE];\n\n    /** Current item details */\n    public get item(): CateringItem {\n        return this._data.item || new CateringItem();\n    }\n\n    /** List of available categories */\n    public get categories(): string[] {\n        return this._data.categories || [];\n    }\n\n    public get tag_list(): string[] {\n        return this.form.controls.tags.value;\n    }\n\n    public renderPercent(value: number = 0) {\n        return `${value}%`;\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemModalData\n    ) {}\n\n    /**\n     * Add a tag to the list of tags for the item\n     * @param event Input event\n     */\n    public addTag(event: MatChipInputEvent): void {\n        if (!this.form || !this.form.controls.tags) return;\n        this.form.controls.tags.markAsDirty();\n        const input = event.input;\n        const value = event.value;\n        const tag_list = this.tag_list;\n        if ((value || '').trim()) {\n            tag_list.push(value);\n            this.form.controls.tags.setValue(tag_list);\n        }\n\n        // Reset the input value\n        if (input) {\n            input.value = '';\n        }\n    }\n\n    /**\n     * Remove tag from the list\n     * @param existing_tag Tag to remove\n     */\n    public removeTag(existing_tag: string): void {\n        if (!this.form || !this.form.controls.tags) return;\n        const tag_list = this.tag_list;\n        this.form.controls.tags.markAsDirty();\n        const index = tag_list.indexOf(existing_tag);\n\n        if (index >= 0) {\n            tag_list.splice(index, 1);\n            this.form.controls.tags.setValue(tag_list);\n        }\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this.item,\n                    id: this.item.id || `item-${randomInt(9999_9999)}`,\n                    ...this.form.value,\n                }),\n            },\n        });\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent } from 'libs/common/src/lib/types';\nimport { randomInt } from 'libs/common/src/lib/general';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringItemOptionModalData {\n    parent: CateringItem;\n    option: CateringOption;\n    types: string[];\n}\n\n@Component({\n    selector: 'catering-option-modal',\n    template: `\n        <header>\n            <h3 mat-dialog-title>\n                {{ option.id ? 'Edit' : 'Add' }} Item Option\n            </h3>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <form\n            class=\"p-4 overflow-auto\"\n            *ngIf=\"form && !loading; else load_state\"\n            [formGroup]=\"form\"\n        >\n            <div class=\"field\" *ngIf=\"form.controls.name\">\n                <label\n                    for=\"title\"\n                    [class.error]=\"\n                        form.controls.name.invalid && form.controls.name.touched\n                    \"\n                >\n                    Name<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"name\"\n                        placeholder=\"Item name\"\n                        formControlName=\"name\"\n                    />\n                    <mat-error>Name is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.group\">\n                <label\n                    for=\"group\"\n                    [class.error]=\"\n                        form.controls.group.invalid &&\n                        form.controls.group.touched\n                    \"\n                >\n                    Type<span>*</span>:\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"group\"\n                        placeholder=\"Type of option e.g. Number of sugars\"\n                        formControlName=\"group\"\n                        [matAutocomplete]=\"auto\"\n                    />\n                    <mat-error>Type is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.unit_price\">\n                <label for=\"title\">Unit Price:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"unit-price\"\n                        type=\"number\"\n                        placeholder=\"Unit Price\"\n                        formControlName=\"unit_price\"\n                    />\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.multiple\">\n                <mat-checkbox name=\"multiple\" formControlName=\"multiple\">\n                    Can select multiple of type\n                </mat-checkbox>\n            </div>\n        </form>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex p-2 items-center justify-center border-none border-t border-solid border-gray-300\"\n        >\n            <button mat-button [disabled]=\"!form.dirty\" (click)=\"saveChanges()\">\n                Save\n            </button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center p-8 space-y-2 w-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving catering item option...</p>\n            </div>\n        </ng-template>\n        <mat-autocomplete #auto=\"matAutocomplete\">\n            <mat-option *ngFor=\"let option of types\" [value]=\"option\">\n                {{ option }}\n            </mat-option>\n        </mat-autocomplete>\n    `,\n    styles: [\n        `\n            .field {\n                display: flex;\n                flex-wrap: wrap;\n            }\n        `,\n    ],\n})\nexport class CateringItemOptionModalComponent implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for item */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading = false;\n\n    /** Current item details */\n    public get option(): CateringOption {\n        return this._data.option;\n    }\n\n    /** List of available categories */\n    public get types(): string[] {\n        return this._data.types || [];\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringItemOptionModalData\n    ) {}\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            name: new FormControl(this.option.name || '', [\n                Validators.required,\n            ]),\n            group: new FormControl(this.option.group || '', [\n                Validators.required,\n            ]),\n            unit_price: new FormControl(this.option.unit_price),\n            multiple: new FormControl(!!this.option.multiple, []),\n        });\n    }\n\n    public saveChanges() {\n        this.loading = true;\n        const new_option = {\n            ...this.option,\n            id: this.option.id || `option-${randomInt(9999_9999)}`,\n            ...this.form.value,\n        } as CateringOption;\n        this.event.emit({\n            reason: 'done',\n            metadata: {\n                item: new CateringItem({\n                    ...this._data.parent,\n                    options: this._data.parent.options\n                        .filter((i) => i.id !== new_option.id)\n                        .concat([new_option]),\n                }),\n            },\n        });\n    }\n}\n","import { Component, Inject, Output, EventEmitter, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { isAfter, setHours, isBefore } from 'date-fns';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { BaseClass, DialogEvent, HashMap, unique } from '@placeos/common';\nimport { CalendarEvent } from 'libs/events/src/lib/event.class';\nimport { stringToMinutes } from 'libs/events/src/lib/helpers';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\n\nexport interface CateringOrderModalData {\n    order: CateringOrder;\n    menu: Observable<CateringItem[]>;\n    loading: Observable<boolean>;\n    getCateringConfig: (_: string) => Promise<CateringRuleset[]>;\n    selectOptions: (_: CateringOption[]) => Promise<CateringOption[]>;\n}\n\nexport function cateringItemAvailable(\n    item: CateringItem,\n    rules: CateringRuleset[],\n    event: CalendarEvent\n) {\n    let is_available = true;\n    for (const rule of rules) {\n        if (\n            item.category === rule.name ||\n            item.tags.includes(rule.name) ||\n            event.space?.zones.includes(rule.name) ||\n            rule.name === '*'\n        ) {\n            let matches = 0;\n            for (const condition of rule.rules) {\n                const date = new Date(event.date);\n                switch (condition[0]) {\n                    case 'after_hour':\n                        matches += isAfter(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'before_hour':\n                        matches += isBefore(date, setHours(date, condition[1]))\n                            ? 1\n                            : 0;\n                        break;\n                    case 'min_length':\n                        matches +=\n                            event.duration >= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'max_length':\n                        matches +=\n                            event.duration <= stringToMinutes(condition[1])\n                                ? 1\n                                : 0;\n                        break;\n                    case 'visitor_type':\n                        matches +=\n                            event.ext('visitor_type') === condition[1] ? 1 : 0;\n                        break;\n                    default:\n                        matches++;\n                }\n            }\n            is_available = matches >= rule.rules.length;\n        }\n    }\n    return is_available;\n}\n\n// TODO: Split template into 2 children components. Order menu and Order Confirm;\n\n@Component({\n    selector: 'app-catering-order-modal',\n    template: `\n        <div class=\"main min-w-[20rem]\" *ngIf=\"!loading; else load_state\">\n            <ng-container *ngIf=\"!show_order_details; else order_details\">\n                <mat-tab-group>\n                    <ng-container *ngFor=\"let cat of categories\">\n                        <mat-tab\n                            *ngIf=\"(menu_items || {})[cat].length\"\n                            [label]=\"cat\"\n                        >\n                            <div class=\"list\">\n                                <div\n                                    item\n                                    class=\"flex items-center p-2 border-b border-gray-200\"\n                                    *ngFor=\"let item of (menu_items || {})[cat]\"\n                                >\n                                    <div class=\"flex-1 w-1/2\">\n                                        <div class=\"flex-1 w-1/2\">\n                                            {{ item.name }}\n                                        </div>\n                                        <div\n                                            class=\"text-xs no-underline\"\n                                            *ngIf=\"item.options.length\"\n                                        >\n                                            Options Available\n                                        </div>\n                                    </div>\n                                    <div\n                                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                                    >\n                                        {{ item.unit_price / 100 | currency }}\n                                    </div>\n                                    <a-counter\n                                        ngDefaultControl\n                                        [ngModel]=\"item.quantity\"\n                                        (ngModelChange)=\"\n                                            updateItemQuantity(item, $event)\n                                        \"\n                                        *ngIf=\"!item.options.length\"\n                                    ></a-counter>\n                                    <div\n                                        class=\"flex items-center\"\n                                        *ngIf=\"item.options.length\"\n                                    >\n                                        <div\n                                            [matTooltip]=\"\n                                                item.quantity\n                                                    ? 'Items with options must be removed from order confirmation page'\n                                                    : ''\n                                            \"\n                                        >\n                                            <button\n                                                mat-icon-button\n                                                [disabled]=\"true\"\n                                            >\n                                                <app-icon>remove</app-icon>\n                                            </button>\n                                        </div>\n                                        <div\n                                            class=\"count h-12 w-12 flex items-center justify-center\"\n                                        >\n                                            {{ item.quantity }}\n                                        </div>\n                                        <button\n                                            mat-icon-button\n                                            (click)=\"addItem(item)\"\n                                        >\n                                            <app-icon>add</app-icon>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </mat-tab>\n                    </ng-container>\n                </mat-tab-group>\n            </ng-container>\n        </div>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-200\"\n        >\n            <ng-container *ngIf=\"!show_order_details; else order_actions\">\n                <button mat-button class=\"inverse\" mat-dialog-close>\n                    Cancel\n                </button>\n                <button\n                    confirm\n                    mat-button\n                    [disabled]=\"!order.item_count\"\n                    [matBadge]=\"order.item_count\"\n                    [matBadgeHidden]=\"!order.item_count\"\n                    matBadgeColor=\"warn\"\n                    (click)=\"show_order_details = true\"\n                >\n                    Confirm\n                </button>\n            </ng-container>\n            <ng-template #order_actions>\n                <button\n                    mat-button\n                    class=\"inverse\"\n                    (click)=\"show_order_details = false\"\n                >\n                    Back\n                </button>\n                <button save mat-button (click)=\"saveOrder()\">\n                    Save Order\n                </button>\n            </ng-template>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col w-64 p-8 items-center space-y-2\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n        </ng-template>\n        <ng-template #order_details>\n            <header class=\"h-[3.25rem]\">\n                <h3>Confirm Order</h3>\n            </header>\n            <div class=\"list\">\n                <div\n                    item\n                    class=\"flex items-center p-2 border-b border-gray-50\"\n                    *ngFor=\"let item of order.items\"\n                >\n                    <div class=\"flex-1 w-1/2\">\n                        <div class=\"flex-1 w-1/2\">{{ item.name }}</div>\n                        <div\n                            class=\"text-xs underline\"\n                            *ngIf=\"item.options.length\"\n                            [matTooltip]=\"optionsFor(item)\"\n                        >\n                            {{ item.options.length }} option{{\n                                item.options.length === 1 ? '' : 's'\n                            }}\n                            selected\n                        </div>\n                    </div>\n                    <div\n                        class=\"bg-primary text-xs rounded px-4 py-2 mx-2 text-white font-medium\"\n                    >\n                        {{ item.total_cost / 100 | currency }}\n                    </div>\n                    <a-counter\n                        [ngModel]=\"item.quantity\"\n                        (ngModelChange)=\"updateItemQuantity(item, $event)\"\n                    ></a-counter>\n                </div>\n            </div>\n            <!-- <div class=\"charge-code\" [formGroup]=\"form\">\n                <input\n                    formControlName=\"charge_code\"\n                    [class.error]=\"\n                        form.controls.charge_code.touched &&\n                        form.controls.charge_code.invalid\n                    \"\n                    placeholder=\"Charge Code*\"\n                    required\n                />\n            </div> -->\n        </ng-template>\n    `,\n    styles: [\n        `\n            .list {\n                height: 24em;\n                min-width: 32em;\n                max-width: calc(100vw - 1em);\n            }\n\n            footer button {\n                min-width: 12em;\n            }\n\n            input {\n                position: relative;\n                width: 100%;\n                padding: 1em;\n                border: none;\n                border-radius: 0 !important;\n                border-top: 1px solid #ccc;\n                border-bottom: 1px solid #ccc;\n                outline: none;\n                font-size: 1em;\n\n                &:focus {\n                    border: none;\n                    border-top: 2px solid var(--primary);\n                    border-bottom: 2px solid var(--primary);\n                    box-shadow: none;\n                }\n\n                &.error::placeholder {\n                    color: rgba(var(--error), 0.45);\n                }\n            }\n        `,\n    ],\n})\nexport class CateringOrderModalComponent extends BaseClass implements OnInit {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether changes are being saved */\n    public loading = '';\n    /** Current order */\n    public order: CateringOrder;\n    /** Name of the active category */\n    public category: string;\n    /** Whether order details should be shown */\n    public show_order_details: boolean;\n    /** Catering rules for selected space */\n    public rules: readonly CateringRuleset[];\n    /**  */\n    public readonly form: FormGroup;\n    /** List of menu items to show */\n    public menu_items: HashMap<CateringItem[]> = {};\n    /** List of categories for the active menu */\n    public categories: string[] = [];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderModalData\n    ) {\n        super();\n        this.loading = 'Loading menu...';\n    }\n\n    public async ngOnInit() {\n        this.loading = 'Loading menu...';\n        this.order = new CateringOrder(this._data.order);\n        this.rules = await this._data.getCateringConfig(\n            this.order.event?.space?.level?.parent_id\n        );\n        this._data.menu.subscribe((list) => {\n            this.loading = 'Loading menu...';\n            const categories = unique(list.map((item) => item.category));\n            const map = {};\n            for (const cat of categories) {\n                map[cat] = list.filter((item) => {\n                    return (\n                        item.category === cat &&\n                        cateringItemAvailable(\n                            item,\n                            this.rules as any,\n                            this.order.event\n                        )\n                    );\n                });\n            }\n            this.categories = categories;\n            this.menu_items = map;\n            this.updateMenuQuantities();\n            this.timeout('clear_loading', () => (this.loading = ''), 1000);\n        });\n    }\n\n    public addItem(item: CateringItem, choose_options: boolean = true) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id &&\n                itm.options.length ===\n                    itm.options.reduce(\n                        (c, o) =>\n                            c +\n                            (item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        if (choose_options && item.options?.length) {\n            this._data.selectOptions(item.options).then((options) => {\n                const new_item = new CateringItem({ ...item, options });\n                this.addItem(new_item, false);\n            });\n        } else if (old_item) {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items\n                    .filter(\n                        (i) =>\n                            !(\n                                i.id === item.id &&\n                                i.options_string === item.options_string\n                            )\n                    )\n                    .concat([\n                        new CateringItem({\n                            ...item,\n                            quantity: old_item.quantity + 1,\n                        }),\n                    ]),\n            });\n        } else {\n            this.order = new CateringOrder({\n                ...this.order,\n                items: this.order.items.concat([\n                    new CateringItem({ ...item, quantity: 1 }),\n                ]),\n            });\n        }\n        this.updateMenuQuantities();\n    }\n\n    public removeItem(item: CateringItem) {\n        this.order = new CateringOrder({\n            ...this.order,\n            items: this.order.items.filter(\n                (_) =>\n                    _.id !== item.id && _.options_string === item.options_string\n            ),\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateItemQuantity(item: CateringItem, amount: number) {\n        const old_item = this.order.items.find(\n            (itm) =>\n                itm.id === item.id && itm.options_string === item.options_string\n        );\n        let items = [...this.order.items];\n        if (old_item) {\n            items = this.order.items\n                .filter(\n                    (i) =>\n                        !(\n                            i.id === item.id &&\n                            i.options_string === item.options_string\n                        )\n                )\n                .concat([new CateringItem({ ...item, quantity: amount })]);\n        } else {\n            items = this.order.items.concat([\n                new CateringItem({ ...item, quantity: amount }),\n            ]);\n        }\n        items.sort((a, b) => a.name.localeCompare(b.name));\n        this.order = new CateringOrder({\n            ...this.order,\n            items,\n        });\n        this.updateMenuQuantities();\n    }\n\n    public updateMenuQuantities() {\n        for (const cat in this.menu_items) {\n            for (const item of this.menu_items[cat]) {\n                (item as any).quantity = this.order.items.reduce(\n                    (c, i) => (i.id === item.id ? c + i.quantity : c),\n                    0\n                );\n            }\n        }\n    }\n\n    public optionsFor(item: CateringItem) {\n        return item.options.map((i) => i.name).join('\\n');\n    }\n\n    public saveOrder() {\n        this.event.emit({\n            reason: 'done',\n            metadata: { order: this.order },\n        });\n    }\n\n    public confirmOrder() {\n        this.show_order_details = true;\n    }\n}\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, HashMap } from 'libs/common/src/lib/types';\nimport { unique } from 'libs/common/src/lib/general';\n\nimport { CateringOption } from './catering.interfaces';\n\nexport interface CateringOrderOptionsModalData {\n    options: CateringOption[];\n}\n\ninterface CateringOptionGroup {\n    name: string;\n    multiple: boolean;\n    options: CateringOption[];\n}\n\n@Component({\n    selector: 'app-catering-options-modal',\n    template: `\n        <header>\n            <h3>Select options</h3>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"overflow-auto\">\n            <div\n                class=\"pt-1 pb-2 border-b border-gray-200\"\n                *ngFor=\"let group of groups\"\n                [attr.group]=\"group.name\"\n            >\n                <div class=\"font-medium p-2 capitalize\">{{ group.name }}</div>\n                <div class=\"flex flex-col pl-6\">\n                    <ng-container *ngIf=\"!group.multiple; else multi_options\">\n                        <mat-radio-group\n                            class=\"flex flex-col\"\n                            aria-label=\"Select an option\"\n                            ngModel\n                            (ngModelChange)=\"updateGroupOption(group, $event)\"\n                        >\n                            <mat-radio-button class=\"my-1 mx-0\" value=\"\">\n                                <span class=\"font-medium p-2\">None</span>\n                            </mat-radio-button>\n                            <mat-radio-button\n                                class=\"my-1 mx-0\"\n                                *ngFor=\"let opt of group?.options\"\n                                [value]=\"opt.id\"\n                            >\n                                <div class=\"flex items-center justify-center\">\n                                    <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                        {{ opt.name }}\n                                    </div>\n                                    <div\n                                        class=\"opacity-60 text-xs\"\n                                        *ngIf=\"opt.unit_price\"\n                                    >\n                                        +{{ opt.unit_price / 100 | currency }}\n                                    </div>\n                                </div>\n                            </mat-radio-button>\n                        </mat-radio-group>\n                    </ng-container>\n                    <ng-template #multi_options>\n                        <mat-checkbox\n                            *ngFor=\"let opt of group?.options\"\n                            [(ngModel)]=\"option_state[opt.id]\"\n                        >\n                            <div class=\"flex items-center justify-center\">\n                                <div class=\"font-medium p-2 flex-1 w-1/2\">\n                                    {{ opt.name }}\n                                </div>\n                                <div\n                                    class=\"opacity-60 text-xs\"\n                                    *ngIf=\"opt.unit_price\"\n                                >\n                                    +{{ opt.unit_price / 100 | currency }}\n                                </div>\n                            </div>\n                        </mat-checkbox>\n                    </ng-template>\n                </div>\n            </div>\n        </main>\n        <footer class=\"p-2\">\n            <button mat-button class=\"w-32\" (click)=\"saveOptions()\">\n                Save\n            </button>\n        </footer>\n    `,\n    styles: [\n        `\n            main {\n                min-height: 24em;\n                width: 24rem;\n                max-width: calc(100vw - 2rem);\n            }\n        `,\n    ],\n})\nexport class CateringOrderOptionsModalComponent {\n    /** Emitter for events on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of option groups */\n    public readonly groups: CateringOptionGroup[];\n    /** Mapping of options to their active state */\n    public option_state: HashMap<boolean> = {};\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: CateringOrderOptionsModalData\n    ) {\n        const groups = unique(\n            this._data.options.map((i) => i.group || 'Other')\n        );\n        const group_list = [];\n        for (const group of groups) {\n            const options = this._data.options.filter((i) => i.group === group);\n            group_list.push({\n                name: group,\n                multiple: !!options.find((i) => i.multiple),\n                options,\n            });\n        }\n        this.groups = group_list;\n    }\n\n    public updateGroupOption(group: CateringOptionGroup, id: string) {\n        for (const option of group.options) {\n            this.option_state[option.id] = option.id === id;\n        }\n    }\n\n    public saveOptions() {\n        const options = this._data.options.filter(\n            (opt) => this.option_state[opt.id]\n        );\n        this.event.emit({ reason: 'done', metadata: { options } });\n    }\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { csvToJson, DialogEvent, downloadFile } from '@placeos/common';\nimport { CateringItem } from './catering-item.class';\n\n@Component({\n    selector: 'catering-import-menu-modal',\n    template: `\n        <header class=\"h-12 bg-primary flex items-center justify-between px-4\">\n            <h2>Import Catering Menu</h2>\n            <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\">\n            <div\n                class=\"relative flex flex-col items-center justify-center space-y-2 h-[24rem] w-[24rem] border-4 border-gray-200 border-dashed rounded-xl hover:bg-gray-100 m-4 p-4 cursor-pointer\"\n            >\n                <app-icon class=\"text-4xl\">upload</app-icon>\n                <p>Click to select file or Drag and drop files</p>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"handleFileEvent($event)\"\n                />\n            </div>\n            <div class=\"flex items-center justify-center px-4 pb-4\">\n                <button\n                    mat-button\n                    class=\"clear underline w-48\"\n                    (click)=\"downloadTemplate()\"\n                >\n                    Download Template\n                </button>\n            </div>\n        </main>\n        <ng-template #load_state>\n            <main\n                class=\"flex flex-col items-center justify-center space-y-2 p-8 h-[24rem] w-[24rem]\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringImportMenuModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public loading: string;\n\n    /** Upload the image to the cloud */\n    public handleFileEvent(event: DragEvent) {\n        this.loading = 'Processing menu data...';\n        const element: HTMLInputElement = event.target as any;\n        if (!element?.files) return (this.loading = '');\n        const files: FileList = element.files;\n        if (!files.length) return (this.loading = '');\n        const file = files[0];\n        const fileReader = new FileReader();\n        fileReader.addEventListener('loadend', (e: any) => {\n            const contents = e.target.result;\n            const data = csvToJson(contents);\n            this.loading = '';\n            this.event.emit({\n                reason: 'done',\n                metadata: data\n                    .filter((_) => (_.type || '').toLowerCase() === 'item')\n                    .map(\n                        (i) =>\n                            new CateringItem({\n                                ...i,\n                                options: data\n                                    .filter(\n                                        (_) =>\n                                            (_.type || '').toLowerCase() ===\n                                                'option' && _.tags === i.id\n                                    )\n                                    .map((_) => ({\n                                        id: _.id,\n                                        name: _.name,\n                                        group: _.category,\n                                        multiple: _.multiple,\n                                        unit_price: _.unit_price,\n                                    })),\n                            })\n                    ),\n            });\n        });\n        fileReader.readAsText(file);\n    }\n\n    public downloadTemplate() {\n        const template = `ID,Type,Name,Unit Price,Category,Description,Tags,Multiple\nitem-1,item,Coffee,200,Drink,Wake Up,,\noption-1,option,1 Sugar,20,Sugars,,item-1,false`;\n        downloadFile('import-menu-template.csv', template);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { updateMetadata, showMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    unique,\n} from '@placeos/common';\nimport { Building, OrganisationService } from '@placeos/organisation';\n\nimport {\n    CateringItemModalComponent,\n    CateringItemModalData,\n} from './catering-item-modal.component';\nimport {\n    CateringItemOptionModalComponent,\n    CateringItemOptionModalData,\n} from './catering-option-modal.component';\nimport {\n    CateringConfigModalComponent,\n    CateringConfigModalData,\n} from './catering-config-modal.component';\nimport { CateringItem } from './catering-item.class';\nimport { CateringOrder } from './catering-order.class';\nimport {\n    CateringOrderModalComponent,\n    CateringOrderModalData,\n} from './catering-order-modal.component';\nimport { CateringOption, CateringRuleset } from './catering.interfaces';\nimport {\n    CateringOrderOptionsModalComponent,\n    CateringOrderOptionsModalData,\n} from './catering-order-options-modal.component';\nimport { CateringImportMenuModalComponent } from './catering-import-menu-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringStateService extends BaseClass {\n    /** Active menu */\n    private _menu = new BehaviorSubject<CateringItem[]>([]);\n    /** Whether the menu for the active building is loading */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Currency code for the active building */\n    private _currency = new BehaviorSubject<string>('USD');\n    /** Observable for the active menu */\n    public readonly menu = this._menu.asObservable();\n    /** Observable for whether the menu for the active building is loadingg */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for the currency code of the active building */\n    public readonly currency = this._currency.asObservable();\n\n    public get categories() {\n        const menu = this._menu.getValue();\n        return unique(menu.map((i) => i.category));\n    }\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n        this.subscription(\n            'building',\n            this._org.active_building.subscribe(async (bld: Building) => {\n                if (bld) {\n                    const menu = (await this.getCateringForZone(bld.id)).map(\n                        (i) => new CateringItem(i)\n                    );\n                    this._currency.next(bld.currency || 'USD');\n                    this._menu.next(menu);\n                }\n            })\n        );\n    }\n\n    /**\n     * Create/Edit catering order\n     * @param order Order to manipulate\n     */\n    public async manageCateringOrder(order: CateringOrder) {\n        const ref = this._dialog.open<\n            CateringOrderModalComponent,\n            CateringOrderModalData\n        >(CateringOrderModalComponent, {\n            data: {\n                order,\n                menu: this.menu,\n                loading: this.loading,\n                getCateringConfig: (_) => this.getCateringConfig(_),\n                selectOptions: (_) => this.selectOptions(_),\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        ref.close();\n        return details?.metadata?.order || order;\n    }\n\n    public async addItem(item: CateringItem = new CateringItem()) {\n        const ref = this._dialog.open<\n            CateringItemModalComponent,\n            CateringItemModalData\n        >(CateringItemModalComponent, {\n            data: {\n                item,\n                categories: this.categories,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async addOption(\n        item: CateringItem,\n        option: CateringOption = {} as any\n    ) {\n        const types = unique(item.options.map((i) => i.group));\n        const ref = this._dialog.open<\n            CateringItemOptionModalComponent,\n            CateringItemOptionModalData\n        >(CateringItemOptionModalComponent, {\n            data: {\n                parent: item,\n                option,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        const menu = this._menu.getValue();\n        const index = menu.findIndex((itm) => itm.id === item.id);\n        if (index >= 0) {\n            menu.splice(index, 1, details.metadata.item);\n        } else {\n            menu.push(details.metadata.item);\n        }\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                ref.close();\n            },\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async selectOptions(options: CateringOption[]) {\n        const ref = this._dialog.open<\n            CateringOrderOptionsModalComponent,\n            CateringOrderOptionsModalData\n        >(CateringOrderOptionsModalComponent, {\n            data: {\n                options,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return [];\n        ref.close();\n        return details.metadata.options;\n    }\n\n    public async deleteItem(item: CateringItem) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item',\n                content: `Are you sure you wish to remove the catering item ${item.name} from the menu?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item...');\n        const menu = this._menu.getValue().filter((itm) => item.id !== itm.id);\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async deleteOption(item: CateringItem, option: CateringOption) {\n        const details = await openConfirmModal(\n            {\n                title: 'Delete Catering Item Option',\n                content: `Are you sure you wish to remove the catering option \"${option.name}\" from \"${item.name}\"?`,\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (details.reason !== 'done') return;\n        details.loading('Removing catering item option...');\n        const menu = this._menu.getValue();\n        menu.splice(\n            menu.findIndex((itm) => itm.id === item.id),\n            1,\n            new CateringItem({\n                ...item,\n                options: item.options.filter((opt) => opt.id !== option.id),\n            })\n        );\n        this.updateMenu(this._org.building.id, menu).then(\n            () => {\n                this._menu.next([...menu]);\n                details.close();\n            },\n            () => details.loading('')\n        );\n    }\n\n    public async editConfig() {\n        const config = await this.getCateringConfig(this._org.building.id);\n        const menu = this._menu.getValue();\n        const types = unique(flatten(menu.map((i) => [i.category, ...i.tags])));\n        const ref = this._dialog.open<\n            CateringConfigModalComponent,\n            CateringConfigModalData\n        >(CateringConfigModalComponent, {\n            data: {\n                config,\n                types,\n            },\n        });\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        this.updateConfig(this._org.building.id, details.metadata).then(\n            () => ref.close(),\n            () => (ref.componentInstance.loading = false)\n        );\n    }\n\n    public async importMenu() {\n        const ref = this._dialog.open(CateringImportMenuModalComponent);\n        const details = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (details?.reason !== 'done') return;\n        ref.componentInstance.loading = 'Updating menu...';\n        const menu = this._menu.getValue();\n        const bld = this._org.building;\n        const updated_menu = unique(details.metadata.concat(menu), 'id');\n        await this.updateMenu(bld.id, updated_menu).catch((_) => {\n            notifyError('Error importing catering menu');\n            ref.close();\n            throw _;\n        });\n        notifySuccess(\n            `Successfully imported catering menu. ${details.metadata.length} item(s) added.`\n        );\n        ref.close();\n    }\n\n    private updateMenu(zone_id: string, menu: CateringItem[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering',\n            details: menu,\n            description: `Catering menu for ${zone_id}`,\n        }).toPromise();\n    }\n\n    private async getCateringForZone(zone_id: string): Promise<CateringItem[]> {\n        const menu = (\n            await showMetadata(zone_id, 'catering').toPromise()\n        ).details;\n        return menu instanceof Array ? menu : [];\n    }\n\n    public async getCateringConfig(\n        zone_id: string = this._org.building.id\n    ): Promise<CateringRuleset[]> {\n        const rules = (\n            await showMetadata(zone_id, 'catering_config').toPromise()\n        ).details;\n        return rules instanceof Array ? (rules as any) : [];\n    }\n\n    private updateConfig(zone_id: string, config: CateringRuleset[]) {\n        return updateMetadata(zone_id, {\n            id: zone_id,\n            name: 'catering_config',\n            details: config,\n            description: `Catering menu config for ${zone_id}`,\n        }).toPromise();\n    }\n\n    public addItemToOrder(order: CateringOrder, new_item: CateringItem) {\n        let items = order.items;\n        const match = items.find(\n            (item) =>\n                item.id === new_item.id &&\n                new_item.options?.length ===\n                    item.options?.reduce(\n                        (c, o) =>\n                            c +\n                            (new_item.options.find((opt) => o.id === opt.id)\n                                ? 1\n                                : 0),\n                        0\n                    )\n        );\n        match\n            ? ((match as any).quantity += 1)\n            : (items = items.concat([\n                  new CateringItem({ ...new_item, quantity: 1 }),\n              ]));\n        const new_order = new CateringOrder({\n            ...order,\n            items,\n            event: null,\n        });\n        return new_order;\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CateringOrder, CateringStateService } from '@placeos/catering';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'detailed-book-space-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div\n                    class=\"flex flex-col sm:flex-row space-x-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                >\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>Date</label>\n                        <a-date-field formControlName=\"date\">\n                            Date and time must be in the future\n                        </a-date-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>Start Time</label>\n                        <a-time-field\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1 w-full sm:w-1/3\">\n                        <label>End Time</label>\n                        <a-duration-field\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"max_duration\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n            </section>\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div\n                    class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                    *ngIf=\"can_book_for_others\"\n                >\n                    <label>Host</label>\n                    <a-user-search-field\n                        formControlName=\"organiser\"\n                    ></a-user-search-field>\n                </div>\n                <div\n                    class=\"flex flex-col w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n                >\n                    <label>Attendees</label>\n                    <a-user-list-field\n                        [hideActions]=\"hide_actions\"\n                        formControlName=\"attendees\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"mb-4 border-b border-gray-300\">\n                <div class=\"w-[640px] max-w-[calc(100%-2rem)] mx-auto\">\n                    <div class=\"flex flex-col\">\n                        <label>Meeting Subject <span>*</span></label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"title\"\n                                placeholder=\"Meeting title\"\n                            />\n                            <mat-error>Meeting Subject is required</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col resize-y\">\n                        <label>Notes</label>\n                        <mat-form-field appearance=\"outline\">\n                            <textarea\n                                matInput\n                                formControlName=\"body\"\n                                placeholder=\"Add meeting notes here...\"\n                            ></textarea>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col mb-4\" *ngIf=\"has_catering\">\n                        <label>Catering</label>\n                        <an-action-field (onAction)=\"editCatering()\">\n                            <div\n                                class=\"opacity-40\"\n                                *ngIf=\"!form?.value.catering?.length\"\n                            >\n                                Add catering\n                            </div>\n                            <div\n                                class=\"flex items-center\"\n                                *ngIf=\"form?.value.catering?.length\"\n                            >\n                                <div class=\"flex-1 w-1/2\">\n                                    {{ form?.value.catering[0].item_count }}\n                                    item(s)\n                                </div>\n                                <div class=\"text-xs opacity-60 px-4\">\n                                    {{\n                                        form?.value.catering[0].total_cost / 100\n                                            | currency\n                                    }}\n                                </div>\n                            </div>\n                        </an-action-field>\n                    </div>\n                </div>\n            </section>\n        </form>\n    `,\n    styles: [``],\n})\nexport class DetailBookSpaceFormComponent {\n    @Input() public form: FormGroup;\n\n    public get has_catering() {\n        return !!this._settings.get('app.events.has_catering');\n    }\n\n    public get hide_actions() {\n        return !!this._settings.get('app.events.hide_user_actions');\n    }\n\n    public get can_book_for_others() {\n        return this._settings.get('app.events.can_book_for_others');\n    }\n\n    public get max_duration() {\n        return this._settings.get('app.events.max_duration') || 4 * 60;\n    }\n\n    public readonly editCatering = async () =>\n        this.form.patchValue({\n            catering: [\n                await this._catering.manageCateringOrder(\n                    (this.form.value.catering\n                        ? this.form.value.catering[0]\n                        : null) || new CateringOrder()\n                ),\n            ],\n        });\n\n    constructor(\n        private _catering: CateringStateService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { EventFormService } from '@placeos/events';\nimport { addDays, addMinutes, roundToNearestMinutes, setHours } from 'date-fns';\n\n@Component({\n    selector: 'space-flow-form',\n    template: `\n        <section form class=\"flex-1 min-h-[50%]\">\n            <h2\n                class=\"text-xl uppercase font-medium mb-2 mt-4 w-[640px] max-w-[calc(100%-2rem)] mx-auto\"\n            >\n                {{ is_edit ? 'Edit' : 'Detailed' }} Space Booking\n            </h2>\n            <detailed-book-space-form [form]=\"form\"></detailed-book-space-form>\n            <div\n                class=\"flex flex-col sm:flex-row items-center justify-center space-x-0 space-y-2 sm:space-y-0 sm:space-x-2 w-[640px] max-w-[calc(100%-2rem)] mx-auto mb-4\"\n            >\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem] inverse\"\n                    mat-button\n                    clear\n                    (click)=\"clearForm()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">clear</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Cancel Edit' : 'Clear Form'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    mat-button\n                    find-space\n                    (click)=\"findSpace()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">search</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Update Spaces' : 'Find Space'\n                        }}</span>\n                    </div>\n                </button>\n                <button\n                    class=\"sm:flex-1 w-full sm:w-auto h-[2.75rem]\"\n                    mat-button\n                    standalone\n                    (click)=\"confirmBooking()\"\n                >\n                    <div class=\"flex items-center justify-center\">\n                        <app-icon class=\"text-xl\">event_available</app-icon>\n                        <span class=\"ml-2 mx-4\">{{\n                            is_edit ? 'Confirm changes' : 'Book without Space'\n                        }}</span>\n                    </div>\n                </button>\n            </div>\n        </section>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n                display: flex;\n                flex-direction: column;\n                overflow: auto;\n            }\n\n            [quick] {\n                background-color: #007ac8;\n            }\n        `,\n    ],\n})\nexport class SpaceFlowFormComponent {\n    public time = 0;\n    public capacity = 0;\n\n    public readonly quick_times = [\n        { name: 'Now', value: 0 },\n        { name: 'Later Today', value: 120 },\n        {\n            name: 'Tomorrow',\n            value: setHours(addDays(new Date(), 1), 9).valueOf(),\n        },\n    ];\n\n    public readonly quick_capacities = [\n        { name: 'Any Capacity', value: 0 },\n        { name: 'Small (1 - 4)', value: 1 },\n        { name: 'Medium (5 - 12)', value: 5 },\n        { name: 'Large (13 - 32)', value: 13 },\n        { name: 'Huge (32+)', value: 33 },\n    ];\n\n    public get is_edit() {\n        return !!this.form?.get('id')?.value;\n    }\n\n    public get form() {\n        return this._state.form;\n    }\n\n    public readonly clearForm = () => {\n        this.time = this.capacity = 0;\n        this._state.clearForm();\n    };\n\n    constructor(private _state: EventFormService, private _router: Router) {}\n\n    public quickBook() {\n        this.form.patchValue({\n            date: (this.time < 24 * 60\n                ? addMinutes(\n                      roundToNearestMinutes(new Date(), { nearestTo: 5 }),\n                      this.time\n                  )\n                : setHours(addDays(new Date(), 1), 8)\n            ).valueOf(),\n            title: 'Ad-hoc Meeting',\n        });\n        this._state.setOptions({ capacity: this.capacity });\n        this._router.navigate(['/book', 'spaces', 'find']);\n    }\n\n    public findSpace() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'spaces', 'find']);\n    }\n\n    public confirmBooking() {\n        this.form.markAllAsTouched();\n        if (!this.form.valid) return;\n        this._router.navigate(['/book', 'spaces', 'confirm']);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { EventFormService } from '@placeos/events';\n\n@Component({\n    selector: 'placeos-book-space-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'find'\">\n                    <space-flow-find></space-flow-find>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <space-flow-confirm></space-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        [calendar]=\"last_success?.host\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <space-flow-form></space-flow-form>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookSpaceFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: EventFormService,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n    selector: 'parking-flow-confirm',\n    template: ``,\n    styles: [``]\n})\nexport class ParkingFlowConfirmComponent {\n    \n}","import { Component, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass } from '@placeos/common';\nimport { MAP_FEATURE_DATA } from '@placeos/components';\nimport { ExploreParkingService, ExploreStateService } from '@placeos/explore';\nimport { OrganisationService } from '@placeos/organisation';\nimport { addDays, format, startOfDay } from 'date-fns';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'space-ping',\n    template: `\n        <div\n            class=\"absolute inset-0 pointer-events-auto\"\n            [style.transform]=\"'scale(' + zoom * ratio + ')'\"\n        >\n            <div\n                class=\"absolute inset-0 animate-ping border-4 border-green-600\"\n            ></div>\n        </div>\n    `,\n})\nclass SpacePingComponent extends BaseClass {\n    public zoom = 1;\n    public ratio = 1;\n    constructor(@Inject(MAP_FEATURE_DATA) private _details: any) {\n        super();\n        this.subscription(\n            'zoom',\n            this._details.zoom$?.subscribe((_) => (this.zoom = _))\n        );\n        this.subscription(\n            'ratio',\n            this._details.ratio$?.subscribe((_) => (this.ratio = _))\n        );\n    }\n}\n\n@Component({\n    selector: 'parking-flow-map',\n    template: `\n        <div\n            class=\"w-full h-full flex flex-col items-center relative\"\n            *ngIf=\"!(loading | async); else load_state\"\n        >\n            <div\n                class=\"p-4 flex items-center justify-center bg-secondary w-full shadow z-10 text-white space-x-2\"\n            >\n                <button\n                    matRipple\n                    *ngFor=\"let date of dates\"\n                    [class.selected]=\"date.id === (options | async)?.date\"\n                    class=\"border border-white flex flex-col items-center justify-center h-24 w-28 rounded\"\n                    (click)=\"setDate(date.id)\"\n                >\n                    <p class=\"mb-2 font-medium\">{{ date.name }}</p>\n                    <p class=\"text-2xl\">\n                        {{ ((counts | async) || {})[date.id] || '0' }}\n                    </p>\n                    <p class=\"text-sm\">Available</p>\n                </button>\n            </div>\n            <div class=\"flex w-full h-1/2 flex-1 z-0\">\n                <div\n                    class=\"p-2 sm:w-[18rem] w-full h-full bg-gray-50 shadow z-10 overflow-auto space-y-2\"\n                >\n                    <div\n                        class=\"bg-white sticky top-0 w-full z-10\"\n                        *ngIf=\"(levels | async)?.length > 1\"\n                    >\n                        <mat-form-field\n                            appearance=\"outline\"\n                            class=\"w-full h-[3.25rem]\"\n                        >\n                            <mat-select\n                                [ngModel]=\"level | async\"\n                                (ngModelChange)=\"setLevel($event?.id)\"\n                            >\n                                <mat-option\n                                    *ngFor=\"let lvl of levels | async\"\n                                    [value]=\"lvl\"\n                                >\n                                    {{ lvl.display_name || lvl.name }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                    <p>{{ (available | async)?.length }} space(s) available</p>\n                    <button\n                        matRipple\n                        class=\"flex items-center justify-between bg-white rounded-lg border border-gray-200 p-2 w-full\"\n                        [class.active]=\"(active_space | async)?.id === space.id\"\n                        (click)=\"setActive(space)\"\n                        *ngFor=\"let space of available | async\"\n                    >\n                        <div class=\"text-lg\">Bay No. {{ space.name }}</div>\n                        <div class=\"opacity-60\">\n                            {{ levelName(space.zone_id) }}\n                        </div>\n                    </button>\n                </div>\n                <div\n                    class=\"bg-gray-200 flex-1 w-1/2 h-full z-0 relative hidden sm:block\"\n                >\n                    <i-map\n                        [src]=\"url | async\"\n                        [zoom]=\"(positions | async)?.zoom\"\n                        [center]=\"(positions | async)?.center\"\n                        [styles]=\"styles | async\"\n                        [features]=\"features | async\"\n                        [actions]=\"actions | async\"\n                        [labels]=\"labels | async\"\n                    ></i-map>\n                    <explore-zoom-controls\n                        class=\"absolute bottom-0 right-0\"\n                    ></explore-zoom-controls>\n                </div>\n                <div\n                    *ngIf=\"active_space | async\"\n                    class=\"absolute left-1/2 bottom-2 -translate-x-1/2 bg-white shadow rounded p-4 flex flex-col space-y-2\"\n                >\n                    <p>\n                        Parking Bay No.\n                        {{ (active_space | async).name }} selected.\n                    </p>\n                    <p class=\"p-2 rounded text-sm max-w-[20rem] text-center text-pending leading-tight\" *ngIf=\"(existing | async)?.length\">\n                        Note that your existing parking space reservation will\n                        be replaced\n                    </p>\n                    <button mat-button (click)=\"reserveSpace()\">\n                        Reserve Space\n                    </button>\n                </div>\n                <div\n                    class=\"absolute inset-0 bg-white/80 flex flex-col items-center justify-center z-50\"\n                    *ngIf=\"!(levels | async)?.length\"\n                >\n                    <p>\n                        Parking is not available for\n                        {{\n                            (building | async)?.display_name ||\n                                (building | async)?.name\n                        }}\n                    </p>\n                </div>\n            </div>\n        </div>\n        <ng-template #load_state>\n            <div\n                class=\"absolute inset-0 bg-white/80 flex flex-col items-center justify-center z-50 space-y-2\"\n                *ngIf=\"!(levels | async)?.length\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Reserving parking space...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            .active {\n                background-color: var(--primary) !important;\n                color: #fff;\n            }\n\n            .selected {\n                background-color: #fff !important;\n                color: #000d;\n            }\n        `,\n    ],\n    providers: [ExploreParkingService],\n})\nexport class ParkingFlowMapComponent extends BaseClass {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the labels map */\n    public readonly labels = this._state.map_labels;\n\n    public readonly building = this._org.active_building;\n\n    public readonly level = this._state.level;\n\n    public readonly levels = this._parking.levels;\n\n    public readonly available = this._parking.available_spaces;\n\n    public readonly counts = this._parking.week_availablility;\n\n    public readonly options = this._parking.options;\n\n    public readonly existing = this._parking.existing_event;\n\n    public readonly loading = this._booking.loading;\n\n    public readonly active_space = new BehaviorSubject(null);\n\n    public readonly dates = new Array(7).fill(0).map((_, idx) => ({\n        id: startOfDay(addDays(Date.now(), idx)).valueOf(),\n        name: format(addDays(Date.now(), idx), 'EEE, dd MMM'),\n        available: 0,\n    }));\n\n    public readonly setDate = (d) => this._parking.setOptions({ date: d });\n\n    public levelName(zone_id) {\n        const lvl = this._org.levelWithID([zone_id]);\n        return lvl?.display_name || lvl?.name || '';\n    }\n\n    public setActive(space) {\n        if (space === this.active_space.getValue())\n            this.active_space.next(null);\n        else {\n            this._booking.form.patchValue({\n                asset_id: space.id,\n                asset_name: space.name,\n            });\n            this.active_space.next(space);\n        }\n    }\n\n    public readonly setLevel = (l) => this._state.setLevel(l);\n    public readonly reserveSpace = async () => {\n        const events = await this._parking.existing_event\n            .pipe(take(1))\n            .toPromise();\n        if (events.length) this._booking.form.patchValue({ id: events[0].id }); // Prevent booking duplicate parking spaces\n        await this._booking.postForm();\n        this._router.navigate(['book', 'parking', 'success']);\n    };\n\n    constructor(\n        private _state: ExploreStateService,\n        private _parking: ExploreParkingService,\n        private _org: OrganisationService,\n        private _booking: BookingFormService,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this._state.reset();\n        this.subscription(\n            'levels',\n            this._parking.levels.subscribe((levels) => {\n                this._state.setLevel(levels[0]?.id);\n            })\n        );\n        this.subscription(\n            'spaces',\n            this._parking.available_spaces.subscribe((spaces) => {\n                this._state.setActions(\n                    'parking_spaces',\n                    (spaces || []).map((_) => ({\n                        id: _.map_id,\n                        action: 'click',\n                        callback: () => this.setActive(_),\n                    }))\n                );\n            })\n        );\n        this.subscription(\n            'active_space',\n            this.active_space.subscribe((space) => {\n                if (!space) return this._state.setFeatures('parking_space', []);\n                this._state.setFeatures('parking_space', [\n                    {\n                        location: space.map_id,\n                        content: SpacePingComponent,\n                        full_size: true,\n                        z_index: 0,\n                    },\n                ]);\n            })\n        );\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BookingFormService } from '@placeos/bookings';\nimport { BaseClass } from '@placeos/common';\n\n@Component({\n    selector: 'placeos-book-parking-flow',\n    template: `\n        <div class=\"bg-white h-full w-full\">\n            <ng-container [ngSwitch]=\"view\">\n                <ng-container *ngSwitchCase=\"'confirm'\">\n                    <parking-flow-confirm></parking-flow-confirm>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"'success'\">\n                    <flow-success\n                        [calendar]=\"last_success?.host\"\n                        route=\"parking\"\n                        type=\"parking\"\n                    ></flow-success>\n                </ng-container>\n                <ng-container *ngSwitchDefault>\n                    <parking-flow-map></parking-flow-map>\n                </ng-container>\n            </ng-container>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class BookParkingFlowComponent extends BaseClass implements OnInit {\n    public get view() {\n        return this._state.view;\n    }\n    public get last_success() {\n        return this._state.last_success;\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'parking' });\n        this._state.loadForm();\n        if (!this._state.form) this._state.newForm();\n        this.subscription(\n            'route.params',\n            this._route.paramMap.subscribe((param) => {\n                if (param.has('step'))\n                    this._state.setView(param.get('step') as any);\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((param) => {\n                if (param.has('success'))\n                    this._state.setView(param.get('success') as any);\n            })\n        );\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { SharedExploreModule } from '@placeos/explore';\n\nimport { BookComponent } from './book.component';\nimport { BookCodeFlowComponent } from './code-flow.component';\nimport { BookDeskFlowComponent } from './desk-flow.component';\nimport { DeskFlowConfirmComponent } from './desk-flow/confirm.component';\nimport { DeskFlowFormComponent } from './desk-flow/form.component';\nimport { DeskFlowDetailedFormComponent } from './desk-flow/detailed-form.component';\nimport { DeskFlowMapComponent } from './desk-flow/map.component';\nimport { FlowSuccessComponent } from './flow-success.component';\nimport { BookSpaceFlowComponent } from './space-flow.component';\nimport { SpaceFlowConfirmComponent } from './space-flow/confirm.component';\nimport { DetailBookSpaceFormComponent } from './space-flow/detailed-form.component';\nimport { SpaceFlowFindItemComponent } from './space-flow/find-item.component';\nimport { SpaceFlowFindComponent } from './space-flow/find.component';\nimport { SpaceFlowFormComponent } from './space-flow/form.component';\nimport { SharedComponentModule } from '../components/shared.module';\nimport { BookParkingFlowComponent } from './parking-flow.component';\nimport { ParkingFlowMapComponent } from './parking-flow/parking-flow-map.component';\nimport { ParkingFlowConfirmComponent } from './parking-flow/parking-flow-confirm.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: BookComponent,\n        children: [\n            { path: 'code', component: BookCodeFlowComponent },\n            { path: 'desks', redirectTo: 'desks/form' },\n            { path: 'desks/:step', component: BookDeskFlowComponent },\n            { path: 'spaces', redirectTo: 'spaces/form' },\n            { path: 'spaces/:step', component: BookSpaceFlowComponent },\n            { path: 'parking', redirectTo: 'parking/form' },\n            { path: 'parking/:step', component: BookParkingFlowComponent },\n            { path: '*', redirectTo: 'spaces/form' },\n        ],\n    },\n    { path: '*', redirectTo: 'spaces/form' },\n];\n\n@NgModule({\n    declarations: [\n        BookComponent,\n        BookSpaceFlowComponent,\n        SpaceFlowFormComponent,\n        SpaceFlowFindComponent,\n        SpaceFlowFindItemComponent,\n        SpaceFlowConfirmComponent,\n        DetailBookSpaceFormComponent,\n        BookDeskFlowComponent,\n        DeskFlowFormComponent,\n        DeskFlowDetailedFormComponent,\n        DeskFlowMapComponent,\n        DeskFlowConfirmComponent,\n        BookCodeFlowComponent,\n        BookParkingFlowComponent,\n        ParkingFlowMapComponent,\n        ParkingFlowConfirmComponent,\n        FlowSuccessComponent,\n    ],\n    imports: [\n        CommonModule,\n        SharedComponentModule,\n        FormsModule,\n        SharedExploreModule,\n        ReactiveFormsModule,\n        MatButtonToggleModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class BookModule {}\n"],"sourceRoot":"webpack:///","file":"apps_workplace_src_app_book_book_module_ts.js"}