{"version":3,"sources":["/home/runner/work/user-interfaces/user-interfaces/node_modules/date-fns/esm/startOfMonth/index.js","/home/runner/work/user-interfaces/user-interfaces/node_modules/date-fns/esm/endOfMonth/index.js","./src/app/day-view/event-form.component.ts","./src/app/day-view/booking-modal.component.ts","./src/app/day-view/events-state.service.ts","/home/runner/work/user-interfaces/user-interfaces/node_modules/date-fns/esm/endOfWeek/index.js","/home/runner/work/user-interfaces/user-interfaces/node_modules/date-fns/esm/startOfWeek/index.js"],"names":["startOfMonth","dirtyDate","requiredArgs","arguments","date","toDate","setDate","setHours","endOfMonth","month","getMonth","setFullYear","getFullYear","EventFormComponent","_dialog","this","form","controls","resources","value","map","i","display_name","name","join","ref","open","data","spaces","duration","success","Promise","race","componentInstance","event","pipe","first","_","reason","toPromise","afterClosed","setValue","metadata","close","BookingModalComponent","_data","_calendar","_event","_dialog_ref","host","markAllAsTouched","organiser","email","valid","length","list","key","invalid","push","loading","availability","period_start","Math","floor","Date","valueOf","period_end","system_ids","space","id","catch","system","booking","save","toJSON","calendar","emit","EventsStateService","_events","_spaces","super","_poll","BehaviorSubject","_long_poll","_bookings","_filters","_ui_options","_date","_zones","_loading","_state","combineLatest","bookings","asObservable","zones","ui_options","filtered","start","startOfDay","getValue","end","endOfDay","filterEvents","filtered_week","startOfWeek","endOfWeek","filtered_month","search","filter","debounceTime","switchMap","fzones","of","next","query","zone_ids","catchError","search_long","props","type","subscribe","events","processBookings","details","options","old_options","delay","interval","clearInterval","replace","title","content","format","location","icon","class","delete","system_id","remove","new_bookings","concat","bkn","period","forEach","find","s","from","to","filters","intersects","in_zone","r","z","includes","has_space","space_emails","in_zones","zone","show","hide_type","has_visitors","status","dirtyOptions","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","day","getDay","diff","getDate"],"mappings":"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","file":"default~day-view-day-view-module~facilities-facilities-module.cbd329ec6db613ed068f.js","sourcesContent":["import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * var result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DialogEvent } from '@user-interfaces/common';\nimport {\n    SpaceSelectModalComponent,\n    SpaceSelectModalData,\n} from '@user-interfaces/spaces';\nimport { first, map } from 'rxjs/operators';\n\n@Component({\n    selector: 'event-form',\n    template: `\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"flex flex-col\">\n                <label for=\"title\">Title<span>*</span>:</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"title\"\n                        formControlName=\"title\"\n                        placeholder=\"Meeting Title\"\n                    />\n                    <mat-error>A valid title is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"flex flex-col\">\n                <label for=\"date\">Date<span>*</span>:</label>\n                <a-date-field name=\"date\" formControlName=\"date\"></a-date-field>\n            </div>\n            <div class=\"flex space-x-2\">\n                <div class=\"flex flex-col flex-1\">\n                    <label for=\"start-time\">Start Time<span>*</span>:</label>\n                    <a-time-field\n                        name=\"start-time\"\n                        formControlName=\"date\"\n                        style=\"margin-top: .3rem\"\n                    ></a-time-field>\n                </div>\n                <div class=\"flex flex-col flex-1\">\n                    <label for=\"duration\">Duration<span>*</span>:</label>\n                    <a-duration-field\n                        name=\"duration\"\n                        [time]=\"form.controls.date.value\"\n                        formControlName=\"duration\"\n                    ></a-duration-field>\n                </div>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"organiser\">Host<span>*</span>:</label>\n                <a-user-search-field\n                    name=\"organiser\"\n                    formControlName=\"organiser\"\n                ></a-user-search-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"attendees\">Attendees<span>*</span>:</label>\n                <a-user-list-field\n                    name=\"attendees\"\n                    formControlName=\"attendees\"\n                ></a-user-list-field>\n            </div>\n            <div class=\"flex flex-col flex-1\">\n                <label for=\"space\">Space<span>*</span>:</label>\n                <an-action-field\n                    name=\"space\"\n                    [placeholder]=\"spaces\"\n                    (onAction)=\"selectSpace()\"\n                ></an-action-field>\n            </div>\n        </form>\n    `,\n    styles: [``],\n})\nexport class EventFormComponent {\n    @Input() public form: FormGroup;\n\n    public get spaces() {\n        return (\n            this.form.controls.resources?.value\n                ?.map((i) => i.display_name || i.name)\n                .join(', ') || 'Select a space'\n        );\n    }\n\n    constructor(private _dialog: MatDialog) {}\n\n    public async selectSpace() {\n        const ref = this._dialog.open<\n            SpaceSelectModalComponent,\n            SpaceSelectModalData\n        >(SpaceSelectModalComponent, {\n            data: {\n                spaces: this.form.controls.resources.value,\n                date: this.form.controls.date.value,\n                duration: this.form.controls.duration.value,\n            },\n        });\n        const success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (success) {\n            this.form.controls.resources.setValue(success.metadata);\n        }\n        ref.close();\n    }\n}\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { CalendarService } from '@user-interfaces/calendar';\nimport {\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@user-interfaces/common';\nimport {\n    CalendarEvent,\n    EventsService,\n    generateEventForm,\n} from '@user-interfaces/events';\n\nexport interface BookingModalData {\n    event?: CalendarEvent;\n}\n\n@Component({\n    selector: 'booking-modal',\n    template: `\n        <header>\n            <h2>New Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon className=\"material-icons\">close</app-icon>\n            </button>\n        </header>\n        <main *ngIf=\"!loading; else load_state\" class=\"overflow-auto p-4\">\n            <event-form [form]=\"form\"></event-form>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex justify-center items-center p-2 border-t border-gray-200\"\n        >\n            <button mat-button (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main class=\"h-64 flex flex-col items-center justify-center\">\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 32rem;\n                max-height: 65vh;\n                max-width: calc(100vw - 4rem);\n            }\n        `,\n    ],\n})\nexport class BookingModalComponent implements OnInit {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public form: FormGroup;\n    public loading: string;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: BookingModalData,\n        private _calendar: CalendarService,\n        private _event: EventsService,\n        private _dialog_ref: MatDialogRef<BookingModalComponent>\n    ) {}\n\n    public ngOnInit() {\n        this.form = generateEventForm(\n            new CalendarEvent(this._data.event || {})\n        );\n        this.form.controls.host.setValue(null);\n    }\n\n    public async save() {\n        this.form.markAllAsTouched();\n        if (this.form.controls.organiser.value && !this.form.controls.host.value) {\n            this.form.controls.host.setValue(this.form.controls.organiser.value.email);\n        }\n        if (!this.form.valid || !this.form.value.resources?.length) {\n            const list = [];\n            for (const key in this.form.controls) {\n                if (this.form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return notifyError(\n                `Some form fields are not valid: [${list.join(', ')}]`\n            );\n        }\n        const value = this.form.value;\n        this.loading = 'Check space availability...';\n        const spaces = await this._calendar\n            .availability({\n                period_start: Math.floor(new Date(value.date).valueOf() / 1000),\n                period_end:\n                    Math.floor(new Date(value.date).valueOf() / 1000) +\n                    value.duration * 60,\n                system_ids: value.resources.map((space) => space.id).join(','),\n            })\n            .catch((_) => []);\n        if (spaces.length < value.resources.length) {\n            this.loading = '';\n            return notifyError(\n                'Some of the selected spaces are not available for the selected time and duration'\n            );\n        }\n        this.loading = 'Creating calendar event...';\n        value.system = value.resources[0];\n        const booking = await this._event\n            .save(new CalendarEvent(value).toJSON(), { calendar: value.calendar })\n            .catch((_) => null);\n        this.loading = '';\n        if (!booking) {\n            return notifyError('Error creating booking.');\n        }\n        this.event.emit({ reason: 'done', metadata: booking });\n        notifySuccess('Successfully created booking.');\n        this._dialog_ref.close();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    startOfDay,\n    endOfDay,\n    startOfWeek,\n    endOfWeek,\n    startOfMonth,\n    endOfMonth,\n    format,\n} from 'date-fns';\nimport { BehaviorSubject, of, combineLatest } from 'rxjs';\nimport {\n    map,\n    switchMap,\n    debounceTime,\n    catchError,\n    filter,\n    first,\n} from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    flatten,\n    timePeriodsIntersect,\n    unique,\n} from '@user-interfaces/common';\nimport {\n    CalendarEvent,\n    EventsService,\n    replaceBookings,\n} from '@user-interfaces/events';\nimport { SpacesService } from '@user-interfaces/spaces';\nimport { BookingModalComponent } from './booking-modal.component';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\n\nexport type BookingType =\n    | 'internal'\n    | 'client'\n    | 'external'\n    | 'setup'\n    | 'training'\n    | 'interview'\n    | 'declined';\n\nexport interface BookingFilters {\n    /** List of zone ids to get bookings for */\n    zone_ids?: string[];\n    space_emails?: string[];\n    hide_type?: BookingType[];\n}\n\nexport interface BookingUIOptions {\n    /** Whether to show setup and breakdown times for events */\n    show_overflow?: boolean;\n    /** Whether to show cleaning status of the events */\n    show_cleaning?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EventsStateService extends BaseClass {\n    /** List of bookings */\n    private _poll = new BehaviorSubject<boolean>(false);\n    /** List of bookings */\n    private _long_poll = new BehaviorSubject<'month' | 'week' | ''>('');\n    /** List of bookings */\n    private _bookings = new BehaviorSubject<CalendarEvent[]>([]);\n    /** Filter details for bookings */\n    private _filters = new BehaviorSubject<BookingFilters>({});\n    /** Filter details for bookings */\n    private _ui_options = new BehaviorSubject<BookingUIOptions>({});\n    /** Currently active date */\n    private _date = new BehaviorSubject<number>(new Date().valueOf());\n    /** Currently displayed zone */\n    private _zones = new BehaviorSubject<string[]>([]);\n    /** Whether booking data is being loaded */\n    private _loading = new BehaviorSubject<boolean>(false);\n    /** Observable for filter and booking list changes */\n    private _state = combineLatest(\n        this._bookings,\n        this._filters,\n        this._date,\n        this._zones\n    );\n    /** Event currently being viewed */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n\n    /** Observable for list of bookings */\n    public readonly bookings = this._bookings.asObservable();\n    /** Observable for active date */\n    public readonly date = this._date.asObservable();\n    /** Observable for active zone */\n    public readonly zones = this._zones.asObservable();\n    /** Observable for UI display options */\n    public readonly ui_options = this._ui_options.asObservable();\n    /** Observable for loading state of bookings */\n    public readonly loading = this._loading.asObservable();\n    /** Observable for viewed event */\n    public readonly event = this._event.asObservable();\n    /** Obsevable for filtered list of bookings */\n    public readonly filtered = this._state.pipe(\n        map(() => {\n            const start = startOfDay(new Date(this._date.getValue()));\n            const end = endOfDay(start);\n            return this.filterEvents(start, end);\n        })\n    );\n    /** Obsevable for filtered list of bookings of the active week */\n    public readonly filtered_week = this._state.pipe(\n        map(() => {\n            const start = startOfWeek(new Date(this._date.getValue()));\n            const end = endOfWeek(start);\n            return this.filterEvents(start, end);\n        })\n    );\n    /** Obsevable for filtered list of bookings for active month */\n    public readonly filtered_month = this._state.pipe(\n        map(() => {\n            const start = startOfMonth(new Date(this._date.getValue()));\n            const end = endOfMonth(start);\n            return this.filterEvents(start, end);\n        })\n    );\n\n    /** Active filters */\n    public get filters() {\n        return this._filters.getValue();\n    }\n\n    constructor(\n        private _events: EventsService,\n        private _spaces: SpacesService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        /** Generate observable for updating bookings */\n        const search = combineLatest([\n            this._poll,\n            this._zones,\n            this._date,\n        ]).pipe(\n            filter((i) => !!i[0]),\n            debounceTime(500),\n            switchMap(() => {\n                const fzones = this._zones.getValue();\n                if (!fzones || !fzones.length) {\n                    return of([]);\n                }\n                this._loading.next(true);\n                const start = startOfDay(new Date(this._date.getValue()));\n                const end = endOfDay(start);\n                return this._events.query({\n                    zone_ids: fzones.join(','),\n                    period_start: Math.floor(start.valueOf() / 1000),\n                    period_end: Math.floor(end.valueOf() / 1000),\n                });\n            }),\n            catchError(() => of([]))\n        );\n        /** Generate observable for updating bookings */\n        const search_long = combineLatest([\n            this._long_poll,\n            this._zones,\n            this._date,\n        ]).pipe(\n            filter((i) => !!i[0]),\n            debounceTime(500),\n            switchMap((props) => {\n                const type = props[0];\n                const fzones = props[1];\n                if (!fzones || !fzones.length) {\n                    return of([]);\n                }\n                this._loading.next(true);\n                const start = (type === 'week' ? startOfWeek : startOfMonth)(\n                    new Date(props[2])\n                );\n                const end = (type === 'week' ? endOfWeek : endOfMonth)(start);\n                return this._events.query({\n                    zone_ids: fzones.join(','),\n                    period_start: Math.floor(start.valueOf() / 1000),\n                    period_end: Math.floor(end.valueOf() / 1000),\n                });\n            }),\n            catchError(() => of([]))\n        );\n        /** Subscribe to update observable */\n        search.subscribe((events) => {\n            this.processBookings(events);\n            this._loading.next(false);\n        });\n        search_long.subscribe((events) => {\n            this.processBookings(events, this._long_poll.getValue() as any);\n            this._loading.next(false);\n        });\n    }\n\n    /**\n     * Update the booking filters\n     * @param details\n     */\n    public setFilters(details: BookingFilters) {\n        this._filters.next(details);\n    }\n\n    /**\n     * Update the booking date\n     * @param details\n     */\n    public setDate(date: number) {\n        this._date.next(date);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setZones(zones: string[]) {\n        this._zones.next(zones);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setEvent(event: CalendarEvent) {\n        this._event.next(event);\n    }\n\n    /**\n     * Update the booking's zone\n     * @param details\n     */\n    public setUIOptions(options: BookingUIOptions) {\n        const old_options = this._ui_options.getValue();\n        this._ui_options.next({ ...old_options, ...options });\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPolling(delay: number = 10 * 1000) {\n        this._poll.next(true);\n        this.interval('polling', () => this._poll.next(true), delay);\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPollingWeek(delay: number = 30 * 1000) {\n        this._long_poll.next('week');\n        this.interval(\n            'polling_long',\n            () => this._long_poll.next('week'),\n            delay\n        );\n    }\n\n    /**\n     * Start polling to update bookings\n     * @param delay Duration between polling events in milliseconds\n     */\n    public startPollingMonth(delay: number = 5 * 60 * 1000) {\n        this._long_poll.next('month');\n        this.interval(\n            'polling_long',\n            () => this._long_poll.next('month'),\n            delay\n        );\n    }\n\n    /**\n     * Stop polling to update bookings;\n     */\n    public stopPolling() {\n        this._poll.next(false);\n        this.clearInterval('polling');\n        this._long_poll.next('');\n        this.clearInterval('polling_long');\n    }\n\n    public async newBooking(event?: CalendarEvent) {\n        const ref = this._dialog.open(BookingModalComponent, {\n            data: {\n                event,\n            },\n        });\n        const booking: CalendarEvent | null = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (booking instanceof CalendarEvent) {\n            this.replace(booking);\n        }\n    }\n\n    public async removeBooking(event: CalendarEvent) {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            data: {\n                title: 'Delete meeting?',\n                content: `Are you sure you want to delete the meeting at ${format(\n                    new Date(event.date),\n                    'dd MMM yyyy, h:mma'\n                )}<br> in ${event.location}?`,\n                icon: { class: 'material-icons', content: 'delete' },\n            },\n        });\n        const done: boolean | null = await Promise.race([\n            ref.componentInstance.event\n                .pipe(\n                    first((_) => _.reason === 'done'),\n                    map((_) => true)\n                )\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (done) {\n            ref.componentInstance.loading = 'Deleting booking...';\n            await this._events.delete(event.id, { system_id: event.system?.id });\n            this.remove(event);\n            ref.close();\n        }\n    }\n\n    /**\n     * Add booking to bookings listing\n     * @param booking\n     */\n    public add(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings.concat([booking]);\n        this._bookings.next(new_bookings);\n    }\n\n    /**\n     * Update booking in the bookings list\n     * @param booking\n     */\n    public replace(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings\n            .filter((bkn) => bkn.id !== booking.id)\n            .concat([booking]);\n        this._bookings.next(new_bookings);\n    }\n\n    /**\n     * Remove booking in the bookings list\n     * @param booking\n     */\n    public remove(booking: CalendarEvent) {\n        const bookings = this._bookings.getValue();\n        const new_bookings = bookings.filter((bkn) => bkn.id !== booking.id);\n        this._bookings.next(new_bookings);\n    }\n\n    private processBookings(\n        events: CalendarEvent[],\n        period: 'day' | 'week' | 'month' = 'day'\n    ) {\n        const start = (period === 'month'\n            ? startOfMonth\n            : period === 'week'\n            ? startOfWeek\n            : startOfDay)(new Date(this._date.getValue()));\n        const end = (period === 'month'\n            ? endOfMonth\n            : period === 'week'\n            ? endOfWeek\n            : endOfDay)(start);\n        let bookings = this._bookings.getValue();\n        const space_list = unique(\n            flatten(events.map((event) => event.resources)),\n            'email'\n        );\n        space_list.forEach((space) => {\n            bookings = replaceBookings(\n                bookings,\n                events\n                    .filter((bkn) =>\n                        bkn.resources.find((s) => s.email === space.email)\n                    )\n                    .map((bkn) => new CalendarEvent(bkn)),\n                {\n                    space: space.email,\n                    from: start.valueOf(),\n                    to: end.valueOf(),\n                }\n            );\n        });\n        this._bookings.next(bookings);\n    }\n\n    private filterEvents(start: Date, end: Date) {\n        const filters = this._filters.getValue();\n        const bookings = this._bookings.getValue();\n        const fzones = this._zones.getValue();\n        return bookings.filter((bkn) => {\n            const intersects = timePeriodsIntersect(\n                start.valueOf(),\n                end.valueOf(),\n                bkn.date,\n                bkn.date + bkn.duration * 60 * 1000\n            );\n            const in_zone = !!bkn.resources\n                .map((r) => this._spaces.find(r.id))\n                .find((space) => fzones.find((z) => space.zones.includes(z)));\n            const has_space =\n                !filters.space_emails?.length ||\n                !!bkn.resources.find((space) =>\n                    filters.space_emails.includes(space.email)\n                );\n            const in_zones =\n                !filters.zone_ids?.length ||\n                !!bkn.resources.find((space) =>\n                    space.zones.find((zone) => filters.zone_ids.includes(zone))\n                );\n            const type = bkn.has_visitors\n                ? 'external'\n                : bkn.status === 'cancelled'\n                ? 'cancelled'\n                : 'internal';\n            const show =\n                !filters.hide_type?.length ||\n                !filters.hide_type.includes(type as any);\n            return intersects && has_space && in_zone && in_zones && show;\n        });\n    }\n}\n","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the end of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * var result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\n\nexport default function endOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n  date.setDate(date.getDate() + diff);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}"],"sourceRoot":"webpack:///"}