{"version":3,"file":"default-node_modules_angular_cdk_fesm2022_drag-drop_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Injector, afterNextRender, numberAttribute, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = signal(false);\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging()) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging.set(true);\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            deltaX: 0,\n            deltaY: 0,\n            overlaps: false,\n        };\n        /**\n         * Keeps track of the relationship between a node and its next sibling. This information\n         * is used to restore the DOM to the order it was in before dragging started.\n         */\n        this._relatedNodes = [];\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Elements that can be scrolled while the user is dragging. */\n        this._scrollableElements = [];\n        /** Direction of the list's layout. */\n        this._direction = 'ltr';\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = signal([]);\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances().some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._injector = inject(Injector);\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"names":["i0","signal","Component","ViewEncapsulation","ChangeDetectionStrategy","inject","ApplicationRef","EnvironmentInjector","createComponent","Injectable","Inject","InjectionToken","booleanAttribute","Directive","Optional","SkipSelf","Input","EventEmitter","Injector","afterNextRender","numberAttribute","Self","Output","NgModule","DOCUMENT","i1","CdkScrollableModule","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceElement","coerceNumberProperty","coerceArray","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","BehaviorSubject","takeUntil","map","take","tap","switchMap","startWith","i1$1","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","part","trim","Set","PreviewRef","_preview","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","parent","_createPreview","supportsPopover","destroy","remove","_previewEmbeddedView","setTransform","addClass","className","classList","add","getTransitionDuration","addEventListener","handler","removeEventListener","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","scale","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","abs","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","ngDevMode","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_element","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","a","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","MixedSortStrategy","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","_activeItems","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","_rootNode","elementAtPoint","minDistance","Infinity","minIndex","hypot","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","NONE","_horizontalScrollDirection","_stopScrollTimers","_scrollableElements","_startScrollInterval","pipe","_scrollNode","scrollStep","UP","scrollBy","DOWN","LEFT","RIGHT","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_sortStrategy","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","strategy","_container","withScrollableParents","Error","oldContainerIndex","newContainerIndex","unshift","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","activeApps","_ResetsLoader","_","ɵfac","_ResetsLoader_Factory","__ngFactoryType__","_2","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","standalone","features","ɵɵStandaloneFeature","decls","vars","_ResetsLoader_Template","rf","ctx","encapsulation","changeDetection","ɵsetClassMetadata","args","None","OnPush","host","DragDropRegistry","_appRef","_environmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","update","instances","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","componentRef","environmentInjector","onDestroy","DragDropRegistry_Factory","ɵɵinject","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","DragDrop_Factory","ViewportRuler","CDK_DRAG_PARENT","assertElementNode","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","nativeElement","_addHandle","_removeHandle","CdkDragHandle_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","inputs","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","providers","alias","CDK_DRAG_CONFIG","DRAG_HOST_CLASS","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","subscription","movedEvent","_injector","data","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","_updateRootElement","_setupHandlesListener","freeDragPosition","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","rootElementSelector","closest","_getBoundaryElement","boundary","ref","dir","templateRef","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","handleInstance","dragRef","CdkDrag_Factory","ViewContainerRef","Directionality","ChangeDetectorRef","_3","hostVars","hostBindings","CdkDrag_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","elementContainerSelector","querySelector","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","ScrollDispatcher","CdkDropList_HostBindings","ɵɵattribute","useValue","CDK_DRAG_PREVIEW","CdkDragPreview","_drag","optional","CdkDragPreview_Factory","TemplateRef","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","CdkDragPlaceholder_Factory","DRAG_DROP_DIRECTIVES","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}