{"version":3,"file":"default-node_modules_angular_cdk_fesm2022_drag-drop_mjs.js","mappings":"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","names":["dispatch","state","subscriber","counter","period","next","this","schedule","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","map","part","trim","Set","PreviewRef","_preview","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","parent","_createPreview","supportsPopover","showPopover","destroy","remove","_previewEmbeddedView","setTransform","addClass","className","classList","add","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","addEventListener","handler","removeEventListener","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","Array","isArray","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","signal","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","scale","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_getShadowRoot","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","_element","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","MixedSortStrategy","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","_activeItems","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","_rootNode","elementAtPoint","minDistance","Infinity","minIndex","hypot","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_scrollableElements","_startScrollInterval","interval","scheduler","async","isNumeric","Observable","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","scrollBy","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_sortStrategy","_cacheParentPositions","_reset","previousItems","filter","every","connectedTo","strategy","_container","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","activeApps","_ResetsLoader","static","ɵfac","__ngFactoryType__","ɵcmp","i0","selectors","hostAttrs","standalone","features","decls","vars","rf","ctx","encapsulation","changeDetection","DragDropRegistry","_appRef","inject","ApplicationRef","_environmentInjector","EnvironmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","update","instances","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","merge","ngOnDestroy","instance","componentRef","createComponent","environmentInjector","onDestroy","DOCUMENT","ɵprov","token","factory","providedIn","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","_addHandle","_removeHandle","ɵdir","inputs","booleanAttribute","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","BehaviorSubject","EventEmitter","subscription","movedEvent","_injector","Injector","data","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","afterNextRender","_updateRootElement","_setupHandlesListener","freeDragPosition","injector","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","nativeElement","closest","_getBoundaryElement","boundary","ref","dir","templateRef","coerceNumberProperty","take","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","tap","handleElements","switchMap","startWith","handleInstance","dragRef","i1$1","hostVars","hostBindings","numberAttribute","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","elementContainerSelector","querySelector","listAutoScrollDisabled","listOrientation","useValue","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","_drag","optional","DragDropModule","ɵmod","ɵinj","providers","imports","CdkScrollableModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/_esm2015/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Injector, afterNextRender, numberAttribute, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = signal(false);\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging()) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging.set(true);\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            deltaX: 0,\n            deltaY: 0,\n            overlaps: false,\n        };\n        /**\n         * Keeps track of the relationship between a node and its next sibling. This information\n         * is used to restore the DOM to the order it was in before dragging started.\n         */\n        this._relatedNodes = [];\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Elements that can be scrolled while the user is dragging. */\n        this._scrollableElements = [];\n        /** Direction of the list's layout. */\n        this._direction = 'ltr';\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = signal([]);\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances().some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._injector = inject(Injector);\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"x_google_ignoreList":[0,1]}