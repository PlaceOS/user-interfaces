{"version":3,"file":"default-libs_bookings_src_lib_booking-form_service_ts.js","mappings":"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","names":["BOOKING_URLS","BookingFormService","BaseClass","constructor","_router","_settings","_org","_dialog","_payments","super","this","BehaviorSubject","type","generateBookingForm","Booking","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","debounceTime","switchMap","building","of","next","listChildMetadata","id","name","map","data","flatten","_","metadata","desks","details","Array","d","zone","tap","assets","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form","filter","_1","form","getRawValue","date","duration","queryBookings","period_start","getUnixTime","period_end","addMinutes","zones","zone_id","bookings","asset","bookable","every","includes","parent_id","find","bkn","asset_id","status","available_assets","groups","asset_list","members","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","_booking","newForm","valueChanges","storeForm","setView","value","setFeature","feature","enable","splice","findIndex","e","resetForm","patchValue","extension_data","removeItem","setItem","stringify","loadForm","openBookingLinkModal","force","markAllAsTouched","valid","event","open","BookingLinkModalComponent","confirmPost","s","checkQuestions","content","asset_name","format","openConfirmModal","title","icon","reason","loading","i","postFormForGroup","catch","notifyError","close","postForm","ignore_check","getInvalidFields","join","booking_type","checkResourceAvailable","all_day","set","hours","minutes","valueOf","payment_module","receipt","makePayment","resource_name","success","invoice","invoice_id","result","saveBooking","approved","get","toPromise","last_success","extra_members","email","take","active_asset","map_id","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","user_email","user","description","ref","DeskQuestionsModalComponent","race","componentInstance","afterClosed","key","allowed_bookings","current","map_url","count","nearby_assets","item","findNearbyFeature","i0","factory","_event","generateMicrosoftCalendarLink","generateGoogleCalendarLink","generateCalendarFileLink","MAT_DIALOG_DATA","selectors","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","Object","keys","failure","emit"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/booking-link-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from './booking.utilities';\nimport { PaymentsService } from 'libs/payments/src/lib/payments.service';\nimport { BookingLinkModalComponent } from './booking-link-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = [\n    'book/desks',\n    'book/parking',\n    'book/newdesk',\n    'book/new-parking',\n];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: BookingType;\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        debounceTime(300),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n                    break;\n                case 'parking':\n                    this._loading.next(`Loading parking spaces...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'parking_spaces',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n                    break;\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form,\n    ]).pipe(\n        filter(\n            ([_, _1, form]) =>\n                form.getRawValue().date > 0 && form.getRawValue().duration > 0\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.getRawValue().date),\n                period_end: getUnixTime(\n                    addMinutes(\n                        form.getRawValue().date,\n                        form.getRawValue().duration || 24 * 60\n                    )\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _payments: PaymentsService\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public openBookingLinkModal(force: boolean = false) {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.valid && !force) return;\n        const event = new Booking({ ...this.booking, ...form.getRawValue() });\n        this._dialog.open(BookingLinkModalComponent, { data: event });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const value = form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        form.patchValue({\n            booking_type:\n                form.getRawValue().booking_type ||\n                this._options.getValue().type,\n        });\n        const value = form.getRawValue();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        if (this._payments.payment_module) {\n            const receipt = await this._payments.makePayment({\n                type: this._options.getValue().type,\n                resource_name: value.asset_name,\n                date: value.date,\n                duration: value.duration,\n                all_day: value.all_day,\n            });\n            if (!receipt?.success) return;\n            (value as any).extension_data = {\n                invoice: receipt,\n                invoice_id: receipt.invoice_id,\n            };\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(\n            new Booking({\n                ...this._options.getValue(),\n                ...value,\n                approved: !!this._settings.get('app.bookings.no_approval'),\n            })\n        ).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form.getValue().patchValue({\n                ...form,\n                user: user as any,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                description: asset.name,\n                zones: asset.zone\n                    ? [asset.zone?.parent_id, asset.zone?.id]\n                    : [],\n            });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            if (asset_id.includes('@')) {\n                throw `${asset_id} already has an invite for the selected time`;\n            } else {\n                throw `${asset_id} is not available at the selected time`;\n            }\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a ${type} booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport {\n    generateCalendarFileLink,\n    generateGoogleCalendarLink,\n    generateMicrosoftCalendarLink,\n} from 'libs/common/src/lib/calendar-links';\nimport { Booking } from './booking.class';\n\n@Component({\n    selector: 'booking-link-modal',\n    template: `\n        <div class=\"p-4 w-full pb-2\">\n            Add event to your calendar\n        </div>\n        <div class=\"flex flex-col items-center space-y-4 p-4 relative\">\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"outlook_link | sanitize:'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/outlook.svg\" class=\"w-6\" />\n                <span>Create in Outlook</span>\n            </a>\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"google_link | sanitize:'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/gcal.svg\" class=\"w-6\" />\n                <span>Create in Google Calendar</span>\n            </a>\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"ical_link | safe:'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <app-icon class=\"text-xl\">download</app-icon>\n                <span>Download iCal File</span>\n            </a>\n        </div>\n        <button mat-icon-button mat-dialog-close class=\"absolute top-2 right-0\">\n            <app-icon>close</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n        `,\n    ],\n})\nexport class BookingLinkModalComponent {\n    public readonly outlook_link = generateMicrosoftCalendarLink(\n        this._event as any\n    );\n    public readonly google_link = generateGoogleCalendarLink(\n        this._event as any\n    );\n    public readonly ical_link = generateCalendarFileLink(this._event as any);\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _event: Booking,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n"],"x_google_ignoreList":[]}