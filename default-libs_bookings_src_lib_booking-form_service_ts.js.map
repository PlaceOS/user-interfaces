{"version":3,"file":"default-libs_bookings_src_lib_booking-form_service_ts.js","mappings":"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","names":["BOOKING_URLS","BookingFormService","AsyncHandler","view","this","_view","getValue","booking","_booking","newForm","Booking","form","reset","patchValue","cleanObject","extension_data","undefined","subscription","valueChanges","subscribe","storeForm","next","_options","type","constructor","_router","_settings","_org","_dialog","_payments","super","BehaviorSubject","JSON","parse","sessionStorage","getItem","_loading","asObservable","pipe","shareReplay","generateBookingForm","options","debounceTime","distinctUntilKeyChanged","switchMap","building","of","loadResourceList","tap","resource","map","list","features","Array","forEach","_","push","unique","sort","a","b","localeCompare","combineLatest","merge","timer","filter","getRawValue","date","duration","resources","queryBookings","period_start","getUnixTime","period_end","addMinutes","zones","zone_id","bookings","asset","groups","length","some","grp","currentUser","includes","bookable","every","zone","id","parent_id","find","bkn","asset_id","status","available_resources","asset_list","members","group","pop","events","NavigationEnd","url","clearForm","initialised","first","setOptions","setView","value","setFeature","feature","enable","splice","findIndex","e","resetForm","removeItem","setItem","stringify","loadForm","data","clearOldState","last_success","openBookingLinkModal","force","markAllAsTouched","valid","event","open","BookingLinkModalComponent","confirmPost","_this","checkQuestions","content","asset_name","format","details","openConfirmModal","title","icon","reason","loading","postFormForGroup","catch","notifyError","close","postForm","ignore_check","_this2","getInvalidFields","join","booking_type","checkResourceAvailable","all_day","set","hours","minutes","valueOf","payment_module","receipt","makePayment","resource_name","success","invoice","invoice_id","assets","updateAssetRequestsForResource","booked_by_email","host","result","saveBooking","description","user_name","user","name","user_id","department","approved","get","toPromise","_this3","extra_members","email","take","active_resource","map_id","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","user_email","i","organisation","_this4","ref","DeskQuestionsModalComponent","race","componentInstance","afterClosed","key","allowed_bookings","_this5","current","listChildMetadata","flatten","metadata","d","map_url","count","nearby_resources","item","findNearbyFeature","_angular_core__WEBPACK_IMPORTED_MODULE_30__","factory","_event","generateMicrosoftCalendarLink","generateGoogleCalendarLink","generateCalendarFileLink","_angular_core__WEBPACK_IMPORTED_MODULE_6__","MAT_DIALOG_DATA","selectors","$localize","i0","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","Object","keys","failure","emit"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/booking-link-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { cleanObject, listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport {\n    BehaviorSubject,\n    combineLatest,\n    merge,\n    Observable,\n    of,\n    timer,\n} from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from './booking.utilities';\nimport { PaymentsService } from 'libs/payments/src/lib/payments.service';\nimport { BookingLinkModalComponent } from './booking-link-modal.component';\nimport { updateAssetRequestsForResource } from 'libs/assets/src/lib/assets.fn';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = [\n    'book/desks',\n    'book/parking',\n    'book/new-desks',\n    'book/new-parking',\n];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: BookingType;\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    groups?: string[];\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends AsyncHandler {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n    public readonly form = generateBookingForm();\n\n    public readonly resource: Observable<BookingAsset[]> = this.options.pipe(\n        debounceTime(300),\n        distinctUntilKeyChanged('type'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return this.loadResourceList('desks' as any);\n                case 'parking':\n                    this._loading.next(`Loading parking spaces...`);\n                    return this.loadResourceList('parking_spaces' as any);\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.resource.pipe(\n        map((resource) => {\n            const list: string[] = [];\n            for (const { features } of resource) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_resources = combineLatest([\n        this.options,\n        this.resource,\n        merge(this.form.valueChanges, timer(1000)),\n    ]).pipe(\n        filter(\n            () =>\n                this.form.getRawValue().date > 0 &&\n                this.form.getRawValue().duration > 0\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, resources]) =>\n            queryBookings({\n                period_start: getUnixTime(this.form.getRawValue().date),\n                period_end: getUnixTime(\n                    addMinutes(\n                        this.form.getRawValue().date,\n                        this.form.getRawValue().duration || 24 * 60\n                    )\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    resources.filter(\n                        (asset) =>\n                            (!asset.groups?.length ||\n                                asset.groups.some((grp) =>\n                                    currentUser().groups.includes(grp)\n                                )) &&\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_resources,\n    ]).pipe(\n        map(([options, resource]) => {\n            const groups = [];\n            const asset_list = [...resource].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this.form.reset();\n        this.form.patchValue(\n            cleanObject(\n                {\n                    ...booking,\n                    ...booking.extension_data,\n                },\n                [null, undefined, '']\n            )\n        );\n        this.subscription(\n            'form_change',\n            this.form.valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _payments: PaymentsService\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        const booking = this._booking.getValue();\n        this.form.reset();\n        this.form.patchValue(\n            cleanObject(\n                {\n                    ...(booking || {}),\n                    ...(booking?.extension_data || {}),\n                },\n                [null, undefined, '']\n            )\n        );\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this.form.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n    }\n\n    public loadForm() {\n        this.form.reset();\n        const data = JSON.parse(\n            sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n        );\n        const booking = new Booking(data);\n        this._booking.next(booking);\n        this.form.patchValue(\n            cleanObject(\n                {\n                    ...(booking || {}),\n                    ...(booking?.extension_data || {}),\n                },\n                [null, undefined, '']\n            )\n        );\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public clearOldState() {\n        sessionStorage.removeItem('PLACEOS.last_booked_booking');\n        this.last_success = new Booking();\n    }\n\n    public openBookingLinkModal(force: boolean = false) {\n        this.form.markAllAsTouched();\n        if (!this.form.valid && !force) return;\n        const event = new Booking({\n            ...this.booking,\n            ...this.form.getRawValue(),\n        });\n        this._dialog.open(BookingLinkModalComponent, { data: event });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const value = this.form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(JSON.stringify(_));\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(JSON.stringify(_));\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        if (!this.form) throw 'No form for booking';\n        if (!this.form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(\n                this.form\n            ).join(', ')}]`;\n        this.form.patchValue({\n            booking_type:\n                this.form.getRawValue().booking_type ||\n                this._options.getValue().type,\n        });\n        let value = this.form.getRawValue();\n        let booking = this._booking.getValue() || new Booking();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            this.form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n            value = this.form.getRawValue();\n        }\n        if (this._payments.payment_module) {\n            const receipt = await this._payments.makePayment({\n                type: this._options.getValue().type,\n                resource_name: value.asset_name,\n                date: value.date,\n                duration: value.duration,\n                all_day: value.all_day,\n            });\n            if (!receipt?.success) return;\n            (value as any).extension_data = {\n                invoice: receipt,\n                invoice_id: receipt.invoice_id,\n            };\n        }\n        if (value.assets?.length || booking.extension_data.assets?.length) {\n            await updateAssetRequestsForResource(\n                `${value.booked_by_email}|${value.date}`,\n                {\n                    date: value.date,\n                    duration: value.duration,\n                    host: value.booked_by_email,\n                },\n                value.assets,\n                booking.extension_data.assets\n            );\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(\n            new Booking({\n                ...this._options.getValue(),\n                ...value,\n                description: value.asset_name || value.description,\n                user_name: value.user?.name,\n                user_id:\n                    (!value.user?.id?.includes('@') ? value?.user?.id : '') ||\n                    currentUser()?.id,\n                extension_data: {\n                    ...((value as any).extension_data || {}),\n                    department:\n                        value.user?.department || currentUser()?.department,\n                },\n                approved: !!this._settings.get('app.bookings.no_approval'),\n            })\n        ).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        this.form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this.form.value;\n        const asset_list = await this.available_resources\n            .pipe(take(1))\n            .toPromise();\n        const active_resource = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_resource.zone?.id]);\n        const resources = [\n            active_resource,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = unique(\n            [currentUser(), ...extra_members],\n            'email'\n        );\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: resources[idx].map_id || resources[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = resources[i];\n            this.form.patchValue({\n                ...form,\n                user: user as any,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                description: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                zones: asset.zone\n                    ? unique([\n                          this._org.organisation.id,\n                          asset.zone?.parent_id,\n                          asset.zone?.id,\n                      ])\n                    : [this._org.organisation.id],\n            });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            if (asset_id.includes('@')) {\n                throw `${asset_id} already has an invite for the selected time`;\n            } else {\n                throw `${asset_id} is not available at the selected time`;\n            }\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a ${type} booked`;\n        }\n        return true;\n    }\n\n    public loadResourceList(type: BookingType) {\n        return listChildMetadata(this._org.building.id, {\n            name: type,\n        }).pipe(\n            map((data) =>\n                flatten(\n                    data.map((_) =>\n                        (_.metadata[type]?.details instanceof Array\n                            ? _.metadata[type]?.details\n                            : []\n                        ).map((d) => ({ ...d, zone: _.zone }))\n                    )\n                )\n            )\n        );\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        resources: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_resources = [];\n        let asset_list = resources.filter(\n            (_) => _.id !== id && _.map_id !== id\n        );\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_resources.push(\n                    resources.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_resources;\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport {\n    generateCalendarFileLink,\n    generateGoogleCalendarLink,\n    generateMicrosoftCalendarLink,\n} from 'libs/common/src/lib/calendar-links';\nimport { Booking } from './booking.class';\n\n@Component({\n    selector: 'booking-link-modal',\n    template: `\n        <div class=\"p-4 w-full pb-2\">Add event to your calendar</div>\n        <div class=\"flex flex-col items-center space-y-4 p-4 relative\">\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"outlook_link | sanitize: 'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/outlook.svg\" class=\"w-6\" />\n                <span i18n>Create in Outlook</span>\n            </a>\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"google_link | sanitize: 'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/gcal.svg\" class=\"w-6\" />\n                <span i18n>Create in Google Calendar</span>\n            </a>\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"ical_link | safe: 'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <app-icon class=\"text-xl\">download</app-icon>\n                <span i18n>Download iCal File</span>\n            </a>\n        </div>\n        <button icon mat-dialog-close class=\"absolute top-2 right-0\">\n            <app-icon>close</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n        `,\n    ],\n})\nexport class BookingLinkModalComponent {\n    public readonly outlook_link = generateMicrosoftCalendarLink(\n        this._event as any\n    );\n    public readonly google_link = generateGoogleCalendarLink(\n        this._event as any\n    );\n    public readonly ical_link = generateCalendarFileLink(this._event as any);\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _event: Booking,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\" i18n>COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label i18n>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label i18n>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label i18n>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button btn matRipple (click)=\"submit()\" i18n>Submit</button>\n            </footer>\n            <button close icon matRipple mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\" i18n>\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close icon matRipple mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();\n        if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n"],"x_google_ignoreList":[]}